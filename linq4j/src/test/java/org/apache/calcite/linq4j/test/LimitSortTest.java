begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|EnumerableDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Performs a randomized test of {@link EnumerableDefaults#orderBy(Enumerable, Function1, Comparator, int, int)}.  */
end_comment

begin_class
class|class
name|LimitSortTest
block|{
comment|/** Row class. */
specifier|private
specifier|static
class|class
name|Row
block|{
name|String
name|key
decl_stmt|;
name|int
name|index
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|key
operator|+
literal|"/"
operator|+
name|this
operator|.
name|index
return|;
block|}
block|}
specifier|private
name|Stream
argument_list|<
name|Row
argument_list|>
name|rowStream
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1_000_000
argument_list|)
decl_stmt|;
return|return
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
block|{
name|int
name|a
init|=
name|n
operator|<
literal|2
condition|?
literal|0
else|:
name|rnd
operator|.
name|nextInt
argument_list|(
name|n
operator|/
literal|2
argument_list|)
decl_stmt|;
name|String
name|k
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|a
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
name|Row
name|r
init|=
operator|new
name|Row
argument_list|()
decl_stmt|;
name|r
operator|.
name|key
operator|=
literal|""
operator|+
name|k
expr_stmt|;
name|r
operator|.
name|index
operator|=
name|i
expr_stmt|;
return|return
name|r
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|enumerable
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
parameter_list|()
lambda|->
name|this
operator|.
name|rowStream
argument_list|(
name|seed
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|test
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|long
name|seed
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|^
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|randomizedTest
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// replace with AssertionFailedError
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed for seed "
operator|+
name|seed
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|randomizedTest
parameter_list|(
specifier|final
name|long
name|seed
parameter_list|)
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|int
name|fetch
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
literal|10_000
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|tmp
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
literal|10_000
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
operator|(
name|tmp
operator|-
literal|.1
operator|*
name|tmp
operator|)
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
name|Comparator
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|::
name|compare
decl_stmt|;
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|ordered
init|=
name|EnumerableDefaults
operator|.
name|orderBy
argument_list|(
name|this
operator|.
name|enumerable
argument_list|(
name|seed
argument_list|)
argument_list|,
name|s
lambda|->
name|s
operator|.
name|key
argument_list|,
name|cmp
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|result
init|=
name|ordered
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|<=
name|fetch
argument_list|,
literal|"Fetch "
operator|+
name|fetch
operator|+
literal|" has not been respected, result size was "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|", offset "
operator|+
name|offset
argument_list|)
expr_stmt|;
comment|// check result is sorted correctly
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Row
name|left
init|=
name|result
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Row
name|right
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// use left< right instead of<=, as rows might not appear twice
name|assertTrue
argument_list|(
name|isSmaller
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
argument_list|,
literal|"The following elements have not been ordered correctly: "
operator|+
name|left
operator|+
literal|" "
operator|+
name|right
argument_list|)
expr_stmt|;
block|}
comment|// check offset and fetch size have been respected
name|Row
name|first
decl_stmt|;
name|Row
name|last
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// may happen if the offset is bigger than the number of items
name|first
operator|=
literal|null
expr_stmt|;
name|last
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|last
operator|=
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|totalItems
init|=
literal|0
decl_stmt|;
name|int
name|actOffset
init|=
literal|0
decl_stmt|;
name|int
name|actFetch
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Row
name|r
range|:
operator|(
name|Iterable
argument_list|<
name|Row
argument_list|>
operator|)
name|this
operator|.
name|rowStream
argument_list|(
name|seed
argument_list|)
operator|::
name|iterator
control|)
block|{
name|totalItems
operator|++
expr_stmt|;
if|if
condition|(
name|isSmaller
argument_list|(
name|r
argument_list|,
name|first
argument_list|)
condition|)
block|{
name|actOffset
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|isSmallerEq
argument_list|(
name|r
argument_list|,
name|last
argument_list|)
condition|)
block|{
name|actFetch
operator|++
expr_stmt|;
block|}
block|}
comment|// we can skip at most 'totalItems'
name|int
name|expOffset
init|=
name|Math
operator|.
name|min
argument_list|(
name|offset
argument_list|,
name|totalItems
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expOffset
argument_list|,
name|actOffset
argument_list|,
literal|"Offset has not been respected."
argument_list|)
expr_stmt|;
comment|// we can only fetch items if there are enough
name|int
name|expFetch
init|=
name|Math
operator|.
name|min
argument_list|(
name|totalItems
operator|-
name|expOffset
argument_list|,
name|fetch
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expFetch
argument_list|,
name|actFetch
argument_list|,
literal|"Fetch has not been respected."
argument_list|)
expr_stmt|;
block|}
comment|/** A comparison function that takes the order of creation into account. */
specifier|private
specifier|static
name|boolean
name|isSmaller
parameter_list|(
name|Row
name|left
parameter_list|,
name|Row
name|right
parameter_list|)
block|{
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|c
init|=
name|left
operator|.
name|key
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
operator|<
literal|0
return|;
block|}
return|return
name|left
operator|.
name|index
operator|<
name|right
operator|.
name|index
return|;
block|}
comment|/** See {@link #isSmaller(Row, Row)}. */
specifier|private
specifier|static
name|boolean
name|isSmallerEq
parameter_list|(
name|Row
name|left
parameter_list|,
name|Row
name|right
parameter_list|)
block|{
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|c
init|=
name|left
operator|.
name|key
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
operator|<
literal|0
return|;
block|}
return|return
name|left
operator|.
name|index
operator|<=
name|right
operator|.
name|index
return|;
block|}
block|}
end_class

end_unit

