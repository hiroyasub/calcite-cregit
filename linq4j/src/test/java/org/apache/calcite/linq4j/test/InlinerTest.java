begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|CatchBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|DeclarationStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|ONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|TRUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|TWO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests expression inlining in BlockBuilder.  */
end_comment

begin_class
specifier|public
class|class
name|InlinerTest
block|{
name|BlockBuilder
name|b
decl_stmt|;
annotation|@
name|BeforeEach
specifier|public
name|void
name|prepareBuilder
parameter_list|()
block|{
name|b
operator|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInlineSingleUsage
parameter_list|()
block|{
name|DeclarationStatement
name|decl
init|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|16
argument_list|,
literal|"x"
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|decl
operator|.
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return 1 + 2;\n}\n"
argument_list|,
name|b
operator|.
name|toBlock
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInlineConstant
parameter_list|()
block|{
name|DeclarationStatement
name|decl
init|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|16
argument_list|,
literal|"x"
argument_list|,
name|ONE
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|decl
operator|.
name|parameter
argument_list|,
name|decl
operator|.
name|parameter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return 1 + 1;\n}\n"
argument_list|,
name|b
operator|.
name|toBlock
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInlineParameter
parameter_list|()
block|{
name|ParameterExpression
name|pe
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"p"
argument_list|)
decl_stmt|;
name|DeclarationStatement
name|decl
init|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|16
argument_list|,
literal|"x"
argument_list|,
name|pe
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|decl
operator|.
name|parameter
argument_list|,
name|decl
operator|.
name|parameter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return p + p;\n}\n"
argument_list|,
name|b
operator|.
name|toBlock
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInlineMultipleUsage
parameter_list|()
block|{
name|ParameterExpression
name|p1
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|p2
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|DeclarationStatement
name|decl
init|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|16
argument_list|,
literal|"x"
argument_list|,
name|Expressions
operator|.
name|subtract
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|decl
operator|.
name|parameter
argument_list|,
name|decl
operator|.
name|parameter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  final int x = p1 - p2;\n"
operator|+
literal|"  return x + x;\n"
operator|+
literal|"}\n"
argument_list|,
name|b
operator|.
name|toBlock
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssignInConditionMultipleUsage
parameter_list|()
block|{
comment|// int t;
comment|// return (t = 1) != a ? t : c
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|t
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|t
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|v
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"v"
argument_list|,
name|Expressions
operator|.
name|makeTernary
argument_list|(
name|ExpressionType
operator|.
name|Conditional
argument_list|,
name|Expressions
operator|.
name|makeBinary
argument_list|(
name|ExpressionType
operator|.
name|NotEqual
argument_list|,
name|Expressions
operator|.
name|assign
argument_list|(
name|t
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|t
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  int t;\n"
operator|+
literal|"  return (t = 1) != a ? t : c;\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssignInConditionOptimizedOut
parameter_list|()
block|{
name|checkAssignInConditionOptimizedOut
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
literal|"{\n"
operator|+
literal|"  return 1 != a ? b : c;\n"
operator|+
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssignInConditionNotOptimizedWithoutFinal
parameter_list|()
block|{
name|checkAssignInConditionOptimizedOut
argument_list|(
literal|0
argument_list|,
literal|"{\n"
operator|+
literal|"  int t;\n"
operator|+
literal|"  return (t = 1) != a ? b : c;\n"
operator|+
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
name|void
name|checkAssignInConditionOptimizedOut
parameter_list|(
name|int
name|modifiers
parameter_list|,
name|String
name|s
parameter_list|)
block|{
comment|// int t;
comment|// return (t = 1) != a ? b : c
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|t
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|modifiers
argument_list|,
name|t
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|v
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"v"
argument_list|,
name|Expressions
operator|.
name|makeTernary
argument_list|(
name|ExpressionType
operator|.
name|Conditional
argument_list|,
name|Expressions
operator|.
name|makeBinary
argument_list|(
name|ExpressionType
operator|.
name|NotEqual
argument_list|,
name|Expressions
operator|.
name|assign
argument_list|(
name|t
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|equalTo
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssignInConditionMultipleUsageNonOptimized
parameter_list|()
block|{
comment|// int t = 2;
comment|// return (t = 1) != a ? 1 : c
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|t
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|t
argument_list|,
name|TWO
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|v
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"v"
argument_list|,
name|Expressions
operator|.
name|makeTernary
argument_list|(
name|ExpressionType
operator|.
name|Conditional
argument_list|,
name|Expressions
operator|.
name|makeBinary
argument_list|(
name|ExpressionType
operator|.
name|NotEqual
argument_list|,
name|Expressions
operator|.
name|assign
argument_list|(
name|t
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|t
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  int t = 2;\n"
operator|+
literal|"  return (t = 1) != a ? t : c;\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiPassOptimization
parameter_list|()
block|{
comment|// int t = u + v;
comment|// boolean b = t> 1 ? true : true; -- optimized out, thus t can be inlined
comment|// return b ? t : 2
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|u
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"u"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|v
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|Expression
name|t
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"t"
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|u
argument_list|,
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"b"
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|greaterThan
argument_list|(
name|t
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|b
argument_list|,
name|t
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return u + v;\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInlineInTryCatchStatement
parameter_list|()
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|t
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|t
argument_list|,
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|u
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"u"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|u
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Statement
name|st
init|=
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|u
argument_list|,
name|Expressions
operator|.
name|makeBinary
argument_list|(
name|ExpressionType
operator|.
name|Add
argument_list|,
name|t
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ParameterExpression
name|e
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|Exception
operator|.
name|class
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|CatchBlock
name|cb
init|=
name|Expressions
operator|.
name|catch_
argument_list|(
name|e
argument_list|,
name|Expressions
operator|.
name|throw_
argument_list|(
name|e
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|tryCatch
argument_list|(
name|st
argument_list|,
name|cb
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  final int u;\n"
operator|+
literal|"  try {\n"
operator|+
literal|"    u = 1 + 2;\n"
operator|+
literal|"  } catch (Exception e) {\n"
operator|+
literal|"    throw e;\n"
operator|+
literal|"  }\n"
operator|+
literal|"  return u;\n"
operator|+
literal|"}\n"
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

