begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Deterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|NonDeterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Blocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ClassDeclarationFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|DeterministicCodeOptimizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|FOUR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|ONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|THREE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|TWO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|optimize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|optimizeExpression
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Tests factoring out deterministic expressions.  */
end_comment

begin_class
class|class
name|DeterministicTest
block|{
comment|/** Class to test {@code @Deterministic} annotation. */
specifier|public
specifier|static
class|class
name|TestClass
block|{
annotation|@
name|Deterministic
specifier|public
specifier|static
name|int
name|deterministic
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
name|a
operator|+
literal|1
return|;
block|}
specifier|public
specifier|static
name|int
name|nonDeterministic
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
name|a
operator|+
literal|2
return|;
block|}
block|}
comment|/** Class to test {@code @NonDeterministic} annotation. */
annotation|@
name|Deterministic
specifier|public
specifier|static
class|class
name|TestDeterministicClass
block|{
specifier|public
specifier|static
name|int
name|deterministic
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
name|a
operator|+
literal|1
return|;
block|}
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|int
name|nonDeterministic
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
name|a
operator|+
literal|2
return|;
block|}
block|}
specifier|private
name|boolean
name|isAtomic
parameter_list|(
name|Expression
name|e
parameter_list|)
block|{
comment|/** Subclass to make a protected method public. */
class|class
name|MyDeterministicCodeOptimizer
extends|extends
name|DeterministicCodeOptimizer
block|{
name|MyDeterministicCodeOptimizer
parameter_list|()
block|{
name|super
argument_list|(
name|ClassDeclarationFinder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConstant
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|super
operator|.
name|isConstant
argument_list|(
name|expression
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|MyDeterministicCodeOptimizer
argument_list|()
operator|.
name|isConstant
argument_list|(
name|e
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Method
name|getMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|thisClass
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|paramClasses
parameter_list|)
block|{
try|try
block|{
return|return
name|thisClass
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|paramClasses
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isConstant
parameter_list|(
name|Expression
name|e
parameter_list|)
block|{
name|Expression
name|e2
init|=
name|e
operator|.
name|accept
argument_list|(
operator|new
name|DeterministicCodeOptimizer
argument_list|(
name|ClassDeclarationFinder
operator|.
name|create
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|!
name|e
operator|.
name|equals
argument_list|(
name|e2
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testConstantIsConstant
parameter_list|()
block|{
comment|// Small expressions are atomic.
name|assertThat
argument_list|(
name|isAtomic
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isAtomic
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"xxx"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isAtomic
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|e
init|=
name|Expressions
operator|.
name|call
argument_list|(
name|getMethod
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|-
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|isAtomic
argument_list|(
name|e
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isConstant
argument_list|(
name|e
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isAtomic
argument_list|(
name|e
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isConstant
argument_list|(
name|e
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"xxx"
argument_list|)
argument_list|,
literal|"length"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isAtomic
argument_list|(
name|e
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isConstant
argument_list|(
name|e
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testFactorOutBinaryAdd
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$1_2;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int $L4J$C$1_2 = 1 + 2;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testFactorOutBinaryAddSurvivesMultipleOptimizations
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|optimizeExpression
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$1_2;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int $L4J$C$1_2 = 1 + 2;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testFactorOutBinaryAddNameCollision
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|Expressions
operator|.
name|subtract
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$1_2_1_20;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int $L4J$C$1_2 = 1 + 2;\n"
operator|+
literal|"      static final int $L4J$C$1_20 = 1 - 2;\n"
operator|+
literal|"      static final int $L4J$C$1_2_1_20 = $L4J$C$1_2 * $L4J$C$1_20;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testFactorOutBinaryAddMul
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|THREE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$1_2_3;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int $L4J$C$1_2 = 1 + 2;\n"
operator|+
literal|"      static final int $L4J$C$1_2_3 = $L4J$C$1_2 * 3;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testFactorOutNestedClasses
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|FOUR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Callable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|Object
operator|.
name|class
argument_list|,
literal|"call"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|THREE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"call"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$1_4 + new java.util.concurrent.Callable(){\n"
operator|+
literal|"            Object call() {\n"
operator|+
literal|"              return $L4J$C$1_2_3;\n"
operator|+
literal|"            }\n"
operator|+
literal|"\n"
operator|+
literal|"            static final int $L4J$C$1_2 = 1 + 2;\n"
operator|+
literal|"            static final int $L4J$C$1_2_3 = $L4J$C$1_2 * 3;\n"
operator|+
literal|"          }.call();\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int $L4J$C$1_4 = 1 + 4;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testNewBigInteger
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"42"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$new_java_math_BigInteger_42_;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"$L4J$C$new_java_math_BigInteger_42_ = new java.math.BigInteger(\n"
operator|+
literal|"        \"42\");\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testInstanceofTest
parameter_list|()
block|{
comment|// Single instanceof is not optimized
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|typeIs
argument_list|(
name|ONE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return 1 instanceof Boolean;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testInstanceofComplexTest
parameter_list|()
block|{
comment|// instanceof is optimized in complex expressions
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|Expressions
operator|.
name|typeIs
argument_list|(
name|ONE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|typeIs
argument_list|(
name|TWO
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$1_instanceof_Boolean_2_instanceof_Integer;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final boolean "
operator|+
literal|"$L4J$C$1_instanceof_Boolean_2_instanceof_Integer = 1 instanceof "
operator|+
literal|"Boolean || 2 instanceof Integer;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testIntegerValueOfZeroComplexTest
parameter_list|()
block|{
comment|// Integer.valueOf(0) is optimized in complex expressions
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|getMethod
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$Integer_valueOf_0_;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final Integer $L4J$C$Integer_valueOf_0_ = Integer.valueOf(0);\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testStaticField
parameter_list|()
block|{
comment|// instanceof is optimized in complex expressions
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|BigInteger
operator|.
name|class
argument_list|,
literal|"ONE"
argument_list|)
argument_list|,
literal|"add"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|42L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return "
operator|+
literal|"$L4J$C$java_math_BigInteger_ONE_add_java_math_BigInteger_valueOf_42L_;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"$L4J$C$java_math_BigInteger_valueOf_42L_ = java.math.BigInteger"
operator|+
literal|".valueOf(42L);\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"$L4J$C$java_math_BigInteger_ONE_add_java_math_BigInteger_valueOf_42L_ = java.math.BigInteger.ONE.add($L4J$C$java_math_BigInteger_valueOf_42L_);\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testBigIntegerValueOf
parameter_list|()
block|{
comment|// instanceof is optimized in complex expressions
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|42L
argument_list|)
argument_list|)
argument_list|,
literal|"add"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|42L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return "
operator|+
literal|"$L4J$C$java_math_BigInteger_valueOf_42L_add_java_math_BigInteger_valued8d57d69;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"$L4J$C$java_math_BigInteger_valueOf_42L_ = java.math.BigInteger"
operator|+
literal|".valueOf(42L);\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"$L4J$C$java_math_BigInteger_valueOf_42L_add_java_math_BigInteger_valued8d57d69 = $L4J$C$java_math_BigInteger_valueOf_42L_.add($L4J$C$java_math_BigInteger_valueOf_42L_);\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testDeterministicMethodCall
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|TestClass
operator|.
name|class
argument_list|,
literal|"deterministic"
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$org_apache_calcite_linq4j_test_DeterministicTest_TestClass_dete33e8af1c;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int $L4J$C$org_apache_calcite_linq4j_test_DeterministicTest_TestClass_dete33e8af1c = org.apache.calcite.linq4j.test.DeterministicTest.TestClass.deterministic(1);\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testNonDeterministicMethodCall
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|TestClass
operator|.
name|class
argument_list|,
literal|"nonDeterministic"
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return org.apache.calcite.linq4j.test.DeterministicTest.TestClass.nonDeterministic(1);\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testDeterministicClassDefaultMethod
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|TestDeterministicClass
operator|.
name|class
argument_list|,
literal|"deterministic"
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return $L4J$C$org_apache_calcite_linq4j_test_DeterministicTest_TestDeterminis9de610da;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int $L4J$C$org_apache_calcite_linq4j_test_DeterministicTest_TestDeterminis9de610da = org.apache.calcite.linq4j.test.DeterministicTest.TestDeterministicClass.deterministic(1);\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testDeterministicClassNonDeterministicMethod
parameter_list|()
block|{
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|TestDeterministicClass
operator|.
name|class
argument_list|,
literal|"nonDeterministic"
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return org.apache.calcite.linq4j.test.DeterministicTest.TestDeterministicClass.nonDeterministic(1);\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

