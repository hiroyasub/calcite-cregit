begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/** Tests for {@link org.apache.calcite.linq4j.MemoryEnumerable} */
end_comment

begin_class
specifier|public
class|class
name|MemoryEnumerableTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHistoryAndFuture
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Integer
argument_list|>
name|input
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|MemoryEnumerable
argument_list|<
name|Integer
argument_list|>
name|integers
init|=
operator|new
name|MemoryEnumerable
argument_list|<>
argument_list|(
name|input
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|MemoryFactory
operator|.
name|Memory
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|enumerator
init|=
name|integers
operator|.
name|enumerator
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MemoryFactory
operator|.
name|Memory
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
specifier|final
name|MemoryFactory
operator|.
name|Memory
argument_list|<
name|Integer
argument_list|>
name|current
init|=
name|enumerator
operator|.
name|current
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// First entry
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Last entry
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|results
operator|.
name|get
argument_list|(
literal|99
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|results
operator|.
name|get
argument_list|(
literal|99
argument_list|)
operator|.
name|get
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|97
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|99
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModularInteger
parameter_list|()
block|{
specifier|final
name|ModularInteger
name|modularInteger
init|=
operator|new
name|ModularInteger
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|modularInteger
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"4 mod 5"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ModularInteger
name|plus
init|=
name|modularInteger
operator|.
name|plus
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|plus
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"0 mod 5"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ModularInteger
name|minus
init|=
name|modularInteger
operator|.
name|plus
argument_list|(
operator|-
literal|6
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|minus
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3 mod 5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End MemoryEnumerableTest.java
end_comment

end_unit

