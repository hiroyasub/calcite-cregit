begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|EnumerableDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|ExtendedEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Grouping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryableDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|EqualityComparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function0
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|IntegerFunction1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|Linq4jExample
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|sameInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNot
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for LINQ4J.  */
end_comment

begin_class
specifier|public
class|class
name|Linq4jTest
block|{
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
name|EMP_NAME_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|name
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
name|EMP_DEPTNO_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|deptno
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
name|EMP_EMPNO_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|empno
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Department
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|>
name|DEPT_EMPLOYEES_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Department
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|apply
parameter_list|(
name|Department
name|a0
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|a0
operator|.
name|employees
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Department
argument_list|,
name|String
argument_list|>
name|DEPT_NAME_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Department
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
return|return
name|department
operator|.
name|name
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|DEPT_DEPTNO_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
return|return
name|department
operator|.
name|deptno
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|IntegerFunction1
argument_list|<
name|Department
argument_list|>
name|DEPT_DEPTNO_SELECTOR2
init|=
operator|new
name|IntegerFunction1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|apply
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
return|return
name|department
operator|.
name|deptno
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
name|ONE_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Object
name|employee
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function2
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Integer
argument_list|>
name|PAIR_SELECTOR
init|=
operator|new
name|Function2
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Object
name|employee
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSelect
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|select
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Bill, Eric, Janet]"
argument_list|,
name|names
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhere
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|deptno
operator|<
literal|15
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Eric, Janet]"
argument_list|,
name|names
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhereIndexed
parameter_list|()
block|{
comment|// Returns every other employee.
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate2
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|,
name|Integer
name|n
parameter_list|)
block|{
return|return
name|n
operator|%
literal|2
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Eric]"
argument_list|,
name|names
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectMany
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameSeqs
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|selectMany
argument_list|(
name|DEPT_EMPLOYEES_SELECTOR
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
literal|"#"
operator|+
name|v2
operator|+
literal|": "
operator|+
name|v1
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[#0: Fred, #1: Eric, #2: Janet, #3: Bill]"
argument_list|,
name|nameSeqs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCount
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountPredicate
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|count
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|employees
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongCount
parameter_list|()
block|{
specifier|final
name|long
name|count
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|longCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongCountPredicate
parameter_list|()
block|{
specifier|final
name|long
name|count
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|longCount
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|employees
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllPredicate
parameter_list|()
block|{
name|Predicate1
argument_list|<
name|Employee
argument_list|>
name|allEmpnoGE100
init|=
operator|new
name|Predicate1
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|emp
parameter_list|)
block|{
return|return
name|emp
operator|.
name|empno
operator|>=
literal|100
return|;
block|}
block|}
decl_stmt|;
name|Predicate1
argument_list|<
name|Employee
argument_list|>
name|allEmpnoGT100
init|=
operator|new
name|Predicate1
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|emp
parameter_list|)
block|{
return|return
name|emp
operator|.
name|empno
operator|>
literal|100
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|all
argument_list|(
name|allEmpnoGE100
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|all
argument_list|(
name|allEmpnoGT100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAny
parameter_list|()
block|{
name|List
argument_list|<
name|Employee
argument_list|>
name|emptyList
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emptyList
argument_list|)
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnyPredicate
parameter_list|()
block|{
name|Predicate1
argument_list|<
name|Department
argument_list|>
name|deptoNameIT
init|=
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|!=
literal|null
operator|&&
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"IT"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Predicate1
argument_list|<
name|Department
argument_list|>
name|deptoNameSales
init|=
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|!=
literal|null
operator|&&
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|any
argument_list|(
name|deptoNameIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|any
argument_list|(
name|deptoNameSales
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAverageSelector
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|average
argument_list|(
name|DEPT_DEPTNO_SELECTOR2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMin
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|select
argument_list|(
name|DEPT_DEPTNO_SELECTOR
argument_list|)
operator|.
name|min
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinSelector
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|min
argument_list|(
name|DEPT_DEPTNO_SELECTOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinSelector2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|min
argument_list|(
name|DEPT_DEPTNO_SELECTOR2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMax
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|30
argument_list|,
operator|(
name|int
operator|)
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|select
argument_list|(
name|DEPT_DEPTNO_SELECTOR
argument_list|)
operator|.
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxSelector
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|30
argument_list|,
operator|(
name|int
operator|)
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|max
argument_list|(
name|DEPT_DEPTNO_SELECTOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxSelector2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|max
argument_list|(
name|DEPT_DEPTNO_SELECTOR2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregate
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Sales,HR,Marketing"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|select
argument_list|(
name|DEPT_NAME_SELECTOR
argument_list|)
operator|.
name|aggregate
argument_list|(
literal|null
argument_list|,
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|==
literal|null
condition|?
name|v2
else|:
name|v1
operator|+
literal|","
operator|+
name|v2
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToMap
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
name|map
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toMap
argument_list|(
name|EMP_EMPNO_SELECTOR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|110
argument_list|)
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Bill"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToMapWithComparer
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"far"
argument_list|)
argument_list|)
operator|.
name|toMap
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
operator|.
name|compare
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
name|Objects
operator|.
name|hashCode
argument_list|(
literal|null
argument_list|)
else|:
name|s
operator|.
name|toLowerCase
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"FOO"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToMap2
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toMap
argument_list|(
name|EMP_EMPNO_SELECTOR
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|110
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToMap2WithComparer
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"far"
argument_list|)
argument_list|)
operator|.
name|toMap
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|,
operator|new
name|Function1
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|x
parameter_list|)
block|{
return|return
name|x
operator|==
literal|null
condition|?
literal|null
else|:
name|x
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
operator|.
name|compare
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
name|Objects
operator|.
name|hashCode
argument_list|(
literal|null
argument_list|)
else|:
name|s
operator|.
name|toLowerCase
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"FOO"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToLookup
parameter_list|()
block|{
specifier|final
name|Lookup
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
name|lookup
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toLookup
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
name|grouping
range|:
name|lookup
control|)
block|{
operator|++
name|n
expr_stmt|;
switch|switch
condition|(
name|grouping
operator|.
name|getKey
argument_list|()
condition|)
block|{
case|case
literal|10
case|:
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|grouping
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|30
case|:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|grouping
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unknown department number "
operator|+
name|grouping
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|n
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToLookupSelector
parameter_list|()
block|{
specifier|final
name|Lookup
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|lookup
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toLookup
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|EMP_NAME_SELECTOR
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|grouping
range|:
name|lookup
control|)
block|{
operator|++
name|n
expr_stmt|;
switch|switch
condition|(
name|grouping
operator|.
name|getKey
argument_list|()
condition|)
block|{
case|case
literal|10
case|:
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|grouping
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Fred"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Eric"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Janet"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Bill"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|30
case|:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|grouping
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Bill"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Fred"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unknown department number "
operator|+
name|grouping
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|n
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[10:3, 30:1]"
argument_list|,
name|lookup
operator|.
name|applyResultSelector
argument_list|(
operator|new
name|Function2
argument_list|<
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|Enumerable
argument_list|<
name|String
argument_list|>
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|+
literal|":"
operator|+
name|v2
operator|.
name|count
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|Employee
name|e
init|=
name|emps
index|[
literal|1
index|]
decl_stmt|;
name|Employee
name|employeeClone
init|=
operator|new
name|Employee
argument_list|(
name|e
operator|.
name|empno
argument_list|,
name|e
operator|.
name|name
argument_list|,
name|e
operator|.
name|deptno
argument_list|)
decl_stmt|;
name|Employee
name|employeeOther
init|=
name|badEmps
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|employeeClone
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|contains
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|contains
argument_list|(
name|employeeClone
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|contains
argument_list|(
name|employeeOther
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContainsWithEqualityComparer
parameter_list|()
block|{
name|EqualityComparer
argument_list|<
name|Employee
argument_list|>
name|compareByEmpno
init|=
operator|new
name|EqualityComparer
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|Employee
name|e1
parameter_list|,
name|Employee
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|!=
literal|null
operator|&&
name|e2
operator|!=
literal|null
operator|&&
name|e1
operator|.
name|empno
operator|==
name|e2
operator|.
name|empno
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|Employee
name|t
parameter_list|)
block|{
return|return
name|t
operator|==
literal|null
condition|?
literal|0x789d
else|:
name|t
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Employee
name|e
init|=
name|emps
index|[
literal|1
index|]
decl_stmt|;
name|Employee
name|employeeClone
init|=
operator|new
name|Employee
argument_list|(
name|e
operator|.
name|empno
argument_list|,
name|e
operator|.
name|name
argument_list|,
name|e
operator|.
name|deptno
argument_list|)
decl_stmt|;
name|Employee
name|employeeOther
init|=
name|badEmps
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|employeeClone
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|contains
argument_list|(
name|e
argument_list|,
name|compareByEmpno
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|contains
argument_list|(
name|employeeClone
argument_list|,
name|compareByEmpno
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|contains
argument_list|(
name|employeeOther
argument_list|,
name|compareByEmpno
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirst
parameter_list|()
block|{
name|Employee
name|e
init|=
name|emps
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|emps
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|Department
name|d
init|=
name|depts
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|depts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerable
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
comment|// close occurs if first throws
specifier|final
name|int
index|[]
name|closeCount
init|=
block|{
literal|0
block|}
decl_stmt|;
try|try
block|{
name|String
name|s
init|=
name|myEnumerable
argument_list|(
name|closeCount
argument_list|,
literal|0
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|assertThat
argument_list|(
name|closeCount
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// close occurs if first does not throw
name|closeCount
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|myEnumerable
argument_list|(
name|closeCount
argument_list|,
literal|1
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|equalTo
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|closeCount
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Enumerable
argument_list|<
name|String
argument_list|>
name|myEnumerable
parameter_list|(
specifier|final
name|int
index|[]
name|closes
parameter_list|,
specifier|final
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|String
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|public
name|String
name|current
parameter_list|()
block|{
return|return
literal|"x"
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
name|i
operator|++
operator|<
name|size
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
operator|++
name|closes
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstPredicate1
parameter_list|()
block|{
name|Predicate1
argument_list|<
name|String
argument_list|>
name|startWithS
init|=
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|!=
literal|null
operator|&&
name|Character
operator|.
name|toString
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
literal|"S"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Predicate1
argument_list|<
name|Integer
argument_list|>
name|numberGT15
init|=
operator|new
name|Predicate1
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{
return|return
name|i
operator|>
literal|15
return|;
block|}
block|}
decl_stmt|;
name|String
index|[]
name|people
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|,
literal|"Simpsom"
block|}
decl_stmt|;
name|String
index|[]
name|peopleWithoutCharS
init|=
block|{
literal|"Brill"
block|,
literal|"Andrew"
block|,
literal|"Alice"
block|}
decl_stmt|;
name|Integer
index|[]
name|numbers
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|,
literal|25
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|people
index|[
literal|1
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|people
argument_list|)
operator|.
name|first
argument_list|(
name|startWithS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numbers
index|[
literal|3
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|first
argument_list|(
name|numberGT15
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|peopleWithoutCharS
argument_list|)
operator|.
name|first
argument_list|(
name|startWithS
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, but got"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstOrDefault
parameter_list|()
block|{
name|String
index|[]
name|people
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|,
literal|"Simpsom"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
block|{}
decl_stmt|;
name|Integer
index|[]
name|numbers
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|,
literal|25
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|people
index|[
literal|0
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|people
argument_list|)
operator|.
name|firstOrDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numbers
index|[
literal|0
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|firstOrDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|empty
argument_list|)
operator|.
name|firstOrDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstOrDefaultPredicate1
parameter_list|()
block|{
name|Predicate1
argument_list|<
name|String
argument_list|>
name|startWithS
init|=
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|!=
literal|null
operator|&&
name|Character
operator|.
name|toString
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
literal|"S"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Predicate1
argument_list|<
name|Integer
argument_list|>
name|numberGT15
init|=
operator|new
name|Predicate1
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{
return|return
name|i
operator|>
literal|15
return|;
block|}
block|}
decl_stmt|;
name|String
index|[]
name|people
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|,
literal|"Simpsom"
block|}
decl_stmt|;
name|String
index|[]
name|peopleWithoutCharS
init|=
block|{
literal|"Brill"
block|,
literal|"Andrew"
block|,
literal|"Alice"
block|}
decl_stmt|;
name|Integer
index|[]
name|numbers
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|,
literal|25
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|people
index|[
literal|1
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|people
argument_list|)
operator|.
name|firstOrDefault
argument_list|(
name|startWithS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numbers
index|[
literal|3
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|firstOrDefault
argument_list|(
name|numberGT15
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|peopleWithoutCharS
argument_list|)
operator|.
name|firstOrDefault
argument_list|(
name|startWithS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingle
parameter_list|()
block|{
name|String
index|[]
name|person
init|=
block|{
literal|"Smith"
block|}
decl_stmt|;
name|String
index|[]
name|people
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|,
literal|"Simpson"
block|}
decl_stmt|;
name|Integer
index|[]
name|number
init|=
block|{
literal|20
block|}
decl_stmt|;
name|Integer
index|[]
name|numbers
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|person
index|[
literal|0
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|person
argument_list|)
operator|.
name|single
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|number
index|[
literal|0
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|number
argument_list|)
operator|.
name|single
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|people
argument_list|)
operator|.
name|single
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, but got"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|int
name|i
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|single
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, but got"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleOrDefault
parameter_list|()
block|{
name|String
index|[]
name|person
init|=
block|{
literal|"Smith"
block|}
decl_stmt|;
name|String
index|[]
name|people
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|,
literal|"Simpson"
block|}
decl_stmt|;
name|Integer
index|[]
name|number
init|=
block|{
literal|20
block|}
decl_stmt|;
name|Integer
index|[]
name|numbers
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|person
index|[
literal|0
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|person
argument_list|)
operator|.
name|singleOrDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|number
index|[
literal|0
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|number
argument_list|)
operator|.
name|singleOrDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|people
argument_list|)
operator|.
name|singleOrDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|singleOrDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSinglePredicate1
parameter_list|()
block|{
name|Predicate1
argument_list|<
name|String
argument_list|>
name|startWithS
init|=
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|!=
literal|null
operator|&&
name|Character
operator|.
name|toString
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
literal|"S"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Predicate1
argument_list|<
name|Integer
argument_list|>
name|numberGT15
init|=
operator|new
name|Predicate1
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{
return|return
name|i
operator|>
literal|15
return|;
block|}
block|}
decl_stmt|;
name|String
index|[]
name|people
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|}
decl_stmt|;
name|String
index|[]
name|twoPeopleWithCharS
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|,
literal|"Simpson"
block|}
decl_stmt|;
name|String
index|[]
name|peopleWithoutCharS
init|=
block|{
literal|"Brill"
block|,
literal|"Andrew"
block|,
literal|"Alice"
block|}
decl_stmt|;
name|Integer
index|[]
name|numbers
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|}
decl_stmt|;
name|Integer
index|[]
name|numbersWithoutGT15
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|}
decl_stmt|;
name|Integer
index|[]
name|numbersWithTwoGT15
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|,
literal|25
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|people
index|[
literal|1
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|people
argument_list|)
operator|.
name|single
argument_list|(
name|startWithS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numbers
index|[
literal|3
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|single
argument_list|(
name|numberGT15
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|twoPeopleWithCharS
argument_list|)
operator|.
name|single
argument_list|(
name|startWithS
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, but got"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|int
name|i
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbersWithTwoGT15
argument_list|)
operator|.
name|single
argument_list|(
name|numberGT15
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, but got"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|peopleWithoutCharS
argument_list|)
operator|.
name|single
argument_list|(
name|startWithS
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, but got"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|int
name|i
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbersWithoutGT15
argument_list|)
operator|.
name|single
argument_list|(
name|numberGT15
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, but got"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleOrDefaultPredicate1
parameter_list|()
block|{
name|Predicate1
argument_list|<
name|String
argument_list|>
name|startWithS
init|=
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|!=
literal|null
operator|&&
name|Character
operator|.
name|toString
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
literal|"S"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Predicate1
argument_list|<
name|Integer
argument_list|>
name|numberGT15
init|=
operator|new
name|Predicate1
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{
return|return
name|i
operator|>
literal|15
return|;
block|}
block|}
decl_stmt|;
name|String
index|[]
name|people
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|}
decl_stmt|;
name|String
index|[]
name|twoPeopleWithCharS
init|=
block|{
literal|"Brill"
block|,
literal|"Smith"
block|,
literal|"Simpson"
block|}
decl_stmt|;
name|String
index|[]
name|peopleWithoutCharS
init|=
block|{
literal|"Brill"
block|,
literal|"Andrew"
block|,
literal|"Alice"
block|}
decl_stmt|;
name|Integer
index|[]
name|numbers
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|}
decl_stmt|;
name|Integer
index|[]
name|numbersWithTwoGT15
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|,
literal|25
block|}
decl_stmt|;
name|Integer
index|[]
name|numbersWithoutGT15
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|people
index|[
literal|1
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|people
argument_list|)
operator|.
name|singleOrDefault
argument_list|(
name|startWithS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numbers
index|[
literal|3
index|]
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|singleOrDefault
argument_list|(
name|numberGT15
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|twoPeopleWithCharS
argument_list|)
operator|.
name|singleOrDefault
argument_list|(
name|startWithS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbersWithTwoGT15
argument_list|)
operator|.
name|singleOrDefault
argument_list|(
name|numberGT15
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|peopleWithoutCharS
argument_list|)
operator|.
name|singleOrDefault
argument_list|(
name|startWithS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbersWithoutGT15
argument_list|)
operator|.
name|singleOrDefault
argument_list|(
name|numberGT15
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnnecessaryBoxing"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testIdentityEqualityComparer
parameter_list|()
block|{
specifier|final
name|Integer
name|one
init|=
literal|1000
decl_stmt|;
specifier|final
name|Integer
name|one2
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|one
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|one
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|one2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Integer
name|two
init|=
literal|2
decl_stmt|;
specifier|final
name|EqualityComparer
argument_list|<
name|Integer
argument_list|>
name|idComparer
init|=
name|Functions
operator|.
name|identityComparer
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|idComparer
operator|.
name|equal
argument_list|(
name|one
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idComparer
operator|.
name|equal
argument_list|(
name|one
argument_list|,
name|one2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|idComparer
operator|.
name|equal
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectorEqualityComparer
parameter_list|()
block|{
specifier|final
name|EqualityComparer
argument_list|<
name|Employee
argument_list|>
name|comparer
init|=
name|Functions
operator|.
name|selectorComparer
argument_list|(
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|apply
parameter_list|(
name|Employee
name|a0
parameter_list|)
block|{
return|return
name|a0
operator|.
name|deptno
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|comparer
operator|.
name|equal
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|,
name|emps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|comparer
operator|.
name|hashCode
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|comparer
operator|.
name|hashCode
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparer
operator|.
name|equal
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|,
name|emps
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|comparer
operator|.
name|hashCode
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|comparer
operator|.
name|hashCode
argument_list|(
name|emps
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|comparer
operator|.
name|equal
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|,
name|emps
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// not 100% guaranteed, but works for this data
name|assertNotEquals
argument_list|(
name|comparer
operator|.
name|hashCode
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|comparer
operator|.
name|hashCode
argument_list|(
name|emps
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|comparer
operator|.
name|equal
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|comparer
operator|.
name|hashCode
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|comparer
operator|.
name|hashCode
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|comparer
operator|.
name|equal
argument_list|(
literal|null
argument_list|,
name|emps
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparer
operator|.
name|equal
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|comparer
operator|.
name|hashCode
argument_list|(
literal|null
argument_list|)
argument_list|,
name|comparer
operator|.
name|hashCode
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToLookupSelectorComparer
parameter_list|()
block|{
specifier|final
name|Lookup
argument_list|<
name|String
argument_list|,
name|Employee
argument_list|>
name|lookup
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toLookup
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|length
argument_list|()
operator|==
name|v2
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lookup
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Janet]"
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|lookup
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Grouping
argument_list|<
name|String
argument_list|,
name|Employee
argument_list|>
name|grouping
range|:
name|lookup
operator|.
name|orderBy
argument_list|(
name|Linq4jTest
operator|.
expr|<
name|String
argument_list|,
name|Employee
operator|>
name|groupingKeyExtractor
argument_list|()
argument_list|)
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|grouping
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Fred: [Employee(name: Fred, deptno:10), Employee(name: Bill, deptno:30), Employee(name: Eric, deptno:10)]\n"
operator|+
literal|"Janet: [Employee(name: Janet, deptno:10)]\n"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
name|Function1
argument_list|<
name|Grouping
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|K
argument_list|>
name|groupingKeyExtractor
parameter_list|()
block|{
return|return
operator|new
name|Function1
argument_list|<
name|Grouping
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|K
argument_list|>
argument_list|()
block|{
specifier|public
name|K
name|apply
parameter_list|(
name|Grouping
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|a0
parameter_list|)
block|{
return|return
name|a0
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Tests the version of {@link ExtendedEnumerable#groupBy}    * that uses an accumulator; does not build intermediate lists.    */
annotation|@
name|Test
specifier|public
name|void
name|testGroupBy
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function0
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|,
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v1
parameter_list|,
name|Employee
name|e0
parameter_list|)
block|{
return|return
name|v1
operator|==
literal|null
condition|?
name|e0
operator|.
name|name
else|:
operator|(
name|v1
operator|+
literal|"+"
operator|+
name|e0
operator|.
name|name
operator|)
return|;
block|}
block|}
argument_list|,
operator|new
name|Function2
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|+
literal|": "
operator|+
name|v2
return|;
block|}
block|}
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Eric+Janet, 30: Bill]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the version of    * {@link ExtendedEnumerable#aggregate}    * that has a result selector. Note how similar it is to    * {@link #testGroupBy()}.    */
annotation|@
name|Test
specifier|public
name|void
name|testAggregate2
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|aggregate
argument_list|(
operator|new
name|Function0
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
operator|.
name|apply
argument_list|()
argument_list|,
comment|//CHECKSTYLE: IGNORE 0
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v1
parameter_list|,
name|Employee
name|e0
parameter_list|)
block|{
return|return
name|v1
operator|==
literal|null
condition|?
name|e0
operator|.
name|name
else|:
operator|(
name|v1
operator|+
literal|"+"
operator|+
name|e0
operator|.
name|name
operator|)
return|;
block|}
block|}
argument_list|,
operator|new
name|Function1
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v2
parameter_list|)
block|{
return|return
literal|"<no key>: "
operator|+
name|v2
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<no key>: Fred+Bill+Eric+Janet"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyEnumerable
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|emptyEnumerable
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|enumerable
operator|.
name|any
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerable
operator|.
name|longCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|enumerator
init|=
name|enumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingletonEnumerable
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|singletonEnumerable
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|enumerable
operator|.
name|any
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerable
operator|.
name|longCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|enumerator
init|=
name|enumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingletonEnumerator
parameter_list|()
block|{
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|singletonEnumerator
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingletonNullEnumerator
parameter_list|()
block|{
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|singletonNullEnumerator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformEnumerator
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
decl_stmt|;
specifier|final
name|Function1
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|func
init|=
operator|new
name|Function1
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|a0
parameter_list|)
block|{
return|return
name|a0
operator|.
name|length
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|transform
argument_list|(
name|Linq4j
operator|.
name|enumerator
argument_list|(
name|strings
argument_list|)
argument_list|,
name|func
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|,
name|is
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator2
init|=
name|Linq4j
operator|.
name|transform
argument_list|(
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerator
argument_list|()
argument_list|,
name|func
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|enumerator2
operator|.
name|moveNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCast
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Number
operator|)
literal|2
argument_list|,
literal|null
argument_list|,
literal|3.14
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|cast
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkCast
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIterableCast
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Number
operator|)
literal|2
argument_list|,
literal|null
argument_list|,
literal|3.14
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|cast
argument_list|(
name|numbers
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkCast
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCast
parameter_list|(
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|x
init|=
name|enumerator
operator|.
name|current
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// good
block|}
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfType
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Number
operator|)
literal|2
argument_list|,
literal|null
argument_list|,
literal|3.14
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkIterable
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIterableOfType
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Number
operator|)
literal|2
argument_list|,
literal|null
argument_list|,
literal|3.14
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|ofType
argument_list|(
name|numbers
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkIterable
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkIterable
parameter_list|(
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnion
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|union
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|union
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntersect
parameter_list|()
block|{
specifier|final
name|Employee
index|[]
name|emps2
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|150
argument_list|,
literal|"Theodore"
argument_list|,
literal|10
argument_list|)
block|,
name|emps
index|[
literal|3
index|]
block|,     }
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|intersect
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps2
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExcept
parameter_list|()
block|{
specifier|final
name|Employee
index|[]
name|emps2
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|150
argument_list|,
literal|"Theodore"
argument_list|,
literal|10
argument_list|)
block|,
name|emps
index|[
literal|3
index|]
block|,     }
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|except
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps2
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDistinct
parameter_list|()
block|{
specifier|final
name|Employee
index|[]
name|emps2
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|150
argument_list|,
literal|"Theodore"
argument_list|,
literal|10
argument_list|)
block|,
name|emps
index|[
literal|3
index|]
block|,
name|emps
index|[
literal|0
index|]
block|,
name|emps
index|[
literal|3
index|]
block|,     }
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps2
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDistinctWithEqualityComparer
parameter_list|()
block|{
specifier|final
name|Employee
index|[]
name|emps2
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|150
argument_list|,
literal|"Theodore"
argument_list|,
literal|10
argument_list|)
block|,
name|emps
index|[
literal|3
index|]
block|,
name|emps
index|[
literal|1
index|]
block|,
name|emps
index|[
literal|3
index|]
block|,     }
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps2
argument_list|)
operator|.
name|distinct
argument_list|(
operator|new
name|EqualityComparer
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Employee
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|deptno
operator|==
name|v2
operator|.
name|deptno
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|deptno
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupJoin
parameter_list|()
block|{
comment|// Note #1: Group join is a "left join": "bad employees" are filtered
comment|//   out, but empty departments are not.
comment|// Note #2: Order of departments is preserved.
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|groupJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
argument_list|,
name|DEPT_DEPTNO_SELECTOR
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Department
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|v2
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Employee
name|employee
range|:
name|v2
control|)
block|{
if|if
condition|(
name|n
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|employee
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|append
argument_list|(
literal|"] work(s) in "
argument_list|)
operator|.
name|append
argument_list|(
name|v1
operator|.
name|name
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[[Fred, Eric, Janet] work(s) in Sales, "
operator|+
literal|"[] work(s) in HR, "
operator|+
literal|"[Bill] work(s) in Marketing]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupJoinWithComparer
parameter_list|()
block|{
comment|// Note #1: Group join is a "left join": "bad employees" are filtered
comment|//   out, but empty departments are not.
comment|// Note #2: Order of departments is preserved.
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|groupJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
argument_list|,
name|DEPT_DEPTNO_SELECTOR
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Department
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|v2
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Employee
name|employee
range|:
name|v2
control|)
block|{
if|if
condition|(
name|n
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|employee
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|append
argument_list|(
literal|"] work(s) in "
argument_list|)
operator|.
name|append
argument_list|(
name|v1
operator|.
name|name
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[[Fred, Bill, Eric, Janet, Cedric] work(s) in Marketing]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJoin
parameter_list|()
block|{
comment|// Note #1: Inner on both sides. Employees with bad departments,
comment|//   and departments with no employees are eliminated.
comment|// Note #2: Order of employees is preserved.
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|DEPT_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Department
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|+
literal|" works in "
operator|+
name|v2
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Bill works in Marketing, "
operator|+
literal|"Eric works in Sales, "
operator|+
literal|"Fred works in Sales, "
operator|+
literal|"Janet works in Sales]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLeftJoin
parameter_list|()
block|{
comment|// Note #1: Left join means emit nulls on RHS but not LHS.
comment|//   Employees with bad departments are not eliminated;
comment|//   departments with no employees are eliminated.
comment|// Note #2: Order of employees is preserved.
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|DEPT_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Department
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|+
literal|" works in "
operator|+
operator|(
name|v2
operator|==
literal|null
condition|?
literal|null
else|:
name|v2
operator|.
name|name
operator|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Bill works in Marketing, "
operator|+
literal|"Cedric works in null, "
operator|+
literal|"Eric works in Sales, "
operator|+
literal|"Fred works in Sales, "
operator|+
literal|"Janet works in Sales]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRightJoin
parameter_list|()
block|{
comment|// Note #1: Left join means emit nulls on LHS but not RHS.
comment|//   Employees with bad departments are eliminated;
comment|//   departments with no employees are not eliminated.
comment|// Note #2: Order of employees is preserved.
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|DEPT_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Department
name|v2
parameter_list|)
block|{
return|return
operator|(
name|v1
operator|==
literal|null
condition|?
literal|null
else|:
name|v1
operator|.
name|name
operator|)
operator|+
literal|" works in "
operator|+
operator|(
name|v2
operator|==
literal|null
condition|?
literal|null
else|:
name|v2
operator|.
name|name
operator|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Bill works in Marketing, "
operator|+
literal|"Eric works in Sales, "
operator|+
literal|"Fred works in Sales, "
operator|+
literal|"Janet works in Sales, "
operator|+
literal|"null works in HR]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullJoin
parameter_list|()
block|{
comment|// Note #1: Full join means emit nulls both LHS and RHS.
comment|//   Employees with bad departments are not eliminated;
comment|//   departments with no employees are not eliminated.
comment|// Note #2: Order of employees is preserved.
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|DEPT_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Department
name|v2
parameter_list|)
block|{
return|return
operator|(
name|v1
operator|==
literal|null
condition|?
literal|null
else|:
name|v1
operator|.
name|name
operator|)
operator|+
literal|" works in "
operator|+
operator|(
name|v2
operator|==
literal|null
condition|?
literal|null
else|:
name|v2
operator|.
name|name
operator|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Bill works in Marketing, "
operator|+
literal|"Cedric works in null, "
operator|+
literal|"Eric works in Sales, "
operator|+
literal|"Fred works in Sales, "
operator|+
literal|"Janet works in Sales, "
operator|+
literal|"null works in HR]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJoinCartesianProduct
parameter_list|()
block|{
name|int
name|n
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
operator|<
name|Department
decl_stmt|,
name|Integer
decl_stmt|,
name|Integer
decl|>
name|join
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
operator|(
name|Function1
operator|)
name|ONE_SELECTOR
argument_list|,
operator|(
name|Function1
operator|)
name|ONE_SELECTOR
argument_list|,
operator|(
name|Function2
operator|)
name|PAIR_SELECTOR
argument_list|)
decl|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|n
argument_list|)
expr_stmt|;
comment|// 4 employees times 3 departments
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testCartesianProductEnumerator
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|abc
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|xy
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|productEmpty
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
expr|<
name|Enumerator
argument_list|<
name|String
argument_list|>
operator|>
name|asList
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|productEmpty
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
expr|<
name|String
operator|>
name|asList
argument_list|()
argument_list|,
name|productEmpty
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|productEmpty
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|product0
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|product0
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|productFullEmpty
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|abc
operator|.
name|enumerator
argument_list|()
argument_list|,
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|productFullEmpty
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|productEmptyFull
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|abc
operator|.
name|enumerator
argument_list|()
argument_list|,
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|productEmptyFull
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|productAbcXy
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|abc
operator|.
name|enumerator
argument_list|()
argument_list|,
name|xy
operator|.
name|enumerator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|productAbcXy
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"y"
argument_list|)
argument_list|,
name|productAbcXy
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|productAbcXy
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsQueryable
parameter_list|()
block|{
comment|// "count" is an Enumerable method.
specifier|final
name|int
name|n
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|n
argument_list|)
expr_stmt|;
comment|// "where" is a Queryable method
comment|// first, use a lambda
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Employee
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Queryable
argument_list|<
name|Employee
argument_list|>
name|nh
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|where
argument_list|(
name|Expressions
operator|.
name|lambda
argument_list|(
name|Predicate1
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|parameter
argument_list|,
name|Employee
operator|.
name|class
argument_list|,
literal|"deptno"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|parameter
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nh
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// second, use an expression
specifier|final
name|Queryable
argument_list|<
name|Employee
argument_list|>
name|nh2
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|where
argument_list|(
name|Expressions
operator|.
name|lambda
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|deptno
operator|==
literal|10
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nh2
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// use lambda, this time call whereN
name|ParameterExpression
name|parameterE
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Employee
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParameterExpression
name|parameterN
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
decl_stmt|;
specifier|final
name|Queryable
argument_list|<
name|Employee
argument_list|>
name|nh3
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|whereN
argument_list|(
name|Expressions
operator|.
name|lambda
argument_list|(
name|Predicate2
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|andAlso
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|parameterE
argument_list|,
name|Employee
operator|.
name|class
argument_list|,
literal|"deptno"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|lessThan
argument_list|(
name|parameterN
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|parameterE
argument_list|,
name|parameterN
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nh3
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTake
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|enumerableDeptsResult
init|=
name|enumerableDepts
operator|.
name|take
argument_list|(
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|enumerableDeptsResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|enumerableDeptsResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|enumerableDeptsResult
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|enumerableDeptsResult5
init|=
name|enumerableDepts
operator|.
name|take
argument_list|(
literal|5
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|enumerableDeptsResult5
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeEnumerable
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|enumerableDeptsResult
init|=
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|enumerableDepts
argument_list|,
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|enumerableDeptsResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|enumerableDeptsResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|enumerableDeptsResult
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|enumerableDeptsResult5
init|=
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|enumerableDepts
argument_list|,
literal|5
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|enumerableDeptsResult5
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeQueryable
parameter_list|()
block|{
specifier|final
name|Queryable
argument_list|<
name|Department
argument_list|>
name|querableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|queryableResult
init|=
name|QueryableDefaults
operator|.
name|take
argument_list|(
name|querableDepts
argument_list|,
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queryableResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|queryableResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|queryableResult
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeEnumerableZeroOrNegativeSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
operator|-
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeQueryableZeroOrNegativeSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|QueryableDefaults
operator|.
name|take
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|QueryableDefaults
operator|.
name|take
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
argument_list|,
operator|-
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeEnumerableGreaterThanLength
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|depList
init|=
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|enumerableDepts
argument_list|,
literal|5
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|depList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|2
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeQueryableGreaterThanLength
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|depList
init|=
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|enumerableDepts
argument_list|,
literal|5
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|depList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|2
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeWhileEnumerablePredicate
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|EnumerableDefaults
operator|.
name|takeWhile
argument_list|(
name|enumerableDepts
argument_list|,
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
comment|// Only one department:
comment|// 0: Sales --> true
comment|// 1: HR --> false
comment|// 2: Marketing --> never get to it (we stop after false)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeWhileEnumerableFunction
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|EnumerableDefaults
operator|.
name|takeWhile
argument_list|(
name|enumerableDepts
argument_list|,
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
comment|// Make sure we're passed the correct indices
name|assertEquals
argument_list|(
literal|"Invalid index passed to function"
argument_list|,
name|index
operator|++
argument_list|,
operator|(
name|int
operator|)
name|v2
argument_list|)
expr_stmt|;
return|return
literal|20
operator|!=
name|v1
operator|.
name|deptno
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeWhileQueryableFunctionExpressionPredicate
parameter_list|()
block|{
specifier|final
name|Queryable
argument_list|<
name|Department
argument_list|>
name|queryableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
decl_stmt|;
name|Predicate1
argument_list|<
name|Department
argument_list|>
name|predicate
init|=
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
literal|"HR"
operator|.
name|equals
argument_list|(
name|v1
operator|.
name|name
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|QueryableDefaults
operator|.
name|takeWhile
argument_list|(
name|queryableDepts
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|predicate
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|predicate
operator|=
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
literal|"Sales"
operator|.
name|equals
argument_list|(
name|v1
operator|.
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|deptList
operator|=
name|QueryableDefaults
operator|.
name|takeWhile
argument_list|(
name|queryableDepts
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|predicate
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeWhileN
parameter_list|()
block|{
specifier|final
name|Queryable
argument_list|<
name|Department
argument_list|>
name|queryableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
decl_stmt|;
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|function2
init|=
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
comment|// Make sure we're passed the correct indices
name|assertEquals
argument_list|(
literal|"Invalid index passed to function"
argument_list|,
name|index
operator|++
argument_list|,
operator|(
name|int
operator|)
name|v2
argument_list|)
expr_stmt|;
return|return
name|v2
operator|<
literal|2
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|QueryableDefaults
operator|.
name|takeWhileN
argument_list|(
name|queryableDepts
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|function2
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeWhileNNoMatch
parameter_list|()
block|{
specifier|final
name|Queryable
argument_list|<
name|Department
argument_list|>
name|queryableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
decl_stmt|;
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|function2
init|=
name|Functions
operator|.
name|falsePredicate2
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|QueryableDefaults
operator|.
name|takeWhileN
argument_list|(
name|queryableDepts
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|function2
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkip
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skipWhile
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skipWhile
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
operator|!
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skipWhile
argument_list|(
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
operator|||
name|v2
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skip
argument_list|(
literal|5
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skipWhile
argument_list|(
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
operator|||
name|v2
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|skip
argument_list|(
literal|5
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|skipWhileN
argument_list|(
name|Expressions
operator|.
expr|<
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
operator|>
name|lambda
argument_list|(
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
operator|||
name|v2
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderBy
parameter_list|()
block|{
comment|// Note: sort is stable. Records occur Fred, Eric, Janet in input.
name|assertEquals
argument_list|(
literal|"[Employee(name: Fred, deptno:10),"
operator|+
literal|" Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Janet, deptno:10),"
operator|+
literal|" Employee(name: Bill, deptno:30)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderByComparator
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[Employee(name: Bill, deptno:30),"
operator|+
literal|" Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Fred, deptno:10),"
operator|+
literal|" Employee(name: Janet, deptno:10)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|reverseOrder
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderByInSeries
parameter_list|()
block|{
comment|// OrderBy in series works because sort is stable.
name|assertEquals
argument_list|(
literal|"[Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Fred, deptno:10),"
operator|+
literal|" Employee(name: Janet, deptno:10),"
operator|+
literal|" Employee(name: Bill, deptno:30)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderByDescending
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[Employee(name: Janet, deptno:10),"
operator|+
literal|" Employee(name: Fred, deptno:10),"
operator|+
literal|" Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Bill, deptno:30)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|orderByDescending
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReverse
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[Employee(name: Janet, deptno:10),"
operator|+
literal|" Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Bill, deptno:30),"
operator|+
literal|" Employee(name: Fred, deptno:10)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|reverse
argument_list|()
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testList0
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Employee
argument_list|(
literal|100
argument_list|,
literal|"Fred"
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|Employee
argument_list|(
literal|110
argument_list|,
literal|"Bill"
argument_list|,
literal|30
argument_list|)
argument_list|,
operator|new
name|Employee
argument_list|(
literal|120
argument_list|,
literal|"Eric"
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|Employee
argument_list|(
literal|130
argument_list|,
literal|"Janet"
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Employee
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|employees
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|name
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|into
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[Employee(name: Fred, deptno:10), Employee(name: Janet, deptno:10)]"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testList
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Employee
argument_list|(
literal|100
argument_list|,
literal|"Fred"
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|Employee
argument_list|(
literal|110
argument_list|,
literal|"Bill"
argument_list|,
literal|30
argument_list|)
argument_list|,
operator|new
name|Employee
argument_list|(
literal|120
argument_list|,
literal|"Eric"
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|Employee
argument_list|(
literal|130
argument_list|,
literal|"Janet"
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|>
name|empDepts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Employee
name|employee
range|:
name|employees
control|)
block|{
name|empDepts
operator|.
name|put
argument_list|(
name|employee
argument_list|,
name|depts
index|[
operator|(
name|employee
operator|.
name|deptno
operator|-
literal|10
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Grouping
argument_list|<
name|Object
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|empDepts
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|groupBy
argument_list|(
operator|new
name|Function1
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|into
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testList2
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|experience
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|,
literal|"noel"
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|enumerator
argument_list|(
name|experience
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|enumerator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"ListEnumerator"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|(
name|enumerator
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|listEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|experience
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|listEnumerator
init|=
name|listEnumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|listEnumerator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"ListEnumerator"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|(
name|listEnumerator
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|linkedListEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|experience
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|iterableEnumerator
init|=
name|linkedListEnumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|iterableEnumerator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"IterableEnumerator"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|(
name|iterableEnumerator
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultIfEmpty
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|experience
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|,
literal|"noel"
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|notEmptyEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|experience
argument_list|)
operator|.
name|defaultIfEmpty
argument_list|()
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|notEmptyEnumerator
init|=
name|notEmptyEnumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|notEmptyEnumerator
operator|.
name|moveNext
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jimi"
argument_list|,
name|notEmptyEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|notEmptyEnumerator
operator|.
name|moveNext
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mitch"
argument_list|,
name|notEmptyEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|notEmptyEnumerator
operator|.
name|moveNext
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"noel"
argument_list|,
name|notEmptyEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|emptyEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerable
argument_list|()
argument_list|)
operator|.
name|defaultIfEmpty
argument_list|()
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|emptyEnumerator
init|=
name|emptyEnumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|emptyEnumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|emptyEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|emptyEnumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultIfEmpty2
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|experience
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|,
literal|"noel"
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|notEmptyEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|experience
argument_list|)
operator|.
name|defaultIfEmpty
argument_list|(
literal|"dummy"
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|notEmptyEnumerator
init|=
name|notEmptyEnumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|notEmptyEnumerator
operator|.
name|moveNext
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jimi"
argument_list|,
name|notEmptyEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|notEmptyEnumerator
operator|.
name|moveNext
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mitch"
argument_list|,
name|notEmptyEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|notEmptyEnumerator
operator|.
name|moveNext
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"noel"
argument_list|,
name|notEmptyEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|emptyEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerable
argument_list|()
argument_list|)
operator|.
name|defaultIfEmpty
argument_list|(
literal|"N/A"
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|emptyEnumerator
init|=
name|emptyEnumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|emptyEnumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|emptyEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|emptyEnumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testElementAt
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jimi"
argument_list|,
name|enumerable
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|enumerable
operator|.
name|elementAt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|enumerable
operator|.
name|elementAt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testElementAtWithoutList
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jimi"
argument_list|,
name|enumerable
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|enumerable
operator|.
name|elementAt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|enumerable
operator|.
name|elementAt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testElementAtOrDefault
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jimi"
argument_list|,
name|enumerable
operator|.
name|elementAtOrDefault
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|enumerable
operator|.
name|elementAtOrDefault
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|enumerable
operator|.
name|elementAtOrDefault
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testElementAtOrDefaultWithoutList
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jimi"
argument_list|,
name|enumerable
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|enumerable
operator|.
name|elementAt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|enumerable
operator|.
name|elementAt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLast
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mitch"
argument_list|,
name|enumerable
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|?
argument_list|>
name|emptyEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
decl_stmt|;
try|try
block|{
name|emptyEnumerable
operator|.
name|last
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastWithoutList
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"noel"
argument_list|,
literal|"mitch"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mitch"
argument_list|,
name|enumerable
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastOrDefault
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mitch"
argument_list|,
name|enumerable
operator|.
name|lastOrDefault
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|?
argument_list|>
name|emptyEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|emptyEnumerable
operator|.
name|lastOrDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastWithPredicate
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|,
literal|"ming"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mitch"
argument_list|,
name|enumerable
operator|.
name|last
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|startsWith
argument_list|(
literal|"mit"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|enumerable
operator|.
name|last
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|x
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|emptyEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
decl_stmt|;
try|try
block|{
name|emptyEnumerable
operator|.
name|last
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|x
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastOrDefaultWithPredicate
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"jimi"
argument_list|,
literal|"mitch"
argument_list|,
literal|"ming"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mitch"
argument_list|,
name|enumerable
operator|.
name|lastOrDefault
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|startsWith
argument_list|(
literal|"mit"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|enumerable
operator|.
name|lastOrDefault
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|x
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|emptyEnumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|emptyEnumerable
operator|.
name|lastOrDefault
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|x
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectManyWithIndexableSelector
parameter_list|()
block|{
specifier|final
name|int
index|[]
name|indexRef
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameSeqs
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|apply
parameter_list|(
name|Department
name|element
parameter_list|,
name|Integer
name|index
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|indexRef
index|[
literal|0
index|]
argument_list|,
name|index
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|indexRef
index|[
literal|0
index|]
operator|=
name|index
operator|+
literal|1
expr_stmt|;
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|element
operator|.
name|employees
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
literal|"#"
operator|+
name|v2
operator|+
literal|": "
operator|+
name|v1
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[#0: Fred, #1: Eric, #2: Janet, #3: Bill]"
argument_list|,
name|nameSeqs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectManyWithResultSelector
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameSeqs
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|selectMany
argument_list|(
name|DEPT_EMPLOYEES_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Department
argument_list|,
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Department
name|element
parameter_list|,
name|Employee
name|subElement
parameter_list|)
block|{
return|return
name|subElement
operator|.
name|name
operator|+
literal|"@"
operator|+
name|element
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v0
parameter_list|,
name|Integer
name|v1
parameter_list|)
block|{
return|return
literal|"#"
operator|+
name|v1
operator|+
literal|": "
operator|+
name|v0
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[#0: Fred@Sales, #1: Eric@Sales, #2: Janet@Sales, #3: Bill@Marketing]"
argument_list|,
name|nameSeqs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectManyWithIndexableSelectorAndResultSelector
parameter_list|()
block|{
specifier|final
name|int
index|[]
name|indexRef
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameSeqs
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|apply
parameter_list|(
name|Department
name|element
parameter_list|,
name|Integer
name|index
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|indexRef
index|[
literal|0
index|]
argument_list|,
name|index
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|indexRef
index|[
literal|0
index|]
operator|=
name|index
operator|+
literal|1
expr_stmt|;
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|element
operator|.
name|employees
argument_list|)
return|;
block|}
block|}
argument_list|,
operator|new
name|Function2
argument_list|<
name|Department
argument_list|,
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Department
name|element
parameter_list|,
name|Employee
name|subElement
parameter_list|)
block|{
return|return
name|subElement
operator|.
name|name
operator|+
literal|"@"
operator|+
name|element
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v0
parameter_list|,
name|Integer
name|v1
parameter_list|)
block|{
return|return
literal|"#"
operator|+
name|v1
operator|+
literal|": "
operator|+
name|v0
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[#0: Fred@Sales, #1: Eric@Sales, #2: Janet@Sales, #3: Bill@Marketing]"
argument_list|,
name|nameSeqs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceEqual
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable1
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable2
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ming"
block|,
literal|"foo"
block|,
literal|"far"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|EnumerableDefaults
operator|.
name|sequenceEqual
argument_list|(
literal|null
argument_list|,
name|enumerable2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|EnumerableDefaults
operator|.
name|sequenceEqual
argument_list|(
name|enumerable1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
name|assertFalse
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|enumerable1
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
comment|// Keep as collection
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|enumerable2
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Keep as collection
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceEqualWithoutCollection
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable1
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable2
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"far"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|EnumerableDefaults
operator|.
name|sequenceEqual
argument_list|(
literal|null
argument_list|,
name|enumerable2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|EnumerableDefaults
operator|.
name|sequenceEqual
argument_list|(
name|enumerable1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceEqualWithComparer
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable1
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable2
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|EqualityComparer
argument_list|<
name|String
argument_list|>
name|equalityComparer
init|=
operator|new
name|EqualityComparer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
return|;
comment|// reverse the equality.
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
argument_list|,
name|equalityComparer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fun"
argument_list|,
literal|"lol"
argument_list|,
literal|"far"
argument_list|)
argument_list|)
argument_list|,
name|equalityComparer
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|EnumerableDefaults
operator|.
name|sequenceEqual
argument_list|(
literal|null
argument_list|,
name|enumerable2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|EnumerableDefaults
operator|.
name|sequenceEqual
argument_list|(
name|enumerable1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
name|assertFalse
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|enumerable1
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
comment|// Keep as collection
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|enumerable2
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Keep as collection
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceEqualWithComparerWithoutCollection
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable1
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable2
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ming"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|EqualityComparer
argument_list|<
name|String
argument_list|>
name|equalityComparer
init|=
operator|new
name|EqualityComparer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
return|;
comment|// reverse the equality.
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
argument_list|,
name|equalityComparer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fun"
argument_list|,
literal|"lol"
argument_list|,
literal|"far"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
name|equalityComparer
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|EnumerableDefaults
operator|.
name|sequenceEqual
argument_list|(
literal|null
argument_list|,
name|enumerable2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|EnumerableDefaults
operator|.
name|sequenceEqual
argument_list|(
name|enumerable1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerable1
operator|.
name|sequenceEqual
argument_list|(
name|enumerable2
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByWithKeySelector
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s"
argument_list|,
name|group
operator|.
name|getKey
argument_list|()
argument_list|,
name|stringJoin
argument_list|(
literal|"+"
argument_list|,
name|group
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|element
parameter_list|)
block|{
return|return
name|element
operator|.
name|name
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Eric+Janet, 30: Bill]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByWithKeySelectorAndComparer
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s"
argument_list|,
name|group
operator|.
name|getKey
argument_list|()
argument_list|,
name|stringJoin
argument_list|(
literal|"+"
argument_list|,
name|group
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|element
parameter_list|)
block|{
return|return
name|element
operator|.
name|name
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Bill+Eric+Janet]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByWithKeySelectorAndElementSelector
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s"
argument_list|,
name|group
operator|.
name|getKey
argument_list|()
argument_list|,
name|stringJoin
argument_list|(
literal|"+"
argument_list|,
name|group
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Eric+Janet, 30: Bill]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/** Equivalent to {@link String}.join, but that method is only in JDK 1.8 and    * higher. */
specifier|private
specifier|static
name|String
name|stringJoin
parameter_list|(
name|String
name|delimiter
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|group
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|group
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
operator|.
name|append
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByWithKeySelectorAndElementSelectorAndComparer
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|EMP_NAME_SELECTOR
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s"
argument_list|,
name|group
operator|.
name|getKey
argument_list|()
argument_list|,
name|stringJoin
argument_list|(
literal|"+"
argument_list|,
name|group
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Bill+Eric+Janet]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByWithKeySelectorAndResultSelector
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|key
parameter_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s"
argument_list|,
name|key
argument_list|,
name|stringJoin
argument_list|(
literal|"+"
argument_list|,
name|group
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|element
parameter_list|)
block|{
return|return
name|element
operator|.
name|name
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Eric+Janet, 30: Bill]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByWithKeySelectorAndResultSelectorAndComparer
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|key
parameter_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s"
argument_list|,
name|key
argument_list|,
name|stringJoin
argument_list|(
literal|"+"
argument_list|,
name|group
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|element
parameter_list|)
block|{
return|return
name|element
operator|.
name|name
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Bill+Eric+Janet]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByWithKeySelectorAndElementSelectorAndResultSelector
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|EMP_NAME_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|key
parameter_list|,
name|Enumerable
argument_list|<
name|String
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s"
argument_list|,
name|key
argument_list|,
name|stringJoin
argument_list|(
literal|"+"
argument_list|,
name|group
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Eric+Janet, 30: Bill]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByWithKeySelectorAndElementSelectorAndResultSelectorAndComparer
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|EMP_NAME_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|key
parameter_list|,
name|Enumerable
argument_list|<
name|String
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s: %s"
argument_list|,
name|key
argument_list|,
name|stringJoin
argument_list|(
literal|"+"
argument_list|,
name|group
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Bill+Eric+Janet]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZip
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|e1
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|e2
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|zipped
init|=
name|e1
operator|.
name|zip
argument_list|(
name|e2
argument_list|,
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v0
parameter_list|,
name|String
name|v1
parameter_list|)
block|{
return|return
name|v0
operator|+
name|v1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|zipped
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|zipped
operator|.
name|enumerator
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
operator|(
name|char
operator|)
operator|(
literal|'a'
operator|+
name|i
operator|)
operator|+
operator|(
name|char
operator|)
operator|(
literal|'1'
operator|+
name|i
operator|)
argument_list|,
name|zipped
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZipLengthNotMatch
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|e1
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|e2
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Function2
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|resultSelector
init|=
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v0
parameter_list|,
name|String
name|v1
parameter_list|)
block|{
return|return
name|v0
operator|+
name|v1
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|zipped1
init|=
name|e1
operator|.
name|zip
argument_list|(
name|e2
argument_list|,
name|resultSelector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|zipped1
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|(
name|zipped1
operator|.
name|enumerator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|zipped1
operator|.
name|enumerator
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
operator|(
name|char
operator|)
operator|(
literal|'a'
operator|+
name|i
operator|)
operator|+
operator|(
name|char
operator|)
operator|(
literal|'1'
operator|+
name|i
operator|)
argument_list|,
name|zipped1
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|zipped2
init|=
name|e2
operator|.
name|zip
argument_list|(
name|e1
argument_list|,
name|resultSelector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|zipped2
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|(
name|zipped2
operator|.
name|enumerator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|zipped2
operator|.
name|enumerator
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
operator|(
name|char
operator|)
operator|(
literal|'1'
operator|+
name|i
operator|)
operator|+
operator|(
name|char
operator|)
operator|(
literal|'a'
operator|+
name|i
operator|)
argument_list|,
name|zipped2
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|count
parameter_list|(
name|Enumerator
argument_list|<
name|String
argument_list|>
name|enumerator
parameter_list|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|enumerator
operator|.
name|current
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|++
name|n
expr_stmt|;
block|}
block|}
return|return
name|n
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExample
parameter_list|()
block|{
name|Linq4jExample
operator|.
name|main
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/** We use BigDecimal to represent literals of float and double using    * BigDecimal, because we want an exact representation. */
annotation|@
name|Test
specifier|public
name|void
name|testApproxConstant
parameter_list|()
block|{
name|ConstantExpression
name|c
decl_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"3.1"
argument_list|)
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"3.1F"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"-5.156"
argument_list|)
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"-5.156F"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"-51.6"
argument_list|)
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Float.valueOf(-51.6F)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Float.valueOf(Float.intBitsToFloat(2139095039))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Float.valueOf(Float.intBitsToFloat(1))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"3.1"
argument_list|)
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"3.1D"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"-5.156"
argument_list|)
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"-5.156D"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"-51.6"
argument_list|)
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Double.valueOf(-51.6D)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Double.valueOf(Double.longBitsToDouble(9218868437227405311L))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"Double.valueOf(Double.longBitsToDouble(1L))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Employee. */
specifier|public
specifier|static
class|class
name|Employee
block|{
specifier|public
specifier|final
name|int
name|empno
decl_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|public
name|Employee
parameter_list|(
name|int
name|empno
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|deptno
parameter_list|)
block|{
name|this
operator|.
name|empno
operator|=
name|empno
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Employee(name: "
operator|+
name|name
operator|+
literal|", deptno:"
operator|+
name|deptno
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|deptno
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|empno
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|name
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Employee
name|other
init|=
operator|(
name|Employee
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|deptno
operator|!=
name|other
operator|.
name|deptno
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|empno
operator|!=
name|other
operator|.
name|empno
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/** Department. */
specifier|public
specifier|static
class|class
name|Department
block|{
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
decl_stmt|;
specifier|public
name|Department
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|deptno
parameter_list|,
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
name|this
operator|.
name|employees
operator|=
name|employees
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Department(name: "
operator|+
name|name
operator|+
literal|", deptno:"
operator|+
name|deptno
operator|+
literal|", employees: "
operator|+
name|employees
operator|+
literal|")"
return|;
block|}
block|}
comment|// Cedric works in a non-existent department.
comment|//CHECKSTYLE: IGNORE 1
specifier|public
specifier|static
specifier|final
name|Employee
index|[]
name|badEmps
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|140
argument_list|,
literal|"Cedric"
argument_list|,
literal|40
argument_list|)
block|,   }
decl_stmt|;
comment|//CHECKSTYLE: IGNORE 1
specifier|public
specifier|static
specifier|final
name|Employee
index|[]
name|emps
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|100
argument_list|,
literal|"Fred"
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|110
argument_list|,
literal|"Bill"
argument_list|,
literal|30
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|120
argument_list|,
literal|"Eric"
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|130
argument_list|,
literal|"Janet"
argument_list|,
literal|10
argument_list|)
block|,   }
decl_stmt|;
comment|//CHECKSTYLE: IGNORE 1
specifier|public
specifier|static
specifier|final
name|Department
index|[]
name|depts
init|=
block|{
operator|new
name|Department
argument_list|(
literal|"Sales"
argument_list|,
literal|10
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|,
name|emps
index|[
literal|2
index|]
argument_list|,
name|emps
index|[
literal|3
index|]
argument_list|)
argument_list|)
block|,
operator|new
name|Department
argument_list|(
literal|"HR"
argument_list|,
literal|20
argument_list|,
name|Collections
operator|.
expr|<
name|Employee
operator|>
name|emptyList
argument_list|()
argument_list|)
block|,
operator|new
name|Department
argument_list|(
literal|"Marketing"
argument_list|,
literal|30
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|emps
index|[
literal|1
index|]
argument_list|)
argument_list|)
block|,   }
decl_stmt|;
block|}
end_class

begin_comment
comment|// End Linq4jTest.java
end_comment

end_unit

