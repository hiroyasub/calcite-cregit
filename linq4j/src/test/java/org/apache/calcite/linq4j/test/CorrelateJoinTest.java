begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|ExtendedEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  * Tests {@link ExtendedEnumerable#correlateJoin(JoinType, Function1, Function2)}.  */
end_comment

begin_class
class|class
name|CorrelateJoinTest
block|{
specifier|static
specifier|final
name|Function2
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|,
name|Integer
index|[]
argument_list|>
name|SELECT_BOTH
init|=
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
operator|new
name|Integer
index|[]
block|{
name|v0
block|,
name|v1
block|}
decl_stmt|;
annotation|@
name|Test
name|void
name|testInner
parameter_list|()
block|{
name|testJoin
argument_list|(
name|JoinType
operator|.
name|INNER
argument_list|,
operator|new
name|Integer
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|20
block|}
block|,
block|{
literal|3
block|,
operator|-
literal|30
block|}
block|,
block|{
literal|3
block|,
operator|-
literal|60
block|}
block|,
block|{
literal|20
block|,
literal|200
block|}
block|,
block|{
literal|30
block|,
operator|-
literal|300
block|}
block|,
block|{
literal|30
block|,
operator|-
literal|600
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testLeft
parameter_list|()
block|{
name|testJoin
argument_list|(
name|JoinType
operator|.
name|LEFT
argument_list|,
operator|new
name|Integer
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|null
block|}
block|,
block|{
literal|2
block|,
literal|20
block|}
block|,
block|{
literal|3
block|,
operator|-
literal|30
block|}
block|,
block|{
literal|3
block|,
operator|-
literal|60
block|}
block|,
block|{
literal|10
block|,
literal|null
block|}
block|,
block|{
literal|20
block|,
literal|200
block|}
block|,
block|{
literal|30
block|,
operator|-
literal|300
block|}
block|,
block|{
literal|30
block|,
operator|-
literal|600
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSemi
parameter_list|()
block|{
name|testJoin
argument_list|(
name|JoinType
operator|.
name|SEMI
argument_list|,
operator|new
name|Integer
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|null
block|}
block|,
block|{
literal|3
block|,
literal|null
block|}
block|,
block|{
literal|20
block|,
literal|null
block|}
block|,
block|{
literal|30
block|,
literal|null
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testAnti
parameter_list|()
block|{
name|testJoin
argument_list|(
name|JoinType
operator|.
name|ANTI
argument_list|,
operator|new
name|Integer
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|null
block|}
block|,
block|{
literal|10
block|,
literal|null
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJoin
parameter_list|(
name|JoinType
name|joinType
parameter_list|,
name|Integer
index|[]
index|[]
name|expected
parameter_list|)
block|{
name|Enumerable
argument_list|<
name|Integer
index|[]
argument_list|>
name|join
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
argument_list|)
operator|.
name|correlateJoin
argument_list|(
name|joinType
argument_list|,
name|a0
lambda|->
block|{
if|if
condition|(
name|a0
operator|==
literal|1
operator|||
name|a0
operator|==
literal|10
condition|)
block|{
return|return
name|Linq4j
operator|.
name|emptyEnumerable
argument_list|()
return|;
block|}
if|if
condition|(
name|a0
operator|==
literal|2
operator|||
name|a0
operator|==
literal|20
condition|)
block|{
return|return
name|Linq4j
operator|.
name|singletonEnumerable
argument_list|(
name|a0
operator|*
literal|10
argument_list|)
return|;
block|}
if|if
condition|(
name|a0
operator|==
literal|3
operator|||
name|a0
operator|==
literal|30
condition|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|-
name|a0
operator|*
literal|10
argument_list|,
operator|-
name|a0
operator|*
literal|20
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected input "
operator|+
name|a0
argument_list|)
throw|;
block|}
argument_list|,
name|SELECT_BOTH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Enumerator
argument_list|<
name|Integer
index|[]
argument_list|>
name|e
init|=
name|join
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkResults
argument_list|(
name|e
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|e
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkResults
parameter_list|(
name|Enumerator
argument_list|<
name|Integer
index|[]
argument_list|>
name|e
parameter_list|,
name|Integer
index|[]
index|[]
name|expected
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
index|[]
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|e
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Integer
index|[]
index|[]
name|actual
init|=
name|res
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|res
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

