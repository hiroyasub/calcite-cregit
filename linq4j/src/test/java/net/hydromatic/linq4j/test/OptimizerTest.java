begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|test
operator|.
name|BlockBuilderBase
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link net.hydromatic.linq4j.expressions.BlockBuilder}  * optimization capabilities.  */
end_comment

begin_class
specifier|public
class|class
name|OptimizerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeComparison
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|ONE
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAlwaysTrue
parameter_list|()
block|{
comment|// true ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|TRUE
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAlwaysFalse
parameter_list|()
block|{
comment|// false ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return 2;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|FALSE
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAlwaysSame
parameter_list|()
block|{
comment|// bool ? 1 : 1
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|,
name|ONE
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonOptimizableTernary
parameter_list|()
block|{
comment|// bool ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return bool ? 1 : 2;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryRotateNot
parameter_list|()
block|{
comment|// !bool ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return bool ? 2 : 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryRotateEqualFalse
parameter_list|()
block|{
comment|// bool == false ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return bool ? 2 : 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|,
name|FALSE
argument_list|)
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAtrueB
parameter_list|()
block|{
comment|// a ? true : b  === a || b
name|assertEquals
argument_list|(
literal|"{\n  return a || b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAtrueNull
parameter_list|()
block|{
comment|// a ? Boolean.TRUE : null  === a ? Boolean.TRUE : (Boolean) null
name|assertEquals
argument_list|(
literal|"{\n  return a ? Boolean.TRUE : (Boolean) null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|TRUE_B
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAtrueBoxed
parameter_list|()
block|{
comment|// a ? Boolean.TRUE : Boolean.valueOf(b)  === a || b
name|assertEquals
argument_list|(
literal|"{\n  return a || Boolean.valueOf(b);\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|TRUE_B
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryABtrue
parameter_list|()
block|{
comment|// a ? b : true  === !a || b
name|assertEquals
argument_list|(
literal|"{\n  return !a || b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAfalseB
parameter_list|()
block|{
comment|// a ? false : b === !a&& b
name|assertEquals
argument_list|(
literal|"{\n  return !a&& b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|FALSE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryABfalse
parameter_list|()
block|{
comment|// a ? b : false === a&& b
name|assertEquals
argument_list|(
literal|"{\n  return a&& b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryInEqualABCeqB
parameter_list|()
block|{
comment|// (v ? (Integer) null : inp0_) == null
name|assertEquals
argument_list|(
literal|"{\n  return v || inp0_ == null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|NULL_INTEGER
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"inp0_"
argument_list|)
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryInEqualABCeqC
parameter_list|()
block|{
comment|// (v ? inp0_ : (Integer) null) == null
name|assertEquals
argument_list|(
literal|"{\n  return !v || inp0_ == null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"inp0_"
argument_list|)
argument_list|,
name|NULL_INTEGER
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAeqBBA
parameter_list|()
block|{
comment|// a == b ? b : a
name|ParameterExpression
name|a
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|b
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return a;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAeqBAB
parameter_list|()
block|{
comment|// a == b ? a : b
name|ParameterExpression
name|a
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|b
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryInEqualABCneqB
parameter_list|()
block|{
comment|// (v ? (Integer) null : inp0_) != null
name|assertEquals
argument_list|(
literal|"{\n  return !(v || inp0_ == null);\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|NULL_INTEGER
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"inp0_"
argument_list|)
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryInEqualABCneqC
parameter_list|()
block|{
comment|// (v ? inp0_ : (Integer) null) != null
name|assertEquals
argument_list|(
literal|"{\n  return !(!v || inp0_ == null);\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"inp0_"
argument_list|)
argument_list|,
name|NULL_INTEGER
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAneqBBA
parameter_list|()
block|{
comment|// a != b ? b : a
name|ParameterExpression
name|a
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|b
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeTernaryAneqBAB
parameter_list|()
block|{
comment|// a != b ? a : b
name|ParameterExpression
name|a
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|b
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return a;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndAlsoTrueBool
parameter_list|()
block|{
comment|// true&& bool
name|assertEquals
argument_list|(
literal|"{\n  return bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|TRUE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndAlsoBoolTrue
parameter_list|()
block|{
comment|// bool&& true
name|assertEquals
argument_list|(
literal|"{\n  return bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndAlsoFalseBool
parameter_list|()
block|{
comment|// false&& bool
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|FALSE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndAlsoNullBool
parameter_list|()
block|{
comment|// null&& bool
name|assertEquals
argument_list|(
literal|"{\n  return null&& bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|NULL
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndAlsoXY
parameter_list|()
block|{
comment|// x&& y
name|assertEquals
argument_list|(
literal|"{\n  return x&& y;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndAlsoXX
parameter_list|()
block|{
comment|// x&& x
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrElseTrueBool
parameter_list|()
block|{
comment|// true || bool
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|TRUE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrElseFalseBool
parameter_list|()
block|{
comment|// false || bool
name|assertEquals
argument_list|(
literal|"{\n  return bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|FALSE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrElseNullBool
parameter_list|()
block|{
comment|// null || bool
name|assertEquals
argument_list|(
literal|"{\n  return null || bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|NULL
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrElseXY
parameter_list|()
block|{
comment|// x || y
name|assertEquals
argument_list|(
literal|"{\n  return x || y;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrElseXX
parameter_list|()
block|{
comment|// x || x
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualSameConst
parameter_list|()
block|{
comment|// 1 == 1
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|ONE
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualDifferentConst
parameter_list|()
block|{
comment|// 1 == 2
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualSameExpr
parameter_list|()
block|{
comment|// x == x
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualDifferentExpr
parameter_list|()
block|{
comment|// x == y
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|y
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x == y;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualPrimitiveNull
parameter_list|()
block|{
comment|// (int) x == null
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualObjectNull
parameter_list|()
block|{
comment|// (Integer) x == null
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x == null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualStringNull
parameter_list|()
block|{
comment|// "Y" == null
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualTypedNullUntypedNull
parameter_list|()
block|{
comment|// (Integer) null == null
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|NULL_INTEGER
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualUnypedNullTypedNull
parameter_list|()
block|{
comment|// null == (Integer) null
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|NULL
argument_list|,
name|NULL_INTEGER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualBoolTrue
parameter_list|()
block|{
comment|// x == true
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualBoolFalse
parameter_list|()
block|{
comment|// x == false
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return !x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualSameConst
parameter_list|()
block|{
comment|// 1 != 1
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|ONE
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualDifferentConst
parameter_list|()
block|{
comment|// 1 != 2
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualSameExpr
parameter_list|()
block|{
comment|// x != x
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualDifferentExpr
parameter_list|()
block|{
comment|// x != y
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|y
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x != y;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualPrimitiveNull
parameter_list|()
block|{
comment|// (int) x == null
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualObjectNull
parameter_list|()
block|{
comment|// (Integer) x == null
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x != null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualStringNull
parameter_list|()
block|{
comment|// "Y" != null
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualTypedNullUntypedNull
parameter_list|()
block|{
comment|// (Integer) null != null
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|NULL_INTEGER
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualUnypedNullTypedNull
parameter_list|()
block|{
comment|// null != (Integer) null
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|NULL
argument_list|,
name|NULL_INTEGER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualBoolTrue
parameter_list|()
block|{
comment|// x != true
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return !x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqualBoolFalse
parameter_list|()
block|{
comment|// x != false
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleFolding
parameter_list|()
block|{
comment|// (1 == 2 ? 3 : 4) != (5 != 6 ? 4 : 8) ? 9 : 10
name|assertEquals
argument_list|(
literal|"{\n  return 10;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|9
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfTrue
parameter_list|()
block|{
comment|// if (true) {return 1}
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfTrueElse
parameter_list|()
block|{
comment|// if (true) {return 1} else {return 2}
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfFalse
parameter_list|()
block|{
comment|// if (false) {return 1}
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfFalseElse
parameter_list|()
block|{
comment|// if (false) {return 1} else {return 2}
name|assertEquals
argument_list|(
literal|"{\n  return 2;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfBoolTrue
parameter_list|()
block|{
comment|// if (bool) {return 1} else if (true) {return 2}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  } else {\n"
operator|+
literal|"    return 2;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfBoolTrueElse
parameter_list|()
block|{
comment|// if (bool) {return 1} else if (true) {return 2} else {return 3}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  } else {\n"
operator|+
literal|"    return 2;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|THREE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfBoolFalse
parameter_list|()
block|{
comment|// if (bool) {return 1} else if (false) {return 2}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfBoolFalseElse
parameter_list|()
block|{
comment|// if (bool) {return 1} else if (false) {return 2} else {return 3}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  } else {\n"
operator|+
literal|"    return 3;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|THREE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConditionalIfBoolFalseTrue
parameter_list|()
block|{
comment|// if (bool) {1} else if (false) {2} if (true) {4} else {5}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  } else {\n"
operator|+
literal|"    return 4;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|FOUR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastIntToShort
parameter_list|()
block|{
comment|// return (short) 1 --> return (short) 1
name|assertEquals
argument_list|(
literal|"{\n  return (short)1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|ONE
argument_list|,
name|short
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastIntToInt
parameter_list|()
block|{
comment|// return (int) 1 --> return 1L
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|ONE
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastIntToLong
parameter_list|()
block|{
comment|// return (long) 1 --> return 1L
name|assertEquals
argument_list|(
literal|"{\n  return 1L;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|ONE
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotTrue
parameter_list|()
block|{
comment|// !true -> false
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotFalse
parameter_list|()
block|{
comment|// !false -> true
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotNotA
parameter_list|()
block|{
comment|// !!a -> a
name|assertEquals
argument_list|(
literal|"{\n  return a;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|bool
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEq
parameter_list|()
block|{
comment|// !(a == b) -> a != b
name|assertEquals
argument_list|(
literal|"{\n  return a != b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|bool
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|bool
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotNeq
parameter_list|()
block|{
comment|// !(a != b) -> a == b
name|assertEquals
argument_list|(
literal|"{\n  return a == b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|bool
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|bool
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotGt
parameter_list|()
block|{
comment|// !(a> b) -> a<= b
name|assertEquals
argument_list|(
literal|"{\n  return a<= b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|greaterThan
argument_list|(
name|bool
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|bool
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotGte
parameter_list|()
block|{
comment|// !(a>= b) -> a< b
name|assertEquals
argument_list|(
literal|"{\n  return a< b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|greaterThanOrEqual
argument_list|(
name|bool
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|bool
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotLt
parameter_list|()
block|{
comment|// !(a< b) -> a>= b
name|assertEquals
argument_list|(
literal|"{\n  return a>= b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|lessThan
argument_list|(
name|bool
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|bool
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotLte
parameter_list|()
block|{
comment|// !(a<= b) -> a> b
name|assertEquals
argument_list|(
literal|"{\n  return a> b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|lessThanOrEqual
argument_list|(
name|bool
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|bool
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|booleanValueOfTrue
parameter_list|()
block|{
comment|// Boolean.valueOf(true) -> true
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanValueOfFalse
parameter_list|()
block|{
comment|// Boolean.valueOf(false) -> false
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssign
parameter_list|()
block|{
comment|// long x = 0;
comment|// final long y = System.currentTimeMillis();
comment|// if (System.nanoTime()> 0) {
comment|//   x = y;
comment|// }
comment|// System.out.println(x);
comment|//
comment|// In bug https://github.com/julianhyde/linq4j/issues/27, this was
comment|// incorrectly optimized to
comment|//
comment|// if (System.nanoTime()> 0L) {
comment|//    System.currentTimeMillis();
comment|// }
comment|// System.out.println(0L);
specifier|final
name|ParameterExpression
name|x_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|y_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|mT
init|=
name|Linq4j
operator|.
name|getMethod
argument_list|(
literal|"java.lang.System"
argument_list|,
literal|"currentTimeMillis"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|mNano
init|=
name|Linq4j
operator|.
name|getMethod
argument_list|(
literal|"java.lang.System"
argument_list|,
literal|"nanoTime"
argument_list|)
decl_stmt|;
specifier|final
name|ConstantExpression
name|zero
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|x_
argument_list|,
name|zero
argument_list|)
argument_list|,
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|y_
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|mT
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|ifThen
argument_list|(
name|Expressions
operator|.
name|greaterThan
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|mNano
argument_list|)
argument_list|,
name|zero
argument_list|)
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|x_
argument_list|,
name|y_
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|System
operator|.
name|class
argument_list|,
literal|"out"
argument_list|)
argument_list|,
literal|"println"
argument_list|,
name|x_
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  long x = 0L;\n"
operator|+
literal|"  if (System.nanoTime()> 0L) {\n"
operator|+
literal|"    x = System.currentTimeMillis();\n"
operator|+
literal|"  }\n"
operator|+
literal|"  System.out.println(x);\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssign2
parameter_list|()
block|{
comment|// long x = 0;
comment|// final long y = System.currentTimeMillis();
comment|// if (System.currentTimeMillis()> 0) {
comment|//   x = y;
comment|// }
comment|//
comment|// Make sure we don't fold two calls to System.currentTimeMillis into one.
specifier|final
name|ParameterExpression
name|x_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|y_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|mT
init|=
name|Linq4j
operator|.
name|getMethod
argument_list|(
literal|"java.lang.System"
argument_list|,
literal|"currentTimeMillis"
argument_list|)
decl_stmt|;
specifier|final
name|ConstantExpression
name|zero
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|optimize
argument_list|(
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|x_
argument_list|,
name|zero
argument_list|)
argument_list|,
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|y_
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|mT
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|ifThen
argument_list|(
name|Expressions
operator|.
name|greaterThan
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|mT
argument_list|)
argument_list|,
name|zero
argument_list|)
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|x_
argument_list|,
name|y_
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"{\n"
operator|+
literal|"  long x = 0L;\n"
operator|+
literal|"  if (System.currentTimeMillis()> 0L) {\n"
operator|+
literal|"    x = System.currentTimeMillis();\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End OptimizerTest.java
end_comment

end_unit

