begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|EqualityComparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|initialization
operator|.
name|qual
operator|.
name|UnknownInitialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|RequiresNonNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Performs a union (or union all) of all its inputs (which must be already sorted),  * respecting the order.  * @param<TSource> record type  * @param<TKey> sort key  */
end_comment

begin_class
specifier|final
class|class
name|MergeUnionEnumerator
parameter_list|<
name|TSource
parameter_list|,
name|TKey
parameter_list|>
implements|implements
name|Enumerator
argument_list|<
name|TSource
argument_list|>
block|{
specifier|private
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
index|[]
name|inputs
decl_stmt|;
specifier|private
specifier|final
name|TSource
index|[]
name|currentInputsValues
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|inputsFinished
decl_stmt|;
specifier|private
specifier|final
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|sortKeySelector
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|sortComparator
decl_stmt|;
specifier|private
name|TSource
name|currentValue
decl_stmt|;
specifier|private
name|int
name|activeInputs
decl_stmt|;
comment|// Set to control duplicates, only used if "all" is false
specifier|private
specifier|final
annotation|@
name|Nullable
name|Set
argument_list|<
name|EnumerableDefaults
operator|.
name|Wrapped
argument_list|<
name|TSource
argument_list|>
argument_list|>
name|processed
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|Function1
argument_list|<
name|TSource
argument_list|,
name|EnumerableDefaults
operator|.
name|Wrapped
argument_list|<
name|TSource
argument_list|>
argument_list|>
name|wrapper
decl_stmt|;
specifier|private
annotation|@
name|Nullable
name|TKey
name|currentKeyInProcessedSet
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|NOT_INIT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|MergeUnionEnumerator
parameter_list|(
name|List
argument_list|<
name|Enumerable
argument_list|<
name|TSource
argument_list|>
argument_list|>
name|sources
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|sortKeySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|sortComparator
parameter_list|,
name|boolean
name|all
parameter_list|,
name|EqualityComparer
argument_list|<
name|TSource
argument_list|>
name|equalityComparer
parameter_list|)
block|{
name|this
operator|.
name|sortKeySelector
operator|=
name|sortKeySelector
expr_stmt|;
name|this
operator|.
name|sortComparator
operator|=
name|sortComparator
expr_stmt|;
if|if
condition|(
name|all
condition|)
block|{
name|this
operator|.
name|processed
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|wrapper
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|processed
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|wrapper
operator|=
name|EnumerableDefaults
operator|.
name|wrapperFor
argument_list|(
name|equalityComparer
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|size
init|=
name|sources
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//noinspection unchecked
name|this
operator|.
name|inputs
operator|=
operator|new
name|Enumerator
index|[
name|size
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|source
range|:
name|sources
control|)
block|{
name|this
operator|.
name|inputs
index|[
name|i
operator|++
index|]
operator|=
name|source
operator|.
name|enumerator
argument_list|()
expr_stmt|;
block|}
comment|//noinspection unchecked
name|this
operator|.
name|currentInputsValues
operator|=
operator|(
name|TSource
index|[]
operator|)
operator|new
name|Object
index|[
name|size
index|]
expr_stmt|;
name|this
operator|.
name|activeInputs
operator|=
name|this
operator|.
name|currentInputsValues
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|inputsFinished
operator|=
operator|new
name|boolean
index|[
name|size
index|]
expr_stmt|;
comment|//noinspection unchecked
name|this
operator|.
name|currentValue
operator|=
operator|(
name|TSource
operator|)
name|NOT_INIT
expr_stmt|;
name|initEnumerators
argument_list|()
expr_stmt|;
block|}
annotation|@
name|RequiresNonNull
argument_list|(
literal|"inputs"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"method.invocation.invalid"
argument_list|)
specifier|private
name|void
name|initEnumerators
parameter_list|(
annotation|@
name|UnknownInitialization
name|MergeUnionEnumerator
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|this
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|moveEnumerator
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|moveEnumerator
parameter_list|(
name|int
name|i
parameter_list|)
block|{
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
init|=
name|inputs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|activeInputs
operator|--
expr_stmt|;
name|inputsFinished
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
annotation|@
name|Nullable
name|TSource
index|[]
name|auxInputsValues
init|=
name|currentInputsValues
decl_stmt|;
name|auxInputsValues
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|currentInputsValues
index|[
name|i
index|]
operator|=
name|enumerator
operator|.
name|current
argument_list|()
expr_stmt|;
name|inputsFinished
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|checkNotDuplicated
parameter_list|(
name|TSource
name|value
parameter_list|)
block|{
if|if
condition|(
name|processed
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
comment|// UNION ALL: no need to check duplicates
block|}
comment|// check duplicates
annotation|@
name|SuppressWarnings
argument_list|(
literal|"dereference.of.nullable"
argument_list|)
specifier|final
name|EnumerableDefaults
operator|.
name|Wrapped
argument_list|<
name|TSource
argument_list|>
name|wrapped
init|=
name|wrapper
operator|.
name|apply
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processed
operator|.
name|contains
argument_list|(
name|wrapped
argument_list|)
condition|)
block|{
specifier|final
name|TKey
name|key
init|=
name|sortKeySelector
operator|.
name|apply
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Since inputs are sorted, we do not need to keep in the set all the items that we
comment|// have previously returned, just the ones with the same key, as soon as we see a new
comment|// key, we can clear the set containing the items belonging to the previous key
annotation|@
name|SuppressWarnings
argument_list|(
literal|"argument.type.incompatible"
argument_list|)
specifier|final
name|int
name|sortComparison
init|=
name|sortComparator
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|currentKeyInProcessedSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortComparison
operator|!=
literal|0
condition|)
block|{
name|processed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentKeyInProcessedSet
operator|=
name|key
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentKeyInProcessedSet
operator|=
name|key
expr_stmt|;
block|}
name|processed
operator|.
name|add
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|int
name|compare
parameter_list|(
name|TSource
name|e1
parameter_list|,
name|TSource
name|e2
parameter_list|)
block|{
specifier|final
name|TKey
name|key1
init|=
name|sortKeySelector
operator|.
name|apply
argument_list|(
name|e1
argument_list|)
decl_stmt|;
specifier|final
name|TKey
name|key2
init|=
name|sortKeySelector
operator|.
name|apply
argument_list|(
name|e2
argument_list|)
decl_stmt|;
return|return
name|sortComparator
operator|.
name|compare
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TSource
name|current
parameter_list|()
block|{
if|if
condition|(
name|currentValue
operator|==
name|NOT_INIT
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|currentValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
while|while
condition|(
name|activeInputs
operator|>
literal|0
condition|)
block|{
name|int
name|candidateIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentInputsValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputsFinished
index|[
name|i
index|]
condition|)
block|{
name|candidateIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|activeInputs
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|candidateIndex
operator|+
literal|1
init|;
name|i
operator|<
name|currentInputsValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|inputsFinished
index|[
name|i
index|]
condition|)
block|{
continue|continue;
block|}
specifier|final
name|int
name|comp
init|=
name|compare
argument_list|(
name|currentInputsValues
index|[
name|candidateIndex
index|]
argument_list|,
name|currentInputsValues
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|>
literal|0
condition|)
block|{
name|candidateIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|checkNotDuplicated
argument_list|(
name|currentInputsValues
index|[
name|candidateIndex
index|]
argument_list|)
condition|)
block|{
name|currentValue
operator|=
name|currentInputsValues
index|[
name|candidateIndex
index|]
expr_stmt|;
name|moveEnumerator
argument_list|(
name|candidateIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|moveEnumerator
argument_list|(
name|candidateIndex
argument_list|)
expr_stmt|;
comment|// continue loop
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
range|:
name|inputs
control|)
block|{
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|processed
operator|!=
literal|null
condition|)
block|{
name|processed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentKeyInProcessedSet
operator|=
literal|null
expr_stmt|;
block|}
comment|//noinspection unchecked
name|currentValue
operator|=
operator|(
name|TSource
operator|)
name|NOT_INIT
expr_stmt|;
name|activeInputs
operator|=
name|currentInputsValues
operator|.
name|length
expr_stmt|;
name|initEnumerators
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
range|:
name|inputs
control|)
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

