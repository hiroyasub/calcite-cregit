begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Enumerator over the cartesian product of enumerators.  *  * @param<T> Input element type  * @param<E> Element type  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CartesianProductEnumerator
parameter_list|<
name|T
parameter_list|,
name|E
parameter_list|>
implements|implements
name|Enumerator
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Enumerator
argument_list|<
name|T
argument_list|>
argument_list|>
name|enumerators
decl_stmt|;
specifier|protected
specifier|final
name|T
index|[]
name|elements
decl_stmt|;
specifier|private
name|boolean
name|first
init|=
literal|true
decl_stmt|;
specifier|protected
name|CartesianProductEnumerator
parameter_list|(
name|List
argument_list|<
name|Enumerator
argument_list|<
name|T
argument_list|>
argument_list|>
name|enumerators
parameter_list|)
block|{
name|this
operator|.
name|enumerators
operator|=
name|enumerators
expr_stmt|;
comment|//noinspection unchecked
name|this
operator|.
name|elements
operator|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|enumerators
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
if|if
condition|(
name|first
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
range|:
name|enumerators
control|)
block|{
if|if
condition|(
operator|!
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|elements
index|[
name|i
operator|++
index|]
operator|=
name|enumerator
operator|.
name|current
argument_list|()
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|ordinal
init|=
name|enumerators
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|ordinal
operator|>=
literal|0
condition|;
operator|--
name|ordinal
control|)
block|{
specifier|final
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
init|=
name|enumerators
operator|.
name|get
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|elements
index|[
name|ordinal
index|]
operator|=
name|enumerator
operator|.
name|current
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Move back to first element.
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
comment|// Very strange... this was empty all along.
return|return
literal|false
return|;
block|}
name|elements
index|[
name|ordinal
index|]
operator|=
name|enumerator
operator|.
name|current
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
range|:
name|enumerators
control|)
block|{
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// If there is one or more exceptions, carry on and close all enumerators,
comment|// then throw the first.
name|Throwable
name|rte
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
range|:
name|enumerators
control|)
block|{
try|try
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|rte
operator|==
literal|null
condition|)
block|{
name|rte
operator|=
name|e
expr_stmt|;
block|}
else|else
block|{
name|rte
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|rte
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rte
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|rte
throw|;
block|}
else|else
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|rte
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

