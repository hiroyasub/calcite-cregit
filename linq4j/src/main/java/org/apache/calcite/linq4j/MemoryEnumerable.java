begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
package|;
end_package

begin_comment
comment|/**  * Enumerable that has a (limited) memory for n past and m future steps.  *  * @param<E> Type of the Enumerable items to remember  */
end_comment

begin_class
specifier|public
class|class
name|MemoryEnumerable
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractEnumerable
argument_list|<
name|MemoryFactory
operator|.
name|Memory
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|Enumerable
argument_list|<
name|E
argument_list|>
name|input
decl_stmt|;
specifier|private
specifier|final
name|int
name|history
decl_stmt|;
specifier|private
specifier|final
name|int
name|future
decl_stmt|;
comment|/**    * Creates a MemoryEnumerable.    *    * @param input The Enumerable which the memory should be "wrapped" around    * @param history Number of present steps to remember    * @param future Number of future steps to remember    */
name|MemoryEnumerable
parameter_list|(
name|Enumerable
argument_list|<
name|E
argument_list|>
name|input
parameter_list|,
name|int
name|history
parameter_list|,
name|int
name|future
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|history
operator|=
name|history
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|MemoryFactory
operator|.
name|Memory
argument_list|<
name|E
argument_list|>
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|MemoryEnumerator
argument_list|<>
argument_list|(
name|input
operator|.
name|enumerator
argument_list|()
argument_list|,
name|history
argument_list|,
name|future
argument_list|)
return|;
block|}
block|}
end_class

end_unit

