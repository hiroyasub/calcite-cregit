begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utilities for converting between {@link Expression}, {@link Type} and  * {@link Class}.  *  * @see Primitive  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Types
block|{
specifier|private
name|Types
parameter_list|()
block|{
block|}
comment|/**    * Creates a type with generic parameters.    */
specifier|public
specifier|static
name|Type
name|of
parameter_list|(
name|Type
name|type
parameter_list|,
name|Type
modifier|...
name|typeArguments
parameter_list|)
block|{
if|if
condition|(
name|typeArguments
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|type
return|;
block|}
return|return
operator|new
name|ParameterizedTypeImpl
argument_list|(
name|type
argument_list|,
name|toList
argument_list|(
name|typeArguments
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns the element type of a {@link Collection}, {@link Iterable}    * (including {@link org.apache.calcite.linq4j.Queryable Queryable} and    * {@link org.apache.calcite.linq4j.Enumerable Enumerable}), {@link Iterator},    * {@link Enumerator}, or an array.    *    *<p>Returns null if the type is not one of these.</p>    */
specifier|public
specifier|static
name|Type
name|getElementType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|ArrayType
condition|)
block|{
return|return
operator|(
operator|(
name|ArrayType
operator|)
name|type
operator|)
operator|.
name|getComponentType
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
operator|(
operator|(
name|GenericArrayType
operator|)
name|type
operator|)
operator|.
name|getGenericComponentType
argument_list|()
return|;
block|}
name|Class
name|clazz
init|=
name|toClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|clazz
operator|.
name|getComponentType
argument_list|()
return|;
block|}
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|||
name|Iterable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|||
name|Iterator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|||
name|Enumerator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
return|return
name|Object
operator|.
name|class
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns a list backed by a copy of an array. The contents of the list    * will not change even if the contents of the array are subsequently    * modified.    */
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|toList
parameter_list|(
name|T
index|[]
name|ts
parameter_list|)
block|{
switch|switch
condition|(
name|ts
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|ts
index|[
literal|0
index|]
argument_list|)
return|;
default|default:
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ts
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|static
name|Field
name|getField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
try|try
block|{
return|return
name|clazz
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown field '"
operator|+
name|fieldName
operator|+
literal|"' in class "
operator|+
name|clazz
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|PseudoField
name|getField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|RecordType
condition|)
block|{
return|return
name|getRecordField
argument_list|(
name|fieldName
argument_list|,
operator|(
name|RecordType
operator|)
name|type
argument_list|)
return|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|Class
operator|&&
operator|(
operator|(
name|Class
operator|)
name|type
operator|)
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|getSystemField
argument_list|(
name|fieldName
argument_list|,
operator|(
name|Class
operator|)
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|field
argument_list|(
name|getField
argument_list|(
name|fieldName
argument_list|,
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|RecordField
name|getRecordField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|RecordType
name|type
parameter_list|)
block|{
for|for
control|(
name|RecordField
name|field
range|:
name|type
operator|.
name|getRecordFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|field
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown field '"
operator|+
name|fieldName
operator|+
literal|"' in type "
operator|+
name|type
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|RecordField
name|getSystemField
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|Class
name|clazz
parameter_list|)
block|{
comment|// The "length" field of an array does not appear in Class.getFields().
return|return
operator|new
name|ArrayLengthRecordField
argument_list|(
name|fieldName
argument_list|,
name|clazz
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Class
name|toClass
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
operator|)
name|type
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|toClass
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
name|typeVariable
init|=
operator|(
name|TypeVariable
operator|)
name|type
decl_stmt|;
return|return
name|toClass
argument_list|(
name|typeVariable
operator|.
name|getBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unsupported type "
operator|+
name|type
argument_list|)
throw|;
comment|// TODO:
block|}
specifier|static
name|Class
index|[]
name|toClassArray
parameter_list|(
name|Collection
argument_list|<
name|Type
argument_list|>
name|types
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|type
range|:
name|types
control|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|classes
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|static
name|Class
index|[]
name|toClassArray
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|argument
range|:
name|arguments
control|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|toClass
argument_list|(
name|argument
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|classes
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns the component type of an array.    */
specifier|public
specifier|static
name|Type
name|getComponentType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
operator|(
name|Class
operator|)
name|type
operator|)
operator|.
name|getComponentType
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|ArrayType
condition|)
block|{
return|return
operator|(
operator|(
name|ArrayType
operator|)
name|type
operator|)
operator|.
name|getComponentType
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
operator|(
operator|(
name|GenericArrayType
operator|)
name|type
operator|)
operator|.
name|getGenericComponentType
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|getComponentType
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
name|typeVariable
init|=
operator|(
name|TypeVariable
operator|)
name|type
decl_stmt|;
return|return
name|getComponentType
argument_list|(
name|typeVariable
operator|.
name|getBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
comment|// not an array type
block|}
specifier|static
name|Type
name|getComponentTypeN
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|Type
name|oldType
init|=
name|type
decl_stmt|;
name|type
operator|=
name|getComponentType
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|oldType
return|;
block|}
block|}
block|}
comment|/**    * Boxes a type, if it is primitive, and returns the type name.    * The type is abbreviated if it is in the "java.lang" package.    *    *<p>For example,    * boxClassName(int) returns "Integer";    * boxClassName(List&lt;String&gt;) returns "List&lt;String&gt;"</p>    *    * @param type Type    *    * @return Class name    */
specifier|static
name|String
name|boxClassName
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|type
operator|instanceof
name|Class
operator|)
condition|)
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
condition|)
block|{
return|return
name|primitive
operator|.
name|boxClass
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|className
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Type
name|box
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
condition|)
block|{
return|return
name|primitive
operator|.
name|boxClass
return|;
block|}
else|else
block|{
return|return
name|type
return|;
block|}
block|}
specifier|public
specifier|static
name|Type
name|unbox
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|ofBox
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
condition|)
block|{
return|return
name|primitive
operator|.
name|primitiveClass
return|;
block|}
else|else
block|{
return|return
name|type
return|;
block|}
block|}
specifier|static
name|String
name|className
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|ArrayType
condition|)
block|{
return|return
name|className
argument_list|(
operator|(
operator|(
name|ArrayType
operator|)
name|type
operator|)
operator|.
name|getComponentType
argument_list|()
argument_list|)
operator|+
literal|"[]"
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|type
operator|instanceof
name|Class
operator|)
condition|)
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
name|Class
name|clazz
init|=
operator|(
name|Class
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|className
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
operator|+
literal|"[]"
return|;
block|}
name|String
name|className
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isPrimitive
argument_list|()
operator|&&
name|clazz
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"java.lang"
argument_list|)
condition|)
block|{
return|return
name|className
operator|.
name|substring
argument_list|(
literal|"java.lang."
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|className
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'.'
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|Type
name|type0
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
return|return
name|toClass
argument_list|(
name|type0
argument_list|)
operator|.
name|isAssignableFrom
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isArray
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|toClass
argument_list|(
name|type
argument_list|)
operator|.
name|isArray
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Field
name|nthField
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|getFields
argument_list|()
index|[
name|ordinal
index|]
return|;
block|}
specifier|public
specifier|static
name|PseudoField
name|nthField
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|Type
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|instanceof
name|RecordType
condition|)
block|{
name|RecordType
name|recordType
init|=
operator|(
name|RecordType
operator|)
name|clazz
decl_stmt|;
return|return
name|recordType
operator|.
name|getRecordFields
argument_list|()
operator|.
name|get
argument_list|(
name|ordinal
argument_list|)
return|;
block|}
return|return
name|field
argument_list|(
name|toClass
argument_list|(
name|clazz
argument_list|)
operator|.
name|getFields
argument_list|()
index|[
name|ordinal
index|]
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|allAssignable
parameter_list|(
name|boolean
name|varArgs
parameter_list|,
name|Class
index|[]
name|parameterTypes
parameter_list|,
name|Class
index|[]
name|argumentTypes
parameter_list|)
block|{
if|if
condition|(
name|varArgs
condition|)
block|{
if|if
condition|(
name|argumentTypes
operator|.
name|length
operator|<
name|parameterTypes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|!=
name|argumentTypes
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argumentTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
name|parameterType
init|=
operator|!
name|varArgs
operator|||
name|i
operator|<
name|parameterTypes
operator|.
name|length
operator|-
literal|1
condition|?
name|parameterTypes
index|[
name|i
index|]
else|:
name|Object
operator|.
name|class
decl_stmt|;
if|if
condition|(
operator|!
name|assignableFrom
argument_list|(
name|parameterType
argument_list|,
name|argumentTypes
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns whether a parameter is assignable from an argument by virtue    * of (a) sub-classing (e.g. Writer is assignable from PrintWriter) and (b)    * up-casting (e.g. int is assignable from short).    *    * @param parameter Parameter type    * @param argument Argument type    *    * @return Whether parameter can be assigned from argument    */
specifier|private
specifier|static
name|boolean
name|assignableFrom
parameter_list|(
name|Class
name|parameter
parameter_list|,
name|Class
name|argument
parameter_list|)
block|{
return|return
name|parameter
operator|.
name|isAssignableFrom
argument_list|(
name|argument
argument_list|)
operator|||
name|parameter
operator|.
name|isPrimitive
argument_list|()
operator|&&
name|argument
operator|.
name|isPrimitive
argument_list|()
operator|&&
name|Primitive
operator|.
name|of
argument_list|(
name|parameter
argument_list|)
operator|.
name|assignableFrom
argument_list|(
name|Primitive
operator|.
name|of
argument_list|(
name|argument
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Finds a method of a given name that accepts a given set of arguments.    * Includes in its search inherited methods and methods with wider argument    * types.    *    * @param clazz Class against which method is invoked    * @param methodName Name of method    * @param argumentTypes Types of arguments    *    * @return A method with the given name that matches the arguments given    * @throws RuntimeException if method not found    */
specifier|public
specifier|static
name|Method
name|lookupMethod
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
modifier|...
name|argumentTypes
parameter_list|)
block|{
try|try
block|{
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|argumentTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|allAssignable
argument_list|(
name|method
operator|.
name|isVarArgs
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|,
name|argumentTypes
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while resolving method '"
operator|+
name|methodName
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|argumentTypes
argument_list|)
operator|+
literal|"' in class "
operator|+
name|clazz
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Finds a constructor of a given class that accepts a given set of    * arguments. Includes in its search methods with wider argument types.    *    * @param type Class against which method is invoked    * @param argumentTypes Types of arguments    *    * @return A method with the given name that matches the arguments given    * @throws RuntimeException if method not found    */
specifier|public
specifier|static
name|Constructor
name|lookupConstructor
parameter_list|(
name|Type
name|type
parameter_list|,
name|Class
modifier|...
name|argumentTypes
parameter_list|)
block|{
specifier|final
name|Class
name|clazz
init|=
name|toClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Constructor
index|[]
name|constructors
init|=
name|clazz
operator|.
name|getDeclaredConstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
name|constructor
range|:
name|constructors
control|)
block|{
if|if
condition|(
name|allAssignable
argument_list|(
name|constructor
operator|.
name|isVarArgs
argument_list|()
argument_list|,
name|constructor
operator|.
name|getParameterTypes
argument_list|()
argument_list|,
name|argumentTypes
argument_list|)
condition|)
block|{
return|return
name|constructor
return|;
block|}
block|}
if|if
condition|(
name|constructors
operator|.
name|length
operator|==
literal|0
operator|&&
name|argumentTypes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|Constructor
index|[]
name|constructors1
init|=
name|clazz
operator|.
name|getConstructors
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|clazz
operator|.
name|getConstructor
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while resolving constructor in class "
operator|+
name|type
operator|+
literal|" with types "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|argumentTypes
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|Field
name|lookupField
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Class
name|clazz
init|=
name|toClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|clazz
operator|.
name|getField
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while resolving field in class "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|discard
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
literal|false
condition|)
block|{
name|discard
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the most restrictive type that is assignable from all given    * types.    */
specifier|static
name|Type
name|gcd
parameter_list|(
name|Type
modifier|...
name|types
parameter_list|)
block|{
comment|// TODO: improve this
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
name|Type
name|best
init|=
name|types
index|[
literal|0
index|]
decl_stmt|;
name|Primitive
name|bestPrimitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|best
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestPrimitive
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|types
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|==
literal|null
condition|)
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
if|if
condition|(
name|primitive
operator|.
name|assignableFrom
argument_list|(
name|bestPrimitive
argument_list|)
condition|)
block|{
name|bestPrimitive
operator|=
name|primitive
expr_stmt|;
block|}
if|else if
condition|(
name|bestPrimitive
operator|.
name|assignableFrom
argument_list|(
name|primitive
argument_list|)
condition|)
block|{
comment|// ok
block|}
if|else if
condition|(
name|bestPrimitive
operator|==
name|Primitive
operator|.
name|CHAR
operator|||
name|bestPrimitive
operator|==
name|Primitive
operator|.
name|BYTE
condition|)
block|{
comment|// 'char' and 'byte' are problematic, because they don't
comment|// assign to each other. 'char' can't even assign to
comment|// 'short'. Before we give up, try one last time with 'int'.
name|bestPrimitive
operator|=
name|Primitive
operator|.
name|INT
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
else|else
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
block|}
return|return
name|bestPrimitive
operator|.
name|primitiveClass
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|types
index|[
name|i
index|]
operator|!=
name|types
index|[
literal|0
index|]
condition|)
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
block|}
block|}
return|return
name|types
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Wraps an expression in a cast if it is not already of the desired type,    * or cannot be implicitly converted to it.    *    * @param returnType Desired type    * @param expression Expression    *    * @return Expression of desired type    */
specifier|public
specifier|static
name|Expression
name|castIfNecessary
parameter_list|(
name|Type
name|returnType
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
specifier|final
name|Type
name|type
init|=
name|expression
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|returnType
operator|instanceof
name|RecordType
condition|)
block|{
comment|// We can't extract Class from RecordType since mapping Java Class might not generated yet.
return|return
name|expression
return|;
block|}
if|if
condition|(
name|Types
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
name|expression
return|;
block|}
if|if
condition|(
name|returnType
operator|instanceof
name|Class
operator|&&
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
operator|)
name|returnType
argument_list|)
operator|&&
name|type
operator|instanceof
name|Class
operator|&&
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
operator|)
name|type
argument_list|)
condition|)
block|{
comment|// E.g.
comment|//   Integer foo(BigDecimal o) {
comment|//     return o.intValue();
comment|//   }
return|return
name|Expressions
operator|.
name|unbox
argument_list|(
name|expression
argument_list|,
name|Primitive
operator|.
name|ofBox
argument_list|(
name|returnType
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|Primitive
operator|.
name|is
argument_list|(
name|returnType
argument_list|)
operator|&&
operator|!
name|Primitive
operator|.
name|is
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// E.g.
comment|//   int foo(Object o) {
comment|//     return ((Integer) o).intValue();
comment|//   }
return|return
name|Expressions
operator|.
name|unbox
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|expression
argument_list|,
name|Types
operator|.
name|box
argument_list|(
name|returnType
argument_list|)
argument_list|)
argument_list|,
name|Primitive
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|Primitive
operator|.
name|is
argument_list|(
name|returnType
argument_list|)
operator|&&
name|Primitive
operator|.
name|is
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// E.g.
comment|//   Short foo(Object o) {
comment|//     return (short) (int) o;
comment|//   }
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|expression
argument_list|,
name|Types
operator|.
name|unbox
argument_list|(
name|returnType
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|expression
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PseudoField
name|field
parameter_list|(
specifier|final
name|Field
name|field
parameter_list|)
block|{
return|return
operator|new
name|ReflectedPseudoField
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|static
name|Class
name|arrayClass
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|// REVIEW: Is there a way to do this without creating an instance? We
comment|//  just need the inverse of Class.getComponentType().
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
specifier|static
name|Type
name|arrayType
parameter_list|(
name|Type
name|type
parameter_list|,
name|int
name|dimension
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dimension
condition|;
name|i
operator|++
control|)
block|{
name|type
operator|=
name|arrayType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|static
name|Type
name|arrayType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
name|clazz
init|=
operator|(
name|Class
operator|)
name|type
decl_stmt|;
comment|// REVIEW: Is there a way to do this without creating an instance?
comment|//   We just need the inverse of Class.getComponentType().
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
return|return
operator|new
name|ArrayType
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Type
name|stripGenerics
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
specifier|final
name|Type
name|componentType
init|=
operator|(
operator|(
name|GenericArrayType
operator|)
name|type
operator|)
operator|.
name|getGenericComponentType
argument_list|()
decl_stmt|;
return|return
operator|new
name|ArrayType
argument_list|(
name|stripGenerics
argument_list|(
name|componentType
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getRawType
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|type
return|;
block|}
block|}
comment|/** Implementation of {@link ParameterizedType}. */
specifier|static
class|class
name|ParameterizedTypeImpl
implements|implements
name|ParameterizedType
block|{
specifier|private
specifier|final
name|Type
name|rawType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|typeArguments
decl_stmt|;
specifier|private
specifier|final
name|Type
name|ownerType
decl_stmt|;
name|ParameterizedTypeImpl
parameter_list|(
name|Type
name|rawType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|typeArguments
parameter_list|,
name|Type
name|ownerType
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|rawType
operator|=
name|rawType
expr_stmt|;
name|this
operator|.
name|typeArguments
operator|=
name|typeArguments
expr_stmt|;
name|this
operator|.
name|ownerType
operator|=
name|ownerType
expr_stmt|;
assert|assert
name|rawType
operator|!=
literal|null
assert|;
for|for
control|(
name|Type
name|typeArgument
range|:
name|typeArguments
control|)
block|{
assert|assert
name|typeArgument
operator|!=
literal|null
assert|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|className
argument_list|(
name|rawType
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Type
name|typeArgument
range|:
name|typeArguments
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|className
argument_list|(
name|typeArgument
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Type
index|[]
name|getActualTypeArguments
parameter_list|()
block|{
return|return
name|typeArguments
operator|.
name|toArray
argument_list|(
operator|new
name|Type
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|Type
name|getRawType
parameter_list|()
block|{
return|return
name|rawType
return|;
block|}
specifier|public
name|Type
name|getOwnerType
parameter_list|()
block|{
return|return
name|ownerType
return|;
block|}
block|}
comment|/**    * Base class for record-like types that do not mapped to (currently    * loaded) Java {@link Class} objects. Gives the opportunity to generate    * code that references temporary types, then generate classes for those    * types along with the code that uses them.    */
specifier|public
interface|interface
name|RecordType
extends|extends
name|Type
block|{
name|List
argument_list|<
name|RecordField
argument_list|>
name|getRecordFields
parameter_list|()
function_decl|;
name|String
name|getName
parameter_list|()
function_decl|;
block|}
comment|/**    * Field that belongs to a record.    */
specifier|public
interface|interface
name|RecordField
extends|extends
name|PseudoField
block|{
name|boolean
name|nullable
parameter_list|()
function_decl|;
block|}
comment|/**    * Array type.    */
specifier|public
specifier|static
class|class
name|ArrayType
implements|implements
name|Type
block|{
specifier|private
specifier|final
name|Type
name|componentType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|componentIsNullable
decl_stmt|;
specifier|private
specifier|final
name|long
name|maximumCardinality
decl_stmt|;
specifier|public
name|ArrayType
parameter_list|(
name|Type
name|componentType
parameter_list|,
name|boolean
name|componentIsNullable
parameter_list|,
name|long
name|maximumCardinality
parameter_list|)
block|{
name|this
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
name|this
operator|.
name|componentIsNullable
operator|=
name|componentIsNullable
expr_stmt|;
name|this
operator|.
name|maximumCardinality
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maximumCardinality
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArrayType
parameter_list|(
name|Type
name|componentType
parameter_list|)
block|{
name|this
argument_list|(
name|componentType
argument_list|,
operator|!
name|Primitive
operator|.
name|is
argument_list|(
name|componentType
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the type of elements in the array. */
specifier|public
name|Type
name|getComponentType
parameter_list|()
block|{
return|return
name|componentType
return|;
block|}
comment|/** Returns whether elements in the array may be null. */
specifier|public
name|boolean
name|componentIsNullable
parameter_list|()
block|{
return|return
name|componentIsNullable
return|;
block|}
comment|/** Returns the maximum cardinality; -1 if there is no maximum. */
specifier|public
name|long
name|maximumCardinality
parameter_list|()
block|{
return|return
name|maximumCardinality
return|;
block|}
block|}
comment|/**    * Map type.    */
specifier|public
specifier|static
class|class
name|MapType
implements|implements
name|Type
block|{
specifier|private
specifier|final
name|Type
name|keyType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|keyIsNullable
decl_stmt|;
specifier|private
specifier|final
name|Type
name|valueType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|valueIsNullable
decl_stmt|;
specifier|public
name|MapType
parameter_list|(
name|Type
name|keyType
parameter_list|,
name|boolean
name|keyIsNullable
parameter_list|,
name|Type
name|valueType
parameter_list|,
name|boolean
name|valueIsNullable
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
name|this
operator|.
name|keyIsNullable
operator|=
name|keyIsNullable
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
name|this
operator|.
name|valueIsNullable
operator|=
name|valueIsNullable
expr_stmt|;
block|}
comment|/** Returns the type of keys. */
specifier|public
name|Type
name|getKeyType
parameter_list|()
block|{
return|return
name|keyType
return|;
block|}
comment|/** Returns whether keys may be null. */
specifier|public
name|boolean
name|keyIsNullable
parameter_list|()
block|{
return|return
name|keyIsNullable
return|;
block|}
comment|/** Returns the type of values. */
specifier|public
name|Type
name|getValueType
parameter_list|()
block|{
return|return
name|valueType
return|;
block|}
comment|/** Returns whether values may be null. */
specifier|public
name|boolean
name|valueIsNullable
parameter_list|()
block|{
return|return
name|valueIsNullable
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Types.java
end_comment

end_unit

