begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Entry point for optimizers that factor ou deterministic expressions to  * final static fields.  * Instances of this class should not be reused, so new visitor should be  * created for optimizing a new expression tree.  */
end_comment

begin_class
specifier|public
class|class
name|ClassDeclarationFinder
extends|extends
name|Visitor
block|{
specifier|protected
specifier|final
name|ClassDeclarationFinder
name|parent
decl_stmt|;
comment|/**    * The list of new final static fields to be added to the current class.    */
specifier|protected
specifier|final
name|List
argument_list|<
name|MemberDeclaration
argument_list|>
name|addedDeclarations
init|=
operator|new
name|ArrayList
argument_list|<
name|MemberDeclaration
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Function1
argument_list|<
name|ClassDeclarationFinder
argument_list|,
name|ClassDeclarationFinder
argument_list|>
name|childFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function1
argument_list|<
name|ClassDeclarationFinder
argument_list|,
name|ClassDeclarationFinder
argument_list|>
name|DEFAULT_CHILD_FACTORY
init|=
operator|new
name|Function1
argument_list|<
name|ClassDeclarationFinder
argument_list|,
name|ClassDeclarationFinder
argument_list|>
argument_list|()
block|{
specifier|public
name|ClassDeclarationFinder
name|apply
parameter_list|(
name|ClassDeclarationFinder
name|a0
parameter_list|)
block|{
return|return
operator|new
name|DeterministicCodeOptimizer
argument_list|(
name|a0
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Creates visitor that uses default optimizer.    *    * @return optimizing visitor    */
specifier|public
specifier|static
name|ClassDeclarationFinder
name|create
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|DEFAULT_CHILD_FACTORY
argument_list|)
return|;
block|}
comment|/**    * Creates visitor that uses given class as optimizer.    * The implementation should support ({@code ClassDeclarationFinder})    * constructor.    *    * @param optimizingClass class that implements optimizations    * @return optimizing visitor    */
specifier|public
specifier|static
name|ClassDeclarationFinder
name|create
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ClassDeclarationFinder
argument_list|>
name|optimizingClass
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|newChildCreator
argument_list|(
name|optimizingClass
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates visitor that uses given factory to create optimizers.    *    * @param childFactory factory that creates optimizers    * @return optimizing visitor    */
specifier|public
specifier|static
name|ClassDeclarationFinder
name|create
parameter_list|(
name|Function1
argument_list|<
name|ClassDeclarationFinder
argument_list|,
name|ClassDeclarationFinder
argument_list|>
name|childFactory
parameter_list|)
block|{
return|return
operator|new
name|ClassDeclarationFinder
argument_list|(
name|childFactory
argument_list|)
return|;
block|}
comment|/**    * Creates factory that creates instances of optimizing visitors.    * The implementation should support ({@code ClassDeclarationFinder})    * constructor.    *    * @param optimizingClass class that implements optimizations    * @return factory that creates instances of given classes    */
specifier|private
specifier|static
name|Function1
argument_list|<
name|ClassDeclarationFinder
argument_list|,
name|ClassDeclarationFinder
argument_list|>
name|newChildCreator
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ClassDeclarationFinder
argument_list|>
name|optimizingClass
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Constructor
argument_list|<
name|?
extends|extends
name|ClassDeclarationFinder
argument_list|>
name|constructor
init|=
name|optimizingClass
operator|.
name|getConstructor
argument_list|(
name|ClassDeclarationFinder
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|Function1
argument_list|<
name|ClassDeclarationFinder
argument_list|,
name|ClassDeclarationFinder
argument_list|>
argument_list|()
block|{
specifier|public
name|ClassDeclarationFinder
name|apply
parameter_list|(
name|ClassDeclarationFinder
name|a0
parameter_list|)
block|{
try|try
block|{
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|a0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create optimizer via "
operator|+
name|constructor
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create optimizer via "
operator|+
name|constructor
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create optimizer via "
operator|+
name|constructor
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given class "
operator|+
name|optimizingClass
operator|+
literal|"does not support (ClassDeclarationFinder) constructor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates optimizer with no parent.    */
specifier|private
name|ClassDeclarationFinder
parameter_list|(
name|Function1
argument_list|<
name|ClassDeclarationFinder
argument_list|,
name|ClassDeclarationFinder
argument_list|>
name|childFactory
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|childFactory
operator|=
name|childFactory
expr_stmt|;
block|}
comment|/**    * Creates a child optimizer.    * Typically a child is created for each class declaration,    * so each optimizer collects fields for exactly one class.    *    * @param parent parent optimizer    */
specifier|protected
name|ClassDeclarationFinder
parameter_list|(
name|ClassDeclarationFinder
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|childFactory
operator|=
name|parent
operator|.
name|childFactory
expr_stmt|;
block|}
comment|/**    * Creates optimizer local to the newly generated anonymous class.    *    * @param newExpression expression to optimize    * @return nested visitor if anonymous class is given    */
annotation|@
name|Override
specifier|public
name|Visitor
name|preVisit
parameter_list|(
name|NewExpression
name|newExpression
parameter_list|)
block|{
if|if
condition|(
name|newExpression
operator|.
name|memberDeclarations
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
name|ClassDeclarationFinder
name|visitor
init|=
name|goDeeper
argument_list|()
decl_stmt|;
name|visitor
operator|.
name|learnFinalStaticDeclarations
argument_list|(
name|newExpression
operator|.
name|memberDeclarations
argument_list|)
expr_stmt|;
return|return
name|visitor
return|;
block|}
comment|/**    * Creates optimizer local to the newly generated class.    *    * @param classDeclaration expression to optimize    * @return nested visitor    */
annotation|@
name|Override
specifier|public
name|Visitor
name|preVisit
parameter_list|(
name|ClassDeclaration
name|classDeclaration
parameter_list|)
block|{
name|ClassDeclarationFinder
name|visitor
init|=
name|goDeeper
argument_list|()
decl_stmt|;
name|visitor
operator|.
name|learnFinalStaticDeclarations
argument_list|(
name|classDeclaration
operator|.
name|memberDeclarations
argument_list|)
expr_stmt|;
return|return
name|visitor
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|visit
parameter_list|(
name|NewExpression
name|newExpression
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|,
name|List
argument_list|<
name|MemberDeclaration
argument_list|>
name|memberDeclarations
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// Unable to optimize since no wrapper class exists to put fields to.
name|arguments
operator|=
name|newExpression
operator|.
name|arguments
expr_stmt|;
block|}
if|else if
condition|(
name|memberDeclarations
operator|!=
literal|null
condition|)
block|{
comment|// Arguments to new Test(1+2) { ... } should be optimized via parent
comment|// optimizer.
name|arguments
operator|=
name|Expressions
operator|.
name|acceptExpressions
argument_list|(
name|newExpression
operator|.
name|arguments
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|Expression
name|result
init|=
name|super
operator|.
name|visit
argument_list|(
name|newExpression
argument_list|,
name|arguments
argument_list|,
name|memberDeclarations
argument_list|)
decl_stmt|;
if|if
condition|(
name|memberDeclarations
operator|==
literal|null
condition|)
block|{
return|return
name|tryOptimizeNewInstance
argument_list|(
operator|(
name|NewExpression
operator|)
name|result
argument_list|)
return|;
block|}
name|memberDeclarations
operator|=
name|optimizeDeclarations
argument_list|(
name|memberDeclarations
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
operator|(
name|NewExpression
operator|)
name|result
argument_list|,
name|arguments
argument_list|,
name|memberDeclarations
argument_list|)
return|;
block|}
comment|/**    * Processes the list of declarations when class expression detected.    * Sub-classes might figure out the existing fields for reuse.    *    * @param memberDeclarations list of declarations to process.    */
specifier|protected
name|void
name|learnFinalStaticDeclarations
parameter_list|(
name|List
argument_list|<
name|MemberDeclaration
argument_list|>
name|memberDeclarations
parameter_list|)
block|{
block|}
comment|/**    * Optimizes {@code new Type()} constructs.    *    * @param newExpression expression to optimize    * @return always returns un-optimized expression    */
specifier|protected
name|Expression
name|tryOptimizeNewInstance
parameter_list|(
name|NewExpression
name|newExpression
parameter_list|)
block|{
return|return
name|newExpression
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassDeclaration
name|visit
parameter_list|(
name|ClassDeclaration
name|classDeclaration
parameter_list|,
name|List
argument_list|<
name|MemberDeclaration
argument_list|>
name|memberDeclarations
parameter_list|)
block|{
name|memberDeclarations
operator|=
name|optimizeDeclarations
argument_list|(
name|memberDeclarations
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|classDeclaration
argument_list|,
name|memberDeclarations
argument_list|)
return|;
block|}
comment|/**    * Adds new declarations (e.g. final static fields) to the list of existing    * ones.    *    * @param memberDeclarations existing list of declarations    * @return new list of declarations or the same if no modifications required    */
specifier|protected
name|List
argument_list|<
name|MemberDeclaration
argument_list|>
name|optimizeDeclarations
parameter_list|(
name|List
argument_list|<
name|MemberDeclaration
argument_list|>
name|memberDeclarations
parameter_list|)
block|{
if|if
condition|(
name|addedDeclarations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|memberDeclarations
return|;
block|}
name|List
argument_list|<
name|MemberDeclaration
argument_list|>
name|newDecls
init|=
operator|new
name|ArrayList
argument_list|<
name|MemberDeclaration
argument_list|>
argument_list|(
name|memberDeclarations
operator|.
name|size
argument_list|()
operator|+
name|addedDeclarations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|newDecls
operator|.
name|addAll
argument_list|(
name|memberDeclarations
argument_list|)
expr_stmt|;
name|newDecls
operator|.
name|addAll
argument_list|(
name|addedDeclarations
argument_list|)
expr_stmt|;
return|return
name|newDecls
return|;
block|}
comment|/**    * Verifies if the expression is effectively constant.    * This method should be overridden in sub-classes.    *    * @param expression expression to test    * @return always returns false    */
specifier|protected
name|boolean
name|isConstant
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Verifies if all the expressions in given list are  effectively constant.    *    * @param list list of expressions to test    * @return true when all the expressions are known to be constant    */
specifier|protected
name|boolean
name|isConstant
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|list
parameter_list|)
block|{
for|for
control|(
name|Expression
name|expression
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
name|isConstant
argument_list|(
name|expression
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Finds if there exists ready for reuse declaration for given expression.    * This method should be overridden in sub-classes.    *    * @param expression input expression    * @return always returns null    */
specifier|protected
name|ParameterExpression
name|findDeclaredExpression
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Verifies if the variable name is already in use.    * This method should be overridden in sub-classes.    *    * @param name name of the variable to test    * @return always returns false    */
specifier|protected
name|boolean
name|hasField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Creates child visitor. It is used to traverse nested class declarations.    *    * @return new {@code Visitor} that is used to optimize class declarations    */
specifier|protected
name|ClassDeclarationFinder
name|goDeeper
parameter_list|()
block|{
return|return
name|childFactory
operator|.
name|apply
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End ClassDeclarationFinder.java
end_comment

end_unit

