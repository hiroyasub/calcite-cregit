begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Contains the State and changes internally.  * with the {@link #create()} method one can get immutable Snapshots.  * @param<E> Type of the base Object  */
end_comment

begin_class
specifier|public
class|class
name|MemoryFactory
parameter_list|<
name|E
parameter_list|>
block|{
specifier|private
specifier|final
name|int
name|history
decl_stmt|;
specifier|private
specifier|final
name|int
name|future
decl_stmt|;
comment|// Index:      0   1   2   3   4
comment|// Idea       -2  -1   0  +1  +2
name|ModularInteger
name|offset
decl_stmt|;
specifier|private
name|Object
index|[]
name|values
decl_stmt|;
specifier|public
name|MemoryFactory
parameter_list|(
name|int
name|history
parameter_list|,
name|int
name|future
parameter_list|)
block|{
name|this
operator|.
name|history
operator|=
name|history
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|Object
index|[
name|history
operator|+
name|future
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|offset
operator|=
operator|new
name|ModularInteger
argument_list|(
literal|0
argument_list|,
name|history
operator|+
name|future
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|E
name|current
parameter_list|)
block|{
name|values
index|[
name|offset
operator|.
name|get
argument_list|()
index|]
operator|=
name|current
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
operator|.
name|plus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Memory
argument_list|<
name|E
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|Memory
argument_list|<>
argument_list|(
name|history
argument_list|,
name|future
argument_list|,
name|offset
argument_list|,
name|values
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Contents of a "memory segment", used for implementing the    * {@code MATCH_RECOGNIZE} operator.    *    *<p>Memory maintains a "window" of records preceding and following a record;    * the records can be browsed using the {@link #get()} or {@link #get(int)}    * methods.    *    * @param<E> Row type    */
specifier|public
specifier|static
class|class
name|Memory
parameter_list|<
name|E
parameter_list|>
block|{
specifier|private
specifier|final
name|int
name|history
decl_stmt|;
specifier|private
specifier|final
name|int
name|future
decl_stmt|;
specifier|private
specifier|final
name|ModularInteger
name|offset
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|values
decl_stmt|;
specifier|public
name|Memory
parameter_list|(
name|int
name|history
parameter_list|,
name|int
name|future
parameter_list|,
name|ModularInteger
name|offset
parameter_list|,
name|Object
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|history
operator|=
name|history
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|this
operator|.
name|values
argument_list|)
return|;
block|}
specifier|public
name|E
name|get
parameter_list|()
block|{
return|return
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|E
name|get
parameter_list|(
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
name|position
operator|<
literal|0
operator|&&
name|position
operator|<
operator|-
literal|1
operator|*
name|history
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"History can only go back "
operator|+
name|history
operator|+
literal|" points in time, you wanted "
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|position
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|>
literal|0
operator|&&
name|position
operator|>
name|future
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Future can only see next "
operator|+
name|future
operator|+
literal|" points in time, you wanted "
operator|+
name|position
argument_list|)
throw|;
block|}
return|return
operator|(
name|E
operator|)
name|this
operator|.
name|values
index|[
name|this
operator|.
name|offset
operator|.
name|plus
argument_list|(
name|position
operator|-
literal|1
operator|-
name|future
argument_list|)
operator|.
name|get
argument_list|()
index|]
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MemoryFactory.java
end_comment

end_unit

