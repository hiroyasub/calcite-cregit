begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|initialization
operator|.
name|qual
operator|.
name|UnderInitialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|EnsuresNonNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|NonNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|dataflow
operator|.
name|qual
operator|.
name|Pure
import|;
end_import

begin_comment
comment|/**  * The methods in this class allow to cast nullable reference to a non-nullable one.  * This is an internal class, and it is not meant to be used as a public API.  *  *<p>The class enables to remove checker-qual runtime dependency, and helps IDEs to see  * the resulting types of {@code castNonNull} better.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast.unsafe"
block|,
literal|"RedundantCast"
block|,
literal|"contracts.postcondition.not.satisfied"
block|}
argument_list|)
specifier|public
class|class
name|Nullness
block|{
specifier|private
name|Nullness
parameter_list|()
block|{
block|}
comment|/**    * Allows you to treat a nullable type as non-nullable with no assertions.    *    *<p>It is useful in the case you have a nullable lately-initialized field    * like the following:    *    *<pre><code>    * class Wrapper&lt;T&gt; {    *&#64;Nullable T value;    * }    *</code></pre>    *    *<p>That signature allows you to use {@code Wrapper} with both nullable or    * non-nullable types: {@code Wrapper<@Nullable Integer>}    * vs {@code Wrapper<Integer>}. Suppose you need to implement    *    *<pre><code>    * T get() { return value; }    *</code></pre>    *    *<p>The issue is checkerframework does not permit that because {@code T}    * has unknown nullability, so the following needs to be used:    *    *<pre><code>    * T get() { return sneakyNull(value); }    *</code></pre>    *    * @param<T>     the type of the reference    * @param ref     a reference of @Nullable type, that is non-null at run time    *    * @return the argument, cast to have the type qualifier @NonNull    */
annotation|@
name|Pure
specifier|public
specifier|static
expr|@
name|EnsuresNonNull
argument_list|(
literal|"#1"
argument_list|)
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
expr|@
name|NonNull
name|T
name|castNonNull
argument_list|(
annotation|@
name|Nullable
name|T
name|ref
argument_list|)
block|{
comment|//noinspection ConstantConditions
return|return
operator|(
expr|@
name|NonNull
name|T
operator|)
name|ref
return|;
block|}
comment|/**    * Allows you to treat an uninitialized or under-initialization object as    * initialized with no assertions.    *    * @param<T>     The type of the reference    * @param ref     A reference that was @Uninitialized at some point but is    *                now fully initialized    *    * @return the argument, cast to have type qualifier @Initialized    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Pure
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|castToInitialized
parameter_list|(
annotation|@
name|UnderInitialization
name|T
name|ref
parameter_list|)
block|{
comment|// To throw CheckerFramework off the scent, we put the object into an array,
comment|// cast the array to an Object, and cast back to an array.
name|Object
name|src
init|=
operator|new
name|Object
index|[]
block|{
name|ref
block|}
decl_stmt|;
name|Object
index|[]
name|dest
init|=
operator|(
name|Object
index|[]
operator|)
name|src
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|dest
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

end_unit

