begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
package|;
end_package

begin_comment
comment|/** Enumerator that applies a transform to each value from a backing  * enumerator.  *  * @param<F> Element type of backing enumerator  * @param<E> Element type  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TransformedEnumerator
parameter_list|<
name|F
parameter_list|,
name|E
parameter_list|>
implements|implements
name|Enumerator
argument_list|<
name|E
argument_list|>
block|{
specifier|protected
specifier|final
name|Enumerator
argument_list|<
name|F
argument_list|>
name|enumerator
decl_stmt|;
specifier|public
name|TransformedEnumerator
parameter_list|(
name|Enumerator
argument_list|<
name|F
argument_list|>
name|enumerator
parameter_list|)
block|{
name|this
operator|.
name|enumerator
operator|=
name|enumerator
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|E
name|transform
parameter_list|(
name|F
name|from
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|moveNext
argument_list|()
return|;
block|}
specifier|public
name|E
name|current
parameter_list|()
block|{
return|return
name|transform
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

