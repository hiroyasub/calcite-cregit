begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_comment
comment|/**  * Pair of an element and an ordinal.  *  * @param<E> Element type  */
end_comment

begin_class
specifier|public
class|class
name|Ord
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|E
argument_list|>
block|{
specifier|public
specifier|final
name|int
name|i
decl_stmt|;
specifier|public
specifier|final
name|E
name|e
decl_stmt|;
comment|/**    * Creates an Ord.    */
specifier|public
name|Ord
parameter_list|(
name|int
name|i
parameter_list|,
name|E
name|e
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|i
expr_stmt|;
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
comment|/**    * Creates an Ord.    */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Ord
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|int
name|n
parameter_list|,
name|E
name|e
parameter_list|)
block|{
return|return
operator|new
name|Ord
argument_list|<>
argument_list|(
name|n
argument_list|,
name|e
argument_list|)
return|;
block|}
comment|/**    * Creates an iterable of {@code Ord}s over an iterable.    */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Iterable
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
name|zip
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
name|zip
argument_list|(
name|iterable
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates an iterator of {@code Ord}s over an iterator.    */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Iterator
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
name|zip
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|iterator
parameter_list|)
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Ord
argument_list|<
name|E
argument_list|>
name|next
parameter_list|()
block|{
return|return
name|Ord
operator|.
name|of
argument_list|(
name|n
operator|++
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a numbered list based on an array.    */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
name|zip
parameter_list|(
specifier|final
name|E
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|OrdArrayList
argument_list|<>
argument_list|(
name|elements
argument_list|)
return|;
block|}
comment|/**    * Returns a numbered list.    */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
name|zip
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|elements
operator|instanceof
name|RandomAccess
condition|?
operator|new
name|OrdRandomAccessList
argument_list|<>
argument_list|(
name|elements
argument_list|)
else|:
operator|new
name|OrdList
argument_list|<>
argument_list|(
name|elements
argument_list|)
return|;
block|}
comment|/**    * Iterates over an array in reverse order.    *    *<p>Given the array ["a", "b", "c"], returns (2, "c") then (1, "b") then    * (0, "a").    */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Iterable
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
name|reverse
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|reverse
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Iterates over a list in reverse order.    *    *<p>Given the list ["a", "b", "c"], returns (2, "c") then (1, "b") then    * (0, "a").    */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Iterable
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
name|reverse
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
specifier|final
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|elementList
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
parameter_list|()
lambda|->
operator|new
name|Iterator
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
name|i
operator|=
name|elementList
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|>=
literal|0
return|;
block|}
specifier|public
name|Ord
argument_list|<
name|E
argument_list|>
name|next
parameter_list|()
block|{
return|return
name|Ord
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|elementList
operator|.
name|get
argument_list|(
name|i
operator|--
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
empty_stmt|;
block|}
end_class

begin_function
specifier|public
name|Integer
name|getKey
parameter_list|()
block|{
return|return
name|i
return|;
block|}
end_function

begin_function
specifier|public
name|E
name|getValue
parameter_list|()
block|{
return|return
name|e
return|;
block|}
end_function

begin_function
specifier|public
name|E
name|setValue
parameter_list|(
name|E
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_comment
comment|/** List of {@link Ord} backed by a list of elements.    *    * @param<E> element type */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|OrdList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
decl_stmt|;
name|OrdList
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|=
name|elements
expr_stmt|;
block|}
specifier|public
name|Ord
argument_list|<
name|E
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|index
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|elements
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|/** List of {@link Ord} backed by a random-access list of elements.    *    * @param<E> element type */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|OrdRandomAccessList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|OrdList
argument_list|<
name|E
argument_list|>
implements|implements
name|RandomAccess
block|{
name|OrdRandomAccessList
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|super
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/** List of {@link Ord} backed by an array of elements.    *    * @param<E> element type */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|OrdArrayList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|Ord
argument_list|<
name|E
argument_list|>
argument_list|>
implements|implements
name|RandomAccess
block|{
specifier|private
specifier|final
name|E
index|[]
name|elements
decl_stmt|;
name|OrdArrayList
parameter_list|(
name|E
index|[]
name|elements
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|=
name|elements
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Ord
argument_list|<
name|E
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|Ord
operator|.
name|of
argument_list|(
name|index
argument_list|,
name|elements
index|[
name|index
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|elements
operator|.
name|length
return|;
block|}
block|}
end_class

begin_comment
unit|}
comment|// End Ord.java
end_comment

end_unit

