begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Holds context for evaluating expressions.  */
end_comment

begin_class
class|class
name|Evaluator
block|{
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ParameterExpression
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Evaluator
parameter_list|()
block|{
block|}
name|void
name|push
parameter_list|(
name|ParameterExpression
name|parameter
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|parameters
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|pop
parameter_list|(
name|int
name|n
parameter_list|)
block|{
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|parameters
operator|.
name|remove
argument_list|(
name|parameters
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|values
operator|.
name|remove
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|--
name|n
expr_stmt|;
block|}
block|}
name|Object
name|peek
parameter_list|(
name|ParameterExpression
name|param
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|parameters
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
name|param
condition|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parameter "
operator|+
name|param
operator|+
literal|" not on stack"
argument_list|)
throw|;
block|}
name|Object
name|evaluate
parameter_list|(
name|Node
name|expression
parameter_list|)
block|{
return|return
operator|(
operator|(
name|AbstractNode
operator|)
name|expression
operator|)
operator|.
name|evaluate
argument_list|(
name|this
argument_list|)
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|parameters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End Evaluator.java
end_comment

end_unit

