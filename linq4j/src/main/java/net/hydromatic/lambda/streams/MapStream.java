begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|lambda
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|lambda
operator|.
name|functions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A stream of two element tuples. Depending on the source either of the tuple  * elements may be unique.  *  *<p>(Based upon java.lang.MapStream coming in JDK 8.)</p>  *  *<p>JDK 1.7 does not have the mechanism for adding default implementations  * of interface methods. Therefore each class that implements this interface  * has to implement each method. To see the default implementation of each  * method, see the implementation in {@link AbstractMapStream}. It is not  * required that an implementing class extend {@code AbstractMapStream}.  * The methods in {@code AbstractMapStream} call static methods in {@link Impl},  * so it should be straightforward to reuse implementations.</p>  */
end_comment

begin_interface
specifier|public
interface|interface
name|MapStream
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
name|boolean
name|isEmpty
parameter_list|()
function_decl|;
comment|// name is temporary. "keys" is unavailable.
name|Iterable
argument_list|<
name|K
argument_list|>
name|inputs
parameter_list|()
function_decl|;
name|Iterable
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
function_decl|;
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|asIterable
parameter_list|()
function_decl|;
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getFirst
parameter_list|()
function_decl|;
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getOnly
parameter_list|()
function_decl|;
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getAny
parameter_list|()
function_decl|;
name|MapStream
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMultiStream
parameter_list|()
function_decl|;
name|void
name|forEach
parameter_list|(
name|BiBlock
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|block
parameter_list|)
function_decl|;
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filter
parameter_list|(
specifier|final
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|predicate
parameter_list|)
function_decl|;
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filterKeys
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|K
argument_list|>
name|filter
parameter_list|)
function_decl|;
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filterValues
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|V
argument_list|>
name|filter
parameter_list|)
function_decl|;
parameter_list|<
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
name|map
parameter_list|(
specifier|final
name|BiMapper
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|W
argument_list|>
name|mapper
parameter_list|)
function_decl|;
parameter_list|<
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
name|mapValues
parameter_list|(
specifier|final
name|Mapper
argument_list|<
name|V
argument_list|,
name|W
argument_list|>
name|mapper
parameter_list|)
function_decl|;
parameter_list|<
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
name|mapValuesMulti
parameter_list|(
specifier|final
name|BiMapper
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
name|mapper
parameter_list|)
function_decl|;
parameter_list|<
name|A
extends|extends
name|Map
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
parameter_list|>
name|A
name|into
parameter_list|(
name|A
name|destination
parameter_list|)
function_decl|;
parameter_list|<
name|A
extends|extends
name|Map
argument_list|<
name|?
super|super
name|K
argument_list|,
name|C
argument_list|>
parameter_list|,
name|C
extends|extends
name|Collection
argument_list|<
name|?
super|super
name|V
argument_list|>
parameter_list|>
name|A
name|intoMulti
parameter_list|(
name|A
name|destination
parameter_list|,
name|Factory
argument_list|<
name|C
argument_list|>
name|factory
parameter_list|)
function_decl|;
name|boolean
name|anyMatch
parameter_list|(
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|predicate
parameter_list|)
function_decl|;
name|boolean
name|allMatch
parameter_list|(
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|predicate
parameter_list|)
function_decl|;
name|boolean
name|noneMatch
parameter_list|(
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|predicate
parameter_list|)
function_decl|;
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sorted
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
function_decl|;
name|MapStream
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|swap
parameter_list|()
function_decl|;
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merge
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
function_decl|;
specifier|abstract
class|class
name|Impl
block|{
specifier|private
name|Impl
parameter_list|()
block|{
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getFirst
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|)
block|{
name|Iterator
argument_list|<
name|?
extends|extends
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|s
operator|.
name|asIterable
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
condition|?
name|iterator
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getOnly
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|only
argument_list|(
name|s
operator|.
name|asIterable
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMultiStream
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|mapValues
argument_list|(
operator|new
name|Mapper
argument_list|<
name|V
argument_list|,
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterable
argument_list|<
name|V
argument_list|>
name|map
parameter_list|(
name|V
name|v
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|W
parameter_list|>
name|Mapper
argument_list|<
name|V
argument_list|,
name|W
argument_list|>
name|compose
parameter_list|(
name|Mapper
argument_list|<
name|?
super|super
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|,
name|?
extends|extends
name|W
argument_list|>
name|after
parameter_list|)
block|{
return|return
name|Mappers
operator|.
name|chain
argument_list|(
name|this
argument_list|,
name|after
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
comment|// v -> (Iterable<V>) Collections.singletonList(v));
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|forEach
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
name|BiBlock
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|block
parameter_list|)
block|{
for|for
control|(
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|each
range|:
name|s
operator|.
name|asIterable
argument_list|()
control|)
block|{
name|block
operator|.
name|apply
argument_list|(
name|each
operator|.
name|getKey
argument_list|()
argument_list|,
name|each
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filter
parameter_list|(
specifier|final
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
specifier|final
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|AbstractMapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|asIterable
parameter_list|()
block|{
specifier|final
name|Enumerator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|iterableEnumerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|enumerator2
init|=
operator|new
name|Enumerator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|current
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
while|while
condition|(
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o
init|=
name|enumerator
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|eval
argument_list|(
name|o
operator|.
name|getKey
argument_list|()
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|enumeratorIterator
argument_list|(
name|enumerator2
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sorted
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
operator|new
name|TreeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
for|for
control|(
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kv
range|:
name|s
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|of
argument_list|(
name|result
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapStream
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|swap
parameter_list|(
specifier|final
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|)
block|{
return|return
operator|new
name|AbstractMapStream
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|asIterable
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|x
init|=
name|s
operator|.
name|asIterable
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|public
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|x
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|BiValue
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|next
parameter_list|()
block|{
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o
init|=
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|BiVal
operator|.
name|of
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|,
name|o
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|x
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|boolean
name|anyMatch
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|biPredicate
parameter_list|)
block|{
for|for
control|(
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|each
range|:
name|s
operator|.
name|asIterable
argument_list|()
control|)
block|{
if|if
condition|(
name|biPredicate
operator|.
name|eval
argument_list|(
name|each
operator|.
name|getKey
argument_list|()
argument_list|,
name|each
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|boolean
name|isEmpty
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|)
block|{
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|s
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|boolean
name|allMatch
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|biPredicate
parameter_list|)
block|{
for|for
control|(
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|each
range|:
name|s
operator|.
name|asIterable
argument_list|()
control|)
block|{
if|if
condition|(
name|biPredicate
operator|.
name|eval
argument_list|(
name|each
operator|.
name|getKey
argument_list|()
argument_list|,
name|each
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getAny
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|)
block|{
comment|// NOTE: the implementation can return another element if getFirst()
comment|//   is expensive
return|return
name|s
operator|.
name|getFirst
argument_list|()
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filterKeys
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|K
argument_list|>
name|filter
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|s
argument_list|,
operator|new
name|BiPredicates
operator|.
name|AbstractBiPredicate
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|eval
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
return|return
name|filter
operator|.
name|test
argument_list|(
name|k
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filterValues
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|V
argument_list|>
name|filter
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|s
argument_list|,
operator|new
name|BiPredicates
operator|.
name|AbstractBiPredicate
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|eval
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
return|return
name|filter
operator|.
name|test
argument_list|(
name|v
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
name|mapValues
parameter_list|(
specifier|final
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
specifier|final
name|Mapper
argument_list|<
name|V
argument_list|,
name|W
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
operator|new
name|AbstractMapStream
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|>
name|asIterable
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|x
init|=
name|s
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|x
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
name|next
parameter_list|()
block|{
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
init|=
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
name|K
name|key
init|=
name|next
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|next
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|BiVal
operator|.
name|of
argument_list|(
name|key
argument_list|,
name|mapper
operator|.
name|map
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|x
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
name|mapValuesMulti
parameter_list|(
specifier|final
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
specifier|final
name|BiMapper
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
name|iterableBiMapper
parameter_list|)
block|{
return|return
operator|new
name|AbstractMapStream
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
argument_list|>
name|asIterable
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|x
init|=
name|s
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|x
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|BiValue
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
name|next
parameter_list|()
block|{
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
init|=
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
name|K
name|key
init|=
name|next
operator|.
name|getKey
argument_list|()
decl_stmt|;
return|return
name|BiVal
operator|.
name|of
argument_list|(
name|key
argument_list|,
name|iterableBiMapper
operator|.
name|map
argument_list|(
name|key
argument_list|,
name|next
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|x
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
name|map
parameter_list|(
specifier|final
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
specifier|final
name|BiMapper
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|W
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
operator|new
name|AbstractMapStream
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|>
name|asIterable
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|x
init|=
name|s
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|x
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|BiValue
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
name|next
parameter_list|()
block|{
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
init|=
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
name|K
name|k
init|=
name|next
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|V
name|v
init|=
name|next
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|BiVal
operator|.
name|of
argument_list|(
name|k
argument_list|,
name|mapper
operator|.
name|map
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|x
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Iterable
argument_list|<
name|K
argument_list|>
name|inputs
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|filteredElements
init|=
name|s
operator|.
name|asIterable
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|source
init|=
name|filteredElements
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|source
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|K
name|next
parameter_list|()
block|{
return|return
name|source
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|source
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Iterable
argument_list|<
name|V
argument_list|>
name|values
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|filteredElements
init|=
name|s
operator|.
name|asIterable
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|source
init|=
name|filteredElements
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|source
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|V
name|next
parameter_list|()
block|{
return|return
name|source
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|source
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merge
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|union
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|.
name|into
argument_list|(
name|union
argument_list|)
expr_stmt|;
name|other
operator|.
name|into
argument_list|(
name|union
argument_list|)
expr_stmt|;
return|return
name|of
argument_list|(
name|union
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|A
extends|extends
name|Map
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
parameter_list|>
name|A
name|into
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
name|A
name|destination
parameter_list|)
block|{
for|for
control|(
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kv
range|:
name|s
control|)
block|{
name|destination
operator|.
name|put
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|destination
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|A
extends|extends
name|Map
argument_list|<
name|?
super|super
name|K
argument_list|,
name|C
argument_list|>
parameter_list|,
name|C
extends|extends
name|Collection
argument_list|<
name|?
super|super
name|V
argument_list|>
parameter_list|>
name|A
name|intoMulti
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|s
parameter_list|,
name|A
name|destination
parameter_list|,
name|Factory
argument_list|<
name|C
argument_list|>
name|factory
parameter_list|)
block|{
for|for
control|(
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kv
range|:
name|s
control|)
block|{
name|C
name|c
init|=
name|factory
operator|.
name|make
argument_list|()
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|destination
operator|.
name|put
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|destination
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
operator|new
name|AbstractMapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|asIterable
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|x
init|=
name|iterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|public
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|x
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o
init|=
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|BiVal
operator|.
name|of
argument_list|(
name|o
operator|.
name|getKey
argument_list|()
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|x
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
specifier|abstract
class|class
name|AbstractMapStream
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|isEmpty
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|allMatch
parameter_list|(
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|biPredicate
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|allMatch
argument_list|(
name|this
argument_list|,
name|biPredicate
argument_list|)
return|;
block|}
specifier|public
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getFirst
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|getFirst
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getOnly
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|getOnly
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getAny
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|getAny
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|MapStream
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMultiStream
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|asMultiStream
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|void
name|forEach
parameter_list|(
name|BiBlock
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|biBlock
parameter_list|)
block|{
name|Impl
operator|.
name|forEach
argument_list|(
name|this
argument_list|,
name|biBlock
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filter
parameter_list|(
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|biPredicate
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|filter
argument_list|(
name|this
argument_list|,
name|biPredicate
argument_list|)
return|;
block|}
specifier|public
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filterKeys
parameter_list|(
name|Predicate
argument_list|<
name|K
argument_list|>
name|filter
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|filterKeys
argument_list|(
name|this
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|filterValues
parameter_list|(
name|Predicate
argument_list|<
name|V
argument_list|>
name|filter
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|filterValues
argument_list|(
name|this
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
name|map
parameter_list|(
name|BiMapper
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|W
argument_list|>
name|kvwBiMapper
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|map
argument_list|(
name|this
argument_list|,
name|kvwBiMapper
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|W
argument_list|>
name|mapValues
parameter_list|(
name|Mapper
argument_list|<
name|V
argument_list|,
name|W
argument_list|>
name|vwMapper
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|mapValues
argument_list|(
name|this
argument_list|,
name|vwMapper
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|W
parameter_list|>
name|MapStream
argument_list|<
name|K
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
name|mapValuesMulti
parameter_list|(
name|BiMapper
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|Iterable
argument_list|<
name|W
argument_list|>
argument_list|>
name|iterableBiMapper
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|mapValuesMulti
argument_list|(
name|this
argument_list|,
name|iterableBiMapper
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|A
extends|extends
name|Map
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
parameter_list|>
name|A
name|into
parameter_list|(
name|A
name|destination
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|into
argument_list|(
name|this
argument_list|,
name|destination
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|A
extends|extends
name|Map
argument_list|<
name|?
super|super
name|K
argument_list|,
name|C
argument_list|>
parameter_list|,
name|C
extends|extends
name|Collection
argument_list|<
name|?
super|super
name|V
argument_list|>
parameter_list|>
name|A
name|intoMulti
parameter_list|(
name|A
name|destination
parameter_list|,
name|Factory
argument_list|<
name|C
argument_list|>
name|factory
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|intoMulti
argument_list|(
name|this
argument_list|,
name|destination
argument_list|,
name|factory
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|anyMatch
parameter_list|(
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|biPredicate
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|anyMatch
argument_list|(
name|this
argument_list|,
name|biPredicate
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|noneMatch
parameter_list|(
name|BiPredicate
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|biPredicate
parameter_list|)
block|{
return|return
operator|!
name|Impl
operator|.
name|anyMatch
argument_list|(
name|this
argument_list|,
name|biPredicate
argument_list|)
return|;
block|}
specifier|public
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sorted
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|sorted
argument_list|(
name|this
argument_list|,
name|comparator
argument_list|)
return|;
block|}
specifier|public
name|MapStream
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|swap
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|swap
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|merge
parameter_list|(
name|MapStream
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|merge
argument_list|(
name|this
argument_list|,
name|other
argument_list|)
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|asIterable
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|K
argument_list|>
name|inputs
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|inputs
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|values
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
class|class
name|BiVal
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|BiValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|K
name|k
decl_stmt|;
specifier|private
specifier|final
name|V
name|v
decl_stmt|;
name|BiVal
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
name|this
operator|.
name|k
operator|=
name|k
expr_stmt|;
name|this
operator|.
name|v
operator|=
name|v
expr_stmt|;
block|}
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|k
return|;
block|}
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|v
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BiVal
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
return|return
operator|new
name|BiVal
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
return|;
block|}
block|}
block|}
end_interface

begin_comment
comment|// End MapStream.java
end_comment

end_unit

