begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Tests generating Druid filters.  */
end_comment

begin_class
specifier|public
class|class
name|DruidQueryFilterTest
block|{
specifier|private
name|DruidQuery
name|druidQuery
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|testSetup
parameter_list|()
block|{
name|druidQuery
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|CalciteConnectionConfig
name|connectionConfigMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CalciteConnectionConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connectionConfigMock
operator|.
name|timeZone
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"UTC"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connectionConfigMock
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|druidQuery
operator|.
name|getDruidTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DruidTable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|DruidSchema
operator|.
name|class
argument_list|)
argument_list|,
literal|"dataSource"
argument_list|,
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
literal|"timestamp"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInFilter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|listRexNodes
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|f
operator|.
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|f
operator|.
name|varcharRowType
argument_list|,
literal|0
argument_list|)
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|RexNode
name|inRexNode
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IN
argument_list|,
name|listRexNodes
argument_list|)
decl_stmt|;
name|DruidJsonFilter
name|returnValue
init|=
name|DruidJsonFilter
operator|.
name|toDruidFilters
argument_list|(
name|inRexNode
argument_list|,
name|f
operator|.
name|varcharRowType
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Filter is null"
argument_list|,
name|returnValue
argument_list|)
expr_stmt|;
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JsonGenerator
name|jsonGenerator
init|=
name|jsonFactory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|returnValue
operator|.
name|write
argument_list|(
name|jsonGenerator
argument_list|)
expr_stmt|;
name|jsonGenerator
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"{\"type\":\"in\",\"dimension\":\"dimensionName\","
operator|+
literal|"\"values\":[\"1\",\"5\",\"value1\"]}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBetweenFilterStringCase
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|listRexNodes
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|f
operator|.
name|varcharRowType
argument_list|,
literal|0
argument_list|)
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|"lower-bound"
argument_list|)
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|"upper-bound"
argument_list|)
argument_list|)
decl_stmt|;
name|RelDataType
name|relDataType
init|=
name|f
operator|.
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|RexNode
name|betweenRexNode
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|relDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|BETWEEN
argument_list|,
name|listRexNodes
argument_list|)
decl_stmt|;
name|DruidJsonFilter
name|returnValue
init|=
name|DruidJsonFilter
operator|.
name|toDruidFilters
argument_list|(
name|betweenRexNode
argument_list|,
name|f
operator|.
name|varcharRowType
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Filter is null"
argument_list|,
name|returnValue
argument_list|)
expr_stmt|;
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JsonGenerator
name|jsonGenerator
init|=
name|jsonFactory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|returnValue
operator|.
name|write
argument_list|(
name|jsonGenerator
argument_list|)
expr_stmt|;
name|jsonGenerator
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"{\"type\":\"bound\",\"dimension\":\"dimensionName\",\"lower\":\"lower-bound\","
operator|+
literal|"\"lowerStrict\":false,\"upper\":\"upper-bound\",\"upperStrict\":false,"
operator|+
literal|"\"ordering\":\"lexicographic\"}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Everything a test needs for a healthy, active life. */
specifier|static
class|class
name|Fixture
block|{
specifier|final
name|JavaTypeFactoryImpl
name|typeFactory
init|=
operator|new
name|JavaTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|DruidTable
name|druidTable
init|=
operator|new
name|DruidTable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|DruidSchema
operator|.
name|class
argument_list|)
argument_list|,
literal|"dataSource"
argument_list|,
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
literal|"timestamp"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|varcharType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|varcharRowType
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"dimensionName"
argument_list|,
name|varcharType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End DruidQueryFilterTest.java
end_comment

end_unit

