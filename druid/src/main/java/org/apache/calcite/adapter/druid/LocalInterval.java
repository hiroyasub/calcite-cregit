begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|chrono
operator|.
name|ISOChronology
import|;
end_import

begin_comment
comment|/**  * Similar to {@link Interval} but the end points are {@link LocalDateTime}  * not {@link Instant}.  */
end_comment

begin_class
specifier|public
class|class
name|LocalInterval
block|{
specifier|private
specifier|final
name|long
name|start
decl_stmt|;
specifier|private
specifier|final
name|long
name|end
decl_stmt|;
comment|/** Creates a LocalInterval. */
specifier|private
name|LocalInterval
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
comment|/** Creates a LocalInterval based on two {@link DateTime} values. */
specifier|public
specifier|static
name|LocalInterval
name|create
parameter_list|(
name|DateTime
name|start
parameter_list|,
name|DateTime
name|end
parameter_list|)
block|{
return|return
operator|new
name|LocalInterval
argument_list|(
name|start
operator|.
name|getMillis
argument_list|()
argument_list|,
name|end
operator|.
name|getMillis
argument_list|()
argument_list|)
return|;
block|}
comment|/** Creates a LocalInterval based on millisecond start end end points. */
specifier|public
specifier|static
name|LocalInterval
name|create
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
block|{
return|return
operator|new
name|LocalInterval
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
comment|/** Creates a LocalInterval based on an interval string. */
specifier|public
specifier|static
name|LocalInterval
name|create
parameter_list|(
name|String
name|intervalString
parameter_list|)
block|{
name|Interval
name|i
init|=
operator|new
name|Interval
argument_list|(
name|intervalString
argument_list|,
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocalInterval
argument_list|(
name|i
operator|.
name|getStartMillis
argument_list|()
argument_list|,
name|i
operator|.
name|getEndMillis
argument_list|()
argument_list|)
return|;
block|}
comment|/** Creates a LocalInterval based on start and end time strings. */
specifier|public
specifier|static
name|LocalInterval
name|create
parameter_list|(
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|)
block|{
return|return
name|create
argument_list|(
operator|new
name|DateTime
argument_list|(
name|start
argument_list|,
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
name|end
argument_list|,
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Writes a value such as "1900-01-01T00:00:00.000/2015-10-12T00:00:00.000".    * Note that there are no "Z"s; the value is in the (unspecified) local    * time zone, not UTC. */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|LocalDateTime
name|start
init|=
operator|new
name|LocalDateTime
argument_list|(
name|this
operator|.
name|start
argument_list|,
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LocalDateTime
name|end
init|=
operator|new
name|LocalDateTime
argument_list|(
name|this
operator|.
name|end
argument_list|,
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|start
operator|+
literal|"/"
operator|+
name|end
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|97
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
operator|(
name|int
operator|)
operator|(
name|start
operator|^
operator|(
name|start
operator|>>>
literal|32
operator|)
operator|)
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
operator|(
name|int
operator|)
operator|(
name|end
operator|^
operator|(
name|end
operator|>>>
literal|32
operator|)
operator|)
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|LocalInterval
operator|&&
name|start
operator|==
operator|(
operator|(
name|LocalInterval
operator|)
name|o
operator|)
operator|.
name|start
operator|&&
name|end
operator|==
operator|(
operator|(
name|LocalInterval
operator|)
name|o
operator|)
operator|.
name|end
return|;
block|}
comment|/** Analogous to {@link Interval#getStartMillis}. */
specifier|public
name|long
name|getStartMillis
parameter_list|()
block|{
return|return
name|start
return|;
block|}
comment|/** Analogous to {@link Interval#getEndMillis()}. */
specifier|public
name|long
name|getEndMillis
parameter_list|()
block|{
return|return
name|end
return|;
block|}
block|}
end_class

begin_comment
comment|// End LocalInterval.java
end_comment

end_unit

