begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Sink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|CalcitePrepareImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|HttpUtils
operator|.
name|post
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link DruidConnection}.  */
end_comment

begin_class
class|class
name|DruidConnectionImpl
implements|implements
name|DruidConnection
block|{
specifier|final
name|String
name|url
decl_stmt|;
specifier|public
name|DruidConnectionImpl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|void
name|request
parameter_list|(
name|QueryType
name|queryType
parameter_list|,
name|String
name|data
parameter_list|,
name|Sink
name|sink
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|Page
name|page
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|CalcitePrepareImpl
operator|.
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestHeaders
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/json"
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|post
argument_list|(
name|url
argument_list|,
name|data
argument_list|,
name|requestHeaders
argument_list|,
literal|10000
argument_list|,
literal|1800000
argument_list|)
decl_stmt|;
name|parse
argument_list|(
name|queryType
argument_list|,
name|in
argument_list|,
name|sink
argument_list|,
name|fieldNames
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
comment|/** Parses the output of a {@code topN} query, sending the results to a    * {@link Sink}. */
specifier|private
name|void
name|parse
parameter_list|(
name|QueryType
name|queryType
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|Sink
name|sink
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|Page
name|page
parameter_list|)
block|{
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
specifier|final
name|Row
operator|.
name|RowBuilder
name|rowBuilder
init|=
name|Row
operator|.
name|newBuilder
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|CalcitePrepareImpl
operator|.
name|DEBUG
condition|)
block|{
try|try
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
name|AvaticaUtils
operator|.
name|readFullyToBytes
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Response: "
operator|+
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
try|try
init|(
specifier|final
name|JsonParser
name|parser
init|=
name|factory
operator|.
name|createParser
argument_list|(
name|in
argument_list|)
init|)
block|{
switch|switch
condition|(
name|queryType
condition|)
block|{
case|case
name|TOP_N
case|:
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_ARRAY
operator|&&
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|expectScalarField
argument_list|(
name|parser
argument_list|,
literal|"timestamp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
operator|&&
name|parser
operator|.
name|getCurrentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"result"
argument_list|)
operator|&&
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
comment|// loop until token equal to "}"
name|parseFields
argument_list|(
name|fieldNames
argument_list|,
name|rowBuilder
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|sink
operator|.
name|send
argument_list|(
name|rowBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|rowBuilder
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|SELECT
case|:
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_ARRAY
operator|&&
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|page
operator|.
name|pagingIdentifier
operator|=
literal|null
expr_stmt|;
name|page
operator|.
name|offset
operator|=
operator|-
literal|1
expr_stmt|;
name|expectScalarField
argument_list|(
name|parser
argument_list|,
literal|"timestamp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
operator|&&
name|parser
operator|.
name|getCurrentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"result"
argument_list|)
operator|&&
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
operator|&&
name|parser
operator|.
name|getCurrentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pagingIdentifiers"
argument_list|)
operator|&&
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
switch|switch
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
condition|)
block|{
case|case
name|FIELD_NAME
case|:
name|page
operator|.
name|pagingIdentifier
operator|=
name|parser
operator|.
name|getCurrentName
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|VALUE_NUMBER_INT
condition|)
block|{
name|page
operator|.
name|offset
operator|=
name|parser
operator|.
name|getIntValue
argument_list|()
expr_stmt|;
block|}
name|expect
argument_list|(
name|parser
argument_list|,
name|JsonToken
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
break|break;
case|case
name|END_OBJECT
case|:
block|}
block|}
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
operator|&&
name|parser
operator|.
name|getCurrentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"events"
argument_list|)
operator|&&
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|expectScalarField
argument_list|(
name|parser
argument_list|,
literal|"segmentId"
argument_list|)
expr_stmt|;
name|expectScalarField
argument_list|(
name|parser
argument_list|,
literal|"offset"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
operator|&&
name|parser
operator|.
name|getCurrentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"event"
argument_list|)
operator|&&
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|parseFields
argument_list|(
name|fieldNames
argument_list|,
name|rowBuilder
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|sink
operator|.
name|send
argument_list|(
name|rowBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|rowBuilder
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|expect
argument_list|(
name|parser
argument_list|,
name|JsonToken
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|GROUP_BY
case|:
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|expectScalarField
argument_list|(
name|parser
argument_list|,
literal|"version"
argument_list|)
expr_stmt|;
name|expectScalarField
argument_list|(
name|parser
argument_list|,
literal|"timestamp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
operator|&&
name|parser
operator|.
name|getCurrentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"event"
argument_list|)
operator|&&
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|parseFields
argument_list|(
name|fieldNames
argument_list|,
name|rowBuilder
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|sink
operator|.
name|send
argument_list|(
name|rowBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|rowBuilder
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|expect
argument_list|(
name|parser
argument_list|,
name|JsonToken
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|parseFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|Row
operator|.
name|RowBuilder
name|rowBuilder
parameter_list|,
name|JsonParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|FIELD_NAME
condition|)
block|{
name|parseField
argument_list|(
name|fieldNames
argument_list|,
name|rowBuilder
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseField
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|Row
operator|.
name|RowBuilder
name|rowBuilder
parameter_list|,
name|JsonParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fieldName
init|=
name|parser
operator|.
name|getCurrentName
argument_list|()
decl_stmt|;
comment|// Move to next token, which is name's value
name|JsonToken
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|fieldNames
operator|.
name|indexOf
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|VALUE_NUMBER_INT
case|:
name|rowBuilder
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|parser
operator|.
name|getIntValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUE_NUMBER_FLOAT
case|:
name|rowBuilder
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|parser
operator|.
name|getDoubleValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUE_TRUE
case|:
name|rowBuilder
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUE_FALSE
case|:
name|rowBuilder
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUE_NULL
case|:
break|break;
default|default:
name|rowBuilder
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|parser
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|expect
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|JsonToken
name|token
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|JsonToken
name|t
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|token
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"expected "
operator|+
name|token
operator|+
literal|", got "
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|expectScalarField
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|expect
argument_list|(
name|parser
argument_list|,
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|getCurrentName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"expected field "
operator|+
name|name
operator|+
literal|", got "
operator|+
name|parser
operator|.
name|getCurrentName
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|JsonToken
name|t
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|VALUE_NULL
case|:
case|case
name|VALUE_FALSE
case|:
case|case
name|VALUE_TRUE
case|:
case|case
name|VALUE_NUMBER_INT
case|:
case|case
name|VALUE_NUMBER_FLOAT
case|:
case|case
name|VALUE_STRING
case|:
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"expected scalar field, got  "
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|expectObjectField
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|expect
argument_list|(
name|parser
argument_list|,
name|JsonToken
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|getCurrentName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"expected field "
operator|+
name|name
operator|+
literal|", got "
operator|+
name|parser
operator|.
name|getCurrentName
argument_list|()
argument_list|)
throw|;
block|}
name|expect
argument_list|(
name|parser
argument_list|,
name|JsonToken
operator|.
name|START_OBJECT
argument_list|)
expr_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
comment|// empty
block|}
block|}
comment|/** Executes a request and returns the resulting rows as an    * {@link Enumerable}, running the parser in a thread provided by    * {@code service}. */
specifier|public
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|enumerable
parameter_list|(
specifier|final
name|QueryType
name|queryType
parameter_list|,
specifier|final
name|String
name|request
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
specifier|final
name|ExecutorService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Row
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Row
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|BlockingQueueEnumerator
argument_list|<
name|Row
argument_list|>
name|enumerator
init|=
operator|new
name|BlockingQueueEnumerator
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RunnableQueueSink
name|sink
init|=
operator|new
name|RunnableQueueSink
argument_list|()
block|{
specifier|public
name|void
name|send
parameter_list|(
name|Row
name|row
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|enumerator
operator|.
name|queue
operator|.
name|put
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|end
parameter_list|()
block|{
name|enumerator
operator|.
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSourceEnumerable
parameter_list|(
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|enumerable
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|Row
name|row
range|:
name|enumerable
control|)
block|{
name|send
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|end
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Page
name|page
init|=
operator|new
name|Page
argument_list|()
decl_stmt|;
name|request
argument_list|(
name|queryType
argument_list|,
name|request
argument_list|,
name|this
argument_list|,
name|fieldNames
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|enumerator
operator|.
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|enumerator
operator|.
name|throwableHolder
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|enumerator
operator|.
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|sink
argument_list|)
expr_stmt|;
return|return
name|enumerator
return|;
block|}
block|}
return|;
block|}
comment|/** A {@link Sink} that is also {@link Runnable}. */
specifier|private
interface|interface
name|RunnableQueueSink
extends|extends
name|Sink
extends|,
name|Runnable
block|{   }
comment|/** An {@link Enumerator} that gets its rows from a {@link BlockingQueue}.    * There are other fields to signal errors and end-of-data. */
specifier|private
specifier|static
class|class
name|BlockingQueueEnumerator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Enumerator
argument_list|<
name|E
argument_list|>
block|{
specifier|final
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|queue
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Holder
argument_list|<
name|Throwable
argument_list|>
name|throwableHolder
init|=
name|Holder
operator|.
name|of
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|E
name|next
decl_stmt|;
specifier|public
name|E
name|current
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|next
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|next
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
specifier|final
name|Throwable
name|throwable
init|=
name|throwableHolder
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|throwable
operator|!=
literal|null
condition|)
block|{
name|throwableHolder
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Progress through a large fetch. */
specifier|static
class|class
name|Page
block|{
name|String
name|pagingIdentifier
init|=
literal|null
decl_stmt|;
name|int
name|offset
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|pagingIdentifier
operator|+
literal|": "
operator|+
name|offset
operator|+
literal|"}"
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End DruidConnectionImpl.java
end_comment

end_unit

