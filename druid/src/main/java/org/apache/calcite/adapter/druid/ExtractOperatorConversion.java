begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Time extract operator conversion for expressions like EXTRACT(timeUnit FROM arg)  * Unit can be SECOND, MINUTE, HOUR, DAY (day of month),  * DOW (day of week), DOY (day of year), WEEK (week of week year),  * MONTH (1 through 12), QUARTER (1 through 4), or YEAR  **/
end_comment

begin_class
specifier|public
class|class
name|ExtractOperatorConversion
implements|implements
name|DruidSqlOperatorConverter
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|TimeUnitRange
argument_list|,
name|String
argument_list|>
name|EXTRACT_UNIT_MAP
init|=
name|ImmutableMap
operator|.
expr|<
name|TimeUnitRange
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|SECOND
argument_list|,
literal|"SECOND"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|MINUTE
argument_list|,
literal|"MINUTE"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|HOUR
argument_list|,
literal|"HOUR"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|DAY
argument_list|,
literal|"DAY"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|DOW
argument_list|,
literal|"DOW"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|DOY
argument_list|,
literal|"DOY"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|WEEK
argument_list|,
literal|"WEEK"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
literal|"MONTH"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|QUARTER
argument_list|,
literal|"QUARTER"
argument_list|)
decl|.
name|put
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
literal|"YEAR"
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SqlOperator
name|calciteOperator
parameter_list|()
block|{
return|return
name|SqlStdOperatorTable
operator|.
name|EXTRACT
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toDruidExpression
parameter_list|(
name|RexNode
name|rexNode
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|rexNode
decl_stmt|;
specifier|final
name|RexLiteral
name|flag
init|=
operator|(
name|RexLiteral
operator|)
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|TimeUnitRange
name|calciteUnit
init|=
operator|(
name|TimeUnitRange
operator|)
name|flag
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|arg
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|input
init|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|arg
argument_list|,
name|rowType
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|druidUnit
init|=
name|EXTRACT_UNIT_MAP
operator|.
name|get
argument_list|(
name|calciteUnit
argument_list|)
decl_stmt|;
if|if
condition|(
name|druidUnit
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|DruidExpressions
operator|.
name|applyTimeExtract
argument_list|(
name|input
argument_list|,
name|druidUnit
argument_list|,
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|query
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End ExtractOperatorConversion.java
end_comment

end_unit

