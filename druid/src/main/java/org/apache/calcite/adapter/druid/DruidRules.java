begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Rules and relational operators for {@link DruidQuery}.  */
end_comment

begin_class
specifier|public
class|class
name|DruidRules
block|{
specifier|private
name|DruidRules
parameter_list|()
block|{
block|}
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|RelOptRule
argument_list|>
name|RULES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|DruidAggregateRule
argument_list|()
argument_list|,
operator|new
name|DruidProjectRule
argument_list|()
argument_list|,
operator|new
name|DruidFilterRule
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Predicate that returns whether Druid can not handle an aggregate. */
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|AggregateCall
argument_list|>
name|BAD_AGG
init|=
operator|new
name|Predicate
argument_list|<
name|AggregateCall
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|AggregateCall
name|aggregateCall
parameter_list|)
block|{
switch|switch
condition|(
name|aggregateCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|COUNT
case|:
case|case
name|SUM
case|:
case|case
name|SUM0
case|:
case|case
name|MIN
case|:
case|case
name|MAX
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
block|}
decl_stmt|;
comment|/**    * Rule to push an {@link org.apache.calcite.rel.core.Aggregate}    * into a {@link DruidQuery}.    */
specifier|private
specifier|static
class|class
name|DruidAggregateRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|DruidAggregateRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|query
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|indicator
operator|||
name|aggregate
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|Iterables
operator|.
name|any
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|,
name|BAD_AGG
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|DruidQuery
operator|.
name|isValidSignature
argument_list|(
name|query
operator|.
name|signature
argument_list|()
operator|+
literal|'a'
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|RelNode
name|newAggregate
init|=
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newAggregate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rule to push a {@link org.apache.calcite.rel.core.Project}    * into a {@link DruidQuery}.    */
specifier|private
specifier|static
class|class
name|DruidProjectRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|DruidProjectRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|query
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DruidQuery
operator|.
name|isValidSignature
argument_list|(
name|query
operator|.
name|signature
argument_list|()
operator|+
literal|'p'
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|DruidQuery
operator|.
name|canProjectAll
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
condition|)
block|{
comment|// All expressions can be pushed to Druid in their entirety.
specifier|final
name|RelNode
name|newProject
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newProject
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Pair
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|pair
init|=
name|DruidQuery
operator|.
name|splitProjects
argument_list|(
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|query
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
comment|// We can't push anything useful to Druid.
return|return;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|above
init|=
name|pair
operator|.
name|left
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|below
init|=
name|pair
operator|.
name|right
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|builder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|below
control|)
block|{
specifier|final
name|String
name|name
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RexInputRef
condition|)
block|{
name|name
operator|=
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|e
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|null
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelNode
name|newProject
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|input
argument_list|,
name|below
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|newQuery
init|=
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newProject
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newProject2
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newQuery
argument_list|,
name|above
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProject2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rule to push a {@link org.apache.calcite.rel.core.Filter}    * into a {@link DruidQuery}.    */
specifier|private
specifier|static
class|class
name|DruidFilterRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|DruidFilterRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|query
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DruidQuery
operator|.
name|isValidSignature
argument_list|(
name|query
operator|.
name|signature
argument_list|()
operator|+
literal|'f'
argument_list|)
operator|||
operator|!
name|query
operator|.
name|isValidFilter
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|RelNode
name|newFilter
init|=
name|filter
operator|.
name|copy
argument_list|(
name|filter
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|DruidQuery
name|extendQuery
parameter_list|(
name|DruidQuery
name|query
parameter_list|,
name|RelNode
name|r
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelNode
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
return|return
name|DruidQuery
operator|.
name|create
argument_list|(
name|query
operator|.
name|getCluster
argument_list|()
argument_list|,
name|query
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|query
operator|.
name|getTable
argument_list|()
argument_list|,
name|query
operator|.
name|druidTable
argument_list|,
name|builder
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|rels
argument_list|)
operator|.
name|add
argument_list|(
name|r
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End DruidRules.java
end_comment

end_unit

