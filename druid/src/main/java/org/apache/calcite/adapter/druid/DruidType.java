begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_comment
comment|/** Druid type. */
end_comment

begin_enum
specifier|public
enum|enum
name|DruidType
block|{
name|LONG
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
block|,
comment|// SQL DOUBLE and FLOAT types are both 64 bit, but we use DOUBLE because
comment|// people find FLOAT confusing.
name|FLOAT
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
block|,
name|STRING
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
block|,
name|HYPER_UNIQUE
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
block|,
name|THETA_SKETCH
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
block|;
comment|/** The corresponding SQL type. */
specifier|public
specifier|final
name|SqlTypeName
name|sqlType
decl_stmt|;
name|DruidType
parameter_list|(
name|SqlTypeName
name|sqlType
parameter_list|)
block|{
name|this
operator|.
name|sqlType
operator|=
name|sqlType
expr_stmt|;
block|}
comment|/**    * Returns true if and only if this enum should be used inside of a {@link ComplexMetric}    * */
specifier|public
name|boolean
name|isComplex
parameter_list|()
block|{
return|return
name|this
operator|==
name|THETA_SKETCH
operator|||
name|this
operator|==
name|HYPER_UNIQUE
return|;
block|}
comment|/**    * Returns a DruidType matching the given String type from a Druid metric    * */
specifier|public
specifier|static
name|DruidType
name|getTypeFromMetric
parameter_list|(
name|String
name|type
parameter_list|)
block|{
assert|assert
name|type
operator|!=
literal|null
assert|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"hyperUnique"
argument_list|)
condition|)
block|{
return|return
name|HYPER_UNIQUE
return|;
block|}
if|else if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"thetaSketch"
argument_list|)
condition|)
block|{
return|return
name|THETA_SKETCH
return|;
block|}
if|else if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"long"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"count"
argument_list|)
condition|)
block|{
return|return
name|LONG
return|;
block|}
if|else if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
name|FLOAT
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown type: "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Returns a DruidType matching the String from a meta data query    * */
specifier|public
specifier|static
name|DruidType
name|getTypeFromMetaData
parameter_list|(
name|String
name|type
parameter_list|)
block|{
assert|assert
name|type
operator|!=
literal|null
assert|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"LONG"
case|:
return|return
name|LONG
return|;
case|case
literal|"FLOAT"
case|:
return|return
name|FLOAT
return|;
case|case
literal|"STRING"
case|:
return|return
name|STRING
return|;
default|default:
comment|// Likely a sketch, or a type String from the aggregations field.
return|return
name|getTypeFromMetric
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
block|}
end_enum

begin_comment
comment|// End DruidType.java
end_comment

end_unit

