begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidQuery
operator|.
name|writeField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidQuery
operator|.
name|writeFieldIf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateTimeStringUtils
operator|.
name|ISO_DATETIME_FRACTIONAL_SECOND_FORMAT
import|;
end_import

begin_comment
comment|/**  * Implementation of extraction function DimensionSpec.  *  *<p>The extraction function implementation returns dimension values transformed  * using the given extraction function.  */
end_comment

begin_class
specifier|public
class|class
name|ExtractionDimensionSpec
implements|implements
name|DimensionSpec
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|ExtractionFunction
name|extractionFunction
decl_stmt|;
specifier|private
specifier|final
name|String
name|outputName
decl_stmt|;
specifier|private
specifier|final
name|DruidType
name|outputType
decl_stmt|;
specifier|public
name|ExtractionDimensionSpec
parameter_list|(
name|String
name|dimension
parameter_list|,
name|ExtractionFunction
name|extractionFunction
parameter_list|,
name|String
name|outputName
parameter_list|)
block|{
name|this
argument_list|(
name|dimension
argument_list|,
name|extractionFunction
argument_list|,
name|outputName
argument_list|,
name|DruidType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExtractionDimensionSpec
parameter_list|(
name|String
name|dimension
parameter_list|,
name|ExtractionFunction
name|extractionFunction
parameter_list|,
name|String
name|outputName
parameter_list|,
name|DruidType
name|outputType
parameter_list|)
block|{
name|this
operator|.
name|dimension
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|dimension
argument_list|,
literal|"dimension"
argument_list|)
expr_stmt|;
name|this
operator|.
name|extractionFunction
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|extractionFunction
argument_list|,
literal|"extractionFunction"
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputName
operator|=
name|outputName
expr_stmt|;
name|this
operator|.
name|outputType
operator|=
name|outputType
operator|==
literal|null
condition|?
name|DruidType
operator|.
name|STRING
else|:
name|outputType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOutputName
parameter_list|()
block|{
return|return
name|outputName
return|;
block|}
annotation|@
name|Override
specifier|public
name|DruidType
name|getOutputType
parameter_list|()
block|{
return|return
name|outputType
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExtractionFunction
name|getExtractionFn
parameter_list|()
block|{
return|return
name|extractionFunction
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDimension
parameter_list|()
block|{
return|return
name|dimension
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
literal|"extraction"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"outputName"
argument_list|,
name|outputName
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"extractionFn"
argument_list|,
name|extractionFunction
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
comment|/** Returns a valid {@link Granularity} of floor extract, or null when not    * possible.    *    * @param dimensionSpec Druid Dimension specification    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Granularity
name|toQueryGranularity
parameter_list|(
name|DimensionSpec
name|dimensionSpec
parameter_list|)
block|{
if|if
condition|(
operator|!
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
operator|.
name|equals
argument_list|(
name|dimensionSpec
operator|.
name|getDimension
argument_list|()
argument_list|)
condition|)
block|{
comment|// Only __time column can be substituted by granularity
return|return
literal|null
return|;
block|}
specifier|final
name|ExtractionFunction
name|extractionFunction
init|=
name|dimensionSpec
operator|.
name|getExtractionFn
argument_list|()
decl_stmt|;
if|if
condition|(
name|extractionFunction
operator|==
literal|null
condition|)
block|{
comment|// No Extract thus no Granularity
return|return
literal|null
return|;
block|}
if|if
condition|(
name|extractionFunction
operator|instanceof
name|TimeExtractionFunction
condition|)
block|{
name|Granularity
name|granularity
init|=
operator|(
operator|(
name|TimeExtractionFunction
operator|)
name|extractionFunction
operator|)
operator|.
name|getGranularity
argument_list|()
decl_stmt|;
name|String
name|format
init|=
operator|(
operator|(
name|TimeExtractionFunction
operator|)
name|extractionFunction
operator|)
operator|.
name|getFormat
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ISO_DATETIME_FRACTIONAL_SECOND_FORMAT
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|granularity
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

