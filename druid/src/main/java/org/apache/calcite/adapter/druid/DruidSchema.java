begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Schema mapped onto a Druid instance.  */
end_comment

begin_class
specifier|public
class|class
name|DruidSchema
extends|extends
name|AbstractSchema
block|{
specifier|final
name|String
name|url
decl_stmt|;
specifier|final
name|String
name|coordinatorUrl
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|discoverTables
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableMap
init|=
literal|null
decl_stmt|;
comment|/**    * Creates a Druid schema.    *    * @param url URL of query REST service, e.g. "http://localhost:8082"    * @param coordinatorUrl URL of coordinator REST service,    *                       e.g. "http://localhost:8081"    * @param discoverTables If true, ask Druid what tables exist;    *                       if false, only create tables explicitly in the model    */
specifier|public
name|DruidSchema
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|coordinatorUrl
parameter_list|,
name|boolean
name|discoverTables
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|this
operator|.
name|coordinatorUrl
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|coordinatorUrl
argument_list|)
expr_stmt|;
name|this
operator|.
name|discoverTables
operator|=
name|discoverTables
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
if|if
condition|(
operator|!
name|discoverTables
condition|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
if|if
condition|(
name|tableMap
operator|==
literal|null
condition|)
block|{
specifier|final
name|DruidConnectionImpl
name|connection
init|=
operator|new
name|DruidConnectionImpl
argument_list|(
name|url
argument_list|,
name|coordinatorUrl
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|connection
operator|.
name|tableNames
argument_list|()
decl_stmt|;
name|tableMap
operator|=
name|Maps
operator|.
name|asMap
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|tableNames
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|name
lambda|->
name|table
argument_list|(
name|name
argument_list|,
name|connection
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tableMap
return|;
block|}
specifier|private
name|Table
name|table
parameter_list|(
name|String
name|tableName
parameter_list|,
name|DruidConnectionImpl
name|connection
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SqlTypeName
argument_list|>
name|fieldMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|metricNameSet
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ComplexMetric
argument_list|>
argument_list|>
name|complexMetrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|connection
operator|.
name|metadata
argument_list|(
name|tableName
argument_list|,
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|,
literal|null
argument_list|,
name|fieldMap
argument_list|,
name|metricNameSet
argument_list|,
name|complexMetrics
argument_list|)
expr_stmt|;
return|return
name|DruidTable
operator|.
name|create
argument_list|(
name|DruidSchema
operator|.
name|this
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|fieldMap
argument_list|,
name|metricNameSet
argument_list|,
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|,
name|complexMetrics
argument_list|)
return|;
block|}
block|}
end_class

end_unit

