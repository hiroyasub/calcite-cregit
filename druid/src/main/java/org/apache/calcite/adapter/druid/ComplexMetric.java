begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_comment
comment|/**  * Stores information about available complex metrics in the Druid Adapter.  */
end_comment

begin_class
specifier|public
class|class
name|ComplexMetric
block|{
comment|/** The underlying metric column that this complex metric represents. */
specifier|private
specifier|final
name|String
name|metricName
decl_stmt|;
comment|/** The type of this metric. */
specifier|private
specifier|final
name|DruidType
name|type
decl_stmt|;
specifier|public
name|ComplexMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|DruidType
name|type
parameter_list|)
block|{
name|validate
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|metricName
operator|=
name|metricName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|validate
parameter_list|(
name|DruidType
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|isComplex
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Druid type: "
operator|+
name|type
operator|+
literal|" is not complex"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getMetricName
parameter_list|()
block|{
return|return
name|metricName
return|;
block|}
specifier|public
name|DruidType
name|getDruidType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getMetricType
parameter_list|()
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HYPER_UNIQUE
case|:
return|return
literal|"hyperUnique"
return|;
case|case
name|THETA_SKETCH
case|:
return|return
literal|"thetaSketch"
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Type: "
operator|+
name|type
operator|+
literal|" does not have an associated metric type"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns true if and only if this<code>ComplexMetric</code>    * can be used in the given {@link AggregateCall}.    * */
specifier|public
name|boolean
name|canBeUsed
parameter_list|(
name|AggregateCall
name|call
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HYPER_UNIQUE
case|:
case|case
name|THETA_SKETCH
case|:
return|return
name|call
operator|!=
literal|null
operator|&&
name|call
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|COUNT
operator|&&
name|call
operator|.
name|isDistinct
argument_list|()
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

