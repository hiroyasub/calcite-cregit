begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|chrono
operator|.
name|ISOChronology
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link TableFactory} for Druid.  *  *<p>A table corresponds to what Druid calls a "data source".  */
end_comment

begin_class
specifier|public
class|class
name|DruidTableFactory
implements|implements
name|TableFactory
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
specifier|static
specifier|final
name|DruidTableFactory
name|INSTANCE
init|=
operator|new
name|DruidTableFactory
argument_list|()
decl_stmt|;
specifier|private
name|DruidTableFactory
parameter_list|()
block|{
block|}
specifier|public
name|Table
name|create
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
name|operand
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
specifier|final
name|DruidSchema
name|druidSchema
init|=
name|schema
operator|.
name|unwrap
argument_list|(
name|DruidSchema
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// If "dataSource" operand is present it overrides the table name.
specifier|final
name|String
name|dataSource
init|=
operator|(
name|String
operator|)
name|operand
operator|.
name|get
argument_list|(
literal|"dataSource"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|metricNameBuilder
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|timestampColumnName
init|=
operator|(
name|String
operator|)
name|operand
operator|.
name|get
argument_list|(
literal|"timestampColumn"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SqlTypeName
argument_list|>
name|fieldBuilder
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|dimensionsRaw
init|=
name|operand
operator|.
name|get
argument_list|(
literal|"dimensions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimensionsRaw
operator|instanceof
name|List
condition|)
block|{
comment|//noinspection unchecked
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dimensions
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|dimensionsRaw
decl_stmt|;
for|for
control|(
name|String
name|dimension
range|:
name|dimensions
control|)
block|{
name|fieldBuilder
operator|.
name|put
argument_list|(
name|dimension
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Object
name|metricsRaw
init|=
name|operand
operator|.
name|get
argument_list|(
literal|"metrics"
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsRaw
operator|instanceof
name|List
condition|)
block|{
specifier|final
name|List
name|metrics
init|=
operator|(
name|List
operator|)
name|metricsRaw
decl_stmt|;
for|for
control|(
name|Object
name|metric
range|:
name|metrics
control|)
block|{
specifier|final
name|SqlTypeName
name|sqlTypeName
decl_stmt|;
specifier|final
name|String
name|metricName
decl_stmt|;
if|if
condition|(
name|metric
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|map2
init|=
operator|(
name|Map
operator|)
name|metric
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|map2
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"metric must have name"
argument_list|)
throw|;
block|}
name|metricName
operator|=
operator|(
name|String
operator|)
name|map2
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|type
init|=
name|map2
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|sqlTypeName
operator|=
name|SqlTypeName
operator|.
name|BIGINT
expr_stmt|;
block|}
if|else if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|sqlTypeName
operator|=
name|SqlTypeName
operator|.
name|DOUBLE
expr_stmt|;
block|}
else|else
block|{
name|sqlTypeName
operator|=
name|SqlTypeName
operator|.
name|BIGINT
expr_stmt|;
block|}
block|}
else|else
block|{
name|metricName
operator|=
operator|(
name|String
operator|)
name|metric
expr_stmt|;
name|sqlTypeName
operator|=
name|SqlTypeName
operator|.
name|BIGINT
expr_stmt|;
block|}
name|fieldBuilder
operator|.
name|put
argument_list|(
name|metricName
argument_list|,
name|sqlTypeName
argument_list|)
expr_stmt|;
name|metricNameBuilder
operator|.
name|add
argument_list|(
name|metricName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|dataSourceName
init|=
name|Util
operator|.
name|first
argument_list|(
name|dataSource
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|DruidConnectionImpl
name|c
decl_stmt|;
if|if
condition|(
name|dimensionsRaw
operator|==
literal|null
operator|||
name|metricsRaw
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|DruidConnectionImpl
argument_list|(
name|druidSchema
operator|.
name|url
argument_list|,
name|druidSchema
operator|.
name|url
operator|.
name|replace
argument_list|(
literal|":8082"
argument_list|,
literal|":8081"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|Object
name|intervalString
init|=
name|operand
operator|.
name|get
argument_list|(
literal|"interval"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
decl_stmt|;
if|if
condition|(
name|intervalString
operator|instanceof
name|String
condition|)
block|{
name|intervals
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|Interval
argument_list|(
name|intervalString
argument_list|,
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intervals
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|DruidTable
operator|.
name|create
argument_list|(
name|druidSchema
argument_list|,
name|dataSourceName
argument_list|,
name|intervals
argument_list|,
name|fieldBuilder
argument_list|,
name|metricNameBuilder
argument_list|,
name|timestampColumnName
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End DruidTableFactory.java
end_comment

end_unit

