begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|BindableRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Bindables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Compiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Sink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|AbstractRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Relational expression representing a scan of a Druid data set.  */
end_comment

begin_class
specifier|public
class|class
name|DruidQuery
extends|extends
name|AbstractRelNode
implements|implements
name|BindableRel
block|{
comment|/**    * Provides a standard list of supported Calcite operators that can be converted to    * Druid Expressions. This can be used as is or re-adapted based on underline    * engine operator syntax.    */
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|DruidSqlOperatorConverter
argument_list|>
name|DEFAULT_OPERATORS_LIST
init|=
name|ImmutableList
operator|.
expr|<
name|DruidSqlOperatorConverter
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EXP
argument_list|,
literal|"exp"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CONCAT
argument_list|,
literal|"concat"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|DIVIDE_INTEGER
argument_list|,
literal|"div"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LIKE
argument_list|,
literal|"like"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LN
argument_list|,
literal|"log"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SQRT
argument_list|,
literal|"sqrt"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LOWER
argument_list|,
literal|"lower"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LOG10
argument_list|,
literal|"log10"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|REPLACE
argument_list|,
literal|"replace"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|UPPER
argument_list|,
literal|"upper"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|POWER
argument_list|,
literal|"pow"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|ABS
argument_list|,
literal|"abs"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SIN
argument_list|,
literal|"sin"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COS
argument_list|,
literal|"cos"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|TAN
argument_list|,
literal|"tan"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
literal|"case_searched"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CHAR_LENGTH
argument_list|,
literal|"strlen"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DirectOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CHARACTER_LENGTH
argument_list|,
literal|"strlen"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
literal|"=="
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT_EQUALS
argument_list|,
literal|"!="
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|NaryOperatorConverter
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
literal|"||"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|NaryOperatorConverter
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
literal|"&&"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
literal|"<"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|,
literal|"<="
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
literal|">"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
argument_list|,
literal|">="
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
literal|"+"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MINUS
argument_list|,
literal|"-"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
literal|"*"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|DIVIDE
argument_list|,
literal|"/"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BinaryOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MOD
argument_list|,
literal|"%"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DruidSqlCastConverter
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|ExtractOperatorConversion
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|UnaryPrefixOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
literal|"!"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|UnaryPrefixOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|UNARY_MINUS
argument_list|,
literal|"-"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|UnarySuffixOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_FALSE
argument_list|,
literal|"<= 0"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|UnarySuffixOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_TRUE
argument_list|,
literal|"<= 0"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|UnarySuffixOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
argument_list|,
literal|"> 0"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|UnarySuffixOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_FALSE
argument_list|,
literal|"> 0"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|UnarySuffixOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
literal|"== null"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|UnarySuffixOperatorConversion
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
literal|"!= null"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FloorOperatorConversion
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|CeilOperatorConversion
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SubstringOperatorConversion
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|protected
name|QuerySpec
name|querySpec
decl_stmt|;
specifier|final
name|RelOptTable
name|table
decl_stmt|;
specifier|final
name|DruidTable
name|druidTable
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|Interval
argument_list|>
name|intervals
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RelNode
argument_list|>
name|rels
decl_stmt|;
comment|/**    * This operator map provides DruidSqlOperatorConverter instance to convert a Calcite RexNode to    * Druid Expression when possible.    */
specifier|final
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|DruidSqlOperatorConverter
argument_list|>
name|converterOperatorMap
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|VALID_SIG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"sf?p?(a?|ah|ah?o)l?"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTRACT_COLUMN_NAME_PREFIX
init|=
literal|"extract"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLOOR_COLUMN_NAME_PREFIX
init|=
literal|"floor"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DRUID_QUERY_FETCH
init|=
literal|"druid.query.fetch"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DAYS_IN_TEN_YEARS
init|=
literal|10
operator|*
literal|365
decl_stmt|;
comment|/**    * Creates a DruidQuery.    *    * @param cluster        Cluster    * @param traitSet       Traits    * @param table          Table    * @param druidTable     Druid table    * @param intervals      Intervals for the query    * @param rels           Internal relational expressions    * @param converterOperatorMap mapping of Calcite Sql Operator to Druid Expression API.    */
specifier|protected
name|DruidQuery
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|,
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|DruidSqlOperatorConverter
argument_list|>
name|converterOperatorMap
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|druidTable
operator|=
name|druidTable
expr_stmt|;
name|this
operator|.
name|intervals
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|intervals
argument_list|)
expr_stmt|;
name|this
operator|.
name|rels
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rels
argument_list|)
expr_stmt|;
name|this
operator|.
name|converterOperatorMap
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|converterOperatorMap
argument_list|,
literal|"Operator map cannot be null"
argument_list|)
expr_stmt|;
assert|assert
name|isValid
argument_list|(
name|Litmus
operator|.
name|THROW
argument_list|,
literal|null
argument_list|)
assert|;
block|}
comment|/** Returns whether a signature represents an sequence of relational operators    * that can be translated into a valid Druid query. */
specifier|static
name|boolean
name|isValidSignature
parameter_list|(
name|String
name|signature
parameter_list|)
block|{
return|return
name|VALID_SIG
operator|.
name|matcher
argument_list|(
name|signature
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/** Creates a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|SqlOperator
argument_list|,
name|DruidSqlOperatorConverter
argument_list|>
name|mapBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|DruidSqlOperatorConverter
name|converter
range|:
name|DEFAULT_OPERATORS_LIST
control|)
block|{
name|mapBuilder
operator|.
name|put
argument_list|(
name|converter
operator|.
name|calciteOperator
argument_list|()
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
return|return
name|create
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|druidTable
argument_list|,
name|druidTable
operator|.
name|intervals
argument_list|,
name|rels
argument_list|,
name|mapBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Creates a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|,
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|DruidSqlOperatorConverter
argument_list|>
name|converterOperatorMap
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|druidTable
argument_list|,
name|druidTable
operator|.
name|intervals
argument_list|,
name|rels
argument_list|,
name|converterOperatorMap
argument_list|)
return|;
block|}
comment|/**    * Creates a DruidQuery.    */
specifier|private
specifier|static
name|DruidQuery
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|,
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|DruidSqlOperatorConverter
argument_list|>
name|converterOperatorMap
parameter_list|)
block|{
return|return
operator|new
name|DruidQuery
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|druidTable
argument_list|,
name|intervals
argument_list|,
name|rels
argument_list|,
name|converterOperatorMap
argument_list|)
return|;
block|}
comment|/** Extends a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|extendQuery
parameter_list|(
name|DruidQuery
name|query
parameter_list|,
name|RelNode
name|r
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelNode
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
return|return
name|DruidQuery
operator|.
name|create
argument_list|(
name|query
operator|.
name|getCluster
argument_list|()
argument_list|,
name|r
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|query
operator|.
name|getConvention
argument_list|()
argument_list|)
argument_list|,
name|query
operator|.
name|getTable
argument_list|()
argument_list|,
name|query
operator|.
name|druidTable
argument_list|,
name|query
operator|.
name|intervals
argument_list|,
name|builder
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|rels
argument_list|)
operator|.
name|add
argument_list|(
name|r
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|query
operator|.
name|getOperatorConversionMap
argument_list|()
argument_list|)
return|;
block|}
comment|/** Extends a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|extendQuery
parameter_list|(
name|DruidQuery
name|query
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|)
block|{
return|return
name|DruidQuery
operator|.
name|create
argument_list|(
name|query
operator|.
name|getCluster
argument_list|()
argument_list|,
name|query
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|query
operator|.
name|getTable
argument_list|()
argument_list|,
name|query
operator|.
name|druidTable
argument_list|,
name|intervals
argument_list|,
name|query
operator|.
name|rels
argument_list|,
name|query
operator|.
name|getOperatorConversionMap
argument_list|()
argument_list|)
return|;
block|}
comment|/** Check if it is needed to use UTC for DATE and TIMESTAMP types. **/
specifier|private
specifier|static
name|boolean
name|needUtcTimeExtract
parameter_list|(
name|RexNode
name|rexNode
parameter_list|)
block|{
return|return
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|DATE
operator|||
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP
operator|||
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
return|;
block|}
comment|/**    * Converts a {@link RexNode} to a Druid column.    *    * @param rexNode    leaf Input Ref to Druid Column    * @param rowType    row type    * @param druidQuery Druid query    *    * @return {@link Pair} of Column name and Extraction Function on the top of    * the input ref, or {@code Pair.of(null, null)} when cannot translate to a    * valid Druid column    */
specifier|protected
specifier|static
name|Pair
argument_list|<
name|String
argument_list|,
name|ExtractionFunction
argument_list|>
name|toDruidColumn
parameter_list|(
name|RexNode
name|rexNode
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|DruidQuery
name|druidQuery
parameter_list|)
block|{
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|final
name|ExtractionFunction
name|extractionFunction
decl_stmt|;
specifier|final
name|Granularity
name|granularity
decl_stmt|;
switch|switch
condition|(
name|rexNode
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
name|columnName
operator|=
name|extractColumnName
argument_list|(
name|rexNode
argument_list|,
name|rowType
argument_list|,
name|druidQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|needUtcTimeExtract
argument_list|(
name|rexNode
argument_list|)
condition|)
block|{
name|extractionFunction
operator|=
name|TimeExtractionFunction
operator|.
name|createDefault
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extractionFunction
operator|=
literal|null
expr_stmt|;
block|}
break|break;
case|case
name|EXTRACT
case|:
name|granularity
operator|=
name|DruidDateTimeUtils
operator|.
name|extractGranularity
argument_list|(
name|rexNode
argument_list|,
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|granularity
operator|==
literal|null
condition|)
block|{
comment|// unknown Granularity
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|TimeExtractionFunction
operator|.
name|isValidTimeExtract
argument_list|(
operator|(
name|RexCall
operator|)
name|rexNode
argument_list|)
condition|)
block|{
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|RexNode
name|extractValueNode
init|=
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractValueNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|DATE
operator|||
name|extractValueNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP
condition|)
block|{
comment|// Use 'UTC' at the extraction level
name|extractionFunction
operator|=
name|TimeExtractionFunction
operator|.
name|createExtractFromGranularity
argument_list|(
name|granularity
argument_list|,
name|DateTimeUtils
operator|.
name|UTC_ZONE
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|columnName
operator|=
name|extractColumnName
argument_list|(
name|extractValueNode
argument_list|,
name|rowType
argument_list|,
name|druidQuery
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|extractValueNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
condition|)
block|{
comment|// Use local time zone at the extraction level
name|extractionFunction
operator|=
name|TimeExtractionFunction
operator|.
name|createExtractFromGranularity
argument_list|(
name|granularity
argument_list|,
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
argument_list|)
expr_stmt|;
name|columnName
operator|=
name|extractColumnName
argument_list|(
name|extractValueNode
argument_list|,
name|rowType
argument_list|,
name|druidQuery
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
break|break;
case|case
name|FLOOR
case|:
name|granularity
operator|=
name|DruidDateTimeUtils
operator|.
name|extractGranularity
argument_list|(
name|rexNode
argument_list|,
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|granularity
operator|==
literal|null
condition|)
block|{
comment|// unknown Granularity
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|TimeExtractionFunction
operator|.
name|isValidTimeFloor
argument_list|(
operator|(
name|RexCall
operator|)
name|rexNode
argument_list|)
condition|)
block|{
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|RexNode
name|floorValueNode
init|=
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|needUtcTimeExtract
argument_list|(
name|floorValueNode
argument_list|)
condition|)
block|{
comment|// Use 'UTC' at the extraction level, since all datetime types
comment|// are represented in 'UTC'
name|extractionFunction
operator|=
name|TimeExtractionFunction
operator|.
name|createFloorFromGranularity
argument_list|(
name|granularity
argument_list|,
name|DateTimeUtils
operator|.
name|UTC_ZONE
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|columnName
operator|=
name|extractColumnName
argument_list|(
name|floorValueNode
argument_list|,
name|rowType
argument_list|,
name|druidQuery
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
break|break;
case|case
name|CAST
case|:
comment|// CASE we have a cast over InputRef. Check that cast is valid
if|if
condition|(
operator|!
name|isValidLeafCast
argument_list|(
name|rexNode
argument_list|)
condition|)
block|{
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|RexNode
name|operand0
init|=
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|columnName
operator|=
name|extractColumnName
argument_list|(
name|operand0
argument_list|,
name|rowType
argument_list|,
name|druidQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|needUtcTimeExtract
argument_list|(
name|rexNode
argument_list|)
condition|)
block|{
comment|// CASE CAST to TIME/DATE need to make sure that we have valid extraction fn
name|extractionFunction
operator|=
name|TimeExtractionFunction
operator|.
name|translateCastToTimeExtract
argument_list|(
name|rexNode
argument_list|,
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extractionFunction
operator|==
literal|null
condition|)
block|{
comment|// no extraction Function means cast is not valid thus bail out
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|extractionFunction
operator|=
literal|null
expr_stmt|;
block|}
break|break;
default|default:
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|columnName
argument_list|,
name|extractionFunction
argument_list|)
return|;
block|}
comment|/**    * Returns whether a {@link RexNode} is a valid Druid cast operation.    *    * @param rexNode RexNode    *    * @return whether the operand is an inputRef and it is a valid Druid Cast    * operation    */
specifier|private
specifier|static
name|boolean
name|isValidLeafCast
parameter_list|(
name|RexNode
name|rexNode
parameter_list|)
block|{
assert|assert
name|rexNode
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
assert|;
specifier|final
name|RexNode
name|input
init|=
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|input
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|INPUT_REF
argument_list|)
condition|)
block|{
comment|// it is not a leaf cast don't bother going further.
return|return
literal|false
return|;
block|}
specifier|final
name|SqlTypeName
name|toTypeName
init|=
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|toTypeName
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|CHARACTER
condition|)
block|{
comment|// CAST of input to character type
return|return
literal|true
return|;
block|}
if|if
condition|(
name|toTypeName
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|NUMERIC
condition|)
block|{
comment|// CAST of input to numeric type, it is part of a bounded comparison
return|return
literal|true
return|;
block|}
if|if
condition|(
name|toTypeName
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|TIMESTAMP
operator|||
name|toTypeName
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|DATETIME
condition|)
block|{
comment|// CAST of literal to timestamp type
return|return
literal|true
return|;
block|}
if|if
condition|(
name|toTypeName
operator|.
name|getFamily
argument_list|()
operator|.
name|contains
argument_list|(
name|input
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// same type it is okay to push it
return|return
literal|true
return|;
block|}
comment|// Currently other CAST operations cannot be pushed to Druid
return|return
literal|false
return|;
block|}
comment|/**    * Returns Druid column name or null when it is not possible to translate.    *    * @param rexNode Druid input ref node    * @param rowType Row type    * @param query Druid query    */
annotation|@
name|Nullable
specifier|protected
specifier|static
name|String
name|extractColumnName
parameter_list|(
name|RexNode
name|rexNode
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
if|if
condition|(
name|rexNode
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|INPUT_REF
condition|)
block|{
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|rexNode
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// calcite has this un-direct renaming of timestampFieldName to native druid `__time`
if|if
condition|(
name|query
operator|.
name|getDruidTable
argument_list|()
operator|.
name|timestampFieldName
operator|.
name|equals
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
return|;
block|}
return|return
name|columnName
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Equivalent of String.format(Locale.ENGLISH, message, formatArgs).    */
specifier|public
specifier|static
name|String
name|format
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|formatArgs
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
name|message
argument_list|,
name|formatArgs
argument_list|)
return|;
block|}
comment|/** Returns a string describing the operations inside this query.    *    *<p>For example, "sfpahol" means {@link TableScan} (s)    * followed by {@link Filter} (f)    * followed by {@link Project} (p)    * followed by {@link Aggregate} (a)    * followed by {@link Filter} (h)    * followed by {@link Project} (o)    * followed by {@link Sort} (l).    *    * @see #isValidSignature(String)    */
name|String
name|signature
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|flag
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RelNode
name|rel
range|:
name|rels
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|rel
operator|instanceof
name|TableScan
condition|?
literal|'s'
else|:
operator|(
name|rel
operator|instanceof
name|Project
operator|&&
name|flag
operator|)
condition|?
literal|'o'
else|:
operator|(
name|rel
operator|instanceof
name|Filter
operator|&&
name|flag
operator|)
condition|?
literal|'h'
else|:
name|rel
operator|instanceof
name|Aggregate
condition|?
literal|'a'
else|:
name|rel
operator|instanceof
name|Filter
condition|?
literal|'f'
else|:
name|rel
operator|instanceof
name|Sort
condition|?
literal|'l'
else|:
name|rel
operator|instanceof
name|Project
condition|?
literal|'p'
else|:
literal|'!'
argument_list|)
expr_stmt|;
name|flag
operator|=
name|flag
operator|||
name|rel
operator|instanceof
name|Aggregate
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|Litmus
name|litmus
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|isValid
argument_list|(
name|litmus
argument_list|,
name|context
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|signature
init|=
name|signature
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isValidSignature
argument_list|(
name|signature
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"invalid signature [{}]"
argument_list|,
name|signature
argument_list|)
return|;
block|}
if|if
condition|(
name|rels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"must have at least one rel"
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelNode
name|r
init|=
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|TableScan
operator|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"first rel must be TableScan, was "
argument_list|,
name|r
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|.
name|getTable
argument_list|()
operator|!=
name|table
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"first rel must be based on table table"
argument_list|)
return|;
block|}
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|r
operator|.
name|getInputs
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputs
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
name|rels
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"each rel must have a single input"
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"no grouping sets"
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|r
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|(
name|Filter
operator|)
name|r
decl_stmt|;
specifier|final
name|DruidJsonFilter
name|druidJsonFilter
init|=
name|DruidJsonFilter
operator|.
name|toDruidFilters
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|filter
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|druidJsonFilter
operator|==
literal|null
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"invalid filter [{}]"
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|r
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|offset
operator|!=
literal|null
operator|&&
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|offset
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"offset not supported"
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|DruidSqlOperatorConverter
argument_list|>
name|getOperatorConversionMap
parameter_list|()
block|{
return|return
name|converterOperatorMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|Pair
operator|.
name|right
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
argument_list|,
name|getQuerySpec
argument_list|()
operator|.
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
name|TableScan
name|getTableScan
parameter_list|()
block|{
return|return
operator|(
name|TableScan
operator|)
name|rels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|getTopNode
parameter_list|()
block|{
return|return
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptTable
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
specifier|public
name|DruidTable
name|getDruidTable
parameter_list|()
block|{
return|return
name|druidTable
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
for|for
control|(
name|RelNode
name|rel
range|:
name|rels
control|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|TableScan
condition|)
block|{
name|TableScan
name|tableScan
init|=
operator|(
name|TableScan
operator|)
name|rel
decl_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"table"
argument_list|,
name|tableScan
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Filter
condition|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"filter"
argument_list|,
operator|(
operator|(
name|Filter
operator|)
name|rel
operator|)
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Project
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Project
operator|)
name|rel
operator|)
operator|.
name|getInput
argument_list|()
operator|instanceof
name|Aggregate
condition|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"post_projects"
argument_list|,
operator|(
operator|(
name|Project
operator|)
name|rel
operator|)
operator|.
name|getProjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"projects"
argument_list|,
operator|(
operator|(
name|Project
operator|)
name|rel
operator|)
operator|.
name|getProjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rel
decl_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"groups"
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"aggs"
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rel
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelFieldCollation
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
control|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"sort"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|ord
operator|.
name|e
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Ord
argument_list|<
name|RelFieldCollation
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
control|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"dir"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|ord
operator|.
name|e
operator|.
name|shortString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|itemIf
argument_list|(
literal|"fetch"
argument_list|,
name|sort
operator|.
name|fetch
argument_list|,
name|sort
operator|.
name|fetch
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"rel type not supported in Druid query "
operator|+
name|rel
argument_list|)
throw|;
block|}
block|}
return|return
name|pw
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
comment|// Cost increases with the number of fields queried.
comment|// A plan returning 100 or more columns will have 2x the cost of a
comment|// plan returning 2 columns.
comment|// A plan where all extra columns are pruned will be preferred.
operator|.
name|multiplyBy
argument_list|(
name|RelMdUtil
operator|.
name|linear
argument_list|(
name|querySpec
operator|.
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
literal|1d
argument_list|,
literal|2d
argument_list|)
argument_list|)
operator|.
name|multiplyBy
argument_list|(
name|getQueryTypeCostMultiplier
argument_list|()
argument_list|)
comment|// A Scan leaf filter is better than having filter spec if possible.
operator|.
name|multiplyBy
argument_list|(
name|rels
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|rels
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Filter
condition|?
literal|0.5
else|:
literal|1.0
argument_list|)
comment|// a plan with sort pushed to druid is better than doing sort outside of druid
operator|.
name|multiplyBy
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|instanceof
name|Sort
condition|?
literal|0.1
else|:
literal|1.0
argument_list|)
operator|.
name|multiplyBy
argument_list|(
name|getIntervalCostMultiplier
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|double
name|getIntervalCostMultiplier
parameter_list|()
block|{
name|int
name|days
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Interval
name|interval
range|:
name|intervals
control|)
block|{
name|days
operator|+=
name|interval
operator|.
name|toDuration
argument_list|()
operator|.
name|getStandardDays
argument_list|()
expr_stmt|;
block|}
comment|// Cost increases with the wider interval being queries.
comment|// A plan querying 10 or more years of data will have 10x the cost of a
comment|// plan returning 1 day data.
comment|// A plan where least interval is queries will be preferred.
return|return
name|RelMdUtil
operator|.
name|linear
argument_list|(
name|days
argument_list|,
literal|1
argument_list|,
name|DAYS_IN_TEN_YEARS
argument_list|,
literal|0.1d
argument_list|,
literal|1d
argument_list|)
return|;
block|}
specifier|private
name|double
name|getQueryTypeCostMultiplier
parameter_list|()
block|{
comment|// Cost of Select> GroupBy> Timeseries> TopN
switch|switch
condition|(
name|querySpec
operator|.
name|queryType
condition|)
block|{
case|case
name|SELECT
case|:
return|return
literal|.1
return|;
case|case
name|GROUP_BY
case|:
return|return
literal|.08
return|;
case|case
name|TIMESERIES
case|:
return|return
literal|.06
return|;
case|case
name|TOP_N
case|:
return|return
literal|.04
return|;
default|default:
return|return
literal|.2
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
for|for
control|(
name|RelOptRule
name|rule
range|:
name|DruidRules
operator|.
name|RULES
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RelOptRule
name|rule
range|:
name|Bindables
operator|.
name|RULES
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|table
operator|.
name|unwrap
argument_list|(
name|ScannableTable
operator|.
name|class
argument_list|)
operator|.
name|scan
argument_list|(
name|dataContext
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|DruidQueryNode
argument_list|(
name|implementor
operator|.
name|compiler
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|QuerySpec
name|getQuerySpec
parameter_list|()
block|{
if|if
condition|(
name|querySpec
operator|==
literal|null
condition|)
block|{
name|querySpec
operator|=
name|deriveQuerySpec
argument_list|()
expr_stmt|;
assert|assert
name|querySpec
operator|!=
literal|null
operator|:
name|this
assert|;
block|}
return|return
name|querySpec
return|;
block|}
specifier|protected
name|QuerySpec
name|deriveQuerySpec
parameter_list|()
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|table
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|Filter
name|filterRel
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Filter
condition|)
block|{
name|filterRel
operator|=
operator|(
name|Filter
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
name|Project
name|project
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Project
condition|)
block|{
name|project
operator|=
operator|(
name|Project
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
name|ImmutableBitSet
name|groupSet
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|groupSet
operator|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
expr_stmt|;
name|aggCalls
operator|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
expr_stmt|;
name|aggNames
operator|=
name|Util
operator|.
name|skip
argument_list|(
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|,
name|groupSet
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Filter
name|havingFilter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Filter
condition|)
block|{
name|havingFilter
operator|=
operator|(
name|Filter
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
name|Project
name|postProject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Project
condition|)
block|{
name|postProject
operator|=
operator|(
name|Project
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|collationIndexes
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Direction
argument_list|>
name|collationDirections
init|=
literal|null
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|numericCollationBitSetBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Integer
name|fetch
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|collationIndexes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|collationDirections
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|RelFieldCollation
name|fCol
range|:
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|collationIndexes
operator|.
name|add
argument_list|(
name|fCol
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
name|collationDirections
operator|.
name|add
argument_list|(
name|fCol
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sort
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|fCol
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|NUMERIC
condition|)
block|{
name|numericCollationBitSetBuilder
operator|.
name|set
argument_list|(
name|fCol
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fetch
operator|=
name|sort
operator|.
name|fetch
operator|!=
literal|null
condition|?
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|rels
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"could not implement all rels"
argument_list|)
throw|;
block|}
return|return
name|getQuery
argument_list|(
name|rowType
argument_list|,
name|filterRel
argument_list|,
name|project
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|,
name|aggNames
argument_list|,
name|collationIndexes
argument_list|,
name|collationDirections
argument_list|,
name|numericCollationBitSetBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|fetch
argument_list|,
name|postProject
argument_list|,
name|havingFilter
argument_list|)
return|;
block|}
specifier|public
name|QueryType
name|getQueryType
parameter_list|()
block|{
return|return
name|getQuerySpec
argument_list|()
operator|.
name|queryType
return|;
block|}
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|getQuerySpec
argument_list|()
operator|.
name|queryString
return|;
block|}
specifier|protected
name|CalciteConnectionConfig
name|getConnectionConfig
parameter_list|()
block|{
return|return
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|CalciteConnectionConfig
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Translates Filter rel to Druid Filter Json object if possible.    * Currently Filter rel input has to be Druid Table scan    *    * @param filterRel input filter rel    * @param druidQuery Druid query    *    * @return DruidJson Filter or null if cannot translate one of filters    */
annotation|@
name|Nullable
specifier|private
specifier|static
name|DruidJsonFilter
name|computeFilter
parameter_list|(
annotation|@
name|Nullable
name|Filter
name|filterRel
parameter_list|,
name|DruidQuery
name|druidQuery
parameter_list|)
block|{
if|if
condition|(
name|filterRel
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RexNode
name|filter
init|=
name|filterRel
operator|.
name|getCondition
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|inputRowType
init|=
name|filterRel
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
name|DruidJsonFilter
operator|.
name|toDruidFilters
argument_list|(
name|filter
argument_list|,
name|inputRowType
argument_list|,
name|druidQuery
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Translates a list of projects to Druid Column names and Virtual Columns if    * any.    *    *<p>We cannot use {@link Pair#zip(Object[], Object[])}, since size may be    * different.    *    * @param projectRel Project    *    * @param druidQuery Druid query    *    * @return Pair of list of Druid Columns and Expression Virtual Columns, or    * null when cannot translate one of the projects    */
annotation|@
name|Nullable
specifier|protected
specifier|static
name|Pair
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|>
name|computeProjectAsScan
parameter_list|(
annotation|@
name|Nullable
name|Project
name|projectRel
parameter_list|,
name|RelDataType
name|inputRowType
parameter_list|,
name|DruidQuery
name|druidQuery
parameter_list|)
block|{
if|if
condition|(
name|projectRel
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|usedFieldNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnsBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|projectedColumnsBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
name|projectRel
operator|.
name|getProjects
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|project
range|:
name|projects
control|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|ExtractionFunction
argument_list|>
name|druidColumn
init|=
name|toDruidColumn
argument_list|(
name|project
argument_list|,
name|inputRowType
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
name|boolean
name|needExtractForOperand
init|=
name|project
operator|instanceof
name|RexCall
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|project
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|DruidQuery
operator|::
name|needUtcTimeExtract
argument_list|)
decl_stmt|;
if|if
condition|(
name|druidColumn
operator|.
name|left
operator|==
literal|null
operator|||
name|druidColumn
operator|.
name|right
operator|!=
literal|null
operator|||
name|needExtractForOperand
condition|)
block|{
comment|// It is a complex project pushed as expression
specifier|final
name|String
name|expression
init|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|project
argument_list|,
name|inputRowType
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|virColName
init|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
literal|"vc"
argument_list|,
name|usedFieldNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
decl_stmt|;
name|virtualColumnsBuilder
operator|.
name|add
argument_list|(
name|VirtualColumn
operator|.
name|builder
argument_list|()
operator|.
name|withName
argument_list|(
name|virColName
argument_list|)
operator|.
name|withExpression
argument_list|(
name|expression
argument_list|)
operator|.
name|withType
argument_list|(
name|DruidExpressions
operator|.
name|EXPRESSION_TYPES
operator|.
name|get
argument_list|(
name|project
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|usedFieldNames
operator|.
name|add
argument_list|(
name|virColName
argument_list|)
expr_stmt|;
name|projectedColumnsBuilder
operator|.
name|add
argument_list|(
name|virColName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// simple inputRef or extractable function
if|if
condition|(
name|usedFieldNames
operator|.
name|contains
argument_list|(
name|druidColumn
operator|.
name|left
argument_list|)
condition|)
block|{
specifier|final
name|String
name|virColName
init|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
literal|"vc"
argument_list|,
name|usedFieldNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
decl_stmt|;
name|virtualColumnsBuilder
operator|.
name|add
argument_list|(
name|VirtualColumn
operator|.
name|builder
argument_list|()
operator|.
name|withName
argument_list|(
name|virColName
argument_list|)
operator|.
name|withExpression
argument_list|(
name|DruidExpressions
operator|.
name|fromColumn
argument_list|(
name|druidColumn
operator|.
name|left
argument_list|)
argument_list|)
operator|.
name|withType
argument_list|(
name|DruidExpressions
operator|.
name|EXPRESSION_TYPES
operator|.
name|get
argument_list|(
name|project
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|usedFieldNames
operator|.
name|add
argument_list|(
name|virColName
argument_list|)
expr_stmt|;
name|projectedColumnsBuilder
operator|.
name|add
argument_list|(
name|virColName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|projectedColumnsBuilder
operator|.
name|add
argument_list|(
name|druidColumn
operator|.
name|left
argument_list|)
expr_stmt|;
name|usedFieldNames
operator|.
name|add
argument_list|(
name|druidColumn
operator|.
name|left
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|projectedColumnsBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|virtualColumnsBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Computes the project group set.    *    * @param projectNode Project under the Aggregates if any    * @param groupSet Ids of grouping keys as they are listed in {@code projects} list    * @param inputRowType Input row type under the project    * @param druidQuery Druid query    *    * @return A list of {@link DimensionSpec} containing the group by dimensions,    * and a list of {@link VirtualColumn} containing Druid virtual column    * projections; or null, if translation is not possible.    * Note that the size of lists can be different.    */
annotation|@
name|Nullable
specifier|protected
specifier|static
name|Pair
argument_list|<
name|List
argument_list|<
name|DimensionSpec
argument_list|>
argument_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|>
name|computeProjectGroupSet
parameter_list|(
annotation|@
name|Nullable
name|Project
name|projectNode
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|RelDataType
name|inputRowType
parameter_list|,
name|DruidQuery
name|druidQuery
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DimensionSpec
argument_list|>
name|dimensionSpecList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|usedFieldNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|groupKey
range|:
name|groupSet
control|)
block|{
specifier|final
name|DimensionSpec
name|dimensionSpec
decl_stmt|;
specifier|final
name|RexNode
name|project
decl_stmt|;
if|if
condition|(
name|projectNode
operator|==
literal|null
condition|)
block|{
name|project
operator|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|groupKey
argument_list|,
name|inputRowType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|=
name|projectNode
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|groupKey
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|String
argument_list|,
name|ExtractionFunction
argument_list|>
name|druidColumn
init|=
name|toDruidColumn
argument_list|(
name|project
argument_list|,
name|inputRowType
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|druidColumn
operator|.
name|left
operator|!=
literal|null
operator|&&
name|druidColumn
operator|.
name|right
operator|==
literal|null
condition|)
block|{
comment|// SIMPLE INPUT REF
name|dimensionSpec
operator|=
operator|new
name|DefaultDimensionSpec
argument_list|(
name|druidColumn
operator|.
name|left
argument_list|,
name|druidColumn
operator|.
name|left
argument_list|,
name|DruidExpressions
operator|.
name|EXPRESSION_TYPES
operator|.
name|get
argument_list|(
name|project
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|usedFieldNames
operator|.
name|add
argument_list|(
name|druidColumn
operator|.
name|left
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|druidColumn
operator|.
name|left
operator|!=
literal|null
operator|&&
name|druidColumn
operator|.
name|right
operator|!=
literal|null
condition|)
block|{
comment|// CASE it is an extraction Dimension
specifier|final
name|String
name|columnPrefix
decl_stmt|;
comment|//@TODO Remove it! if else statement is not really needed it is here to make tests pass.
if|if
condition|(
name|project
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EXTRACT
condition|)
block|{
name|columnPrefix
operator|=
name|EXTRACT_COLUMN_NAME_PREFIX
operator|+
literal|"_"
operator|+
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|DruidDateTimeUtils
operator|.
name|extractGranularity
argument_list|(
name|project
argument_list|,
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|lowerName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|project
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FLOOR
condition|)
block|{
name|columnPrefix
operator|=
name|FLOOR_COLUMN_NAME_PREFIX
operator|+
literal|"_"
operator|+
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|DruidDateTimeUtils
operator|.
name|extractGranularity
argument_list|(
name|project
argument_list|,
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|lowerName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnPrefix
operator|=
literal|"extract"
expr_stmt|;
block|}
specifier|final
name|String
name|uniqueExtractColumnName
init|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
name|columnPrefix
argument_list|,
name|usedFieldNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
decl_stmt|;
name|dimensionSpec
operator|=
operator|new
name|ExtractionDimensionSpec
argument_list|(
name|druidColumn
operator|.
name|left
argument_list|,
name|druidColumn
operator|.
name|right
argument_list|,
name|uniqueExtractColumnName
argument_list|)
expr_stmt|;
name|usedFieldNames
operator|.
name|add
argument_list|(
name|uniqueExtractColumnName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// CASE it is Expression
specifier|final
name|String
name|expression
init|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|project
argument_list|,
name|inputRowType
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|expression
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|name
init|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
literal|"vc"
argument_list|,
name|usedFieldNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
decl_stmt|;
name|VirtualColumn
name|vc
init|=
operator|new
name|VirtualColumn
argument_list|(
name|name
argument_list|,
name|expression
argument_list|,
name|DruidExpressions
operator|.
name|EXPRESSION_TYPES
operator|.
name|get
argument_list|(
name|project
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|virtualColumnList
operator|.
name|add
argument_list|(
name|vc
argument_list|)
expr_stmt|;
name|dimensionSpec
operator|=
operator|new
name|DefaultDimensionSpec
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
name|DruidExpressions
operator|.
name|EXPRESSION_TYPES
operator|.
name|get
argument_list|(
name|project
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|usedFieldNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|dimensionSpecList
operator|.
name|add
argument_list|(
name|dimensionSpec
argument_list|)
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|dimensionSpecList
argument_list|,
name|virtualColumnList
argument_list|)
return|;
block|}
comment|/**    * Translates aggregate calls to Druid {@link JsonAggregation}s when    * possible.    *    * @param aggCalls List of AggregateCalls to translate    * @param aggNames List of aggregate names    * @param project Input project under the aggregate calls,    *               or null if we have {@link TableScan} immediately under the    *               {@link Aggregate}    * @param druidQuery Druid query    *    * @return List of valid Druid {@link JsonAggregation}s, or null if any of the    * aggregates is not supported    */
annotation|@
name|Nullable
specifier|protected
specifier|static
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|computeDruidJsonAgg
parameter_list|(
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
parameter_list|,
annotation|@
name|Nullable
name|Project
name|project
parameter_list|,
name|DruidQuery
name|druidQuery
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|String
argument_list|>
name|agg
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|aggNames
argument_list|)
control|)
block|{
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|final
name|String
name|expression
decl_stmt|;
specifier|final
name|AggregateCall
name|aggCall
init|=
name|agg
operator|.
name|left
decl_stmt|;
specifier|final
name|RexNode
name|filterNode
decl_stmt|;
comment|// Type check First
specifier|final
name|RelDataType
name|type
init|=
name|aggCall
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|SqlTypeName
name|sqlTypeName
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isNotAcceptedType
decl_stmt|;
if|if
condition|(
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
operator|||
name|SqlTypeFamily
operator|.
name|INTEGER
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
name|isNotAcceptedType
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|getScale
argument_list|()
operator|==
literal|0
operator|||
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|approximateDecimal
argument_list|()
operator|)
condition|)
block|{
comment|// Decimal, If scale is zero or we allow approximating decimal, we can proceed
name|isNotAcceptedType
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|isNotAcceptedType
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isNotAcceptedType
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Extract filters
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|aggCall
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|filterNode
operator|=
name|project
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filterNode
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fieldName
operator|=
literal|null
expr_stmt|;
name|expression
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|int
name|index
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
name|fieldName
operator|=
name|druidQuery
operator|.
name|table
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|expression
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|RexNode
name|rexNode
init|=
name|project
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|inputRowType
init|=
name|project
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
if|if
condition|(
name|rexNode
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|INPUT_REF
argument_list|)
condition|)
block|{
name|expression
operator|=
literal|null
expr_stmt|;
name|fieldName
operator|=
name|extractColumnName
argument_list|(
name|rexNode
argument_list|,
name|inputRowType
argument_list|,
name|druidQuery
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expression
operator|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|rexNode
argument_list|,
name|inputRowType
argument_list|,
name|druidQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|expression
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|fieldName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// One should be not null and the other should be null.
assert|assert
name|expression
operator|==
literal|null
operator|^
name|fieldName
operator|==
literal|null
assert|;
block|}
specifier|final
name|JsonAggregation
name|jsonAggregation
init|=
name|getJsonAggregation
argument_list|(
name|agg
operator|.
name|right
argument_list|,
name|agg
operator|.
name|left
argument_list|,
name|filterNode
argument_list|,
name|fieldName
argument_list|,
name|expression
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonAggregation
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|aggregations
operator|.
name|add
argument_list|(
name|jsonAggregation
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregations
return|;
block|}
specifier|protected
name|QuerySpec
name|getQuery
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|Project
name|project
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|collationIndexes
parameter_list|,
name|List
argument_list|<
name|Direction
argument_list|>
name|collationDirections
parameter_list|,
name|ImmutableBitSet
name|numericCollationIndexes
parameter_list|,
name|Integer
name|fetch
parameter_list|,
name|Project
name|postProject
parameter_list|,
name|Filter
name|havingFilter
parameter_list|)
block|{
comment|// Handle filter
specifier|final
name|DruidJsonFilter
name|jsonFilter
init|=
name|computeFilter
argument_list|(
name|filter
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupSet
operator|==
literal|null
condition|)
block|{
comment|// It is Scan Query since no Grouping
assert|assert
name|aggCalls
operator|==
literal|null
assert|;
assert|assert
name|aggNames
operator|==
literal|null
assert|;
assert|assert
name|collationIndexes
operator|==
literal|null
operator|||
name|collationIndexes
operator|.
name|isEmpty
argument_list|()
assert|;
assert|assert
name|collationDirections
operator|==
literal|null
operator|||
name|collationDirections
operator|.
name|isEmpty
argument_list|()
assert|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|scanColumnNames
decl_stmt|;
specifier|final
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|project
operator|!=
literal|null
condition|)
block|{
comment|// project some fields only
name|Pair
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|>
name|projectResult
init|=
name|computeProjectAsScan
argument_list|(
name|project
argument_list|,
name|project
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|scanColumnNames
operator|=
name|projectResult
operator|.
name|left
expr_stmt|;
name|virtualColumnList
operator|.
name|addAll
argument_list|(
name|projectResult
operator|.
name|right
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Scan all the fields
name|scanColumnNames
operator|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ScanQuery
name|scanQuery
init|=
operator|new
name|ScanQuery
argument_list|(
name|druidTable
operator|.
name|dataSource
argument_list|,
name|intervals
argument_list|,
name|jsonFilter
argument_list|,
name|virtualColumnList
argument_list|,
name|scanColumnNames
argument_list|,
name|fetch
argument_list|)
decl_stmt|;
return|return
operator|new
name|QuerySpec
argument_list|(
name|QueryType
operator|.
name|SCAN
argument_list|,
name|scanQuery
operator|.
name|toQuery
argument_list|()
argument_list|,
name|scanColumnNames
argument_list|)
return|;
block|}
comment|// At this Stage we have a valid Aggregate thus Query is one of Timeseries, TopN, or GroupBy
comment|// Handling aggregate and sort is more complex, since
comment|// we need to extract the conditions to know whether the query will be executed as a
comment|// Timeseries, TopN, or GroupBy in Druid
assert|assert
name|aggCalls
operator|!=
literal|null
assert|;
assert|assert
name|aggNames
operator|!=
literal|null
assert|;
assert|assert
name|aggCalls
operator|.
name|size
argument_list|()
operator|==
name|aggNames
operator|.
name|size
argument_list|()
assert|;
specifier|final
name|List
argument_list|<
name|JsonExpressionPostAgg
argument_list|>
name|postAggs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|JsonLimit
name|limit
decl_stmt|;
specifier|final
name|RelDataType
name|aggInputRowType
init|=
name|table
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|aggregateStageFieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|List
argument_list|<
name|DimensionSpec
argument_list|>
argument_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|>
name|projectGroupSet
init|=
name|computeProjectGroupSet
argument_list|(
name|project
argument_list|,
name|groupSet
argument_list|,
name|aggInputRowType
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DimensionSpec
argument_list|>
name|groupByKeyDims
init|=
name|projectGroupSet
operator|.
name|left
decl_stmt|;
specifier|final
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnList
init|=
name|projectGroupSet
operator|.
name|right
decl_stmt|;
for|for
control|(
name|DimensionSpec
name|dim
range|:
name|groupByKeyDims
control|)
block|{
name|aggregateStageFieldNames
operator|.
name|add
argument_list|(
name|dim
operator|.
name|getOutputName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|aggregations
init|=
name|computeDruidJsonAgg
argument_list|(
name|aggCalls
argument_list|,
name|aggNames
argument_list|,
name|project
argument_list|,
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|JsonAggregation
name|jsonAgg
range|:
name|aggregations
control|)
block|{
name|aggregateStageFieldNames
operator|.
name|add
argument_list|(
name|jsonAgg
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DruidJsonFilter
name|havingJsonFilter
decl_stmt|;
if|if
condition|(
name|havingFilter
operator|!=
literal|null
condition|)
block|{
name|havingJsonFilter
operator|=
name|DruidJsonFilter
operator|.
name|toDruidFilters
argument_list|(
name|havingFilter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|havingFilter
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|havingJsonFilter
operator|=
literal|null
expr_stmt|;
block|}
comment|// Then we handle projects after aggregates as Druid Post Aggregates
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|postAggregateStageFieldNames
decl_stmt|;
if|if
condition|(
name|postProject
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|postProjectDimListBuilder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|postAggInputRowType
init|=
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|Pair
operator|.
name|right
argument_list|(
name|postProject
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
argument_list|,
name|aggregateStageFieldNames
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|existingAggFieldsNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|aggregateStageFieldNames
argument_list|)
decl_stmt|;
comment|// this is an index of existing columns coming out aggregate layer. Will use this index to:
comment|// filter out any project down the road that doesn't change values e.g inputRef/identity cast
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|existingProjects
init|=
name|Maps
operator|.
name|uniqueIndex
argument_list|(
name|aggregateStageFieldNames
argument_list|,
name|DruidExpressions
operator|::
name|fromColumn
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|postProject
operator|.
name|getNamedProjects
argument_list|()
control|)
block|{
specifier|final
name|RexNode
name|postProjectRexNode
init|=
name|pair
operator|.
name|left
decl_stmt|;
name|String
name|expression
init|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|postProjectRexNode
argument_list|,
name|postAggInputRowType
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|final
name|String
name|existingFieldName
init|=
name|existingProjects
operator|.
name|get
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingFieldName
operator|!=
literal|null
condition|)
block|{
comment|// simple input ref or Druid runtime identity cast will skip it, since it is here already
name|postProjectDimListBuilder
operator|.
name|add
argument_list|(
name|existingFieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|uniquelyProjectFieldName
init|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|existingAggFieldsNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
decl_stmt|;
name|postAggs
operator|.
name|add
argument_list|(
operator|new
name|JsonExpressionPostAgg
argument_list|(
name|uniquelyProjectFieldName
argument_list|,
name|expression
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|postProjectDimListBuilder
operator|.
name|add
argument_list|(
name|uniquelyProjectFieldName
argument_list|)
expr_stmt|;
name|existingAggFieldsNames
operator|.
name|add
argument_list|(
name|uniquelyProjectFieldName
argument_list|)
expr_stmt|;
block|}
block|}
name|postAggregateStageFieldNames
operator|=
name|postProjectDimListBuilder
expr_stmt|;
block|}
else|else
block|{
name|postAggregateStageFieldNames
operator|=
literal|null
expr_stmt|;
block|}
comment|// final Query output row field names.
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|queryOutputFieldNames
init|=
name|postAggregateStageFieldNames
operator|==
literal|null
condition|?
name|aggregateStageFieldNames
else|:
name|postAggregateStageFieldNames
decl_stmt|;
comment|// handle sort all together
name|limit
operator|=
name|computeSort
argument_list|(
name|fetch
argument_list|,
name|collationIndexes
argument_list|,
name|collationDirections
argument_list|,
name|numericCollationIndexes
argument_list|,
name|queryOutputFieldNames
argument_list|)
expr_stmt|;
specifier|final
name|String
name|timeSeriesQueryString
init|=
name|planAsTimeSeries
argument_list|(
name|groupByKeyDims
argument_list|,
name|jsonFilter
argument_list|,
name|virtualColumnList
argument_list|,
name|aggregations
argument_list|,
name|postAggs
argument_list|,
name|limit
argument_list|,
name|havingJsonFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeSeriesQueryString
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|timeExtractColumn
init|=
name|groupByKeyDims
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|groupByKeyDims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputName
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeExtractColumn
operator|!=
literal|null
condition|)
block|{
comment|// Case we have transformed the group by time to druid timeseries with Granularity.
comment|// Need to replace the name of the column with druid timestamp field name.
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|timeseriesFieldNames
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|queryOutputFieldNames
argument_list|,
name|input
lambda|->
block|{
if|if
condition|(
name|timeExtractColumn
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
literal|"timestamp"
return|;
block|}
return|return
name|input
return|;
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|QuerySpec
argument_list|(
name|QueryType
operator|.
name|TIMESERIES
argument_list|,
name|timeSeriesQueryString
argument_list|,
name|timeseriesFieldNames
argument_list|)
return|;
block|}
return|return
operator|new
name|QuerySpec
argument_list|(
name|QueryType
operator|.
name|TIMESERIES
argument_list|,
name|timeSeriesQueryString
argument_list|,
name|queryOutputFieldNames
argument_list|)
return|;
block|}
specifier|final
name|String
name|topNQuery
init|=
name|planAsTopN
argument_list|(
name|groupByKeyDims
argument_list|,
name|jsonFilter
argument_list|,
name|virtualColumnList
argument_list|,
name|aggregations
argument_list|,
name|postAggs
argument_list|,
name|limit
argument_list|,
name|havingJsonFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|topNQuery
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|QuerySpec
argument_list|(
name|QueryType
operator|.
name|TOP_N
argument_list|,
name|topNQuery
argument_list|,
name|queryOutputFieldNames
argument_list|)
return|;
block|}
specifier|final
name|String
name|groupByQuery
init|=
name|planAsGroupBy
argument_list|(
name|groupByKeyDims
argument_list|,
name|jsonFilter
argument_list|,
name|virtualColumnList
argument_list|,
name|aggregations
argument_list|,
name|postAggs
argument_list|,
name|limit
argument_list|,
name|havingJsonFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupByQuery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot plan Druid Query"
argument_list|)
throw|;
block|}
return|return
operator|new
name|QuerySpec
argument_list|(
name|QueryType
operator|.
name|GROUP_BY
argument_list|,
name|groupByQuery
argument_list|,
name|queryOutputFieldNames
argument_list|)
return|;
block|}
comment|/**    * Converts a sort specification to a {@link JsonLimit} (never null).    *    * @param fetch limit to fetch    * @param collationIndexes index of fields as listed in query row output    * @param collationDirections direction of sort    * @param numericCollationIndexes flag of to determine sort comparator    * @param queryOutputFieldNames query output fields    */
specifier|private
annotation|@
name|Nonnull
name|JsonLimit
name|computeSort
parameter_list|(
annotation|@
name|Nullable
name|Integer
name|fetch
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|collationIndexes
parameter_list|,
name|List
argument_list|<
name|Direction
argument_list|>
name|collationDirections
parameter_list|,
name|ImmutableBitSet
name|numericCollationIndexes
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|queryOutputFieldNames
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|JsonCollation
argument_list|>
name|collations
decl_stmt|;
if|if
condition|(
name|collationIndexes
operator|!=
literal|null
condition|)
block|{
assert|assert
name|collationDirections
operator|!=
literal|null
assert|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonCollation
argument_list|>
name|colBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Direction
argument_list|>
name|p
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|collationIndexes
argument_list|,
name|collationDirections
argument_list|)
control|)
block|{
specifier|final
name|String
name|dimensionOrder
init|=
name|numericCollationIndexes
operator|.
name|get
argument_list|(
name|p
operator|.
name|left
argument_list|)
condition|?
literal|"numeric"
else|:
literal|"lexicographic"
decl_stmt|;
name|colBuilder
operator|.
name|add
argument_list|(
operator|new
name|JsonCollation
argument_list|(
name|queryOutputFieldNames
operator|.
name|get
argument_list|(
name|p
operator|.
name|left
argument_list|)
argument_list|,
name|p
operator|.
name|right
operator|==
name|Direction
operator|.
name|DESCENDING
condition|?
literal|"descending"
else|:
literal|"ascending"
argument_list|,
name|dimensionOrder
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|collations
operator|=
name|colBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|collations
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|JsonLimit
argument_list|(
literal|"default"
argument_list|,
name|fetch
argument_list|,
name|collations
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|planAsTimeSeries
parameter_list|(
name|List
argument_list|<
name|DimensionSpec
argument_list|>
name|groupByKeyDims
parameter_list|,
name|DruidJsonFilter
name|jsonFilter
parameter_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnList
parameter_list|,
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|aggregations
parameter_list|,
name|List
argument_list|<
name|JsonExpressionPostAgg
argument_list|>
name|postAggregations
parameter_list|,
name|JsonLimit
name|limit
parameter_list|,
name|DruidJsonFilter
name|havingFilter
parameter_list|)
block|{
if|if
condition|(
name|havingFilter
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|groupByKeyDims
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|limit
operator|.
name|limit
operator|!=
literal|null
condition|)
block|{
comment|// it has a limit not supported by time series
return|return
literal|null
return|;
block|}
if|if
condition|(
name|limit
operator|.
name|collations
operator|!=
literal|null
operator|&&
name|limit
operator|.
name|collations
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// it has multiple sort columns
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|sortDirection
decl_stmt|;
if|if
condition|(
name|limit
operator|.
name|collations
operator|!=
literal|null
operator|&&
name|limit
operator|.
name|collations
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|groupByKeyDims
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|limit
operator|.
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|dimension
operator|.
name|equals
argument_list|(
name|groupByKeyDims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputName
argument_list|()
argument_list|)
condition|)
block|{
comment|// sort column is not time column
return|return
literal|null
return|;
block|}
name|sortDirection
operator|=
name|limit
operator|.
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|direction
expr_stmt|;
block|}
else|else
block|{
name|sortDirection
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|Granularity
name|timeseriesGranularity
decl_stmt|;
if|if
condition|(
name|groupByKeyDims
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|DimensionSpec
name|dimensionSpec
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|groupByKeyDims
argument_list|)
decl_stmt|;
name|Granularity
name|granularity
init|=
name|ExtractionDimensionSpec
operator|.
name|toQueryGranularity
argument_list|(
name|dimensionSpec
argument_list|)
decl_stmt|;
comment|// case we have project expression on the top of the time extract then
comment|// cannot use timeseries
name|boolean
name|hasExpressionOnTopOfTimeExtract
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JsonExpressionPostAgg
name|postAgg
range|:
name|postAggregations
control|)
block|{
if|if
condition|(
name|postAgg
operator|instanceof
name|JsonExpressionPostAgg
condition|)
block|{
if|if
condition|(
name|postAgg
operator|.
name|expression
operator|.
name|contains
argument_list|(
name|groupByKeyDims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputName
argument_list|()
argument_list|)
condition|)
block|{
name|hasExpressionOnTopOfTimeExtract
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|timeseriesGranularity
operator|=
name|hasExpressionOnTopOfTimeExtract
condition|?
literal|null
else|:
name|granularity
expr_stmt|;
if|if
condition|(
name|timeseriesGranularity
operator|==
literal|null
condition|)
block|{
comment|// cannot extract granularity bailout
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|timeseriesGranularity
operator|=
name|Granularities
operator|.
name|all
argument_list|()
expr_stmt|;
block|}
specifier|final
name|boolean
name|skipEmptyBuckets
init|=
name|Granularities
operator|.
name|all
argument_list|()
operator|!=
name|timeseriesGranularity
decl_stmt|;
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"timeseries"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"descending"
argument_list|,
name|sortDirection
operator|!=
literal|null
operator|&&
name|sortDirection
operator|.
name|equals
argument_list|(
literal|"descending"
argument_list|)
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"granularity"
argument_list|,
name|timeseriesGranularity
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"virtualColumns"
argument_list|,
name|virtualColumnList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|virtualColumnList
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
name|postAggregations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|postAggregations
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
comment|// The following field is necessary to conform with SQL semantics (CALCITE-1589)
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
comment|// Count(*) returns 0 if result set is empty thus need to set skipEmptyBuckets to false
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"skipEmptyBuckets"
argument_list|,
name|skipEmptyBuckets
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|planAsTopN
parameter_list|(
name|List
argument_list|<
name|DimensionSpec
argument_list|>
name|groupByKeyDims
parameter_list|,
name|DruidJsonFilter
name|jsonFilter
parameter_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnList
parameter_list|,
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|aggregations
parameter_list|,
name|List
argument_list|<
name|JsonExpressionPostAgg
argument_list|>
name|postAggregations
parameter_list|,
name|JsonLimit
name|limit
parameter_list|,
name|DruidJsonFilter
name|havingFilter
parameter_list|)
block|{
if|if
condition|(
name|havingFilter
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|getConnectionConfig
argument_list|()
operator|.
name|approximateTopN
argument_list|()
operator|||
name|groupByKeyDims
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|limit
operator|.
name|limit
operator|==
literal|null
operator|||
name|limit
operator|.
name|collations
operator|==
literal|null
operator|||
name|limit
operator|.
name|collations
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|limit
operator|.
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|dimension
operator|.
name|equals
argument_list|(
name|groupByKeyDims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|limit
operator|.
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|direction
operator|.
name|equals
argument_list|(
literal|"ascending"
argument_list|)
condition|)
block|{
comment|// Only DESC is allowed
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|topNMetricColumnName
init|=
name|limit
operator|.
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|dimension
decl_stmt|;
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"topN"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"granularity"
argument_list|,
name|Granularities
operator|.
name|all
argument_list|()
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimension"
argument_list|,
name|groupByKeyDims
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"virtualColumns"
argument_list|,
name|virtualColumnList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|virtualColumnList
else|:
literal|null
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"metric"
argument_list|,
name|topNMetricColumnName
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
name|postAggregations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|postAggregations
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
literal|"threshold"
argument_list|,
name|limit
operator|.
name|limit
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|planAsGroupBy
parameter_list|(
name|List
argument_list|<
name|DimensionSpec
argument_list|>
name|groupByKeyDims
parameter_list|,
name|DruidJsonFilter
name|jsonFilter
parameter_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnList
parameter_list|,
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|aggregations
parameter_list|,
name|List
argument_list|<
name|JsonExpressionPostAgg
argument_list|>
name|postAggregations
parameter_list|,
name|JsonLimit
name|limit
parameter_list|,
name|DruidJsonFilter
name|havingFilter
parameter_list|)
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"groupBy"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"granularity"
argument_list|,
name|Granularities
operator|.
name|all
argument_list|()
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimensions"
argument_list|,
name|groupByKeyDims
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"virtualColumns"
argument_list|,
name|virtualColumnList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|virtualColumnList
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"limitSpec"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
name|postAggregations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|postAggregations
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"having"
argument_list|,
name|havingFilter
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|DruidJsonFilter
operator|.
name|JsonDimHavingFilter
argument_list|(
name|havingFilter
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Druid Scan Query body. */
specifier|private
specifier|static
class|class
name|ScanQuery
block|{
specifier|private
name|String
name|dataSource
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
decl_stmt|;
specifier|private
name|DruidJsonFilter
name|jsonFilter
decl_stmt|;
specifier|private
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnList
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|Integer
name|fetchLimit
decl_stmt|;
name|ScanQuery
parameter_list|(
name|String
name|dataSource
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|DruidJsonFilter
name|jsonFilter
parameter_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualColumnList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|Integer
name|fetchLimit
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
name|this
operator|.
name|intervals
operator|=
name|intervals
expr_stmt|;
name|this
operator|.
name|jsonFilter
operator|=
name|jsonFilter
expr_stmt|;
name|this
operator|.
name|virtualColumnList
operator|=
name|virtualColumnList
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|fetchLimit
operator|=
name|fetchLimit
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|toQuery
parameter_list|()
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"scan"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"virtualColumns"
argument_list|,
name|virtualColumnList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|virtualColumnList
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"columns"
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"resultFormat"
argument_list|,
literal|"compactedList"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchLimit
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNumberField
argument_list|(
literal|"limit"
argument_list|,
name|fetchLimit
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Nullable
specifier|private
specifier|static
name|JsonAggregation
name|getJsonAggregation
parameter_list|(
name|String
name|name
parameter_list|,
name|AggregateCall
name|aggCall
parameter_list|,
name|RexNode
name|filterNode
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|aggExpression
parameter_list|,
name|DruidQuery
name|druidQuery
parameter_list|)
block|{
specifier|final
name|boolean
name|fractional
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|aggCall
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|SqlTypeName
name|sqlTypeName
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
specifier|final
name|JsonAggregation
name|aggregation
decl_stmt|;
specifier|final
name|CalciteConnectionConfig
name|config
init|=
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
name|fractional
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|SqlTypeFamily
operator|.
name|INTEGER
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
name|fractional
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
comment|// Decimal
assert|assert
name|sqlTypeName
operator|==
name|SqlTypeName
operator|.
name|DECIMAL
assert|;
if|if
condition|(
name|type
operator|.
name|getScale
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fractional
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fractional
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Cannot handle this aggregate function type
return|return
literal|null
return|;
block|}
comment|// Convert from a complex metric
name|ComplexMetric
name|complexMetric
init|=
name|druidQuery
operator|.
name|druidTable
operator|.
name|resolveComplexMetric
argument_list|(
name|fieldName
argument_list|,
name|aggCall
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|COUNT
case|:
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isApproximate
argument_list|()
operator|||
name|config
operator|.
name|approximateDistinctCount
argument_list|()
condition|)
block|{
if|if
condition|(
name|complexMetric
operator|==
literal|null
condition|)
block|{
name|aggregation
operator|=
operator|new
name|JsonCardinalityAggregation
argument_list|(
literal|"cardinality"
argument_list|,
name|name
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
name|complexMetric
operator|.
name|getMetricType
argument_list|()
argument_list|,
name|name
argument_list|,
name|complexMetric
operator|.
name|getMetricName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
comment|// when approximate results were not told be acceptable.
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
comment|// case we have count(column) push it as count(*) where column is not null
specifier|final
name|DruidJsonFilter
name|matchNulls
decl_stmt|;
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
name|matchNulls
operator|=
operator|new
name|DruidJsonFilter
operator|.
name|JsonExpressionFilter
argument_list|(
name|aggExpression
operator|+
literal|" == null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matchNulls
operator|=
name|DruidJsonFilter
operator|.
name|getSelectorFilter
argument_list|(
name|fieldName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|aggregation
operator|=
operator|new
name|JsonFilteredAggregation
argument_list|(
name|DruidJsonFilter
operator|.
name|toNotDruidFilter
argument_list|(
name|matchNulls
argument_list|)
argument_list|,
operator|new
name|JsonAggregation
argument_list|(
literal|"count"
argument_list|,
name|name
argument_list|,
name|fieldName
argument_list|,
name|aggExpression
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
literal|"count"
argument_list|,
name|name
argument_list|,
name|fieldName
argument_list|,
name|aggExpression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregation
operator|=
literal|null
expr_stmt|;
block|}
break|break;
case|case
name|SUM
case|:
case|case
name|SUM0
case|:
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
name|fractional
condition|?
literal|"doubleSum"
else|:
literal|"longSum"
argument_list|,
name|name
argument_list|,
name|fieldName
argument_list|,
name|aggExpression
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIN
case|:
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
name|fractional
condition|?
literal|"doubleMin"
else|:
literal|"longMin"
argument_list|,
name|name
argument_list|,
name|fieldName
argument_list|,
name|aggExpression
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
name|fractional
condition|?
literal|"doubleMax"
else|:
literal|"longMax"
argument_list|,
name|name
argument_list|,
name|fieldName
argument_list|,
name|aggExpression
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
if|if
condition|(
name|aggregation
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// translate filters
if|if
condition|(
name|filterNode
operator|!=
literal|null
condition|)
block|{
name|DruidJsonFilter
name|druidFilter
init|=
name|DruidJsonFilter
operator|.
name|toDruidFilters
argument_list|(
name|filterNode
argument_list|,
name|druidQuery
operator|.
name|table
operator|.
name|getRowType
argument_list|()
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|druidFilter
operator|==
literal|null
condition|)
block|{
comment|// cannot translate filter
return|return
literal|null
return|;
block|}
return|return
operator|new
name|JsonFilteredAggregation
argument_list|(
name|druidFilter
argument_list|,
name|aggregation
argument_list|)
return|;
block|}
return|return
name|aggregation
return|;
block|}
specifier|protected
specifier|static
name|void
name|writeField
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|generator
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|writeFieldIf
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|writeField
argument_list|(
name|generator
argument_list|,
name|fieldName
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|writeArray
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
name|writeObject
argument_list|(
name|generator
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|writeObject
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Interval
condition|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Integer
condition|)
block|{
name|Integer
name|i
init|=
operator|(
name|Integer
operator|)
name|o
decl_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|writeArray
argument_list|(
name|generator
argument_list|,
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|DruidJson
condition|)
block|{
operator|(
operator|(
name|DruidJson
operator|)
name|o
operator|)
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a json object: "
operator|+
name|o
argument_list|)
throw|;
block|}
block|}
comment|/** Generates a JSON string to query metadata about a data source. */
specifier|static
name|String
name|metadataQuery
parameter_list|(
name|String
name|dataSourceName
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|)
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"segmentMetadata"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSourceName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"merge"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"lenientAggregatorMerge"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeArrayFieldStart
argument_list|(
literal|"analysisTypes"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
literal|"aggregators"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Druid query specification. */
specifier|public
specifier|static
class|class
name|QuerySpec
block|{
specifier|final
name|QueryType
name|queryType
decl_stmt|;
specifier|final
name|String
name|queryString
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
name|QuerySpec
parameter_list|(
name|QueryType
name|queryType
parameter_list|,
name|String
name|queryString
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|queryType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|queryType
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryString
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|queryType
argument_list|,
name|queryString
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|QuerySpec
operator|&&
name|queryType
operator|==
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|queryType
operator|&&
name|queryString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|queryString
argument_list|)
operator|&&
name|fieldNames
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|fieldNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{queryType: "
operator|+
name|queryType
operator|+
literal|", queryString: "
operator|+
name|queryString
operator|+
literal|", fieldNames: "
operator|+
name|fieldNames
operator|+
literal|"}"
return|;
block|}
specifier|public
name|String
name|getQueryString
parameter_list|(
name|String
name|pagingIdentifier
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|pagingIdentifier
operator|==
literal|null
condition|)
block|{
return|return
name|queryString
return|;
block|}
return|return
name|queryString
operator|.
name|replace
argument_list|(
literal|"\"threshold\":"
argument_list|,
literal|"\"pagingIdentifiers\":{\""
operator|+
name|pagingIdentifier
operator|+
literal|"\":"
operator|+
name|offset
operator|+
literal|"},\"threshold\":"
argument_list|)
return|;
block|}
block|}
comment|/** Interpreter node that executes a Druid query and sends the results to a    * {@link Sink}. */
specifier|private
specifier|static
class|class
name|DruidQueryNode
implements|implements
name|Node
block|{
specifier|private
specifier|final
name|Sink
name|sink
decl_stmt|;
specifier|private
specifier|final
name|DruidQuery
name|query
decl_stmt|;
specifier|private
specifier|final
name|QuerySpec
name|querySpec
decl_stmt|;
name|DruidQueryNode
parameter_list|(
name|Compiler
name|interpreter
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|interpreter
operator|.
name|sink
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|querySpec
operator|=
name|query
operator|.
name|getQuerySpec
argument_list|()
expr_stmt|;
name|Hook
operator|.
name|QUERY_PLAN
operator|.
name|run
argument_list|(
name|querySpec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|List
argument_list|<
name|ColumnMetaData
operator|.
name|Rep
argument_list|>
name|fieldTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|query
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|getPrimitive
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DruidConnectionImpl
name|connection
init|=
operator|new
name|DruidConnectionImpl
argument_list|(
name|query
operator|.
name|druidTable
operator|.
name|schema
operator|.
name|url
argument_list|,
name|query
operator|.
name|druidTable
operator|.
name|schema
operator|.
name|coordinatorUrl
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|limitQuery
init|=
name|containsLimit
argument_list|(
name|querySpec
argument_list|)
decl_stmt|;
specifier|final
name|DruidConnectionImpl
operator|.
name|Page
name|page
init|=
operator|new
name|DruidConnectionImpl
operator|.
name|Page
argument_list|()
decl_stmt|;
do|do
block|{
specifier|final
name|String
name|queryString
init|=
name|querySpec
operator|.
name|getQueryString
argument_list|(
name|page
operator|.
name|pagingIdentifier
argument_list|,
name|page
operator|.
name|offset
argument_list|)
decl_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|querySpec
operator|.
name|queryType
argument_list|,
name|queryString
argument_list|,
name|sink
argument_list|,
name|querySpec
operator|.
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|limitQuery
operator|&&
name|page
operator|.
name|pagingIdentifier
operator|!=
literal|null
operator|&&
name|page
operator|.
name|totalRowCount
operator|>
literal|0
condition|)
do|;
block|}
specifier|private
specifier|static
name|boolean
name|containsLimit
parameter_list|(
name|QuerySpec
name|querySpec
parameter_list|)
block|{
return|return
name|querySpec
operator|.
name|queryString
operator|.
name|contains
argument_list|(
literal|"\"context\":{\""
operator|+
name|DRUID_QUERY_FETCH
operator|+
literal|"\":true"
argument_list|)
return|;
block|}
specifier|private
name|ColumnMetaData
operator|.
name|Rep
name|getPrimitive
parameter_list|(
name|RelDataTypeField
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
case|case
name|TIMESTAMP
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIMESTAMP
return|;
case|case
name|BIGINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|LONG
return|;
case|case
name|INTEGER
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|INTEGER
return|;
case|case
name|SMALLINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|SHORT
return|;
case|case
name|TINYINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BYTE
return|;
case|case
name|REAL
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|FLOAT
return|;
case|case
name|DOUBLE
case|:
case|case
name|FLOAT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|DOUBLE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/** Aggregation element of a Druid "groupBy" or "topN" query. */
specifier|private
specifier|static
class|class
name|JsonAggregation
implements|implements
name|DruidJson
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|final
name|String
name|expression
decl_stmt|;
specifier|private
name|JsonAggregation
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fieldName"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"expression"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Druid Json Expression post aggregate.    */
specifier|private
specifier|static
class|class
name|JsonExpressionPostAgg
extends|extends
name|JsonPostAggregation
block|{
specifier|private
specifier|final
name|String
name|expression
decl_stmt|;
specifier|private
specifier|final
name|String
name|ordering
decl_stmt|;
specifier|private
name|JsonExpressionPostAgg
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|expression
parameter_list|,
name|String
name|ordering
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"expression"
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|ordering
operator|=
name|ordering
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"expression"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"ordering"
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Collation element of a Druid "groupBy" query. */
specifier|private
specifier|static
class|class
name|JsonLimit
implements|implements
name|DruidJson
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|final
name|Integer
name|limit
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JsonCollation
argument_list|>
name|collations
decl_stmt|;
specifier|private
name|JsonLimit
parameter_list|(
name|String
name|type
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|List
argument_list|<
name|JsonCollation
argument_list|>
name|collations
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|collations
operator|=
name|collations
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"columns"
argument_list|,
name|collations
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Collation element of a Druid "groupBy" query. */
specifier|private
specifier|static
class|class
name|JsonCollation
implements|implements
name|DruidJson
block|{
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|final
name|String
name|direction
decl_stmt|;
specifier|final
name|String
name|dimensionOrder
decl_stmt|;
specifier|private
name|JsonCollation
parameter_list|(
name|String
name|dimension
parameter_list|,
name|String
name|direction
parameter_list|,
name|String
name|dimensionOrder
parameter_list|)
block|{
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
name|this
operator|.
name|dimensionOrder
operator|=
name|dimensionOrder
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"direction"
argument_list|,
name|direction
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"dimensionOrder"
argument_list|,
name|dimensionOrder
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Aggregation element that calls the "cardinality" function. */
specifier|private
specifier|static
class|class
name|JsonCardinalityAggregation
extends|extends
name|JsonAggregation
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
name|JsonCardinalityAggregation
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fieldNames"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Aggregation element that contains a filter. */
specifier|private
specifier|static
class|class
name|JsonFilteredAggregation
extends|extends
name|JsonAggregation
block|{
specifier|final
name|DruidJsonFilter
name|filter
decl_stmt|;
specifier|final
name|JsonAggregation
name|aggregation
decl_stmt|;
specifier|private
name|JsonFilteredAggregation
parameter_list|(
name|DruidJsonFilter
name|filter
parameter_list|,
name|JsonAggregation
name|aggregation
parameter_list|)
block|{
comment|// Filtered aggregations don't use the "name" and "fieldName" fields directly,
comment|// but rather use the ones defined in their "aggregation" field.
name|super
argument_list|(
literal|"filtered"
argument_list|,
name|aggregation
operator|.
name|name
argument_list|,
name|aggregation
operator|.
name|fieldName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|aggregation
operator|=
name|aggregation
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregator"
argument_list|,
name|aggregation
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Post-aggregator abstract writer. */
specifier|protected
specifier|abstract
specifier|static
class|class
name|JsonPostAggregation
implements|implements
name|DruidJson
block|{
specifier|final
name|String
name|type
decl_stmt|;
name|String
name|name
decl_stmt|;
specifier|private
name|JsonPostAggregation
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|// Expects all subclasses to write the EndObject item
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
comment|/** Returns the index of the timestamp ref, or -1 if not present. */
specifier|protected
name|int
name|getTimestampFieldIndex
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|indexOf
argument_list|(
name|this
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|,
name|input
lambda|->
name|druidTable
operator|.
name|timestampFieldName
operator|.
name|equals
argument_list|(
name|input
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

