begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|BindableRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Bindables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Interpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Sink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|AbstractRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Relational expression representing a scan of a Druid data set.  */
end_comment

begin_class
specifier|public
class|class
name|DruidQuery
extends|extends
name|AbstractRelNode
implements|implements
name|BindableRel
block|{
specifier|private
specifier|final
name|RelOptTable
name|table
decl_stmt|;
specifier|final
name|DruidTable
name|druidTable
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RelNode
argument_list|>
name|rels
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|VALID_SIG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"sf?p?a?"
argument_list|)
decl_stmt|;
comment|/**    * Creates a DruidQuery.    *    * @param cluster        Cluster    * @param traitSet       Traits    * @param table          Table    * @param druidTable     Druid table    * @param rels           Internal relational expressions    */
specifier|private
name|DruidQuery
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|druidTable
operator|=
name|druidTable
expr_stmt|;
name|this
operator|.
name|rels
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rels
argument_list|)
expr_stmt|;
assert|assert
name|isValid
argument_list|(
name|Litmus
operator|.
name|THROW
argument_list|)
assert|;
block|}
comment|/** Returns a string describing the operations inside this query.    *    *<p>For example, "sfa" means {@link TableScan} (s)    * followed by {@link Filter} (f)    * followed by {@link Aggregate} (a).    *    * @see #isValidSignature(String)    */
name|String
name|signature
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|rel
range|:
name|rels
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|rel
operator|instanceof
name|TableScan
condition|?
literal|'s'
else|:
name|rel
operator|instanceof
name|Project
condition|?
literal|'p'
else|:
name|rel
operator|instanceof
name|Filter
condition|?
literal|'f'
else|:
name|rel
operator|instanceof
name|Aggregate
condition|?
literal|'a'
else|:
literal|'!'
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|Litmus
name|litmus
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|isValid
argument_list|(
name|litmus
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|signature
init|=
name|signature
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isValidSignature
argument_list|(
name|signature
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"invalid signature [{}]"
argument_list|,
name|signature
argument_list|)
return|;
block|}
if|if
condition|(
name|rels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"must have at least one rel"
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelNode
name|r
init|=
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|TableScan
operator|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"first rel must be TableScan, was "
argument_list|,
name|r
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|.
name|getTable
argument_list|()
operator|!=
name|table
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"first rel must be based on table table"
argument_list|)
return|;
block|}
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|r
operator|.
name|getInputs
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputs
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
name|rels
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"each rel must have a single input"
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|aggregate
operator|.
name|indicator
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"no grouping sets"
argument_list|)
return|;
block|}
for|for
control|(
name|AggregateCall
name|call
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
if|if
condition|(
name|call
operator|.
name|filterArg
operator|>=
literal|0
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"no filtered aggregate functions"
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|r
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|(
name|Filter
operator|)
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|isValidFilter
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"invalid filter [{}]"
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
name|boolean
name|isValidFilter
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
case|case
name|LITERAL
case|:
return|return
literal|true
return|;
case|case
name|AND
case|:
case|case
name|OR
case|:
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|CAST
case|:
return|return
name|areValidFilters
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|areValidFilters
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|es
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|e
range|:
name|es
control|)
block|{
if|if
condition|(
operator|!
name|isValidFilter
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** Returns whether a signature represents an sequence of relational operators    * that can be translated into a valid Druid query. */
specifier|static
name|boolean
name|isValidSignature
parameter_list|(
name|String
name|signature
parameter_list|)
block|{
return|return
name|VALID_SIG
operator|.
name|matcher
argument_list|(
name|signature
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/** Creates a DruidQuery. */
specifier|static
name|DruidQuery
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
return|return
operator|new
name|DruidQuery
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|druidTable
argument_list|,
name|rels
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|.
name|getRowType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptTable
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
expr_stmt|;
for|for
control|(
name|RelNode
name|rel
range|:
name|rels
control|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|TableScan
condition|)
block|{
name|TableScan
name|tableScan
init|=
operator|(
name|TableScan
operator|)
name|rel
decl_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"table"
argument_list|,
name|tableScan
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Filter
condition|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"filter"
argument_list|,
operator|(
operator|(
name|Filter
operator|)
name|rel
operator|)
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Project
condition|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"projects"
argument_list|,
operator|(
operator|(
name|Project
operator|)
name|rel
operator|)
operator|.
name|getProjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rel
decl_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"groups"
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"aggs"
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"rel type not supported in Druid query "
operator|+
name|rel
argument_list|)
throw|;
block|}
block|}
return|return
name|pw
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|.1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
for|for
control|(
name|RelOptRule
name|rule
range|:
name|DruidRules
operator|.
name|RULES
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RelOptRule
name|rule
range|:
name|Bindables
operator|.
name|RULES
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|table
operator|.
name|unwrap
argument_list|(
name|ScannableTable
operator|.
name|class
argument_list|)
operator|.
name|scan
argument_list|(
name|dataContext
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|DruidQueryNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|private
name|QuerySpec
name|getQuerySpec
parameter_list|()
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|table
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|RexNode
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filterRel
init|=
operator|(
name|Filter
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|filter
operator|=
name|filterRel
operator|.
name|getCondition
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Project
condition|)
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|projects
operator|=
name|project
operator|.
name|getProjects
argument_list|()
expr_stmt|;
block|}
name|ImmutableBitSet
name|groupSet
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|groupSet
operator|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
expr_stmt|;
name|aggCalls
operator|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
expr_stmt|;
name|aggNames
operator|=
name|Util
operator|.
name|skip
argument_list|(
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|,
name|groupSet
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|rels
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"could not implement all rels"
argument_list|)
throw|;
block|}
return|return
name|getQuery
argument_list|(
name|rowType
argument_list|,
name|filter
argument_list|,
name|projects
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|,
name|aggNames
argument_list|)
return|;
block|}
specifier|private
name|QuerySpec
name|getQuery
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RexNode
name|filter
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
parameter_list|)
block|{
name|QueryType
name|queryType
init|=
name|QueryType
operator|.
name|SELECT
decl_stmt|;
specifier|final
name|Translator
name|translator
init|=
operator|new
name|Translator
argument_list|(
name|druidTable
argument_list|,
name|rowType
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|Json
name|jsonFilter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|jsonFilter
operator|=
name|translator
operator|.
name|translateFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|translator
operator|.
name|metrics
operator|.
name|clear
argument_list|()
expr_stmt|;
name|translator
operator|.
name|dimensions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|project
range|:
name|projects
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dimensions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupSet
operator|!=
literal|null
condition|)
block|{
assert|assert
name|aggCalls
operator|!=
literal|null
assert|;
assert|assert
name|aggNames
operator|!=
literal|null
assert|;
assert|assert
name|aggCalls
operator|.
name|size
argument_list|()
operator|==
name|aggNames
operator|.
name|size
argument_list|()
assert|;
name|queryType
operator|=
name|QueryType
operator|.
name|GROUP_BY
expr_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|groupKey
range|:
name|groupSet
control|)
block|{
specifier|final
name|String
name|s
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|groupKey
argument_list|)
decl_stmt|;
name|dimensions
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|String
argument_list|>
name|agg
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|aggNames
argument_list|)
control|)
block|{
specifier|final
name|JsonAggregation
name|jsonAggregation
init|=
name|getJsonAggregation
argument_list|(
name|fieldNames
argument_list|,
name|agg
operator|.
name|right
argument_list|,
name|agg
operator|.
name|left
argument_list|)
decl_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
name|jsonAggregation
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|jsonAggregation
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|aggCalls
operator|==
literal|null
assert|;
assert|assert
name|aggNames
operator|==
literal|null
assert|;
block|}
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|queryType
condition|)
block|{
case|case
name|GROUP_BY
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|aggregations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Druid requires at least one aggregation, otherwise gives:
comment|//   Must have at least one AggregatorFactory
name|aggregations
operator|.
name|add
argument_list|(
operator|new
name|JsonAggregation
argument_list|(
literal|"longSum"
argument_list|,
literal|"unit_sales"
argument_list|,
literal|"unit_sales"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"groupBy"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimensions"
argument_list|,
name|dimensions
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"limitSpec"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|druidTable
operator|.
name|intervals
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"having"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"select"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"descending"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|druidTable
operator|.
name|intervals
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimensions"
argument_list|,
name|translator
operator|.
name|dimensions
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"metrics"
argument_list|,
name|translator
operator|.
name|metrics
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"pagingSpec"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
specifier|final
name|int
name|fetch
init|=
name|CalciteConnectionProperty
operator|.
name|DRUID_FETCH
operator|.
name|wrap
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
literal|"threshold"
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown query type "
operator|+
name|queryType
argument_list|)
throw|;
block|}
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QuerySpec
argument_list|(
name|queryType
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|private
name|JsonAggregation
name|getJsonAggregation
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|String
name|name
parameter_list|,
name|AggregateCall
name|aggCall
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|arg
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|only
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|list
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|b
init|=
name|aggCall
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|DOUBLE
decl_stmt|;
switch|switch
condition|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|COUNT
case|:
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
return|return
operator|new
name|JsonCardinalityAggregation
argument_list|(
literal|"cardinality"
argument_list|,
name|name
argument_list|,
name|list
argument_list|)
return|;
block|}
return|return
operator|new
name|JsonAggregation
argument_list|(
literal|"count"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
return|;
case|case
name|SUM
case|:
case|case
name|SUM0
case|:
return|return
operator|new
name|JsonAggregation
argument_list|(
name|b
condition|?
literal|"doubleSum"
else|:
literal|"longSum"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
return|;
case|case
name|MIN
case|:
return|return
operator|new
name|JsonAggregation
argument_list|(
name|b
condition|?
literal|"doubleMin"
else|:
literal|"longMin"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
return|;
case|case
name|MAX
case|:
return|return
operator|new
name|JsonAggregation
argument_list|(
name|b
condition|?
literal|"doubleMax"
else|:
literal|"longMax"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown aggregate "
operator|+
name|aggCall
argument_list|)
throw|;
block|}
block|}
specifier|static
name|void
name|writeField
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|generator
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeFieldIf
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|writeField
argument_list|(
name|generator
argument_list|,
name|fieldName
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeArray
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
name|writeObject
argument_list|(
name|generator
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeObject
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|writeArray
argument_list|(
name|generator
argument_list|,
operator|(
name|List
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Json
condition|)
block|{
operator|(
operator|(
name|Json
operator|)
name|o
operator|)
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a json object: "
operator|+
name|o
argument_list|)
throw|;
block|}
block|}
specifier|static
name|boolean
name|canProjectAll
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|e
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|static
name|Pair
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|splitProjects
parameter_list|(
specifier|final
name|RexBuilder
name|rexBuilder
parameter_list|,
specifier|final
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
parameter_list|)
block|{
specifier|final
name|RelOptUtil
operator|.
name|InputReferencedVisitor
name|visitor
init|=
operator|new
name|RelOptUtil
operator|.
name|InputReferencedVisitor
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|visitor
operator|.
name|inputPosReferenced
operator|.
name|size
argument_list|()
operator|==
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
comment|// All inputs are referenced
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|belowNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|positions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|visitor
operator|.
name|inputPosReferenced
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|positions
control|)
block|{
name|belowNodes
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|input
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|aboveNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|nodes
control|)
block|{
name|aboveNodes
operator|.
name|add
argument_list|(
name|node
operator|.
name|accept
argument_list|(
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|ref
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|input
argument_list|,
name|positions
operator|.
name|indexOf
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|aboveNodes
argument_list|,
name|belowNodes
argument_list|)
return|;
block|}
comment|/** Generates a JSON string to query metadata about a data source. */
specifier|static
name|String
name|metadataQuery
parameter_list|(
name|String
name|dataSourceName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|intervals
parameter_list|)
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"segmentMetadata"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSourceName
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Druid query specification. */
specifier|public
specifier|static
class|class
name|QuerySpec
block|{
specifier|final
name|QueryType
name|queryType
decl_stmt|;
specifier|public
specifier|final
name|String
name|queryString
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
name|QuerySpec
parameter_list|(
name|QueryType
name|queryType
parameter_list|,
name|String
name|queryString
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|queryType
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|queryType
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryString
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|queryType
argument_list|,
name|queryString
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|QuerySpec
operator|&&
name|queryType
operator|==
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|queryType
operator|&&
name|queryString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|queryString
argument_list|)
operator|&&
name|fieldNames
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|fieldNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{queryType: "
operator|+
name|queryType
operator|+
literal|", queryString: "
operator|+
name|queryString
operator|+
literal|", fieldNames: "
operator|+
name|fieldNames
operator|+
literal|"}"
return|;
block|}
name|String
name|getQueryString
parameter_list|(
name|String
name|pagingIdentifier
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|pagingIdentifier
operator|==
literal|null
condition|)
block|{
return|return
name|queryString
return|;
block|}
return|return
name|queryString
operator|.
name|replace
argument_list|(
literal|"\"threshold\":"
argument_list|,
literal|"\"pagingIdentifiers\":{\""
operator|+
name|pagingIdentifier
operator|+
literal|"\":"
operator|+
name|offset
operator|+
literal|"},\"threshold\":"
argument_list|)
return|;
block|}
block|}
comment|/** Translates scalar expressions to Druid field references. */
specifier|private
specifier|static
class|class
name|Translator
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dimensions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|metrics
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|DruidTable
name|druidTable
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
name|Translator
parameter_list|(
name|DruidTable
name|druidTable
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
name|this
operator|.
name|druidTable
operator|=
name|druidTable
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
block|}
name|String
name|translate
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|e
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|druidTable
operator|.
name|metricFieldNames
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dimensions
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldName
return|;
case|case
name|CAST
case|:
return|return
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|)
return|;
case|case
name|LITERAL
case|:
return|return
operator|(
operator|(
name|RexLiteral
operator|)
name|e
operator|)
operator|.
name|getValue2
argument_list|()
operator|.
name|toString
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"invalid expression "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|JsonFilter
name|translateFilter
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
specifier|final
name|RexCall
name|call
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
operator|new
name|JsonSelector
argument_list|(
literal|"selector"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|)
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
return|return
operator|new
name|JsonCompositeFilter
argument_list|(
literal|"not"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|JsonSelector
argument_list|(
literal|"selector"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|)
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
operator|new
name|JsonBound
argument_list|(
literal|"bound"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|)
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
operator|new
name|JsonBound
argument_list|(
literal|"bound"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|)
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
operator|new
name|JsonBound
argument_list|(
literal|"bound"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
operator|new
name|JsonBound
argument_list|(
literal|"bound"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|AND
case|:
case|case
name|OR
case|:
case|case
name|NOT
case|:
name|call
operator|=
operator|(
name|RexCall
operator|)
name|e
expr_stmt|;
return|return
operator|new
name|JsonCompositeFilter
argument_list|(
name|e
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|translateFilters
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate filter: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|tr
parameter_list|(
name|RexNode
name|call
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|translate
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|call
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|JsonFilter
argument_list|>
name|translateFilters
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonFilter
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|translateFilter
argument_list|(
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/** Interpreter node that executes a Druid query and sends the results to a    * {@link Sink}. */
specifier|private
specifier|static
class|class
name|DruidQueryNode
implements|implements
name|Node
block|{
specifier|private
specifier|final
name|Sink
name|sink
decl_stmt|;
specifier|private
specifier|final
name|DruidQuery
name|query
decl_stmt|;
specifier|private
specifier|final
name|QuerySpec
name|querySpec
decl_stmt|;
name|DruidQueryNode
parameter_list|(
name|Interpreter
name|interpreter
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|interpreter
operator|.
name|sink
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|querySpec
operator|=
name|query
operator|.
name|getQuerySpec
argument_list|()
expr_stmt|;
name|Hook
operator|.
name|QUERY_PLAN
operator|.
name|run
argument_list|(
name|querySpec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
specifier|final
name|DruidConnectionImpl
name|connection
init|=
operator|new
name|DruidConnectionImpl
argument_list|(
name|query
operator|.
name|druidTable
operator|.
name|schema
operator|.
name|url
argument_list|,
name|query
operator|.
name|druidTable
operator|.
name|schema
operator|.
name|coordinatorUrl
argument_list|)
decl_stmt|;
specifier|final
name|DruidConnectionImpl
operator|.
name|Page
name|page
init|=
operator|new
name|DruidConnectionImpl
operator|.
name|Page
argument_list|()
decl_stmt|;
name|int
name|previousOffset
decl_stmt|;
do|do
block|{
name|previousOffset
operator|=
name|page
operator|.
name|offset
expr_stmt|;
specifier|final
name|String
name|queryString
init|=
name|querySpec
operator|.
name|getQueryString
argument_list|(
name|page
operator|.
name|pagingIdentifier
argument_list|,
name|page
operator|.
name|offset
argument_list|)
decl_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|querySpec
operator|.
name|queryType
argument_list|,
name|queryString
argument_list|,
name|sink
argument_list|,
name|querySpec
operator|.
name|fieldNames
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|page
operator|.
name|pagingIdentifier
operator|!=
literal|null
operator|&&
name|page
operator|.
name|offset
operator|>
name|previousOffset
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Object that knows how to write itself to a    * {@link com.fasterxml.jackson.core.JsonGenerator}. */
specifier|private
interface|interface
name|Json
block|{
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** Aggregation element of a Druid "groupBy" or "topN" query. */
specifier|private
specifier|static
class|class
name|JsonAggregation
implements|implements
name|Json
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|private
name|JsonAggregation
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fieldName"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Aggregation element that calls the "cardinality" function. */
specifier|private
specifier|static
class|class
name|JsonCardinalityAggregation
extends|extends
name|JsonAggregation
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
name|JsonCardinalityAggregation
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fieldNames"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Filter element of a Druid "groupBy" or "topN" query. */
specifier|private
specifier|abstract
specifier|static
class|class
name|JsonFilter
implements|implements
name|Json
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|private
name|JsonFilter
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
comment|/** Equality filter. */
specifier|private
specifier|static
class|class
name|JsonSelector
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
name|JsonSelector
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|dimension
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Bound filter. */
specifier|private
specifier|static
class|class
name|JsonBound
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|String
name|lower
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|lowerStrict
decl_stmt|;
specifier|private
specifier|final
name|String
name|upper
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|upperStrict
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|alphaNumeric
decl_stmt|;
specifier|private
name|JsonBound
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|dimension
parameter_list|,
name|String
name|lower
parameter_list|,
name|boolean
name|lowerStrict
parameter_list|,
name|String
name|upper
parameter_list|,
name|boolean
name|upperStrict
parameter_list|,
name|boolean
name|alphaNumeric
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|lower
operator|=
name|lower
expr_stmt|;
name|this
operator|.
name|lowerStrict
operator|=
name|lowerStrict
expr_stmt|;
name|this
operator|.
name|upper
operator|=
name|upper
expr_stmt|;
name|this
operator|.
name|upperStrict
operator|=
name|upperStrict
expr_stmt|;
name|this
operator|.
name|alphaNumeric
operator|=
name|alphaNumeric
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"lower"
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"lowerStrict"
argument_list|,
name|lowerStrict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"upper"
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"upperStrict"
argument_list|,
name|upperStrict
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"alphaNumeric"
argument_list|,
name|alphaNumeric
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Filter that combines other filters using a boolean operator. */
specifier|private
specifier|static
class|class
name|JsonCompositeFilter
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|JsonFilter
argument_list|>
name|fields
decl_stmt|;
specifier|private
name|JsonCompositeFilter
parameter_list|(
name|String
name|type
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|JsonFilter
argument_list|>
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
literal|"type"
condition|)
block|{
case|case
literal|"NOT"
case|:
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"field"
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End DruidQuery.java
end_comment

end_unit

