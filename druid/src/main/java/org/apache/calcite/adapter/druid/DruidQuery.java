begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|BindableRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Bindables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Interpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Sink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|AbstractRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
operator|.
name|INPUT_REF
import|;
end_import

begin_comment
comment|/**  * Relational expression representing a scan of a Druid data set.  */
end_comment

begin_class
specifier|public
class|class
name|DruidQuery
extends|extends
name|AbstractRelNode
implements|implements
name|BindableRel
block|{
specifier|protected
name|QuerySpec
name|querySpec
decl_stmt|;
specifier|final
name|RelOptTable
name|table
decl_stmt|;
specifier|final
name|DruidTable
name|druidTable
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|Interval
argument_list|>
name|intervals
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RelNode
argument_list|>
name|rels
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|VALID_SIG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"sf?p?(a?|ao)l?"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTRACT_COLUMN_NAME_PREFIX
init|=
literal|"extract"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLOOR_COLUMN_NAME_PREFIX
init|=
literal|"floor"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DRUID_QUERY_FETCH
init|=
literal|"druid.query.fetch"
decl_stmt|;
comment|/**    * Creates a DruidQuery.    *    * @param cluster        Cluster    * @param traitSet       Traits    * @param table          Table    * @param druidTable     Druid table    * @param intervals      Intervals for the query    * @param rels           Internal relational expressions    */
specifier|protected
name|DruidQuery
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|druidTable
operator|=
name|druidTable
expr_stmt|;
name|this
operator|.
name|intervals
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|intervals
argument_list|)
expr_stmt|;
name|this
operator|.
name|rels
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rels
argument_list|)
expr_stmt|;
assert|assert
name|isValid
argument_list|(
name|Litmus
operator|.
name|THROW
argument_list|,
literal|null
argument_list|)
assert|;
block|}
comment|/** Returns a string describing the operations inside this query.    *    *<p>For example, "sfpaol" means {@link TableScan} (s)    * followed by {@link Filter} (f)    * followed by {@link Project} (p)    * followed by {@link Aggregate} (a)    * followed by {@link Project} (o)    * followed by {@link Sort} (l).    *    * @see #isValidSignature(String)    */
name|String
name|signature
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|flag
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RelNode
name|rel
range|:
name|rels
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|rel
operator|instanceof
name|TableScan
condition|?
literal|'s'
else|:
operator|(
name|rel
operator|instanceof
name|Project
operator|&&
name|flag
operator|)
condition|?
literal|'o'
else|:
name|rel
operator|instanceof
name|Filter
condition|?
literal|'f'
else|:
name|rel
operator|instanceof
name|Aggregate
condition|?
literal|'a'
else|:
name|rel
operator|instanceof
name|Sort
condition|?
literal|'l'
else|:
name|rel
operator|instanceof
name|Project
condition|?
literal|'p'
else|:
literal|'!'
argument_list|)
expr_stmt|;
name|flag
operator|=
name|flag
operator|||
name|rel
operator|instanceof
name|Aggregate
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|Litmus
name|litmus
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|isValid
argument_list|(
name|litmus
argument_list|,
name|context
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|signature
init|=
name|signature
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isValidSignature
argument_list|(
name|signature
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"invalid signature [{}]"
argument_list|,
name|signature
argument_list|)
return|;
block|}
if|if
condition|(
name|rels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"must have at least one rel"
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelNode
name|r
init|=
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|TableScan
operator|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"first rel must be TableScan, was "
argument_list|,
name|r
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|.
name|getTable
argument_list|()
operator|!=
name|table
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"first rel must be based on table table"
argument_list|)
return|;
block|}
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|r
operator|.
name|getInputs
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputs
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
name|rels
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"each rel must have a single input"
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|aggregate
operator|.
name|indicator
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"no grouping sets"
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|r
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|(
name|Filter
operator|)
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|isValidFilter
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"invalid filter [{}]"
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|r
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|offset
operator|!=
literal|null
operator|&&
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|offset
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"offset not supported"
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isValidFilter
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|isValidFilter
argument_list|(
name|e
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isValidFilter
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|boolean
name|boundedComparator
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
return|return
literal|true
return|;
case|case
name|LITERAL
case|:
return|return
operator|(
operator|(
name|RexLiteral
operator|)
name|e
operator|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
return|;
case|case
name|AND
case|:
case|case
name|OR
case|:
case|case
name|NOT
case|:
case|case
name|IN
case|:
case|case
name|IS_NULL
case|:
case|case
name|IS_NOT_NULL
case|:
return|return
name|areValidFilters
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|BETWEEN
case|:
return|return
name|areValidFilters
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
case|case
name|CAST
case|:
return|return
name|isValidCast
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|boundedComparator
argument_list|)
return|;
case|case
name|EXTRACT
case|:
return|return
name|TimeExtractionFunction
operator|.
name|isValidTimeExtract
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|IS_TRUE
case|:
return|return
name|isValidFilter
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|boundedComparator
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|areValidFilters
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|es
parameter_list|,
name|boolean
name|boundedComparator
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|e
range|:
name|es
control|)
block|{
if|if
condition|(
operator|!
name|isValidFilter
argument_list|(
name|e
argument_list|,
name|boundedComparator
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isValidCast
parameter_list|(
name|RexCall
name|e
parameter_list|,
name|boolean
name|boundedComparator
parameter_list|)
block|{
assert|assert
name|e
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
assert|;
if|if
condition|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isA
argument_list|(
name|INPUT_REF
argument_list|)
operator|&&
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|CHARACTER
condition|)
block|{
comment|// CAST of input to character type
return|return
literal|true
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isA
argument_list|(
name|INPUT_REF
argument_list|)
operator|&&
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|NUMERIC
operator|&&
name|boundedComparator
condition|)
block|{
comment|// CAST of input to numeric type, it is part of a bounded comparison
return|return
literal|true
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
operator|&&
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|TIMESTAMP
condition|)
block|{
comment|// CAST of literal to timestamp type
return|return
literal|true
return|;
block|}
comment|// Currently other CAST operations cannot be pushed to Druid
return|return
literal|false
return|;
block|}
comment|/** Returns whether a signature represents an sequence of relational operators    * that can be translated into a valid Druid query. */
specifier|static
name|boolean
name|isValidSignature
parameter_list|(
name|String
name|signature
parameter_list|)
block|{
return|return
name|VALID_SIG
operator|.
name|matcher
argument_list|(
name|signature
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/** Creates a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
return|return
operator|new
name|DruidQuery
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|druidTable
argument_list|,
name|druidTable
operator|.
name|intervals
argument_list|,
name|rels
argument_list|)
return|;
block|}
comment|/** Creates a DruidQuery. */
specifier|private
specifier|static
name|DruidQuery
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
return|return
operator|new
name|DruidQuery
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|druidTable
argument_list|,
name|intervals
argument_list|,
name|rels
argument_list|)
return|;
block|}
comment|/** Extends a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|extendQuery
parameter_list|(
name|DruidQuery
name|query
parameter_list|,
name|RelNode
name|r
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelNode
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
return|return
name|DruidQuery
operator|.
name|create
argument_list|(
name|query
operator|.
name|getCluster
argument_list|()
argument_list|,
name|r
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|query
operator|.
name|getConvention
argument_list|()
argument_list|)
argument_list|,
name|query
operator|.
name|getTable
argument_list|()
argument_list|,
name|query
operator|.
name|druidTable
argument_list|,
name|query
operator|.
name|intervals
argument_list|,
name|builder
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|rels
argument_list|)
operator|.
name|add
argument_list|(
name|r
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Extends a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|extendQuery
parameter_list|(
name|DruidQuery
name|query
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|)
block|{
return|return
name|DruidQuery
operator|.
name|create
argument_list|(
name|query
operator|.
name|getCluster
argument_list|()
argument_list|,
name|query
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|query
operator|.
name|getTable
argument_list|()
argument_list|,
name|query
operator|.
name|druidTable
argument_list|,
name|intervals
argument_list|,
name|query
operator|.
name|rels
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|Pair
operator|.
name|right
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
argument_list|,
name|getQuerySpec
argument_list|()
operator|.
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
name|TableScan
name|getTableScan
parameter_list|()
block|{
return|return
operator|(
name|TableScan
operator|)
name|rels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|getTopNode
parameter_list|()
block|{
return|return
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptTable
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
specifier|public
name|DruidTable
name|getDruidTable
parameter_list|()
block|{
return|return
name|druidTable
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
for|for
control|(
name|RelNode
name|rel
range|:
name|rels
control|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|TableScan
condition|)
block|{
name|TableScan
name|tableScan
init|=
operator|(
name|TableScan
operator|)
name|rel
decl_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"table"
argument_list|,
name|tableScan
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Filter
condition|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"filter"
argument_list|,
operator|(
operator|(
name|Filter
operator|)
name|rel
operator|)
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Project
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Project
operator|)
name|rel
operator|)
operator|.
name|getInput
argument_list|()
operator|instanceof
name|Aggregate
condition|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"post_projects"
argument_list|,
operator|(
operator|(
name|Project
operator|)
name|rel
operator|)
operator|.
name|getProjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"projects"
argument_list|,
operator|(
operator|(
name|Project
operator|)
name|rel
operator|)
operator|.
name|getProjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rel
decl_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"groups"
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"aggs"
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rel
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelFieldCollation
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
control|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"sort"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|ord
operator|.
name|e
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Ord
argument_list|<
name|RelFieldCollation
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
control|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"dir"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|ord
operator|.
name|e
operator|.
name|shortString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|itemIf
argument_list|(
literal|"fetch"
argument_list|,
name|sort
operator|.
name|fetch
argument_list|,
name|sort
operator|.
name|fetch
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"rel type not supported in Druid query "
operator|+
name|rel
argument_list|)
throw|;
block|}
block|}
return|return
name|pw
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
comment|// Cost increases with the number of fields queried.
comment|// A plan returning 100 or more columns will have 2x the cost of a
comment|// plan returning 2 columns.
comment|// A plan where all extra columns are pruned will be preferred.
operator|.
name|multiplyBy
argument_list|(
name|RelMdUtil
operator|.
name|linear
argument_list|(
name|querySpec
operator|.
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
literal|1d
argument_list|,
literal|2d
argument_list|)
argument_list|)
operator|.
name|multiplyBy
argument_list|(
name|getQueryTypeCostMultiplier
argument_list|()
argument_list|)
comment|// a plan with sort pushed to druid is better than doing sort outside of druid
operator|.
name|multiplyBy
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|instanceof
name|Sort
condition|?
literal|0.1
else|:
literal|1.0
argument_list|)
return|;
block|}
specifier|private
name|double
name|getQueryTypeCostMultiplier
parameter_list|()
block|{
comment|// Cost of Select> GroupBy> Timeseries> TopN
switch|switch
condition|(
name|querySpec
operator|.
name|queryType
condition|)
block|{
case|case
name|SELECT
case|:
return|return
literal|.1
return|;
case|case
name|GROUP_BY
case|:
return|return
literal|.08
return|;
case|case
name|TIMESERIES
case|:
return|return
literal|.06
return|;
case|case
name|TOP_N
case|:
return|return
literal|.04
return|;
default|default:
return|return
literal|.2
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
for|for
control|(
name|RelOptRule
name|rule
range|:
name|DruidRules
operator|.
name|RULES
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RelOptRule
name|rule
range|:
name|Bindables
operator|.
name|RULES
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|table
operator|.
name|unwrap
argument_list|(
name|ScannableTable
operator|.
name|class
argument_list|)
operator|.
name|scan
argument_list|(
name|dataContext
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|DruidQueryNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|QuerySpec
name|getQuerySpec
parameter_list|()
block|{
if|if
condition|(
name|querySpec
operator|==
literal|null
condition|)
block|{
name|querySpec
operator|=
name|deriveQuerySpec
argument_list|()
expr_stmt|;
assert|assert
name|querySpec
operator|!=
literal|null
operator|:
name|this
assert|;
block|}
return|return
name|querySpec
return|;
block|}
specifier|protected
name|QuerySpec
name|deriveQuerySpec
parameter_list|()
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|table
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|RexNode
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filterRel
init|=
operator|(
name|Filter
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|filter
operator|=
name|filterRel
operator|.
name|getCondition
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Project
condition|)
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|projects
operator|=
name|project
operator|.
name|getProjects
argument_list|()
expr_stmt|;
block|}
name|ImmutableBitSet
name|groupSet
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|groupSet
operator|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
expr_stmt|;
name|aggCalls
operator|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
expr_stmt|;
name|aggNames
operator|=
name|Util
operator|.
name|skip
argument_list|(
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|,
name|groupSet
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Project
name|postProject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Project
condition|)
block|{
name|postProject
operator|=
operator|(
name|Project
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|collationIndexes
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Direction
argument_list|>
name|collationDirections
init|=
literal|null
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|numericCollationBitSetBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Integer
name|fetch
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|collationIndexes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|collationDirections
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|RelFieldCollation
name|fCol
range|:
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|collationIndexes
operator|.
name|add
argument_list|(
name|fCol
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
name|collationDirections
operator|.
name|add
argument_list|(
name|fCol
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sort
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|fCol
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|NUMERIC
condition|)
block|{
name|numericCollationBitSetBuilder
operator|.
name|set
argument_list|(
name|fCol
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fetch
operator|=
name|sort
operator|.
name|fetch
operator|!=
literal|null
condition|?
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|rels
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"could not implement all rels"
argument_list|)
throw|;
block|}
return|return
name|getQuery
argument_list|(
name|rowType
argument_list|,
name|filter
argument_list|,
name|projects
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|,
name|aggNames
argument_list|,
name|collationIndexes
argument_list|,
name|collationDirections
argument_list|,
name|numericCollationBitSetBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|fetch
argument_list|,
name|postProject
argument_list|)
return|;
block|}
specifier|public
name|QueryType
name|getQueryType
parameter_list|()
block|{
return|return
name|getQuerySpec
argument_list|()
operator|.
name|queryType
return|;
block|}
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|getQuerySpec
argument_list|()
operator|.
name|queryString
return|;
block|}
specifier|protected
name|CalciteConnectionConfig
name|getConnectionConfig
parameter_list|()
block|{
return|return
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|CalciteConnectionConfig
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|QuerySpec
name|getQuery
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RexNode
name|filter
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|collationIndexes
parameter_list|,
name|List
argument_list|<
name|Direction
argument_list|>
name|collationDirections
parameter_list|,
name|ImmutableBitSet
name|numericCollationIndexes
parameter_list|,
name|Integer
name|fetch
parameter_list|,
name|Project
name|postProject
parameter_list|)
block|{
specifier|final
name|CalciteConnectionConfig
name|config
init|=
name|getConnectionConfig
argument_list|()
decl_stmt|;
name|QueryType
name|queryType
init|=
name|QueryType
operator|.
name|SELECT
decl_stmt|;
specifier|final
name|Translator
name|translator
init|=
operator|new
name|Translator
argument_list|(
name|druidTable
argument_list|,
name|rowType
argument_list|,
name|config
operator|.
name|timeZone
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|usedFieldNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|fieldNames
argument_list|)
decl_stmt|;
comment|// Handle filter
name|Json
name|jsonFilter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|jsonFilter
operator|=
name|translator
operator|.
name|translateFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|// Then we handle project
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
name|translator
operator|.
name|clearFieldNameLists
argument_list|()
expr_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|project
range|:
name|projects
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
name|project
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|// Finally we handle aggregate and sort. Handling of these
comment|// operators is more complex, since we need to extract
comment|// the conditions to know whether the query will be
comment|// executed as a Timeseries, TopN, or GroupBy in Druid
specifier|final
name|List
argument_list|<
name|DimensionSpec
argument_list|>
name|dimensions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JsonPostAggregation
argument_list|>
name|postAggs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Granularity
name|finalGranularity
init|=
name|Granularity
operator|.
name|ALL
decl_stmt|;
name|Direction
name|timeSeriesDirection
init|=
literal|null
decl_stmt|;
name|JsonLimit
name|limit
init|=
literal|null
decl_stmt|;
name|TimeExtractionDimensionSpec
name|timeExtractionDimensionSpec
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|groupSet
operator|!=
literal|null
condition|)
block|{
assert|assert
name|aggCalls
operator|!=
literal|null
assert|;
assert|assert
name|aggNames
operator|!=
literal|null
assert|;
assert|assert
name|aggCalls
operator|.
name|size
argument_list|()
operator|==
name|aggNames
operator|.
name|size
argument_list|()
assert|;
name|int
name|timePositionIdx
init|=
operator|-
literal|1
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|groupKey
range|:
name|groupSet
control|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|groupKey
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|project
init|=
name|projects
operator|.
name|get
argument_list|(
name|groupKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|instanceof
name|RexInputRef
condition|)
block|{
comment|// Reference could be to the timestamp or druid dimension but no druid metric
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|project
decl_stmt|;
specifier|final
name|String
name|originalFieldName
init|=
name|druidTable
operator|.
name|getRowType
argument_list|(
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|originalFieldName
operator|.
name|equals
argument_list|(
name|druidTable
operator|.
name|timestampFieldName
argument_list|)
condition|)
block|{
name|finalGranularity
operator|=
name|Granularity
operator|.
name|ALL
expr_stmt|;
name|String
name|extractColumnName
init|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
name|EXTRACT_COLUMN_NAME_PREFIX
argument_list|,
name|usedFieldNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
decl_stmt|;
name|timeExtractionDimensionSpec
operator|=
name|TimeExtractionDimensionSpec
operator|.
name|makeFullTimeExtract
argument_list|(
name|extractColumnName
argument_list|,
name|config
operator|.
name|timeZone
argument_list|()
argument_list|)
expr_stmt|;
name|dimensions
operator|.
name|add
argument_list|(
name|timeExtractionDimensionSpec
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|extractColumnName
argument_list|)
expr_stmt|;
assert|assert
name|timePositionIdx
operator|==
operator|-
literal|1
assert|;
name|timePositionIdx
operator|=
name|groupKey
expr_stmt|;
block|}
else|else
block|{
name|dimensions
operator|.
name|add
argument_list|(
operator|new
name|DefaultDimensionSpec
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|project
operator|instanceof
name|RexCall
condition|)
block|{
comment|// Call, check if we should infer granularity
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|project
decl_stmt|;
specifier|final
name|Granularity
name|funcGranularity
init|=
name|DruidDateTimeUtils
operator|.
name|extractGranularity
argument_list|(
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|funcGranularity
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|extractColumnName
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EXTRACT
case|:
comment|// case extract field from time column
name|finalGranularity
operator|=
name|Granularity
operator|.
name|ALL
expr_stmt|;
name|extractColumnName
operator|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
name|EXTRACT_COLUMN_NAME_PREFIX
operator|+
literal|"_"
operator|+
name|funcGranularity
operator|.
name|value
argument_list|,
name|usedFieldNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
expr_stmt|;
name|timeExtractionDimensionSpec
operator|=
name|TimeExtractionDimensionSpec
operator|.
name|makeTimeExtract
argument_list|(
name|funcGranularity
argument_list|,
name|extractColumnName
argument_list|,
name|config
operator|.
name|timeZone
argument_list|()
argument_list|)
expr_stmt|;
name|dimensions
operator|.
name|add
argument_list|(
name|timeExtractionDimensionSpec
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|extractColumnName
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOOR
case|:
comment|// case floor time column
if|if
condition|(
name|groupSet
operator|.
name|cardinality
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// case we have more than 1 group by key -> then will have druid group by
name|extractColumnName
operator|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
name|FLOOR_COLUMN_NAME_PREFIX
operator|+
literal|"_"
operator|+
name|funcGranularity
operator|.
name|value
argument_list|,
name|usedFieldNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
expr_stmt|;
name|dimensions
operator|.
name|add
argument_list|(
name|TimeExtractionDimensionSpec
operator|.
name|makeTimeFloor
argument_list|(
name|funcGranularity
argument_list|,
name|extractColumnName
argument_list|,
name|config
operator|.
name|timeZone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|finalGranularity
operator|=
name|Granularity
operator|.
name|ALL
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|extractColumnName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// case timeseries we can not use extraction function
name|finalGranularity
operator|=
name|funcGranularity
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
assert|assert
name|timePositionIdx
operator|==
operator|-
literal|1
assert|;
name|timePositionIdx
operator|=
name|groupKey
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
else|else
block|{
name|dimensions
operator|.
name|add
argument_list|(
operator|new
name|DefaultDimensionSpec
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"incompatible project expression: "
operator|+
name|project
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|groupKey
range|:
name|groupSet
control|)
block|{
specifier|final
name|String
name|s
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|groupKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|druidTable
operator|.
name|timestampFieldName
argument_list|)
condition|)
block|{
name|finalGranularity
operator|=
name|Granularity
operator|.
name|ALL
expr_stmt|;
comment|// Generate unique name as timestampFieldName is taken
name|String
name|extractColumnName
init|=
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
name|EXTRACT_COLUMN_NAME_PREFIX
argument_list|,
name|usedFieldNames
argument_list|,
name|SqlValidatorUtil
operator|.
name|EXPR_SUGGESTER
argument_list|)
decl_stmt|;
name|timeExtractionDimensionSpec
operator|=
name|TimeExtractionDimensionSpec
operator|.
name|makeFullTimeExtract
argument_list|(
name|extractColumnName
argument_list|,
name|config
operator|.
name|timeZone
argument_list|()
argument_list|)
expr_stmt|;
name|dimensions
operator|.
name|add
argument_list|(
name|timeExtractionDimensionSpec
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|extractColumnName
argument_list|)
expr_stmt|;
assert|assert
name|timePositionIdx
operator|==
operator|-
literal|1
assert|;
name|timePositionIdx
operator|=
name|groupKey
expr_stmt|;
block|}
else|else
block|{
name|dimensions
operator|.
name|add
argument_list|(
operator|new
name|DefaultDimensionSpec
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|String
argument_list|>
name|agg
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|aggNames
argument_list|)
control|)
block|{
specifier|final
name|JsonAggregation
name|jsonAggregation
init|=
name|getJsonAggregation
argument_list|(
name|fieldNames
argument_list|,
name|agg
operator|.
name|right
argument_list|,
name|agg
operator|.
name|left
argument_list|,
name|projects
argument_list|,
name|translator
argument_list|)
decl_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
name|jsonAggregation
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|jsonAggregation
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|postProject
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|ImmutableList
operator|.
name|builder
argument_list|()
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|postProject
operator|.
name|getNamedProjects
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|pair
operator|.
name|right
decl_stmt|;
name|RexNode
name|rex
init|=
name|pair
operator|.
name|left
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
comment|// Render Post JSON object when PostProject exists. In DruidPostAggregationProjectRule
comment|// all check has been done to ensure all RexCall rexNode can be pushed in.
if|if
condition|(
name|rex
operator|instanceof
name|RexCall
condition|)
block|{
name|DruidQuery
operator|.
name|JsonPostAggregation
name|jsonPost
init|=
name|getJsonPostAggregation
argument_list|(
name|fieldName
argument_list|,
name|rex
argument_list|,
name|postProject
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
name|postAggs
operator|.
name|add
argument_list|(
name|jsonPost
argument_list|)
expr_stmt|;
block|}
block|}
name|fieldNames
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|ImmutableList
argument_list|<
name|JsonCollation
argument_list|>
name|collations
init|=
literal|null
decl_stmt|;
name|boolean
name|sortsMetric
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|collationIndexes
operator|!=
literal|null
condition|)
block|{
assert|assert
name|collationDirections
operator|!=
literal|null
assert|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonCollation
argument_list|>
name|colBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Direction
argument_list|>
name|p
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|collationIndexes
argument_list|,
name|collationDirections
argument_list|)
control|)
block|{
specifier|final
name|String
name|dimensionOrder
init|=
name|numericCollationIndexes
operator|.
name|get
argument_list|(
name|p
operator|.
name|left
argument_list|)
condition|?
literal|"numeric"
else|:
literal|"alphanumeric"
decl_stmt|;
name|colBuilder
operator|.
name|add
argument_list|(
operator|new
name|JsonCollation
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|p
operator|.
name|left
argument_list|)
argument_list|,
name|p
operator|.
name|right
operator|==
name|Direction
operator|.
name|DESCENDING
condition|?
literal|"descending"
else|:
literal|"ascending"
argument_list|,
name|dimensionOrder
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|left
operator|>=
name|groupSet
operator|.
name|cardinality
argument_list|()
operator|&&
name|p
operator|.
name|right
operator|==
name|Direction
operator|.
name|DESCENDING
condition|)
block|{
comment|// Currently only support for DESC in TopN
name|sortsMetric
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|.
name|left
operator|==
name|timePositionIdx
condition|)
block|{
assert|assert
name|timeSeriesDirection
operator|==
literal|null
assert|;
name|timeSeriesDirection
operator|=
name|p
operator|.
name|right
expr_stmt|;
block|}
block|}
name|collations
operator|=
name|colBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|limit
operator|=
operator|new
name|JsonLimit
argument_list|(
literal|"default"
argument_list|,
name|fetch
argument_list|,
name|collations
argument_list|)
expr_stmt|;
if|if
condition|(
name|dimensions
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|collations
operator|==
literal|null
operator|||
name|timeSeriesDirection
operator|!=
literal|null
operator|)
condition|)
block|{
name|queryType
operator|=
name|QueryType
operator|.
name|TIMESERIES
expr_stmt|;
assert|assert
name|fetch
operator|==
literal|null
assert|;
block|}
if|else if
condition|(
name|dimensions
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|finalGranularity
operator|==
name|Granularity
operator|.
name|ALL
operator|&&
name|sortsMetric
operator|&&
name|collations
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|fetch
operator|!=
literal|null
operator|&&
name|config
operator|.
name|approximateTopN
argument_list|()
condition|)
block|{
name|queryType
operator|=
name|QueryType
operator|.
name|TOP_N
expr_stmt|;
block|}
else|else
block|{
name|queryType
operator|=
name|QueryType
operator|.
name|GROUP_BY
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|aggCalls
operator|==
literal|null
assert|;
assert|assert
name|aggNames
operator|==
literal|null
assert|;
assert|assert
name|collationIndexes
operator|==
literal|null
operator|||
name|collationIndexes
operator|.
name|isEmpty
argument_list|()
assert|;
assert|assert
name|collationDirections
operator|==
literal|null
operator|||
name|collationDirections
operator|.
name|isEmpty
argument_list|()
assert|;
block|}
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|queryType
condition|)
block|{
case|case
name|TIMESERIES
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"timeseries"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"descending"
argument_list|,
name|timeSeriesDirection
operator|!=
literal|null
operator|&&
name|timeSeriesDirection
operator|==
name|Direction
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
name|finalGranularity
operator|.
name|value
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
name|postAggs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|postAggs
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
comment|// The following field is necessary to conform with SQL semantics (CALCITE-1589)
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|isCountStar
init|=
name|Granularity
operator|.
name|ALL
operator|==
name|finalGranularity
operator|&&
name|aggregations
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|aggregations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
operator|.
name|equals
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
comment|//Count(*) returns 0 if result set is empty thus need to set skipEmptyBuckets to false
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"skipEmptyBuckets"
argument_list|,
operator|!
name|isCountStar
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
name|TOP_N
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"topN"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
name|finalGranularity
operator|.
name|value
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimension"
argument_list|,
name|dimensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"metric"
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
name|collationIndexes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
name|postAggs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|postAggs
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
literal|"threshold"
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
name|GROUP_BY
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"groupBy"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
name|finalGranularity
operator|.
name|value
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimensions"
argument_list|,
name|dimensions
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"limitSpec"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
name|postAggs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|postAggs
else|:
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"having"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"select"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"descending"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimensions"
argument_list|,
name|translator
operator|.
name|dimensions
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"metrics"
argument_list|,
name|translator
operator|.
name|metrics
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
name|finalGranularity
operator|.
name|value
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"pagingSpec"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
literal|"threshold"
argument_list|,
name|fetch
operator|!=
literal|null
condition|?
name|fetch
else|:
name|CalciteConnectionProperty
operator|.
name|DRUID_FETCH
operator|.
name|wrap
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"fromNext"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
name|DRUID_QUERY_FETCH
argument_list|,
name|fetch
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown query type "
operator|+
name|queryType
argument_list|)
throw|;
block|}
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QuerySpec
argument_list|(
name|queryType
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|protected
name|JsonAggregation
name|getJsonAggregation
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|String
name|name
parameter_list|,
name|AggregateCall
name|aggCall
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|Translator
name|translator
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|arg
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|only
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|list
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|fractional
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|aggCall
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|SqlTypeName
name|sqlTypeName
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
name|fractional
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|SqlTypeFamily
operator|.
name|INTEGER
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
name|fractional
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
comment|// Decimal
assert|assert
name|sqlTypeName
operator|==
name|SqlTypeName
operator|.
name|DECIMAL
assert|;
if|if
condition|(
name|type
operator|.
name|getScale
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fractional
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fractional
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Cannot handle this aggregate function type
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown aggregate type "
operator|+
name|type
argument_list|)
throw|;
block|}
name|JsonAggregation
name|aggregation
decl_stmt|;
name|CalciteConnectionConfig
name|config
init|=
name|getConnectionConfig
argument_list|()
decl_stmt|;
comment|// Convert from a complex metric
name|ComplexMetric
name|complexMetric
init|=
name|druidTable
operator|.
name|resolveComplexMetric
argument_list|(
name|only
argument_list|,
name|aggCall
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|COUNT
case|:
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isApproximate
argument_list|()
operator|||
name|config
operator|.
name|approximateDistinctCount
argument_list|()
condition|)
block|{
if|if
condition|(
name|complexMetric
operator|==
literal|null
condition|)
block|{
name|aggregation
operator|=
operator|new
name|JsonCardinalityAggregation
argument_list|(
literal|"cardinality"
argument_list|,
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
name|complexMetric
operator|.
name|getMetricType
argument_list|()
argument_list|,
name|name
argument_list|,
name|complexMetric
operator|.
name|getMetricName
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
comment|// Gets thrown if one of the rules allows a count(distinct ...) through
comment|// when approximate results were not told be acceptable.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot push "
operator|+
name|aggCall
operator|+
literal|" because an approximate count distinct is not acceptable."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// case we have count(column) push it as count(*) where column is not null
specifier|final
name|JsonFilter
name|matchNulls
init|=
operator|new
name|JsonSelector
argument_list|(
name|only
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|JsonFilter
name|filterOutNulls
init|=
operator|new
name|JsonCompositeFilter
argument_list|(
name|JsonFilter
operator|.
name|Type
operator|.
name|NOT
argument_list|,
name|matchNulls
argument_list|)
decl_stmt|;
name|aggregation
operator|=
operator|new
name|JsonFilteredAggregation
argument_list|(
name|filterOutNulls
argument_list|,
operator|new
name|JsonAggregation
argument_list|(
literal|"count"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
literal|"count"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SUM
case|:
case|case
name|SUM0
case|:
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
name|fractional
condition|?
literal|"doubleSum"
else|:
literal|"longSum"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIN
case|:
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
name|fractional
condition|?
literal|"doubleMin"
else|:
literal|"longMin"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|aggregation
operator|=
operator|new
name|JsonAggregation
argument_list|(
name|fractional
condition|?
literal|"doubleMax"
else|:
literal|"longMax"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown aggregate "
operator|+
name|aggCall
argument_list|)
throw|;
block|}
comment|// Check for filters
if|if
condition|(
name|aggCall
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|RexCall
name|filterNode
init|=
operator|(
name|RexCall
operator|)
name|projects
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|)
decl_stmt|;
name|JsonFilter
name|filter
init|=
name|translator
operator|.
name|translateFilter
argument_list|(
name|filterNode
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|aggregation
operator|=
operator|new
name|JsonFilteredAggregation
argument_list|(
name|filter
argument_list|,
name|aggregation
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregation
return|;
block|}
specifier|public
name|JsonPostAggregation
name|getJsonPostAggregation
parameter_list|(
name|String
name|name
parameter_list|,
name|RexNode
name|rexNode
parameter_list|,
name|RelNode
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rexNode
operator|instanceof
name|RexCall
condition|)
block|{
name|List
argument_list|<
name|JsonPostAggregation
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|ele
range|:
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|JsonPostAggregation
name|field
init|=
name|getJsonPostAggregation
argument_list|(
literal|""
argument_list|,
name|ele
argument_list|,
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unchecked types that cannot be parsed as Post Aggregator"
argument_list|)
throw|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|rexNode
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|PLUS
case|:
return|return
operator|new
name|JsonArithmetic
argument_list|(
name|name
argument_list|,
literal|"+"
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|MINUS
case|:
return|return
operator|new
name|JsonArithmetic
argument_list|(
name|name
argument_list|,
literal|"-"
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|DIVIDE
case|:
return|return
operator|new
name|JsonArithmetic
argument_list|(
name|name
argument_list|,
literal|"quotient"
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|TIMES
case|:
return|return
operator|new
name|JsonArithmetic
argument_list|(
name|name
argument_list|,
literal|"*"
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|CAST
case|:
return|return
name|getJsonPostAggregation
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rel
argument_list|)
return|;
default|default:
block|}
block|}
if|else if
condition|(
name|rexNode
operator|instanceof
name|RexInputRef
condition|)
block|{
comment|// Subtract only number of grouping columns as offset because for now only Aggregates
comment|// without grouping sets (i.e. indicator columns size is zero) are allowed to pushed
comment|// in Druid Query.
name|Integer
name|indexSkipGroup
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|rexNode
operator|)
operator|.
name|getIndex
argument_list|()
operator|-
operator|(
operator|(
name|Aggregate
operator|)
name|rel
operator|)
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
name|AggregateCall
name|aggCall
init|=
operator|(
operator|(
name|Aggregate
operator|)
name|rel
operator|)
operator|.
name|getAggCallList
argument_list|()
operator|.
name|get
argument_list|(
name|indexSkipGroup
argument_list|)
decl_stmt|;
comment|// Use either the hyper unique estimator, or the theta sketch one.
comment|// Hyper unique is used by default.
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
operator|&&
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|COUNT
condition|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|rexNode
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|(
operator|(
name|Aggregate
operator|)
name|rel
operator|)
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|String
name|complexName
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ComplexMetric
name|metric
init|=
name|druidTable
operator|.
name|resolveComplexMetric
argument_list|(
name|complexName
argument_list|,
name|aggCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|metric
operator|.
name|getDruidType
argument_list|()
condition|)
block|{
case|case
name|THETA_SKETCH
case|:
return|return
operator|new
name|JsonThetaSketchEstimate
argument_list|(
literal|""
argument_list|,
name|fieldName
argument_list|)
return|;
case|case
name|HYPER_UNIQUE
case|:
return|return
operator|new
name|JsonHyperUniqueCardinality
argument_list|(
literal|""
argument_list|,
name|fieldName
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Can not translate complex metric type: "
operator|+
name|metric
operator|.
name|getDruidType
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Count distinct on a non-complex column.
return|return
operator|new
name|JsonHyperUniqueCardinality
argument_list|(
literal|""
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
return|return
operator|new
name|JsonFieldAccessor
argument_list|(
literal|""
argument_list|,
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|rexNode
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|rexNode
operator|instanceof
name|RexLiteral
condition|)
block|{
comment|// Druid constant post aggregator only supports numeric value for now.
comment|// (http://druid.io/docs/0.10.0/querying/post-aggregations.html) Accordingly, all
comment|// numeric type of RexLiteral can only have BigDecimal value, so filter out unsupported
comment|// constant by checking the type of RexLiteral value.
if|if
condition|(
operator|(
operator|(
name|RexLiteral
operator|)
name|rexNode
operator|)
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|new
name|JsonConstant
argument_list|(
literal|""
argument_list|,
operator|(
operator|(
name|BigDecimal
operator|)
operator|(
operator|(
name|RexLiteral
operator|)
name|rexNode
operator|)
operator|.
name|getValue3
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unchecked types that cannot be parsed as Post Aggregator"
argument_list|)
throw|;
block|}
specifier|protected
specifier|static
name|void
name|writeField
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|generator
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|writeFieldIf
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|writeField
argument_list|(
name|generator
argument_list|,
name|fieldName
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|writeArray
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
name|writeObject
argument_list|(
name|generator
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|writeObject
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Interval
condition|)
block|{
name|generator
operator|.
name|writeString
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Integer
condition|)
block|{
name|Integer
name|i
init|=
operator|(
name|Integer
operator|)
name|o
decl_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|writeArray
argument_list|(
name|generator
argument_list|,
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Json
condition|)
block|{
operator|(
operator|(
name|Json
operator|)
name|o
operator|)
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a json object: "
operator|+
name|o
argument_list|)
throw|;
block|}
block|}
comment|/** Generates a JSON string to query metadata about a data source. */
specifier|static
name|String
name|metadataQuery
parameter_list|(
name|String
name|dataSourceName
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|)
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"segmentMetadata"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSourceName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"merge"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"lenientAggregatorMerge"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeArrayFieldStart
argument_list|(
literal|"analysisTypes"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
literal|"aggregators"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Druid query specification. */
specifier|public
specifier|static
class|class
name|QuerySpec
block|{
specifier|final
name|QueryType
name|queryType
decl_stmt|;
specifier|final
name|String
name|queryString
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
name|QuerySpec
parameter_list|(
name|QueryType
name|queryType
parameter_list|,
name|String
name|queryString
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|queryType
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|queryType
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryString
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|queryType
argument_list|,
name|queryString
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|QuerySpec
operator|&&
name|queryType
operator|==
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|queryType
operator|&&
name|queryString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|queryString
argument_list|)
operator|&&
name|fieldNames
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|fieldNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{queryType: "
operator|+
name|queryType
operator|+
literal|", queryString: "
operator|+
name|queryString
operator|+
literal|", fieldNames: "
operator|+
name|fieldNames
operator|+
literal|"}"
return|;
block|}
specifier|public
name|String
name|getQueryString
parameter_list|(
name|String
name|pagingIdentifier
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|pagingIdentifier
operator|==
literal|null
condition|)
block|{
return|return
name|queryString
return|;
block|}
return|return
name|queryString
operator|.
name|replace
argument_list|(
literal|"\"threshold\":"
argument_list|,
literal|"\"pagingIdentifiers\":{\""
operator|+
name|pagingIdentifier
operator|+
literal|"\":"
operator|+
name|offset
operator|+
literal|"},\"threshold\":"
argument_list|)
return|;
block|}
block|}
comment|/** Translates scalar expressions to Druid field references. */
annotation|@
name|VisibleForTesting
specifier|protected
specifier|static
class|class
name|Translator
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dimensions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|metrics
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|DruidTable
name|druidTable
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|final
name|String
name|timeZone
decl_stmt|;
name|Translator
parameter_list|(
name|DruidTable
name|druidTable
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|String
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|druidTable
operator|=
name|druidTable
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
for|for
control|(
name|RelDataTypeField
name|f
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|druidTable
operator|.
name|isMetric
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|druidTable
operator|.
name|timestampFieldName
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|&&
operator|!
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|dimensions
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
block|}
specifier|protected
name|void
name|clearFieldNameLists
parameter_list|()
block|{
name|dimensions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"incomplete-switch"
argument_list|)
name|String
name|translate
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|e
decl_stmt|;
name|index
operator|=
name|ref
operator|.
name|getIndex
argument_list|()
expr_stmt|;
break|break;
case|case
name|CAST
case|:
return|return
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|,
name|set
argument_list|)
return|;
case|case
name|LITERAL
case|:
return|return
operator|(
operator|(
name|RexLiteral
operator|)
name|e
operator|)
operator|.
name|getValue3
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
name|FLOOR
case|:
case|case
name|EXTRACT
case|:
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|e
decl_stmt|;
assert|assert
name|DruidDateTimeUtils
operator|.
name|extractGranularity
argument_list|(
name|call
argument_list|)
operator|!=
literal|null
assert|;
name|index
operator|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|e
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|IS_TRUE
case|:
return|return
literal|""
return|;
comment|// the fieldName for which this is the filter will be added separately
block|}
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"invalid expression "
operator|+
name|e
argument_list|)
throw|;
block|}
specifier|final
name|String
name|fieldName
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
condition|)
block|{
if|if
condition|(
name|druidTable
operator|.
name|metricFieldNames
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|druidTable
operator|.
name|timestampFieldName
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|&&
operator|!
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|dimensions
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldName
return|;
block|}
specifier|private
name|JsonFilter
name|translateFilter
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
specifier|final
name|RexCall
name|call
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return
name|JsonExpressionFilter
operator|.
name|alwaysTrue
argument_list|()
return|;
block|}
if|if
condition|(
name|e
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
name|JsonExpressionFilter
operator|.
name|alwaysFalse
argument_list|()
return|;
block|}
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|IN
case|:
case|case
name|BETWEEN
case|:
case|case
name|IS_NULL
case|:
case|case
name|IS_NOT_NULL
case|:
name|call
operator|=
operator|(
name|RexCall
operator|)
name|e
expr_stmt|;
name|int
name|posRef
decl_stmt|;
name|int
name|posConstant
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// IS NULL and IS NOT NULL
name|posRef
operator|=
literal|0
expr_stmt|;
name|posConstant
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|posRef
operator|=
literal|0
expr_stmt|;
name|posConstant
operator|=
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|posRef
operator|=
literal|1
expr_stmt|;
name|posConstant
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"it is not a valid comparison: "
operator|+
name|e
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|numeric
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|posRef
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|NUMERIC
decl_stmt|;
specifier|final
name|Granularity
name|granularity
init|=
name|DruidDateTimeUtils
operator|.
name|extractGranularity
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|posRef
argument_list|)
argument_list|)
decl_stmt|;
comment|// in case no extraction the field will be omitted from the serialization
name|ExtractionFunction
name|extractionFunction
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|granularity
operator|!=
literal|null
condition|)
block|{
name|extractionFunction
operator|=
name|TimeExtractionFunction
operator|.
name|createExtractFromGranularity
argument_list|(
name|granularity
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
block|}
name|String
name|dimName
init|=
name|tr
argument_list|(
name|e
argument_list|,
name|posRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimName
operator|.
name|equals
argument_list|(
name|DruidConnectionImpl
operator|.
name|DEFAULT_RESPONSE_TIMESTAMP_COLUMN
argument_list|)
condition|)
block|{
comment|// We need to use Druid default column name to refer to the time dimension in a filter
name|dimName
operator|=
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
expr_stmt|;
block|}
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
comment|// extractionFunction should be null because if we are using an extraction function
comment|// we have guarantees about the format of the output and thus we can apply the
comment|// normal selector
if|if
condition|(
name|numeric
operator|&&
name|extractionFunction
operator|==
literal|null
condition|)
block|{
name|String
name|constantValue
init|=
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
decl_stmt|;
return|return
operator|new
name|JsonBound
argument_list|(
name|dimName
argument_list|,
name|constantValue
argument_list|,
literal|false
argument_list|,
name|constantValue
argument_list|,
literal|false
argument_list|,
name|numeric
argument_list|,
name|extractionFunction
argument_list|)
return|;
block|}
return|return
operator|new
name|JsonSelector
argument_list|(
name|dimName
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
name|extractionFunction
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
comment|// extractionFunction should be null because if we are using an extraction function
comment|// we have guarantees about the format of the output and thus we can apply the
comment|// normal selector
if|if
condition|(
name|numeric
operator|&&
name|extractionFunction
operator|==
literal|null
condition|)
block|{
name|String
name|constantValue
init|=
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
decl_stmt|;
return|return
operator|new
name|JsonCompositeFilter
argument_list|(
name|JsonFilter
operator|.
name|Type
operator|.
name|OR
argument_list|,
operator|new
name|JsonBound
argument_list|(
name|dimName
argument_list|,
name|constantValue
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|numeric
argument_list|,
name|extractionFunction
argument_list|)
argument_list|,
operator|new
name|JsonBound
argument_list|(
name|dimName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|constantValue
argument_list|,
literal|true
argument_list|,
name|numeric
argument_list|,
name|extractionFunction
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|JsonCompositeFilter
argument_list|(
name|JsonFilter
operator|.
name|Type
operator|.
name|NOT
argument_list|,
operator|new
name|JsonSelector
argument_list|(
name|dimName
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
name|extractionFunction
argument_list|)
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
operator|new
name|JsonBound
argument_list|(
name|dimName
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|numeric
argument_list|,
name|extractionFunction
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
operator|new
name|JsonBound
argument_list|(
name|dimName
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|numeric
argument_list|,
name|extractionFunction
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
operator|new
name|JsonBound
argument_list|(
name|dimName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
literal|true
argument_list|,
name|numeric
argument_list|,
name|extractionFunction
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
operator|new
name|JsonBound
argument_list|(
name|dimName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
literal|false
argument_list|,
name|numeric
argument_list|,
name|extractionFunction
argument_list|)
return|;
case|case
name|IN
case|:
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|listBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|rexNode
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
if|if
condition|(
name|rexNode
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
name|listBuilder
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|rexNode
operator|)
operator|.
name|getValue3
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JsonInFilter
argument_list|(
name|dimName
argument_list|,
name|listBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|extractionFunction
argument_list|)
return|;
case|case
name|BETWEEN
case|:
return|return
operator|new
name|JsonBound
argument_list|(
name|dimName
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|false
argument_list|,
name|numeric
argument_list|,
name|extractionFunction
argument_list|)
return|;
case|case
name|IS_NULL
case|:
return|return
operator|new
name|JsonSelector
argument_list|(
name|dimName
argument_list|,
literal|null
argument_list|,
name|extractionFunction
argument_list|)
return|;
case|case
name|IS_NOT_NULL
case|:
return|return
operator|new
name|JsonCompositeFilter
argument_list|(
name|JsonFilter
operator|.
name|Type
operator|.
name|NOT
argument_list|,
operator|new
name|JsonSelector
argument_list|(
name|dimName
argument_list|,
literal|null
argument_list|,
name|extractionFunction
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
case|case
name|AND
case|:
case|case
name|OR
case|:
case|case
name|NOT
case|:
name|call
operator|=
operator|(
name|RexCall
operator|)
name|e
expr_stmt|;
return|return
operator|new
name|JsonCompositeFilter
argument_list|(
name|JsonFilter
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|translateFilters
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate filter: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|tr
parameter_list|(
name|RexNode
name|call
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|tr
argument_list|(
name|call
argument_list|,
name|index
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|String
name|tr
parameter_list|(
name|RexNode
name|call
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
return|return
name|translate
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|call
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|set
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|JsonFilter
argument_list|>
name|translateFilters
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonFilter
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|translateFilter
argument_list|(
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/** Interpreter node that executes a Druid query and sends the results to a    * {@link Sink}. */
specifier|private
specifier|static
class|class
name|DruidQueryNode
implements|implements
name|Node
block|{
specifier|private
specifier|final
name|Sink
name|sink
decl_stmt|;
specifier|private
specifier|final
name|DruidQuery
name|query
decl_stmt|;
specifier|private
specifier|final
name|QuerySpec
name|querySpec
decl_stmt|;
name|DruidQueryNode
parameter_list|(
name|Interpreter
name|interpreter
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|interpreter
operator|.
name|sink
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|querySpec
operator|=
name|query
operator|.
name|getQuerySpec
argument_list|()
expr_stmt|;
name|Hook
operator|.
name|QUERY_PLAN
operator|.
name|run
argument_list|(
name|querySpec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|List
argument_list|<
name|ColumnMetaData
operator|.
name|Rep
argument_list|>
name|fieldTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|query
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|getPrimitive
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DruidConnectionImpl
name|connection
init|=
operator|new
name|DruidConnectionImpl
argument_list|(
name|query
operator|.
name|druidTable
operator|.
name|schema
operator|.
name|url
argument_list|,
name|query
operator|.
name|druidTable
operator|.
name|schema
operator|.
name|coordinatorUrl
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|limitQuery
init|=
name|containsLimit
argument_list|(
name|querySpec
argument_list|)
decl_stmt|;
specifier|final
name|DruidConnectionImpl
operator|.
name|Page
name|page
init|=
operator|new
name|DruidConnectionImpl
operator|.
name|Page
argument_list|()
decl_stmt|;
do|do
block|{
specifier|final
name|String
name|queryString
init|=
name|querySpec
operator|.
name|getQueryString
argument_list|(
name|page
operator|.
name|pagingIdentifier
argument_list|,
name|page
operator|.
name|offset
argument_list|)
decl_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|querySpec
operator|.
name|queryType
argument_list|,
name|queryString
argument_list|,
name|sink
argument_list|,
name|querySpec
operator|.
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|limitQuery
operator|&&
name|page
operator|.
name|pagingIdentifier
operator|!=
literal|null
operator|&&
name|page
operator|.
name|totalRowCount
operator|>
literal|0
condition|)
do|;
block|}
specifier|private
specifier|static
name|boolean
name|containsLimit
parameter_list|(
name|QuerySpec
name|querySpec
parameter_list|)
block|{
return|return
name|querySpec
operator|.
name|queryString
operator|.
name|contains
argument_list|(
literal|"\"context\":{\""
operator|+
name|DRUID_QUERY_FETCH
operator|+
literal|"\":true"
argument_list|)
return|;
block|}
specifier|private
name|ColumnMetaData
operator|.
name|Rep
name|getPrimitive
parameter_list|(
name|RelDataTypeField
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIMESTAMP
return|;
case|case
name|BIGINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|LONG
return|;
case|case
name|INTEGER
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|INTEGER
return|;
case|case
name|SMALLINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|SHORT
return|;
case|case
name|TINYINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BYTE
return|;
case|case
name|REAL
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|FLOAT
return|;
case|case
name|DOUBLE
case|:
case|case
name|FLOAT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|DOUBLE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/** Object that knows how to write itself to a    * {@link com.fasterxml.jackson.core.JsonGenerator}. */
specifier|public
interface|interface
name|Json
block|{
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** Aggregation element of a Druid "groupBy" or "topN" query. */
specifier|private
specifier|static
class|class
name|JsonAggregation
implements|implements
name|Json
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|private
name|JsonAggregation
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fieldName"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Collation element of a Druid "groupBy" query. */
specifier|private
specifier|static
class|class
name|JsonLimit
implements|implements
name|Json
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|final
name|Integer
name|limit
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|JsonCollation
argument_list|>
name|collations
decl_stmt|;
specifier|private
name|JsonLimit
parameter_list|(
name|String
name|type
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|ImmutableList
argument_list|<
name|JsonCollation
argument_list|>
name|collations
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|collations
operator|=
name|collations
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"columns"
argument_list|,
name|collations
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Collation element of a Druid "groupBy" query. */
specifier|private
specifier|static
class|class
name|JsonCollation
implements|implements
name|Json
block|{
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|final
name|String
name|direction
decl_stmt|;
specifier|final
name|String
name|dimensionOrder
decl_stmt|;
specifier|private
name|JsonCollation
parameter_list|(
name|String
name|dimension
parameter_list|,
name|String
name|direction
parameter_list|,
name|String
name|dimensionOrder
parameter_list|)
block|{
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
name|this
operator|.
name|dimensionOrder
operator|=
name|dimensionOrder
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"direction"
argument_list|,
name|direction
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"dimensionOrder"
argument_list|,
name|dimensionOrder
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Aggregation element that calls the "cardinality" function. */
specifier|private
specifier|static
class|class
name|JsonCardinalityAggregation
extends|extends
name|JsonAggregation
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
name|JsonCardinalityAggregation
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fieldNames"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Aggregation element that contains a filter */
specifier|private
specifier|static
class|class
name|JsonFilteredAggregation
extends|extends
name|JsonAggregation
block|{
specifier|final
name|JsonFilter
name|filter
decl_stmt|;
specifier|final
name|JsonAggregation
name|aggregation
decl_stmt|;
specifier|private
name|JsonFilteredAggregation
parameter_list|(
name|JsonFilter
name|filter
parameter_list|,
name|JsonAggregation
name|aggregation
parameter_list|)
block|{
comment|// Filtered aggregations don't use the "name" and "fieldName" fields directly,
comment|// but rather use the ones defined in their "aggregation" field.
name|super
argument_list|(
literal|"filtered"
argument_list|,
name|aggregation
operator|.
name|name
argument_list|,
name|aggregation
operator|.
name|fieldName
argument_list|)
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|aggregation
operator|=
name|aggregation
expr_stmt|;
comment|// The aggregation cannot be a JsonFilteredAggregation
assert|assert
operator|!
operator|(
name|aggregation
operator|instanceof
name|JsonFilteredAggregation
operator|)
assert|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregator"
argument_list|,
name|aggregation
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Filter element of a Druid "groupBy" or "topN" query. */
specifier|private
specifier|abstract
specifier|static
class|class
name|JsonFilter
implements|implements
name|Json
block|{
comment|/**      * Supported filter types      * */
specifier|protected
enum|enum
name|Type
block|{
name|AND
block|,
name|OR
block|,
name|NOT
block|,
name|SELECTOR
block|,
name|IN
block|,
name|BOUND
block|,
name|EXPRESSION
block|;
specifier|public
name|String
name|lowercase
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
specifier|final
name|Type
name|type
decl_stmt|;
specifier|private
name|JsonFilter
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
comment|/**    * Druid Expression filter.    */
specifier|private
specifier|static
class|class
name|JsonExpressionFilter
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|String
name|expression
decl_stmt|;
specifier|private
name|JsonExpressionFilter
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|EXPRESSION
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|lowercase
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"expression"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
comment|/** We need to push to Druid an expression that always evaluates to true. */
specifier|public
specifier|static
specifier|final
name|JsonExpressionFilter
name|alwaysTrue
parameter_list|()
block|{
return|return
operator|new
name|JsonExpressionFilter
argument_list|(
literal|"1 == 1"
argument_list|)
return|;
block|}
comment|/** We need to push to Druid an expression that always evaluates to false. */
specifier|public
specifier|static
specifier|final
name|JsonExpressionFilter
name|alwaysFalse
parameter_list|()
block|{
return|return
operator|new
name|JsonExpressionFilter
argument_list|(
literal|"1 == 2"
argument_list|)
return|;
block|}
block|}
comment|/** Equality filter. */
specifier|private
specifier|static
class|class
name|JsonSelector
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
specifier|final
name|ExtractionFunction
name|extractionFunction
decl_stmt|;
specifier|private
name|JsonSelector
parameter_list|(
name|String
name|dimension
parameter_list|,
name|String
name|value
parameter_list|,
name|ExtractionFunction
name|extractionFunction
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|SELECTOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|extractionFunction
operator|=
name|extractionFunction
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|lowercase
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"extractionFn"
argument_list|,
name|extractionFunction
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Bound filter. */
annotation|@
name|VisibleForTesting
specifier|protected
specifier|static
class|class
name|JsonBound
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|String
name|lower
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|lowerStrict
decl_stmt|;
specifier|private
specifier|final
name|String
name|upper
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|upperStrict
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|alphaNumeric
decl_stmt|;
specifier|private
specifier|final
name|ExtractionFunction
name|extractionFunction
decl_stmt|;
specifier|private
name|JsonBound
parameter_list|(
name|String
name|dimension
parameter_list|,
name|String
name|lower
parameter_list|,
name|boolean
name|lowerStrict
parameter_list|,
name|String
name|upper
parameter_list|,
name|boolean
name|upperStrict
parameter_list|,
name|boolean
name|alphaNumeric
parameter_list|,
name|ExtractionFunction
name|extractionFunction
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|BOUND
argument_list|)
expr_stmt|;
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|lower
operator|=
name|lower
expr_stmt|;
name|this
operator|.
name|lowerStrict
operator|=
name|lowerStrict
expr_stmt|;
name|this
operator|.
name|upper
operator|=
name|upper
expr_stmt|;
name|this
operator|.
name|upperStrict
operator|=
name|upperStrict
expr_stmt|;
name|this
operator|.
name|alphaNumeric
operator|=
name|alphaNumeric
expr_stmt|;
name|this
operator|.
name|extractionFunction
operator|=
name|extractionFunction
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|lowercase
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"lower"
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"lowerStrict"
argument_list|,
name|lowerStrict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"upper"
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"upperStrict"
argument_list|,
name|upperStrict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|alphaNumeric
condition|)
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"ordering"
argument_list|,
literal|"numeric"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"ordering"
argument_list|,
literal|"lexicographic"
argument_list|)
expr_stmt|;
block|}
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"extractionFn"
argument_list|,
name|extractionFunction
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Filter that combines other filters using a boolean operator. */
specifier|private
specifier|static
class|class
name|JsonCompositeFilter
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|JsonFilter
argument_list|>
name|fields
decl_stmt|;
specifier|private
name|JsonCompositeFilter
parameter_list|(
name|Type
name|type
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|JsonFilter
argument_list|>
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JsonCompositeFilter
parameter_list|(
name|Type
name|type
parameter_list|,
name|JsonFilter
modifier|...
name|fields
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|lowercase
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NOT
case|:
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"field"
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** IN filter. */
specifier|protected
specifier|static
class|class
name|JsonInFilter
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
specifier|private
specifier|final
name|ExtractionFunction
name|extractionFunction
decl_stmt|;
specifier|private
name|JsonInFilter
parameter_list|(
name|String
name|dimension
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|ExtractionFunction
name|extractionFunction
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|IN
argument_list|)
expr_stmt|;
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|extractionFunction
operator|=
name|extractionFunction
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|lowercase
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"values"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"extractionFn"
argument_list|,
name|extractionFunction
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Post-Aggregator Post aggregator abstract writer */
specifier|protected
specifier|abstract
specifier|static
class|class
name|JsonPostAggregation
implements|implements
name|Json
block|{
specifier|final
name|String
name|type
decl_stmt|;
name|String
name|name
decl_stmt|;
specifier|private
name|JsonPostAggregation
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|// Expects all subclasses to write the EndObject item
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|JsonPostAggregation
name|copy
parameter_list|()
function_decl|;
block|}
comment|/** FieldAccessor Post aggregator writer */
specifier|private
specifier|static
class|class
name|JsonFieldAccessor
extends|extends
name|JsonPostAggregation
block|{
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|private
name|JsonFieldAccessor
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"fieldAccess"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"fieldName"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Leaf node in Post-aggs Json Tree, return an identical leaf node.      */
specifier|public
name|JsonPostAggregation
name|copy
parameter_list|()
block|{
return|return
operator|new
name|JsonFieldAccessor
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|this
operator|.
name|fieldName
argument_list|)
return|;
block|}
block|}
comment|/** Constant Post aggregator writer */
specifier|private
specifier|static
class|class
name|JsonConstant
extends|extends
name|JsonPostAggregation
block|{
specifier|final
name|double
name|value
decl_stmt|;
specifier|private
name|JsonConstant
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"constant"
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Leaf node in Post-aggs Json Tree, return an identical leaf node.      */
specifier|public
name|JsonPostAggregation
name|copy
parameter_list|()
block|{
return|return
operator|new
name|JsonConstant
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|this
operator|.
name|value
argument_list|)
return|;
block|}
block|}
comment|/** Greatest/Leastest Post aggregator writer */
specifier|private
specifier|static
class|class
name|JsonGreatestLeast
extends|extends
name|JsonPostAggregation
block|{
specifier|final
name|List
argument_list|<
name|JsonPostAggregation
argument_list|>
name|fields
decl_stmt|;
specifier|final
name|boolean
name|fractional
decl_stmt|;
specifier|final
name|boolean
name|greatest
decl_stmt|;
specifier|private
name|JsonGreatestLeast
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|JsonPostAggregation
argument_list|>
name|fields
parameter_list|,
name|boolean
name|fractional
parameter_list|,
name|boolean
name|greatest
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|greatest
condition|?
operator|(
name|fractional
condition|?
literal|"doubleGreatest"
else|:
literal|"longGreatest"
operator|)
else|:
operator|(
name|fractional
condition|?
literal|"doubleLeast"
else|:
literal|"longLeast"
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|fractional
operator|=
name|fractional
expr_stmt|;
name|this
operator|.
name|greatest
operator|=
name|greatest
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Non-leaf node in Post-aggs Json Tree, recursively copy the leaf node.      */
specifier|public
name|JsonPostAggregation
name|copy
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonPostAggregation
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonPostAggregation
name|field
range|:
name|fields
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|field
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|JsonGreatestLeast
argument_list|(
name|name
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|fractional
argument_list|,
name|greatest
argument_list|)
return|;
block|}
block|}
comment|/** Arithmetic Post aggregator writer */
specifier|private
specifier|static
class|class
name|JsonArithmetic
extends|extends
name|JsonPostAggregation
block|{
specifier|final
name|String
name|fn
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JsonPostAggregation
argument_list|>
name|fields
decl_stmt|;
specifier|final
name|String
name|ordering
decl_stmt|;
specifier|private
name|JsonArithmetic
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fn
parameter_list|,
name|List
argument_list|<
name|JsonPostAggregation
argument_list|>
name|fields
parameter_list|,
name|String
name|ordering
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"arithmetic"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fn
operator|=
name|fn
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|ordering
operator|=
name|ordering
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"fn"
argument_list|,
name|fn
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"ordering"
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Non-leaf node in Post-aggs Json Tree, recursively copy the leaf node.      */
specifier|public
name|JsonPostAggregation
name|copy
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonPostAggregation
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonPostAggregation
name|field
range|:
name|fields
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|field
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|JsonArithmetic
argument_list|(
name|name
argument_list|,
name|fn
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|ordering
argument_list|)
return|;
block|}
block|}
comment|/** HyperUnique Cardinality Post aggregator writer */
specifier|private
specifier|static
class|class
name|JsonHyperUniqueCardinality
extends|extends
name|JsonPostAggregation
block|{
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|private
name|JsonHyperUniqueCardinality
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"hyperUniqueCardinality"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"fieldName"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Leaf node in Post-aggs Json Tree, return an identical leaf node.      */
specifier|public
name|JsonPostAggregation
name|copy
parameter_list|()
block|{
return|return
operator|new
name|JsonHyperUniqueCardinality
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|this
operator|.
name|fieldName
argument_list|)
return|;
block|}
block|}
comment|/** Theta Sketch Estimator for Post aggregation */
specifier|private
specifier|static
class|class
name|JsonThetaSketchEstimate
extends|extends
name|JsonPostAggregation
block|{
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|private
name|JsonThetaSketchEstimate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"thetaSketchEstimate"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JsonPostAggregation
name|copy
parameter_list|()
block|{
return|return
operator|new
name|JsonThetaSketchEstimate
argument_list|(
name|name
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
comment|// Druid spec for ThetaSketchEstimate requires a field accessor
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"field"
argument_list|,
operator|new
name|JsonFieldAccessor
argument_list|(
literal|""
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End DruidQuery.java
end_comment

end_unit

