begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Chars
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Expression utility class to transform Calcite expressions to Druid expressions when possible.  */
end_comment

begin_class
specifier|public
class|class
name|DruidExpressions
block|{
comment|/**    * Type mapping between Calcite SQL family types and native Druid expression types    */
specifier|static
specifier|final
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|DruidType
argument_list|>
name|EXPRESSION_TYPES
decl_stmt|;
comment|/**    * Druid expression safe chars, must be sorted.    */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|SAFE_CHARS
init|=
literal|" ,._-;:(){}[]<>!@#$%^&*`~?/"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
static|static
block|{
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|SqlTypeName
argument_list|,
name|DruidType
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlTypeName
name|type
range|:
name|SqlTypeName
operator|.
name|FRACTIONAL_TYPES
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|DruidType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SqlTypeName
name|type
range|:
name|SqlTypeName
operator|.
name|INT_TYPES
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|DruidType
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SqlTypeName
name|type
range|:
name|SqlTypeName
operator|.
name|STRING_TYPES
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|DruidType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
comment|// booleans in expressions are returned from druid as long.
comment|// Druid will return 0 for false, non-zero value for true and null for absent value.
for|for
control|(
name|SqlTypeName
name|type
range|:
name|SqlTypeName
operator|.
name|BOOLEAN_TYPES
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|DruidType
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|// Timestamps are treated as longs (millis since the epoch) in Druid expressions.
name|builder
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
name|DruidType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|,
name|DruidType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
name|DruidType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|OTHER
argument_list|,
name|DruidType
operator|.
name|COMPLEX
argument_list|)
expr_stmt|;
name|EXPRESSION_TYPES
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Safe chars must be sorted
name|Arrays
operator|.
name|sort
argument_list|(
name|SAFE_CHARS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DruidExpressions
parameter_list|()
block|{
block|}
comment|/**    * Translates Calcite rexNode to Druid Expression when possible    * @param rexNode rexNode to convert to a Druid Expression    * @param inputRowType input row type of the rexNode to translate    * @param druidRel Druid query    *    * @return Druid Expression or null when can not convert the RexNode    */
annotation|@
name|Nullable
specifier|public
specifier|static
name|String
name|toDruidExpression
parameter_list|(
specifier|final
name|RexNode
name|rexNode
parameter_list|,
specifier|final
name|RelDataType
name|inputRowType
parameter_list|,
specifier|final
name|DruidQuery
name|druidRel
parameter_list|)
block|{
name|SqlKind
name|kind
init|=
name|rexNode
operator|.
name|getKind
argument_list|()
decl_stmt|;
name|SqlTypeName
name|sqlTypeName
init|=
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|INPUT_REF
condition|)
block|{
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|rexNode
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
name|inputRowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|druidRel
operator|.
name|getDruidTable
argument_list|()
operator|.
name|timestampFieldName
operator|.
name|equals
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|DruidExpressions
operator|.
name|fromColumn
argument_list|(
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|)
return|;
block|}
return|return
name|DruidExpressions
operator|.
name|fromColumn
argument_list|(
name|columnName
argument_list|)
return|;
block|}
if|if
condition|(
name|rexNode
operator|instanceof
name|RexCall
condition|)
block|{
specifier|final
name|SqlOperator
name|operator
init|=
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperator
argument_list|()
decl_stmt|;
specifier|final
name|DruidSqlOperatorConverter
name|conversion
init|=
name|druidRel
operator|.
name|getOperatorConversionMap
argument_list|()
operator|.
name|get
argument_list|(
name|operator
argument_list|)
decl_stmt|;
if|if
condition|(
name|conversion
operator|==
literal|null
condition|)
block|{
comment|//unknown operator can not translate
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|conversion
operator|.
name|toDruidExpression
argument_list|(
name|rexNode
argument_list|,
name|inputRowType
argument_list|,
name|druidRel
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
comment|// Translate literal.
if|if
condition|(
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|rexNode
argument_list|)
condition|)
block|{
comment|//case the filter/project might yield to unknown let Calcite deal with this for now
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|SqlTypeName
operator|.
name|NUMERIC_TYPES
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
return|return
name|DruidExpressions
operator|.
name|numberLiteral
argument_list|(
operator|(
name|Number
operator|)
name|RexLiteral
operator|.
name|value
argument_list|(
name|rexNode
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|SqlTypeFamily
operator|.
name|INTERVAL_DAY_TIME
operator|==
name|sqlTypeName
operator|.
name|getFamily
argument_list|()
condition|)
block|{
comment|// Calcite represents DAY-TIME intervals in milliseconds.
specifier|final
name|long
name|milliseconds
init|=
operator|(
operator|(
name|Number
operator|)
name|RexLiteral
operator|.
name|value
argument_list|(
name|rexNode
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
return|return
name|DruidExpressions
operator|.
name|numberLiteral
argument_list|(
name|milliseconds
argument_list|)
return|;
block|}
if|else if
condition|(
name|SqlTypeFamily
operator|.
name|INTERVAL_YEAR_MONTH
operator|==
name|sqlTypeName
operator|.
name|getFamily
argument_list|()
condition|)
block|{
comment|// Calcite represents YEAR-MONTH intervals in months.
specifier|final
name|long
name|months
init|=
operator|(
operator|(
name|Number
operator|)
name|RexLiteral
operator|.
name|value
argument_list|(
name|rexNode
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
return|return
name|DruidExpressions
operator|.
name|numberLiteral
argument_list|(
name|months
argument_list|)
return|;
block|}
if|else if
condition|(
name|SqlTypeName
operator|.
name|STRING_TYPES
operator|.
name|contains
argument_list|(
name|sqlTypeName
argument_list|)
condition|)
block|{
return|return
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|RexLiteral
operator|.
name|stringValue
argument_list|(
name|rexNode
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|SqlTypeName
operator|.
name|DATE
operator|==
name|sqlTypeName
operator|||
name|SqlTypeName
operator|.
name|TIMESTAMP
operator|==
name|sqlTypeName
operator|||
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
operator|==
name|sqlTypeName
condition|)
block|{
return|return
name|DruidExpressions
operator|.
name|numberLiteral
argument_list|(
name|DruidDateTimeUtils
operator|.
name|literalValue
argument_list|(
name|rexNode
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|SqlTypeName
operator|.
name|BOOLEAN
operator|==
name|sqlTypeName
condition|)
block|{
return|return
name|DruidExpressions
operator|.
name|numberLiteral
argument_list|(
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|rexNode
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|)
return|;
block|}
block|}
comment|// Not Literal/InputRef/RexCall or unknown type?
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|fromColumn
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|DruidQuery
operator|.
name|format
argument_list|(
literal|"\"%s\""
argument_list|,
name|columnName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|nullLiteral
parameter_list|()
block|{
return|return
literal|"null"
return|;
block|}
specifier|public
specifier|static
name|String
name|numberLiteral
parameter_list|(
specifier|final
name|Number
name|n
parameter_list|)
block|{
return|return
name|n
operator|==
literal|null
condition|?
name|nullLiteral
argument_list|()
else|:
name|n
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|stringLiteral
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
name|nullLiteral
argument_list|()
else|:
literal|"'"
operator|+
name|escape
argument_list|(
name|s
argument_list|)
operator|+
literal|"'"
return|;
block|}
specifier|private
specifier|static
name|String
name|escape
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|escaped
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|c
argument_list|)
operator|||
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|SAFE_CHARS
argument_list|,
name|c
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|escaped
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|escaped
operator|.
name|append
argument_list|(
literal|"\\u"
argument_list|)
operator|.
name|append
argument_list|(
name|BaseEncoding
operator|.
name|base16
argument_list|()
operator|.
name|encode
argument_list|(
name|Chars
operator|.
name|toByteArray
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|escaped
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|functionCall
parameter_list|(
specifier|final
name|String
name|functionName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|functionName
argument_list|,
literal|"druid functionName"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|args
argument_list|,
literal|"args"
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|finalI
init|=
name|i
decl_stmt|;
specifier|final
name|String
name|arg
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"arg #"
operator|+
name|finalI
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|nAryOperatorCall
parameter_list|(
specifier|final
name|String
name|druidOperator
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|druidOperator
argument_list|,
literal|"druid operator missing"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|args
argument_list|,
literal|"args"
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|finalI
init|=
name|i
decl_stmt|;
specifier|final
name|String
name|arg
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"arg #"
operator|+
name|finalI
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|druidOperator
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Translate a list of Calcite {@code RexNode} to Druid expressions.    *    * @param rexNodes list of Calcite expressions meant to be applied on top of the rows    *    * @return list of Druid expressions in the same order as rexNodes, or null if not possible.    * If a non-null list is returned, all elements will be non-null.    */
annotation|@
name|Nullable
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|toDruidExpressions
parameter_list|(
specifier|final
name|DruidQuery
name|druidRel
parameter_list|,
specifier|final
name|RelDataType
name|rowType
parameter_list|,
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexNodes
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|retVal
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rexNodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|rexNode
range|:
name|rexNodes
control|)
block|{
specifier|final
name|String
name|druidExpression
init|=
name|toDruidExpression
argument_list|(
name|rexNode
argument_list|,
name|rowType
argument_list|,
name|druidRel
argument_list|)
decl_stmt|;
if|if
condition|(
name|druidExpression
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|retVal
operator|.
name|add
argument_list|(
name|druidExpression
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
specifier|public
specifier|static
name|String
name|applyTimestampFloor
parameter_list|(
specifier|final
name|String
name|input
parameter_list|,
specifier|final
name|String
name|granularity
parameter_list|,
specifier|final
name|String
name|origin
parameter_list|,
specifier|final
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|input
argument_list|,
literal|"input"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|granularity
argument_list|,
literal|"granularity"
argument_list|)
expr_stmt|;
return|return
name|DruidExpressions
operator|.
name|functionCall
argument_list|(
literal|"timestamp_floor"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|granularity
argument_list|)
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|origin
argument_list|)
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|applyTimestampCeil
parameter_list|(
specifier|final
name|String
name|input
parameter_list|,
specifier|final
name|String
name|granularity
parameter_list|,
specifier|final
name|String
name|origin
parameter_list|,
specifier|final
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|input
argument_list|,
literal|"input"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|granularity
argument_list|,
literal|"granularity"
argument_list|)
expr_stmt|;
return|return
name|DruidExpressions
operator|.
name|functionCall
argument_list|(
literal|"timestamp_ceil"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|granularity
argument_list|)
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|origin
argument_list|)
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|applyTimeExtract
parameter_list|(
name|String
name|timeExpression
parameter_list|,
name|String
name|druidUnit
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|DruidExpressions
operator|.
name|functionCall
argument_list|(
literal|"timestamp_extract"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|timeExpression
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|druidUnit
argument_list|)
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

