begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_comment
comment|/**  * Utility class for extraction function mapping between SQL and Druid.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ExtractionFunctionUtil
block|{
specifier|private
name|ExtractionFunctionUtil
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * This method will be used to build a Druid extraction function out of a SQL EXTRACT rexNode.    *    * @param rexNode node that might contain an extraction function on time    * @return the correspondent Druid extraction function or null if it is not recognisable    */
specifier|public
specifier|static
name|ExtractionFunction
name|buildExtraction
parameter_list|(
name|RexNode
name|rexNode
parameter_list|)
block|{
if|if
condition|(
name|rexNode
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|rexNode
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|SqlKind
operator|.
name|EXTRACT
argument_list|)
condition|)
block|{
specifier|final
name|RexLiteral
name|flag
init|=
operator|(
name|RexLiteral
operator|)
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|TimeUnitRange
name|timeUnit
init|=
operator|(
name|TimeUnitRange
operator|)
name|flag
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeUnit
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|timeUnit
condition|)
block|{
case|case
name|YEAR
case|:
return|return
name|TimeExtractionFunction
operator|.
name|createExtractFromGranularity
argument_list|(
name|Granularity
operator|.
name|YEAR
argument_list|)
return|;
case|case
name|MONTH
case|:
return|return
name|TimeExtractionFunction
operator|.
name|createExtractFromGranularity
argument_list|(
name|Granularity
operator|.
name|MONTH
argument_list|)
return|;
case|case
name|DAY
case|:
return|return
name|TimeExtractionFunction
operator|.
name|createExtractFromGranularity
argument_list|(
name|Granularity
operator|.
name|DAY
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

begin_comment
comment|// End ExtractionFunctionUtil.java
end_comment

end_unit

