begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Period
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Druid cast converter operator used to translates calcite casts to Druid expression cast  */
end_comment

begin_class
specifier|public
class|class
name|DruidSqlCastConverter
implements|implements
name|DruidSqlOperatorConverter
block|{
annotation|@
name|Override
specifier|public
name|SqlOperator
name|calciteOperator
parameter_list|()
block|{
return|return
name|SqlStdOperatorTable
operator|.
name|CAST
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toDruidExpression
parameter_list|(
name|RexNode
name|rexNode
parameter_list|,
name|RelDataType
name|topRel
parameter_list|,
name|DruidQuery
name|druidQuery
parameter_list|)
block|{
specifier|final
name|RexNode
name|operand
init|=
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|operandExpression
init|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|operand
argument_list|,
name|topRel
argument_list|,
name|druidQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|operandExpression
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|SqlTypeName
name|fromType
init|=
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
name|String
name|fromTypeString
init|=
name|dateTimeFormatString
argument_list|(
name|fromType
argument_list|)
decl_stmt|;
specifier|final
name|SqlTypeName
name|toType
init|=
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|timeZoneConf
init|=
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
decl_stmt|;
specifier|final
name|TimeZone
name|timeZone
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timeZoneConf
operator|==
literal|null
condition|?
literal|"UTC"
else|:
name|timeZoneConf
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|nullEqualToEmpty
init|=
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|nullEqualToEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromTypeString
operator|==
literal|null
condition|)
block|{
name|fromTypeString
operator|=
name|nullEqualToEmpty
condition|?
literal|""
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|SqlTypeName
operator|.
name|CHAR_TYPES
operator|.
name|contains
argument_list|(
name|fromType
argument_list|)
operator|&&
name|SqlTypeName
operator|.
name|DATETIME_TYPES
operator|.
name|contains
argument_list|(
name|toType
argument_list|)
condition|)
block|{
comment|//case chars to dates
return|return
name|castCharToDateTime
argument_list|(
name|toType
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
condition|?
name|timeZone
else|:
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|,
name|operandExpression
argument_list|,
name|toType
argument_list|,
name|fromTypeString
argument_list|)
return|;
block|}
if|else if
condition|(
name|SqlTypeName
operator|.
name|DATETIME_TYPES
operator|.
name|contains
argument_list|(
name|fromType
argument_list|)
operator|&&
name|SqlTypeName
operator|.
name|CHAR_TYPES
operator|.
name|contains
argument_list|(
name|toType
argument_list|)
condition|)
block|{
comment|//case dates to chars
return|return
name|castDateTimeToChar
argument_list|(
name|fromType
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
condition|?
name|timeZone
else|:
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|,
name|operandExpression
argument_list|,
name|fromType
argument_list|)
return|;
block|}
if|else if
condition|(
name|SqlTypeName
operator|.
name|DATETIME_TYPES
operator|.
name|contains
argument_list|(
name|fromType
argument_list|)
operator|&&
name|toType
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
condition|)
block|{
if|if
condition|(
name|timeZone
operator|.
name|equals
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
condition|)
block|{
comment|// bail out, internal representation is the same,
comment|// we do not need to do anything
return|return
name|operandExpression
return|;
block|}
comment|// to timestamp with local time zone
return|return
name|castCharToDateTime
argument_list|(
name|timeZone
argument_list|,
name|castDateTimeToChar
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|,
name|operandExpression
argument_list|,
name|fromType
argument_list|)
argument_list|,
name|toType
argument_list|,
name|fromTypeString
argument_list|)
return|;
block|}
if|else if
condition|(
name|fromType
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
operator|&&
name|SqlTypeName
operator|.
name|DATETIME_TYPES
operator|.
name|contains
argument_list|(
name|toType
argument_list|)
condition|)
block|{
if|if
condition|(
name|toType
operator|!=
name|SqlTypeName
operator|.
name|DATE
operator|&&
name|timeZone
operator|.
name|equals
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
condition|)
block|{
comment|// bail out, internal representation is the same,
comment|// we do not need to do anything
return|return
name|operandExpression
return|;
block|}
comment|// timestamp with local time zone to other types
return|return
name|castCharToDateTime
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|,
name|castDateTimeToChar
argument_list|(
name|timeZone
argument_list|,
name|operandExpression
argument_list|,
name|fromType
argument_list|)
argument_list|,
name|toType
argument_list|,
name|fromTypeString
argument_list|)
return|;
block|}
else|else
block|{
comment|// Handle other casts.
specifier|final
name|DruidType
name|fromExprType
init|=
name|DruidExpressions
operator|.
name|EXPRESSION_TYPES
operator|.
name|get
argument_list|(
name|fromType
argument_list|)
decl_stmt|;
specifier|final
name|DruidType
name|toExprType
init|=
name|DruidExpressions
operator|.
name|EXPRESSION_TYPES
operator|.
name|get
argument_list|(
name|toType
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromExprType
operator|==
literal|null
operator|||
name|toExprType
operator|==
literal|null
condition|)
block|{
comment|// Unknown types bail out.
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|typeCastExpression
decl_stmt|;
if|if
condition|(
name|fromExprType
operator|!=
name|toExprType
condition|)
block|{
name|typeCastExpression
operator|=
name|DruidQuery
operator|.
name|format
argument_list|(
literal|"CAST(%s, '%s')"
argument_list|,
name|operandExpression
argument_list|,
name|toExprType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// case it is the same type it is ok to skip CAST
name|typeCastExpression
operator|=
name|operandExpression
expr_stmt|;
block|}
if|if
condition|(
name|toType
operator|==
name|SqlTypeName
operator|.
name|DATE
condition|)
block|{
comment|// Floor to day when casting to DATE.
return|return
name|DruidExpressions
operator|.
name|applyTimestampFloor
argument_list|(
name|typeCastExpression
argument_list|,
name|Period
operator|.
name|days
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|,
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|druidQuery
operator|.
name|getConnectionConfig
argument_list|()
operator|.
name|timeZone
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|typeCastExpression
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|castCharToDateTime
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|,
name|String
name|operand
parameter_list|,
specifier|final
name|SqlTypeName
name|toType
parameter_list|,
name|String
name|format
parameter_list|)
block|{
comment|// Cast strings to date times by parsing them from SQL format.
specifier|final
name|String
name|timestampExpression
init|=
name|DruidExpressions
operator|.
name|functionCall
argument_list|(
literal|"timestamp_parse"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|operand
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|format
argument_list|)
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|toType
operator|==
name|SqlTypeName
operator|.
name|DATE
condition|)
block|{
comment|// case to date we need to floor to day first
return|return
name|DruidExpressions
operator|.
name|applyTimestampFloor
argument_list|(
name|timestampExpression
argument_list|,
name|Period
operator|.
name|days
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
if|else if
condition|(
name|toType
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP
operator|||
name|toType
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
condition|)
block|{
return|return
name|timestampExpression
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|DruidQuery
operator|.
name|format
argument_list|(
literal|"Unsupported DateTime type[%s]"
argument_list|,
name|toType
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|castDateTimeToChar
parameter_list|(
specifier|final
name|TimeZone
name|timeZone
parameter_list|,
specifier|final
name|String
name|operand
parameter_list|,
specifier|final
name|SqlTypeName
name|fromType
parameter_list|)
block|{
return|return
name|DruidExpressions
operator|.
name|functionCall
argument_list|(
literal|"timestamp_format"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|operand
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|dateTimeFormatString
argument_list|(
name|fromType
argument_list|)
argument_list|)
argument_list|,
name|DruidExpressions
operator|.
name|stringLiteral
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dateTimeFormatString
parameter_list|(
specifier|final
name|SqlTypeName
name|sqlTypeName
parameter_list|)
block|{
if|if
condition|(
name|sqlTypeName
operator|==
name|SqlTypeName
operator|.
name|DATE
condition|)
block|{
return|return
literal|"yyyy-MM-dd"
return|;
block|}
if|else if
condition|(
name|sqlTypeName
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP
condition|)
block|{
return|return
literal|"yyyy-MM-dd HH:mm:ss"
return|;
block|}
if|else if
condition|(
name|sqlTypeName
operator|==
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
condition|)
block|{
return|return
literal|"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

