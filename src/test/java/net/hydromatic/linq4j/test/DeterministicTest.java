begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests factoring out deterministic expressions.  */
end_comment

begin_class
specifier|public
class|class
name|DeterministicTest
extends|extends
name|BlockBuilderBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|factorOutBinaryAdd
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return 1_2_$L4J$C$;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int 1_2_$L4J$C$ = 1 + 2;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|factorOutBinaryAddMul
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return 1_2_3_$L4J$C$;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int 1_2_$L4J$C$ = 1 + 2;\n"
operator|+
literal|"      static final int 1_2_3_$L4J$C$ = 1_2_$L4J$C$ * 3;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|THREE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|factorOutNestedClasses
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return 1_4_$L4J$C$ + new java.util.concurrent.Callable(){\n"
operator|+
literal|"            Object call() {\n"
operator|+
literal|"              return 1_2_3_$L4J$C$;\n"
operator|+
literal|"            }\n"
operator|+
literal|"\n"
operator|+
literal|"            static final int 1_2_$L4J$C$ = 1 + 2;\n"
operator|+
literal|"            static final int 1_2_3_$L4J$C$ = 1_2_$L4J$C$ * 3;\n"
operator|+
literal|"          }.call();\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final int 1_4_$L4J$C$ = 1 + 4;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|FOUR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Callable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|Object
operator|.
name|class
argument_list|,
literal|"call"
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|THREE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"call"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|newBigInteger
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return new_java_math_BigInteger_42__$L4J$C$;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"new_java_math_BigInteger_42__$L4J$C$ = new java.math.BigInteger(\n"
operator|+
literal|"        \"42\");\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"42"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|instanceofTest
parameter_list|()
block|{
comment|// Single instanceof is not optimized
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return 1 instanceof Boolean;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|typeIs
argument_list|(
name|ONE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|instanceofComplexTest
parameter_list|()
block|{
comment|// instanceof is optimized in complex expressinos
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return 1_instanceof_Boolean_2_instanceof_Integer_$L4J$C$;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final boolean "
operator|+
literal|"1_instanceof_Boolean_2_instanceof_Integer_$L4J$C$ = 1 instanceof "
operator|+
literal|"Boolean || 2 instanceof Integer;\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|Expressions
operator|.
name|typeIs
argument_list|(
name|ONE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|typeIs
argument_list|(
name|TWO
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|staticField
parameter_list|()
block|{
comment|// instanceof is optimized in complex expressinos
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return "
operator|+
literal|"java_math_BigInteger_ONE_add_java_math_BigInteger_valueOf_42L__$L4J$C$;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"java_math_BigInteger_valueOf_42L__$L4J$C$ = java.math.BigInteger"
operator|+
literal|".valueOf(42L);\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"java_math_BigInteger_ONE_add_java_math_BigInteger_valueOf_42L__$L4J$C$ = java.math.BigInteger.ONE.add(java_math_BigInteger_valueOf_42L__$L4J$C$);\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|BigInteger
operator|.
name|class
argument_list|,
literal|"ONE"
argument_list|)
argument_list|,
literal|"add"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|42L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bigIntegerValueOf
parameter_list|()
block|{
comment|// instanceof is optimized in complex expressinos
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  return new Runnable(){\n"
operator|+
literal|"      int test() {\n"
operator|+
literal|"        return "
operator|+
literal|"java_math_BigInteger_valueOf_42L_add_java_math_BigInteger_valueOf_42L__$L4J$C$;\n"
operator|+
literal|"      }\n"
operator|+
literal|"\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"java_math_BigInteger_valueOf_42L__$L4J$C$ = java.math.BigInteger"
operator|+
literal|".valueOf(42L);\n"
operator|+
literal|"      static final java.math.BigInteger "
operator|+
literal|"java_math_BigInteger_valueOf_42L_add_java_math_BigInteger_valueOf_42L__$L4J$C$ = java_math_BigInteger_valueOf_42L__$L4J$C$.add(java_math_BigInteger_valueOf_42L__$L4J$C$);\n"
operator|+
literal|"    };\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|42L
argument_list|)
argument_list|)
argument_list|,
literal|"add"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|Types
operator|.
name|lookupMethod
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|42L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

