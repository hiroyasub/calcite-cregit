begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link net.hydromatic.linq4j.expressions.Expression}  * and subclasses.  */
end_comment

begin_class
specifier|public
class|class
name|ExpressionTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testLambdaCallsBinaryOp
parameter_list|()
block|{
comment|// A parameter for the lambda expression.
name|ParameterExpression
name|paramExpr
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"arg"
argument_list|)
decl_stmt|;
comment|// This expression represents a lambda expression
comment|// that adds 1 to the parameter value.
name|FunctionExpression
name|lambdaExpr
init|=
name|Expressions
operator|.
name|lambda
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|paramExpr
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|paramExpr
argument_list|)
argument_list|)
decl_stmt|;
comment|// Print out the expression.
name|String
name|s
init|=
name|Expressions
operator|.
name|toString
argument_list|(
name|lambdaExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new net.hydromatic.linq4j.function.Function1() {\n"
operator|+
literal|"  public Integer apply(Integer arg) {\n"
operator|+
literal|"    return arg + 2;\n"
operator|+
literal|"  }\n"
operator|+
literal|"  public Object apply(Object arg) {\n"
operator|+
literal|"    return apply(\n"
operator|+
literal|"      (Integer) arg);\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// Compile and run the lambda expression.
comment|// The value of the parameter is 1.
name|int
name|n
init|=
operator|(
name|Integer
operator|)
name|lambdaExpr
operator|.
name|compile
argument_list|()
operator|.
name|dynamicInvoke
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// This code example produces the following output:
comment|//
comment|// arg => (arg +2)
comment|// 3
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLambdaCallsTwoArgMethod
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
comment|// A parameter for the lambda expression.
name|ParameterExpression
name|paramS
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"s"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|paramBegin
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"begin"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|paramEnd
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"end"
argument_list|)
decl_stmt|;
comment|// This expression represents a lambda expression
comment|// that adds 1 to the parameter value.
name|FunctionExpression
name|lambdaExpr
init|=
name|Expressions
operator|.
name|lambda
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|paramS
argument_list|,
name|String
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"substring"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
argument_list|,
name|paramBegin
argument_list|,
name|paramEnd
argument_list|)
argument_list|,
name|paramS
argument_list|,
name|paramBegin
argument_list|,
name|paramEnd
argument_list|)
decl_stmt|;
comment|// Compile and run the lambda expression.
name|String
name|s
init|=
operator|(
name|String
operator|)
name|lambdaExpr
operator|.
name|compile
argument_list|()
operator|.
name|dynamicInvoke
argument_list|(
literal|"hello world"
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"lo w"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWrite
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1 + 2 + 3"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Parentheses needed, to override the left-associativity of +.
name|assertEquals
argument_list|(
literal|"1 + (2 + 3)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// No parentheses needed; higher precedence of * achieves the desired
comment|// effect.
name|assertEquals
argument_list|(
literal|"1 + 2 * 3"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1 * (2 + 3)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Parentheses needed, to overcome right-associativity of =.
name|assertEquals
argument_list|(
literal|"(1 = 2) = 3"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0 + (2 + 3).compareTo(1)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
literal|"compareTo"
argument_list|,
name|Collections
operator|.
expr|<
name|Class
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a.empno"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|Linq4jTest
operator|.
name|Employee
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|"empno"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|paramX
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new net.hydromatic.linq4j.function.Function1() {\n"
operator|+
literal|"  public Integer apply(String x) {\n"
operator|+
literal|"    return x.length();\n"
operator|+
literal|"  }\n"
operator|+
literal|"  public Object apply(Object x) {\n"
operator|+
literal|"    return apply(\n"
operator|+
literal|"      (String) x);\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function1
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|paramX
argument_list|,
literal|"length"
argument_list|,
name|Collections
operator|.
expr|<
name|Class
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|paramX
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new String[] {\n"
operator|+
literal|"  \"foo\",\n"
operator|+
literal|"  null,\n"
operator|+
literal|"  \"bar\\\"baz\"}"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|newArrayInit
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"bar\"baz"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(int) ((String) (Object) \"foo\").length()"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"length"
argument_list|,
name|Collections
operator|.
expr|<
name|Class
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolving a static method
name|assertEquals
argument_list|(
literal|"Integer.valueOf(\"0123\")"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|Collections
operator|.
expr|<
name|Class
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|singletonList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"0123"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ExpressionTest.java
end_comment

end_unit

