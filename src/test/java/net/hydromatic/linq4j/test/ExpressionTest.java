begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link net.hydromatic.linq4j.expressions.Expression}  * and subclasses.  */
end_comment

begin_class
specifier|public
class|class
name|ExpressionTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testLambdaCallsBinaryOp
parameter_list|()
block|{
comment|// A parameter for the lambda expression.
name|ParameterExpression
name|paramExpr
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"arg"
argument_list|)
decl_stmt|;
comment|// This expression represents a lambda expression
comment|// that adds 1 to the parameter value.
name|FunctionExpression
name|lambdaExpr
init|=
name|Expressions
operator|.
name|lambda
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|paramExpr
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|paramExpr
argument_list|)
argument_list|)
decl_stmt|;
comment|// Print out the expression.
name|String
name|s
init|=
name|Expressions
operator|.
name|toString
argument_list|(
name|lambdaExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new net.hydromatic.linq4j.function.Function1() {\n"
operator|+
literal|"  public int apply(Integer arg) {\n"
operator|+
literal|"    return arg + 2;\n"
operator|+
literal|"  }\n"
operator|+
literal|"  public Object apply(Object arg) {\n"
operator|+
literal|"    return apply(\n"
operator|+
literal|"      (Integer) arg);\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// Compile and run the lambda expression.
comment|// The value of the parameter is 1.
name|int
name|n
init|=
operator|(
name|Integer
operator|)
name|lambdaExpr
operator|.
name|compile
argument_list|()
operator|.
name|dynamicInvoke
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// This code example produces the following output:
comment|//
comment|// arg => (arg +2)
comment|// 3
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLambdaCallsTwoArgMethod
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
comment|// A parameter for the lambda expression.
name|ParameterExpression
name|paramS
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"s"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|paramBegin
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"begin"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|paramEnd
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"end"
argument_list|)
decl_stmt|;
comment|// This expression represents a lambda expression
comment|// that adds 1 to the parameter value.
name|FunctionExpression
name|lambdaExpr
init|=
name|Expressions
operator|.
name|lambda
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|paramS
argument_list|,
name|String
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"substring"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
argument_list|,
name|paramBegin
argument_list|,
name|paramEnd
argument_list|)
argument_list|,
name|paramS
argument_list|,
name|paramBegin
argument_list|,
name|paramEnd
argument_list|)
decl_stmt|;
comment|// Compile and run the lambda expression.
name|String
name|s
init|=
operator|(
name|String
operator|)
name|lambdaExpr
operator|.
name|compile
argument_list|()
operator|.
name|dynamicInvoke
argument_list|(
literal|"hello world"
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"lo w"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWrite
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1 + 2.0F + 3L + Long.valueOf(4L)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|2F
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3L
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|4L
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new java.math.BigDecimal(31415926L, 7)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|314159260
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Parentheses needed, to override the left-associativity of +.
name|assertEquals
argument_list|(
literal|"1 + (2 + 3)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// No parentheses needed; higher precedence of * achieves the desired
comment|// effect.
name|assertEquals
argument_list|(
literal|"1 + 2 * 3"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1 * (2 + 3)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Parentheses needed, to overcome right-associativity of =.
name|assertEquals
argument_list|(
literal|"(1 = 2) = 3"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ternary operator.
name|assertEquals
argument_list|(
literal|"1< 2 ? (3< 4 ? 5 : 6) : 7< 8 ? 9 : 10"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|lessThan
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|lessThan
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|lessThan
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|9
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0 + (double) (2 + 3)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a.empno"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|Linq4jTest
operator|.
name|Employee
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|"empno"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.util.Collections.EMPTY_LIST"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|class
argument_list|,
literal|"EMPTY_LIST"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|paramX
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new net.hydromatic.linq4j.function.Function1() {\n"
operator|+
literal|"  public int apply(String x) {\n"
operator|+
literal|"    return x.length();\n"
operator|+
literal|"  }\n"
operator|+
literal|"  public Object apply(Object x) {\n"
operator|+
literal|"    return apply(\n"
operator|+
literal|"      (String) x);\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function1
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|paramX
argument_list|,
literal|"length"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|paramX
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new String[] {\n"
operator|+
literal|"  \"foo\",\n"
operator|+
literal|"  null,\n"
operator|+
literal|"  \"bar\\\"baz\"}"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|newArrayInit
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"bar\"baz"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(int) ((String) (Object) \"foo\").length()"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"length"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolving a static method
name|assertEquals
argument_list|(
literal|"Integer.valueOf(\"0123\")"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|singletonList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"0123"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// precedence of not and instanceof
name|assertEquals
argument_list|(
literal|"!(o instanceof String)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|typeIs
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"o"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// not not
name|assertEquals
argument_list|(
literal|"!!(o instanceof String)"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|typeIs
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"o"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWriteConstant
parameter_list|()
block|{
comment|// primitives
name|assertEquals
argument_list|(
literal|"new int[] {\n"
operator|+
literal|"  1,\n"
operator|+
literal|"  2,\n"
operator|+
literal|"  -1}"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
operator|-
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// objects and nulls
name|assertEquals
argument_list|(
literal|"new String[] {\n"
operator|+
literal|"  \"foo\",\n"
operator|+
literal|"  null}"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|null
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// automatically call constructor if it matches fields
name|assertEquals
argument_list|(
literal|"new net.hydromatic.linq4j.test.Linq4jTest.Employee[] {\n"
operator|+
literal|"  new net.hydromatic.linq4j.test.Linq4jTest.Employee(\n"
operator|+
literal|"    100,\n"
operator|+
literal|"    \"Fred\",\n"
operator|+
literal|"    10),\n"
operator|+
literal|"  new net.hydromatic.linq4j.test.Linq4jTest.Employee(\n"
operator|+
literal|"    110,\n"
operator|+
literal|"    \"Bill\",\n"
operator|+
literal|"    30),\n"
operator|+
literal|"  new net.hydromatic.linq4j.test.Linq4jTest.Employee(\n"
operator|+
literal|"    120,\n"
operator|+
literal|"    \"Eric\",\n"
operator|+
literal|"    10),\n"
operator|+
literal|"  new net.hydromatic.linq4j.test.Linq4jTest.Employee(\n"
operator|+
literal|"    130,\n"
operator|+
literal|"    \"Janet\",\n"
operator|+
literal|"    10)}"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
name|Linq4jTest
operator|.
name|emps
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWriteArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1 + integers[2 + index]"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Expressions
operator|.
name|arrayIndex
argument_list|(
name|Expressions
operator|.
name|variable
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
literal|"integers"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Expressions
operator|.
name|variable
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"index"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWriteAnonymousClass
parameter_list|()
block|{
comment|// final List<String> baz = Arrays.asList("foo", "bar");
comment|// new AbstractList<String>() {
comment|//     public int size() {
comment|//         return baz.size();
comment|//     }
comment|//     public String get(int index) {
comment|//         return ((String) baz.get(index)).toUpperCase();
comment|//     }
comment|// }
specifier|final
name|ParameterExpression
name|bazParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Types
operator|.
name|of
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|indexParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"index"
argument_list|)
decl_stmt|;
name|BlockExpression
name|e
init|=
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|bazParameter
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Arrays
operator|.
name|class
argument_list|,
literal|"asList"
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Types
operator|.
name|of
argument_list|(
name|AbstractList
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
expr|<
name|MemberDeclaration
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|fieldDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
operator||
name|Modifier
operator|.
name|FINAL
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"qux"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"xyzzy"
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"size"
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterExpression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|bazParameter
argument_list|,
literal|"size"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"get"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|indexParameter
argument_list|)
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|bazParameter
argument_list|,
literal|"get"
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|indexParameter
argument_list|)
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"toUpperCase"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  final java.util.List<String> baz = java.util.Arrays.asList(\"foo\", \"bar\");\n"
operator|+
literal|"  new java.util.AbstractList<String>(){\n"
operator|+
literal|"    public final String qux = \"xyzzy\";\n"
operator|+
literal|"    public int size() {\n"
operator|+
literal|"      return baz.size();\n"
operator|+
literal|"    }\n"
operator|+
literal|"\n"
operator|+
literal|"    public String get(int index) {\n"
operator|+
literal|"      return ((String) baz.get(index)).toUpperCase();\n"
operator|+
literal|"    }\n"
operator|+
literal|"\n"
operator|+
literal|"  };\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWriteWhile
parameter_list|()
block|{
name|DeclarationExpression
name|xDecl
decl_stmt|,
name|yDecl
decl_stmt|;
name|Node
name|node
init|=
name|Expressions
operator|.
name|block
argument_list|(
name|xDecl
operator|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
literal|"x"
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|yDecl
operator|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
literal|"y"
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|while_
argument_list|(
name|Expressions
operator|.
name|lessThan
argument_list|(
name|xDecl
operator|.
name|parameter
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|preIncrementAssign
argument_list|(
name|yDecl
operator|.
name|parameter
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  int x = 10;\n"
operator|+
literal|"  int y = 0;\n"
operator|+
literal|"  while (x< 5) {\n"
operator|+
literal|"    ++y;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompile
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
comment|// Creating a parameter for the expression tree.
name|ParameterExpression
name|param
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Creating an expression for the method call and specifying its
comment|// parameter.
name|MethodCallExpression
name|methodCall
init|=
name|Expressions
operator|.
name|call
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|singletonList
argument_list|(
name|param
argument_list|)
argument_list|)
decl_stmt|;
comment|// The following statement first creates an expression tree,
comment|// then compiles it, and then runs it.
name|int
name|x
init|=
name|Expressions
operator|.
expr|<
name|Function1
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|>
name|lambda
argument_list|(
name|methodCall
argument_list|,
operator|new
name|ParameterExpression
index|[]
block|{
name|param
block|}
argument_list|)
operator|.
name|getFunction
argument_list|()
operator|.
name|apply
argument_list|(
literal|"1234"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBlockBuilder
parameter_list|()
block|{
name|checkBlockBuilder
argument_list|(
literal|false
argument_list|,
literal|"{\n"
operator|+
literal|"  final int three = 1 + 2;\n"
operator|+
literal|"  final int six = three * 2;\n"
operator|+
literal|"  final int nine = three * three;\n"
operator|+
literal|"  final int eighteen = three + six + nine;\n"
operator|+
literal|"  return eighteen;\n"
operator|+
literal|"}\n"
argument_list|)
expr_stmt|;
name|checkBlockBuilder
argument_list|(
literal|true
argument_list|,
literal|"{\n"
operator|+
literal|"  final int three = 1 + 2;\n"
operator|+
literal|"  return three + three * 2 + three * three;\n"
operator|+
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkBlockBuilder
parameter_list|(
name|boolean
name|optimizing
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|(
name|optimizing
argument_list|)
decl_stmt|;
name|Expression
name|one
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"one"
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|two
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"two"
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|three
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"three"
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|six
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"six"
argument_list|,
name|Expressions
operator|.
name|multiply
argument_list|(
name|three
argument_list|,
name|two
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|nine
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"nine"
argument_list|,
name|Expressions
operator|.
name|multiply
argument_list|(
name|three
argument_list|,
name|three
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|eighteen
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"eighteen"
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|three
argument_list|,
name|six
argument_list|)
argument_list|,
name|nine
argument_list|)
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|eighteen
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|statements
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBlockBuilder2
parameter_list|()
block|{
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|element
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"element"
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|comparator
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"comparator"
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|,
name|Comparator
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|treeSet
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"treeSet"
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|TreeSet
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|comparator
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|treeSet
argument_list|,
literal|"add"
argument_list|,
name|element
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  final java.util.Comparator comparator = null;\n"
operator|+
literal|"  return new java.util.TreeSet(\n"
operator|+
literal|"      comparator).add(null);\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|statements
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClassDecl
parameter_list|()
block|{
specifier|final
name|NewExpression
name|newExpression
init|=
name|Expressions
operator|.
name|new_
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
expr|<
name|MemberDeclaration
operator|>
name|asList
argument_list|(
operator|new
name|FieldDeclaration
argument_list|(
name|Modifier
operator|.
name|PUBLIC
operator||
name|Modifier
operator|.
name|FINAL
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ClassDeclaration
argument_list|(
name|Modifier
operator|.
name|PUBLIC
operator||
name|Modifier
operator|.
name|STATIC
argument_list|,
literal|"MyClass"
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|Type
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
expr|<
name|MemberDeclaration
operator|>
name|asList
argument_list|(
operator|new
name|FieldDeclaration
argument_list|(
literal|0
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FieldDeclaration
argument_list|(
literal|0
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"i"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new Object(){\n"
operator|+
literal|"  public final String foo = \"bar\";\n"
operator|+
literal|"  public static class MyClass {\n"
operator|+
literal|"    int x = 0;\n"
operator|+
literal|"  }\n"
operator|+
literal|"  int i;\n"
operator|+
literal|"}"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|newExpression
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReturn
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"if (true) {\n"
operator|+
literal|"  return;\n"
operator|+
literal|"}\n"
argument_list|,
name|Expressions
operator|.
name|toString
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ExpressionTest.java
end_comment

end_unit

