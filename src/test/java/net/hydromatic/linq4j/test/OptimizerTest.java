begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link net.hydromatic.linq4j.expressions.BlockBuilder}  * optimization capabilities.  */
end_comment

begin_class
specifier|public
class|class
name|OptimizerTest
extends|extends
name|BlockBuilderBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|optimizeComparison
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|ONE
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAlwaysTrue
parameter_list|()
block|{
comment|// true ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|TRUE
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAlwaysFalse
parameter_list|()
block|{
comment|// false ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return 2;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|FALSE
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAlwaysSame
parameter_list|()
block|{
comment|// bool ? 1 : 1
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|,
name|ONE
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonOptimizableTernary
parameter_list|()
block|{
comment|// bool ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return bool ? 1 : 2;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryRotateNot
parameter_list|()
block|{
comment|// !bool ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return bool ? 2 : 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryRotateEqualFalse
parameter_list|()
block|{
comment|// bool == false ? 1 : 2
name|assertEquals
argument_list|(
literal|"{\n  return bool ? 2 : 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|,
name|FALSE
argument_list|)
argument_list|,
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAtrueB
parameter_list|()
block|{
comment|// a ? true : b  === a || b
name|assertEquals
argument_list|(
literal|"{\n  return a || b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAtrueNull
parameter_list|()
block|{
comment|// a ? Boolean.TRUE : null  === a ? Boolean.TRUE : (Boolean) null
name|assertEquals
argument_list|(
literal|"{\n  return a ? Boolean.TRUE : (Boolean) null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|TRUE_B
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAtrueBoxed
parameter_list|()
block|{
comment|// a ? Boolean.TRUE : Boolean.valueOf(b)  === a || b
name|assertEquals
argument_list|(
literal|"{\n  return a || Boolean.valueOf(b);\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|TRUE_B
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryABtrue
parameter_list|()
block|{
comment|// a ? b : true  === !a || b
name|assertEquals
argument_list|(
literal|"{\n  return !a || b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAfalseB
parameter_list|()
block|{
comment|// a ? false : b === !a&& b
name|assertEquals
argument_list|(
literal|"{\n  return !a&& b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|FALSE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryABfalse
parameter_list|()
block|{
comment|// a ? b : false === a&& b
name|assertEquals
argument_list|(
literal|"{\n  return a&& b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryInEqualABCeqB
parameter_list|()
block|{
comment|// (v ? (Integer) null : inp0_) == null
name|assertEquals
argument_list|(
literal|"{\n  return v || inp0_ == null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|NULL_INTEGER
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"inp0_"
argument_list|)
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryInEqualABCeqC
parameter_list|()
block|{
comment|// (v ? inp0_ : (Integer) null) == null
name|assertEquals
argument_list|(
literal|"{\n  return !v || inp0_ == null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"inp0_"
argument_list|)
argument_list|,
name|NULL_INTEGER
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAeqBBA
parameter_list|()
block|{
comment|// a == b ? b : a
name|ParameterExpression
name|a
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|b
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return a;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAeqBAB
parameter_list|()
block|{
comment|// a == b ? a : b
name|ParameterExpression
name|a
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|b
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryInEqualABCneqB
parameter_list|()
block|{
comment|// (v ? (Integer) null : inp0_) != null
name|assertEquals
argument_list|(
literal|"{\n  return !(v || inp0_ == null);\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|NULL_INTEGER
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"inp0_"
argument_list|)
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryInEqualABCneqC
parameter_list|()
block|{
comment|// (v ? inp0_ : (Integer) null) != null
name|assertEquals
argument_list|(
literal|"{\n  return !(!v || inp0_ == null);\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"v"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"inp0_"
argument_list|)
argument_list|,
name|NULL_INTEGER
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAneqBBA
parameter_list|()
block|{
comment|// a != b ? b : a
name|ParameterExpression
name|a
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|b
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return b;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|optimizeTernaryAneqBAB
parameter_list|()
block|{
comment|// a != b ? a : b
name|ParameterExpression
name|a
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|b
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return a;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|andAlsoTrueBool
parameter_list|()
block|{
comment|// true&& bool
name|assertEquals
argument_list|(
literal|"{\n  return bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|TRUE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|andAlsoBoolTrue
parameter_list|()
block|{
comment|// bool&& true
name|assertEquals
argument_list|(
literal|"{\n  return bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|andAlsoFalseBool
parameter_list|()
block|{
comment|// false&& bool
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|FALSE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|andAlsoNullBool
parameter_list|()
block|{
comment|// null&& bool
name|assertEquals
argument_list|(
literal|"{\n  return null&& bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|NULL
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|andAlsoXY
parameter_list|()
block|{
comment|// x&& y
name|assertEquals
argument_list|(
literal|"{\n  return x&& y;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|andAlsoXX
parameter_list|()
block|{
comment|// x&& x
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|andAlso
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orElseTrueBool
parameter_list|()
block|{
comment|// true || bool
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|TRUE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orElseFalseBool
parameter_list|()
block|{
comment|// false || bool
name|assertEquals
argument_list|(
literal|"{\n  return bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|FALSE
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orElseNullBool
parameter_list|()
block|{
comment|// null || bool
name|assertEquals
argument_list|(
literal|"{\n  return null || bool;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|NULL
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orElseXY
parameter_list|()
block|{
comment|// x || y
name|assertEquals
argument_list|(
literal|"{\n  return x || y;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orElseXX
parameter_list|()
block|{
comment|// x || x
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalSameConst
parameter_list|()
block|{
comment|// 1 == 1
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|ONE
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalDifferentConst
parameter_list|()
block|{
comment|// 1 == 2
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalSameExpr
parameter_list|()
block|{
comment|// x == x
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalDifferentExpr
parameter_list|()
block|{
comment|// x == y
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|y
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x == y;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalPrimitiveNull
parameter_list|()
block|{
comment|// (int) x == null
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalObjectNull
parameter_list|()
block|{
comment|// (Integer) x == null
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x == null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalStringNull
parameter_list|()
block|{
comment|// "Y" == null
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalTypedNullUntypedNull
parameter_list|()
block|{
comment|// (Integer) null == null
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|NULL_INTEGER
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalUnypedNullTypedNull
parameter_list|()
block|{
comment|// null == (Integer) null
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|NULL
argument_list|,
name|NULL_INTEGER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalBoolTrue
parameter_list|()
block|{
comment|// x == true
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalBoolFalse
parameter_list|()
block|{
comment|// x == false
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return !x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualSameConst
parameter_list|()
block|{
comment|// 1 != 1
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|ONE
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualDifferentConst
parameter_list|()
block|{
comment|// 1 != 2
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualSameExpr
parameter_list|()
block|{
comment|// x != x
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualDifferentExpr
parameter_list|()
block|{
comment|// x != y
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|ParameterExpression
name|y
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x != y;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualPrimitiveNull
parameter_list|()
block|{
comment|// (int) x == null
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualObjectNull
parameter_list|()
block|{
comment|// (Integer) x == null
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x != null;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualStringNull
parameter_list|()
block|{
comment|// "Y" != null
name|assertEquals
argument_list|(
literal|"{\n  return true;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualTypedNullUntypedNull
parameter_list|()
block|{
comment|// (Integer) null != null
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|NULL_INTEGER
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualUnypedNullTypedNull
parameter_list|()
block|{
comment|// null != (Integer) null
name|assertEquals
argument_list|(
literal|"{\n  return false;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|NULL
argument_list|,
name|NULL_INTEGER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualBoolTrue
parameter_list|()
block|{
comment|// x != true
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return !x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|TRUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEqualBoolFalse
parameter_list|()
block|{
comment|// x != false
name|ParameterExpression
name|x
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n  return x;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleFolding
parameter_list|()
block|{
comment|// ( 1 == 2 ? 3 : 4 ) != (5 != 6 ? 4 : 8) ? 9 : 10
name|assertEquals
argument_list|(
literal|"{\n  return 10;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|ONE
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|9
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfTrue
parameter_list|()
block|{
comment|// if (true) {return 1}
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfTrueElse
parameter_list|()
block|{
comment|// if (true) {return 1} else {return 2}
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfFalse
parameter_list|()
block|{
comment|// if (false) {return 1}
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfFalseElse
parameter_list|()
block|{
comment|// if (false) {return 1} else {return 2}
name|assertEquals
argument_list|(
literal|"{\n  return 2;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfBoolTrue
parameter_list|()
block|{
comment|// if (bool) {return 1} else if (true) {return 2}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  } else {\n"
operator|+
literal|"    return 2;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfBoolTrueElse
parameter_list|()
block|{
comment|// if (bool) {return 1} else if (true) {return 2} else {return 3}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  } else {\n"
operator|+
literal|"    return 2;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|THREE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfBoolFalse
parameter_list|()
block|{
comment|// if (bool) {return 1} else if (false) {return 2}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfBoolFalseElse
parameter_list|()
block|{
comment|// if (bool) {return 1} else if (false) {return 2} else {return 3}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  } else {\n"
operator|+
literal|"    return 3;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|THREE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conditionalIfBoolFalseTrue
parameter_list|()
block|{
comment|// if (bool) {1} else if (false) {2} if (true) {4} else {5}
name|Expression
name|bool
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"bool"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  if (bool) {\n"
operator|+
literal|"    return 1;\n"
operator|+
literal|"  } else {\n"
operator|+
literal|"    return 4;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|bool
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|ONE
argument_list|)
argument_list|,
name|FALSE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|TWO
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|FOUR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|castIntToShort
parameter_list|()
block|{
comment|// return (short) 1 --> return (short) 1
name|assertEquals
argument_list|(
literal|"{\n  return (short)1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|ONE
argument_list|,
name|short
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|castIntToInt
parameter_list|()
block|{
comment|// return (int) 1 --> return 1L
name|assertEquals
argument_list|(
literal|"{\n  return 1;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|ONE
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|castIntToLong
parameter_list|()
block|{
comment|// return (long) 1 --> return 1L
name|assertEquals
argument_list|(
literal|"{\n  return 1L;\n}\n"
argument_list|,
name|optimize
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|ONE
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

