begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Extensions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for LINQ4J.  */
end_comment

begin_class
specifier|public
class|class
name|Linq4jTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testSelect
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Extensions
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Bill, Eric, Jane]"
argument_list|,
name|names
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWhere
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Extensions
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|deptno
operator|<
literal|15
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Eric, Jane]"
argument_list|,
name|names
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectMany
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameSeqs
init|=
name|Extensions
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|Department
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|apply
parameter_list|(
name|Department
name|a0
parameter_list|)
block|{
return|return
name|Extensions
operator|.
name|asEnumerable
argument_list|(
name|a0
operator|.
name|employees
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|arg0
parameter_list|,
name|Integer
name|arg1
parameter_list|)
block|{
return|return
literal|"#"
operator|+
name|arg1
operator|+
literal|": "
operator|+
name|arg0
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[#0: Fred, #1: Eric, #2: Jane, #3: Bill]"
argument_list|,
name|nameSeqs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Employee
block|{
specifier|final
name|int
name|empno
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|public
name|Employee
parameter_list|(
name|int
name|empno
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|deptno
parameter_list|)
block|{
name|this
operator|.
name|empno
operator|=
name|empno
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Employee(name: "
operator|+
name|name
operator|+
literal|", deptno:"
operator|+
name|deptno
operator|+
literal|")"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Department
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
decl_stmt|;
specifier|public
name|Department
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|deptno
parameter_list|,
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
name|this
operator|.
name|employees
operator|=
name|employees
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Department(name: "
operator|+
name|name
operator|+
literal|", deptno:"
operator|+
name|deptno
operator|+
literal|", employees: "
operator|+
name|employees
operator|+
literal|")"
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|Employee
index|[]
name|emps
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|100
argument_list|,
literal|"Fred"
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|110
argument_list|,
literal|"Bill"
argument_list|,
literal|30
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|120
argument_list|,
literal|"Eric"
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|130
argument_list|,
literal|"Jane"
argument_list|,
literal|10
argument_list|)
block|,     }
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Department
index|[]
name|depts
init|=
block|{
operator|new
name|Department
argument_list|(
literal|"Sales"
argument_list|,
literal|10
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|,
name|emps
index|[
literal|2
index|]
argument_list|,
name|emps
index|[
literal|3
index|]
argument_list|)
argument_list|)
block|,
operator|new
name|Department
argument_list|(
literal|"HR"
argument_list|,
literal|20
argument_list|,
name|Collections
operator|.
expr|<
name|Employee
operator|>
name|emptyList
argument_list|()
argument_list|)
block|,
operator|new
name|Department
argument_list|(
literal|"Marketing"
argument_list|,
literal|30
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|emps
index|[
literal|1
index|]
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
block|}
end_class

begin_comment
comment|// End Linq4jTest.java
end_comment

end_unit

