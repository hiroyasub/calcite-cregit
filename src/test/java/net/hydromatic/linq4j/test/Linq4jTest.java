begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for LINQ4J.  */
end_comment

begin_class
specifier|public
class|class
name|Linq4jTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
name|EMP_NAME_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|name
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
name|EMP_DEPTNO_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|deptno
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
name|EMP_EMPNO_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|empno
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Department
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|>
name|DEPT_EMPLOYEES_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Department
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|apply
parameter_list|(
name|Department
name|a0
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|a0
operator|.
name|employees
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Department
argument_list|,
name|String
argument_list|>
name|DEPT_NAME_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Department
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
return|return
name|department
operator|.
name|name
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|DEPT_DEPTNO_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
return|return
name|department
operator|.
name|deptno
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|IntegerFunction1
argument_list|<
name|Department
argument_list|>
name|DEPT_DEPTNO_SELECTOR2
init|=
operator|new
name|IntegerFunction1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|apply
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
return|return
name|department
operator|.
name|deptno
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Function1
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
name|ONE_SELECTOR
init|=
operator|new
name|Function1
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Object
name|employee
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function2
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Integer
argument_list|>
name|PAIR_SELECTOR
init|=
operator|new
name|Function2
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Object
name|employee
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|testSelect
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|select
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Bill, Eric, Janet]"
argument_list|,
name|names
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWhere
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|)
block|{
return|return
name|employee
operator|.
name|deptno
operator|<
literal|15
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Eric, Janet]"
argument_list|,
name|names
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWhereIndexed
parameter_list|()
block|{
comment|// Returns every other employee.
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate2
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|employee
parameter_list|,
name|Integer
name|n
parameter_list|)
block|{
return|return
name|n
operator|%
literal|2
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
operator|.
name|select
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Eric]"
argument_list|,
name|names
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectMany
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameSeqs
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|selectMany
argument_list|(
name|DEPT_EMPLOYEES_SELECTOR
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
literal|"#"
operator|+
name|v2
operator|+
literal|": "
operator|+
name|v1
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[#0: Fred, #1: Eric, #2: Janet, #3: Bill]"
argument_list|,
name|nameSeqs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCount
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCountPredicate
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|count
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|employees
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLongCount
parameter_list|()
block|{
specifier|final
name|long
name|count
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|longCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLongCountPredicate
parameter_list|()
block|{
specifier|final
name|long
name|count
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|longCount
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|employees
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAverageSelector
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|average
argument_list|(
name|DEPT_DEPTNO_SELECTOR2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMin
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|select
argument_list|(
name|DEPT_DEPTNO_SELECTOR
argument_list|)
operator|.
name|min
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMinSelector
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|min
argument_list|(
name|DEPT_DEPTNO_SELECTOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMinSelector2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|min
argument_list|(
name|DEPT_DEPTNO_SELECTOR2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMax
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|30
argument_list|,
operator|(
name|int
operator|)
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|select
argument_list|(
name|DEPT_DEPTNO_SELECTOR
argument_list|)
operator|.
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMaxSelector
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|30
argument_list|,
operator|(
name|int
operator|)
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|max
argument_list|(
name|DEPT_DEPTNO_SELECTOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMaxSelector2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|max
argument_list|(
name|DEPT_DEPTNO_SELECTOR2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAggregate
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Sales,HR,Marketing"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|select
argument_list|(
name|DEPT_NAME_SELECTOR
argument_list|)
operator|.
name|aggregate
argument_list|(
literal|null
argument_list|,
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|==
literal|null
condition|?
name|v2
else|:
name|v1
operator|+
literal|","
operator|+
name|v2
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToMap
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
name|map
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toMap
argument_list|(
name|EMP_EMPNO_SELECTOR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|110
argument_list|)
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Bill"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToMap2
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toMap
argument_list|(
name|EMP_EMPNO_SELECTOR
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|110
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToLookup
parameter_list|()
block|{
specifier|final
name|Lookup
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
name|lookup
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toLookup
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|Employee
argument_list|>
name|grouping
range|:
name|lookup
control|)
block|{
operator|++
name|n
expr_stmt|;
switch|switch
condition|(
name|grouping
operator|.
name|getKey
argument_list|()
condition|)
block|{
case|case
literal|10
case|:
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|grouping
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|30
case|:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|grouping
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unknown department number "
operator|+
name|grouping
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|n
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToLookupSelector
parameter_list|()
block|{
specifier|final
name|Lookup
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|lookup
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toLookup
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|EMP_NAME_SELECTOR
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Grouping
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|grouping
range|:
name|lookup
control|)
block|{
operator|++
name|n
expr_stmt|;
switch|switch
condition|(
name|grouping
operator|.
name|getKey
argument_list|()
condition|)
block|{
case|case
literal|10
case|:
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|grouping
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Fred"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Eric"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Janet"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Bill"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|30
case|:
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|grouping
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Bill"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|grouping
operator|.
name|contains
argument_list|(
literal|"Fred"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unknown department number "
operator|+
name|grouping
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|n
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[10:3, 30:1]"
argument_list|,
name|lookup
operator|.
name|applyResultSelector
argument_list|(
operator|new
name|Function2
argument_list|<
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|Enumerable
argument_list|<
name|String
argument_list|>
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|+
literal|":"
operator|+
name|v2
operator|.
name|count
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToLookupSelectorComparer
parameter_list|()
block|{
specifier|final
name|Lookup
argument_list|<
name|String
argument_list|,
name|Employee
argument_list|>
name|lookup
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|toLookup
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|,
operator|new
name|EqualityComparer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|equal
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|length
argument_list|()
operator|==
name|v2
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lookup
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[Fred, Janet]"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|lookup
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Grouping
argument_list|<
name|String
argument_list|,
name|Employee
argument_list|>
name|grouping
range|:
name|lookup
operator|.
name|orderBy
argument_list|(
name|Linq4jTest
operator|.
expr|<
name|String
argument_list|,
name|Employee
operator|>
name|groupingKeyExtractor
argument_list|()
argument_list|)
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|grouping
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Fred: [Employee(name: Fred, deptno:10), Employee(name: Bill, deptno:30), Employee(name: Eric, deptno:10)]\n"
operator|+
literal|"Janet: [Employee(name: Janet, deptno:10)]\n"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
name|Function1
argument_list|<
name|Grouping
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|K
argument_list|>
name|groupingKeyExtractor
parameter_list|()
block|{
return|return
operator|new
name|Function1
argument_list|<
name|Grouping
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|K
argument_list|>
argument_list|()
block|{
specifier|public
name|K
name|apply
parameter_list|(
name|Grouping
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|a0
parameter_list|)
block|{
return|return
name|a0
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Tests the version of {@link ExtendedEnumerable#groupBy}    * that uses an accumulator; does not build intermediate lists.    */
specifier|public
name|void
name|testGroupBy
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|groupBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function0
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|,
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v1
parameter_list|,
name|Employee
name|e0
parameter_list|)
block|{
return|return
name|v1
operator|==
literal|null
condition|?
name|e0
operator|.
name|name
else|:
operator|(
name|v1
operator|+
literal|"+"
operator|+
name|e0
operator|.
name|name
operator|)
return|;
block|}
block|}
argument_list|,
operator|new
name|Function2
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|+
literal|": "
operator|+
name|v2
return|;
block|}
block|}
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[10: Fred+Eric+Janet, 30: Bill]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the version of    * {@link ExtendedEnumerable#aggregate}    * that has a result selector. Note how similar it is to    * {@link #testGroupBy()}.    */
specifier|public
name|void
name|testAggregate2
parameter_list|()
block|{
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|aggregate
argument_list|(
operator|new
name|Function0
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
operator|.
name|apply
argument_list|()
argument_list|,
operator|new
name|Function2
argument_list|<
name|String
argument_list|,
name|Employee
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v1
parameter_list|,
name|Employee
name|e0
parameter_list|)
block|{
return|return
name|v1
operator|==
literal|null
condition|?
name|e0
operator|.
name|name
else|:
operator|(
name|v1
operator|+
literal|"+"
operator|+
name|e0
operator|.
name|name
operator|)
return|;
block|}
block|}
argument_list|,
operator|new
name|Function1
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|v2
parameter_list|)
block|{
return|return
literal|"<no key>: "
operator|+
name|v2
return|;
block|}
block|}
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<no key>: Fred+Bill+Eric+Janet"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCast
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Number
operator|)
literal|2
argument_list|,
literal|null
argument_list|,
literal|3.14
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|cast
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkCast
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIterableCast
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Number
operator|)
literal|2
argument_list|,
literal|null
argument_list|,
literal|3.14
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|cast
argument_list|(
name|numbers
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkCast
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCast
parameter_list|(
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|x
init|=
name|enumerator
operator|.
name|current
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// good
block|}
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOfType
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Number
operator|)
literal|2
argument_list|,
literal|null
argument_list|,
literal|3.14
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|numbers
argument_list|)
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkIterable
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIterableOfType
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Number
operator|)
literal|2
argument_list|,
literal|null
argument_list|,
literal|3.14
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|ofType
argument_list|(
name|numbers
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|checkIterable
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkIterable
parameter_list|(
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|enumerator
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConcat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnion
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|union
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|union
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntersect
parameter_list|()
block|{
specifier|final
name|Employee
index|[]
name|emps2
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|150
argument_list|,
literal|"Theodore"
argument_list|,
literal|10
argument_list|)
block|,
name|emps
index|[
literal|3
index|]
block|,     }
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|intersect
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps2
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExcept
parameter_list|()
block|{
specifier|final
name|Employee
index|[]
name|emps2
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|150
argument_list|,
literal|"Theodore"
argument_list|,
literal|10
argument_list|)
block|,
name|emps
index|[
literal|3
index|]
block|,     }
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|except
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps2
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGroupJoin
parameter_list|()
block|{
comment|// Note #1: Group join is a "left join": "bad employees" are filtered
comment|//   out, but empty departments are not.
comment|// Note #2: Order of departments is preserved.
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|groupJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
argument_list|,
name|DEPT_DEPTNO_SELECTOR
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Department
argument_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|v2
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Employee
name|employee
range|:
name|v2
control|)
block|{
if|if
condition|(
name|n
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|employee
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|append
argument_list|(
literal|"] work(s) in "
argument_list|)
operator|.
name|append
argument_list|(
name|v1
operator|.
name|name
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[[Fred, Eric, Janet] work(s) in Sales, "
operator|+
literal|"[] work(s) in HR, "
operator|+
literal|"[Bill] work(s) in Marketing]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJoin
parameter_list|()
block|{
comment|// Note #1: Inner on both sides. Employees with bad departments,
comment|//   and departments with no employees are eliminated.
comment|// Note #2: Order of employees is preserved.
name|String
name|s
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|badEmps
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|DEPT_DEPTNO_SELECTOR
argument_list|,
operator|new
name|Function2
argument_list|<
name|Employee
argument_list|,
name|Department
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|,
name|Department
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|+
literal|" works in "
operator|+
name|v2
operator|.
name|name
return|;
block|}
block|}
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
expr|<
name|String
operator|>
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Bill works in Marketing, "
operator|+
literal|"Eric works in Sales, "
operator|+
literal|"Fred works in Sales, "
operator|+
literal|"Janet works in Sales]"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJoinCartesianProduct
parameter_list|()
block|{
name|int
name|n
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
operator|<
name|Department
decl_stmt|,
name|Integer
decl_stmt|,
name|Integer
decl|>
name|join
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
operator|(
name|Function1
operator|)
name|ONE_SELECTOR
argument_list|,
operator|(
name|Function1
operator|)
name|ONE_SELECTOR
argument_list|,
operator|(
name|Function2
operator|)
name|PAIR_SELECTOR
argument_list|)
decl|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|n
argument_list|)
expr_stmt|;
comment|// 4 employees times 3 departments
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testCartesianProductEnumerator
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|abc
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|xy
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|product0
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|product0
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|productFullEmpty
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|abc
operator|.
name|enumerator
argument_list|()
argument_list|,
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|productFullEmpty
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|productEmptyFull
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|abc
operator|.
name|enumerator
argument_list|()
argument_list|,
name|Linq4j
operator|.
expr|<
name|String
operator|>
name|emptyEnumerator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|productEmptyFull
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|productAbcXy
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|abc
operator|.
name|enumerator
argument_list|()
argument_list|,
name|xy
operator|.
name|enumerator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|productAbcXy
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"y"
argument_list|)
argument_list|,
name|productAbcXy
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"x"
argument_list|)
argument_list|,
name|productAbcXy
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|productAbcXy
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAsQueryable
parameter_list|()
block|{
comment|// "count" is an Enumerable method.
specifier|final
name|int
name|n
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|n
argument_list|)
expr_stmt|;
comment|// "where" is a Queryable method
comment|// first, use a lambda
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Employee
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Queryable
argument_list|<
name|Employee
argument_list|>
name|nh
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|where
argument_list|(
name|Expressions
operator|.
name|lambda
argument_list|(
name|Predicate1
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|parameter
argument_list|,
name|Employee
operator|.
name|class
argument_list|,
literal|"deptno"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|parameter
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nh
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// second, use an expression
specifier|final
name|Queryable
argument_list|<
name|Employee
argument_list|>
name|nh2
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|where
argument_list|(
name|Expressions
operator|.
name|lambda
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Employee
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Employee
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|deptno
operator|==
literal|10
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nh2
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// use lambda, this time call whereN
name|ParameterExpression
name|parameterE
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Employee
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParameterExpression
name|parameterN
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
decl_stmt|;
specifier|final
name|Queryable
argument_list|<
name|Employee
argument_list|>
name|nh3
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|whereN
argument_list|(
name|Expressions
operator|.
name|lambda
argument_list|(
name|Predicate2
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|andAlso
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|parameterE
argument_list|,
name|Employee
operator|.
name|class
argument_list|,
literal|"deptno"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|lessThan
argument_list|(
name|parameterN
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|parameterE
argument_list|,
name|parameterN
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nh3
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTake_enumerable
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|enumerableDeptsResult
init|=
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|enumerableDepts
argument_list|,
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|enumerableDeptsResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|enumerableDeptsResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|enumerableDeptsResult
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTake_queryable
parameter_list|()
block|{
specifier|final
name|Queryable
argument_list|<
name|Department
argument_list|>
name|querableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|queryableResult
init|=
name|QueryableDefaults
operator|.
name|take
argument_list|(
name|querableDepts
argument_list|,
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queryableResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|queryableResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|queryableResult
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTake_enumerable_zero_or_negative_size
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
argument_list|,
operator|-
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTake_queryable_zero_or_negative_size
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|QueryableDefaults
operator|.
name|take
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|QueryableDefaults
operator|.
name|take
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
argument_list|,
operator|-
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTake_enumerable_greater_than_length
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|depList
init|=
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|enumerableDepts
argument_list|,
literal|5
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|depList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|2
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTake_queryable_greater_than_length
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|depList
init|=
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|enumerableDepts
argument_list|,
literal|5
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|depList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|2
index|]
argument_list|,
name|depList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTakeWhile_enumerable_predicate
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|EnumerableDefaults
operator|.
name|takeWhile
argument_list|(
name|enumerableDepts
argument_list|,
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
comment|// Only one department:
comment|// 0: Sales --> true
comment|// 1: HR --> false
comment|// 2: Marketing --> never get to it (we stop after false)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTakeWhile_enumerable_function
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Department
argument_list|>
name|enumerableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|EnumerableDefaults
operator|.
name|takeWhile
argument_list|(
name|enumerableDepts
argument_list|,
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
comment|// Make sure we're passed the correct indices
name|assertEquals
argument_list|(
literal|"Invalid index passed to function"
argument_list|,
name|index
operator|++
argument_list|,
operator|(
name|int
operator|)
name|v2
argument_list|)
expr_stmt|;
return|return
literal|20
operator|!=
name|v1
operator|.
name|deptno
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTakeWhile_queryable_functionexpression_predicate
parameter_list|()
block|{
specifier|final
name|Queryable
argument_list|<
name|Department
argument_list|>
name|queryableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
decl_stmt|;
name|Predicate1
argument_list|<
name|Department
argument_list|>
name|predicate
init|=
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
literal|"HR"
operator|.
name|equals
argument_list|(
name|v1
operator|.
name|name
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|QueryableDefaults
operator|.
name|takeWhile
argument_list|(
name|queryableDepts
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|predicate
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|predicate
operator|=
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
literal|"Sales"
operator|.
name|equals
argument_list|(
name|v1
operator|.
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|deptList
operator|=
name|QueryableDefaults
operator|.
name|takeWhile
argument_list|(
name|queryableDepts
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|predicate
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTakeWhileN
parameter_list|()
block|{
specifier|final
name|Queryable
argument_list|<
name|Department
argument_list|>
name|queryableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
decl_stmt|;
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|function2
init|=
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
comment|// Make sure we're passed the correct indices
name|assertEquals
argument_list|(
literal|"Invalid index passed to function"
argument_list|,
name|index
operator|++
argument_list|,
operator|(
name|int
operator|)
name|v2
argument_list|)
expr_stmt|;
return|return
name|v2
operator|<
literal|2
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|QueryableDefaults
operator|.
name|takeWhileN
argument_list|(
name|queryableDepts
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|function2
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|0
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|depts
index|[
literal|1
index|]
argument_list|,
name|deptList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTakeWhileN_no_match
parameter_list|()
block|{
specifier|final
name|Queryable
argument_list|<
name|Department
argument_list|>
name|queryableDepts
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
decl_stmt|;
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|function2
init|=
name|Functions
operator|.
name|falsePredicate2
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|QueryableDefaults
operator|.
name|takeWhileN
argument_list|(
name|queryableDepts
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|function2
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deptList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSkip
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skipWhile
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skipWhile
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Department
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|)
block|{
return|return
operator|!
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|skipWhile
argument_list|(
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
operator|||
name|v2
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|depts
argument_list|)
operator|.
name|asQueryable
argument_list|()
operator|.
name|skipWhileN
argument_list|(
name|Expressions
operator|.
expr|<
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
operator|>
name|lambda
argument_list|(
operator|new
name|Predicate2
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Department
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"Sales"
argument_list|)
operator|||
name|v2
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOrderBy
parameter_list|()
block|{
comment|// Note: sort is stable. Records occur Fred, Eric, Janet in input.
name|assertEquals
argument_list|(
literal|"[Employee(name: Fred, deptno:10),"
operator|+
literal|" Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Janet, deptno:10),"
operator|+
literal|" Employee(name: Bill, deptno:30)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOrderByComparator
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[Employee(name: Bill, deptno:30),"
operator|+
literal|" Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Fred, deptno:10),"
operator|+
literal|" Employee(name: Janet, deptno:10)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|,
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|reverseOrder
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOrderByInSeries
parameter_list|()
block|{
comment|// OrderBy in series works because sort is stable.
name|assertEquals
argument_list|(
literal|"[Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Fred, deptno:10),"
operator|+
literal|" Employee(name: Janet, deptno:10),"
operator|+
literal|" Employee(name: Bill, deptno:30)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|orderBy
argument_list|(
name|EMP_DEPTNO_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOrderByDescending
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[Employee(name: Janet, deptno:10),"
operator|+
literal|" Employee(name: Fred, deptno:10),"
operator|+
literal|" Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Bill, deptno:30)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|orderByDescending
argument_list|(
name|EMP_NAME_SELECTOR
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverse
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[Employee(name: Janet, deptno:10),"
operator|+
literal|" Employee(name: Eric, deptno:10),"
operator|+
literal|" Employee(name: Bill, deptno:30),"
operator|+
literal|" Employee(name: Fred, deptno:10)]"
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|emps
argument_list|)
operator|.
name|reverse
argument_list|()
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Employee
block|{
specifier|public
specifier|final
name|int
name|empno
decl_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|public
name|Employee
parameter_list|(
name|int
name|empno
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|deptno
parameter_list|)
block|{
name|this
operator|.
name|empno
operator|=
name|empno
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Employee(name: "
operator|+
name|name
operator|+
literal|", deptno:"
operator|+
name|deptno
operator|+
literal|")"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Department
block|{
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
decl_stmt|;
specifier|public
name|Department
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|deptno
parameter_list|,
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
name|this
operator|.
name|employees
operator|=
name|employees
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Department(name: "
operator|+
name|name
operator|+
literal|", deptno:"
operator|+
name|deptno
operator|+
literal|", employees: "
operator|+
name|employees
operator|+
literal|")"
return|;
block|}
block|}
comment|// Cedric works in a non-existent department.
specifier|public
specifier|static
specifier|final
name|Employee
index|[]
name|badEmps
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|140
argument_list|,
literal|"Cedric"
argument_list|,
literal|40
argument_list|)
block|,   }
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Employee
index|[]
name|emps
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|100
argument_list|,
literal|"Fred"
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|110
argument_list|,
literal|"Bill"
argument_list|,
literal|30
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|120
argument_list|,
literal|"Eric"
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|130
argument_list|,
literal|"Janet"
argument_list|,
literal|10
argument_list|)
block|,   }
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Department
index|[]
name|depts
init|=
block|{
operator|new
name|Department
argument_list|(
literal|"Sales"
argument_list|,
literal|10
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|,
name|emps
index|[
literal|2
index|]
argument_list|,
name|emps
index|[
literal|3
index|]
argument_list|)
argument_list|)
block|,
operator|new
name|Department
argument_list|(
literal|"HR"
argument_list|,
literal|20
argument_list|,
name|Collections
operator|.
expr|<
name|Employee
operator|>
name|emptyList
argument_list|()
argument_list|)
block|,
operator|new
name|Department
argument_list|(
literal|"Marketing"
argument_list|,
literal|30
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|emps
index|[
literal|1
index|]
argument_list|)
argument_list|)
block|,   }
decl_stmt|;
block|}
end_class

begin_comment
comment|// End Linq4jTest.java
end_comment

end_unit

