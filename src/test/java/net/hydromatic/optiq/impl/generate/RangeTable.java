begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|generate
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|TableFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Table that returns a range of integers.  */
end_comment

begin_class
specifier|public
class|class
name|RangeTable
extends|extends
name|AbstractTable
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|start
decl_stmt|;
specifier|private
specifier|final
name|int
name|end
decl_stmt|;
specifier|protected
name|RangeTable
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|RelDataType
name|relDataType
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|elementType
argument_list|,
name|relDataType
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
comment|/** Creates a RangeTable. */
specifier|public
specifier|static
name|RangeTable
name|create
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|schema
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|integerType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
operator|.
name|of
argument_list|(
name|columnName
argument_list|,
name|integerType
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|RangeTable
argument_list|(
name|schema
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|rowType
argument_list|,
name|tableName
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|Integer
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
name|int
name|current
init|=
name|start
operator|-
literal|1
decl_stmt|;
specifier|public
name|Integer
name|current
parameter_list|()
block|{
if|if
condition|(
name|current
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
operator|++
name|current
expr_stmt|;
return|return
name|current
operator|<
name|end
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|current
operator|=
name|start
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/** Implementation of {@link net.hydromatic.optiq.TableFactory} that allows    * a {@link RangeTable} to be included as a custom table in an Optiq model    * file. */
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|TableFactory
argument_list|<
name|RangeTable
argument_list|>
block|{
specifier|public
name|RangeTable
name|create
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|operand
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
specifier|final
name|String
name|columnName
init|=
operator|(
name|String
operator|)
name|operand
operator|.
name|get
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|start
init|=
operator|(
name|Integer
operator|)
name|operand
operator|.
name|get
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|end
init|=
operator|(
name|Integer
operator|)
name|operand
operator|.
name|get
argument_list|(
literal|"end"
argument_list|)
decl_stmt|;
return|return
name|RangeTable
operator|.
name|create
argument_list|(
name|schema
argument_list|,
name|name
argument_list|,
name|columnName
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RangeTable.java
end_comment

end_unit

