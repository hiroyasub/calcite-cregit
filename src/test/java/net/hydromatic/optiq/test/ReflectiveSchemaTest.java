begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|MutableSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|ViewTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqConnection
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|test
operator|.
name|JdbcTest
operator|.
name|Employee
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link ReflectiveSchema}.  */
end_comment

begin_class
specifier|public
class|class
name|ReflectiveSchemaTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
specifier|final
name|Method
name|LINQ4J_AS_ENUMERABLE_METHOD
init|=
name|Types
operator|.
name|lookupMethod
argument_list|(
name|Linq4j
operator|.
name|class
argument_list|,
literal|"asEnumerable"
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
comment|/**      * Test that uses a JDBC connection as a linq4j {@link net.hydromatic.linq4j.QueryProvider}.      *      * @throws Exception on error      */
specifier|public
name|void
name|testQueryProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|JdbcTest
operator|.
name|getConnection
argument_list|(
literal|"hr"
argument_list|,
literal|"foodmart"
argument_list|)
decl_stmt|;
name|QueryProvider
name|queryProvider
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|QueryProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParameterExpression
name|e
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Employee
operator|.
name|class
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
comment|// "Enumerable<T> asEnumerable(final T[] ts)"
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|list
init|=
name|queryProvider
operator|.
name|createQuery
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Types
operator|.
name|of
argument_list|(
name|Enumerable
operator|.
name|class
argument_list|,
name|Employee
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|LINQ4J_AS_ENUMERABLE_METHOD
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
operator|.
name|emps
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"asQueryable"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|Employee
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Expressions
operator|.
expr|<
name|Predicate1
argument_list|<
name|Employee
argument_list|>
operator|>
name|lambda
argument_list|(
name|Expressions
operator|.
name|lessThan
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|e
argument_list|,
literal|"empid"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|160
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
operator|.
name|where
argument_list|(
name|Expressions
operator|.
expr|<
name|Predicate1
argument_list|<
name|Employee
argument_list|>
operator|>
name|lambda
argument_list|(
name|Expressions
operator|.
name|greaterThan
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|e
argument_list|,
literal|"empid"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|140
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|Expressions
operator|.
expr|<
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Object
index|[]
argument_list|>
operator|>
name|lambda
argument_list|(
name|Expressions
operator|.
name|new_
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|e
argument_list|,
literal|"empid"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|e
argument_list|,
literal|"name"
argument_list|)
argument_list|,
literal|"toUpperCase"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|150
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SEBASTIAN"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueryProviderSingleColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|JdbcTest
operator|.
name|getConnection
argument_list|(
literal|"hr"
argument_list|,
literal|"foodmart"
argument_list|)
decl_stmt|;
name|QueryProvider
name|queryProvider
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|QueryProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParameterExpression
name|e
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Employee
operator|.
name|class
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
comment|// "Enumerable<T> asEnumerable(final T[] ts)"
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|queryProvider
operator|.
name|createQuery
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Types
operator|.
name|of
argument_list|(
name|Enumerable
operator|.
name|class
argument_list|,
name|Employee
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|LINQ4J_AS_ENUMERABLE_METHOD
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
operator|.
name|emps
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"asQueryable"
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|Employee
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|Expressions
operator|.
expr|<
name|Function1
argument_list|<
name|Employee
argument_list|,
name|Integer
argument_list|>
operator|>
name|lambda
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|e
argument_list|,
literal|"empid"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|,
literal|150
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests a relation that is accessed via method syntax.      * The function returns a {@link net.hydromatic.linq4j.Queryable}.      */
specifier|public
name|void
name|_testOperator
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"net.hydromatic.optiq.jdbc.Driver"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:optiq:"
argument_list|)
decl_stmt|;
name|OptiqConnection
name|optiqConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|OptiqConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|JavaTypeFactory
name|typeFactory
init|=
name|optiqConnection
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|MutableSchema
name|rootSchema
init|=
name|optiqConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|MapSchema
name|schema
init|=
name|MapSchema
operator|.
name|create
argument_list|(
name|rootSchema
argument_list|,
literal|"s"
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addTableFunction
argument_list|(
literal|"GenerateStrings"
argument_list|,
name|Schemas
operator|.
name|methodMember
argument_list|(
name|JdbcTest
operator|.
name|GENERATE_STRINGS_METHOD
argument_list|,
name|typeFactory
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addTableFunction
argument_list|(
literal|"StringUnion"
argument_list|,
name|Schemas
operator|.
name|methodMember
argument_list|(
name|JdbcTest
operator|.
name|STRING_UNION_METHOD
argument_list|,
name|typeFactory
argument_list|)
argument_list|)
expr_stmt|;
name|ReflectiveSchema
operator|.
name|create
argument_list|(
name|rootSchema
argument_list|,
literal|"hr"
argument_list|,
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeQuery
argument_list|(
literal|"select *\n"
operator|+
literal|"from table(s.StringUnion(\n"
operator|+
literal|"  GenerateStrings(5),\n"
operator|+
literal|"  cursor (select name from emps)))\n"
operator|+
literal|"where char_length(s)> 3"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests a view.      */
specifier|public
name|void
name|testView
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"net.hydromatic.optiq.jdbc.Driver"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:optiq:"
argument_list|)
decl_stmt|;
name|OptiqConnection
name|optiqConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|OptiqConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|MutableSchema
name|rootSchema
init|=
name|optiqConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|MapSchema
name|schema
init|=
name|MapSchema
operator|.
name|create
argument_list|(
name|rootSchema
argument_list|,
literal|"s"
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addTableFunction
argument_list|(
literal|"emps_view"
argument_list|,
name|ViewTable
operator|.
name|viewFunction
argument_list|(
name|schema
argument_list|,
literal|"emps_view"
argument_list|,
literal|"select * from \"hr\".\"emps\" where \"deptno\" = 10"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ReflectiveSchema
operator|.
name|create
argument_list|(
name|rootSchema
argument_list|,
literal|"hr"
argument_list|,
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeQuery
argument_list|(
literal|"select *\n"
operator|+
literal|"from \"s\".\"emps_view\"\n"
operator|+
literal|"where \"empid\"< 120"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"empid=100; deptno=10; name=Bill; commission=1000\n"
argument_list|,
name|JdbcTest
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests column based on java.sql.Date field. */
specifier|public
name|void
name|testDateColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|DateColumnSchema
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"emps\""
argument_list|)
operator|.
name|returns
argument_list|(
literal|"hireDate=1970-01-01; empid=10; deptno=20; name=fred; commission=null\n"
operator|+
literal|"hireDate=1970-01-01; empid=10; deptno=20; name=bill; commission=null\n"
argument_list|)
expr_stmt|;
block|}
comment|/** Tests querying an object that has no public fields. */
specifier|public
name|void
name|testNoPublicFields
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|OptiqAssert
operator|.
name|AssertThat
name|with
init|=
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|CatchallSchema
argument_list|()
argument_list|)
decl_stmt|;
name|with
operator|.
name|query
argument_list|(
literal|"select 1 from \"s\".\"allPrivates\""
argument_list|)
operator|.
name|returns
argument_list|(
literal|"EXPR$0=1\n"
argument_list|)
expr_stmt|;
name|with
operator|.
name|query
argument_list|(
literal|"select \"x\" from \"s\".\"allPrivates\""
argument_list|)
operator|.
name|throws_
argument_list|(
literal|"Column 'x' not found in any table"
argument_list|)
expr_stmt|;
block|}
comment|/** Tests columns based on types such as java.sql.Date and java.util.Date.      *      * @see CatchallSchema#everyTypes */
specifier|public
name|void
name|testColumnTypes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|OptiqAssert
operator|.
name|AssertThat
name|with
init|=
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|CatchallSchema
argument_list|()
argument_list|)
decl_stmt|;
name|with
operator|.
name|query
argument_list|(
literal|"select \"primitiveBoolean\" from \"s\".\"everyTypes\""
argument_list|)
operator|.
name|returns
argument_list|(
literal|"primitiveBoolean=false\n"
operator|+
literal|"primitiveBoolean=true\n"
argument_list|)
expr_stmt|;
name|with
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"everyTypes\""
argument_list|)
operator|.
name|returns
argument_list|(
literal|"primitiveBoolean=false; primitiveByte=0; primitiveChar=\u0000; primitiveShort=0; primitiveInt=0; primitiveLong=0; primitiveFloat=0.0; primitiveDouble=0.0; wrapperBoolean=false; wrapperByte=0; wrapperCharacter=\u0000; wrapperShort=0; wrapperInteger=0; wrapperLong=0; wrapperFloat=0.0; wrapperDouble=0.0; sqlDate=1970-01-01; sqlTime=00:00:00; sqlTimestamp=1970-01-01T00:00:00Z; utilDate=1970-01-01T00:00:00Z; string=1\n"
operator|+
literal|"primitiveBoolean=true; primitiveByte=127; primitiveChar=\uffff; primitiveShort=32767; primitiveInt=2147483647; primitiveLong=9223372036854775807; primitiveFloat=3.4028235E38; primitiveDouble=1.7976931348623157E308; wrapperBoolean=null; wrapperByte=null; wrapperCharacter=null; wrapperShort=null; wrapperInteger=null; wrapperLong=null; wrapperFloat=null; wrapperDouble=null; sqlDate=null; sqlTime=null; sqlTimestamp=null; utilDate=null; string=null\n"
argument_list|)
expr_stmt|;
block|}
comment|/** Tests columns based on types such as java.sql.Date and java.util.Date.      *      * @see CatchallSchema#everyTypes */
specifier|public
name|void
name|testAggregateFunctions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|OptiqAssert
operator|.
name|AssertThat
name|with
init|=
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|CatchallSchema
argument_list|()
argument_list|)
decl_stmt|;
name|checkAgg
argument_list|(
name|with
argument_list|,
literal|"min"
argument_list|)
expr_stmt|;
name|checkAgg
argument_list|(
name|with
argument_list|,
literal|"max"
argument_list|)
expr_stmt|;
name|checkAgg
argument_list|(
name|with
argument_list|,
literal|"avg"
argument_list|)
expr_stmt|;
name|checkAgg
argument_list|(
name|with
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkAgg
parameter_list|(
name|OptiqAssert
operator|.
name|AssertThat
name|with
parameter_list|,
name|String
name|fn
parameter_list|)
block|{
for|for
control|(
name|Field
name|field
range|:
name|fn
operator|.
name|equals
argument_list|(
literal|"avg"
argument_list|)
condition|?
name|EveryType
operator|.
name|numericFields
argument_list|()
else|:
name|EveryType
operator|.
name|fields
argument_list|()
control|)
block|{
name|with
operator|.
name|query
argument_list|(
literal|"select "
operator|+
name|fn
operator|+
literal|"(\""
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"\") as c\n"
operator|+
literal|"from \"s\".\"everyTypes\""
argument_list|)
operator|.
name|returns
argument_list|(
name|Functions
operator|.
expr|<
name|String
argument_list|,
name|Void
operator|>
name|constantNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDivide
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|OptiqAssert
operator|.
name|AssertThat
name|with
init|=
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|CatchallSchema
argument_list|()
argument_list|)
decl_stmt|;
name|with
operator|.
name|query
argument_list|(
literal|"select \"wrapperLong\" / \"primitiveLong\" as c\n"
operator|+
literal|" from \"s\".\"everyTypes\" where \"primitiveLong\"<> 0"
argument_list|)
operator|.
name|planContains
argument_list|(
literal|"return current13.wrapperLong == null ? null : Long.valueOf(current13.wrapperLong.longValue() / current13.primitiveLong);"
argument_list|)
operator|.
name|returns
argument_list|(
literal|"C=null\n"
argument_list|)
expr_stmt|;
name|with
operator|.
name|query
argument_list|(
literal|"select \"wrapperLong\" / \"wrapperLong\" as c\n"
operator|+
literal|" from \"s\".\"everyTypes\" where \"primitiveLong\"<> 0"
argument_list|)
operator|.
name|planContains
argument_list|(
literal|"return current13.wrapperLong == null ? null : Long.valueOf(current13.wrapperLong.longValue() / current13.wrapperLong.longValue());"
argument_list|)
operator|.
name|returns
argument_list|(
literal|"C=null\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|OptiqAssert
operator|.
name|AssertThat
name|with
init|=
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|CatchallSchema
argument_list|()
argument_list|)
decl_stmt|;
name|checkOp
argument_list|(
name|with
argument_list|,
literal|"+"
argument_list|)
expr_stmt|;
name|checkOp
argument_list|(
name|with
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|checkOp
argument_list|(
name|with
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|checkOp
argument_list|(
name|with
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkOp
parameter_list|(
name|OptiqAssert
operator|.
name|AssertThat
name|with
parameter_list|,
name|String
name|fn
parameter_list|)
block|{
for|for
control|(
name|Field
name|field
range|:
name|EveryType
operator|.
name|numericFields
argument_list|()
control|)
block|{
for|for
control|(
name|Field
name|field2
range|:
name|EveryType
operator|.
name|numericFields
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
literal|"\""
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
decl_stmt|;
specifier|final
name|String
name|name2
init|=
literal|"\""
operator|+
name|field2
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
decl_stmt|;
name|with
operator|.
name|query
argument_list|(
literal|"select "
operator|+
name|name
operator|+
literal|"\n"
operator|+
literal|" "
operator|+
name|fn
operator|+
literal|" "
operator|+
name|name2
operator|+
literal|" as c\n"
operator|+
literal|"from \"s\".\"everyTypes\"\n"
operator|+
literal|"where "
operator|+
name|name
operator|+
literal|"<> 0"
argument_list|)
operator|.
name|returns
argument_list|(
name|Functions
operator|.
expr|<
name|String
argument_list|,
name|Void
operator|>
name|constantNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testCastFromString
parameter_list|()
block|{
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|CatchallSchema
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select cast(\"string\" as int) as c from \"s\".\"everyTypes\""
argument_list|)
operator|.
name|returns
argument_list|(
literal|"C=1\n"
operator|+
literal|"C=null\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isNumeric
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|Primitive
operator|.
name|flavor
argument_list|(
name|type
argument_list|)
condition|)
block|{
case|case
name|BOX
case|:
return|return
name|Primitive
operator|.
name|ofBox
argument_list|(
name|type
argument_list|)
operator|.
name|isNumeric
argument_list|()
return|;
case|case
name|PRIMITIVE
case|:
return|return
name|Primitive
operator|.
name|of
argument_list|(
name|type
argument_list|)
operator|.
name|isNumeric
argument_list|()
return|;
default|default:
return|return
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
comment|// e.g. BigDecimal
block|}
block|}
comment|/** Tests that if a field of a relation has an unrecognized type (in this      * case a {@link BitSet}) then it is treated as an object.      *      * @see CatchallSchema#badTypes */
specifier|public
name|void
name|testTableFieldHasBadType
parameter_list|()
throws|throws
name|Exception
block|{
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|CatchallSchema
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"badTypes\""
argument_list|)
operator|.
name|returns
argument_list|(
literal|"integer=0; bitSet={}\n"
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that a schema with a field whose type cannot be recognized      * throws an informative exception.      *      * @see CatchallSchema#enumerable      * @see CatchallSchema#list */
specifier|public
name|void
name|testSchemaFieldHasBadType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|OptiqAssert
operator|.
name|AssertThat
name|with
init|=
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
literal|"s"
argument_list|,
operator|new
name|CatchallSchema
argument_list|()
argument_list|)
decl_stmt|;
comment|// BitSet is not a valid relation type. It's as if "bitSet" field does
comment|// not exist.
name|with
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"bitSet\""
argument_list|)
operator|.
name|throws_
argument_list|(
literal|"Table 's.bitSet' not found"
argument_list|)
expr_stmt|;
comment|// Enumerable field returns 3 records with 0 fields
name|with
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"enumerable\""
argument_list|)
operator|.
name|returns
argument_list|(
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
comment|// List is implicitly converted to Enumerable
name|with
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"list\""
argument_list|)
operator|.
name|returns
argument_list|(
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|EmployeeWithHireDate
extends|extends
name|Employee
block|{
specifier|public
specifier|final
name|java
operator|.
name|sql
operator|.
name|Date
name|hireDate
decl_stmt|;
specifier|public
name|EmployeeWithHireDate
parameter_list|(
name|int
name|empid
parameter_list|,
name|int
name|deptno
parameter_list|,
name|String
name|name
parameter_list|,
name|Integer
name|commission
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Date
name|hireDate
parameter_list|)
block|{
name|super
argument_list|(
name|empid
argument_list|,
name|deptno
argument_list|,
name|name
argument_list|,
name|commission
argument_list|)
expr_stmt|;
name|this
operator|.
name|hireDate
operator|=
name|hireDate
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EveryType
block|{
specifier|public
specifier|final
name|boolean
name|primitiveBoolean
decl_stmt|;
specifier|public
specifier|final
name|byte
name|primitiveByte
decl_stmt|;
specifier|public
specifier|final
name|char
name|primitiveChar
decl_stmt|;
specifier|public
specifier|final
name|short
name|primitiveShort
decl_stmt|;
specifier|public
specifier|final
name|int
name|primitiveInt
decl_stmt|;
specifier|public
specifier|final
name|long
name|primitiveLong
decl_stmt|;
specifier|public
specifier|final
name|float
name|primitiveFloat
decl_stmt|;
specifier|public
specifier|final
name|double
name|primitiveDouble
decl_stmt|;
specifier|public
specifier|final
name|Boolean
name|wrapperBoolean
decl_stmt|;
specifier|public
specifier|final
name|Byte
name|wrapperByte
decl_stmt|;
specifier|public
specifier|final
name|Character
name|wrapperCharacter
decl_stmt|;
specifier|public
specifier|final
name|Short
name|wrapperShort
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|wrapperInteger
decl_stmt|;
specifier|public
specifier|final
name|Long
name|wrapperLong
decl_stmt|;
specifier|public
specifier|final
name|Float
name|wrapperFloat
decl_stmt|;
specifier|public
specifier|final
name|Double
name|wrapperDouble
decl_stmt|;
specifier|public
specifier|final
name|java
operator|.
name|sql
operator|.
name|Date
name|sqlDate
decl_stmt|;
specifier|public
specifier|final
name|Time
name|sqlTime
decl_stmt|;
specifier|public
specifier|final
name|Timestamp
name|sqlTimestamp
decl_stmt|;
specifier|public
specifier|final
name|Date
name|utilDate
decl_stmt|;
specifier|public
specifier|final
name|String
name|string
decl_stmt|;
specifier|public
name|EveryType
parameter_list|(
name|boolean
name|primitiveBoolean
parameter_list|,
name|byte
name|primitiveByte
parameter_list|,
name|char
name|primitiveChar
parameter_list|,
name|short
name|primitiveShort
parameter_list|,
name|int
name|primitiveInt
parameter_list|,
name|long
name|primitiveLong
parameter_list|,
name|float
name|primitiveFloat
parameter_list|,
name|double
name|primitiveDouble
parameter_list|,
name|Boolean
name|wrapperBoolean
parameter_list|,
name|Byte
name|wrapperByte
parameter_list|,
name|Character
name|wrapperCharacter
parameter_list|,
name|Short
name|wrapperShort
parameter_list|,
name|Integer
name|wrapperInteger
parameter_list|,
name|Long
name|wrapperLong
parameter_list|,
name|Float
name|wrapperFloat
parameter_list|,
name|Double
name|wrapperDouble
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Date
name|sqlDate
parameter_list|,
name|Time
name|sqlTime
parameter_list|,
name|Timestamp
name|sqlTimestamp
parameter_list|,
name|Date
name|utilDate
parameter_list|,
name|String
name|string
parameter_list|)
block|{
name|this
operator|.
name|primitiveBoolean
operator|=
name|primitiveBoolean
expr_stmt|;
name|this
operator|.
name|primitiveByte
operator|=
name|primitiveByte
expr_stmt|;
name|this
operator|.
name|primitiveChar
operator|=
name|primitiveChar
expr_stmt|;
name|this
operator|.
name|primitiveShort
operator|=
name|primitiveShort
expr_stmt|;
name|this
operator|.
name|primitiveInt
operator|=
name|primitiveInt
expr_stmt|;
name|this
operator|.
name|primitiveLong
operator|=
name|primitiveLong
expr_stmt|;
name|this
operator|.
name|primitiveFloat
operator|=
name|primitiveFloat
expr_stmt|;
name|this
operator|.
name|primitiveDouble
operator|=
name|primitiveDouble
expr_stmt|;
name|this
operator|.
name|wrapperBoolean
operator|=
name|wrapperBoolean
expr_stmt|;
name|this
operator|.
name|wrapperByte
operator|=
name|wrapperByte
expr_stmt|;
name|this
operator|.
name|wrapperCharacter
operator|=
name|wrapperCharacter
expr_stmt|;
name|this
operator|.
name|wrapperShort
operator|=
name|wrapperShort
expr_stmt|;
name|this
operator|.
name|wrapperInteger
operator|=
name|wrapperInteger
expr_stmt|;
name|this
operator|.
name|wrapperLong
operator|=
name|wrapperLong
expr_stmt|;
name|this
operator|.
name|wrapperFloat
operator|=
name|wrapperFloat
expr_stmt|;
name|this
operator|.
name|wrapperDouble
operator|=
name|wrapperDouble
expr_stmt|;
name|this
operator|.
name|sqlDate
operator|=
name|sqlDate
expr_stmt|;
name|this
operator|.
name|sqlTime
operator|=
name|sqlTime
expr_stmt|;
name|this
operator|.
name|sqlTimestamp
operator|=
name|sqlTimestamp
expr_stmt|;
name|this
operator|.
name|utilDate
operator|=
name|utilDate
expr_stmt|;
name|this
operator|.
name|string
operator|=
name|string
expr_stmt|;
block|}
specifier|static
name|Enumerable
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|EveryType
operator|.
name|class
operator|.
name|getFields
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|Enumerable
argument_list|<
name|Field
argument_list|>
name|numericFields
parameter_list|()
block|{
return|return
name|fields
argument_list|()
operator|.
name|where
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|Field
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Field
name|v1
parameter_list|)
block|{
return|return
name|isNumeric
argument_list|(
name|v1
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
comment|/** All field are private, therefore the resulting record has no fields. */
specifier|public
specifier|static
class|class
name|AllPrivate
block|{
specifier|private
specifier|final
name|int
name|x
init|=
literal|0
decl_stmt|;
block|}
comment|/** Table that has a field that cannot be recognized as a SQL type. */
specifier|public
specifier|static
class|class
name|BadType
block|{
specifier|public
specifier|final
name|int
name|integer
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
block|}
comment|/** Object whose fields are relations. Called "catch-all" because it's OK      * if tests add new fields. */
specifier|public
specifier|static
class|class
name|CatchallSchema
block|{
specifier|public
specifier|final
name|Enumerable
argument_list|<
name|Employee
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
operator|.
name|emps
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|Employee
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
operator|.
name|emps
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|EveryType
index|[]
name|everyTypes
init|=
block|{
operator|new
name|EveryType
argument_list|(
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
name|char
operator|)
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|,
literal|0F
argument_list|,
literal|0D
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
name|char
operator|)
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|,
literal|0F
argument_list|,
literal|0D
argument_list|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|Time
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"1"
argument_list|)
block|,
operator|new
name|EveryType
argument_list|(
literal|true
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|,
name|Character
operator|.
name|MAX_VALUE
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|,         }
decl_stmt|;
specifier|public
specifier|final
name|AllPrivate
index|[]
name|allPrivates
init|=
block|{
operator|new
name|AllPrivate
argument_list|()
block|}
decl_stmt|;
specifier|public
specifier|final
name|BadType
index|[]
name|badTypes
init|=
block|{
operator|new
name|BadType
argument_list|()
block|}
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|DateColumnSchema
block|{
specifier|public
specifier|final
name|EmployeeWithHireDate
index|[]
name|emps
init|=
block|{
operator|new
name|EmployeeWithHireDate
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|"fred"
argument_list|,
literal|null
argument_list|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|)
block|,
operator|new
name|EmployeeWithHireDate
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|"bill"
argument_list|,
literal|null
argument_list|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
literal|100
argument_list|)
argument_list|)
block|}
decl_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ReflectiveSchemaTest.java
end_comment

end_unit

