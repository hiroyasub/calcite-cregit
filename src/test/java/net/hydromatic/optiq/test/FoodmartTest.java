begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|test
package|;
end_package

begin_import
import|import
name|mondrian
operator|.
name|test
operator|.
name|data
operator|.
name|FoodMartData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|IntegerIntervalSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test case that runs the FoodMart reference queries.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|FoodmartTest
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FoodmartQuery
argument_list|>
name|queries
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|FoodmartQuery
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISABLED_IDS
init|=
literal|","
operator|+
literal|"-58,"
comment|//  "Unknown column 't0.desc' in 'field list'" related to VALUES
operator|+
literal|"-83,"
comment|// "java.lang.OutOfMemoryError: Java heap space"
operator|+
literal|"-368"
decl_stmt|;
comment|// multi VALUES
specifier|private
specifier|final
name|FoodmartQuery
name|query
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: foodmart({0})={1}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getSqls
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_UNQUOTED_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_SINGLE_QUOTES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|inputStream
init|=
operator|new
name|FoodMartData
argument_list|()
operator|.
name|getQueries
argument_list|()
decl_stmt|;
name|FoodmartRoot
name|root
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|inputStream
argument_list|,
name|FoodmartRoot
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|idList
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"optiq.ids"
argument_list|)
decl_stmt|;
for|for
control|(
name|FoodmartQuery
name|query
range|:
name|root
operator|.
name|queries
control|)
block|{
name|queries
operator|.
name|put
argument_list|(
name|query
operator|.
name|id
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Integer
name|id
range|:
name|IntegerIntervalSet
operator|.
name|of
argument_list|(
name|idList
comment|/* + DISABLED_IDS */
argument_list|)
control|)
block|{
specifier|final
name|FoodmartQuery
name|query1
init|=
name|queries
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|query1
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|id
block|,
name|query1
operator|.
name|sql
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|FoodmartQuery
name|query1
range|:
name|queries
operator|.
name|values
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|query1
operator|.
name|id
block|,
name|query1
operator|.
name|sql
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|public
name|FoodmartTest
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|queries
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
assert|assert
name|query
operator|.
name|id
operator|==
name|id
operator|:
name|id
operator|+
literal|":"
operator|+
name|query
operator|.
name|id
assert|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|test
parameter_list|()
block|{
try|try
block|{
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|withModel
argument_list|(
name|JdbcTest
operator|.
name|FOODMART_MODEL
argument_list|)
comment|// .with(OptiqAssert.Config.FOODMART_CLONE)
operator|.
name|withSchema
argument_list|(
literal|"foodmart"
argument_list|)
operator|.
name|query
argument_list|(
name|query
operator|.
name|sql
argument_list|)
operator|.
name|runs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test failed, id="
operator|+
name|query
operator|.
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FoodmartRoot
block|{
specifier|public
specifier|final
name|List
argument_list|<
name|FoodmartQuery
argument_list|>
name|queries
init|=
operator|new
name|ArrayList
argument_list|<
name|FoodmartQuery
argument_list|>
argument_list|()
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|FoodmartQuery
block|{
specifier|public
name|int
name|id
decl_stmt|;
specifier|public
name|String
name|sql
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|FoodmartColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|FoodmartColumn
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|List
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|>
argument_list|()
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|FoodmartColumn
block|{
specifier|public
name|String
name|name
decl_stmt|;
specifier|public
name|String
name|type
decl_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End FoodmartTest.java
end_comment

end_unit

