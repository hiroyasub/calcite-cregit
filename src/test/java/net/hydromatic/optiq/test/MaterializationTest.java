begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for the materialized view rewrite mechanism. Each test has a  * query and one or more materializations (what Oracle calls materialized views)  * and checks that the materialization is used.  */
end_comment

begin_class
specifier|public
class|class
name|MaterializationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFilter
parameter_list|()
block|{
try|try
block|{
name|OptiqAssert
operator|.
name|assertThat
argument_list|()
operator|.
name|with
argument_list|(
name|OptiqAssert
operator|.
name|Config
operator|.
name|REGULAR
argument_list|)
operator|.
name|withMaterializations
argument_list|(
name|JdbcTest
operator|.
name|HR_MODEL
argument_list|,
literal|"m0"
argument_list|,
literal|"select * from \"emps\" where \"deptno\" = 10"
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"empid\" + 1 from \"emps\" where \"deptno\" = 10"
argument_list|)
operator|.
name|enableMaterializations
argument_list|(
literal|true
argument_list|)
operator|.
name|explainContains
argument_list|(
literal|"EnumerableTableAccessRel(table=[[hr, m0]])"
argument_list|)
operator|.
name|sameResultWithMaterializationsDisabled
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|MaterializationService
operator|.
name|INSTANCE
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testSwapJoin
parameter_list|()
block|{
name|String
name|q1
init|=
literal|"select count(*) as c from \"foodmart\".\"sales_fact_1997\" as s join \"foodmart\".\"time_by_day\" as t on s.\"time_id\" = t.\"time_id\""
decl_stmt|;
name|String
name|q2
init|=
literal|"select count(*) as c from \"foodmart\".\"time_by_day\" as t join \"foodmart\".\"sales_fact_1997\" as s on t.\"time_id\" = s.\"time_id\""
decl_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testDifferentColumnNames
parameter_list|()
block|{
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testDifferentType
parameter_list|()
block|{
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPartialUnion
parameter_list|()
block|{
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testNonDisjointUnion
parameter_list|()
block|{
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testMaterializationReferencesTableInOtherSchema
parameter_list|()
block|{
block|}
block|}
end_class

begin_comment
comment|// End MaterializationTest.java
end_comment

end_unit

