begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|test
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * An abstract base class for implementing tests against {@link SqlValidator}.  *  *<p>A derived class can refine this test in two ways. First, it can add<code>  * testXxx()</code> methods, to test more functionality.  *  *<p>Second, it can override the {@link #getTester} method to return a  * different implementation of the {@link Tester} object. This encapsulates the  * differences between test environments, for example, which SQL parser or  * validator to use.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SqlValidatorTestCase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|protected
specifier|static
specifier|final
name|String
name|NL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|lineColPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"At line ([0-9]+), column ([0-9]+)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|lineColTwicePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?s)From line ([0-9]+), column ([0-9]+) to line ([0-9]+), column ([0-9]+): (.*)"
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|Tester
name|tester
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a test case.      */
specifier|public
name|SqlValidatorTestCase
parameter_list|(
name|SqlConformance
name|conformance
parameter_list|)
block|{
if|if
condition|(
name|conformance
operator|==
literal|null
condition|)
block|{
name|conformance
operator|=
name|SqlConformance
operator|.
name|Default
expr_stmt|;
block|}
name|this
operator|.
name|tester
operator|=
name|getTester
argument_list|(
name|conformance
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Returns a tester. Derived classes should override this method to run the      * same set of tests in a different testing environment.      *      * @param conformance Language version tests should check compatibility with      */
specifier|public
name|Tester
name|getTester
parameter_list|(
name|SqlConformance
name|conformance
parameter_list|)
block|{
return|return
operator|new
name|TesterImpl
argument_list|(
name|conformance
argument_list|)
return|;
block|}
specifier|public
name|void
name|check
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|tester
operator|.
name|assertExceptionIsThrown
argument_list|(
name|sql
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkExp
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|tester
operator|.
name|assertExceptionIsThrown
argument_list|(
name|TesterImpl
operator|.
name|buildQuery
argument_list|(
name|sql
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that a SQL query gives a particular error, or succeeds if {@code      * expected} is null.      */
specifier|public
specifier|final
name|void
name|checkFails
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|tester
operator|.
name|assertExceptionIsThrown
argument_list|(
name|sql
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that a SQL expression gives a particular error.      */
specifier|public
specifier|final
name|void
name|checkExpFails
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|tester
operator|.
name|assertExceptionIsThrown
argument_list|(
name|TesterImpl
operator|.
name|buildQuery
argument_list|(
name|sql
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that a SQL expression gives a particular error, and that the      * location of the error is the whole expression.      */
specifier|public
specifier|final
name|void
name|checkWholeExpFails
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
assert|assert
name|sql
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|)
operator|<
literal|0
assert|;
name|checkExpFails
argument_list|(
literal|"^"
operator|+
name|sql
operator|+
literal|"^"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkExpType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|checkColumnType
argument_list|(
name|TesterImpl
operator|.
name|buildQuery
argument_list|(
name|sql
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that a query returns a single column, and that the column has the      * expected type. For example,      *      *<blockquote><code>checkColumnType("SELECT empno FROM Emp", "INTEGER NOT      * NULL");</code></blockquote>      *      * @param sql Query      * @param expected Expected type, including nullability      */
specifier|public
name|void
name|checkColumnType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|tester
operator|.
name|checkColumnType
argument_list|(
name|sql
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that a query returns a row of the expected type. For example,      *      *<blockquote><code>checkResultType("select empno, name from emp","{EMPNO      * INTEGER NOT NULL, NAME VARCHAR(10) NOT NULL}");</code></blockquote>      *      * @param sql Query      * @param expected Expected row type      */
specifier|public
name|void
name|checkResultType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|tester
operator|.
name|checkResultType
argument_list|(
name|sql
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that the first column returned by a query has the expected type.      * For example,      *      *<blockquote><code>checkQueryType("SELECT empno FROM Emp", "INTEGER NOT      * NULL");</code></blockquote>      *      * @param sql Query      * @param expected Expected type, including nullability      */
specifier|public
name|void
name|checkIntervalConv
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|tester
operator|.
name|checkIntervalConv
argument_list|(
name|TesterImpl
operator|.
name|buildQuery
argument_list|(
name|sql
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|assertExceptionIsThrown
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedMsgPattern
parameter_list|)
block|{
name|tester
operator|.
name|assertExceptionIsThrown
argument_list|(
name|sql
argument_list|,
name|expectedMsgPattern
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkCharset
parameter_list|(
name|String
name|sql
parameter_list|,
name|Charset
name|expectedCharset
parameter_list|)
block|{
name|tester
operator|.
name|checkCharset
argument_list|(
name|sql
argument_list|,
name|expectedCharset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkCollation
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedCollationName
parameter_list|,
name|SqlCollation
operator|.
name|Coercibility
name|expectedCoercibility
parameter_list|)
block|{
name|tester
operator|.
name|checkCollation
argument_list|(
name|sql
argument_list|,
name|expectedCollationName
argument_list|,
name|expectedCoercibility
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks whether an exception matches the expected pattern. If<code>      * sap</code> contains an error location, checks this too.      *      * @param ex Exception thrown      * @param expectedMsgPattern Expected pattern      * @param sap Query and (optional) position in query      */
specifier|public
specifier|static
name|void
name|checkEx
parameter_list|(
name|Throwable
name|ex
parameter_list|,
name|String
name|expectedMsgPattern
parameter_list|,
name|SqlParserUtil
operator|.
name|StringAndPos
name|sap
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|ex
condition|)
block|{
if|if
condition|(
name|expectedMsgPattern
operator|==
literal|null
condition|)
block|{
comment|// No error expected, and no error happened.
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected query to throw exception, but it did not; "
operator|+
literal|"query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"]; expected ["
operator|+
name|expectedMsgPattern
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|Throwable
name|actualException
init|=
name|ex
decl_stmt|;
name|String
name|actualMessage
init|=
name|actualException
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|int
name|actualLine
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|actualColumn
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|actualEndLine
init|=
literal|100
decl_stmt|;
name|int
name|actualEndColumn
init|=
literal|99
decl_stmt|;
comment|// Search for an EigenbaseContextException somewhere in the stack.
name|EigenbaseContextException
name|ece
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Throwable
name|x
init|=
name|ex
init|;
name|x
operator|!=
literal|null
condition|;
name|x
operator|=
name|x
operator|.
name|getCause
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|EigenbaseContextException
condition|)
block|{
name|ece
operator|=
operator|(
name|EigenbaseContextException
operator|)
name|x
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|x
operator|.
name|getCause
argument_list|()
operator|==
name|x
condition|)
block|{
break|break;
block|}
block|}
comment|// Search for a SqlParseException -- with its position set -- somewhere
comment|// in the stack.
name|SqlParseException
name|spe
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Throwable
name|x
init|=
name|ex
init|;
name|x
operator|!=
literal|null
condition|;
name|x
operator|=
name|x
operator|.
name|getCause
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|x
operator|instanceof
name|SqlParseException
operator|)
operator|&&
operator|(
operator|(
operator|(
name|SqlParseException
operator|)
name|x
operator|)
operator|.
name|getPos
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|spe
operator|=
operator|(
name|SqlParseException
operator|)
name|x
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|x
operator|.
name|getCause
argument_list|()
operator|==
name|x
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|ece
operator|!=
literal|null
condition|)
block|{
name|actualLine
operator|=
name|ece
operator|.
name|getPosLine
argument_list|()
expr_stmt|;
name|actualColumn
operator|=
name|ece
operator|.
name|getPosColumn
argument_list|()
expr_stmt|;
name|actualEndLine
operator|=
name|ece
operator|.
name|getEndPosLine
argument_list|()
expr_stmt|;
name|actualEndColumn
operator|=
name|ece
operator|.
name|getEndPosColumn
argument_list|()
expr_stmt|;
if|if
condition|(
name|ece
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actualException
operator|=
name|ece
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|actualMessage
operator|=
name|actualException
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|spe
operator|!=
literal|null
condition|)
block|{
name|actualLine
operator|=
name|spe
operator|.
name|getPos
argument_list|()
operator|.
name|getLineNum
argument_list|()
expr_stmt|;
name|actualColumn
operator|=
name|spe
operator|.
name|getPos
argument_list|()
operator|.
name|getColumnNum
argument_list|()
expr_stmt|;
name|actualEndLine
operator|=
name|spe
operator|.
name|getPos
argument_list|()
operator|.
name|getEndLineNum
argument_list|()
expr_stmt|;
name|actualEndColumn
operator|=
name|spe
operator|.
name|getPos
argument_list|()
operator|.
name|getEndColumnNum
argument_list|()
expr_stmt|;
if|if
condition|(
name|spe
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actualException
operator|=
name|spe
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|actualMessage
operator|=
name|actualException
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|String
name|message
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|matcher
init|=
name|lineColTwicePattern
operator|.
name|matcher
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|actualLine
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|actualColumn
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|actualEndLine
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|actualEndColumn
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|actualMessage
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matcher
operator|=
name|lineColPattern
operator|.
name|matcher
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|actualLine
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|actualColumn
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|expectedMsgPattern
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|actualException
condition|)
block|{
name|actualException
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Validator threw unexpected exception"
operator|+
literal|"; query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"]; exception ["
operator|+
name|actualMessage
operator|+
literal|"]; pos [line "
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|" thru line "
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|null
operator|!=
name|expectedMsgPattern
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|actualException
condition|)
block|{
name|fail
argument_list|(
literal|"Expected validator to throw "
operator|+
literal|"exception, but it did not; query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"]; expected ["
operator|+
name|expectedMsgPattern
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|sqlWithCarets
decl_stmt|;
if|if
condition|(
operator|(
name|actualColumn
operator|<=
literal|0
operator|)
operator|||
operator|(
name|actualLine
operator|<=
literal|0
operator|)
operator|||
operator|(
name|actualEndColumn
operator|<=
literal|0
operator|)
operator|||
operator|(
name|actualEndLine
operator|<=
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|sap
operator|.
name|pos
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected error to have position,"
operator|+
literal|" but actual error did not: "
operator|+
literal|" actual pos [line "
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|" thru line "
operator|+
name|actualEndLine
operator|+
literal|" col "
operator|+
name|actualEndColumn
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|sqlWithCarets
operator|=
name|sap
operator|.
name|sql
expr_stmt|;
block|}
else|else
block|{
name|sqlWithCarets
operator|=
name|SqlParserUtil
operator|.
name|addCarets
argument_list|(
name|sap
operator|.
name|sql
argument_list|,
name|actualLine
argument_list|,
name|actualColumn
argument_list|,
name|actualEndLine
argument_list|,
name|actualEndColumn
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|sap
operator|.
name|pos
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Actual error had a position, but expected error"
operator|+
literal|" did not. Add error position carets to sql:\n"
operator|+
name|sqlWithCarets
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|(
name|actualMessage
operator|==
literal|null
operator|)
operator|||
operator|!
name|actualMessage
operator|.
name|matches
argument_list|(
name|expectedMsgPattern
argument_list|)
condition|)
block|{
name|actualException
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
specifier|final
name|String
name|actualJavaRegexp
init|=
operator|(
name|actualMessage
operator|==
literal|null
operator|)
condition|?
literal|"null"
else|:
name|TestUtil
operator|.
name|quoteForJava
argument_list|(
name|TestUtil
operator|.
name|quotePattern
argument_list|(
name|actualMessage
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Validator threw different "
operator|+
literal|"exception than expected; query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"];"
operator|+
name|NL
operator|+
literal|" expected pattern ["
operator|+
name|expectedMsgPattern
operator|+
literal|"];"
operator|+
name|NL
operator|+
literal|" actual ["
operator|+
name|actualMessage
operator|+
literal|"];"
operator|+
name|NL
operator|+
literal|" actual as java regexp ["
operator|+
name|actualJavaRegexp
operator|+
literal|"]; pos ["
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|" thru line "
operator|+
name|actualEndLine
operator|+
literal|" col "
operator|+
name|actualEndColumn
operator|+
literal|"]; sql ["
operator|+
name|sqlWithCarets
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|sap
operator|.
name|pos
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|actualLine
operator|!=
name|sap
operator|.
name|pos
operator|.
name|getLineNum
argument_list|()
operator|)
operator|||
operator|(
name|actualColumn
operator|!=
name|sap
operator|.
name|pos
operator|.
name|getColumnNum
argument_list|()
operator|)
operator|||
operator|(
name|actualEndLine
operator|!=
name|sap
operator|.
name|pos
operator|.
name|getEndLineNum
argument_list|()
operator|)
operator|||
operator|(
name|actualEndColumn
operator|!=
name|sap
operator|.
name|pos
operator|.
name|getEndColumnNum
argument_list|()
operator|)
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Validator threw expected "
operator|+
literal|"exception ["
operator|+
name|actualMessage
operator|+
literal|"];\nbut at pos [line "
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|" thru line "
operator|+
name|actualEndLine
operator|+
literal|" col "
operator|+
name|actualEndColumn
operator|+
literal|"];\nsql ["
operator|+
name|sqlWithCarets
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//~ Inner Interfaces -------------------------------------------------------
comment|/**      * Encapsulates differences between test environments, for example, which      * SQL parser or validator to use.      *      *<p>It contains a mock schema with<code>EMP</code> and<code>DEPT</code>      * tables, which can run without having to start up Farrago.      */
specifier|public
interface|interface
name|Tester
block|{
name|SqlNode
name|parseQuery
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SqlParseException
function_decl|;
name|SqlNode
name|parseAndValidate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|String
name|sql
parameter_list|)
function_decl|;
name|SqlValidator
name|getValidator
parameter_list|()
function_decl|;
comment|/**          * Checks that a query is valid, or, if invalid, throws the right          * message at the right location.          *          *<p>If<code>expectedMsgPattern</code> is null, the query must          * succeed.          *          *<p>If<code>expectedMsgPattern</code> is not null, the query must          * fail, and give an error location of (expectedLine, expectedColumn)          * through (expectedEndLine, expectedEndColumn).          *          * @param sql SQL statement          * @param expectedMsgPattern If this parameter is null the query must be          * valid for the test to pass; If this parameter is not null the query          * must be malformed and the message given must match the pattern          */
name|void
name|assertExceptionIsThrown
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedMsgPattern
parameter_list|)
function_decl|;
comment|/**          * Returns the data type of the sole column of a SQL query.          *          *<p>For example,<code>getResultType("VALUES (1")</code> returns          *<code>INTEGER</code>.          *          *<p>Fails if query returns more than one column.          *          * @see #getResultType(String)          */
name|RelDataType
name|getColumnType
parameter_list|(
name|String
name|sql
parameter_list|)
function_decl|;
comment|/**          * Returns the data type of the row returned by a SQL query.          *          *<p>For example,<code>getResultType("VALUES (1, 'foo')")</code>          * returns<code>RecordType(INTEGER EXPR$0, CHAR(3) EXPR#1)</code>.          */
name|RelDataType
name|getResultType
parameter_list|(
name|String
name|sql
parameter_list|)
function_decl|;
name|void
name|checkCollation
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedCollationName
parameter_list|,
name|SqlCollation
operator|.
name|Coercibility
name|expectedCoercibility
parameter_list|)
function_decl|;
name|void
name|checkCharset
parameter_list|(
name|String
name|sql
parameter_list|,
name|Charset
name|expectedCharset
parameter_list|)
function_decl|;
comment|/**          * Checks that a query returns one column of an expected type. For          * example,<code>checkType("VALUES (1 + 2)", "INTEGER NOT          * NULL")</code>.          */
name|void
name|checkColumnType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
function_decl|;
comment|/**          * Given a SQL query, returns a list of the origins of each result          * field.          *          * @param sql SQL query          * @param fieldOriginList Field origin list, e.g.          *   "{(CATALOG.SALES.EMP.EMPNO, null)}"          */
name|void
name|checkFieldOrigin
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|fieldOriginList
parameter_list|)
function_decl|;
comment|/**          * Checks that a query gets rewritten to an expected form.          *          * @param validator validator to use; null for default          * @param query query to test          * @param expectedRewrite expected SQL text after rewrite and unparse          */
name|void
name|checkRewrite
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|expectedRewrite
parameter_list|)
function_decl|;
comment|/**          * Checks that a query returns one column of an expected type. For          * example,<code>checkType("select empno, name from emp""{EMPNO INTEGER          * NOT NULL, NAME VARCHAR(10) NOT NULL}")</code>.          */
name|void
name|checkResultType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
function_decl|;
comment|/**          * Checks if the interval value conversion to milliseconds is valid. For          * example,<code>checkIntervalConv(VALUES (INTERVAL '1' Minute),          * "60000")</code>.          */
name|void
name|checkIntervalConv
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
function_decl|;
comment|/**          * Given a SQL query, returns the monotonicity of the first item in the          * SELECT clause.          *          * @param sql SQL query          *          * @return Monotonicity          */
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|String
name|sql
parameter_list|)
function_decl|;
name|SqlConformance
name|getConformance
parameter_list|()
function_decl|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Implementation of {@link org.eigenbase.test.SqlValidatorTestCase.Tester}      * which talks to a mock catalog.      *      *<p>It is also a pure-Java implementation of the {@link SqlTester} used by      * {@link SqlOperatorBaseTest}. It can parse and validate queries, but it      * does not invoke Farrago, so it is very fast but cannot execute functions.      */
specifier|public
specifier|static
class|class
name|TesterImpl
implements|implements
name|Tester
implements|,
name|SqlTester
block|{
specifier|protected
specifier|final
name|SqlOperatorTable
name|opTab
decl_stmt|;
specifier|protected
specifier|final
name|SqlConformance
name|conformance
decl_stmt|;
specifier|public
name|TesterImpl
parameter_list|(
name|SqlConformance
name|conformance
parameter_list|)
block|{
assert|assert
name|conformance
operator|!=
literal|null
assert|;
name|this
operator|.
name|conformance
operator|=
name|conformance
expr_stmt|;
name|this
operator|.
name|opTab
operator|=
name|createOperatorTable
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc}          *          * This default implementation does nothing.          */
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// no resources to release
block|}
specifier|public
name|SqlConformance
name|getConformance
parameter_list|()
block|{
return|return
name|conformance
return|;
block|}
specifier|protected
name|SqlOperatorTable
name|createOperatorTable
parameter_list|()
block|{
name|MockSqlOperatorTable
name|opTab
init|=
operator|new
name|MockSqlOperatorTable
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|MockSqlOperatorTable
operator|.
name|addRamp
argument_list|(
name|opTab
argument_list|)
expr_stmt|;
return|return
name|opTab
return|;
block|}
specifier|public
name|SqlValidator
name|getValidator
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|()
decl_stmt|;
return|return
name|SqlValidatorUtil
operator|.
name|newValidator
argument_list|(
name|opTab
argument_list|,
operator|new
name|MockCatalogReader
argument_list|(
name|typeFactory
argument_list|)
argument_list|,
name|typeFactory
argument_list|)
return|;
block|}
specifier|public
name|void
name|assertExceptionIsThrown
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedMsgPattern
parameter_list|)
block|{
name|SqlValidator
name|validator
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
name|SqlParserUtil
operator|.
name|StringAndPos
name|sap
init|=
name|SqlParserUtil
operator|.
name|findPos
argument_list|(
name|sql
argument_list|)
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parseQuery
argument_list|(
name|sap
operator|.
name|sql
argument_list|)
expr_stmt|;
name|validator
operator|=
name|getValidator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
name|String
name|errMessage
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedMsgPattern
operator|==
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Error while parsing query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|else if
condition|(
operator|(
literal|null
operator|==
name|errMessage
operator|)
operator|||
operator|!
name|errMessage
operator|.
name|matches
argument_list|(
name|expectedMsgPattern
argument_list|)
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Error did not match expected ["
operator|+
name|expectedMsgPattern
operator|+
literal|"] while parsing query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Error while parsing query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Throwable
name|thrown
init|=
literal|null
decl_stmt|;
try|try
block|{
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|thrown
operator|=
name|ex
expr_stmt|;
block|}
name|checkEx
argument_list|(
name|thrown
argument_list|,
name|expectedMsgPattern
argument_list|,
name|sap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getColumnType
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|RelDataType
name|rowType
init|=
name|getResultType
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected query to return 1 field"
argument_list|,
literal|1
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RelDataType
name|actualType
init|=
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|actualType
return|;
block|}
specifier|public
name|RelDataType
name|getResultType
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
name|SqlNode
name|n
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
name|RelDataType
name|rowType
init|=
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|n
argument_list|)
decl_stmt|;
return|return
name|rowType
return|;
block|}
specifier|public
name|SqlNode
name|parseAndValidate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
if|if
condition|(
name|validator
operator|==
literal|null
condition|)
block|{
name|validator
operator|=
name|getValidator
argument_list|()
expr_stmt|;
block|}
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parseQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while parsing query ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Error while parsing query ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
return|;
block|}
specifier|public
name|SqlNode
name|parseQuery
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SqlParseException
block|{
name|SqlParser
name|parser
init|=
operator|new
name|SqlParser
argument_list|(
name|sql
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parseQuery
argument_list|()
return|;
block|}
specifier|public
name|void
name|checkColumnType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|RelDataType
name|actualType
init|=
name|getColumnType
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
name|AbstractSqlTester
operator|.
name|getTypeString
argument_list|(
name|actualType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkFieldOrigin
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|fieldOriginList
parameter_list|)
block|{
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
name|SqlNode
name|n
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|list
init|=
name|validator
operator|.
name|getFieldOrigins
argument_list|(
name|n
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|strings
range|:
name|list
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|strings
operator|==
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
if|if
condition|(
name|j
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldOriginList
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkResultType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|RelDataType
name|actualType
init|=
name|getResultType
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
name|AbstractSqlTester
operator|.
name|getTypeString
argument_list|(
name|actualType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkIntervalConv
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
specifier|final
name|SqlCall
name|n
init|=
operator|(
name|SqlCall
operator|)
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
name|SqlNode
name|node
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|.
name|getOperands
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|n
operator|.
name|getOperands
argument_list|()
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|SqlCall
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|AS
condition|)
block|{
name|node
operator|=
operator|(
operator|(
name|SqlCall
operator|)
name|node
operator|)
operator|.
name|operands
index|[
literal|0
index|]
expr_stmt|;
block|}
name|node
operator|=
operator|(
operator|(
name|SqlCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
break|break;
block|}
block|}
name|SqlIntervalLiteral
operator|.
name|IntervalValue
name|interval
init|=
operator|(
name|SqlIntervalLiteral
operator|.
name|IntervalValue
operator|)
operator|(
operator|(
name|SqlIntervalLiteral
operator|)
name|node
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|l
init|=
name|interval
operator|.
name|getIntervalQualifier
argument_list|()
operator|.
name|isYearMonth
argument_list|()
condition|?
name|SqlParserUtil
operator|.
name|intervalToMonths
argument_list|(
name|interval
argument_list|)
else|:
name|SqlParserUtil
operator|.
name|intervalToMillis
argument_list|(
name|interval
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
name|l
operator|+
literal|""
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkType
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|checkColumnType
argument_list|(
name|buildQuery
argument_list|(
name|expression
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkCollation
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedCollationName
parameter_list|,
name|SqlCollation
operator|.
name|Coercibility
name|expectedCoercibility
parameter_list|)
block|{
name|RelDataType
name|actualType
init|=
name|getColumnType
argument_list|(
name|buildQuery
argument_list|(
name|sql
argument_list|)
argument_list|)
decl_stmt|;
name|SqlCollation
name|collation
init|=
name|actualType
operator|.
name|getCollation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCollationName
argument_list|,
name|collation
operator|.
name|getCollationName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCoercibility
argument_list|,
name|collation
operator|.
name|getCoercibility
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkCharset
parameter_list|(
name|String
name|sql
parameter_list|,
name|Charset
name|expectedCharset
parameter_list|)
block|{
name|RelDataType
name|actualType
init|=
name|getColumnType
argument_list|(
name|buildQuery
argument_list|(
name|sql
argument_list|)
argument_list|)
decl_stmt|;
name|Charset
name|actualCharset
init|=
name|actualType
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expectedCharset
operator|.
name|equals
argument_list|(
name|actualCharset
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|NL
operator|+
literal|"Expected="
operator|+
name|expectedCharset
operator|.
name|name
argument_list|()
operator|+
name|NL
operator|+
literal|"  actual="
operator|+
name|actualCharset
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// SqlTester methods
specifier|public
name|void
name|setFor
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|VmName
modifier|...
name|unimplementedVmNames
parameter_list|)
block|{
comment|// do nothing
block|}
specifier|public
name|void
name|checkAgg
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
index|[]
name|inputValues
parameter_list|,
name|Object
name|result
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|String
name|query
init|=
name|AbstractSqlTester
operator|.
name|generateAggQuery
argument_list|(
name|expr
argument_list|,
name|inputValues
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|query
argument_list|,
name|AbstractSqlTester
operator|.
name|AnyTypeChecker
argument_list|,
name|result
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkWinAgg
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
index|[]
name|inputValues
parameter_list|,
name|String
name|windowSpec
parameter_list|,
name|String
name|type
parameter_list|,
name|Object
name|result
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|String
name|query
init|=
name|AbstractSqlTester
operator|.
name|generateWinAggQuery
argument_list|(
name|expr
argument_list|,
name|windowSpec
argument_list|,
name|inputValues
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|query
argument_list|,
name|AbstractSqlTester
operator|.
name|AnyTypeChecker
argument_list|,
name|result
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkScalar
parameter_list|(
name|String
name|expression
parameter_list|,
name|Object
name|result
parameter_list|,
name|String
name|resultType
parameter_list|)
block|{
name|checkType
argument_list|(
name|expression
argument_list|,
name|resultType
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|buildQuery
argument_list|(
name|expression
argument_list|)
argument_list|,
name|AbstractSqlTester
operator|.
name|AnyTypeChecker
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkScalarExact
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|result
parameter_list|)
block|{
name|String
name|sql
init|=
name|buildQuery
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|sql
argument_list|,
name|AbstractSqlTester
operator|.
name|IntegerTypeChecker
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkScalarExact
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|expectedType
parameter_list|,
name|String
name|result
parameter_list|)
block|{
name|String
name|sql
init|=
name|buildQuery
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|TypeChecker
name|typeChecker
init|=
operator|new
name|AbstractSqlTester
operator|.
name|StringTypeChecker
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|sql
argument_list|,
name|typeChecker
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkScalarApprox
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|expectedType
parameter_list|,
name|double
name|expectedResult
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|String
name|sql
init|=
name|buildQuery
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|TypeChecker
name|typeChecker
init|=
operator|new
name|AbstractSqlTester
operator|.
name|StringTypeChecker
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|sql
argument_list|,
name|typeChecker
argument_list|,
operator|new
name|Double
argument_list|(
name|expectedResult
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkBoolean
parameter_list|(
name|String
name|expression
parameter_list|,
name|Boolean
name|result
parameter_list|)
block|{
name|String
name|sql
init|=
name|buildQuery
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|result
condition|)
block|{
name|checkNull
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|check
argument_list|(
name|sql
argument_list|,
name|AbstractSqlTester
operator|.
name|BooleanTypeChecker
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkString
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|result
parameter_list|,
name|String
name|expectedType
parameter_list|)
block|{
name|String
name|sql
init|=
name|buildQuery
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|TypeChecker
name|typeChecker
init|=
operator|new
name|AbstractSqlTester
operator|.
name|StringTypeChecker
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|sql
argument_list|,
name|typeChecker
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkNull
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|String
name|sql
init|=
name|buildQuery
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|sql
argument_list|,
name|AbstractSqlTester
operator|.
name|AnyTypeChecker
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|check
parameter_list|(
name|String
name|query
parameter_list|,
name|TypeChecker
name|typeChecker
parameter_list|,
name|Object
name|result
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|check
argument_list|(
name|query
argument_list|,
name|typeChecker
argument_list|,
name|AbstractSqlTester
operator|.
name|createChecker
argument_list|(
name|result
argument_list|,
name|delta
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|check
parameter_list|(
name|String
name|query
parameter_list|,
name|TypeChecker
name|typeChecker
parameter_list|,
name|ResultChecker
name|resultChecker
parameter_list|)
block|{
comment|// This implementation does NOT check the result!
comment|// (It can't because we're pure Java.)
comment|// All it does is check the return type.
comment|// Parse and validate. There should be no errors.
name|RelDataType
name|actualType
init|=
name|getColumnType
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// Check result type.
name|typeChecker
operator|.
name|checkType
argument_list|(
name|actualType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkRewrite
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|expectedRewrite
parameter_list|)
block|{
name|SqlNode
name|rewrittenNode
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|String
name|actualRewrite
init|=
name|rewrittenNode
operator|.
name|toSqlString
argument_list|(
name|SqlDialect
operator|.
name|DUMMY
argument_list|,
literal|false
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
name|expectedRewrite
argument_list|,
name|actualRewrite
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkFails
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|expectedError
parameter_list|,
name|boolean
name|runtime
parameter_list|)
block|{
if|if
condition|(
name|runtime
condition|)
block|{
comment|// We need to test that the expression fails at runtime.
comment|// Ironically, that means that it must succeed at prepare time.
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sql
init|=
name|buildQuery
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|SqlNode
name|n
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertExceptionIsThrown
argument_list|(
name|buildQuery
argument_list|(
name|expression
argument_list|)
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|node
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|SqlSelect
name|select
init|=
operator|(
name|SqlSelect
operator|)
name|node
decl_stmt|;
specifier|final
name|SqlNode
name|selectItem0
init|=
name|select
operator|.
name|getSelectList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidatorScope
name|scope
init|=
name|validator
operator|.
name|getSelectScope
argument_list|(
name|select
argument_list|)
decl_stmt|;
return|return
name|selectItem0
operator|.
name|getMonotonicity
argument_list|(
name|scope
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|buildQuery
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
literal|"values ("
operator|+
name|expression
operator|+
literal|")"
return|;
block|}
specifier|public
name|boolean
name|isVm
parameter_list|(
name|VmName
name|vmName
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlValidatorTestCase.java
end_comment

end_unit

