begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Graph}.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|GraphTest
extends|extends
name|TestCase
block|{
specifier|public
name|GraphTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test
parameter_list|()
block|{
name|Graph
argument_list|<
name|String
argument_list|>
name|g
init|=
operator|new
name|Graph
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|g
operator|.
name|createArc
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|g
operator|.
name|createArc
argument_list|(
literal|"B"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|g
operator|.
name|createArc
argument_list|(
literal|"D"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|g
operator|.
name|createArc
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|g
operator|.
name|createArc
argument_list|(
literal|"E"
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|g
operator|.
name|createArc
argument_list|(
literal|"C"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{A-B, B-C, C-D}"
argument_list|,
name|Graph
operator|.
name|Arc
operator|.
name|toString
argument_list|(
name|g
operator|.
name|getShortestPath
argument_list|(
literal|"A"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|createArc
argument_list|(
literal|"B"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{A-B, B-D}"
argument_list|,
name|Graph
operator|.
name|Arc
operator|.
name|toString
argument_list|(
name|g
operator|.
name|getShortestPath
argument_list|(
literal|"A"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"There is no path from A to E"
argument_list|,
name|g
operator|.
name|getShortestPath
argument_list|(
literal|"A"
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|Graph
operator|.
name|Arc
operator|.
name|toString
argument_list|(
name|g
operator|.
name|getShortestPath
argument_list|(
literal|"D"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Node X is not in the graph"
argument_list|,
name|g
operator|.
name|getShortestPath
argument_list|(
literal|"X"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{A-B, B-D} {A-B, B-C, C-D}"
argument_list|,
name|toString
argument_list|(
name|g
operator|.
name|getPaths
argument_list|(
literal|"A"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|String
name|toString
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|Graph
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
name|iter
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Graph
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
name|path
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|Graph
operator|.
name|Arc
operator|.
name|toString
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End GraphTest.java
end_comment

end_unit

