begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>MethodCallTestCase</code> is a {@link TestCase} which invokes a  * method on an object. You can use this class to expose methods of a  * non-TestCase class as unit tests; {@link #addTestMethods} does this for all  *<code>public</code>, non-<code>static</code>,<code>void</code> methods whose  * names start with "test", and have one .  *  * @author jhyde  * @since Mar 19, 2003  */
end_comment

begin_class
specifier|public
class|class
name|MethodCallTestCase
extends|extends
name|TestCase
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
specifier|private
specifier|final
name|Object
name|o
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|args
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
name|MethodCallTestCase
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|o
parameter_list|,
name|Method
name|method
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|o
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|args
operator|=
operator|new
name|Object
index|[]
block|{
name|this
block|}
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Returns whether a method can be called as a test case; it must:      *      *<ol>      *<li>be<code>public</code></li>      *<li>be non-<code>static</code></li>      *<li>return<code>void</code></li>      *<li>begin with<code>test</code></li>      *<li>have precisely one parameter of type {@link TestCase} (or a class      * derived from it)</li>      *</ol>      */
specifier|public
specifier|static
name|boolean
name|isSuitable
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
specifier|final
name|int
name|modifiers
init|=
name|method
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
comment|//return false;
block|}
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Void
operator|.
name|TYPE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Class
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|TestCase
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|parameterTypes
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|void
name|addTestMethods
parameter_list|(
name|TestSuite
name|suite
parameter_list|,
name|Object
name|o
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|)
block|{
name|Class
name|clazz
init|=
name|o
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Method
name|method
init|=
name|methods
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|isSuitable
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|MethodCallTestCase
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|o
argument_list|,
name|method
argument_list|,
name|dispatcher
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Throwable
block|{
name|Util
operator|.
name|discard
argument_list|(
name|dispatcher
operator|.
name|call
argument_list|(
name|method
argument_list|,
name|o
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Interfaces -------------------------------------------------------
comment|/**      * A class implementing<code>Dispatcher</code> calls a method from within      * its own security context. It exists to allow a {@link MethodCallTestCase}      * to call non-public methods.      */
specifier|public
interface|interface
name|Dispatcher
block|{
name|Object
name|call
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|o
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
function_decl|;
block|}
block|}
end_class

begin_comment
comment|// End MethodCallTestCase.java
end_comment

end_unit

