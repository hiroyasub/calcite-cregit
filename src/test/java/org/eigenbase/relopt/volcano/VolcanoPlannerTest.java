begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|mop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|convert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>VolcanoPlannerTest</code> is a unit-test for {@link VolcanoPlanner  * the optimizer}.  *  * @author John V. Sichi  * @since Mar 19, 2003  */
end_comment

begin_class
specifier|public
class|class
name|VolcanoPlannerTest
extends|extends
name|TestCase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**      * Private calling convention representing a physical implementation.      */
specifier|private
specifier|static
specifier|final
name|Convention
name|PHYS_CALLING_CONVENTION
init|=
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"PHYS"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|VolcanoPlannerTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|static
name|RelOptCluster
name|newCluster
parameter_list|(
name|VolcanoPlanner
name|planner
parameter_list|)
block|{
name|RelOptQuery
name|query
init|=
operator|new
name|RelOptQuery
argument_list|(
name|planner
argument_list|)
decl_stmt|;
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|()
decl_stmt|;
return|return
name|query
operator|.
name|createCluster
argument_list|(
operator|new
name|TestEnvironment
argument_list|()
argument_list|,
name|typeFactory
argument_list|,
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Tests transformation of a leaf from NONE to PHYS.      */
specifier|public
name|void
name|testTransformLeaf
parameter_list|()
block|{
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|PhysLeafRule
argument_list|()
argument_list|)
expr_stmt|;
name|RelOptCluster
name|cluster
init|=
name|newCluster
argument_list|(
name|planner
argument_list|)
decl_stmt|;
name|NoneLeafRel
name|leafRel
init|=
operator|new
name|NoneLeafRel
argument_list|(
name|cluster
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|RelNode
name|convertedRel
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|leafRel
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|convertedRel
argument_list|)
expr_stmt|;
name|RelNode
name|result
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|PhysLeafRel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests transformation of a single+leaf from NONE to PHYS.      */
specifier|public
name|void
name|testTransformSingleGood
parameter_list|()
block|{
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|PhysLeafRule
argument_list|()
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|GoodSingleRule
argument_list|()
argument_list|)
expr_stmt|;
name|RelOptCluster
name|cluster
init|=
name|newCluster
argument_list|(
name|planner
argument_list|)
decl_stmt|;
name|NoneLeafRel
name|leafRel
init|=
operator|new
name|NoneLeafRel
argument_list|(
name|cluster
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|NoneSingleRel
name|singleRel
init|=
operator|new
name|NoneSingleRel
argument_list|(
name|cluster
argument_list|,
name|leafRel
argument_list|)
decl_stmt|;
name|RelNode
name|convertedRel
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|singleRel
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|convertedRel
argument_list|)
expr_stmt|;
name|RelNode
name|result
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|PhysSingleRel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests transformation of a single+leaf from NONE to PHYS. In the past,      * this one didn't work due to the definition of ReformedSingleRule.      */
specifier|public
name|void
name|testTransformSingleReformed
parameter_list|()
block|{
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|PhysLeafRule
argument_list|()
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|ReformedSingleRule
argument_list|()
argument_list|)
expr_stmt|;
name|RelOptCluster
name|cluster
init|=
name|newCluster
argument_list|(
name|planner
argument_list|)
decl_stmt|;
name|NoneLeafRel
name|leafRel
init|=
operator|new
name|NoneLeafRel
argument_list|(
name|cluster
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|NoneSingleRel
name|singleRel
init|=
operator|new
name|NoneSingleRel
argument_list|(
name|cluster
argument_list|,
name|leafRel
argument_list|)
decl_stmt|;
name|RelNode
name|convertedRel
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|singleRel
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|convertedRel
argument_list|)
expr_stmt|;
name|RelNode
name|result
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|PhysSingleRel
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeTrivialProject
parameter_list|(
name|boolean
name|useRule
parameter_list|)
block|{
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|ambitious
operator|=
literal|true
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|useRule
condition|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|RemoveTrivialProjectRule
operator|.
name|instance
argument_list|)
expr_stmt|;
block|}
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|PhysLeafRule
argument_list|()
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|GoodSingleRule
argument_list|()
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|PhysProjectRule
argument_list|()
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|ConverterRule
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|PHYS_CALLING_CONVENTION
argument_list|,
name|CallingConvention
operator|.
name|ITERATOR
argument_list|,
literal|"PhysToIteratorRule"
argument_list|)
block|{
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
return|return
operator|new
name|PhysToIteratorConverter
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RelOptCluster
name|cluster
init|=
name|newCluster
argument_list|(
name|planner
argument_list|)
decl_stmt|;
name|PhysLeafRel
name|leafRel
init|=
operator|new
name|PhysLeafRel
argument_list|(
name|cluster
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|RexInputRef
name|inputRef
init|=
operator|new
name|RexInputRef
argument_list|(
literal|0
argument_list|,
name|leafRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|RelNode
name|projectRel
init|=
name|CalcRel
operator|.
name|createProject
argument_list|(
name|leafRel
argument_list|,
operator|new
name|RexNode
index|[]
block|{
name|inputRef
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this"
block|}
argument_list|)
decl_stmt|;
name|NoneSingleRel
name|singleRel
init|=
operator|new
name|NoneSingleRel
argument_list|(
name|cluster
argument_list|,
name|projectRel
argument_list|)
decl_stmt|;
name|RelNode
name|convertedRel
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|singleRel
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|CallingConvention
operator|.
name|ITERATOR
argument_list|)
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|convertedRel
argument_list|)
expr_stmt|;
name|RelNode
name|result
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|PhysToIteratorConverter
argument_list|)
expr_stmt|;
block|}
comment|// NOTE:  this used to fail but now works
specifier|public
name|void
name|testWithRemoveTrivialProject
parameter_list|()
block|{
name|removeTrivialProject
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// NOTE:  this always worked; it's here as constrast to
comment|// testWithRemoveTrivialProject()
specifier|public
name|void
name|testWithoutRemoveTrivialProject
parameter_list|()
block|{
name|removeTrivialProject
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Previously, this didn't work because ReformedRemoveSingleRule uses a      * pattern which spans calling conventions.      */
specifier|public
name|void
name|testRemoveSingleReformed
parameter_list|()
block|{
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|ambitious
operator|=
literal|true
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|PhysLeafRule
argument_list|()
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|ReformedRemoveSingleRule
argument_list|()
argument_list|)
expr_stmt|;
name|RelOptCluster
name|cluster
init|=
name|newCluster
argument_list|(
name|planner
argument_list|)
decl_stmt|;
name|NoneLeafRel
name|leafRel
init|=
operator|new
name|NoneLeafRel
argument_list|(
name|cluster
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|NoneSingleRel
name|singleRel
init|=
operator|new
name|NoneSingleRel
argument_list|(
name|cluster
argument_list|,
name|leafRel
argument_list|)
decl_stmt|;
name|RelNode
name|convertedRel
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|singleRel
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|convertedRel
argument_list|)
expr_stmt|;
name|RelNode
name|result
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|PhysLeafRel
argument_list|)
expr_stmt|;
name|PhysLeafRel
name|resultLeaf
init|=
operator|(
name|PhysLeafRel
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resultLeaf
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This always worked (in contrast to testRemoveSingleReformed) because it      * uses a completely-physical pattern (requiring GoodSingleRule to fire      * first).      */
specifier|public
name|void
name|testRemoveSingleGood
parameter_list|()
block|{
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|ambitious
operator|=
literal|true
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|PhysLeafRule
argument_list|()
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|GoodSingleRule
argument_list|()
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|GoodRemoveSingleRule
argument_list|()
argument_list|)
expr_stmt|;
name|RelOptCluster
name|cluster
init|=
name|newCluster
argument_list|(
name|planner
argument_list|)
decl_stmt|;
name|NoneLeafRel
name|leafRel
init|=
operator|new
name|NoneLeafRel
argument_list|(
name|cluster
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|NoneSingleRel
name|singleRel
init|=
operator|new
name|NoneSingleRel
argument_list|(
name|cluster
argument_list|,
name|leafRel
argument_list|)
decl_stmt|;
name|RelNode
name|convertedRel
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|singleRel
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|convertedRel
argument_list|)
expr_stmt|;
name|RelNode
name|result
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|PhysLeafRel
argument_list|)
expr_stmt|;
name|PhysLeafRel
name|resultLeaf
init|=
operator|(
name|PhysLeafRel
operator|)
name|result
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|resultLeaf
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests whether planner correctly notifies listeners of events.      */
specifier|public
name|void
name|testListener
parameter_list|()
block|{
name|TestListener
name|listener
init|=
operator|new
name|TestListener
argument_list|()
decl_stmt|;
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
operator|new
name|PhysLeafRule
argument_list|()
argument_list|)
expr_stmt|;
name|RelOptCluster
name|cluster
init|=
name|newCluster
argument_list|(
name|planner
argument_list|)
decl_stmt|;
name|NoneLeafRel
name|leafRel
init|=
operator|new
name|NoneLeafRel
argument_list|(
name|cluster
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|RelNode
name|convertedRel
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|leafRel
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|convertedRel
argument_list|)
expr_stmt|;
name|RelNode
name|result
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|PhysLeafRel
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RelOptListener
operator|.
name|RelEvent
argument_list|>
name|eventList
init|=
name|listener
operator|.
name|getEventList
argument_list|()
decl_stmt|;
comment|// add node
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|0
argument_list|,
name|RelOptListener
operator|.
name|RelEquivalenceEvent
operator|.
name|class
argument_list|,
name|leafRel
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// internal subset
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|1
argument_list|,
name|RelOptListener
operator|.
name|RelEquivalenceEvent
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// before rule
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|2
argument_list|,
name|RelOptListener
operator|.
name|RuleAttemptedEvent
operator|.
name|class
argument_list|,
name|leafRel
argument_list|,
name|PhysLeafRule
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// before rule
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|3
argument_list|,
name|RelOptListener
operator|.
name|RuleProductionEvent
operator|.
name|class
argument_list|,
name|result
argument_list|,
name|PhysLeafRule
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// result of rule
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|4
argument_list|,
name|RelOptListener
operator|.
name|RelEquivalenceEvent
operator|.
name|class
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// after rule
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|5
argument_list|,
name|RelOptListener
operator|.
name|RuleProductionEvent
operator|.
name|class
argument_list|,
name|result
argument_list|,
name|PhysLeafRule
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// after rule
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|6
argument_list|,
name|RelOptListener
operator|.
name|RuleAttemptedEvent
operator|.
name|class
argument_list|,
name|leafRel
argument_list|,
name|PhysLeafRule
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// choose plan
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|7
argument_list|,
name|RelOptListener
operator|.
name|RelChosenEvent
operator|.
name|class
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// finish choosing plan
name|checkEvent
argument_list|(
name|eventList
argument_list|,
literal|8
argument_list|,
name|RelOptListener
operator|.
name|RelChosenEvent
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkEvent
parameter_list|(
name|List
argument_list|<
name|RelOptListener
operator|.
name|RelEvent
argument_list|>
name|eventList
parameter_list|,
name|int
name|iEvent
parameter_list|,
name|Class
name|expectedEventClass
parameter_list|,
name|RelNode
name|expectedRel
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelOptRule
argument_list|>
name|expectedRuleClass
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|iEvent
operator|<
name|eventList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RelOptListener
operator|.
name|RelEvent
name|event
init|=
name|eventList
operator|.
name|get
argument_list|(
name|iEvent
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedEventClass
argument_list|,
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedRel
operator|!=
literal|null
condition|)
block|{
name|assertSame
argument_list|(
name|expectedRel
argument_list|,
name|event
operator|.
name|getRel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedRuleClass
operator|!=
literal|null
condition|)
block|{
name|RelOptListener
operator|.
name|RuleEvent
name|ruleEvent
init|=
operator|(
name|RelOptListener
operator|.
name|RuleEvent
operator|)
name|event
decl_stmt|;
name|assertSame
argument_list|(
name|expectedRuleClass
argument_list|,
name|ruleEvent
operator|.
name|getRuleCall
argument_list|()
operator|.
name|getRule
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|private
specifier|static
class|class
name|TestEnvironment
extends|extends
name|GlobalEnvironment
block|{
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|record
parameter_list|(
name|String
name|name
parameter_list|,
name|OJClass
name|clazz
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|TestLeafRel
extends|extends
name|AbstractRelNode
block|{
specifier|private
name|String
name|label
decl_stmt|;
specifier|protected
name|TestLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|)
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
comment|// implement RelNode
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
return|return
name|planner
operator|.
name|makeInfiniteCost
argument_list|()
return|;
block|}
comment|// implement RelNode
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
operator|new
name|RelDataType
index|[]
block|{
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createJavaType
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this"
block|}
argument_list|)
return|;
block|}
specifier|public
name|RelOptPlanWriter
name|explainTerms
parameter_list|(
name|RelOptPlanWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|item
argument_list|(
literal|"label"
argument_list|,
name|label
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|TestSingleRel
extends|extends
name|SingleRel
block|{
specifier|protected
name|TestSingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
comment|// implement RelNode
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
return|return
name|planner
operator|.
name|makeInfiniteCost
argument_list|()
return|;
block|}
comment|// implement RelNode
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NoneSingleRel
extends|extends
name|TestSingleRel
block|{
specifier|protected
name|NoneSingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|child
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
assert|;
return|return
operator|new
name|NoneSingleRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NoneLeafRel
extends|extends
name|TestLeafRel
block|{
specifier|protected
name|NoneLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
assert|;
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PhysLeafRel
extends|extends
name|TestLeafRel
block|{
name|PhysLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
comment|// implement RelNode
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
return|return
name|planner
operator|.
name|makeTinyCost
argument_list|()
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
assert|;
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PhysSingleRel
extends|extends
name|TestSingleRel
block|{
name|PhysSingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|child
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
comment|// implement RelNode
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
return|return
name|planner
operator|.
name|makeTinyCost
argument_list|()
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
assert|;
return|return
operator|new
name|PhysSingleRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
block|}
class|class
name|PhysToIteratorConverter
extends|extends
name|ConverterRelImpl
block|{
specifier|public
name|PhysToIteratorConverter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|child
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|ConventionTraitDef
operator|.
name|instance
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|CallingConvention
operator|.
name|ITERATOR
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|CallingConvention
operator|.
name|ITERATOR
argument_list|)
assert|;
return|return
operator|new
name|PhysToIteratorConverter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PhysLeafRule
extends|extends
name|RelOptRule
block|{
name|PhysLeafRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|NoneLeafRel
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptRule
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneLeafRel
name|leafRel
init|=
operator|(
name|NoneLeafRel
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|PhysLeafRel
argument_list|(
name|leafRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|leafRel
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|GoodSingleRule
extends|extends
name|RelOptRule
block|{
name|GoodSingleRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|NoneSingleRel
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptRule
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneSingleRel
name|singleRel
init|=
operator|(
name|NoneSingleRel
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
decl_stmt|;
name|RelNode
name|childRel
init|=
name|singleRel
operator|.
name|getChild
argument_list|()
decl_stmt|;
name|RelNode
name|physInput
init|=
name|convert
argument_list|(
name|childRel
argument_list|,
name|singleRel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|PhysSingleRel
argument_list|(
name|singleRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|physInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// NOTE: Previously, ReformedSingleRule did't work because it explicitly
comment|// specifies PhysLeafRel rather than RelNode for the single input.  Since
comment|// the PhysLeafRel is in a different subset from the original NoneLeafRel,
comment|// ReformedSingleRule never saw it.  (GoodSingleRule saw the NoneLeafRel
comment|// instead and fires off of that; later the NoneLeafRel gets converted into
comment|// a PhysLeafRel).  Now Volcano supports rules which match across subsets.
specifier|private
specifier|static
class|class
name|ReformedSingleRule
extends|extends
name|RelOptRule
block|{
name|ReformedSingleRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|NoneSingleRel
operator|.
name|class
argument_list|,
operator|new
name|RelOptRuleOperand
argument_list|(
name|PhysLeafRel
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptRule
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneSingleRel
name|singleRel
init|=
operator|(
name|NoneSingleRel
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
decl_stmt|;
name|RelNode
name|childRel
init|=
name|call
operator|.
name|rels
index|[
literal|1
index|]
decl_stmt|;
name|RelNode
name|physInput
init|=
name|convert
argument_list|(
name|childRel
argument_list|,
name|singleRel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|PhysSingleRel
argument_list|(
name|singleRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|physInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PhysProjectRule
extends|extends
name|RelOptRule
block|{
name|PhysProjectRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|ProjectRel
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptRule
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|RelNode
name|childRel
init|=
operator|(
operator|(
name|ProjectRel
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
operator|)
operator|.
name|getChild
argument_list|()
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|PhysLeafRel
argument_list|(
name|childRel
operator|.
name|getCluster
argument_list|()
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|GoodRemoveSingleRule
extends|extends
name|RelOptRule
block|{
name|GoodRemoveSingleRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|PhysSingleRel
operator|.
name|class
argument_list|,
operator|new
name|RelOptRuleOperand
argument_list|(
name|PhysLeafRel
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptRule
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|PhysSingleRel
name|singleRel
init|=
operator|(
name|PhysSingleRel
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
decl_stmt|;
name|PhysLeafRel
name|leafRel
init|=
operator|(
name|PhysLeafRel
operator|)
name|call
operator|.
name|rels
index|[
literal|1
index|]
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|PhysLeafRel
argument_list|(
name|singleRel
operator|.
name|getCluster
argument_list|()
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ReformedRemoveSingleRule
extends|extends
name|RelOptRule
block|{
name|ReformedRemoveSingleRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|NoneSingleRel
operator|.
name|class
argument_list|,
operator|new
name|RelOptRuleOperand
argument_list|(
name|PhysLeafRel
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptRule
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneSingleRel
name|singleRel
init|=
operator|(
name|NoneSingleRel
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
decl_stmt|;
name|PhysLeafRel
name|leafRel
init|=
operator|(
name|PhysLeafRel
operator|)
name|call
operator|.
name|rels
index|[
literal|1
index|]
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|PhysLeafRel
argument_list|(
name|singleRel
operator|.
name|getCluster
argument_list|()
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestListener
implements|implements
name|RelOptListener
block|{
specifier|private
name|List
argument_list|<
name|RelEvent
argument_list|>
name|eventList
decl_stmt|;
name|TestListener
parameter_list|()
block|{
name|eventList
operator|=
operator|new
name|ArrayList
argument_list|<
name|RelEvent
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|RelEvent
argument_list|>
name|getEventList
parameter_list|()
block|{
return|return
name|eventList
return|;
block|}
specifier|private
name|void
name|recordEvent
parameter_list|(
name|RelEvent
name|event
parameter_list|)
block|{
name|eventList
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptListener
specifier|public
name|void
name|relChosen
parameter_list|(
name|RelChosenEvent
name|event
parameter_list|)
block|{
name|recordEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptListener
specifier|public
name|void
name|relDiscarded
parameter_list|(
name|RelDiscardedEvent
name|event
parameter_list|)
block|{
comment|// Volcano is quite a packrat--it never discards anything!
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|event
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// implement RelOptListener
specifier|public
name|void
name|relEquivalenceFound
parameter_list|(
name|RelEquivalenceEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|isPhysical
argument_list|()
condition|)
block|{
return|return;
block|}
name|recordEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptListener
specifier|public
name|void
name|ruleAttempted
parameter_list|(
name|RuleAttemptedEvent
name|event
parameter_list|)
block|{
name|recordEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
comment|// implement RelOptListener
specifier|public
name|void
name|ruleProductionSucceeded
parameter_list|(
name|RuleProductionEvent
name|event
parameter_list|)
block|{
name|recordEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End VolcanoPlannerTest.java
end_comment

end_unit

