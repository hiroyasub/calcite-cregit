begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|test
operator|.
name|EigenbaseTestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link CompoundParallelTupleIter}.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|CompoundParallelTupleIterTest
extends|extends
name|EigenbaseTestCase
block|{
specifier|public
name|CompoundParallelTupleIterTest
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|// The CompoundParallelTupleIter preserves the order of 2 elements
comment|// from the same source, but may transpose 2 elements from different
comment|// soureces. Being sloppy, just test that the actual results match the
comment|// expected results when resorted.
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|TupleIter
name|tupleIter
parameter_list|,
name|Object
index|[]
name|expected
parameter_list|)
comment|// expected vals -- sorted in place
block|{
name|Object
index|[]
name|actual
init|=
name|toList
argument_list|(
name|tupleIter
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
comment|// get results
name|Arrays
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundParallelTupleIter2
parameter_list|()
block|{
name|TupleIter
name|tupleIter
init|=
operator|new
name|CompoundParallelTupleIter
argument_list|(
operator|new
name|TupleIter
index|[]
block|{
name|makeTupleIter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
block|,
name|makeTupleIter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"c"
block|}
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tupleIter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundParallelTupleIter1
parameter_list|()
block|{
name|TupleIter
name|tupleIter
init|=
operator|new
name|CompoundParallelTupleIter
argument_list|(
operator|new
name|TupleIter
index|[]
block|{
name|makeTupleIter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tupleIter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundParallelTupleIter3
parameter_list|()
block|{
name|TupleIter
name|tupleIter
init|=
operator|new
name|CompoundParallelTupleIter
argument_list|(
operator|new
name|TupleIter
index|[]
block|{
name|makeTupleIter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
block|,
name|makeTupleIter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"d"
block|,
literal|"e"
block|}
argument_list|)
block|,
name|makeTupleIter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"f"
block|}
argument_list|)
block|,                 }
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tupleIter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|,
literal|"f"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundParallelIterEmpty1
parameter_list|()
block|{
name|TupleIter
name|tupleIter
init|=
operator|new
name|CompoundParallelTupleIter
argument_list|(
operator|new
name|TupleIter
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tupleIter
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundParallelIterEmpty2
parameter_list|()
block|{
name|TupleIter
name|tupleIter
init|=
operator|new
name|CompoundParallelTupleIter
argument_list|(
operator|new
name|TupleIter
index|[]
block|{
name|makeTupleIter
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
block|,
name|makeTupleIter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tupleIter
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End CompoundParallelTupleIterTest.java
end_comment

end_unit

