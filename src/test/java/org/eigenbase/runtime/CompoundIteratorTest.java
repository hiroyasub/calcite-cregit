begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|test
operator|.
name|EigenbaseTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link CompoundIterator}.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|CompoundIteratorTest
extends|extends
name|EigenbaseTestCase
block|{
specifier|public
name|CompoundIteratorTest
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundIter
parameter_list|()
block|{
name|Iterator
name|iterator
init|=
operator|new
name|CompoundIterator
argument_list|(
operator|new
name|Iterator
index|[]
block|{
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
block|,
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"c"
block|}
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|iterator
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundIterEmpty
parameter_list|()
block|{
name|Iterator
name|iterator
init|=
operator|new
name|CompoundIterator
argument_list|(
operator|new
name|Iterator
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|iterator
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundIterFirstEmpty
parameter_list|()
block|{
name|Iterator
name|iterator
init|=
operator|new
name|CompoundIterator
argument_list|(
operator|new
name|Iterator
index|[]
block|{
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
block|,
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|null
block|}
argument_list|)
block|,
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
block|,
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
block|,
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
block|,
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|iterator
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|null
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that a BoxIterator returns the same values as the contents of      * an array.      */
specifier|protected
name|void
name|assertUnboxedEquals
parameter_list|(
name|Iterator
name|p
parameter_list|,
name|Object
index|[]
name|a
parameter_list|)
block|{
name|ArrayList
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|o
init|=
name|p
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Box
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Box
operator|)
name|o
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|list
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompoundBoxIter
parameter_list|()
block|{
name|Iterator
name|iterator
init|=
operator|new
name|CompoundIterator
argument_list|(
operator|new
name|Iterator
index|[]
block|{
operator|new
name|BoxIterator
argument_list|(
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"400"
block|,
literal|"401"
block|,
literal|"402"
block|,
literal|"403"
block|}
argument_list|)
argument_list|)
block|,
operator|new
name|BoxIterator
argument_list|(
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"500"
block|,
literal|"501"
block|,
literal|"502"
block|,
literal|"503"
block|}
argument_list|)
argument_list|)
block|,
operator|new
name|BoxIterator
argument_list|(
name|makeIterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"600"
block|,
literal|"601"
block|,
literal|"602"
block|,
literal|"603"
block|}
argument_list|)
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertUnboxedEquals
argument_list|(
name|iterator
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"400"
block|,
literal|"401"
block|,
literal|"402"
block|,
literal|"403"
block|,
literal|"500"
block|,
literal|"501"
block|,
literal|"502"
block|,
literal|"503"
block|,
literal|"600"
block|,
literal|"601"
block|,
literal|"602"
block|,
literal|"603"
block|}
argument_list|)
expr_stmt|;
block|}
comment|// a boxed value (see BoxIterator below)
specifier|static
class|class
name|Box
block|{
name|Object
name|val
decl_stmt|;
specifier|public
name|Box
parameter_list|()
block|{
name|val
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|val
return|;
block|}
specifier|public
name|Box
name|setValue
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|// An Iterator that always returns the same object, a Box, but with
comment|// different contents. Mimics the Iterator from a farrago dynamic
comment|// statement.
specifier|static
class|class
name|BoxIterator
implements|implements
name|Iterator
block|{
name|Iterator
name|base
decl_stmt|;
name|Box
name|box
decl_stmt|;
specifier|public
name|BoxIterator
parameter_list|(
name|Iterator
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|box
operator|=
operator|new
name|Box
argument_list|()
expr_stmt|;
block|}
comment|// implement Iterator
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|base
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|box
operator|.
name|setValue
argument_list|(
name|base
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|box
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|base
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End CompoundIteratorTest.java
end_comment

end_unit

