begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|test
operator|.
name|EigenbaseTestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link BufferedIterator}.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|BufferedIteratorTest
extends|extends
name|EigenbaseTestCase
block|{
specifier|public
name|BufferedIteratorTest
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|// --------------------------------------------------------------------
comment|// test BufferedIterator
specifier|public
name|void
name|testBufferedIterator
parameter_list|()
block|{
name|String
index|[]
name|abc
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
name|Iterator
name|source
init|=
name|makeIterator
argument_list|(
name|abc
argument_list|)
decl_stmt|;
name|BufferedIterator
name|iterator
init|=
operator|new
name|BufferedIterator
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no intervening "hasNext"
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart before we get to the end
name|iterator
operator|.
name|restart
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iterator
argument_list|,
name|abc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|restart
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|iterator
argument_list|,
name|abc
argument_list|)
expr_stmt|;
block|}
comment|// --------------------------------------------------------------------
comment|// test Clonerator
specifier|public
name|void
name|testClonerator
parameter_list|()
block|{
name|String
index|[]
name|ab
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
name|Iterator
name|source
init|=
name|makeIterator
argument_list|(
name|ab
argument_list|)
decl_stmt|;
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|BufferedIterator
operator|.
name|Clonerator
name|clonerator
init|=
operator|new
name|BufferedIterator
operator|.
name|Clonerator
argument_list|(
name|source
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|clonerator
argument_list|,
name|ab
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|ab
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End BufferedIteratorTest.java
end_comment

end_unit

