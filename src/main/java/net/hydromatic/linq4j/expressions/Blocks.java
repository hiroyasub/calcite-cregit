begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *<p>Helper methods concerning {@link BlockExpression}s.</p>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Blocks
block|{
specifier|private
name|Blocks
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"no blocks for you!"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|BlockExpression
name|toFunctionBlock
parameter_list|(
name|Node
name|body
parameter_list|,
name|boolean
name|function
parameter_list|)
block|{
if|if
condition|(
name|body
operator|instanceof
name|BlockExpression
condition|)
block|{
return|return
operator|(
name|BlockExpression
operator|)
name|body
return|;
block|}
name|Statement
name|statement
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|Statement
condition|)
block|{
name|statement
operator|=
operator|(
name|Statement
operator|)
name|body
expr_stmt|;
block|}
if|else if
condition|(
name|body
operator|instanceof
name|Expression
condition|)
block|{
if|if
condition|(
name|Types
operator|.
name|toClass
argument_list|(
name|body
operator|.
name|getType
argument_list|()
argument_list|)
operator|==
name|Void
operator|.
name|TYPE
operator|&&
name|function
condition|)
block|{
name|statement
operator|=
name|Expressions
operator|.
name|statement
argument_list|(
operator|(
name|Expression
operator|)
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|=
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
operator|(
name|Expression
operator|)
name|body
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"block cannot contain node that is neither statement nor "
operator|+
literal|"expression: "
operator|+
name|body
argument_list|)
throw|;
block|}
return|return
name|Expressions
operator|.
name|block
argument_list|(
name|statement
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BlockExpression
name|toFunctionBlock
parameter_list|(
name|Node
name|body
parameter_list|)
block|{
return|return
name|toFunctionBlock
argument_list|(
name|body
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BlockExpression
name|toBlock
parameter_list|(
name|Node
name|body
parameter_list|)
block|{
return|return
name|toFunctionBlock
argument_list|(
name|body
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Prepends a statement to a block. */
specifier|public
specifier|static
name|BlockExpression
name|create
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|BlockExpression
name|block
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|list
argument_list|(
name|statement
argument_list|)
operator|.
name|appendAll
argument_list|(
name|block
operator|.
name|statements
argument_list|)
argument_list|)
return|;
block|}
comment|/** Prepends a list of statements to a block. */
specifier|public
specifier|static
name|BlockExpression
name|create
parameter_list|(
name|Iterable
argument_list|<
name|Statement
argument_list|>
name|statements
parameter_list|,
name|BlockExpression
name|block
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|list
argument_list|(
name|statements
argument_list|)
operator|.
name|appendAll
argument_list|(
name|block
operator|.
name|statements
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a block from a list of nodes. Nodes that are expressions are      * converted to statements; nodes that are blocks are merged into the      * greater block. */
specifier|public
specifier|static
name|BlockExpression
name|create
parameter_list|(
name|Node
modifier|...
name|nodes
parameter_list|)
block|{
name|Expressions
operator|.
name|FluentList
argument_list|<
name|Statement
argument_list|>
name|list
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodes
control|)
block|{
name|add
argument_list|(
name|list
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|Expressions
operator|.
name|block
argument_list|(
name|list
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|add
parameter_list|(
name|Expressions
operator|.
name|FluentList
argument_list|<
name|Statement
argument_list|>
name|list
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|BlockExpression
condition|)
block|{
for|for
control|(
name|Statement
name|statement
range|:
operator|(
operator|(
name|BlockExpression
operator|)
name|node
operator|)
operator|.
name|statements
control|)
block|{
name|add
argument_list|(
name|list
argument_list|,
name|statement
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|node
operator|instanceof
name|Expression
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
operator|(
name|Expression
operator|)
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|Statement
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Appends a block to a list of statements and returns an expression      * (possibly a variable) that represents the result of the newly added      * block. */
specifier|public
specifier|static
name|Expression
name|append
parameter_list|(
name|List
argument_list|<
name|Statement
argument_list|>
name|statements
parameter_list|,
name|String
name|name
parameter_list|,
name|BlockExpression
name|block
parameter_list|)
block|{
if|if
condition|(
name|statements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Statement
name|lastStatement
init|=
name|statements
operator|.
name|get
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastStatement
operator|instanceof
name|GotoExpression
condition|)
block|{
comment|// convert "return expr;" into "expr;"
name|statements
operator|.
name|set
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
operator|(
operator|(
name|GotoExpression
operator|)
name|lastStatement
operator|)
operator|.
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Expression
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|block
operator|.
name|statements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Statement
name|statement
init|=
name|block
operator|.
name|statements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|block
operator|.
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|statement
operator|instanceof
name|DeclarationExpression
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|DeclarationExpression
operator|)
name|statement
operator|)
operator|.
name|parameter
expr_stmt|;
block|}
if|else if
condition|(
name|statement
operator|instanceof
name|GotoExpression
condition|)
block|{
name|statements
operator|.
name|remove
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
operator|(
name|GotoExpression
operator|)
name|statement
operator|)
operator|.
name|expression
expr_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|ParameterExpression
operator|||
name|result
operator|instanceof
name|ConstantExpression
condition|)
block|{
comment|// already simple; no need to declare a variable or even
comment|// to evaluate the expression
block|}
else|else
block|{
name|DeclarationExpression
name|declare
init|=
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|name
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|declare
argument_list|)
expr_stmt|;
name|result
operator|=
name|declare
operator|.
name|parameter
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// not an expression -- result remains null
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** Appends an expression to a list of statements, and returns an expression      * (possibly a variable) that represents the result of the newly added      * block. */
specifier|public
specifier|static
name|Expression
name|append
parameter_list|(
name|List
argument_list|<
name|Statement
argument_list|>
name|statements
parameter_list|,
name|String
name|name
parameter_list|,
name|Expression
name|block
parameter_list|)
block|{
if|if
condition|(
name|statements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Statement
name|lastStatement
init|=
name|statements
operator|.
name|get
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastStatement
operator|instanceof
name|GotoExpression
condition|)
block|{
comment|// convert "return expr;" into "expr;"
name|statements
operator|.
name|set
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
operator|(
operator|(
name|GotoExpression
operator|)
name|lastStatement
operator|)
operator|.
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|DeclarationExpression
name|declare
init|=
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|name
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|declare
argument_list|)
expr_stmt|;
return|return
name|block
return|;
block|}
comment|/** Converts a simple "{ return expr; }" block into "expr"; otherwise      * throws. */
specifier|public
specifier|static
name|Expression
name|simple
parameter_list|(
name|BlockExpression
name|block
parameter_list|)
block|{
if|if
condition|(
name|block
operator|.
name|statements
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Statement
name|statement
init|=
name|block
operator|.
name|statements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|statement
operator|instanceof
name|GotoExpression
condition|)
block|{
return|return
operator|(
operator|(
name|GotoExpression
operator|)
name|statement
operator|)
operator|.
name|expression
return|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a simple block: "
operator|+
name|block
argument_list|)
throw|;
block|}
block|}
end_class

begin_comment
comment|// End Blocks.java
end_comment

end_unit

