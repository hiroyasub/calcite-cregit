begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Represents an expression that has a binary operator.  */
end_comment

begin_class
specifier|public
class|class
name|BinaryExpression
extends|extends
name|Expression
block|{
specifier|public
specifier|final
name|Expression
name|expression0
decl_stmt|;
specifier|public
specifier|final
name|Expression
name|expression1
decl_stmt|;
specifier|private
specifier|final
name|Primitive
name|primitive
decl_stmt|;
name|BinaryExpression
parameter_list|(
name|ExpressionType
name|nodeType
parameter_list|,
name|Type
name|type
parameter_list|,
name|Expression
name|expression0
parameter_list|,
name|Expression
name|expression1
parameter_list|)
block|{
name|super
argument_list|(
name|nodeType
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression0
operator|=
name|expression0
expr_stmt|;
name|this
operator|.
name|expression1
operator|=
name|expression1
expr_stmt|;
name|this
operator|.
name|primitive
operator|=
name|deducePrimitive
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Primitive
name|deducePrimitive
parameter_list|()
block|{
if|if
condition|(
name|expression0
operator|.
name|getType
argument_list|()
operator|==
name|Integer
operator|.
name|TYPE
condition|)
block|{
return|return
name|Primitive
operator|.
name|INT
return|;
block|}
if|if
condition|(
name|expression0
operator|.
name|getType
argument_list|()
operator|==
name|Double
operator|.
name|TYPE
condition|)
block|{
return|return
name|Primitive
operator|.
name|DOUBLE
return|;
block|}
if|if
condition|(
name|expression0
operator|.
name|getType
argument_list|()
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
block|{
return|return
name|Primitive
operator|.
name|BOOLEAN
return|;
block|}
return|return
name|Primitive
operator|.
name|OTHER
return|;
block|}
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Evaluator
name|evaluator
parameter_list|)
block|{
switch|switch
condition|(
name|nodeType
condition|)
block|{
case|case
name|AndAlso
case|:
return|return
operator|(
name|Boolean
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|&&
operator|(
name|Boolean
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|Add
case|:
switch|switch
condition|(
name|primitive
condition|)
block|{
case|case
name|INT
case|:
return|return
operator|(
name|Integer
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|+
operator|(
name|Integer
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|+
operator|(
name|Double
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
case|case
name|Divide
case|:
switch|switch
condition|(
name|primitive
condition|)
block|{
case|case
name|INT
case|:
return|return
operator|(
name|Integer
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|/
operator|(
name|Integer
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|/
operator|(
name|Double
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
case|case
name|Equal
case|:
return|return
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|.
name|equals
argument_list|(
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
argument_list|)
return|;
case|case
name|GreaterThan
case|:
switch|switch
condition|(
name|primitive
condition|)
block|{
case|case
name|INT
case|:
return|return
operator|(
name|Integer
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|>
operator|(
name|Integer
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|>
operator|(
name|Double
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
case|case
name|GreaterThanOrEqual
case|:
switch|switch
condition|(
name|primitive
condition|)
block|{
case|case
name|INT
case|:
return|return
operator|(
name|Integer
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|>=
operator|(
name|Integer
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|>=
operator|(
name|Double
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
case|case
name|LessThan
case|:
switch|switch
condition|(
name|primitive
condition|)
block|{
case|case
name|INT
case|:
return|return
operator|(
name|Integer
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|<
operator|(
name|Integer
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|<
operator|(
name|Double
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
case|case
name|LessThanOrEqual
case|:
switch|switch
condition|(
name|primitive
condition|)
block|{
case|case
name|INT
case|:
return|return
operator|(
name|Integer
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|<=
operator|(
name|Integer
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|<=
operator|(
name|Double
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
case|case
name|Multiply
case|:
switch|switch
condition|(
name|primitive
condition|)
block|{
case|case
name|INT
case|:
return|return
operator|(
name|Integer
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|*
operator|(
name|Integer
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|*
operator|(
name|Double
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
case|case
name|NotEqual
case|:
return|return
operator|!
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|.
name|equals
argument_list|(
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
argument_list|)
return|;
case|case
name|OrElse
case|:
return|return
operator|(
name|Boolean
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|||
operator|(
name|Boolean
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|Subtract
case|:
switch|switch
condition|(
name|primitive
condition|)
block|{
case|case
name|INT
case|:
return|return
operator|(
name|Integer
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|-
operator|(
name|Integer
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|expression0
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
operator|-
operator|(
name|Double
operator|)
name|expression1
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
return|;
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
default|default:
throw|throw
name|cannotEvaluate
argument_list|()
throw|;
block|}
block|}
name|void
name|accept
parameter_list|(
name|ExpressionWriter
name|writer
parameter_list|,
name|int
name|lprec
parameter_list|,
name|int
name|rprec
parameter_list|)
block|{
if|if
condition|(
name|writer
operator|.
name|requireParentheses
argument_list|(
name|this
argument_list|,
name|lprec
argument_list|,
name|rprec
argument_list|)
condition|)
block|{
return|return;
block|}
name|expression0
operator|.
name|accept
argument_list|(
name|writer
argument_list|,
name|lprec
argument_list|,
name|nodeType
operator|.
name|lprec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|nodeType
operator|.
name|op
argument_list|)
expr_stmt|;
name|expression1
operator|.
name|accept
argument_list|(
name|writer
argument_list|,
name|nodeType
operator|.
name|rprec
argument_list|,
name|rprec
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RuntimeException
name|cannotEvaluate
parameter_list|()
block|{
return|return
operator|new
name|RuntimeException
argument_list|(
literal|"cannot evaluate "
operator|+
name|this
operator|+
literal|", nodeType="
operator|+
name|nodeType
operator|+
literal|", primitive="
operator|+
name|primitive
argument_list|)
return|;
block|}
enum|enum
name|Primitive
block|{
name|INT
block|,
name|DOUBLE
block|,
name|BOOLEAN
block|,
name|OTHER
block|}
block|}
end_class

begin_comment
comment|// End BinaryExpression.java
end_comment

end_unit

