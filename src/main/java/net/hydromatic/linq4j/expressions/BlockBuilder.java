begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Builder for {@link BlockExpression}.  *  *<p>Has methods that help ensure that variable names are unique.</p>  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|BlockBuilder
block|{
specifier|final
name|List
argument_list|<
name|Statement
argument_list|>
name|statements
init|=
operator|new
name|ArrayList
argument_list|<
name|Statement
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|variables
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Appends a block to a list of statements and returns an expression      * (possibly a variable) that represents the result of the newly added      * block. */
specifier|public
name|Expression
name|append
parameter_list|(
name|String
name|name
parameter_list|,
name|BlockExpression
name|block
parameter_list|)
block|{
if|if
condition|(
name|statements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Statement
name|lastStatement
init|=
name|statements
operator|.
name|get
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastStatement
operator|instanceof
name|GotoExpression
condition|)
block|{
comment|// convert "return expr;" into "expr;"
name|statements
operator|.
name|set
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
operator|(
operator|(
name|GotoExpression
operator|)
name|lastStatement
operator|)
operator|.
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Expression
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|block
operator|.
name|statements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Statement
name|statement
init|=
name|block
operator|.
name|statements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|block
operator|.
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|statement
operator|instanceof
name|DeclarationExpression
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|DeclarationExpression
operator|)
name|statement
operator|)
operator|.
name|parameter
expr_stmt|;
block|}
if|else if
condition|(
name|statement
operator|instanceof
name|GotoExpression
condition|)
block|{
name|statements
operator|.
name|remove
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
operator|(
name|GotoExpression
operator|)
name|statement
operator|)
operator|.
name|expression
expr_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|ParameterExpression
operator|||
name|result
operator|instanceof
name|ConstantExpression
condition|)
block|{
comment|// already simple; no need to declare a variable or
comment|// even to evaluate the expression
block|}
else|else
block|{
name|DeclarationExpression
name|declare
init|=
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|newName
argument_list|(
name|name
argument_list|)
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|declare
argument_list|)
expr_stmt|;
name|result
operator|=
name|declare
operator|.
name|parameter
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// not an expression -- result remains null
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** Appends an expression to a list of statements, and returns an expression      * (possibly a variable) that represents the result of the newly added      * block. */
specifier|public
name|Expression
name|append
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|block
parameter_list|)
block|{
if|if
condition|(
name|statements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Statement
name|lastStatement
init|=
name|statements
operator|.
name|get
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastStatement
operator|instanceof
name|GotoExpression
condition|)
block|{
comment|// convert "return expr;" into "expr;"
name|statements
operator|.
name|set
argument_list|(
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
operator|(
operator|(
name|GotoExpression
operator|)
name|lastStatement
operator|)
operator|.
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|DeclarationExpression
name|declare
init|=
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|name
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|declare
argument_list|)
expr_stmt|;
return|return
name|block
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Statement
name|statement
parameter_list|)
block|{
name|statements
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
if|if
condition|(
name|statement
operator|instanceof
name|DeclarationExpression
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|DeclarationExpression
operator|)
name|statement
operator|)
operator|.
name|parameter
operator|.
name|name
decl_stmt|;
if|if
condition|(
operator|!
name|variables
operator|.
name|add
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"duplicate variable "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Returns a block consisting of the current list of statements. */
specifier|public
name|BlockExpression
name|toBlock
parameter_list|()
block|{
return|return
name|Expressions
operator|.
name|block
argument_list|(
name|statements
argument_list|)
return|;
block|}
comment|/** Creates a name for a new variable, unique within this block. */
specifier|private
name|String
name|newName
parameter_list|(
name|String
name|suggestion
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|candidate
init|=
name|suggestion
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|variables
operator|.
name|contains
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
return|return
name|candidate
return|;
block|}
name|candidate
operator|=
name|suggestion
operator|+
operator|(
name|i
operator|++
operator|)
expr_stmt|;
block|}
block|}
specifier|public
name|BlockBuilder
name|append
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|statements
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

begin_comment
comment|// End BlockBuilder.java
end_comment

end_unit

