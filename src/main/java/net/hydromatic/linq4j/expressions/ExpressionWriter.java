begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Converts an expression to Java code.  */
end_comment

begin_class
class|class
name|ExpressionWriter
block|{
specifier|static
name|Indent
name|INDENT
init|=
operator|new
name|Indent
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
name|int
name|level
decl_stmt|;
specifier|private
name|String
name|indent
decl_stmt|;
specifier|private
name|boolean
name|indentPending
decl_stmt|;
specifier|public
name|ExpressionWriter
parameter_list|()
block|{
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|expression
operator|.
name|accept
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|requireParentheses
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|int
name|lprec
parameter_list|,
name|int
name|rprec
parameter_list|)
block|{
if|if
condition|(
name|lprec
operator|<
name|expression
operator|.
name|nodeType
operator|.
name|lprec
operator|&&
name|expression
operator|.
name|nodeType
operator|.
name|rprec
operator|>=
name|rprec
condition|)
block|{
return|return
literal|false
return|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|expression
operator|.
name|accept
argument_list|(
name|this
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Increases the indentation level.      */
specifier|public
name|void
name|begin
parameter_list|()
block|{
name|indent
operator|=
name|INDENT
operator|.
name|get
argument_list|(
operator|++
name|level
argument_list|)
expr_stmt|;
block|}
comment|/**      * Decreases the indentation level.      */
specifier|public
name|void
name|end
parameter_list|()
block|{
name|indent
operator|=
name|INDENT
operator|.
name|get
argument_list|(
operator|--
name|level
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExpressionWriter
name|newlineAndIndent
parameter_list|()
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|indentPending
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExpressionWriter
name|indent
parameter_list|()
block|{
name|buf
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExpressionWriter
name|begin
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|begin
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|indentPending
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExpressionWriter
name|end
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|end
argument_list|()
expr_stmt|;
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|indentPending
operator|=
name|s
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExpressionWriter
name|append
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|checkIndent
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExpressionWriter
name|append
parameter_list|(
name|Class
name|o
parameter_list|)
block|{
name|checkIndent
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|o
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|getPackage
argument_list|()
operator|==
name|Package
operator|.
name|getPackage
argument_list|(
literal|"java.lang"
argument_list|)
operator|&&
operator|!
name|o
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
literal|"java.lang."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|className
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExpressionWriter
name|append
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|checkIndent
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExpressionWriter
name|append
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkIndent
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|checkIndent
parameter_list|()
block|{
if|if
condition|(
name|indentPending
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|indentPending
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|StringBuilder
name|getBuf
parameter_list|()
block|{
name|checkIndent
argument_list|()
expr_stmt|;
return|return
name|buf
return|;
block|}
specifier|private
specifier|static
class|class
name|Indent
extends|extends
name|ArrayList
argument_list|<
name|String
argument_list|>
block|{
specifier|public
name|Indent
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|ensureSize
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|String
name|of
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|ensureSize
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|private
name|void
name|ensureSize
parameter_list|(
name|int
name|targetSize
parameter_list|)
block|{
if|if
condition|(
name|targetSize
operator|<
name|size
argument_list|()
condition|)
block|{
return|return;
block|}
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
literal|2
operator|*
name|targetSize
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|chars
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|String
name|bigString
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetSize
condition|;
name|i
operator|++
control|)
block|{
name|add
argument_list|(
name|bigString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End ExpressionWriter.java
end_comment

end_unit

