begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a call to either a static or an instance method.  */
end_comment

begin_class
specifier|public
class|class
name|MethodCallExpression
extends|extends
name|Expression
block|{
specifier|public
specifier|final
name|Method
name|method
decl_stmt|;
specifier|public
specifier|final
name|Expression
name|targetExpression
decl_stmt|;
comment|// null for call to static method
specifier|public
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
decl_stmt|;
name|MethodCallExpression
parameter_list|(
name|Type
name|returnType
parameter_list|,
name|Method
name|method
parameter_list|,
name|Expression
name|targetExpression
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|super
argument_list|(
name|ExpressionType
operator|.
name|Call
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|targetExpression
operator|=
name|targetExpression
expr_stmt|;
name|this
operator|.
name|expressions
operator|=
name|expressions
expr_stmt|;
assert|assert
name|expressions
operator|!=
literal|null
assert|;
assert|assert
name|returnType
operator|!=
literal|null
assert|;
assert|assert
operator|(
name|targetExpression
operator|==
literal|null
operator|)
operator|==
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
assert|;
assert|assert
name|Types
operator|.
name|toClass
argument_list|(
name|returnType
argument_list|)
operator|==
name|method
operator|.
name|getReturnType
argument_list|()
assert|;
block|}
name|MethodCallExpression
parameter_list|(
name|Method
name|method
parameter_list|,
name|Expression
name|targetExpression
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|this
argument_list|(
name|method
operator|.
name|getGenericReturnType
argument_list|()
argument_list|,
name|method
argument_list|,
name|targetExpression
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|accept
parameter_list|(
name|Visitor
name|visitor
parameter_list|)
block|{
name|Expression
name|targetExpression
init|=
name|Expressions
operator|.
name|accept
argument_list|(
name|this
operator|.
name|targetExpression
argument_list|,
name|visitor
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
name|Expressions
operator|.
name|acceptExpressions
argument_list|(
name|this
operator|.
name|expressions
argument_list|,
name|visitor
argument_list|)
decl_stmt|;
return|return
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|,
name|targetExpression
argument_list|,
name|expressions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Evaluator
name|evaluator
parameter_list|)
block|{
specifier|final
name|Object
name|target
decl_stmt|;
if|if
condition|(
name|targetExpression
operator|==
literal|null
condition|)
block|{
name|target
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|targetExpression
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
name|expressions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|expression
init|=
name|expressions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|args
index|[
name|i
index|]
operator|=
name|expression
operator|.
name|evaluate
argument_list|(
name|evaluator
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error while evaluating "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error while evaluating "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|accept
parameter_list|(
name|ExpressionWriter
name|writer
parameter_list|,
name|int
name|lprec
parameter_list|,
name|int
name|rprec
parameter_list|)
block|{
if|if
condition|(
name|writer
operator|.
name|requireParentheses
argument_list|(
name|this
argument_list|,
name|lprec
argument_list|,
name|rprec
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|targetExpression
operator|!=
literal|null
condition|)
block|{
comment|// instance method
name|targetExpression
operator|.
name|accept
argument_list|(
name|writer
argument_list|,
name|lprec
argument_list|,
name|nodeType
operator|.
name|lprec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// static method
name|writer
operator|.
name|append
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Expression
name|expression
range|:
name|expressions
control|)
block|{
if|if
condition|(
name|k
operator|++
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|accept
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End MethodCallExpression.java
end_comment

end_unit

