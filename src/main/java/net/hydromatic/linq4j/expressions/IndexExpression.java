begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents indexing a property or array.  */
end_comment

begin_class
specifier|public
class|class
name|IndexExpression
extends|extends
name|Expression
block|{
specifier|public
specifier|final
name|Expression
name|array
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|indexExpressions
decl_stmt|;
specifier|public
name|IndexExpression
parameter_list|(
name|Expression
name|array
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|indexExpressions
parameter_list|)
block|{
name|super
argument_list|(
name|ExpressionType
operator|.
name|ArrayIndex
argument_list|,
name|Types
operator|.
name|getComponentType
argument_list|(
name|array
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
name|this
operator|.
name|indexExpressions
operator|=
name|indexExpressions
expr_stmt|;
assert|assert
name|indexExpressions
operator|.
name|size
argument_list|()
operator|>=
literal|1
assert|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|nodeType
operator|.
name|hashCode
argument_list|()
operator|^
name|array
operator|.
name|hashCode
argument_list|()
operator|^
name|indexExpressions
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|IndexExpression
condition|)
block|{
specifier|final
name|IndexExpression
name|indexExpression
init|=
operator|(
name|IndexExpression
operator|)
name|obj
decl_stmt|;
return|return
name|nodeType
operator|==
name|indexExpression
operator|.
name|nodeType
operator|&&
name|array
operator|.
name|equals
argument_list|(
name|indexExpression
operator|.
name|array
argument_list|)
operator|&&
name|indexExpressions
operator|.
name|equals
argument_list|(
name|indexExpression
operator|.
name|indexExpressions
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|accept
parameter_list|(
name|Visitor
name|visitor
parameter_list|)
block|{
name|Expression
name|array
init|=
name|this
operator|.
name|array
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|indexExpressions
init|=
name|Expressions
operator|.
name|acceptExpressions
argument_list|(
name|this
operator|.
name|indexExpressions
argument_list|,
name|visitor
argument_list|)
decl_stmt|;
return|return
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|,
name|array
argument_list|,
name|indexExpressions
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|accept
parameter_list|(
name|ExpressionWriter
name|writer
parameter_list|,
name|int
name|lprec
parameter_list|,
name|int
name|rprec
parameter_list|)
block|{
name|array
operator|.
name|accept
argument_list|(
name|writer
argument_list|,
name|lprec
argument_list|,
name|nodeType
operator|.
name|lprec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|list
argument_list|(
literal|"["
argument_list|,
literal|", "
argument_list|,
literal|"]"
argument_list|,
name|indexExpressions
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End IndexExpression.java
end_comment

end_unit

