begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Enumeration of Java's primitive types.  *  *<p>There are fields for the native class (e.g.<code>int</code>, also  * known as {@link Integer#TYPE}) and the boxing class  * (e.g. {@link Integer}).</p> */
end_comment

begin_enum
specifier|public
enum|enum
name|Primitive
block|{
name|BOOLEAN
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
block|,
name|BYTE
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
block|,
name|CHARACTER
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
name|Character
operator|.
name|class
argument_list|)
block|,
name|SHORT
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|Short
operator|.
name|class
argument_list|)
block|,
name|INT
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
block|,
name|LONG
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|Long
operator|.
name|class
argument_list|)
block|,
name|FLOAT
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|Float
operator|.
name|class
argument_list|)
block|,
name|DOUBLE
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|Double
operator|.
name|class
argument_list|)
block|,
name|VOID
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|,
name|Void
operator|.
name|class
argument_list|)
block|,
name|OTHER
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
block|;
specifier|public
specifier|final
name|Class
name|primitiveClass
decl_stmt|;
specifier|public
specifier|final
name|Class
name|boxClass
decl_stmt|;
specifier|public
specifier|final
name|String
name|primitiveName
decl_stmt|;
comment|// e.g. "int"
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Primitive
argument_list|>
name|PRIMITIVE_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Primitive
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Primitive
argument_list|>
name|BOX_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Primitive
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|Primitive
index|[]
name|values
init|=
name|Primitive
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Primitive
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|.
name|primitiveClass
operator|!=
literal|null
condition|)
block|{
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|value
operator|.
name|primitiveClass
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|boxClass
operator|!=
literal|null
condition|)
block|{
name|BOX_MAP
operator|.
name|put
argument_list|(
name|value
operator|.
name|boxClass
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Primitive
parameter_list|(
name|Class
name|primitiveClass
parameter_list|,
name|Class
name|boxClass
parameter_list|)
block|{
name|this
operator|.
name|primitiveClass
operator|=
name|primitiveClass
expr_stmt|;
name|this
operator|.
name|primitiveName
operator|=
name|primitiveClass
operator|!=
literal|null
condition|?
name|primitiveClass
operator|.
name|getSimpleName
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|boxClass
operator|=
name|boxClass
expr_stmt|;
block|}
comment|/** Returns the Primitive object for a given primitive class.      *      *<p>For example,<code>of(Long.TYPE)</code> or<code>of(long.class)</code>      * returns {@link #LONG}. */
specifier|public
specifier|static
name|Primitive
name|of
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|//noinspection SuspiciousMethodCalls
return|return
name|PRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** Returns the Primitive object for a given boxing class.      *      *<p>For example,<code>ofBox(java.util.Long.class)</code>      * returns {@link #LONG}. */
specifier|public
specifier|static
name|Primitive
name|ofBox
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|//noinspection SuspiciousMethodCalls
return|return
name|BOX_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Converts a collection of boxed primitives into an array of primitives.      *      * @param collection Collection of boxed primitives      * @return array of primitives      *      * @throws ClassCastException if any element is not of the box type      * @throws NullPointerException if any element is null      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Object
name|toArray
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DOUBLE
case|:
name|double
index|[]
name|doubles
init|=
operator|new
name|double
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|double
name|_double
range|:
operator|(
name|Collection
argument_list|<
name|Double
argument_list|>
operator|)
name|collection
control|)
block|{
name|doubles
index|[
name|i
operator|++
index|]
operator|=
name|_double
expr_stmt|;
block|}
return|return
name|doubles
return|;
case|case
name|FLOAT
case|:
name|float
index|[]
name|floats
init|=
operator|new
name|float
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|float
name|_float
range|:
operator|(
name|Collection
argument_list|<
name|Float
argument_list|>
operator|)
name|collection
control|)
block|{
name|floats
index|[
name|i
operator|++
index|]
operator|=
name|_float
expr_stmt|;
block|}
return|return
name|floats
return|;
case|case
name|INT
case|:
name|int
index|[]
name|ints
init|=
operator|new
name|int
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|_int
range|:
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|collection
control|)
block|{
name|ints
index|[
name|i
operator|++
index|]
operator|=
name|_int
expr_stmt|;
block|}
return|return
name|ints
return|;
case|case
name|LONG
case|:
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|long
name|_long
range|:
operator|(
name|Collection
argument_list|<
name|Long
argument_list|>
operator|)
name|collection
control|)
block|{
name|longs
index|[
name|i
operator|++
index|]
operator|=
name|_long
expr_stmt|;
block|}
return|return
name|longs
return|;
case|case
name|SHORT
case|:
name|short
index|[]
name|shorts
init|=
operator|new
name|short
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|short
name|_short
range|:
operator|(
name|Collection
argument_list|<
name|Short
argument_list|>
operator|)
name|collection
control|)
block|{
name|shorts
index|[
name|i
operator|++
index|]
operator|=
name|_short
expr_stmt|;
block|}
return|return
name|shorts
return|;
case|case
name|BOOLEAN
case|:
name|boolean
index|[]
name|booleans
init|=
operator|new
name|boolean
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|boolean
name|_boolean
range|:
operator|(
name|Collection
argument_list|<
name|Boolean
argument_list|>
operator|)
name|collection
control|)
block|{
name|booleans
index|[
name|i
operator|++
index|]
operator|=
name|_boolean
expr_stmt|;
block|}
return|return
name|booleans
return|;
case|case
name|BYTE
case|:
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|byte
name|_byte
range|:
operator|(
name|Collection
argument_list|<
name|Byte
argument_list|>
operator|)
name|collection
control|)
block|{
name|bytes
index|[
name|i
operator|++
index|]
operator|=
name|_byte
expr_stmt|;
block|}
return|return
name|bytes
return|;
case|case
name|CHARACTER
case|:
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|char
name|_char
range|:
operator|(
name|Collection
argument_list|<
name|Character
argument_list|>
operator|)
name|collection
control|)
block|{
name|chars
index|[
name|i
operator|++
index|]
operator|=
name|_char
expr_stmt|;
block|}
return|return
name|chars
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected: "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
block|}
end_enum

begin_comment
comment|// End Primitive.java
end_comment

end_unit

