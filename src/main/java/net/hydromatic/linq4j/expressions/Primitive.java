begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Enumeration of Java's primitive types.  *  *<p>There are fields for the native class (e.g.<code>int</code>, also  * known as {@link Integer#TYPE}) and the boxing class  * (e.g. {@link Integer}).</p>  */
end_comment

begin_enum
specifier|public
enum|enum
name|Primitive
block|{
name|BOOLEAN
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
block|,
name|BYTE
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|Byte
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|Byte
operator|.
name|MIN_VALUE
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|CHAR
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
name|Character
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|Character
operator|.
name|MIN_VALUE
argument_list|,
name|Character
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|SHORT
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|Short
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|Short
operator|.
name|MIN_VALUE
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|INT
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|Short
operator|.
name|MIN_VALUE
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|LONG
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|Long
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|FLOAT
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|Float
operator|.
name|class
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|DOUBLE
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|Double
operator|.
name|class
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|VOID
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|,
name|Void
operator|.
name|class
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|,
name|OTHER
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|;
specifier|public
specifier|final
name|Class
name|primitiveClass
decl_stmt|;
specifier|public
specifier|final
name|Class
name|boxClass
decl_stmt|;
specifier|public
specifier|final
name|String
name|primitiveName
decl_stmt|;
comment|// e.g. "int"
specifier|private
specifier|final
name|int
name|family
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|fixed
decl_stmt|;
specifier|public
specifier|final
name|Object
name|min
decl_stmt|;
specifier|public
specifier|final
name|Object
name|max
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Primitive
argument_list|>
name|PRIMITIVE_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Primitive
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Primitive
argument_list|>
name|BOX_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Primitive
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|Primitive
index|[]
name|values
init|=
name|Primitive
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Primitive
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|.
name|primitiveClass
operator|!=
literal|null
condition|)
block|{
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|value
operator|.
name|primitiveClass
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|boxClass
operator|!=
literal|null
condition|)
block|{
name|BOX_MAP
operator|.
name|put
argument_list|(
name|value
operator|.
name|boxClass
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Primitive
parameter_list|(
name|Class
name|primitiveClass
parameter_list|,
name|Class
name|boxClass
parameter_list|,
name|int
name|family
parameter_list|,
name|boolean
name|fixed
parameter_list|,
name|Object
name|min
parameter_list|,
name|Object
name|max
parameter_list|)
block|{
name|this
operator|.
name|primitiveClass
operator|=
name|primitiveClass
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
name|this
operator|.
name|primitiveName
operator|=
name|primitiveClass
operator|!=
literal|null
condition|?
name|primitiveClass
operator|.
name|getSimpleName
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|boxClass
operator|=
name|boxClass
expr_stmt|;
name|this
operator|.
name|fixed
operator|=
name|fixed
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
comment|/**    * Returns the Primitive object for a given primitive class.    *    *<p>For example,<code>of(Long.TYPE)</code> or<code>of(long.class)</code>    * returns {@link #LONG}.    */
specifier|public
specifier|static
name|Primitive
name|of
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|//noinspection SuspiciousMethodCalls
return|return
name|PRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Returns the Primitive object for a given boxing class.    *    *<p>For example,<code>ofBox(java.util.Long.class)</code>    * returns {@link #LONG}.    */
specifier|public
specifier|static
name|Primitive
name|ofBox
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|//noinspection SuspiciousMethodCalls
return|return
name|BOX_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Returns whether a given type is primitive.    */
specifier|public
specifier|static
name|boolean
name|is
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|//noinspection SuspiciousMethodCalls
return|return
name|PRIMITIVE_MAP
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Returns whether a given type is a box type (e.g. {@link Integer}).    */
specifier|public
specifier|static
name|boolean
name|isBox
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|//noinspection SuspiciousMethodCalls
return|return
name|BOX_MAP
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** Returns whether this type is a primitive, box or other type. Useful for    * switch statements. */
specifier|public
specifier|static
name|Flavor
name|flavor
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|is
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Flavor
operator|.
name|PRIMITIVE
return|;
block|}
if|else if
condition|(
name|isBox
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Flavor
operator|.
name|BOX
return|;
block|}
else|else
block|{
return|return
name|Flavor
operator|.
name|OBJECT
return|;
block|}
block|}
comment|/**    * Converts a primitive type to a boxed type; returns other types    * unchanged.    */
specifier|public
specifier|static
name|Type
name|box
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Primitive
name|primitive
init|=
name|of
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|primitive
operator|==
literal|null
condition|?
name|type
else|:
name|primitive
operator|.
name|boxClass
return|;
block|}
comment|/**    * Converts a primitive class to a boxed class; returns other classes    * unchanged.    */
specifier|public
specifier|static
name|Class
name|box
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|Primitive
name|primitive
init|=
name|of
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|primitive
operator|==
literal|null
condition|?
name|type
else|:
name|primitive
operator|.
name|boxClass
return|;
block|}
comment|/**    * Converts a boxed type to a primitive type; returns other types    * unchanged.    */
specifier|public
specifier|static
name|Type
name|unbox
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Primitive
name|primitive
init|=
name|ofBox
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|primitive
operator|==
literal|null
condition|?
name|type
else|:
name|primitive
operator|.
name|primitiveClass
return|;
block|}
comment|/**    * Converts a boxed class to a primitive class; returns other types    * unchanged.    */
specifier|public
specifier|static
name|Class
name|unbox
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|Primitive
name|primitive
init|=
name|ofBox
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|primitive
operator|==
literal|null
condition|?
name|type
else|:
name|primitive
operator|.
name|primitiveClass
return|;
block|}
comment|/**    * Adapts a primitive array into a {@link List}. For example,    * {@code asList(new double[2])} returns a {@code List&lt;Double&gt;}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|?
argument_list|>
name|asList
parameter_list|(
specifier|final
name|Object
name|array
parameter_list|)
block|{
comment|// REVIEW: A per-type list might be more efficient. (Or might not.)
return|return
operator|new
name|AbstractList
argument_list|()
block|{
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|Array
operator|.
name|get
argument_list|(
name|array
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|Array
operator|.
name|getLength
argument_list|(
name|array
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Adapts an array of {@code boolean} into a {@link List} of    * {@link Boolean}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Boolean
argument_list|>
name|asList
parameter_list|(
name|boolean
index|[]
name|elements
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|List
argument_list|<
name|Boolean
argument_list|>
operator|)
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|elements
argument_list|)
return|;
block|}
comment|/**    * Adapts an array of {@code byte} into a {@link List} of    * {@link Byte}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Byte
argument_list|>
name|asList
parameter_list|(
name|byte
index|[]
name|elements
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|List
argument_list|<
name|Byte
argument_list|>
operator|)
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|elements
argument_list|)
return|;
block|}
comment|/**    * Adapts an array of {@code char} into a {@link List} of    * {@link Character}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Character
argument_list|>
name|asList
parameter_list|(
name|char
index|[]
name|elements
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|List
argument_list|<
name|Character
argument_list|>
operator|)
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|elements
argument_list|)
return|;
block|}
comment|/**    * Adapts an array of {@code short} into a {@link List} of    * {@link Short}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Short
argument_list|>
name|asList
parameter_list|(
name|short
index|[]
name|elements
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|List
argument_list|<
name|Short
argument_list|>
operator|)
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|elements
argument_list|)
return|;
block|}
comment|/**    * Adapts an array of {@code int} into a {@link List} of    * {@link Integer}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|asList
parameter_list|(
name|int
index|[]
name|elements
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|elements
argument_list|)
return|;
block|}
comment|/**    * Adapts an array of {@code long} into a {@link List} of    * {@link Long}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|asList
parameter_list|(
name|long
index|[]
name|elements
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|elements
argument_list|)
return|;
block|}
comment|/**    * Adapts an array of {@code float} into a {@link List} of    * {@link Float}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Float
argument_list|>
name|asList
parameter_list|(
name|float
index|[]
name|elements
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|List
argument_list|<
name|Float
argument_list|>
operator|)
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|elements
argument_list|)
return|;
block|}
comment|/**    * Adapts an array of {@code double} into a {@link List} of    * {@link Double}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Double
argument_list|>
name|asList
parameter_list|(
name|double
index|[]
name|elements
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|elements
argument_list|)
return|;
block|}
comment|/**    * Converts a collection of boxed primitives into an array of primitives.    *    * @param collection Collection of boxed primitives    *    * @return array of primitives    * @throws ClassCastException   if any element is not of the box type    * @throws NullPointerException if any element is null    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Object
name|toArray
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DOUBLE
case|:
name|double
index|[]
name|doubles
init|=
operator|new
name|double
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|double
name|_double
range|:
operator|(
name|Collection
argument_list|<
name|Double
argument_list|>
operator|)
name|collection
control|)
block|{
name|doubles
index|[
name|i
operator|++
index|]
operator|=
name|_double
expr_stmt|;
block|}
return|return
name|doubles
return|;
case|case
name|FLOAT
case|:
name|float
index|[]
name|floats
init|=
operator|new
name|float
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|float
name|_float
range|:
operator|(
name|Collection
argument_list|<
name|Float
argument_list|>
operator|)
name|collection
control|)
block|{
name|floats
index|[
name|i
operator|++
index|]
operator|=
name|_float
expr_stmt|;
block|}
return|return
name|floats
return|;
case|case
name|INT
case|:
name|int
index|[]
name|ints
init|=
operator|new
name|int
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|_int
range|:
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|collection
control|)
block|{
name|ints
index|[
name|i
operator|++
index|]
operator|=
name|_int
expr_stmt|;
block|}
return|return
name|ints
return|;
case|case
name|LONG
case|:
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|long
name|_long
range|:
operator|(
name|Collection
argument_list|<
name|Long
argument_list|>
operator|)
name|collection
control|)
block|{
name|longs
index|[
name|i
operator|++
index|]
operator|=
name|_long
expr_stmt|;
block|}
return|return
name|longs
return|;
case|case
name|SHORT
case|:
name|short
index|[]
name|shorts
init|=
operator|new
name|short
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|short
name|_short
range|:
operator|(
name|Collection
argument_list|<
name|Short
argument_list|>
operator|)
name|collection
control|)
block|{
name|shorts
index|[
name|i
operator|++
index|]
operator|=
name|_short
expr_stmt|;
block|}
return|return
name|shorts
return|;
case|case
name|BOOLEAN
case|:
name|boolean
index|[]
name|booleans
init|=
operator|new
name|boolean
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|boolean
name|_boolean
range|:
operator|(
name|Collection
argument_list|<
name|Boolean
argument_list|>
operator|)
name|collection
control|)
block|{
name|booleans
index|[
name|i
operator|++
index|]
operator|=
name|_boolean
expr_stmt|;
block|}
return|return
name|booleans
return|;
case|case
name|BYTE
case|:
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|byte
name|_byte
range|:
operator|(
name|Collection
argument_list|<
name|Byte
argument_list|>
operator|)
name|collection
control|)
block|{
name|bytes
index|[
name|i
operator|++
index|]
operator|=
name|_byte
expr_stmt|;
block|}
return|return
name|bytes
return|;
case|case
name|CHAR
case|:
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|char
name|_char
range|:
operator|(
name|Collection
argument_list|<
name|Character
argument_list|>
operator|)
name|collection
control|)
block|{
name|chars
index|[
name|i
operator|++
index|]
operator|=
name|_char
expr_stmt|;
block|}
return|return
name|chars
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected: "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
comment|/**    * Converts a collection of {@link Number} to a primitive array.    */
specifier|public
name|Object
name|toArray2
parameter_list|(
name|Collection
argument_list|<
name|Number
argument_list|>
name|collection
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DOUBLE
case|:
name|double
index|[]
name|doubles
init|=
operator|new
name|double
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|collection
control|)
block|{
name|doubles
index|[
name|i
operator|++
index|]
operator|=
name|number
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
return|return
name|doubles
return|;
case|case
name|FLOAT
case|:
name|float
index|[]
name|floats
init|=
operator|new
name|float
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|collection
control|)
block|{
name|floats
index|[
name|i
operator|++
index|]
operator|=
name|number
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
return|return
name|floats
return|;
case|case
name|INT
case|:
name|int
index|[]
name|ints
init|=
operator|new
name|int
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|collection
control|)
block|{
name|ints
index|[
name|i
operator|++
index|]
operator|=
name|number
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|ints
return|;
case|case
name|LONG
case|:
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|collection
control|)
block|{
name|longs
index|[
name|i
operator|++
index|]
operator|=
name|number
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
name|longs
return|;
case|case
name|SHORT
case|:
name|short
index|[]
name|shorts
init|=
operator|new
name|short
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|collection
control|)
block|{
name|shorts
index|[
name|i
operator|++
index|]
operator|=
name|number
operator|.
name|shortValue
argument_list|()
expr_stmt|;
block|}
return|return
name|shorts
return|;
case|case
name|BOOLEAN
case|:
name|boolean
index|[]
name|booleans
init|=
operator|new
name|boolean
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|collection
control|)
block|{
name|booleans
index|[
name|i
operator|++
index|]
operator|=
name|number
operator|.
name|byteValue
argument_list|()
operator|!=
literal|0
expr_stmt|;
block|}
return|return
name|booleans
return|;
case|case
name|BYTE
case|:
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|collection
control|)
block|{
name|bytes
index|[
name|i
operator|++
index|]
operator|=
name|number
operator|.
name|byteValue
argument_list|()
expr_stmt|;
block|}
return|return
name|bytes
return|;
case|case
name|CHAR
case|:
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|collection
control|)
block|{
name|chars
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|number
operator|.
name|shortValue
argument_list|()
expr_stmt|;
block|}
return|return
name|chars
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected: "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
comment|/** Permutes an array. */
specifier|public
name|Object
name|permute
parameter_list|(
name|Object
name|array
parameter_list|,
name|int
index|[]
name|sources
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DOUBLE
case|:
name|double
index|[]
name|doubles0
init|=
operator|(
name|double
index|[]
operator|)
name|array
decl_stmt|;
name|double
index|[]
name|doubles
init|=
operator|new
name|double
index|[
name|doubles0
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doubles
index|[
name|i
index|]
operator|=
name|doubles0
index|[
name|sources
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|doubles
return|;
case|case
name|FLOAT
case|:
name|float
index|[]
name|floats0
init|=
operator|(
name|float
index|[]
operator|)
name|array
decl_stmt|;
name|float
index|[]
name|floats
init|=
operator|new
name|float
index|[
name|floats0
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|floats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|floats
index|[
name|i
index|]
operator|=
name|floats0
index|[
name|sources
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|floats
return|;
case|case
name|INT
case|:
name|int
index|[]
name|ints0
init|=
operator|(
name|int
index|[]
operator|)
name|array
decl_stmt|;
name|int
index|[]
name|ints
init|=
operator|new
name|int
index|[
name|ints0
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ints
index|[
name|i
index|]
operator|=
name|ints0
index|[
name|sources
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|ints
return|;
case|case
name|LONG
case|:
name|long
index|[]
name|longs0
init|=
operator|(
name|long
index|[]
operator|)
name|array
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
name|longs0
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|longs
index|[
name|i
index|]
operator|=
name|longs0
index|[
name|sources
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|longs
return|;
case|case
name|SHORT
case|:
name|short
index|[]
name|shorts0
init|=
operator|(
name|short
index|[]
operator|)
name|array
decl_stmt|;
name|short
index|[]
name|shorts
init|=
operator|new
name|short
index|[
name|shorts0
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|shorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|shorts
index|[
name|i
index|]
operator|=
name|shorts0
index|[
name|sources
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|shorts
return|;
case|case
name|BOOLEAN
case|:
name|boolean
index|[]
name|booleans0
init|=
operator|(
name|boolean
index|[]
operator|)
name|array
decl_stmt|;
name|boolean
index|[]
name|booleans
init|=
operator|new
name|boolean
index|[
name|booleans0
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|booleans
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|booleans
index|[
name|i
index|]
operator|=
name|booleans0
index|[
name|sources
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|booleans
return|;
case|case
name|BYTE
case|:
name|byte
index|[]
name|bytes0
init|=
operator|(
name|byte
index|[]
operator|)
name|array
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|bytes0
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
name|bytes0
index|[
name|sources
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|bytes
return|;
case|case
name|CHAR
case|:
name|char
index|[]
name|chars0
init|=
operator|(
name|char
index|[]
operator|)
name|array
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|chars0
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chars
index|[
name|i
index|]
operator|=
name|chars0
index|[
name|sources
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|chars
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected: "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends a field value to a sink.    */
specifier|public
name|void
name|send
parameter_list|(
name|Field
name|field
parameter_list|,
name|Object
name|o
parameter_list|,
name|Sink
name|sink
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|getBoolean
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|getByte
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|getChar
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|getShort
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|getInt
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|getLong
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|getFloat
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|getDouble
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sink
operator|.
name|set
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**    * Gets an item from an array.    */
specifier|public
name|Object
name|arrayItem
parameter_list|(
name|Object
name|dataSet
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
comment|// Plain old Array.get doesn't cut it when you have an array of
comment|// Integer values but you want to read Short values. Array.getShort
comment|// does the right thing.
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DOUBLE
case|:
return|return
name|Array
operator|.
name|getDouble
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Array
operator|.
name|getFloat
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
name|Array
operator|.
name|getBoolean
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|Array
operator|.
name|getByte
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|Array
operator|.
name|getChar
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Array
operator|.
name|getShort
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|Array
operator|.
name|getInt
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Array
operator|.
name|getLong
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
case|case
name|OTHER
case|:
return|return
name|Array
operator|.
name|get
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
comment|/**    * Reads value from a source into an array.    */
specifier|public
name|void
name|arrayItem
parameter_list|(
name|Source
name|source
parameter_list|,
name|Object
name|dataSet
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DOUBLE
case|:
name|Array
operator|.
name|setDouble
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|FLOAT
case|:
name|Array
operator|.
name|setFloat
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getFloat
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|BOOLEAN
case|:
name|Array
operator|.
name|setBoolean
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|BYTE
case|:
name|Array
operator|.
name|setByte
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getByte
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|CHAR
case|:
name|Array
operator|.
name|setChar
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getChar
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|SHORT
case|:
name|Array
operator|.
name|setShort
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getShort
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|INT
case|:
name|Array
operator|.
name|setInt
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|LONG
case|:
name|Array
operator|.
name|setLong
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|OTHER
case|:
name|Array
operator|.
name|set
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|,
name|source
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
return|return;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends to a sink an from an array.    */
specifier|public
name|void
name|arrayItem
parameter_list|(
name|Object
name|dataSet
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|Sink
name|sink
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DOUBLE
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|getDouble
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|FLOAT
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|getFloat
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|BOOLEAN
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|getBoolean
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|BYTE
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|getByte
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|CHAR
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|getChar
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|SHORT
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|getShort
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|INT
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|getInt
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|LONG
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|getLong
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|OTHER
case|:
name|sink
operator|.
name|set
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|dataSet
argument_list|,
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
return|return;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
comment|/**    * Gets a value from a given column in a JDBC result set.    *    * @param resultSet Result set    * @param i Ordinal of column (1-based, per JDBC)    */
specifier|public
name|Object
name|jdbcGet
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|SQLException
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|i
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|resultSet
operator|.
name|getByte
argument_list|(
name|i
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|(
name|char
operator|)
name|resultSet
operator|.
name|getShort
argument_list|(
name|i
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|resultSet
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|resultSet
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|resultSet
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|resultSet
operator|.
name|getLong
argument_list|(
name|i
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|resultSet
operator|.
name|getShort
argument_list|(
name|i
argument_list|)
return|;
default|default:
return|return
name|resultSet
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
comment|/**    * Sends to a sink a value from a given column in a JDBC result set.    *    * @param resultSet Result set    * @param i Ordinal of column (1-based, per JDBC)    * @param sink Sink    */
specifier|public
name|void
name|jdbc
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|int
name|i
parameter_list|,
name|Sink
name|sink
parameter_list|)
throws|throws
name|SQLException
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|sink
operator|.
name|set
argument_list|(
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|sink
operator|.
name|set
argument_list|(
name|resultSet
operator|.
name|getByte
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|sink
operator|.
name|set
argument_list|(
operator|(
name|char
operator|)
name|resultSet
operator|.
name|getShort
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|sink
operator|.
name|set
argument_list|(
name|resultSet
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|sink
operator|.
name|set
argument_list|(
name|resultSet
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|sink
operator|.
name|set
argument_list|(
name|resultSet
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|sink
operator|.
name|set
argument_list|(
name|resultSet
operator|.
name|getLong
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|sink
operator|.
name|set
argument_list|(
name|resultSet
operator|.
name|getShort
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sink
operator|.
name|set
argument_list|(
name|resultSet
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**    * Sends a value from a source to a sink.    */
specifier|public
name|void
name|send
parameter_list|(
name|Source
name|source
parameter_list|,
name|Sink
name|sink
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getByte
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getChar
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getFloat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getShort
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sink
operator|.
name|set
argument_list|(
name|source
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**    * Calls the appropriate {@link Integer#valueOf(String) valueOf(String)}    * method.    */
specifier|public
name|Object
name|parse
parameter_list|(
name|String
name|stringValue
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|stringValue
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|stringValue
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|Character
operator|.
name|valueOf
argument_list|(
name|stringValue
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|stringValue
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|stringValue
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|stringValue
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|stringValue
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|stringValue
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|stringValue
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|assignableFrom
parameter_list|(
name|Primitive
name|primitive
parameter_list|)
block|{
return|return
name|family
operator|==
name|primitive
operator|.
name|family
operator|&&
name|ordinal
argument_list|()
operator|>=
name|primitive
operator|.
name|ordinal
argument_list|()
operator|&&
operator|!
operator|(
name|this
operator|==
name|SHORT
operator|&&
name|primitive
operator|==
name|CHAR
operator|)
operator|&&
operator|!
operator|(
name|this
operator|==
name|CHAR
operator|&&
name|primitive
operator|==
name|BYTE
operator|)
return|;
block|}
comment|/** Creates a number value of this primitive's box type. For example,    * {@code SHORT.number(Integer(0))} will return {@code Short(0)}. */
specifier|public
name|Number
name|number
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BYTE
case|:
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|byteValue
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|shortValue
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|this
operator|+
literal|": "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
comment|/**    * A place to send a value.    */
specifier|public
interface|interface
name|Sink
block|{
name|void
name|set
parameter_list|(
name|boolean
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|byte
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|char
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|short
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|int
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|long
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|float
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|double
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|Object
name|v
parameter_list|)
function_decl|;
block|}
comment|/**    * A place from which to read a value.    */
specifier|public
interface|interface
name|Source
block|{
name|boolean
name|getBoolean
parameter_list|()
function_decl|;
name|byte
name|getByte
parameter_list|()
function_decl|;
name|char
name|getChar
parameter_list|()
function_decl|;
name|short
name|getShort
parameter_list|()
function_decl|;
name|int
name|getInt
parameter_list|()
function_decl|;
name|long
name|getLong
parameter_list|()
function_decl|;
name|float
name|getFloat
parameter_list|()
function_decl|;
name|double
name|getDouble
parameter_list|()
function_decl|;
name|Object
name|getObject
parameter_list|()
function_decl|;
block|}
specifier|public
enum|enum
name|Flavor
block|{
name|PRIMITIVE
block|,
name|BOX
block|,
name|OBJECT
block|}
block|}
end_enum

begin_comment
comment|// End Primitive.java
end_comment

end_unit

