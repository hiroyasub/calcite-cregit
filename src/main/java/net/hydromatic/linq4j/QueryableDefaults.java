begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|FunctionExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Default implementations for methods in the {@link Queryable} interface.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|QueryableDefaults
block|{
comment|/**    * Applies an accumulator function over a    * sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|aggregate
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|T
argument_list|,
name|T
argument_list|>
argument_list|>
name|func
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Applies an accumulator function over a    * sequence. The specified seed value is used as the initial    * accumulator value.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TAccumulate
parameter_list|>
name|TAccumulate
name|aggregate
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|TAccumulate
name|seed
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|T
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|func
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Applies an accumulator function over a    * sequence. The specified seed value is used as the initial    * accumulator value, and the specified function is used to select    * the result value.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TAccumulate
parameter_list|,
name|TResult
parameter_list|>
name|TResult
name|aggregate
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|TAccumulate
name|seed
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|T
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|func
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TAccumulate
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Determines whether all the elements of a sequence    * satisfy a condition.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|all
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Determines whether a sequence contains any    * elements.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|any
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Determines whether any element of a sequence    * satisfies a condition.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|any
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Converts a generic Enumerable<T> to a generic    * IQueryable<T>.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of Decimal    * values that is obtained by invoking a projection function on    * each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|BigDecimal
name|averageBigDecimal
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|BigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of nullable    * Decimal values that is obtained by invoking a projection    * function on each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|BigDecimal
name|averageNullableBigDecimal
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableBigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of Double    * values that is obtained by invoking a projection function on    * each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|double
name|averageDouble
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|DoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of nullable    * Double values that is obtained by invoking a projection    * function on each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Double
name|averageNullableDouble
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableDoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of int values    * that is obtained by invoking a projection function on each    * element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|averageInteger
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|IntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of nullable    * int values that is obtained by invoking a projection function    * on each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Integer
name|averageNullableInteger
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableIntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of Float    * values that is obtained by invoking a projection function on    * each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|float
name|averageFloat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|FloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of nullable    * Float values that is obtained by invoking a projection    * function on each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Float
name|averageNullableFloat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableFloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of long values    * that is obtained by invoking a projection function on each    * element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|long
name|averageLong
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|LongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the average of a sequence of nullable    * long values that is obtained by invoking a projection function    * on each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Long
name|averageNullableLong
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableLongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    *<p>Analogous to LINQ's Enumerable.Cast extension method.</p>    *    * @param clazz Target type    * @param<T2> Target type    *    * @return Collection of T2    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|T2
parameter_list|>
name|Queryable
argument_list|<
name|T2
argument_list|>
name|cast
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T2
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|BaseQueryable
argument_list|<
name|T2
argument_list|>
argument_list|(
name|source
operator|.
name|getProvider
argument_list|()
argument_list|,
name|clazz
argument_list|,
name|source
operator|.
name|getExpression
argument_list|()
argument_list|)
block|{
specifier|public
name|Enumerator
argument_list|<
name|T2
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|EnumerableDefaults
operator|.
name|CastingEnumerator
argument_list|<
name|T2
argument_list|>
argument_list|(
name|source
operator|.
name|enumerator
argument_list|()
argument_list|,
name|clazz
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Concatenates two sequences.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|concat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable0
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source2
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Determines whether a sequence contains a specified    * element by using the default equality comparer.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|contains
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|T
name|element
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Determines whether a sequence contains a specified    * element by using a specified EqualityComparer<T>.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|contains
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|T
name|element
parameter_list|,
name|EqualityComparer
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the number of elements in a    * sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|count
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the number of elements in the specified    * sequence that satisfies a condition.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|count
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|func
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the elements of the specified sequence or    * the type parameter's default value in a singleton collection if    * the sequence is empty.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|defaultIfEmpty
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the elements of the specified sequence or    * the specified value in a singleton collection if the sequence    * is empty.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|defaultIfEmpty
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|T
name|value
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns distinct elements from a sequence by using    * the default equality comparer to compare values.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|distinct
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns distinct elements from a sequence by using    * a specified EqualityComparer<T> to compare values.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|distinct
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|EqualityComparer
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the element at a specified index in a    * sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|elementAt
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|int
name|index
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the element at a specified index in a    * sequence or a default value if the index is out of    * range.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|elementAtOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|int
name|index
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Produces the set difference of two sequences by    * using the default equality comparer to compare values. (Defined    * by Queryable.)    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|except
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Produces the set difference of two sequences by    * using the specified EqualityComparer<T> to compare    * values.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|except
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the first element of a sequence. (Defined    * by Queryable.)    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|first
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the first element of a sequence that    * satisfies a specified condition.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|first
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the first element of a sequence, or a    * default value if the sequence contains no elements.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|firstOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the first element of a sequence that    * satisfies a specified condition or a default value if no such    * element is found.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|firstOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Groups the elements of a sequence according to a    * specified key selector function.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|T
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Groups the elements of a sequence according to a    * specified key selector function and compares the keys by using    * a specified comparer.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|T
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|EqualityComparer
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Groups the elements of a sequence according to a    * specified key selector function and projects the elements for    * each group by using a specified function.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Groups the elements of a sequence according to a    * specified key selector function and creates a result value from    * each group and its key.    *    *<p>NOTE: Renamed from {@code groupBy} to distinguish from    * {@link #groupBy(net.hydromatic.linq4j.Queryable, net.hydromatic.linq4j.expressions.FunctionExpression, net.hydromatic.linq4j.expressions.FunctionExpression)},    * which has the same erasure.</p>    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|groupByK
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|elementSelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Groups the elements of a sequence and projects the    * elements for each group by using a specified function. Key    * values are compared by using a specified comparer.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
name|EqualityComparer
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Groups the elements of a sequence according to a    * specified key selector function and creates a result value from    * each group and its key. Keys are compared by using a specified    * comparer.    *    *<p>NOTE: Renamed from {@code groupBy} to distinguish from    * {@link #groupBy(net.hydromatic.linq4j.Queryable, net.hydromatic.linq4j.expressions.FunctionExpression, net.hydromatic.linq4j.expressions.FunctionExpression, net.hydromatic.linq4j.function.EqualityComparer)},    * which has the same erasure.</p>    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupByK
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
name|EqualityComparer
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Groups the elements of a sequence according to a    * specified key selector function and creates a result value from    * each group and its key. The elements of each group are    * projected by using a specified function.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|,
name|TElement
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TElement
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Groups the elements of a sequence according to a    * specified key selector function and creates a result value from    * each group and its key. Keys are compared by using a specified    * comparer and the elements of each group are projected by using    * a specified function.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|,
name|TElement
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TElement
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Correlates the elements of two sequences based on    * key equality and groups the results. The default equality    * comparer is used to compare keys.    */
specifier|public
specifier|static
parameter_list|<
name|TOuter
parameter_list|,
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupJoin
parameter_list|(
name|Queryable
argument_list|<
name|TOuter
argument_list|>
name|outer
parameter_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TOuter
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TOuter
argument_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Correlates the elements of two sequences based on    * key equality and groups the results. A specified    * EqualityComparer<T> is used to compare keys.    */
specifier|public
specifier|static
parameter_list|<
name|TOuter
parameter_list|,
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|groupJoin
parameter_list|(
name|Queryable
argument_list|<
name|TOuter
argument_list|>
name|outer
parameter_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TOuter
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TOuter
argument_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Produces the set intersection of two sequences by    * using the default equality comparer to compare values. (Defined    * by Queryable.)    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|intersect
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Produces the set intersection of two sequences by    * using the specified EqualityComparer<T> to compare    * values.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|intersect
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Correlates the elements of two sequences based on    * matching keys. The default equality comparer is used to compare    * keys.    */
specifier|public
specifier|static
parameter_list|<
name|TOuter
parameter_list|,
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|join
parameter_list|(
name|Queryable
argument_list|<
name|TOuter
argument_list|>
name|outer
parameter_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TOuter
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TOuter
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Correlates the elements of two sequences based on    * matching keys. A specified EqualityComparer<T> is used to    * compare keys.    */
specifier|public
specifier|static
parameter_list|<
name|TOuter
parameter_list|,
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|join
parameter_list|(
name|Queryable
argument_list|<
name|TOuter
argument_list|>
name|outer
parameter_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TOuter
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TOuter
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the last element in a sequence. (Defined    * by Queryable.)    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|last
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the last element of a sequence that    * satisfies a specified condition.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|last
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the last element in a sequence, or a    * default value if the sequence contains no elements.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|lastOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the last element of a sequence that    * satisfies a condition or a default value if no such element is    * found.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|lastOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns an long that represents the total number    * of elements in a sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|long
name|longCount
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|xable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns an long that represents the number of    * elements in a sequence that satisfy a condition.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|long
name|longCount
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the maximum value in a generic    * IQueryable<T>.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|max
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Invokes a projection function on each element of a    * generic IQueryable<T> and returns the maximum resulting    * value.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TResult
parameter_list|>
name|TResult
name|max
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the minimum value in a generic    * IQueryable<T>.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|min
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Invokes a projection function on each element of a    * generic IQueryable<T> and returns the minimum resulting    * value.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TResult
parameter_list|>
name|TResult
name|min
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Filters the elements of an IQueryable based on a    * specified type.    *    *<p>This method generates a    * {@link net.hydromatic.linq4j.expressions.MethodCallExpression} that    * represents calling {@code ofType} itself as a constructed generic method.    * It then passes the {@code MethodCallExpression} to the    * {@link net.hydromatic.linq4j.QueryProvider#createQuery createQuery} method of the    * {@link net.hydromatic.linq4j.QueryProvider} represented by the Provider property of the source    * parameter.</p>    *    *<p>The query behavior that occurs as a result of executing an expression    * tree that represents calling OfType depends on the implementation of the    * type of the source parameter. The expected behavior is that it filters    * out any elements in source that are not of type TResult.    *    *<p>NOTE: clazz parameter not present in C# LINQ; necessary because of    * Java type erasure.</p>    */
specifier|public
specifier|static
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|ofType
parameter_list|(
name|Queryable
argument_list|<
name|?
argument_list|>
name|queryable
parameter_list|,
name|Class
argument_list|<
name|TResult
argument_list|>
name|clazz
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Sorts the elements of a sequence in ascending    * order according to a key.    *    * @see #thenBy    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
extends|extends
name|Comparable
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Sorts the elements of a sequence in ascending    * order by using a specified comparer.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Sorts the elements of a sequence in descending    * order according to a key.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
extends|extends
name|Comparable
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderByDescending
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Sorts the elements of a sequence in descending    * order by using a specified comparer.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderByDescending
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Inverts the order of the elements in a    * sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|reverse
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Projects each element of a sequence into a new form.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|select
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
name|source
operator|.
name|getProvider
argument_list|()
operator|.
name|createQuery
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|source
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"select"
argument_list|,
name|selector
argument_list|)
argument_list|,
name|functionResultType
argument_list|(
name|selector
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|P0
parameter_list|,
name|R
parameter_list|>
name|Type
name|functionResultType
parameter_list|(
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|P0
argument_list|,
name|R
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
name|selector
operator|.
name|body
operator|.
name|getType
argument_list|()
return|;
block|}
comment|/**    * Projects each element of a sequence into a new    * form by incorporating the element's index.    *    *<p>NOTE: Renamed from {@code select} because had same erasure as    * {@link #select(net.hydromatic.linq4j.Queryable, net.hydromatic.linq4j.expressions.FunctionExpression)}.</p>    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Projects each element of a sequence to an    * Enumerable<T> and combines the resulting sequences into one    * sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TResult
argument_list|>
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Projects each element of a sequence to an    * Enumerable<T> and combines the resulting sequences into one    * sequence. The index of each source element is used in the    * projected form of that element.    *    *<p>NOTE: Renamed from {@code selectMany} because had same erasure as    * {@link #selectMany(net.hydromatic.linq4j.Queryable, net.hydromatic.linq4j.expressions.FunctionExpression)}</p>    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectManyN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|TResult
argument_list|>
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Projects each element of a sequence to an    * Enumerable<T> that incorporates the index of the source    * element that produced it. A result selector function is invoked    * on each element of each intermediate sequence, and the    * resulting values are combined into a single, one-dimensional    * sequence and returned.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TCollection
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|TCollection
argument_list|>
argument_list|>
argument_list|>
name|collectionSelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TCollection
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Projects each element of a sequence to an    * Enumerable<T> and invokes a result selector function on each    * element therein. The resulting values from each intermediate    * sequence are combined into a single, one-dimensional sequence    * and returned.    *    *<p>NOTE: Renamed from {@code selectMany} because had same erasure as    * {@link #selectMany(net.hydromatic.linq4j.Queryable, net.hydromatic.linq4j.expressions.FunctionExpression, net.hydromatic.linq4j.expressions.FunctionExpression)}</p>    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TCollection
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectManyN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TCollection
argument_list|>
argument_list|>
argument_list|>
name|collectionSelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TCollection
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Determines whether two sequences are equal by    * using the default equality comparer to compare    * elements.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|sequenceEqual
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Determines whether two sequences are equal by    * using a specified EqualityComparer<T> to compare    * elements.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|sequenceEqual
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the only element of a sequence, and throws    * an exception if there is not exactly one element in the    * sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|single
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the only element of a sequence that    * satisfies a specified condition, and throws an exception if    * more than one such element exists.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|single
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the only element of a sequence, or a    * default value if the sequence is empty; this method throws an    * exception if there is more than one element in the    * sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|singleOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns the only element of a sequence that    * satisfies a specified condition or a default value if no such    * element exists; this method throws an exception if more than    * one element satisfies the condition.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|singleOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Bypasses a specified number of elements in a    * sequence and then returns the remaining elements.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|skip
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|EnumerableDefaults
operator|.
name|skip
argument_list|(
name|source
operator|.
name|asEnumerable
argument_list|()
argument_list|,
name|count
argument_list|)
operator|.
name|asQueryable
argument_list|()
return|;
block|}
comment|/**    * Bypasses elements in a sequence as long as a    * specified condition is true and then returns the remaining    * elements.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|skipWhile
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|skipWhileN
argument_list|(
name|source
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Functions
operator|.
expr|<
name|T
argument_list|,
name|Integer
operator|>
name|toPredicate2
argument_list|(
name|predicate
operator|.
name|getFunction
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Bypasses elements in a sequence as long as a    * specified condition is true and then returns the remaining    * elements. The element's index is used in the logic of the    * predicate function.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|skipWhileN
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|BaseQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
operator|.
name|getProvider
argument_list|()
argument_list|,
name|source
operator|.
name|getElementType
argument_list|()
argument_list|,
name|source
operator|.
name|getExpression
argument_list|()
argument_list|)
block|{
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|EnumerableDefaults
operator|.
name|SkipWhileEnumerator
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
operator|.
name|enumerator
argument_list|()
argument_list|,
name|predicate
operator|.
name|getFunction
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Computes the sum of the sequence of Decimal values    * that is obtained by invoking a projection function on each    * element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|BigDecimal
name|sumBigDecimal
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|sources
parameter_list|,
name|FunctionExpression
argument_list|<
name|BigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of nullable    * Decimal values that is obtained by invoking a projection    * function on each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|BigDecimal
name|sumNullableBigDecimal
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableBigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of Double values    * that is obtained by invoking a projection function on each    * element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|double
name|sumDouble
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|DoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of nullable    * Double values that is obtained by invoking a projection    * function on each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Double
name|sumNullableDouble
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableDoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of int values    * that is obtained by invoking a projection function on each    * element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|sumInteger
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|IntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of nullable int    * values that is obtained by invoking a projection function on    * each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Integer
name|sumNullableInteger
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableIntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of long values    * that is obtained by invoking a projection function on each    * element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|long
name|sumLong
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|LongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of nullable long    * values that is obtained by invoking a projection function on    * each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Long
name|sumNullableLong
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableLongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of Float values    * that is obtained by invoking a projection function on each    * element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|float
name|sumFloat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|FloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Computes the sum of the sequence of nullable    * Float values that is obtained by invoking a projection    * function on each element of the input sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Float
name|sumNullableFloat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableFloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Returns a specified number of contiguous elements    * from the start of a sequence.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|take
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|source
operator|.
name|asEnumerable
argument_list|()
argument_list|,
name|count
argument_list|)
operator|.
name|asQueryable
argument_list|()
return|;
block|}
comment|/**    * Returns elements from a sequence as long as a    * specified condition is true.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|takeWhile
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|takeWhileN
argument_list|(
name|source
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Functions
operator|.
expr|<
name|T
argument_list|,
name|Integer
operator|>
name|toPredicate2
argument_list|(
name|predicate
operator|.
name|getFunction
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns elements from a sequence as long as a    * specified condition is true. The element's index is used in the    * logic of the predicate function.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|takeWhileN
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|BaseQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
operator|.
name|getProvider
argument_list|()
argument_list|,
name|source
operator|.
name|getElementType
argument_list|()
argument_list|,
name|source
operator|.
name|getExpression
argument_list|()
argument_list|)
block|{
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|EnumerableDefaults
operator|.
name|TakeWhileEnumerator
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
operator|.
name|enumerator
argument_list|()
argument_list|,
name|predicate
operator|.
name|getFunction
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Performs a subsequent ordering of the elements in a sequence in    * ascending order according to a key.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenBy
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Performs a subsequent ordering of the elements in a sequence in    * ascending order according to a key, using a specified comparator.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenBy
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Performs a subsequent ordering of the elements in a sequence in    * descending order according to a key.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenByDescending
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Performs a subsequent ordering of the elements in a sequence in    * dscending order according to a key, using a specified comparator.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenByDescending
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Produces the set union of two sequences by using    * the default equality comparer.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|union
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source0
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source1
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Produces the set union of two sequences by using a    * specified EqualityComparer<T>.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|union
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source0
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source1
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Filters a sequence of values based on a    * predicate.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|where
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|where
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Filters a sequence of values based on a    * predicate. Each element's index is used in the logic of the    * predicate function.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|whereN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
comment|/**    * Merges two sequences by using the specified    * predicate function.    */
specifier|public
specifier|static
parameter_list|<
name|T0
parameter_list|,
name|T1
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|zip
parameter_list|(
name|Queryable
argument_list|<
name|T0
argument_list|>
name|source0
parameter_list|,
name|Enumerable
argument_list|<
name|T1
argument_list|>
name|source1
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T0
argument_list|,
name|T1
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
throw|throw
name|Extensions
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
interface|interface
name|Replayable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Queryable
argument_list|<
name|T
argument_list|>
block|{
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|ReplayableQueryable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|DefaultQueryable
argument_list|<
name|T
argument_list|>
implements|implements
name|Replayable
argument_list|<
name|T
argument_list|>
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
block|}
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|enumeratorIterator
argument_list|(
name|enumerator
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|getProvider
argument_list|()
operator|.
name|executeQuery
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Convenience method, for {@link QueryableRecorder} methods that      * return a scalar value such as {@code boolean} or      * {@link BigDecimal}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
parameter_list|<
name|U
parameter_list|>
name|U
name|castSingle
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Queryable
argument_list|<
name|U
argument_list|>
operator|)
operator|(
name|Queryable
operator|)
name|this
operator|)
operator|.
name|single
argument_list|()
return|;
block|}
comment|/**      * Convenience method, for {@link QueryableRecorder} methods that      * return a Queryable of a different element type than the source.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|U
parameter_list|>
name|Queryable
argument_list|<
name|U
argument_list|>
name|castQueryable
parameter_list|()
block|{
return|return
operator|(
name|Queryable
argument_list|<
name|U
argument_list|>
operator|)
operator|(
name|Queryable
operator|)
name|this
return|;
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|NonLeafReplayableQueryable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ReplayableQueryable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|original
decl_stmt|;
specifier|protected
name|NonLeafReplayableQueryable
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|original
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|original
expr_stmt|;
block|}
specifier|public
name|Type
name|getElementType
parameter_list|()
block|{
return|return
name|original
operator|.
name|getElementType
argument_list|()
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|original
operator|.
name|getExpression
argument_list|()
return|;
block|}
specifier|public
name|QueryProvider
name|getProvider
parameter_list|()
block|{
return|return
name|original
operator|.
name|getProvider
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End QueryableDefaults.java
end_comment

end_unit

