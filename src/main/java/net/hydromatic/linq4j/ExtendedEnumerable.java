begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Extension methods in {@link Enumerable}.  */
end_comment

begin_interface
specifier|public
interface|interface
name|ExtendedEnumerable
parameter_list|<
name|TSource
parameter_list|>
block|{
comment|/**      * Performs an operation for each member of this enumeration.      *      *<p>Returns the value returned by the function for the last element in      * this enumeration, or null if this enumeration is empty.</p>      *      * @param func Operation      * @param<R> Return type      */
parameter_list|<
name|R
parameter_list|>
name|R
name|foreach
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|R
argument_list|>
name|func
parameter_list|)
function_decl|;
comment|/** Applies an accumulator function over a      * sequence. */
name|TSource
name|aggregate
parameter_list|(
name|Function2
argument_list|<
name|TSource
argument_list|,
name|TSource
argument_list|,
name|TSource
argument_list|>
name|func
parameter_list|)
function_decl|;
comment|/** Applies an accumulator function over a      * sequence. The specified seed value is used as the initial      * accumulator value. */
parameter_list|<
name|TAccumulate
parameter_list|>
name|TAccumulate
name|aggregate
parameter_list|(
name|TAccumulate
name|seed
parameter_list|,
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
name|func
parameter_list|)
function_decl|;
comment|/** Applies an accumulator function over a      * sequence. The specified seed value is used as the initial      * accumulator value, and the specified function is used to select      * the result value. */
parameter_list|<
name|TAccumulate
parameter_list|,
name|TResult
parameter_list|>
name|TResult
name|aggregate
parameter_list|(
name|TAccumulate
name|seed
parameter_list|,
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
name|func
parameter_list|,
name|Function1
argument_list|<
name|TAccumulate
argument_list|,
name|TResult
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Determines whether all elements of a sequence      * satisfy a condition. */
name|boolean
name|all
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Determines whether a sequence contains any      * elements. (Defined by Enumerable.) */
name|boolean
name|any
parameter_list|()
function_decl|;
comment|/** Determines whether any element of a sequence      * satisfies a condition. */
name|boolean
name|any
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the input typed as Enumerable<TSource>.      *      *<p>The AsEnumerable<TSource>(Enumerable<TSource>) method has no effect      * other than to change the compile-time type of source from a type that      * implements Enumerable<TSource> to Enumerable<TSource> itself.      *      *<p>AsEnumerable<TSource>(Enumerable<TSource>) can be used to choose      * between query implementations when a sequence implements      * Enumerable<TSource> but also has a different set of public query methods      * available. For example, given a generic class Table that implements      * Enumerable<TSource> and has its own methods such as Where, Select, and      * SelectMany, a call to Where would invoke the public Where method of      * Table. A Table type that represents a database table could have a Where      * method that takes the predicate argument as an expression tree and      * converts the tree to SQL for remote execution. If remote execution is not      * desired, for example because the predicate invokes a local method, the      * AsEnumerable<TSource> method can be used to hide the custom methods and      * instead make the standard query operators available.      */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|asEnumerable
parameter_list|()
function_decl|;
comment|/**      * Converts an Enumerable to a {@link Queryable}.      *      *<p>If the type of source implements {@code Queryable}, this method      * returns it directly. Otherwise, it returns a {@code Queryable} that      * executes queries by calling the equivalent query operator methods in      * {@code Enumerable} instead of those in {@code Queryable}.</p>      *      *<p>Analogous to the LINQ's Enumerable.AsQueryable extension method.</p>      *      * @return A queryable      */
name|Queryable
argument_list|<
name|TSource
argument_list|>
name|asQueryable
parameter_list|()
function_decl|;
comment|/** Computes the average of a sequence of Decimal      * values that are obtained by invoking a transform function on      * each element of the input sequence. */
name|BigDecimal
name|average
parameter_list|(
name|BigDecimalFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * Decimal values that are obtained by invoking a transform      * function on each element of the input sequence. */
name|BigDecimal
name|average
parameter_list|(
name|NullableBigDecimalFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of Double      * values that are obtained by invoking a transform function on      * each element of the input sequence. */
name|double
name|average
parameter_list|(
name|DoubleFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * Double values that are obtained by invoking a transform      * function on each element of the input sequence. */
name|Double
name|average
parameter_list|(
name|NullableDoubleFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of int values      * that are obtained by invoking a transform function on each      * element of the input sequence. */
name|int
name|average
parameter_list|(
name|IntegerFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * int values that are obtained by invoking a transform function      * on each element of the input sequence. */
name|Integer
name|average
parameter_list|(
name|NullableIntegerFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of long values      * that are obtained by invoking a transform function on each      * element of the input sequence. */
name|long
name|average
parameter_list|(
name|LongFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * long values that are obtained by invoking a transform function      * on each element of the input sequence. */
name|Long
name|average
parameter_list|(
name|NullableLongFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of Float      * values that are obtained by invoking a transform function on      * each element of the input sequence. */
name|float
name|average
parameter_list|(
name|FloatFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * Float values that are obtained by invoking a transform      * function on each element of the input sequence. */
name|Float
name|average
parameter_list|(
name|NullableFloatFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/**      * Converts the elements of this Enumerable to the specified type.      *      *<p>This method is implemented by using deferred execution. The immediate      * return value is an object that stores all the information that is      * required to perform the action. The query represented by this method is      * not executed until the object is enumerated either by calling its      * {@link Enumerable#enumerator} method directly or by using      * {@code for (... in ...)}.      *      *<p>If an element cannot be cast to type TResult, the      * {@link Enumerator#current()} method will throw a      * {@link ClassCastException} a exception when the element it accessed. To      * obtain only those elements that can be cast to type TResult, use the      * {@link #ofType(Class)} method instead.      *      * @see EnumerableDefaults#cast      * @see #ofType(Class)      */
parameter_list|<
name|T2
parameter_list|>
name|Enumerable
argument_list|<
name|T2
argument_list|>
name|cast
parameter_list|(
name|Class
argument_list|<
name|T2
argument_list|>
name|clazz
parameter_list|)
function_decl|;
comment|/** Concatenates two sequences. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|concat
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|enumerable1
parameter_list|)
function_decl|;
comment|/** Determines whether a sequence contains a specified      * element by using the default equality comparer. */
name|boolean
name|contains
parameter_list|(
name|TSource
name|element
parameter_list|)
function_decl|;
comment|/** Determines whether a sequence contains a specified      * element by using a specified EqualityComparer<TSource>. */
name|boolean
name|contains
parameter_list|(
name|TSource
name|element
parameter_list|,
name|EqualityComparer
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the number of elements in a      * sequence. */
name|int
name|count
parameter_list|()
function_decl|;
comment|/** Returns a number that represents how many elements      * in the specified sequence satisfy a condition. */
name|int
name|count
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the elements of the specified sequence or      * the type parameter's default value in a singleton collection if      * the sequence is empty. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|defaultIfEmpty
parameter_list|()
function_decl|;
comment|/** Returns the elements of the specified sequence or      * the specified value in a singleton collection if the sequence      * is empty. */
name|TSource
name|defaultIfEmpty
parameter_list|(
name|TSource
name|value
parameter_list|)
function_decl|;
comment|/** Returns distinct elements from a sequence by using      * the default equality comparer to compare values. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|distinct
parameter_list|()
function_decl|;
comment|/** Returns distinct elements from a sequence by using      * a specified EqualityComparer<TSource> to compare values. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|distinct
parameter_list|(
name|EqualityComparer
argument_list|<
name|TSource
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the element at a specified index in a      * sequence. */
name|TSource
name|elementAt
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/** Returns the element at a specified index in a      * sequence or a default value if the index is out of      * range. */
name|TSource
name|elementAtOrDefault
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/** Produces the set difference of two sequences by      * using the default equality comparer to compare values. (Defined      * by Enumerable.) */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|except
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|enumerable1
parameter_list|)
function_decl|;
comment|/** Produces the set difference of two sequences by      * using the specified EqualityComparer<TSource> to compare      * values. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|except
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|enumerable1
parameter_list|,
name|EqualityComparer
argument_list|<
name|TSource
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the first element of a sequence. (Defined      * by Enumerable.) */
name|TSource
name|first
parameter_list|()
function_decl|;
comment|/** Returns the first element in a sequence that      * satisfies a specified condition. */
name|TSource
name|first
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the first element of a sequence, or a      * default value if the sequence contains no elements. */
name|TSource
name|firstOrDefault
parameter_list|()
function_decl|;
comment|/** Returns the first element of the sequence that      * satisfies a condition or a default value if no such element is      * found. */
name|TSource
name|firstOrDefault
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function. */
parameter_list|<
name|TKey
parameter_list|>
name|Enumerable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TSource
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and compares the keys by using      * a specified comparer. */
parameter_list|<
name|TKey
parameter_list|>
name|Enumerable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TSource
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and projects the elements for      * each group by using a specified function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Enumerable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TElement
argument_list|>
name|elementSelector
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and creates a result value from      * each group and its key. */
parameter_list|<
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TSource
argument_list|>
argument_list|,
name|TResult
argument_list|>
name|elementSelector
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * key selector function. The keys are compared by using a      * comparer and each group's elements are projected by using a      * specified function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Enumerable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TElement
argument_list|>
name|elementSelector
parameter_list|,
name|EqualityComparer
name|comparer
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and creates a result value from      * each group and its key. The keys are compared by using a      * specified comparer. */
parameter_list|<
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TSource
argument_list|>
argument_list|,
name|TResult
argument_list|>
name|elementSelector
parameter_list|,
name|EqualityComparer
name|comparer
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and creates a result value from      * each group and its key. The elements of each group are      * projected by using a specified function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TElement
argument_list|>
name|elementSelector
parameter_list|,
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TElement
argument_list|>
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and creates a result value from      * each group and its key. Key values are compared by using a      * specified comparer, and the elements of each group are      * projected by using a specified function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TElement
argument_list|>
name|elementSelector
parameter_list|,
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TElement
argument_list|>
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Correlates the elements of two sequences based on      * equality of keys and groups the results. The default equality      * comparer is used to compare keys. */
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|groupJoin
parameter_list|(
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|,
name|Function2
argument_list|<
name|TSource
argument_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Correlates the elements of two sequences based on      * key equality and groups the results. A specified      * EqualityComparer<TSource> is used to compare keys. */
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|groupJoin
parameter_list|(
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|,
name|Function2
argument_list|<
name|TSource
argument_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Produces the set intersection of two sequences by      * using the default equality comparer to compare values. (Defined      * by Enumerable.) */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|intersect
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|enumerable1
parameter_list|)
function_decl|;
comment|/** Produces the set intersection of two sequences by      * using the specified EqualityComparer<TSource> to compare      * values. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|intersect
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|enumerable1
parameter_list|,
name|EqualityComparer
argument_list|<
name|TSource
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Copies the contents of the sequence into a collection. */
parameter_list|<
name|C
extends|extends
name|Collection
argument_list|<
name|?
super|super
name|TSource
argument_list|>
parameter_list|>
name|C
name|into
parameter_list|(
name|C
name|sink
parameter_list|)
function_decl|;
comment|/** Correlates the elements of two sequences based on      * matching keys. The default equality comparer is used to compare      * keys. */
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|join
parameter_list|(
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|,
name|Function2
argument_list|<
name|TSource
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Correlates the elements of two sequences based on      * matching keys. A specified EqualityComparer<TSource> is used to      * compare keys. */
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|join
parameter_list|(
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|,
name|Function2
argument_list|<
name|TSource
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the last element of a sequence. (Defined      * by Enumerable.) */
name|TSource
name|last
parameter_list|()
function_decl|;
comment|/** Returns the last element of a sequence that      * satisfies a specified condition. */
name|TSource
name|last
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the last element of a sequence, or a      * default value if the sequence contains no elements. */
name|TSource
name|lastOrDefault
parameter_list|()
function_decl|;
comment|/** Returns the last element of a sequence that      * satisfies a condition or a default value if no such element is      * found. */
name|TSource
name|lastOrDefault
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns an long that represents the total number      * of elements in a sequence. */
name|long
name|longCount
parameter_list|()
function_decl|;
comment|/** Returns an long that represents how many elements      * in a sequence satisfy a condition. */
name|long
name|longCount
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the maximum value in a generic      * sequence. */
name|TSource
name|max
parameter_list|()
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum Decimal value. */
name|BigDecimal
name|max
parameter_list|(
name|BigDecimalFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum nullable Decimal      * value. */
name|BigDecimal
name|max
parameter_list|(
name|NullableBigDecimalFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum Double value. */
name|double
name|max
parameter_list|(
name|DoubleFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum nullable Double      * value. */
name|Double
name|max
parameter_list|(
name|NullableDoubleFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum int value. */
name|int
name|max
parameter_list|(
name|IntegerFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum nullable int value. (Defined      * by Enumerable.) */
name|Integer
name|max
parameter_list|(
name|NullableIntegerFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum long value. */
name|long
name|max
parameter_list|(
name|LongFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum nullable long value. (Defined      * by Enumerable.) */
name|Long
name|max
parameter_list|(
name|NullableLongFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum Float value. */
name|float
name|max
parameter_list|(
name|FloatFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the maximum nullable Float      * value. */
name|Float
name|max
parameter_list|(
name|NullableFloatFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * generic sequence and returns the maximum resulting      * value. */
parameter_list|<
name|TResult
extends|extends
name|Comparable
argument_list|<
name|TResult
argument_list|>
parameter_list|>
name|TResult
name|max
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TResult
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Returns the minimum value in a generic      * sequence. */
name|TSource
name|min
parameter_list|()
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum Decimal value. */
name|BigDecimal
name|min
parameter_list|(
name|BigDecimalFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum nullable Decimal      * value. */
name|BigDecimal
name|min
parameter_list|(
name|NullableBigDecimalFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum Double value. */
name|double
name|min
parameter_list|(
name|DoubleFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum nullable Double      * value. */
name|Double
name|min
parameter_list|(
name|NullableDoubleFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum int value. */
name|int
name|min
parameter_list|(
name|IntegerFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum nullable int value. (Defined      * by Enumerable.) */
name|Integer
name|min
parameter_list|(
name|NullableIntegerFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum long value. */
name|long
name|min
parameter_list|(
name|LongFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum nullable long value. (Defined      * by Enumerable.) */
name|Long
name|min
parameter_list|(
name|NullableLongFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum Float value. */
name|float
name|min
parameter_list|(
name|FloatFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * sequence and returns the minimum nullable Float      * value. */
name|Float
name|min
parameter_list|(
name|NullableFloatFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Invokes a transform function on each element of a      * generic sequence and returns the minimum resulting      * value. */
parameter_list|<
name|TResult
extends|extends
name|Comparable
argument_list|<
name|TResult
argument_list|>
parameter_list|>
name|TResult
name|min
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TResult
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/**      * Filters the elements of an Enumerable based on a      * specified type.      *      *<p>Analogous to LINQ's Enumerable.OfType extension method.</p>      *      * @param clazz Target type      * @param<TResult> Target type      * @return Collection of T2      */
parameter_list|<
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|ofType
parameter_list|(
name|Class
argument_list|<
name|TResult
argument_list|>
name|clazz
parameter_list|)
function_decl|;
comment|/** Sorts the elements of a sequence in ascending      * order according to a key. */
parameter_list|<
name|TKey
extends|extends
name|Comparable
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|orderBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/** Sorts the elements of a sequence in ascending      * order by using a specified comparer. */
parameter_list|<
name|TKey
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|orderBy
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
function_decl|;
comment|/** Sorts the elements of a sequence in descending      * order according to a key. */
parameter_list|<
name|TKey
extends|extends
name|Comparable
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|orderByDescending
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/** Sorts the elements of a sequence in descending      * order by using a specified comparer. */
parameter_list|<
name|TKey
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|orderByDescending
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
function_decl|;
comment|/** Inverts the order of the elements in a      * sequence. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|reverse
parameter_list|()
function_decl|;
comment|/** Projects each element of a sequence into a new      * form. */
parameter_list|<
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|select
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TResult
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence into a new      * form by incorporating the element's index. */
parameter_list|<
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|select
parameter_list|(
name|Function2
argument_list|<
name|TSource
argument_list|,
name|Integer
argument_list|,
name|TResult
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence to an      * Enumerable<TSource> and flattens the resulting sequences into one      * sequence. */
parameter_list|<
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|Enumerable
argument_list|<
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence to an      * Enumerable<TSource>, and flattens the resulting sequences into one      * sequence. The index of each source element is used in the      * projected form of that element. */
parameter_list|<
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
name|Function2
argument_list|<
name|TSource
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence to an      * Enumerable<TSource>, flattens the resulting sequences into one      * sequence, and invokes a result selector function on each      * element therein. The index of each source element is used in      * the intermediate projected form of that element. */
parameter_list|<
name|TCollection
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
name|Function2
argument_list|<
name|TSource
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|TCollection
argument_list|>
argument_list|>
name|collectionSelector
parameter_list|,
name|Function2
argument_list|<
name|TSource
argument_list|,
name|TCollection
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence to an      * Enumerable<TSource>, flattens the resulting sequences into one      * sequence, and invokes a result selector function on each      * element therein. */
parameter_list|<
name|TCollection
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|Enumerable
argument_list|<
name|TCollection
argument_list|>
argument_list|>
name|collectionSelector
parameter_list|,
name|Function2
argument_list|<
name|TSource
argument_list|,
name|TCollection
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Determines whether two sequences are equal by      * comparing the elements by using the default equality comparer      * for their type. */
name|boolean
name|sequenceEqual
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|enumerable1
parameter_list|)
function_decl|;
comment|/** Determines whether two sequences are equal by      * comparing their elements by using a specified      * EqualityComparer<TSource>. */
name|boolean
name|sequenceEqual
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|enumerable1
parameter_list|,
name|EqualityComparer
argument_list|<
name|TSource
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the only element of a sequence, and throws      * an exception if there is not exactly one element in the      * sequence. */
name|TSource
name|single
parameter_list|()
function_decl|;
comment|/** Returns the only element of a sequence that      * satisfies a specified condition, and throws an exception if      * more than one such element exists. */
name|TSource
name|single
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the only element of a sequence, or a      * default value if the sequence is empty; this method throws an      * exception if there is more than one element in the      * sequence. */
name|TSource
name|singleOrDefault
parameter_list|()
function_decl|;
comment|/** Returns the only element of a sequence that      * satisfies a specified condition or a default value if no such      * element exists; this method throws an exception if more than      * one element satisfies the condition. */
name|TSource
name|singleOrDefault
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Bypasses a specified number of elements in a      * sequence and then returns the remaining elements. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|skip
parameter_list|(
name|int
name|count
parameter_list|)
function_decl|;
comment|/** Bypasses elements in a sequence as long as a      * specified condition is true and then returns the remaining      * elements. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|skipWhile
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Bypasses elements in a sequence as long as a      * specified condition is true and then returns the remaining      * elements. The element's index is used in the logic of the      * predicate function. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|skipWhile
parameter_list|(
name|Predicate2
argument_list|<
name|TSource
argument_list|,
name|Integer
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of Decimal values      * that are obtained by invoking a transform function on each      * element of the input sequence. */
name|BigDecimal
name|sum
parameter_list|(
name|BigDecimalFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable      * Decimal values that are obtained by invoking a transform      * function on each element of the input sequence. */
name|BigDecimal
name|sum
parameter_list|(
name|NullableBigDecimalFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of Double values      * that are obtained by invoking a transform function on each      * element of the input sequence. */
name|double
name|sum
parameter_list|(
name|DoubleFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable      * Double values that are obtained by invoking a transform      * function on each element of the input sequence. */
name|Double
name|sum
parameter_list|(
name|NullableDoubleFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of int values      * that are obtained by invoking a transform function on each      * element of the input sequence. */
name|int
name|sum
parameter_list|(
name|IntegerFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable int      * values that are obtained by invoking a transform function on      * each element of the input sequence. */
name|Integer
name|sum
parameter_list|(
name|NullableIntegerFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of long values      * that are obtained by invoking a transform function on each      * element of the input sequence. */
name|long
name|sum
parameter_list|(
name|LongFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable long      * values that are obtained by invoking a transform function on      * each element of the input sequence. */
name|Long
name|sum
parameter_list|(
name|NullableLongFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of Float values      * that are obtained by invoking a transform function on each      * element of the input sequence. */
name|float
name|sum
parameter_list|(
name|FloatFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable      * Float values that are obtained by invoking a transform      * function on each element of the input sequence. */
name|Float
name|sum
parameter_list|(
name|NullableFloatFunction1
argument_list|<
name|TSource
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Returns a specified number of contiguous elements      * from the start of a sequence. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|take
parameter_list|(
name|int
name|count
parameter_list|)
function_decl|;
comment|/** Returns elements from a sequence as long as a      * specified condition is true. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|takeWhile
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns elements from a sequence as long as a      * specified condition is true. The element's index is used in the      * logic of the predicate function. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|takeWhile
parameter_list|(
name|Predicate2
argument_list|<
name|TSource
argument_list|,
name|Integer
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Creates a Dictionary<TKey, TValue> from an      * Enumerable<TSource> according to a specified key selector      * function.      *      *<p>NOTE: Called {@code toDictionary} in LINQ.NET.</p>      * */
parameter_list|<
name|TKey
parameter_list|>
name|Map
argument_list|<
name|TKey
argument_list|,
name|TSource
argument_list|>
name|toMap
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/** Creates a Dictionary<TKey, TValue> from an      * Enumerable<TSource> according to a specified key selector function      * and key comparer. */
parameter_list|<
name|TKey
parameter_list|>
name|Map
argument_list|<
name|TKey
argument_list|,
name|TSource
argument_list|>
name|toMap
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Creates a Dictionary<TKey, TValue> from an      * Enumerable<TSource> according to specified key selector and element      * selector functions. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Map
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
name|toMap
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TElement
argument_list|>
name|elementSelector
parameter_list|)
function_decl|;
comment|/** Creates a Dictionary<TKey, TValue> from an      * Enumerable<TSource> according to a specified key selector function,      * a comparer, and an element selector function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Map
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
name|toMap
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TElement
argument_list|>
name|elementSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Creates a List<TSource> from an Enumerable<TSource>. */
name|List
argument_list|<
name|TSource
argument_list|>
name|toList
parameter_list|()
function_decl|;
comment|/** Creates a Lookup<TKey, TElement> from an      * Enumerable<TSource> according to a specified key selector      * function. */
parameter_list|<
name|TKey
parameter_list|>
name|Lookup
argument_list|<
name|TKey
argument_list|,
name|TSource
argument_list|>
name|toLookup
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/** Creates a Lookup<TKey, TElement> from an      * Enumerable<TSource> according to a specified key selector function      * and key comparer. */
parameter_list|<
name|TKey
parameter_list|>
name|Lookup
argument_list|<
name|TKey
argument_list|,
name|TSource
argument_list|>
name|toLookup
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Creates a Lookup<TKey, TElement> from an      * Enumerable<TSource> according to specified key selector and element      * selector functions. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Lookup
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
name|toLookup
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TElement
argument_list|>
name|elementSelector
parameter_list|)
function_decl|;
comment|/** Creates a Lookup<TKey, TElement> from an      * Enumerable<TSource> according to a specified key selector function,      * a comparer and an element selector function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Lookup
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
name|toLookup
parameter_list|(
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TElement
argument_list|>
name|elementSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Produces the set union of two sequences by using      * the default equality comparer. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|union
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|source1
parameter_list|)
function_decl|;
comment|/** Produces the set union of two sequences by using a      * specified EqualityComparer<TSource>. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|union
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|source1
parameter_list|,
name|EqualityComparer
argument_list|<
name|TSource
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Filters a sequence of values based on a      * predicate. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|where
parameter_list|(
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Filters a sequence of values based on a      * predicate. Each element's index is used in the logic of the      * predicate function. */
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|where
parameter_list|(
name|Predicate2
argument_list|<
name|TSource
argument_list|,
name|Integer
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Applies a specified function to the corresponding      * elements of two sequences, producing a sequence of the      * results. */
parameter_list|<
name|T1
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|zip
parameter_list|(
name|Enumerable
argument_list|<
name|T1
argument_list|>
name|source1
parameter_list|,
name|Function2
argument_list|<
name|TSource
argument_list|,
name|T1
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
block|}
end_interface

begin_comment
comment|// End ExtendedEnumerable.java
end_comment

end_unit

