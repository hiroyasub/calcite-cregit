begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Extension methods for {@link OrderedEnumerable}.  *  * @author jhyde  */
end_comment

begin_interface
specifier|public
interface|interface
name|ExtendedOrderedEnumerable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Enumerable
argument_list|<
name|T
argument_list|>
block|{
comment|/**    * Performs a subsequent ordering of the elements in an    * {@link OrderedEnumerable} according to a key, using a specified    * comparator.    *    *<p>The functionality provided by this method is like that provided by    * {@link #thenBy(net.hydromatic.linq4j.function.Function1, java.util.Comparator) thenBy}    * or {@link #thenByDescending(net.hydromatic.linq4j.function.Function1, java.util.Comparator) thenByDescending},    * depending on whether descending is true or false. They both perform a    * subordinate ordering of an already sorted sequence of type    * {@link OrderedEnumerable}.</p>    */
parameter_list|<
name|TKey
parameter_list|>
name|OrderedEnumerable
argument_list|<
name|T
argument_list|>
name|createOrderedEnumerable
parameter_list|(
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|,
name|boolean
name|descending
parameter_list|)
function_decl|;
comment|/**    * Performs a subsequent ordering of the elements in a sequence in    * ascending order according to a key.    */
parameter_list|<
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|>
name|OrderedEnumerable
argument_list|<
name|T
argument_list|>
name|thenBy
parameter_list|(
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/**    * Performs a subsequent ordering of the elements in a sequence in    * ascending order according to a key, using a specified comparator.    */
parameter_list|<
name|TKey
parameter_list|>
name|OrderedEnumerable
argument_list|<
name|T
argument_list|>
name|thenBy
parameter_list|(
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
function_decl|;
comment|/**    * Performs a subsequent ordering of the elements in a sequence in    * descending order according to a key.    */
parameter_list|<
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|>
name|OrderedEnumerable
argument_list|<
name|T
argument_list|>
name|thenByDescending
parameter_list|(
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/**    * Performs a subsequent ordering of the elements in a sequence in    * descending order according to a key, using a specified comparator.    */
parameter_list|<
name|TKey
parameter_list|>
name|OrderedEnumerable
argument_list|<
name|T
argument_list|>
name|thenByDescending
parameter_list|(
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
function_decl|;
block|}
end_interface

begin_comment
comment|// End ExtendedOrderedEnumerable.java
end_comment

end_unit

