begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|FunctionExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|QueryableDefaults
operator|.
name|NonLeafReplayableQueryable
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link QueryableFactory} that records each event  * and returns an object that can replay them.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|QueryableRecorder
parameter_list|<
name|T
parameter_list|>
implements|implements
name|QueryableFactory
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|QueryableRecorder
name|INSTANCE
init|=
operator|new
name|QueryableRecorder
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|QueryableRecorder
argument_list|<
name|T
argument_list|>
name|instance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|public
name|T
name|aggregate
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|T
argument_list|,
name|T
argument_list|>
argument_list|>
name|func
parameter_list|)
block|{
return|return
operator|new
name|QueryableDefaults
operator|.
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|aggregate
argument_list|(
name|source
argument_list|,
name|func
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TAccumulate
parameter_list|>
name|TAccumulate
name|aggregate
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|TAccumulate
name|seed
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|T
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|func
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|aggregate
argument_list|(
name|source
argument_list|,
name|seed
argument_list|,
name|func
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TAccumulate
parameter_list|,
name|TResult
parameter_list|>
name|TResult
name|aggregate
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|TAccumulate
name|seed
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|T
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|func
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TAccumulate
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|aggregate
argument_list|(
name|source
argument_list|,
name|seed
argument_list|,
name|func
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|all
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|all
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|any
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|any
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|any
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|any
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|BigDecimal
name|averageBigDecimal
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|BigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageBigDecimal
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|BigDecimal
name|averageNullableBigDecimal
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableBigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageNullableBigDecimal
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|double
name|averageDouble
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|DoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageDouble
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|Double
name|averageNullableDouble
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableDoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageNullableDouble
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|int
name|averageInteger
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|IntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageInteger
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|Integer
name|averageNullableInteger
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableIntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageNullableInteger
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|float
name|averageFloat
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|FloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageFloat
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|Float
name|averageNullableFloat
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableFloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageNullableFloat
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the average of a sequence of long values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
specifier|public
name|long
name|averageLong
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|LongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageLong
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the average of a sequence of nullable      * long values that is obtained by invoking a projection function      * on each element of the input sequence. */
specifier|public
name|Long
name|averageNullableLong
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableLongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|averageNullableLong
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T2
parameter_list|>
name|Queryable
argument_list|<
name|T2
argument_list|>
name|cast
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T2
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|cast
argument_list|(
name|source
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
comment|/** Concatenates two sequences. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|concat
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source2
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|concat
argument_list|(
name|source
argument_list|,
name|source2
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|T
name|element
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|contains
argument_list|(
name|source
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|T
name|element
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|contains
argument_list|(
name|source
argument_list|,
name|element
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|int
name|count
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|count
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|int
name|count
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|func
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|count
argument_list|(
name|source
argument_list|,
name|func
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|defaultIfEmpty
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|defaultIfEmpty
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|defaultIfEmpty
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|T
name|value
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|defaultIfEmpty
argument_list|(
name|source
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|distinct
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|distinct
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|distinct
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|distinct
argument_list|(
name|source
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|T
name|elementAt
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|elementAt
argument_list|(
name|source
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|T
name|elementAtOrDefault
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|elementAtOrDefault
argument_list|(
name|source
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|except
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|except
argument_list|(
name|source
argument_list|,
name|enumerable
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|except
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|except
argument_list|(
name|source
argument_list|,
name|enumerable
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|T
name|first
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|first
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
name|T
name|first
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|first
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
name|T
name|firstOrDefault
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|firstOrDefault
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
name|T
name|firstOrDefault
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|firstOrDefault
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|T
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupBy
argument_list|(
name|source
argument_list|,
name|keySelector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|T
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupBy
argument_list|(
name|source
argument_list|,
name|keySelector
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupBy
argument_list|(
name|source
argument_list|,
name|keySelector
argument_list|,
name|elementSelector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|groupByK
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|elementSelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupByK
argument_list|(
name|source
argument_list|,
name|keySelector
argument_list|,
name|elementSelector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupBy
argument_list|(
name|source
argument_list|,
name|keySelector
argument_list|,
name|elementSelector
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupByK
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupByK
argument_list|(
name|source
argument_list|,
name|keySelector
argument_list|,
name|elementSelector
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TElement
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupBy
argument_list|(
name|source
argument_list|,
name|keySelector
argument_list|,
name|elementSelector
argument_list|,
name|resultSelector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TElement
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupBy
argument_list|(
name|source
argument_list|,
name|keySelector
argument_list|,
name|elementSelector
argument_list|,
name|resultSelector
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupJoin
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupJoin
argument_list|(
name|source
argument_list|,
name|inner
argument_list|,
name|outerKeySelector
argument_list|,
name|innerKeySelector
argument_list|,
name|resultSelector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupJoin
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|groupJoin
argument_list|(
name|source
argument_list|,
name|inner
argument_list|,
name|outerKeySelector
argument_list|,
name|innerKeySelector
argument_list|,
name|resultSelector
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|intersect
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|intersect
argument_list|(
name|source
argument_list|,
name|enumerable
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|intersect
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|intersect
argument_list|(
name|source
argument_list|,
name|enumerable
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|join
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|join
argument_list|(
name|source
argument_list|,
name|inner
argument_list|,
name|outerKeySelector
argument_list|,
name|innerKeySelector
argument_list|,
name|resultSelector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|join
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|join
argument_list|(
name|source
argument_list|,
name|inner
argument_list|,
name|outerKeySelector
argument_list|,
name|innerKeySelector
argument_list|,
name|resultSelector
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
name|T
name|last
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|last
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
name|T
name|last
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|last
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
name|T
name|lastOrDefault
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|lastOrDefault
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
name|T
name|lastOrDefault
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|lastOrDefault
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|single
argument_list|()
return|;
block|}
specifier|public
name|long
name|longCount
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|longCount
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|long
name|longCount
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|longCount
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|longCount
argument_list|()
return|;
block|}
specifier|public
name|T
name|max
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|max
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TResult
extends|extends
name|Comparable
argument_list|<
name|TResult
argument_list|>
parameter_list|>
name|TResult
name|max
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|max
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|T
name|min
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|min
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TResult
extends|extends
name|Comparable
argument_list|<
name|TResult
argument_list|>
parameter_list|>
name|TResult
name|min
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|min
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|ofType
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Class
argument_list|<
name|TResult
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|ofType
argument_list|(
name|source
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castQueryable
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
extends|extends
name|Comparable
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderBy
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Sorts the elements of a sequence in ascending      * order by using a specified comparer. */
specifier|public
parameter_list|<
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderBy
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Sorts the elements of a sequence in descending      * order according to a key. */
specifier|public
parameter_list|<
name|TKey
extends|extends
name|Comparable
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderByDescending
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderByDescending
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Inverts the order of the elements in a      * sequence. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|reverse
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Projects each element of a sequence into a new form. */
specifier|public
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|select
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
name|source
operator|.
name|getProvider
argument_list|()
operator|.
name|createQuery
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|source
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"select"
argument_list|,
name|selector
argument_list|)
argument_list|,
name|functionResultType
argument_list|(
name|selector
argument_list|)
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|P0
parameter_list|,
name|R
parameter_list|>
name|Type
name|functionResultType
parameter_list|(
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|P0
argument_list|,
name|R
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
name|selector
operator|.
name|body
operator|.
name|getType
argument_list|()
return|;
block|}
comment|/** Projects each element of a sequence into a new      * form by incorporating the element's index.      *      *<p>NOTE: Renamed from {@code select} because had same erasure as      * {@link #select(net.hydromatic.linq4j.Queryable, net.hydromatic.linq4j.expressions.FunctionExpression)}.</p>      */
specifier|public
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectN
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Projects each element of a sequence to an      * Enumerable<T> and combines the resulting sequences into one      * sequence. */
specifier|public
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TResult
argument_list|>
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Projects each element of a sequence to an      * Enumerable<T> and combines the resulting sequences into one      * sequence. The index of each source element is used in the      * projected form of that element.      *      *<p>NOTE: Renamed from {@code selectMany} because had same erasure as      * {@link #selectMany(net.hydromatic.linq4j.Queryable, net.hydromatic.linq4j.expressions.FunctionExpression)}</p>      */
specifier|public
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectManyN
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|TResult
argument_list|>
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Projects each element of a sequence to an      * Enumerable<T> that incorporates the index of the source      * element that produced it. A result selector function is invoked      * on each element of each intermediate sequence, and the      * resulting values are combined into a single, one-dimensional      * sequence and returned. */
specifier|public
parameter_list|<
name|TCollection
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|TCollection
argument_list|>
argument_list|>
argument_list|>
name|collectionSelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TCollection
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Projects each element of a sequence to an      * Enumerable<T> and invokes a result selector function on each      * element therein. The resulting values from each intermediate      * sequence are combined into a single, one-dimensional sequence      * and returned.      *      *<p>NOTE: Renamed from {@code selectMany} because had same erasure as      * {@link #selectMany(net.hydromatic.linq4j.Queryable, net.hydromatic.linq4j.expressions.FunctionExpression, net.hydromatic.linq4j.expressions.FunctionExpression)}</p>      * */
specifier|public
parameter_list|<
name|TCollection
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectManyN
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TCollection
argument_list|>
argument_list|>
argument_list|>
name|collectionSelector
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TCollection
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|sequenceEqual
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Determines whether two sequences are equal by      * using a specified EqualityComparer<T> to compare      * elements. */
specifier|public
name|boolean
name|sequenceEqual
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Returns the only element of a sequence, and throws      * an exception if there is not exactly one element in the      * sequence. */
specifier|public
name|T
name|single
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Returns the only element of a sequence that      * satisfies a specified condition, and throws an exception if      * more than one such element exists. */
specifier|public
name|T
name|single
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Returns the only element of a sequence, or a      * default value if the sequence is empty; this method throws an      * exception if there is more than one element in the      * sequence. */
specifier|public
name|T
name|singleOrDefault
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Returns the only element of a sequence that      * satisfies a specified condition or a default value if no such      * element exists; this method throws an exception if more than      * one element satisfies the condition. */
specifier|public
name|T
name|singleOrDefault
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Bypasses a specified number of elements in a      * sequence and then returns the remaining elements. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|skip
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|EnumerableDefaults
operator|.
name|skip
argument_list|(
name|source
operator|.
name|asEnumerable
argument_list|()
argument_list|,
name|count
argument_list|)
operator|.
name|asQueryable
argument_list|()
return|;
block|}
comment|/** Bypasses elements in a sequence as long as a      * specified condition is true and then returns the remaining      * elements. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|skipWhile
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|skipWhileN
argument_list|(
name|source
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Functions
operator|.
expr|<
name|T
argument_list|,
name|Integer
operator|>
name|toPredicate2
argument_list|(
name|predicate
operator|.
name|getFunction
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Bypasses elements in a sequence as long as a      * specified condition is true and then returns the remaining      * elements. The element's index is used in the logic of the      * predicate function. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|skipWhileN
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|BaseQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
operator|.
name|getProvider
argument_list|()
argument_list|,
name|source
operator|.
name|getElementType
argument_list|()
argument_list|,
name|source
operator|.
name|getExpression
argument_list|()
argument_list|)
block|{
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|EnumerableDefaults
operator|.
name|SkipWhileEnumerator
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
operator|.
name|enumerator
argument_list|()
argument_list|,
name|predicate
operator|.
name|getFunction
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Computes the sum of the sequence of Decimal values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
specifier|public
name|BigDecimal
name|sumBigDecimal
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|sources
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|BigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of nullable      * Decimal values that is obtained by invoking a projection      * function on each element of the input sequence. */
specifier|public
name|BigDecimal
name|sumNullableBigDecimal
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableBigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of Double values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
specifier|public
name|double
name|sumDouble
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|DoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of nullable      * Double values that is obtained by invoking a projection      * function on each element of the input sequence. */
specifier|public
name|Double
name|sumNullableDouble
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableDoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of int values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
specifier|public
name|int
name|sumInteger
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|IntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of nullable int      * values that is obtained by invoking a projection function on      * each element of the input sequence. */
specifier|public
name|Integer
name|sumNullableInteger
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableIntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of long values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
specifier|public
name|long
name|sumLong
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|LongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of nullable long      * values that is obtained by invoking a projection function on      * each element of the input sequence. */
specifier|public
name|Long
name|sumNullableLong
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableLongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of Float values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
specifier|public
name|float
name|sumFloat
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|FloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Computes the sum of the sequence of nullable      * Float values that is obtained by invoking a projection      * function on each element of the input sequence. */
specifier|public
name|Float
name|sumNullableFloat
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|NullableFloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Returns a specified number of contiguous elements      * from the start of a sequence. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|take
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|EnumerableDefaults
operator|.
name|take
argument_list|(
name|source
operator|.
name|asEnumerable
argument_list|()
argument_list|,
name|count
argument_list|)
operator|.
name|asQueryable
argument_list|()
return|;
block|}
comment|/** Returns elements from a sequence as long as a      * specified condition is true. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|takeWhile
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|takeWhileN
argument_list|(
name|source
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Functions
operator|.
expr|<
name|T
argument_list|,
name|Integer
operator|>
name|toPredicate2
argument_list|(
name|predicate
operator|.
name|getFunction
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns elements from a sequence as long as a      * specified condition is true. The element's index is used in the      * logic of the predicate function. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|takeWhileN
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|BaseQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
operator|.
name|getProvider
argument_list|()
argument_list|,
name|source
operator|.
name|getElementType
argument_list|()
argument_list|,
name|source
operator|.
name|getExpression
argument_list|()
argument_list|)
block|{
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|EnumerableDefaults
operator|.
name|TakeWhileEnumerator
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
operator|.
name|enumerator
argument_list|()
argument_list|,
name|predicate
operator|.
name|getFunction
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Performs a subsequent ordering of the elements in a sequence in      * ascending order according to a key. */
specifier|public
parameter_list|<
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenBy
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Performs a subsequent ordering of the elements in a sequence in      * ascending order according to a key, using a specified comparator. */
specifier|public
parameter_list|<
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenBy
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Performs a subsequent ordering of the elements in a sequence in      * descending order according to a key. */
specifier|public
parameter_list|<
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenByDescending
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Performs a subsequent ordering of the elements in a sequence in      * dscending order according to a key, using a specified comparator. */
specifier|public
parameter_list|<
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenByDescending
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|union
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source0
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source1
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
comment|/** Produces the set union of two sequences by using a      * specified EqualityComparer<T>. */
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|union
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source0
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source1
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|where
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|?
extends|extends
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|QueryableDefaults
operator|.
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
return|return
name|factory
operator|.
name|where
argument_list|(
name|source
argument_list|,
name|predicate
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|Queryable
argument_list|<
name|T
argument_list|>
name|whereN
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|?
extends|extends
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T1
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|zip
parameter_list|(
specifier|final
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T1
argument_list|>
name|source1
parameter_list|,
specifier|final
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|T1
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
block|{
return|return
operator|new
name|NonLeafReplayableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|void
name|replay
parameter_list|(
name|QueryableFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|xxx
argument_list|(
name|source
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|castSingle
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End QueryableRecorder.java
end_comment

end_unit

