begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|FunctionExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Factory for building {@link Queryable} objects.  *  * @author jhyde  */
end_comment

begin_interface
specifier|public
interface|interface
name|QueryableFactory
parameter_list|<
name|T
parameter_list|>
block|{
comment|/** Applies an accumulator function over a sequence. */
name|T
name|aggregate
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|T
argument_list|,
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Applies an accumulator function over a      * sequence. The specified seed value is used as the initial      * accumulator value. */
parameter_list|<
name|TAccumulate
parameter_list|>
name|TAccumulate
name|aggregate
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|TAccumulate
name|seed
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|T
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Applies an accumulator function over a      * sequence. The specified seed value is used as the initial      * accumulator value, and the specified function is used to select      * the result value. */
parameter_list|<
name|TAccumulate
parameter_list|,
name|TResult
parameter_list|>
name|TResult
name|aggregate
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|TAccumulate
name|seed
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|T
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|func
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TAccumulate
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Determines whether all the elements of a sequence      * satisfy a condition. */
name|boolean
name|all
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Determines whether a sequence contains any      * elements. */
name|boolean
name|any
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Determines whether any element of a sequence      * satisfies a condition. */
name|boolean
name|any
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of Decimal      * values that is obtained by invoking a projection function on      * each element of the input sequence. */
name|BigDecimal
name|averageBigDecimal
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|BigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * Decimal values that is obtained by invoking a projection      * function on each element of the input sequence. */
name|BigDecimal
name|averageNullableBigDecimal
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableBigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of Double      * values that is obtained by invoking a projection function on      * each element of the input sequence. */
name|double
name|averageDouble
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|DoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * Double values that is obtained by invoking a projection      * function on each element of the input sequence. */
name|Double
name|averageNullableDouble
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableDoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of int values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
name|int
name|averageInteger
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|IntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * int values that is obtained by invoking a projection function      * on each element of the input sequence. */
name|Integer
name|averageNullableInteger
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableIntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of Float      * values that is obtained by invoking a projection function on      * each element of the input sequence. */
name|float
name|averageFloat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|FloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * Float values that is obtained by invoking a projection      * function on each element of the input sequence. */
name|Float
name|averageNullableFloat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableFloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of long values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
name|long
name|averageLong
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|LongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the average of a sequence of nullable      * long values that is obtained by invoking a projection function      * on each element of the input sequence. */
name|Long
name|averageNullableLong
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableLongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Concatenates two sequences. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|concat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source2
parameter_list|)
function_decl|;
comment|/** Determines whether a sequence contains a specified      * element by using the default equality comparer. */
name|boolean
name|contains
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|T
name|element
parameter_list|)
function_decl|;
comment|/** Determines whether a sequence contains a specified      * element by using a specified EqualityComparer<T>. */
name|boolean
name|contains
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|T
name|element
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the number of elements in a      * sequence. */
name|int
name|count
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns the number of elements in the specified      * sequence that satisfies a condition. */
name|int
name|count
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the elements of the specified sequence or      * the type parameter's default value in a singleton collection if      * the sequence is empty. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|defaultIfEmpty
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns the elements of the specified sequence or      * the specified value in a singleton collection if the sequence      * is empty. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|defaultIfEmpty
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|T
name|value
parameter_list|)
function_decl|;
comment|/** Returns distinct elements from a sequence by using      * the default equality comparer to compare values. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|distinct
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns distinct elements from a sequence by using      * a specified EqualityComparer<T> to compare values. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|distinct
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the element at a specified index in a      * sequence. */
name|T
name|elementAt
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
comment|/** Returns the element at a specified index in a      * sequence or a default value if the index is out of      * range. */
name|T
name|elementAtOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
comment|/** Produces the set difference of two sequences by      * using the default equality comparer to compare values. (Defined      * by Queryable.) */
name|Queryable
argument_list|<
name|T
argument_list|>
name|except
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
function_decl|;
comment|/** Produces the set difference of two sequences by      * using the specified EqualityComparer<T> to compare      * values. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|except
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the first element of a sequence. (Defined      * by Queryable.) */
name|T
name|first
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns the first element of a sequence that      * satisfies a specified condition. */
name|T
name|first
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the first element of a sequence, or a      * default value if the sequence contains no elements. */
name|T
name|firstOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns the first element of a sequence that      * satisfies a specified condition or a default value if no such      * element is found. */
name|T
name|firstOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function. */
parameter_list|<
name|TKey
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|T
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and compares the keys by using      * a specified comparer. */
parameter_list|<
name|TKey
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|T
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and projects the elements for      * each group by using a specified function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and creates a result value from      * each group and its key. */
parameter_list|<
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|groupByK
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|elementSelector
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence and projects the      * elements for each group by using a specified function. Key      * values are compared by using a specified comparer. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|>
name|Queryable
argument_list|<
name|Grouping
argument_list|<
name|TKey
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and creates a result value from      * each group and its key. Keys are compared by using a specified      * comparer. */
parameter_list|<
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupByK
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and creates a result value from      * each group and its key. The elements of each group are      * projected by using a specified function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TElement
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Groups the elements of a sequence according to a      * specified key selector function and creates a result value from      * each group and its key. Keys are compared by using a specified      * comparer and the elements of each group are projected by using      * a specified function. */
parameter_list|<
name|TKey
parameter_list|,
name|TElement
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TElement
argument_list|>
argument_list|>
name|elementSelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|TKey
argument_list|,
name|Enumerable
argument_list|<
name|TElement
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Correlates the elements of two sequences based on      * key equality and groups the results. The default equality      * comparer is used to compare keys. */
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupJoin
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Correlates the elements of two sequences based on      * key equality and groups the results. A specified      * EqualityComparer is used to compare keys. */
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|groupJoin
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Produces the set intersection of two sequences by      * using the default equality comparer to compare values. (Defined      * by Queryable.) */
name|Queryable
argument_list|<
name|T
argument_list|>
name|intersect
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
function_decl|;
comment|/** Produces the set intersection of two sequences by      * using the specified EqualityComparer to compare      * values. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|intersect
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Correlates the elements of two sequences based on      * matching keys. The default equality comparer is used to compare      * keys. */
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|join
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Correlates the elements of two sequences based on      * matching keys. A specified EqualityComparer is used to      * compare keys. */
parameter_list|<
name|TInner
parameter_list|,
name|TKey
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|join
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|outerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|innerKeySelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|,
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the last element in a sequence. (Defined      * by Queryable.) */
name|T
name|last
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns the last element of a sequence that      * satisfies a specified condition. */
name|T
name|last
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the last element in a sequence, or a      * default value if the sequence contains no elements. */
name|T
name|lastOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns the last element of a sequence that      * satisfies a condition or a default value if no such element is      * found. */
name|T
name|lastOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns an long that represents the total number      * of elements in a sequence. */
name|long
name|longCount
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns an long that represents the number of      * elements in a sequence that satisfy a condition. */
name|long
name|longCount
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the maximum value in a generic      * IQueryable<T>. */
name|T
name|max
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Invokes a projection function on each element of a      * generic IQueryable<T> and returns the maximum resulting      * value. */
parameter_list|<
name|TResult
extends|extends
name|Comparable
argument_list|<
name|TResult
argument_list|>
parameter_list|>
name|TResult
name|max
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Returns the minimum value in a generic      * IQueryable<T>. */
name|T
name|min
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Invokes a projection function on each element of a      * generic IQueryable<T> and returns the minimum resulting      * value. */
parameter_list|<
name|TResult
extends|extends
name|Comparable
argument_list|<
name|TResult
argument_list|>
parameter_list|>
name|TResult
name|min
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Filters the elements of an IQueryable based on a      * specified type. */
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|ofType
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Class
argument_list|<
name|TResult
argument_list|>
name|clazz
parameter_list|)
function_decl|;
parameter_list|<
name|T2
parameter_list|>
name|Queryable
argument_list|<
name|T2
argument_list|>
name|cast
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Class
argument_list|<
name|T2
argument_list|>
name|clazz
parameter_list|)
function_decl|;
comment|/** Sorts the elements of a sequence in ascending      * order according to a key. */
parameter_list|<
name|TKey
extends|extends
name|Comparable
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/** Sorts the elements of a sequence in ascending      * order by using a specified comparer. */
parameter_list|<
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderBy
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
function_decl|;
comment|/** Sorts the elements of a sequence in descending      * order according to a key. */
parameter_list|<
name|TKey
extends|extends
name|Comparable
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderByDescending
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
comment|/** Sorts the elements of a sequence in descending      * order by using a specified comparer. */
parameter_list|<
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|orderByDescending
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
function_decl|;
comment|/** Inverts the order of the elements in a sequence. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|reverse
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence into a new form. */
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|select
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence into a new      * form by incorporating the element's index. */
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence to an      * Enumerable<T> and combines the resulting sequences into one      * sequence. */
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TResult
argument_list|>
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence to an      * Enumerable<T> and combines the resulting sequences into one      * sequence. The index of each source element is used in the      * projected form of that element. */
parameter_list|<
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectManyN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|TResult
argument_list|>
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence to an      * Enumerable<T> that incorporates the index of the source      * element that produced it. A result selector function is invoked      * on each element of each intermediate sequence, and the      * resulting values are combined into a single, one-dimensional      * sequence and returned. */
parameter_list|<
name|TCollection
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectMany
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|Enumerable
argument_list|<
name|TCollection
argument_list|>
argument_list|>
argument_list|>
name|collectionSelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TCollection
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Projects each element of a sequence to an      * Enumerable<T> and invokes a result selector function on each      * element therein. The resulting values from each intermediate      * sequence are combined into a single, one-dimensional sequence      * and returned. */
parameter_list|<
name|TCollection
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|selectManyN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|Enumerable
argument_list|<
name|TCollection
argument_list|>
argument_list|>
argument_list|>
name|collectionSelector
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|TCollection
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
comment|/** Determines whether two sequences are equal by      * using the default equality comparer to compare      * elements. */
name|boolean
name|sequenceEqual
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
function_decl|;
comment|/** Determines whether two sequences are equal by      * using a specified EqualityComparer to compare      * elements. */
name|boolean
name|sequenceEqual
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Returns the only element of a sequence, and throws      * an exception if there is not exactly one element in the      * sequence. */
name|T
name|single
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns the only element of a sequence that      * satisfies a specified condition, and throws an exception if      * more than one such element exists. */
name|T
name|single
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns the only element of a sequence, or a      * default value if the sequence is empty; this method throws an      * exception if there is more than one element in the      * sequence. */
name|T
name|singleOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
function_decl|;
comment|/** Returns the only element of a sequence that      * satisfies a specified condition or a default value if no such      * element exists; this method throws an exception if more than      * one element satisfies the condition. */
name|T
name|singleOrDefault
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Bypasses a specified number of elements in a      * sequence and then returns the remaining elements. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|skip
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
comment|/** Bypasses elements in a sequence as long as a      * specified condition is true and then returns the remaining      * elements. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|skipWhile
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Bypasses elements in a sequence as long as a      * specified condition is true and then returns the remaining      * elements. The element's index is used in the logic of the      * predicate function. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|skipWhileN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of Decimal values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
name|BigDecimal
name|sumBigDecimal
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|BigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable      * Decimal values that is obtained by invoking a projection      * function on each element of the input sequence. */
name|BigDecimal
name|sumNullableBigDecimal
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableBigDecimalFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of Double values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
name|double
name|sumDouble
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|DoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable      * Double values that is obtained by invoking a projection      * function on each element of the input sequence. */
name|Double
name|sumNullableDouble
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableDoubleFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of int values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
name|int
name|sumInteger
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|IntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable int      * values that is obtained by invoking a projection function on      * each element of the input sequence. */
name|Integer
name|sumNullableInteger
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableIntegerFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of long values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
name|long
name|sumLong
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|LongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable long      * values that is obtained by invoking a projection function on      * each element of the input sequence. */
name|Long
name|sumNullableLong
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableLongFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of Float values      * that is obtained by invoking a projection function on each      * element of the input sequence. */
name|float
name|sumFloat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|FloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Computes the sum of the sequence of nullable      * Float values that is obtained by invoking a projection      * function on each element of the input sequence. */
name|Float
name|sumNullableFloat
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|NullableFloatFunction1
argument_list|<
name|T
argument_list|>
argument_list|>
name|selector
parameter_list|)
function_decl|;
comment|/** Returns a specified number of contiguous elements      * from the start of a sequence. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|take
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
comment|/** Returns elements from a sequence as long as a      * specified condition is true. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|takeWhile
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Returns elements from a sequence as long as a      * specified condition is true. The element's index is used in the      * logic of the predicate function. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|takeWhileN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
parameter_list|<
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenBy
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
parameter_list|<
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenBy
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
function_decl|;
parameter_list|<
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenByDescending
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|)
function_decl|;
parameter_list|<
name|TKey
parameter_list|>
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|thenByDescending
parameter_list|(
name|OrderedQueryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function1
argument_list|<
name|T
argument_list|,
name|TKey
argument_list|>
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TKey
argument_list|>
name|comparator
parameter_list|)
function_decl|;
comment|/** Produces the set union of two sequences by using      * the default equality comparer. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|union
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source1
parameter_list|)
function_decl|;
comment|/** Produces the set union of two sequences by using a      * specified EqualityComparer<T>. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|union
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source1
parameter_list|,
name|EqualityComparer
argument_list|<
name|T
argument_list|>
name|comparer
parameter_list|)
function_decl|;
comment|/** Filters a sequence of values based on a      * predicate. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|where
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|?
extends|extends
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Filters a sequence of values based on a      * predicate. Each element's index is used in the logic of the      * predicate function. */
name|Queryable
argument_list|<
name|T
argument_list|>
name|whereN
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|FunctionExpression
argument_list|<
name|?
extends|extends
name|Predicate2
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|predicate
parameter_list|)
function_decl|;
comment|/** Merges two sequences by using the specified      * predicate function. */
parameter_list|<
name|T1
parameter_list|,
name|TResult
parameter_list|>
name|Queryable
argument_list|<
name|TResult
argument_list|>
name|zip
parameter_list|(
name|Queryable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Enumerable
argument_list|<
name|T1
argument_list|>
name|source1
parameter_list|,
name|FunctionExpression
argument_list|<
name|Function2
argument_list|<
name|T
argument_list|,
name|T1
argument_list|,
name|TResult
argument_list|>
argument_list|>
name|resultSelector
parameter_list|)
function_decl|;
block|}
end_interface

begin_comment
comment|// End QueryableFactory.java
end_comment

end_unit

