begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|ModifiableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeStrategies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|trace
operator|.
name|EigenbaseTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Rules and relational operators for  * {@link JdbcConvention}  * calling convention.  */
end_comment

begin_class
specifier|public
class|class
name|JdbcRules
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|tracer
init|=
name|EigenbaseTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlParserPos
name|POS
init|=
name|SqlParserPos
operator|.
name|ZERO
decl_stmt|;
specifier|public
specifier|static
name|List
argument_list|<
name|RelOptRule
argument_list|>
name|rules
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|RelOptRule
operator|>
name|asList
argument_list|(
operator|new
name|JdbcToEnumerableConverterRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcJoinRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcCalcRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcAggregateRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcSortRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcUnionRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcIntersectRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcMinusRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcTableModificationRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|JdbcValuesRule
argument_list|(
name|out
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|addSelect
parameter_list|(
name|List
argument_list|<
name|SqlNode
argument_list|>
name|selectList
parameter_list|,
name|SqlNode
name|node
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
name|String
name|name
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|selectList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
name|JdbcImplementor
operator|.
name|simpleAlias
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
operator|||
operator|!
name|alias
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|=
name|SqlStdOperatorTable
operator|.
name|asOperator
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|node
argument_list|,
operator|new
name|SqlIdentifier
argument_list|(
name|name
argument_list|,
name|POS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|selectList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|JdbcImplementor
operator|.
name|Result
name|setOpToSql
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|,
name|SqlSetOperator
name|operator
parameter_list|,
name|JdbcRel
name|rel
parameter_list|)
block|{
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|input
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|rel
operator|.
name|getInputs
argument_list|()
argument_list|)
control|)
block|{
specifier|final
name|JdbcImplementor
operator|.
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|input
operator|.
name|i
argument_list|,
name|input
operator|.
name|e
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|result
operator|.
name|asSelect
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SqlCall
name|node
init|=
name|operator
operator|.
name|createCall
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|POS
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JdbcImplementor
operator|.
name|Clause
argument_list|>
name|clauses
init|=
name|Expressions
operator|.
name|list
argument_list|(
name|JdbcImplementor
operator|.
name|Clause
operator|.
name|SET_OP
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|node
argument_list|,
name|clauses
argument_list|,
name|rel
argument_list|)
return|;
block|}
specifier|static
specifier|abstract
class|class
name|JdbcConverterRule
extends|extends
name|ConverterRule
block|{
specifier|protected
specifier|final
name|JdbcConvention
name|out
decl_stmt|;
specifier|public
name|JdbcConverterRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|clazz
parameter_list|,
name|RelTrait
name|in
parameter_list|,
name|JdbcConvention
name|out
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|JdbcJoinRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcJoinRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|JoinRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcJoinRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|JoinRel
name|join
init|=
operator|(
name|JoinRel
operator|)
name|rel
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|.
name|getConvention
argument_list|()
operator|==
name|getOutTrait
argument_list|()
operator|)
condition|)
block|{
name|input
operator|=
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newInputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|JdbcJoinRel
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|join
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|getVariablesStopped
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|tracer
operator|.
name|warning
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcJoinRel
extends|extends
name|JoinRelBase
implements|implements
name|JdbcRel
block|{
specifier|final
name|ImmutableIntList
name|leftKeys
decl_stmt|;
specifier|final
name|ImmutableIntList
name|rightKeys
decl_stmt|;
specifier|protected
name|JdbcJoinRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leftKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rightKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|RexNode
name|remaining
init|=
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|leftKeys
argument_list|,
name|rightKeys
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"JdbcJoinRel only supports equi-join"
argument_list|)
throw|;
block|}
name|this
operator|.
name|leftKeys
operator|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|leftKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|rightKeys
operator|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|rightKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JdbcJoinRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RexNode
name|conditionExpr
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|JdbcJoinRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|conditionExpr
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
comment|// We always "build" the
name|double
name|rowCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
name|planner
operator|.
name|makeCost
argument_list|(
name|rowCount
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getRows
parameter_list|()
block|{
specifier|final
name|boolean
name|leftKey
init|=
name|left
operator|.
name|isKey
argument_list|(
name|Util
operator|.
name|bitSetOf
argument_list|(
name|leftKeys
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|rightKey
init|=
name|right
operator|.
name|isKey
argument_list|(
name|Util
operator|.
name|bitSetOf
argument_list|(
name|rightKeys
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|double
name|leftRowCount
init|=
name|left
operator|.
name|getRows
argument_list|()
decl_stmt|;
specifier|final
name|double
name|rightRowCount
init|=
name|right
operator|.
name|getRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|leftKey
operator|&&
name|rightKey
condition|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|leftRowCount
argument_list|,
name|rightRowCount
argument_list|)
return|;
block|}
if|if
condition|(
name|leftKey
condition|)
block|{
return|return
name|rightRowCount
return|;
block|}
if|if
condition|(
name|rightKey
condition|)
block|{
return|return
name|leftRowCount
return|;
block|}
return|return
name|leftRowCount
operator|*
name|rightRowCount
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|JdbcImplementor
operator|.
name|Result
name|leftResult
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|left
argument_list|)
decl_stmt|;
specifier|final
name|JdbcImplementor
operator|.
name|Result
name|rightResult
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
literal|1
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlCondition
init|=
literal|null
decl_stmt|;
specifier|final
name|JdbcImplementor
operator|.
name|Context
name|leftContext
init|=
name|leftResult
operator|.
name|qualifiedContext
argument_list|()
decl_stmt|;
specifier|final
name|JdbcImplementor
operator|.
name|Context
name|rightContext
init|=
name|rightResult
operator|.
name|qualifiedContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|leftKeys
argument_list|,
name|rightKeys
argument_list|)
control|)
block|{
name|SqlNode
name|x
init|=
name|SqlStdOperatorTable
operator|.
name|equalsOperator
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|leftContext
operator|.
name|field
argument_list|(
name|pair
operator|.
name|left
argument_list|)
argument_list|,
name|rightContext
operator|.
name|field
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqlCondition
operator|==
literal|null
condition|)
block|{
name|sqlCondition
operator|=
name|x
expr_stmt|;
block|}
else|else
block|{
name|sqlCondition
operator|=
name|SqlStdOperatorTable
operator|.
name|andOperator
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|sqlCondition
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
name|SqlNode
name|join
init|=
name|SqlStdOperatorTable
operator|.
name|joinOperator
operator|.
name|createCall
argument_list|(
name|leftResult
operator|.
name|asFrom
argument_list|()
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|POS
argument_list|)
argument_list|,
name|joinType
argument_list|(
name|joinType
argument_list|)
operator|.
name|symbol
argument_list|(
name|POS
argument_list|)
argument_list|,
name|rightResult
operator|.
name|asFrom
argument_list|()
argument_list|,
name|SqlJoinOperator
operator|.
name|ConditionType
operator|.
name|On
operator|.
name|symbol
argument_list|(
name|POS
argument_list|)
argument_list|,
name|sqlCondition
argument_list|,
name|POS
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|join
argument_list|,
name|leftResult
argument_list|,
name|rightResult
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SqlJoinOperator
operator|.
name|JoinType
name|joinType
parameter_list|(
name|JoinRelType
name|joinType
parameter_list|)
block|{
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|LEFT
case|:
return|return
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Left
return|;
case|case
name|RIGHT
case|:
return|return
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Right
return|;
case|case
name|INNER
case|:
return|return
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Inner
return|;
case|case
name|FULL
case|:
return|return
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Full
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|joinType
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Rule to convert a {@link CalcRel} to an    * {@link JdbcCalcRel}.    */
specifier|private
specifier|static
class|class
name|JdbcCalcRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcCalcRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|CalcRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcCalcRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|CalcRel
name|calc
init|=
operator|(
name|CalcRel
operator|)
name|rel
decl_stmt|;
comment|// If there's a multiset, let FarragoMultisetSplitter work on it
comment|// first.
if|if
condition|(
name|RexMultisetUtil
operator|.
name|containsMultiset
argument_list|(
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|JdbcCalcRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|,
name|convert
argument_list|(
name|calc
operator|.
name|getChild
argument_list|()
argument_list|,
name|calc
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|,
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|,
name|ProjectRelBase
operator|.
name|Flags
operator|.
name|Boxed
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcCalcRel
extends|extends
name|SingleRel
implements|implements
name|JdbcRel
block|{
specifier|private
specifier|final
name|RexProgram
name|program
decl_stmt|;
comment|/**      * Values defined in {@link org.eigenbase.rel.ProjectRelBase.Flags}.      */
specifier|protected
specifier|final
name|int
name|flags
decl_stmt|;
specifier|public
name|JdbcCalcRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|program
operator|.
name|getOutputRowType
argument_list|()
expr_stmt|;
block|}
specifier|public
name|RelOptPlanWriter
name|explainTerms
parameter_list|(
name|RelOptPlanWriter
name|pw
parameter_list|)
block|{
return|return
name|program
operator|.
name|explainCalc
argument_list|(
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|double
name|getRows
parameter_list|()
block|{
return|return
name|FilterRel
operator|.
name|estimateFilteredRows
argument_list|(
name|getChild
argument_list|()
argument_list|,
name|program
argument_list|)
return|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
name|double
name|dRows
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|double
name|dCpu
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getChild
argument_list|()
argument_list|)
operator|*
name|program
operator|.
name|getExprCount
argument_list|()
decl_stmt|;
name|double
name|dIo
init|=
literal|0
decl_stmt|;
return|return
name|planner
operator|.
name|makeCost
argument_list|(
name|dRows
argument_list|,
name|dCpu
argument_list|,
name|dIo
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|JdbcCalcRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|program
operator|.
name|copy
argument_list|()
argument_list|,
name|flags
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
name|JdbcImplementor
operator|.
name|Result
name|x
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getChild
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|JdbcImplementor
operator|.
name|Builder
name|builder
init|=
name|program
operator|.
name|getCondition
argument_list|()
operator|!=
literal|null
condition|?
name|x
operator|.
name|builder
argument_list|(
name|this
argument_list|,
name|JdbcImplementor
operator|.
name|Clause
operator|.
name|FROM
argument_list|,
name|JdbcImplementor
operator|.
name|Clause
operator|.
name|WHERE
argument_list|)
else|:
name|x
operator|.
name|builder
argument_list|(
name|this
argument_list|,
name|JdbcImplementor
operator|.
name|Clause
operator|.
name|FROM
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isStar
argument_list|(
name|program
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|selectList
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexLocalRef
name|ref
range|:
name|program
operator|.
name|getProjectList
argument_list|()
control|)
block|{
name|SqlNode
name|sqlExpr
init|=
name|builder
operator|.
name|context
operator|.
name|toSql
argument_list|(
name|program
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|addSelect
argument_list|(
name|selectList
argument_list|,
name|sqlExpr
argument_list|,
name|getRowType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSelect
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|selectList
argument_list|,
name|POS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|program
operator|.
name|getCondition
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setWhere
argument_list|(
name|builder
operator|.
name|context
operator|.
name|toSql
argument_list|(
name|program
argument_list|,
name|program
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|result
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isStar
parameter_list|(
name|RexProgram
name|program
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RexLocalRef
name|ref
range|:
name|program
operator|.
name|getProjectList
argument_list|()
control|)
block|{
if|if
condition|(
name|ref
operator|.
name|getIndex
argument_list|()
operator|!=
name|i
operator|++
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|i
operator|==
name|program
operator|.
name|getInputRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
return|;
block|}
block|}
comment|/**    * Rule to convert an {@link org.eigenbase.rel.AggregateRel} to an    * {@link JdbcAggregateRel}.    */
specifier|private
specifier|static
class|class
name|JdbcAggregateRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcAggregateRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|AggregateRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcAggregateRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|AggregateRel
name|agg
init|=
operator|(
name|AggregateRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|agg
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|JdbcAggregateRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|agg
operator|.
name|getChild
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|agg
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|agg
operator|.
name|getAggCallList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|tracer
operator|.
name|warning
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcAggregateRel
extends|extends
name|AggregateRelBase
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcAggregateRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|BitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
block|}
annotation|@
name|Override
specifier|public
name|JdbcAggregateRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|JdbcAggregateRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
comment|// "select a, b, sum(x) from ( ... ) group by a, b"
specifier|final
name|JdbcImplementor
operator|.
name|Result
name|x
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getChild
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|JdbcImplementor
operator|.
name|Builder
name|builder
init|=
name|x
operator|.
name|builder
argument_list|(
name|this
argument_list|,
name|JdbcImplementor
operator|.
name|Clause
operator|.
name|GROUP_BY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SqlNode
argument_list|>
name|groupByList
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|selectList
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|group
range|:
name|Util
operator|.
name|toIter
argument_list|(
name|groupSet
argument_list|)
control|)
block|{
specifier|final
name|SqlNode
name|field
init|=
name|builder
operator|.
name|context
operator|.
name|field
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|addSelect
argument_list|(
name|selectList
argument_list|,
name|field
argument_list|,
name|getRowType
argument_list|()
argument_list|)
expr_stmt|;
name|groupByList
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
name|addSelect
argument_list|(
name|selectList
argument_list|,
name|builder
operator|.
name|context
operator|.
name|toSql
argument_list|(
name|aggCall
argument_list|)
argument_list|,
name|rowType
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSelect
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|selectList
argument_list|,
name|POS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|groupByList
operator|.
name|isEmpty
argument_list|()
operator|||
name|aggCalls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Some databases don't support "GROUP BY ()". We can omit it as long
comment|// as there is at least one aggregate function.
name|builder
operator|.
name|setGroupBy
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|groupByList
argument_list|,
name|POS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|result
argument_list|()
return|;
block|}
block|}
comment|/**    * Rule to convert an {@link org.eigenbase.rel.SortRel} to an    * {@link JdbcSortRel}.    */
specifier|private
specifier|static
class|class
name|JdbcSortRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcSortRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|SortRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcSortRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|SortRel
name|sort
init|=
operator|(
name|SortRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|sort
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcSortRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|sort
operator|.
name|getChild
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|sort
operator|.
name|getCollations
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcSortRel
extends|extends
name|SortRel
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcSortRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|collations
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|child
operator|.
name|getConvention
argument_list|()
assert|;
block|}
annotation|@
name|Override
specifier|public
name|JdbcSortRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|newInput
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|newCollations
parameter_list|)
block|{
return|return
operator|new
name|JdbcSortRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|newInput
argument_list|,
name|newCollations
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|JdbcImplementor
operator|.
name|Result
name|x
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getChild
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|JdbcImplementor
operator|.
name|Builder
name|builder
init|=
name|x
operator|.
name|builder
argument_list|(
name|this
argument_list|,
name|JdbcImplementor
operator|.
name|Clause
operator|.
name|ORDER_BY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SqlNode
argument_list|>
name|orderByList
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|collation
range|:
name|collations
control|)
block|{
if|if
condition|(
name|collation
operator|.
name|nullDirection
operator|!=
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|UNSPECIFIED
operator|&&
name|implementor
operator|.
name|dialect
operator|.
name|getDatabaseProduct
argument_list|()
operator|==
name|SqlDialect
operator|.
name|DatabaseProduct
operator|.
name|MYSQL
condition|)
block|{
name|orderByList
operator|.
name|add
argument_list|(
name|ISNULL_FUNCTION
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|builder
operator|.
name|context
operator|.
name|field
argument_list|(
name|collation
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|collation
operator|=
operator|new
name|RelFieldCollation
argument_list|(
name|collation
operator|.
name|getFieldIndex
argument_list|()
argument_list|,
name|collation
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|orderByList
operator|.
name|add
argument_list|(
name|builder
operator|.
name|context
operator|.
name|toSql
argument_list|(
name|collation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setOrderBy
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|orderByList
argument_list|,
name|POS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|result
argument_list|()
return|;
block|}
block|}
comment|/** MySQL specific function. */
specifier|private
specifier|static
name|SqlFunction
name|ISNULL_FUNCTION
init|=
operator|new
name|SqlFunction
argument_list|(
literal|"ISNULL"
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
name|SqlTypeStrategies
operator|.
name|rtiBoolean
argument_list|,
name|SqlTypeStrategies
operator|.
name|otiFirstKnown
argument_list|,
name|SqlTypeStrategies
operator|.
name|otcAny
argument_list|,
name|SqlFunctionCategory
operator|.
name|System
argument_list|)
decl_stmt|;
comment|/**    * Rule to convert an {@link org.eigenbase.rel.UnionRel} to a    * {@link JdbcUnionRel}.    */
specifier|private
specifier|static
class|class
name|JdbcUnionRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcUnionRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|UnionRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcUnionRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|UnionRel
name|union
init|=
operator|(
name|UnionRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|union
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcUnionRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|union
operator|.
name|getInputs
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|union
operator|.
name|all
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcUnionRel
extends|extends
name|UnionRelBase
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcUnionRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JdbcUnionRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|JdbcUnionRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|.1
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|SqlSetOperator
name|operator
init|=
name|all
condition|?
name|SqlStdOperatorTable
operator|.
name|unionAllOperator
else|:
name|SqlStdOperatorTable
operator|.
name|unionOperator
decl_stmt|;
return|return
name|setOpToSql
argument_list|(
name|implementor
argument_list|,
name|operator
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert an {@link org.eigenbase.rel.IntersectRel} to an    * {@link JdbcIntersectRel}.    */
specifier|private
specifier|static
class|class
name|JdbcIntersectRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcIntersectRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|IntersectRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcIntersectRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|IntersectRel
name|intersect
init|=
operator|(
name|IntersectRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|intersect
operator|.
name|all
condition|)
block|{
return|return
literal|null
return|;
comment|// INTERSECT ALL not implemented
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|intersect
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcIntersectRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|intersect
operator|.
name|getInputs
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|intersect
operator|.
name|all
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcIntersectRel
extends|extends
name|IntersectRelBase
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcIntersectRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|all
assert|;
block|}
specifier|public
name|JdbcIntersectRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|JdbcIntersectRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|setOpToSql
argument_list|(
name|implementor
argument_list|,
name|all
condition|?
name|SqlStdOperatorTable
operator|.
name|intersectAllOperator
else|:
name|SqlStdOperatorTable
operator|.
name|intersectOperator
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert an {@link org.eigenbase.rel.MinusRel} to an    * {@link JdbcMinusRel}.    */
specifier|private
specifier|static
class|class
name|JdbcMinusRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcMinusRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|MinusRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcMinusRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|MinusRel
name|minus
init|=
operator|(
name|MinusRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|minus
operator|.
name|all
condition|)
block|{
return|return
literal|null
return|;
comment|// EXCEPT ALL not implemented
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcMinusRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|minus
operator|.
name|getInputs
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|minus
operator|.
name|all
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcMinusRel
extends|extends
name|MinusRelBase
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcMinusRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|all
assert|;
block|}
specifier|public
name|JdbcMinusRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|JdbcMinusRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|setOpToSql
argument_list|(
name|implementor
argument_list|,
name|all
condition|?
name|SqlStdOperatorTable
operator|.
name|exceptAllOperator
else|:
name|SqlStdOperatorTable
operator|.
name|exceptOperator
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcTableModificationRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcTableModificationRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|TableModificationRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcTableModificationRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|TableModificationRel
name|modify
init|=
operator|(
name|TableModificationRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|modify
operator|.
name|getTable
argument_list|()
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
operator|||
name|modifiableTable
operator|.
name|getExpression
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|modify
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcTableModificationRel
argument_list|(
name|modify
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|modify
operator|.
name|getTable
argument_list|()
argument_list|,
name|modify
operator|.
name|getCatalogReader
argument_list|()
argument_list|,
name|convert
argument_list|(
name|modify
operator|.
name|getChild
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|modify
operator|.
name|getOperation
argument_list|()
argument_list|,
name|modify
operator|.
name|getUpdateColumnList
argument_list|()
argument_list|,
name|modify
operator|.
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcTableModificationRel
extends|extends
name|TableModificationRelBase
implements|implements
name|JdbcRel
block|{
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|public
name|JdbcTableModificationRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|Prepare
operator|.
name|CatalogReader
name|catalogReader
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|updateColumnList
parameter_list|,
name|boolean
name|flattened
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|table
argument_list|,
name|catalogReader
argument_list|,
name|child
argument_list|,
name|operation
argument_list|,
name|updateColumnList
argument_list|,
name|flattened
argument_list|)
expr_stmt|;
assert|assert
name|child
operator|.
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO: user error in validator
block|}
name|this
operator|.
name|expression
operator|=
name|modifiableTable
operator|.
name|getExpression
argument_list|()
expr_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO: user error in validator
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|JdbcTableModificationRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|getCatalogReader
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|getOperation
argument_list|()
argument_list|,
name|getUpdateColumnList
argument_list|()
argument_list|,
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO:
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcValuesRule
extends|extends
name|JdbcConverterRule
block|{
specifier|private
name|JdbcValuesRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|ValuesRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
literal|"JdbcValuesRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|ValuesRel
name|valuesRel
init|=
operator|(
name|ValuesRel
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|JdbcValuesRel
argument_list|(
name|valuesRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getTuples
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|plus
argument_list|(
name|out
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JdbcValuesRel
extends|extends
name|ValuesRelBase
implements|implements
name|JdbcRel
block|{
name|JdbcValuesRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
operator|new
name|JdbcValuesRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JdbcImplementor
operator|.
name|Clause
argument_list|>
name|clauses
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|JdbcImplementor
operator|.
name|Clause
operator|.
name|SELECT
argument_list|)
decl_stmt|;
specifier|final
name|JdbcImplementor
operator|.
name|Builder
name|builder
init|=
name|implementor
operator|.
expr|new
name|Builder
argument_list|(
name|this
argument_list|,
name|clauses
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|JdbcImplementor
operator|.
name|Context
name|context
init|=
name|implementor
operator|.
expr|new
name|AliasContext
argument_list|(
name|Collections
operator|.
expr|<
name|Pair
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|selectList
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RexLiteral
argument_list|>
name|tuple
range|:
name|tuples
control|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|RexLiteral
argument_list|,
name|String
argument_list|>
name|literal
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|tuple
argument_list|,
name|fields
argument_list|)
control|)
block|{
name|selectList
operator|.
name|add
argument_list|(
name|SqlStdOperatorTable
operator|.
name|asOperator
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|context
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|literal
operator|.
name|left
argument_list|)
argument_list|,
operator|new
name|SqlIdentifier
argument_list|(
name|literal
operator|.
name|right
argument_list|,
name|POS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|implementor
operator|.
name|result
argument_list|(
name|SqlStdOperatorTable
operator|.
name|selectOperator
operator|.
name|createCall
argument_list|(
name|SqlNodeList
operator|.
name|Empty
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|selectList
argument_list|,
name|POS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|POS
argument_list|)
argument_list|,
name|clauses
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JdbcRules.java
end_comment

end_unit

