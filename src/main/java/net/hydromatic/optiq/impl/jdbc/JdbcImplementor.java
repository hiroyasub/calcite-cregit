begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * State for generating a SQL statement.  */
end_comment

begin_class
specifier|public
class|class
name|JdbcImplementor
block|{
specifier|final
name|SqlDialect
name|dialect
decl_stmt|;
name|int
name|indent
decl_stmt|;
specifier|public
name|JdbcImplementor
parameter_list|(
name|SqlDialect
name|dialect
parameter_list|)
block|{
name|this
operator|.
name|dialect
operator|=
name|dialect
expr_stmt|;
block|}
specifier|public
name|SqlBuilder
name|subquery
parameter_list|(
name|SqlBuilder
name|buf
parameter_list|,
name|int
name|i
parameter_list|,
name|RelNode
name|e
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
operator|++
name|indent
expr_stmt|;
name|newline
argument_list|(
name|buf
argument_list|)
operator|.
name|append
argument_list|(
name|visitChild
argument_list|(
name|i
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
operator|--
name|indent
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|") AS "
argument_list|)
operator|.
name|identifier
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
specifier|public
name|SqlString
name|visitChild
parameter_list|(
name|int
name|i
parameter_list|,
name|RelNode
name|e
parameter_list|)
block|{
return|return
operator|(
operator|(
name|JdbcRel
operator|)
name|e
operator|)
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|SqlBuilder
name|newline
parameter_list|(
name|SqlBuilder
name|buf
parameter_list|)
block|{
return|return
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|Util
operator|.
name|spaces
argument_list|(
name|indent
operator|*
literal|4
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End JdbcImplementor.java
end_comment

end_unit

