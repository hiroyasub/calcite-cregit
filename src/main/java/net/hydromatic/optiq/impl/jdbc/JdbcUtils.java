begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Primitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_comment
comment|/**  * Utilities for the JDBC provider.  *  * @author jhyde  */
end_comment

begin_class
specifier|final
class|class
name|JdbcUtils
block|{
specifier|private
name|JdbcUtils
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"no instances!"
argument_list|)
throw|;
block|}
comment|/** Executes a SQL query and returns the results as an enumerator. The      * parameterization not withstanding, the result type must be an array of      * objects. */
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Enumerator
argument_list|<
name|T
argument_list|>
name|sqlEnumerator
parameter_list|(
name|String
name|sql
parameter_list|,
name|JdbcSchema
name|dataContext
parameter_list|,
specifier|final
name|Primitive
index|[]
name|primitives
parameter_list|)
block|{
name|Connection
name|connection
decl_stmt|;
name|Statement
name|statement
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|dataContext
operator|.
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
decl_stmt|;
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
specifier|final
name|int
name|columnCount
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
return|return
operator|new
name|Enumerator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|current
parameter_list|()
block|{
name|Object
index|[]
name|os
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|os
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|os
index|[
name|i
index|]
operator|=
name|value
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|os
return|;
block|}
specifier|private
name|Object
name|value
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|SQLException
block|{
switch|switch
condition|(
name|primitives
index|[
name|i
index|]
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|resultSet
operator|.
name|getByte
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
case|case
name|CHARACTER
case|:
return|return
operator|(
name|char
operator|)
name|resultSet
operator|.
name|getShort
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|resultSet
operator|.
name|getDouble
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|resultSet
operator|.
name|getFloat
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|resultSet
operator|.
name|getInt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|resultSet
operator|.
name|getLong
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|resultSet
operator|.
name|getShort
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
default|default:
return|return
name|resultSet
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
try|try
block|{
return|return
name|resultSet
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
try|try
block|{
name|resultSet
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DialectPool
block|{
specifier|final
name|Map
argument_list|<
name|List
argument_list|,
name|SqlDialect
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|,
name|SqlDialect
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DialectPool
name|INSTANCE
init|=
operator|new
name|DialectPool
argument_list|()
decl_stmt|;
name|SqlDialect
name|get
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|DatabaseMetaData
name|metaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|String
name|productName
init|=
name|metaData
operator|.
name|getDatabaseProductName
argument_list|()
decl_stmt|;
name|String
name|productVersion
init|=
name|metaData
operator|.
name|getDatabaseProductVersion
argument_list|()
decl_stmt|;
name|List
name|key
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|productName
argument_list|,
name|productVersion
argument_list|)
decl_stmt|;
name|SqlDialect
name|dialect
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|dialect
operator|==
literal|null
condition|)
block|{
name|dialect
operator|=
operator|new
name|SqlDialect
argument_list|(
name|SqlDialect
operator|.
name|getProduct
argument_list|(
name|productName
argument_list|,
name|productVersion
argument_list|)
argument_list|,
name|productName
argument_list|,
name|metaData
operator|.
name|getIdentifierQuoteString
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dialect
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
return|return
name|dialect
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End JdbcUtils.java
end_comment

end_unit

