begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|clone
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Schema that contains in-memory copies of tables from a JDBC schema.  */
end_comment

begin_class
specifier|public
class|class
name|CloneSchema
extends|extends
name|MapSchema
block|{
specifier|public
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY_OBJECT_ARRAY
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|JDK_17
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"1.7"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Schema
name|sourceSchema
decl_stmt|;
comment|/**      * Creates a CloneSchema.      *      * @param queryProvider Query provider      * @param typeFactory Type factory      * @param expression Expression for schema      * @param sourceSchema JDBC data source      */
specifier|public
name|CloneSchema
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Schema
name|sourceSchema
parameter_list|)
block|{
name|super
argument_list|(
name|queryProvider
argument_list|,
name|typeFactory
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceSchema
operator|=
name|sourceSchema
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Table
name|table
init|=
name|super
operator|.
name|getTable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
return|;
block|}
comment|// TODO: make thread safe!
name|Table
name|sourceTable
init|=
name|sourceSchema
operator|.
name|getTable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceTable
operator|!=
literal|null
condition|)
block|{
name|table
operator|=
name|createCloneTable
argument_list|(
name|sourceTable
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|addTable
argument_list|(
name|name
argument_list|,
name|table
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Table
argument_list|<
name|T
argument_list|>
name|createCloneTable
parameter_list|(
name|Table
argument_list|<
name|T
argument_list|>
name|sourceTable
parameter_list|,
name|String
name|name
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|sourceTable
operator|.
name|into
argument_list|(
name|list
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
comment|// Old behavior: table based on list.
return|return
operator|new
name|ListTable
argument_list|<
name|T
argument_list|>
argument_list|(
name|this
argument_list|,
name|sourceTable
operator|.
name|getElementType
argument_list|()
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|BuiltinMethod
operator|.
name|SCHEMA_GET_TABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|// More efficient: table based on an array per column.
specifier|final
name|RelDataType
name|elementType
init|=
operator|(
name|RelDataType
operator|)
name|sourceTable
operator|.
name|getElementType
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|valueArrayList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|types
init|=
operator|new
name|AbstractList
argument_list|<
name|Type
argument_list|>
argument_list|()
block|{
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|elementType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|public
name|Type
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|fields
operator|.
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Type
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|types
argument_list|)
control|)
block|{
specifier|final
name|int
name|i
init|=
name|pair
operator|.
name|left
decl_stmt|;
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|pair
operator|.
name|right
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|sliceList
init|=
name|types
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
operator|(
name|List
operator|)
name|list
else|:
operator|new
name|AbstractList
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Object
index|[]
operator|)
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|)
index|[
name|i
index|]
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|primitive
operator|==
literal|null
condition|)
block|{
name|valueArrayList
operator|.
name|add
argument_list|(
name|toArray
argument_list|(
name|sliceList
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueArrayList
operator|.
name|add
argument_list|(
name|primitive
operator|.
name|toArray
argument_list|(
name|sliceList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ArrayTable
argument_list|<
name|T
argument_list|>
argument_list|(
name|this
argument_list|,
name|sourceTable
operator|.
name|getElementType
argument_list|()
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|BuiltinMethod
operator|.
name|SCHEMA_GET_TABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|,
name|valueArrayList
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|/** Converts a list to an array, optionally canonizing values which are      * equal. */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Object
index|[]
name|toArray
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|boolean
name|canonize
parameter_list|)
block|{
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY_OBJECT_ARRAY
return|;
block|}
name|Object
index|[]
name|objects
init|=
name|list
operator|.
name|toArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|canonize
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|o
init|=
operator|(
name|T
operator|)
name|objects
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|T
name|t
init|=
name|map
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objects
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
comment|// For string lists, optimize by letting all the strings share a
comment|// backing char array. Optimization does not work on JDK 1.7,
comment|// where String.substring creates a new char[].
if|if
condition|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|String
operator|&&
operator|!
name|JDK_17
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stringMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|map
decl_stmt|;
name|String
index|[]
name|strings
init|=
name|stringMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|map
operator|.
name|size
argument_list|()
operator|*
literal|12
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|strings
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
name|String
name|bigString
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|strings
control|)
block|{
name|int
name|end
init|=
name|start
operator|+
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
name|string
argument_list|,
name|bigString
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|objects
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
comment|//noinspection SuspiciousMethodCalls
name|objects
index|[
name|i
index|]
operator|=
name|map
operator|.
name|get
argument_list|(
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For debugging, print some stats.
if|if
condition|(
literal|false
condition|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|nullCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
operator|++
name|nullCount
expr_stmt|;
block|}
else|else
block|{
name|n
operator|+=
operator|(
operator|(
name|String
operator|)
name|object
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Strings: count="
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|", distinct="
operator|+
name|map
operator|.
name|size
argument_list|()
operator|+
literal|", nulls="
operator|+
name|nullCount
operator|+
literal|", avg len="
operator|+
operator|(
operator|(
name|float
operator|)
name|n
operator|/
name|list
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|", list="
operator|+
name|map
operator|.
name|keySet
argument_list|()
operator|+
literal|", bigStringLength="
operator|+
name|bigString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|objects
return|;
block|}
comment|/**      * Creates a CloneSchema within another schema.      *      * @param optiqConnection Connection to Optiq (also a query provider)      * @param parentSchema Parent schema      * @param name Name of new schema      * @param sourceSchema Source schema      * @return New CloneSchema      */
specifier|public
specifier|static
name|CloneSchema
name|create
parameter_list|(
name|OptiqConnection
name|optiqConnection
parameter_list|,
name|MutableSchema
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|,
name|Schema
name|sourceSchema
parameter_list|)
block|{
name|CloneSchema
name|schema
init|=
operator|new
name|CloneSchema
argument_list|(
name|optiqConnection
argument_list|,
name|optiqConnection
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|parentSchema
operator|.
name|getSubSchemaExpression
argument_list|(
name|name
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|sourceSchema
argument_list|)
decl_stmt|;
name|parentSchema
operator|.
name|addSchema
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
block|}
end_class

begin_comment
comment|// End CloneSchema.java
end_comment

end_unit

