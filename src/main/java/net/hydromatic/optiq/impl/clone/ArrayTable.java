begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|clone
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelRecordType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of table that reads rows from arrays, one per column.  */
end_comment

begin_class
class|class
name|ArrayTable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|BaseQueryable
argument_list|<
name|T
argument_list|>
implements|implements
name|Table
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|valueArrayList
decl_stmt|;
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
comment|/** Creates an ArrayTable. */
specifier|public
name|ArrayTable
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|valueArrayList
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|schema
operator|.
name|getQueryProvider
argument_list|()
argument_list|,
name|elementType
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|valueArrayList
operator|=
name|valueArrayList
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
assert|assert
operator|(
operator|(
name|RelRecordType
operator|)
name|elementType
operator|)
operator|.
name|getRecordFields
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|valueArrayList
operator|.
name|size
argument_list|()
assert|;
comment|// Check that all arrays are arrays (might be primitive arrays) and have
comment|// the same size.
for|for
control|(
name|Object
name|valueArray
range|:
name|valueArrayList
control|)
block|{
name|int
name|length
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|valueArray
argument_list|)
decl_stmt|;
assert|assert
name|size
operator|==
name|length
assert|;
block|}
block|}
specifier|public
name|DataContext
name|getDataContext
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|()
block|{
specifier|final
name|int
name|rowCount
init|=
name|size
decl_stmt|;
specifier|final
name|int
name|columnCount
init|=
name|valueArrayList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|objects
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|objects
index|[
name|j
index|]
operator|=
name|Array
operator|.
name|get
argument_list|(
name|valueArrayList
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|objects
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
operator|(
operator|++
name|i
operator|<
name|rowCount
operator|)
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|i
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End ArrayTable.java
end_comment

end_unit

