begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Schema mapped onto a directory of CSV files. Each table in the schema  * is a CSV file in that directory.  */
end_comment

begin_class
specifier|public
class|class
name|CsvSchema
extends|extends
name|AbstractSchema
block|{
specifier|final
name|File
name|directoryFile
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|smart
decl_stmt|;
comment|/**    * Creates a CSV schema.    *    * @param directoryFile Directory that holds {@code .csv} files    * @param smart      Whether to instantiate smart tables that undergo    *                   query optimization    */
specifier|public
name|CsvSchema
parameter_list|(
name|File
name|directoryFile
parameter_list|,
name|boolean
name|smart
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|directoryFile
operator|=
name|directoryFile
expr_stmt|;
name|this
operator|.
name|smart
operator|=
name|smart
expr_stmt|;
block|}
comment|/** Looks for a suffix on a string and returns    * either the string with the suffix removed    * or the original string. */
specifier|private
specifier|static
name|String
name|trim
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|String
name|trimmed
init|=
name|trimOrNull
argument_list|(
name|s
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
return|return
name|trimmed
operator|!=
literal|null
condition|?
name|trimmed
else|:
name|s
return|;
block|}
comment|/** Looks for a suffix on a string and returns    * either the string with the suffix removed    * or null. */
specifier|private
specifier|static
name|String
name|trimOrNull
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
name|s
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|File
index|[]
name|files
init|=
name|directoryFile
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
specifier|final
name|String
name|nameSansGz
init|=
name|trim
argument_list|(
name|name
argument_list|,
literal|".gz"
argument_list|)
decl_stmt|;
return|return
name|nameSansGz
operator|.
name|endsWith
argument_list|(
literal|".csv"
argument_list|)
operator|||
name|nameSansGz
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"directory "
operator|+
name|directoryFile
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
name|files
operator|=
operator|new
name|File
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|String
name|tableName
init|=
name|trim
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|".gz"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableNameSansJson
init|=
name|trimOrNull
argument_list|(
name|tableName
argument_list|,
literal|".json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableNameSansJson
operator|!=
literal|null
condition|)
block|{
name|JsonTable
name|table
init|=
operator|new
name|JsonTable
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|tableNameSansJson
argument_list|,
name|table
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|tableName
operator|=
name|trim
argument_list|(
name|tableName
argument_list|,
literal|".csv"
argument_list|)
expr_stmt|;
specifier|final
name|CsvTable
name|table
decl_stmt|;
if|if
condition|(
name|smart
condition|)
block|{
name|table
operator|=
operator|new
name|CsvSmartTable
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|=
operator|new
name|CsvTable
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End CsvSchema.java
end_comment

end_unit

