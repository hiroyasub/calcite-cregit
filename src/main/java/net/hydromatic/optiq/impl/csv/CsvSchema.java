begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|TableInSchemaImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Schema mapped onto a directory of CSV files. Each table in the schema  * is a CSV file in that directory.  */
end_comment

begin_class
specifier|public
class|class
name|CsvSchema
implements|implements
name|Schema
block|{
specifier|private
specifier|final
name|Schema
name|parentSchema
decl_stmt|;
specifier|private
specifier|final
name|File
name|directoryFile
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TableInSchema
argument_list|>
name|map
decl_stmt|;
specifier|public
name|CsvSchema
parameter_list|(
name|Schema
name|parentSchema
parameter_list|,
name|File
name|directoryFile
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|parentSchema
operator|=
name|parentSchema
expr_stmt|;
name|this
operator|.
name|directoryFile
operator|=
name|directoryFile
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|List
argument_list|<
name|TableFunction
argument_list|>
name|getTableFunctions
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|QueryProvider
name|getQueryProvider
parameter_list|()
block|{
return|return
name|parentSchema
operator|.
name|getQueryProvider
argument_list|()
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|TableInSchema
argument_list|>
name|getTables
parameter_list|()
block|{
return|return
name|computeMap
argument_list|()
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|CsvTable
argument_list|<
name|T
argument_list|>
name|getTable
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|elementType
parameter_list|)
block|{
specifier|final
name|TableInSchema
name|tableInSchema
init|=
name|computeMap
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|tableInSchema
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|CsvTable
argument_list|<
name|T
argument_list|>
operator|)
name|tableInSchema
operator|.
name|getTable
argument_list|(
name|elementType
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableFunction
argument_list|>
argument_list|>
name|getTableFunctions
parameter_list|()
block|{
comment|// this kind of schema does not have table functions
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
specifier|public
name|Schema
name|getSubSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// this kind of schema does not have sub-schemas
return|return
literal|null
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getSubSchemaNames
parameter_list|()
block|{
comment|// this kind of schema does not have sub-schemas
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/** Returns the map of tables by name, populating the map on first use. */
specifier|private
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|TableInSchema
argument_list|>
name|computeMap
parameter_list|()
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TableInSchema
argument_list|>
argument_list|()
expr_stmt|;
name|File
index|[]
name|files
init|=
name|directoryFile
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".csv"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|String
name|tableName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableName
operator|.
name|endsWith
argument_list|(
literal|".csv"
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tableName
operator|.
name|length
argument_list|()
operator|-
literal|".csv"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|rowType
init|=
literal|null
decl_stmt|;
specifier|final
name|CsvTable
name|table
init|=
operator|new
name|CsvTable
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|rowType
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|TableInSchemaImpl
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|TableType
operator|.
name|TABLE
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
block|}
end_class

begin_comment
comment|// End CsvSchema.java
end_comment

end_unit

