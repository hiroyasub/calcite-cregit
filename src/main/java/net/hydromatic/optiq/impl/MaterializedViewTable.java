begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqPrepare
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationKey
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Table that is a materialized view.  *  *<p>It can exist in two states: materialized and not materialized. Over time,  * a given materialized view may switch states. How it is expanded depends upon  * its current state. State is managed by  * {@link net.hydromatic.optiq.materialize.MaterializationService}.</p>  */
end_comment

begin_class
specifier|public
class|class
name|MaterializedViewTable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ViewTable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|MaterializationKey
name|key
decl_stmt|;
specifier|public
name|MaterializedViewTable
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|RelDataType
name|relDataType
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewSchemaPath
parameter_list|,
name|MaterializationKey
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|elementType
argument_list|,
name|relDataType
argument_list|,
name|tableName
argument_list|,
name|viewSql
argument_list|,
name|viewSchemaPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/** Table function that returns a materialized view. */
specifier|public
specifier|static
name|Schema
operator|.
name|TableFunctionInSchema
name|create
parameter_list|(
specifier|final
name|Schema
name|schema
parameter_list|,
specifier|final
name|String
name|viewName
parameter_list|,
specifier|final
name|String
name|viewSql
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|viewSchemaPath
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
block|{
specifier|final
name|MaterializedViewTableFunction
name|tableFunction
init|=
operator|new
name|MaterializedViewTableFunction
argument_list|(
name|schema
argument_list|,
name|viewName
argument_list|,
name|viewSql
argument_list|,
name|viewSchemaPath
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
operator|new
name|TableFunctionInSchemaImpl
argument_list|(
name|schema
argument_list|,
name|viewName
argument_list|,
name|tableFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
specifier|final
name|Schema
operator|.
name|TableInSchema
name|tableInSchema
init|=
name|MaterializationService
operator|.
name|INSTANCE
operator|.
name|checkValid
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableInSchema
operator|!=
literal|null
condition|)
block|{
name|Table
name|materializeTable
init|=
name|tableInSchema
operator|.
name|getTable
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|materializeTable
operator|instanceof
name|TranslatableTable
condition|)
block|{
name|TranslatableTable
name|table
init|=
operator|(
name|TranslatableTable
operator|)
name|materializeTable
decl_stmt|;
return|return
name|table
operator|.
name|toRel
argument_list|(
name|context
argument_list|,
name|relOptTable
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|toRel
argument_list|(
name|context
argument_list|,
name|relOptTable
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|MaterializedViewTableFunction
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ViewTableFunction
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|MaterializationKey
name|key
decl_stmt|;
specifier|private
name|MaterializedViewTableFunction
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|String
name|viewName
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewSchemaPath
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|viewName
argument_list|,
name|viewSql
argument_list|,
name|viewSchemaPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|MaterializationService
operator|.
name|INSTANCE
operator|.
name|defineMaterialization
argument_list|(
name|schema
argument_list|,
name|viewSql
argument_list|,
name|schemaPath
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Table
argument_list|<
name|T
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
block|{
assert|assert
name|arguments
operator|.
name|isEmpty
argument_list|()
assert|;
name|OptiqPrepare
operator|.
name|ParseResult
name|parsed
init|=
name|Schemas
operator|.
name|parse
argument_list|(
name|schema
argument_list|,
name|schemaPath
argument_list|,
name|viewSql
argument_list|)
decl_stmt|;
return|return
operator|new
name|MaterializedViewTable
argument_list|<
name|T
argument_list|>
argument_list|(
name|schema
argument_list|,
name|schema
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|getJavaClass
argument_list|(
name|parsed
operator|.
name|rowType
argument_list|)
argument_list|,
name|parsed
operator|.
name|rowType
argument_list|,
name|name
argument_list|,
name|viewSql
argument_list|,
name|schemaPath
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MaterializedViewTable.java
end_comment

end_unit

