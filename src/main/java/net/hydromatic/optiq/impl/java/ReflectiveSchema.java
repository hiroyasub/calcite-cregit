begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link net.hydromatic.optiq.Schema} that exposes the public  * fields and methods in a Java object.  */
end_comment

begin_class
specifier|public
class|class
name|ReflectiveSchema
extends|extends
name|MapSchema
block|{
specifier|final
name|Class
name|clazz
decl_stmt|;
specifier|private
specifier|final
name|Method
name|parentMethod
decl_stmt|;
comment|/**      * Creates a ReflectiveSchema.      *      * @param target Object whose fields will be sub-objects      * @param typeFactory Type factory      */
specifier|public
name|ReflectiveSchema
parameter_list|(
name|Object
name|target
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|this
argument_list|(
name|target
argument_list|,
name|typeFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a ReflectiveSchema that is optionally a sub-schema.      *      * @param target Object whose fields will be sub-objects      * @param typeFactory Type factory      */
specifier|protected
name|ReflectiveSchema
parameter_list|(
name|Object
name|target
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|Method
name|parentMethod
parameter_list|)
block|{
name|super
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|target
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|this
operator|.
name|parentMethod
operator|=
name|parentMethod
expr_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getFields
argument_list|()
control|)
block|{
name|putMulti
argument_list|(
name|membersMap
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldRelation
argument_list|(
name|field
argument_list|,
name|typeFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|==
name|Object
operator|.
name|class
condition|)
block|{
continue|continue;
block|}
name|putMulti
argument_list|(
name|membersMap
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|methodMember
argument_list|(
name|method
argument_list|,
name|typeFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Expression
name|getMemberExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|Member
name|member
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Schemas
operator|.
name|MemberPlus
operator|)
name|member
operator|)
operator|.
name|getExpression
argument_list|(
name|schemaExpression
argument_list|,
name|arguments
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getSubSchemaExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|super
operator|.
name|getSubSchemaExpression
argument_list|(
name|schemaExpression
argument_list|,
name|schema
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getSubSchemaInstance
parameter_list|(
name|Object
name|schemaInstance
parameter_list|,
name|String
name|subSchemaName
parameter_list|,
name|Schema
name|subSchema
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ReflectiveSchema
operator|)
name|subSchema
operator|)
operator|.
name|instanceFromParent
argument_list|(
name|schemaInstance
argument_list|)
return|;
block|}
specifier|private
name|Object
name|instanceFromParent
parameter_list|(
name|Object
name|parentSchemaInstance
parameter_list|)
block|{
try|try
block|{
return|return
name|parentMethod
operator|.
name|invoke
argument_list|(
name|parentSchemaInstance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Member
name|methodMember
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
operator|new
name|Schemas
operator|.
name|MemberPlus
argument_list|()
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Member {method="
operator|+
name|method
operator|+
literal|"}"
return|;
block|}
specifier|public
name|List
argument_list|<
name|Parameter
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|Parameter
argument_list|>
argument_list|()
block|{
specifier|public
name|Parameter
name|get
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|Parameter
argument_list|()
block|{
specifier|public
name|int
name|getOrdinal
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"arg"
operator|+
name|index
return|;
block|}
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
return|return
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|index
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|parameterTypes
operator|.
name|length
return|;
block|}
block|}
return|;
block|}
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
return|return
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Queryable
name|evaluate
parameter_list|(
name|Object
name|target
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
block|{
try|try
block|{
name|Object
name|o
init|=
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
name|arguments
operator|.
name|toArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|toQueryable
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while invoking method "
operator|+
name|method
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while invoking method "
operator|+
name|method
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|method
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|argumentExpressions
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|schemaExpression
argument_list|,
name|method
argument_list|,
name|argumentExpressions
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Member
name|fieldRelation
parameter_list|(
specifier|final
name|Field
name|field
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|createType
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Schemas
operator|.
name|MemberPlus
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Relation {field="
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"}"
return|;
block|}
specifier|public
name|List
argument_list|<
name|Parameter
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|Queryable
name|evaluate
parameter_list|(
name|Object
name|target
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
block|{
assert|assert
name|arguments
operator|==
literal|null
operator|||
name|arguments
operator|.
name|isEmpty
argument_list|()
assert|;
try|try
block|{
name|Object
name|o
init|=
name|field
operator|.
name|get
argument_list|(
name|target
argument_list|)
decl_stmt|;
return|return
name|toQueryable
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while accessing field "
operator|+
name|field
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|field
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|argumentExpressions
parameter_list|)
block|{
assert|assert
name|argumentExpressions
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|Expressions
operator|.
name|field
argument_list|(
name|schemaExpression
argument_list|,
name|field
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Queryable
name|toQueryable
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Object
index|[]
condition|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|o
argument_list|)
operator|.
name|asQueryable
argument_list|()
return|;
block|}
comment|// TODO: adapter for primitive arrays, e.g. float[].
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Iterable
condition|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
operator|(
name|Iterable
operator|)
name|o
argument_list|)
operator|.
name|asQueryable
argument_list|()
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot convert "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|+
literal|" into a Queryable"
argument_list|)
throw|;
block|}
block|}
end_class

begin_comment
comment|// End ReflectiveSchema.java
end_comment

end_unit

