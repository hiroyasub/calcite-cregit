begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link net.hydromatic.optiq.Schema} that exposes the public  * fields and methods in a Java object.  */
end_comment

begin_class
specifier|public
class|class
name|ReflectiveSchema
extends|extends
name|MapSchema
block|{
comment|/**      * Creates a ReflectiveSchema.      *      * @param o The object whose fields will be sub-objects      * @param typeFactory Type factory      */
specifier|public
name|ReflectiveSchema
parameter_list|(
name|Object
name|o
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|o
operator|.
name|getClass
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getFields
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldRelation
argument_list|(
name|o
argument_list|,
name|field
argument_list|,
name|typeFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|putMulti
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|methodFunction
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
name|typeFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|putMulti
parameter_list|(
name|String
name|name
parameter_list|,
name|Function
name|function
parameter_list|)
block|{
name|SchemaObject
name|x
init|=
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|function
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|OverloadImpl
name|overload
decl_stmt|;
if|if
condition|(
name|x
operator|instanceof
name|OverloadImpl
condition|)
block|{
name|overload
operator|=
operator|(
name|OverloadImpl
operator|)
name|x
expr_stmt|;
block|}
else|else
block|{
name|overload
operator|=
operator|new
name|OverloadImpl
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|overload
operator|.
name|list
operator|.
name|add
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|SchemaObject
name|schemaObject
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
operator|(
operator|(
name|FunctionPlus
operator|)
name|schemaObject
operator|)
operator|.
name|getExpression
argument_list|(
name|schemaExpression
argument_list|,
name|arguments
argument_list|)
return|;
block|}
specifier|private
interface|interface
name|FunctionPlus
extends|extends
name|Function
block|{
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|argumentExpressions
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|OverloadImpl
implements|implements
name|Overload
block|{
specifier|final
name|List
argument_list|<
name|Function
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Function
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|OverloadImpl
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Function
name|resolve
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argumentTypes
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Function
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Function
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Function
name|function
range|:
name|list
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|function
argument_list|,
name|argumentTypes
argument_list|)
condition|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
comment|// TODO:
block|}
specifier|private
name|boolean
name|matches
parameter_list|(
name|Function
name|function
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argumentTypes
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
name|function
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|size
argument_list|()
operator|!=
name|argumentTypes
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argumentTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelDataType
name|argumentType
init|=
name|argumentTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Parameter
name|parameter
init|=
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|argumentType
argument_list|,
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|canConvert
parameter_list|(
name|RelDataType
name|fromType
parameter_list|,
name|RelDataType
name|toType
parameter_list|)
block|{
return|return
name|SqlTypeUtil
operator|.
name|canAssignFrom
argument_list|(
name|toType
argument_list|,
name|fromType
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
specifier|private
name|Function
name|methodFunction
parameter_list|(
name|Object
name|o
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
operator|new
name|FunctionPlus
argument_list|()
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
specifier|public
name|List
argument_list|<
name|Parameter
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|Parameter
argument_list|>
argument_list|()
block|{
specifier|public
name|Parameter
name|get
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|Parameter
argument_list|()
block|{
specifier|public
name|int
name|getOrdinal
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"arg"
operator|+
name|index
return|;
block|}
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
return|return
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|index
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|parameterTypes
operator|.
name|length
return|;
block|}
block|}
return|;
block|}
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
return|return
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|method
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|argumentExpressions
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|schemaExpression
argument_list|,
name|method
argument_list|,
name|argumentExpressions
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|SchemaObject
name|fieldRelation
parameter_list|(
name|Object
name|o
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|createType
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|FunctionPlus
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|Parameter
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|field
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|argumentExpressions
parameter_list|)
block|{
assert|assert
name|argumentExpressions
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|Expressions
operator|.
name|field
argument_list|(
name|schemaExpression
argument_list|,
name|field
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End ReflectiveSchema.java
end_comment

end_unit

