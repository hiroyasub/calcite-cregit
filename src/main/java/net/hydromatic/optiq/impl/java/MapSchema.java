begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Schema} backed by a {@link HashMap}.  */
end_comment

begin_class
specifier|public
class|class
name|MapSchema
implements|implements
name|MutableSchema
block|{
specifier|private
specifier|final
name|Schema
name|parentSchema
decl_stmt|;
specifier|private
specifier|final
name|QueryProvider
name|queryProvider
decl_stmt|;
specifier|protected
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TableInSchema
argument_list|>
name|tableMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TableInSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|TableFunctionInSchema
argument_list|>
name|membersMap
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
name|subSchemaMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Creates a MapSchema.    *    * @param parentSchema Parent schema (may be null)    * @param queryProvider Query provider    * @param typeFactory Type factory    * @param name Name of schema    * @param expression Expression for schema    */
specifier|public
name|MapSchema
parameter_list|(
name|Schema
name|parentSchema
parameter_list|,
name|QueryProvider
name|queryProvider
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|parentSchema
operator|=
name|parentSchema
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
assert|assert
name|expression
operator|!=
literal|null
assert|;
assert|assert
name|typeFactory
operator|!=
literal|null
assert|;
assert|assert
name|queryProvider
operator|!=
literal|null
assert|;
assert|assert
name|name
operator|!=
literal|null
assert|;
block|}
comment|/**    * Creates a MapSchema that is a sub-schema.    *    * @param parentSchema Parent schema    * @param name Name of schema    * @param expression Expression for schema    *    * @throws NullPointerException if parentSchema is null    */
specifier|public
name|MapSchema
parameter_list|(
name|Schema
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
argument_list|(
name|parentSchema
argument_list|,
name|parentSchema
operator|.
name|getQueryProvider
argument_list|()
argument_list|,
name|parentSchema
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|name
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a MapSchema within another schema.    *    * @param parentSchema Parent schema    * @param name Name of new schema    * @return New MapSchema    */
specifier|public
specifier|static
name|MapSchema
name|create
parameter_list|(
name|MutableSchema
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|MapSchema
name|schema
init|=
operator|new
name|MapSchema
argument_list|(
name|parentSchema
argument_list|,
name|name
argument_list|,
name|parentSchema
operator|.
name|getSubSchemaExpression
argument_list|(
name|name
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|parentSchema
operator|.
name|addSchema
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
comment|/** Called by Optiq after creation, before loading tables explicitly defined    * in a JSON model. */
specifier|public
name|void
name|initialize
parameter_list|()
block|{
for|for
control|(
name|TableInSchema
name|tableInSchema
range|:
name|initialTables
argument_list|()
control|)
block|{
name|tableMap
operator|.
name|put
argument_list|(
name|tableInSchema
operator|.
name|name
argument_list|,
name|tableInSchema
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Schema
name|getParentSchema
parameter_list|()
block|{
return|return
name|parentSchema
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|JavaTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|QueryProvider
name|getQueryProvider
parameter_list|()
block|{
return|return
name|queryProvider
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|TableInSchema
argument_list|>
name|getTables
parameter_list|()
block|{
return|return
name|tableMap
return|;
block|}
specifier|public
parameter_list|<
name|E
parameter_list|>
name|Table
argument_list|<
name|E
argument_list|>
name|getTable
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|elementType
parameter_list|)
block|{
comment|// TODO: check elementType matches table.elementType
assert|assert
name|elementType
operator|!=
literal|null
assert|;
comment|// First look for a table.
name|TableInSchema
name|table
init|=
name|tableMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
operator|.
name|getTable
argument_list|(
name|elementType
argument_list|)
return|;
block|}
comment|// Then look for a table-function with no arguments.
name|Collection
argument_list|<
name|TableFunctionInSchema
argument_list|>
name|tableFunctions
init|=
name|membersMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableFunctions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TableFunctionInSchema
name|tableFunctionInSchema
range|:
name|tableFunctions
control|)
block|{
name|TableFunction
name|tableFunction
init|=
name|tableFunctionInSchema
operator|.
name|getTableFunction
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableFunction
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//noinspection unchecked
return|return
name|tableFunction
operator|.
name|apply
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Multimap
argument_list|<
name|String
argument_list|,
name|TableFunctionInSchema
argument_list|>
name|getTableFunctions
parameter_list|()
block|{
return|return
name|membersMap
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|TableFunctionInSchema
argument_list|>
name|getTableFunctions
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|membersMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getSubSchemaNames
parameter_list|()
block|{
return|return
name|subSchemaMap
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Schema
name|getSubSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|subSchemaMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addTableFunction
parameter_list|(
name|TableFunctionInSchema
name|tableFunctionInSchema
parameter_list|)
block|{
name|membersMap
operator|.
name|put
argument_list|(
name|tableFunctionInSchema
operator|.
name|name
argument_list|,
name|tableFunctionInSchema
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addTable
parameter_list|(
name|TableInSchema
name|table
parameter_list|)
block|{
name|tableMap
operator|.
name|put
argument_list|(
name|table
operator|.
name|name
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSchema
parameter_list|(
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|subSchemaMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Expression
name|getSubSchemaExpression
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
comment|// (Type) schemaExpression.getSubSchema("name")
name|Expression
name|call
init|=
name|Expressions
operator|.
name|call
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|BuiltinMethod
operator|.
name|GET_SUB_SCHEMA
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
comment|//noinspection unchecked
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|Schema
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|call
argument_list|,
name|type
argument_list|)
return|;
block|}
return|return
name|call
return|;
block|}
comment|/** Returns the initial set of tables.    *    *<p>The default implementation returns an empty list. Derived classes    * may override this method to create tables based on their schema type. For    * example, a CSV provider might scan for all ".csv" files in a particular    * directory and return a table for each.</p>    */
specifier|protected
name|Collection
argument_list|<
name|TableInSchema
argument_list|>
name|initialTables
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End MapSchema.java
end_comment

end_unit

