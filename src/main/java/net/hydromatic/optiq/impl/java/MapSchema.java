begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|MutableSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|SchemaLink
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|SchemaObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Schema} backed by a {@link HashMap}.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|MapSchema
implements|implements
name|MutableSchema
block|{
specifier|private
specifier|static
specifier|final
name|Method
name|MAP_GET_METHOD
decl_stmt|;
static|static
block|{
try|try
block|{
name|MAP_GET_METHOD
operator|=
name|Map
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaObject
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchemaObject
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MapSchema
parameter_list|()
block|{
block|}
specifier|public
name|SchemaObject
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|SchemaObject
name|schemaObject
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|schemaObject
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaObject
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|SchemaLink
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaObject
argument_list|>
name|asMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Expression
name|schemaExpression
parameter_list|,
name|SchemaObject
name|schemaObject
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
comment|// schemaExpression.get("name")
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|schemaExpression
argument_list|,
name|MAP_GET_METHOD
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
operator|(
name|Expression
operator|)
name|Expressions
operator|.
name|constant
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End MapSchema.java
end_comment

end_unit

