begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Cursor} on top of an  * {@link net.hydromatic.linq4j.Enumerator} that  * returns an array of {@link Object} for each row.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|ArrayEnumeratorCursor
implements|implements
name|Cursor
block|{
specifier|private
specifier|final
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
decl_stmt|;
comment|/**      * Creates an ArrayEnumeratorCursor.      *      * @param enumerator Enumerator      */
specifier|public
name|ArrayEnumeratorCursor
parameter_list|(
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|)
block|{
name|this
operator|.
name|enumerator
operator|=
name|enumerator
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Accessor
argument_list|>
name|createAccessors
parameter_list|(
name|boolean
index|[]
name|wasNull
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|types
parameter_list|)
block|{
name|List
argument_list|<
name|Accessor
argument_list|>
name|accessors
init|=
operator|new
name|ArrayList
argument_list|<
name|Accessor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|type
range|:
name|types
control|)
block|{
name|accessors
operator|.
name|add
argument_list|(
name|createAccessor
argument_list|(
name|type
argument_list|,
name|accessors
operator|.
name|size
argument_list|()
argument_list|,
name|wasNull
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|accessors
return|;
block|}
specifier|private
name|Accessor
name|createAccessor
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|boolean
index|[]
name|wasNull
parameter_list|)
block|{
comment|// Create an accessor appropriate to the underlying type; the accessor
comment|// can convert to any type in the same family.
name|Getter
name|getter
init|=
operator|new
name|ArrayEnumeratorGetter
argument_list|(
name|ordinal
argument_list|,
name|wasNull
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Types
operator|.
name|TINYINT
case|:
return|return
operator|new
name|ByteAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|SMALLINT
case|:
return|return
operator|new
name|ShortAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|INTEGER
case|:
return|return
operator|new
name|IntAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|BIGINT
case|:
return|return
operator|new
name|LongAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|FLOAT
case|:
return|return
operator|new
name|FloatAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|DOUBLE
case|:
return|return
operator|new
name|DoubleAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|CHAR
case|:
case|case
name|Types
operator|.
name|VARCHAR
case|:
return|return
operator|new
name|StringAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|BINARY
case|:
case|case
name|Types
operator|.
name|VARBINARY
case|:
return|return
operator|new
name|BinaryAccessor
argument_list|(
name|getter
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|next
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|moveNext
argument_list|()
return|;
block|}
class|class
name|AccessorImpl
implements|implements
name|Cursor
operator|.
name|Accessor
block|{
specifier|protected
specifier|final
name|Getter
name|getter
decl_stmt|;
specifier|public
name|AccessorImpl
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|this
operator|.
name|getter
operator|=
name|getter
expr_stmt|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"String"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"boolean"
argument_list|)
throw|;
block|}
specifier|public
name|byte
name|getByte
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"byte"
argument_list|)
throw|;
block|}
specifier|public
name|short
name|getShort
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"short"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getInt
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"int"
argument_list|)
throw|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"long"
argument_list|)
throw|;
block|}
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"float"
argument_list|)
throw|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"double"
argument_list|)
throw|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"BigDecimal"
argument_list|)
throw|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"BigDecimal with scale"
argument_list|)
throw|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"byte[]"
argument_list|)
throw|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Date"
argument_list|)
throw|;
block|}
specifier|public
name|Time
name|getTime
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Time"
argument_list|)
throw|;
block|}
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Timestamp"
argument_list|)
throw|;
block|}
specifier|public
name|InputStream
name|getAsciiStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"InputStream (ascii)"
argument_list|)
throw|;
block|}
specifier|public
name|InputStream
name|getUnicodeStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"InputStream (unicode)"
argument_list|)
throw|;
block|}
specifier|public
name|InputStream
name|getBinaryStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"InputStream (binary)"
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|getter
operator|.
name|getObject
argument_list|()
return|;
block|}
specifier|public
name|Reader
name|getCharacterStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Reader"
argument_list|)
throw|;
block|}
specifier|private
name|RuntimeException
name|cannotConvert
parameter_list|(
name|String
name|targetType
parameter_list|)
block|{
return|return
operator|new
name|RuntimeException
argument_list|(
literal|"cannot convert to "
operator|+
name|targetType
argument_list|)
return|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Object (with map)"
argument_list|)
throw|;
block|}
specifier|public
name|Ref
name|getRef
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Ref"
argument_list|)
throw|;
block|}
specifier|public
name|Blob
name|getBlob
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Blob"
argument_list|)
throw|;
block|}
specifier|public
name|Clob
name|getClob
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Clob"
argument_list|)
throw|;
block|}
specifier|public
name|Array
name|getArray
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Array"
argument_list|)
throw|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|(
name|Calendar
name|cal
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Date (with Calendar)"
argument_list|)
throw|;
block|}
specifier|public
name|Time
name|getTime
parameter_list|(
name|Calendar
name|cal
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Time (with Calendar)"
argument_list|)
throw|;
block|}
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|Calendar
name|cal
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Timestamp (with Calendar)"
argument_list|)
throw|;
block|}
specifier|public
name|URL
name|getURL
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"URL"
argument_list|)
throw|;
block|}
specifier|public
name|NClob
name|getNClob
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"NClob"
argument_list|)
throw|;
block|}
specifier|public
name|SQLXML
name|getSQLXML
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"SQLXML"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getNString
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"NString"
argument_list|)
throw|;
block|}
specifier|public
name|Reader
name|getNCharacterStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"NCharacterStream"
argument_list|)
throw|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getObject
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Object (with type)"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Accessor of exact numeric values. The subclass must implement the      * {@link #getLong()} method.      */
specifier|private
specifier|abstract
class|class
name|ExactNumericAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|ExactNumericAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
specifier|final
name|long
name|v
init|=
name|getLong
argument_list|()
decl_stmt|;
return|return
name|v
operator|==
literal|0
operator|&&
name|getter
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|DOWN
argument_list|)
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
specifier|final
name|long
name|val
init|=
name|getLong
argument_list|()
decl_stmt|;
return|return
name|val
operator|==
literal|0
operator|&&
name|getter
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|getLong
argument_list|()
return|;
block|}
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
return|return
name|getLong
argument_list|()
return|;
block|}
specifier|public
specifier|abstract
name|long
name|getLong
parameter_list|()
function_decl|;
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|getLong
argument_list|()
return|;
block|}
specifier|public
name|short
name|getShort
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|getLong
argument_list|()
return|;
block|}
specifier|public
name|byte
name|getByte
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
name|getLong
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
return|return
name|getLong
argument_list|()
operator|!=
literal|0d
return|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|Object
name|o
init|=
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is a {@link Boolean};      * corresponds to {@link Types#BOOLEAN}.      */
specifier|private
class|class
name|BooleanAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|BooleanAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
name|Boolean
name|o
init|=
operator|(
name|Boolean
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|!=
literal|null
operator|&&
name|o
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
name|Boolean
name|o
init|=
operator|(
name|Boolean
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is a {@link Byte};      * corresponds to {@link Types#TINYINT}.      */
specifier|private
class|class
name|ByteAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|ByteAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
name|getByte
parameter_list|()
block|{
name|Byte
name|o
init|=
operator|(
name|Byte
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getByte
argument_list|()
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is a {@link Short};      * corresponds to {@link Types#SMALLINT}.      */
specifier|private
class|class
name|ShortAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|ShortAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|short
name|getShort
parameter_list|()
block|{
name|Short
name|o
init|=
operator|(
name|Short
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getShort
argument_list|()
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is an {@link Integer};      * corresponds to {@link Types#INTEGER}.      */
specifier|private
class|class
name|IntAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|IntAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getInt
parameter_list|()
block|{
name|Integer
name|o
init|=
operator|(
name|Integer
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getInt
argument_list|()
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is a {@link Long};      * corresponds to {@link Types#BIGINT}.      */
specifier|private
class|class
name|LongAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|LongAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
name|Long
name|o
init|=
operator|(
name|Long
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
return|;
block|}
block|}
comment|/**      * Accessor of values that are {@link Double} or null.      */
specifier|private
specifier|abstract
class|class
name|ApproximateNumericAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|ApproximateNumericAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
specifier|final
name|double
name|v
init|=
name|getDouble
argument_list|()
decl_stmt|;
return|return
name|v
operator|==
literal|0d
operator|&&
name|getter
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|DOWN
argument_list|)
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
specifier|final
name|double
name|v
init|=
name|getDouble
argument_list|()
decl_stmt|;
return|return
name|v
operator|==
literal|0
operator|&&
name|getter
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|double
name|getDouble
parameter_list|()
function_decl|;
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
return|return
operator|(
name|float
operator|)
name|getDouble
argument_list|()
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
operator|(
name|long
operator|)
name|getDouble
argument_list|()
return|;
block|}
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|getDouble
argument_list|()
return|;
block|}
specifier|public
name|short
name|getShort
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|getDouble
argument_list|()
return|;
block|}
specifier|public
name|byte
name|getByte
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
name|getDouble
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
return|return
name|getDouble
argument_list|()
operator|!=
literal|0
return|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|Object
name|o
init|=
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is a {@link Float};      * corresponds to {@link Types#FLOAT}.      */
specifier|private
class|class
name|FloatAccessor
extends|extends
name|ApproximateNumericAccessor
block|{
specifier|public
name|FloatAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
name|Float
name|o
init|=
operator|(
name|Float
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0f
else|:
name|o
return|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|getFloat
argument_list|()
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is a {@link Float};      * corresponds to {@link Types#FLOAT}.      */
specifier|private
class|class
name|DoubleAccessor
extends|extends
name|ApproximateNumericAccessor
block|{
specifier|public
name|DoubleAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
name|Double
name|o
init|=
operator|(
name|Double
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0d
else|:
name|o
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is a {@link String};      * corresponds to {@link Types#CHAR} and {@link Types#VARCHAR}.      */
specifier|private
class|class
name|StringAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|StringAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|getObject
argument_list|()
return|;
block|}
block|}
comment|/**      * Accessor that assumes that the underlying value is an array of      * {@code byte} values;      * corresponds to {@link Types#BINARY} and {@link Types#VARBINARY}.      */
specifier|private
class|class
name|BinaryAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|BinaryAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|getObject
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
name|getBytes
argument_list|()
decl_stmt|;
return|return
name|bytes
operator|==
literal|null
condition|?
literal|null
else|:
name|ByteString
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
specifier|private
interface|interface
name|Getter
block|{
name|Object
name|getObject
parameter_list|()
function_decl|;
name|boolean
name|wasNull
parameter_list|()
function_decl|;
block|}
class|class
name|ArrayEnumeratorGetter
implements|implements
name|Getter
block|{
specifier|protected
specifier|final
name|int
name|field
decl_stmt|;
specifier|protected
specifier|final
name|boolean
index|[]
name|wasNull
decl_stmt|;
specifier|public
name|ArrayEnumeratorGetter
parameter_list|(
name|int
name|field
parameter_list|,
name|boolean
index|[]
name|wasNull
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|wasNull
operator|=
name|wasNull
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
name|Object
name|o
init|=
name|enumerator
operator|.
name|current
argument_list|()
index|[
name|field
index|]
decl_stmt|;
name|wasNull
index|[
literal|0
index|]
operator|=
operator|(
name|o
operator|==
literal|null
operator|)
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|public
name|boolean
name|wasNull
parameter_list|()
block|{
return|return
name|wasNull
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ArrayEnumeratorCursor.java
end_comment

end_unit

