begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function0
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_comment
comment|/**  * Executes a SQL statement and returns the result as an {@link Enumerable}.  */
end_comment

begin_class
specifier|public
class|class
name|ResultSetEnumerable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractEnumerable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|DataSource
name|dataSource
decl_stmt|;
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
specifier|private
specifier|final
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Function0
argument_list|<
name|T
argument_list|>
argument_list|>
name|rowBuilderFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Function0
argument_list|<
name|Object
argument_list|>
argument_list|>
name|AUTO_ROW_BUILDER_FACTORY
init|=
operator|new
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Function0
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Function0
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
specifier|final
name|ResultSet
name|resultSet
parameter_list|)
block|{
specifier|final
name|int
name|columnCount
decl_stmt|;
try|try
block|{
name|columnCount
operator|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|columnCount
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|Function0
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|apply
parameter_list|()
block|{
try|try
block|{
return|return
name|resultSet
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
else|else
block|{
comment|//noinspection unchecked
return|return
operator|(
name|Function0
operator|)
operator|new
name|Function0
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
index|[]
name|apply
parameter_list|()
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|resultSet
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
name|ResultSetEnumerable
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|sql
parameter_list|,
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Function0
argument_list|<
name|T
argument_list|>
argument_list|>
name|rowBuilderFactory
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|rowBuilderFactory
operator|=
name|rowBuilderFactory
expr_stmt|;
block|}
comment|/** Creates an ResultSetEnumerable. */
specifier|public
specifier|static
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|of
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|dataSource
argument_list|,
name|sql
argument_list|,
name|AUTO_ROW_BUILDER_FACTORY
argument_list|)
return|;
block|}
comment|/** Executes a SQL query and returns the results as an enumerator, using a    * row builder to convert JDBC column values into rows. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Enumerable
argument_list|<
name|T
argument_list|>
name|of
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|sql
parameter_list|,
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Function0
argument_list|<
name|T
argument_list|>
argument_list|>
name|rowBuilderFactory
parameter_list|)
block|{
return|return
operator|new
name|ResultSetEnumerable
argument_list|<
name|T
argument_list|>
argument_list|(
name|dataSource
argument_list|,
name|sql
argument_list|,
name|rowBuilderFactory
argument_list|)
return|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Statement
name|statement
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|statement
operator|=
literal|null
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|ResultSetEnumerator
argument_list|<
name|T
argument_list|>
argument_list|(
name|resultSet
argument_list|,
name|rowBuilderFactory
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while executing SQL ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ResultSetEnumerator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Enumerator
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|Function0
argument_list|<
name|T
argument_list|>
name|rowBuilder
decl_stmt|;
specifier|private
name|ResultSet
name|resultSet
decl_stmt|;
specifier|public
name|ResultSetEnumerator
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Function0
argument_list|<
name|T
argument_list|>
argument_list|>
name|rowBuilderFactory
parameter_list|)
block|{
name|this
operator|.
name|resultSet
operator|=
name|resultSet
expr_stmt|;
name|this
operator|.
name|rowBuilder
operator|=
name|rowBuilderFactory
operator|.
name|apply
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
specifier|public
name|T
name|current
parameter_list|()
block|{
return|return
name|rowBuilder
operator|.
name|apply
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
try|try
block|{
return|return
name|resultSet
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
try|try
block|{
name|resultSet
operator|.
name|beforeFirst
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// TODO: use this
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|resultSet
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ResultSet
name|savedResultSet
init|=
name|resultSet
decl_stmt|;
name|resultSet
operator|=
literal|null
expr_stmt|;
name|savedResultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|savedResultSet
operator|.
name|getStatement
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|savedResultSet
operator|.
name|getStatement
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End ResultSetEnumerable.java
end_comment

end_unit

