begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_comment
comment|/**  * Helper methods to implement SQL functions in generated code.  *  * @author jhyde  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnnecessaryUnboxing"
argument_list|)
specifier|public
class|class
name|SqlFunctions
block|{
comment|/** SQL SUBSTRING(string FROM ... FOR ...) function. */
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|for_
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
name|from
operator|-
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|from
operator|-
literal|1
operator|+
name|for_
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL SUBSTRING(string FROM ... FOR ...) function; nullable arguments. */
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|s
parameter_list|,
name|Integer
name|from
parameter_list|,
name|Integer
name|for_
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|from
operator|==
literal|null
operator|||
name|for_
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|substring
argument_list|(
name|s
argument_list|,
name|from
operator|.
name|intValue
argument_list|()
argument_list|,
name|for_
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL UPPER(string) function. */
specifier|public
specifier|static
name|String
name|upper
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
comment|/** SQL LOWER(string) function. */
specifier|public
specifier|static
name|String
name|lower
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
comment|// AND
comment|/** SQL AND operator. */
specifier|public
specifier|static
name|boolean
name|and
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|&&
name|b1
return|;
block|}
comment|/** SQL AND operator; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|and
parameter_list|(
name|Boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|&&
name|b1
operator|)
return|;
block|}
comment|/** SQL AND operator; right side may be null. */
specifier|public
specifier|static
name|Boolean
name|and
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|Boolean
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|&&
name|b1
operator|)
return|;
block|}
comment|/** SQL AND operator; either side may be null. */
specifier|public
specifier|static
name|Boolean
name|and
parameter_list|(
name|Boolean
name|b0
parameter_list|,
name|Boolean
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|&&
name|b1
operator|)
return|;
block|}
comment|// OR
comment|/** SQL OR operator. */
specifier|public
specifier|static
name|boolean
name|or
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|||
name|b1
return|;
block|}
comment|/** SQL OR operator; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|or
parameter_list|(
name|Boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|||
name|b1
operator|)
return|;
block|}
comment|/** SQL OR operator; right side may be null. */
specifier|public
specifier|static
name|Boolean
name|or
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|Boolean
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|||
name|b1
operator|)
return|;
block|}
comment|/** SQL OR operator; either side may be null. */
specifier|public
specifier|static
name|Boolean
name|or
parameter_list|(
name|Boolean
name|b0
parameter_list|,
name|Boolean
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|||
name|b1
operator|)
return|;
block|}
comment|// NOT
comment|/** SQL NOT operator. */
specifier|public
specifier|static
name|boolean
name|not
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
operator|!
name|b
return|;
block|}
comment|/** SQL OR operator; operand may be null. */
specifier|public
specifier|static
name|Boolean
name|not
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
condition|?
literal|null
else|:
operator|!
name|b
return|;
block|}
comment|// =
comment|/** SQL = operator applied to int values. */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
name|b1
return|;
block|}
comment|/** SQL == operator applied to int values; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|eq
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|==
name|b1
operator|)
return|;
block|}
comment|/** SQL = operator applied to int values; right side may be null. */
specifier|public
specifier|static
name|Boolean
name|eq
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|==
name|b1
operator|)
return|;
block|}
comment|/** SQL = operator applied to int values; either side may be null. */
specifier|public
specifier|static
name|Boolean
name|eq
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|intValue
argument_list|()
operator|==
name|b1
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL = operator applied to short values. */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
name|b1
return|;
block|}
comment|/** SQL == operator applied to short values; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|eq
parameter_list|(
name|Short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|==
name|b1
operator|)
return|;
block|}
comment|/** SQL = operator applied to short values; right side may be null. */
specifier|public
specifier|static
name|Boolean
name|eq
parameter_list|(
name|short
name|b0
parameter_list|,
name|Short
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|==
name|b1
operator|)
return|;
block|}
comment|/** SQL = operator applied to short values; either side may be null. */
specifier|public
specifier|static
name|Boolean
name|eq
parameter_list|(
name|Short
name|b0
parameter_list|,
name|Short
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|shortValue
argument_list|()
operator|==
name|b1
operator|.
name|shortValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL = operator applied to Object values (including String; either      * side may be null). */
specifier|public
specifier|static
name|Boolean
name|eq
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|equals
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|//<>
comment|/** SQL&lt;&gt; operator applied to int values. */
specifier|public
specifier|static
name|boolean
name|ne
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|!=
name|b1
return|;
block|}
comment|/** SQL&lt;&gt; operator applied to int values; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|ne
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|!=
name|b1
operator|)
return|;
block|}
comment|/** SQL&lt;&gt; operator applied to int values (right side may be null). */
specifier|public
specifier|static
name|Boolean
name|ne
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|!=
name|b1
operator|)
return|;
block|}
comment|/** SQL&lt;&gt; operator applied to int values; either side may be null. */
specifier|public
specifier|static
name|Boolean
name|ne
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|intValue
argument_list|()
operator|!=
name|b1
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&lt;&gt; operator applied to Object values (including String; either      * side may be null). */
specifier|public
specifier|static
name|Boolean
name|ne
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|!
name|b0
operator|.
name|equals
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|//<
comment|/** SQL&lt; operator applied to int values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|<
name|b1
return|;
block|}
comment|/** SQL&lt; operator applied to int values; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|lt
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|<
name|b1
operator|)
return|;
block|}
comment|/** SQL&lt; operator applied to int values (right side may be null). */
specifier|public
specifier|static
name|Boolean
name|lt
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|<
name|b1
operator|)
return|;
block|}
comment|/** SQL&lt; operator applied to nullable int values. */
specifier|public
specifier|static
name|Boolean
name|lt
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|<
name|b1
operator|)
return|;
block|}
comment|/** SQL&lt; operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Boolean
name|lt
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|<
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&lt; operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Boolean
name|lt
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|<
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&lt; operator applied to String values. */
specifier|public
specifier|static
name|Boolean
name|lt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
comment|//<=
comment|/** SQL&le; operator applied to int values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|<=
name|b1
return|;
block|}
comment|/** SQL&le; operator applied to int values; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|le
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|<=
name|b1
operator|)
return|;
block|}
comment|/** SQL&le; operator applied to int values (right side may be null). */
specifier|public
specifier|static
name|Boolean
name|le
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|<=
name|b1
operator|)
return|;
block|}
comment|/** SQL&le; operator applied to nullable int values. */
specifier|public
specifier|static
name|Boolean
name|le
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|<=
name|b1
operator|)
return|;
block|}
comment|/** SQL&le; operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Boolean
name|le
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|<=
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&le; operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Boolean
name|le
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|<=
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&le; operator applied to String values. */
specifier|public
specifier|static
name|Boolean
name|le
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
comment|//>
comment|/** SQL&gt; operator applied to long values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
return|;
block|}
comment|/** SQL&gt; operator applied to int values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
return|;
block|}
comment|/** SQL&gt; operator applied to int values; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|gt
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|>
name|b1
operator|)
return|;
block|}
comment|/** SQL&gt; operator applied to int values (right side may be null). */
specifier|public
specifier|static
name|Boolean
name|gt
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|>
name|b1
operator|)
return|;
block|}
comment|/** SQL&gt; operator applied to nullable int values. */
specifier|public
specifier|static
name|Boolean
name|gt
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|>
name|b1
operator|)
return|;
block|}
comment|/** SQL&gt; operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Boolean
name|gt
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|>
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&gt; operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Boolean
name|gt
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|>
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&gt; operator applied to String values. */
specifier|public
specifier|static
name|Boolean
name|gt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
comment|//>=
comment|/** SQL&ge; operator applied to int values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>=
name|b1
return|;
block|}
comment|/** SQL&ge; operator applied to int values; left side may be null. */
specifier|public
specifier|static
name|Boolean
name|ge
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|>=
name|b1
operator|)
return|;
block|}
comment|/** SQL&ge; operator applied to int values; right side may be null. */
specifier|public
specifier|static
name|Boolean
name|ge
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|>=
name|b1
operator|)
return|;
block|}
comment|/** SQL&ge; operator applied to nullable int values. */
specifier|public
specifier|static
name|Boolean
name|ge
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|>=
name|b1
operator|)
return|;
block|}
comment|/** SQL&ge; operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Boolean
name|ge
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|>=
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&ge; operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Boolean
name|ge
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|>=
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL&ge; operator applied to String values. */
specifier|public
specifier|static
name|Boolean
name|ge
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
comment|// +
comment|/** SQL<code>+</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|plus
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|+
name|b1
return|;
block|}
comment|/** SQL<code>+</code> operator applied to int values; left side may be      * null. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to int values; right side may be      * null. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|plus
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|+
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|+
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|plus
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|add
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// -
comment|/** SQL<code>-</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|minus
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|-
name|b1
return|;
block|}
comment|/** SQL<code>-</code> operator applied to int values; left side may be      * null. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to int values; right side may be      * null. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|minus
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|-
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|-
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|minus
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|subtract
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// /
comment|/** SQL<code>/</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|/
name|b1
return|;
block|}
comment|/** SQL<code>/</code> operator applied to int values; left side may be      * null. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to int values; right side may be      * null. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|divide
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|/
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|/
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|divide
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|divide
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// *
comment|/** SQL<code>*</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|multiply
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|*
name|b1
return|;
block|}
comment|/** SQL<code>*</code> operator applied to int values; left side may be      * null. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to int values; right side may be      * null. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|multiply
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|*
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|*
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|multiply
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|multiply
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// Helpers
comment|/** Helper for implementing MIN. Somewhat similar to LEAST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|lesser
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|int
name|lesser
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** Helper for implementing MAX. Somewhat similar to GREATEST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|greater
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlFunctions.java
end_comment

end_unit

