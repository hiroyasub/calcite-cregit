begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|MathContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Helper methods to implement SQL functions in generated code.  *  *<p>Not present: and, or, not (builtin operators are better, because they  * use lazy evaluation. Implementations do not check for null values; the  * calling code must do that.</p>  *  * @author jhyde  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnnecessaryUnboxing"
argument_list|)
specifier|public
class|class
name|SqlFunctions
block|{
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|DOUBLE_FORMAT
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0E0"
argument_list|)
decl_stmt|;
comment|/** SQL SUBSTRING(string FROM ... FOR ...) function. */
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|for_
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
name|from
operator|-
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|from
operator|-
literal|1
operator|+
name|for_
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL SUBSTRING(string FROM ...) function. */
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|from
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
name|from
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** SQL UPPER(string) function. */
specifier|public
specifier|static
name|String
name|upper
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
comment|/** SQL LOWER(string) function. */
specifier|public
specifier|static
name|String
name|lower
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
comment|/** SQL CHARACTER_LENGTH(string) function. */
specifier|public
specifier|static
name|Integer
name|charLength
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|length
argument_list|()
return|;
block|}
comment|/** SQL {@code string || string} operator. */
specifier|public
specifier|static
name|String
name|concat
parameter_list|(
name|String
name|s0
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
if|if
condition|(
name|s0
operator|==
literal|null
operator|||
name|s1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s0
operator|+
name|s1
return|;
block|}
comment|/** SQL {@code RTRIM} function. */
specifier|public
specifier|static
name|String
name|rtrim
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** SQL {@code LTRIM} function. */
specifier|public
specifier|static
name|String
name|ltrim
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM} function. */
specifier|public
specifier|static
name|String
name|trim
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM} function. */
specifier|private
specifier|static
name|String
name|trim_
parameter_list|(
name|String
name|s
parameter_list|,
name|boolean
name|left
parameter_list|,
name|boolean
name|right
parameter_list|)
block|{
name|int
name|j
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|!=
literal|' '
condition|)
block|{
break|break;
block|}
operator|--
name|j
expr_stmt|;
block|}
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|left
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|' '
condition|)
block|{
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function. */
specifier|public
specifier|static
name|String
name|overlay
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|r
parameter_list|,
name|int
name|start
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|r
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|+
name|r
operator|+
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|r
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function. */
specifier|public
specifier|static
name|String
name|overlay
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|r
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|r
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|+
name|r
operator|+
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|length
argument_list|)
return|;
block|}
comment|// =
comment|/** SQL = operator applied to Object values (including String; neither      * side may be null). */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|equals
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL = operator applied to BigDecimal values (neither may be null). */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|stripTrailingZeros
argument_list|()
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|stripTrailingZeros
argument_list|()
argument_list|)
return|;
block|}
comment|//<>
comment|/** SQL&lt;&gt; operator applied to Object values (including String;      * neither side may be null). */
specifier|public
specifier|static
name|boolean
name|ne
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
operator|!
name|b0
operator|.
name|equals
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|//<
comment|/** SQL&lt; operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL&lt; operator applied to String values. */
specifier|public
specifier|static
name|Boolean
name|lt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
comment|/** SQL&lt; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|Boolean
name|lt
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
comment|//<=
comment|/** SQL&le; operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL&le; operator applied to String values. */
specifier|public
specifier|static
name|Boolean
name|le
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
comment|/** SQL&le; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|Boolean
name|le
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
comment|//>
comment|/** SQL&gt; operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL&gt; operator applied to String values. */
specifier|public
specifier|static
name|Boolean
name|gt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
comment|/** SQL&gt; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|Boolean
name|gt
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
comment|//>=
comment|/** SQL&ge; operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL&ge; operator applied to String values. */
specifier|public
specifier|static
name|Boolean
name|ge
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
comment|/** SQL&ge; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|Boolean
name|ge
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
comment|// +
comment|/** SQL<code>+</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|plus
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|+
name|b1
return|;
block|}
comment|/** SQL<code>+</code> operator applied to int values; left side may be      * null. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to int values; right side may be      * null. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|plus
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|+
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|+
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|plus
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|add
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// -
comment|/** SQL<code>-</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|minus
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|-
name|b1
return|;
block|}
comment|/** SQL<code>-</code> operator applied to int values; left side may be      * null. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to int values; right side may be      * null. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|minus
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|-
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|-
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|minus
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|subtract
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// /
comment|/** SQL<code>/</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|/
name|b1
return|;
block|}
comment|/** SQL<code>/</code> operator applied to int values; left side may be      * null. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to int values; right side may be      * null. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|divide
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|/
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|/
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|divide
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|divide
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// *
comment|/** SQL<code>*</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|multiply
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|*
name|b1
return|;
block|}
comment|/** SQL<code>*</code> operator applied to int values; left side may be      * null. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to int values; right side may be      * null. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|multiply
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|*
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|*
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|multiply
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|multiply
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// POWER
comment|/** SQL<code>POWER</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|double
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL {@code LN(number)} function applied to double values. */
specifier|public
specifier|static
name|double
name|ln
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/** SQL {@code LN(number)} function applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|ln
parameter_list|(
name|BigDecimal
name|d
parameter_list|)
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|d
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// MOD
comment|/** SQL<code>MOD</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|mod
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|%
name|b1
return|;
block|}
comment|/** SQL<code>MOD</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|mod
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|%
name|b1
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|BigDecimal
name|mod
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|mod
argument_list|(
name|b0
argument_list|,
operator|new
name|BigDecimal
argument_list|(
name|b1
argument_list|)
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|int
name|mod
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|mod
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|mod
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
specifier|final
name|BigDecimal
index|[]
name|bigDecimals
init|=
name|b0
operator|.
name|divideAndRemainder
argument_list|(
name|b1
argument_list|)
decl_stmt|;
return|return
name|bigDecimals
index|[
literal|1
index|]
return|;
block|}
comment|// Helpers
comment|/** Helper for implementing MIN. Somewhat similar to LEAST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|lesser
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** LEAST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|least
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b1
operator|!=
literal|null
operator|&&
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|int
name|lesser
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** Helper for implementing MAX. Somewhat similar to GREATEST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|greater
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** GREATEST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|greatest
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b1
operator|!=
literal|null
operator|&&
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** Boolean comparison. */
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|boolean
name|x
parameter_list|,
name|boolean
name|y
parameter_list|)
block|{
return|return
name|x
operator|==
name|y
condition|?
literal|0
else|:
name|x
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
comment|/** CAST(FLOAT AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|float
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
return|return
literal|"0E0"
return|;
block|}
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|x
argument_list|,
name|MathContext
operator|.
name|DECIMAL32
argument_list|)
operator|.
name|stripTrailingZeros
argument_list|()
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|bigDecimal
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|s
operator|.
name|replaceAll
argument_list|(
literal|"0*E"
argument_list|,
literal|"E"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"E+"
argument_list|,
literal|"E"
argument_list|)
return|;
block|}
comment|/** CAST(DOUBLE AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|double
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
return|return
literal|"0E0"
return|;
block|}
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|x
argument_list|,
name|MathContext
operator|.
name|DECIMAL64
argument_list|)
operator|.
name|stripTrailingZeros
argument_list|()
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|bigDecimal
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|s
operator|.
name|replaceAll
argument_list|(
literal|"0*E"
argument_list|,
literal|"E"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"E+"
argument_list|,
literal|"E"
argument_list|)
return|;
block|}
comment|/** CAST(DECIMAL AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|BigDecimal
name|x
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|x
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
comment|// we want ".1" not "0.1"
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"-0"
argument_list|)
condition|)
block|{
comment|// we want "-.1" not "-0.1"
return|return
literal|"-"
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
comment|/** CAST(BOOLEAN AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|boolean
name|x
parameter_list|)
block|{
comment|// Boolean.toString returns lower case -- no good.
return|return
name|x
condition|?
literal|"TRUE"
else|:
literal|"FALSE"
return|;
block|}
comment|/** Helper for CAST(... AS VARCHAR(maxLength)). */
specifier|public
specifier|static
name|String
name|truncate
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
return|return
name|s
operator|.
name|length
argument_list|()
operator|>
name|maxLength
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
else|:
name|s
return|;
block|}
comment|/** Cheap, unsafe, long power. power(2, 3) returns 8. */
specifier|public
specifier|static
name|long
name|power
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|long
name|x
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|b
operator|>
literal|0
condition|)
block|{
name|x
operator|*=
name|a
expr_stmt|;
operator|--
name|b
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|long
name|round
parameter_list|(
name|long
name|v
parameter_list|,
name|long
name|x
parameter_list|)
block|{
return|return
name|truncate
argument_list|(
name|v
operator|+
name|x
operator|/
literal|2
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|long
name|truncate
parameter_list|(
name|long
name|v
parameter_list|,
name|long
name|x
parameter_list|)
block|{
name|long
name|remainder
init|=
name|v
operator|%
name|x
decl_stmt|;
if|if
condition|(
name|remainder
operator|<
literal|0
condition|)
block|{
name|remainder
operator|+=
name|x
expr_stmt|;
block|}
return|return
name|v
operator|-
name|remainder
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|int
name|round
parameter_list|(
name|int
name|v
parameter_list|,
name|int
name|x
parameter_list|)
block|{
return|return
name|truncate
argument_list|(
name|v
operator|+
name|x
operator|/
literal|2
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|int
name|truncate
parameter_list|(
name|int
name|v
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|int
name|remainder
init|=
name|v
operator|%
name|x
decl_stmt|;
if|if
condition|(
name|remainder
operator|<
literal|0
condition|)
block|{
name|remainder
operator|+=
name|x
expr_stmt|;
block|}
return|return
name|v
operator|-
name|remainder
return|;
block|}
comment|/** Helper for CAST({timestamp} AS VARCHAR(n)). */
specifier|public
specifier|static
name|String
name|unixTimestampToString
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|17
argument_list|)
decl_stmt|;
name|unixDateToString
argument_list|(
name|buf
argument_list|,
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|/
literal|86400000
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|unixTimeToString
argument_list|(
name|buf
argument_list|,
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|%
literal|86400000
operator|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Helper for CAST({timestamp} AS VARCHAR(n)). */
specifier|public
specifier|static
name|String
name|unixTimeToString
parameter_list|(
name|int
name|time
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|unixTimeToString
argument_list|(
name|buf
argument_list|,
name|time
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|unixTimeToString
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|int
name|time
parameter_list|)
block|{
name|int
name|h
init|=
name|time
operator|/
literal|3600000
decl_stmt|;
name|int
name|time2
init|=
name|time
operator|%
literal|3600000
decl_stmt|;
name|int
name|m
init|=
name|time2
operator|/
literal|60000
decl_stmt|;
name|int
name|time3
init|=
name|time2
operator|%
literal|60000
decl_stmt|;
name|int
name|s
init|=
name|time3
operator|/
literal|1000
decl_stmt|;
name|int
name|ms
init|=
name|time3
operator|%
literal|1000
decl_stmt|;
name|int2
argument_list|(
name|buf
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|int2
argument_list|(
name|buf
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|int2
argument_list|(
name|buf
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|int2
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'0'
operator|+
operator|(
name|i
operator|/
literal|10
operator|)
operator|%
literal|10
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'0'
operator|+
name|i
operator|%
literal|10
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|int4
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'0'
operator|+
operator|(
name|i
operator|/
literal|1000
operator|)
operator|%
literal|10
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'0'
operator|+
operator|(
name|i
operator|/
literal|100
operator|)
operator|%
literal|10
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'0'
operator|+
operator|(
name|i
operator|/
literal|10
operator|)
operator|%
literal|10
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'0'
operator|+
name|i
operator|%
literal|10
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** Helper for CAST({date} AS VARCHAR(n)). */
specifier|public
specifier|static
name|String
name|unixDateToString
parameter_list|(
name|int
name|date
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|unixDateToString
argument_list|(
name|buf
argument_list|,
name|date
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|unixDateToString
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|int
name|date
parameter_list|)
block|{
name|julianToString
argument_list|(
name|buf
argument_list|,
name|date
operator|+
literal|2440588
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|julianToString
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|int
name|J
parameter_list|)
block|{
comment|// this shifts the epoch back to astronomical year -4800 instead of the
comment|// start of the Christian era in year AD 1 of the proleptic Gregorian
comment|// calendar.
name|int
name|j
init|=
name|J
operator|+
literal|32044
decl_stmt|;
name|int
name|g
init|=
name|j
operator|/
literal|146097
decl_stmt|;
name|int
name|dg
init|=
name|j
operator|%
literal|146097
decl_stmt|;
name|int
name|c
init|=
operator|(
name|dg
operator|/
literal|36524
operator|+
literal|1
operator|)
operator|*
literal|3
operator|/
literal|4
decl_stmt|;
name|int
name|dc
init|=
name|dg
operator|-
name|c
operator|*
literal|36524
decl_stmt|;
name|int
name|b
init|=
name|dc
operator|/
literal|1461
decl_stmt|;
name|int
name|db
init|=
name|dc
operator|%
literal|1461
decl_stmt|;
name|int
name|a
init|=
operator|(
name|db
operator|/
literal|365
operator|+
literal|1
operator|)
operator|*
literal|3
operator|/
literal|4
decl_stmt|;
name|int
name|da
init|=
name|db
operator|-
name|a
operator|*
literal|365
decl_stmt|;
comment|// integer number of full years elapsed since March 1, 4801 BC
name|int
name|y
init|=
name|g
operator|*
literal|400
operator|+
name|c
operator|*
literal|100
operator|+
name|b
operator|*
literal|4
operator|+
name|a
decl_stmt|;
comment|// integer number of full months elapsed since the last March 1
name|int
name|m
init|=
operator|(
name|da
operator|*
literal|5
operator|+
literal|308
operator|)
operator|/
literal|153
operator|-
literal|2
decl_stmt|;
comment|// number of days elapsed since day 1 of the month
name|int
name|d
init|=
name|da
operator|-
operator|(
name|m
operator|+
literal|4
operator|)
operator|*
literal|153
operator|/
literal|5
operator|+
literal|122
decl_stmt|;
name|int
name|Y
init|=
name|y
operator|-
literal|4800
operator|+
operator|(
name|m
operator|+
literal|2
operator|)
operator|/
literal|12
decl_stmt|;
name|int
name|M
init|=
operator|(
name|m
operator|+
literal|2
operator|)
operator|%
literal|12
operator|+
literal|1
decl_stmt|;
name|int
name|D
init|=
name|d
operator|+
literal|1
decl_stmt|;
name|int4
argument_list|(
name|buf
argument_list|,
name|Y
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|int2
argument_list|(
name|buf
argument_list|,
name|M
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|int2
argument_list|(
name|buf
argument_list|,
name|D
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|ymdToUnixDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
return|return
name|ymdToJulian
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
operator|-
literal|2440588
operator|-
literal|13
return|;
block|}
specifier|public
specifier|static
name|int
name|ymdToJulian
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
name|int
name|a
init|=
operator|(
literal|14
operator|-
name|month
operator|)
operator|/
literal|12
decl_stmt|;
name|int
name|y
init|=
name|year
operator|+
literal|4800
operator|-
name|a
decl_stmt|;
name|int
name|m
init|=
name|month
operator|+
literal|12
operator|*
name|a
operator|-
literal|3
decl_stmt|;
return|return
name|day
operator|+
operator|(
literal|153
operator|*
name|m
operator|+
literal|2
operator|)
operator|/
literal|5
operator|+
literal|365
operator|*
name|y
operator|+
name|y
operator|/
literal|4
operator|-
literal|32083
return|;
block|}
comment|/** Helper for "array element reference". Caller has already ensured that      * array and index are not null. Index is 1-based, per SQL. */
specifier|public
specifier|static
name|Object
name|arrayItem
parameter_list|(
name|List
name|list
parameter_list|,
name|int
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|<
literal|1
operator|||
name|item
operator|>
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|item
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** Helper for "map element reference". Caller has already ensured that      * array and index are not null. Index is 1-based, per SQL. */
specifier|public
specifier|static
name|Object
name|mapItem
parameter_list|(
name|Map
name|map
parameter_list|,
name|Object
name|item
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|item
argument_list|)
return|;
block|}
comment|/** Implements the {@code [ ... ]} operator on an object whose type is not      * known until runtime.      */
specifier|public
specifier|static
name|Object
name|item
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|index
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
operator|(
name|Map
operator|)
name|object
operator|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|List
operator|&&
name|index
operator|instanceof
name|Number
condition|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|object
decl_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|index
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
name|asList
parameter_list|(
name|Object
index|[]
name|os
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|os
argument_list|)
return|;
block|}
comment|/** NULL -> FALSE, FALSE -> FALSE, TRUE -> TRUE. */
specifier|public
specifier|static
name|boolean
name|isTrue
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|!=
literal|null
operator|&&
name|b
return|;
block|}
comment|/** NULL -> TRUE, FALSE -> FALSE, TRUE -> TRUE. */
specifier|public
specifier|static
name|boolean
name|isNotFalse
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
operator|||
name|b
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlFunctions.java
end_comment

end_unit

