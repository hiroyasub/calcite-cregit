begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Comparator that uses the natural ordering of [@link Comparable} values.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ComparableComparator
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|ComparableComparator
name|INSTANCE
init|=
operator|new
name|ComparableComparator
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|>
name|ComparableComparator
argument_list|<
name|T
argument_list|>
name|instance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End ComparableComparator.java
end_comment

end_unit

