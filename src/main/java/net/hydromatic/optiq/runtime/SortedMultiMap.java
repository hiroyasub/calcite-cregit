begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Map that allows you to partition values into lists according to a common  * key, and then convert those lists into an iterator of sorted arrays.  */
end_comment

begin_class
specifier|public
class|class
name|SortedMultiMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|HashMap
argument_list|<
name|K
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
specifier|public
name|void
name|putMulti
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|V
argument_list|>
name|list
init|=
name|put
argument_list|(
name|key
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|V
index|[]
argument_list|>
name|arrays
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|V
argument_list|>
name|comparator
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|V
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|V
index|[]
name|next
parameter_list|()
block|{
name|List
argument_list|<
name|V
argument_list|>
name|list
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|V
index|[]
name|vs
init|=
operator|(
name|V
index|[]
operator|)
name|list
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|vs
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
name|vs
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End SortedMultiMap.java
end_comment

end_unit

