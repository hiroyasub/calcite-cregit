begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|BuiltinMethod
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|ExpressionType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Contains implementations of Rex operators as Java code.  */
end_comment

begin_class
specifier|public
class|class
name|RexImpTable
block|{
specifier|public
specifier|static
specifier|final
name|ConstantExpression
name|NULL_EXPR
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ConstantExpression
name|FALSE_EXPR
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ConstantExpression
name|TRUE_EXPR
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MemberExpression
name|BOXED_FALSE_EXPR
init|=
name|Expressions
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|"FALSE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MemberExpression
name|BOXED_TRUE_EXPR
init|=
name|Expressions
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|"TRUE"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|CallImplementor
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|SqlOperator
argument_list|,
name|CallImplementor
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Aggregation
argument_list|,
name|AggregateImplementor
argument_list|>
name|aggMap
init|=
operator|new
name|HashMap
argument_list|<
name|Aggregation
argument_list|,
name|AggregateImplementor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Aggregation
argument_list|,
name|AggImplementor2
argument_list|>
name|agg2Map
init|=
operator|new
name|HashMap
argument_list|<
name|Aggregation
argument_list|,
name|AggImplementor2
argument_list|>
argument_list|()
decl_stmt|;
name|RexImpTable
parameter_list|()
block|{
name|defineMethod
argument_list|(
name|upperFunc
argument_list|,
name|BuiltinMethod
operator|.
name|UPPER
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|lowerFunc
argument_list|,
name|BuiltinMethod
operator|.
name|LOWER
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|substringFunc
argument_list|,
name|BuiltinMethod
operator|.
name|SUBSTRING
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|characterLengthFunc
argument_list|,
name|BuiltinMethod
operator|.
name|CHAR_LENGTH
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|charLengthFunc
argument_list|,
name|BuiltinMethod
operator|.
name|CHAR_LENGTH
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|concatOperator
argument_list|,
name|BuiltinMethod
operator|.
name|STRING_CONCAT
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|overlayFunc
argument_list|,
name|BuiltinMethod
operator|.
name|OVERLAY
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
comment|// logical
name|defineBinary
argument_list|(
name|andOperator
argument_list|,
name|AndAlso
argument_list|,
name|NullPolicy
operator|.
name|AND
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|orOperator
argument_list|,
name|OrElse
argument_list|,
name|NullPolicy
operator|.
name|OR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|defineUnary
argument_list|(
name|notOperator
argument_list|,
name|Not
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
comment|// comparisons
name|defineBinary
argument_list|(
name|lessThanOperator
argument_list|,
name|LessThan
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"lt"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|lessThanOrEqualOperator
argument_list|,
name|LessThanOrEqual
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"le"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|greaterThanOperator
argument_list|,
name|GreaterThan
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"gt"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|greaterThanOrEqualOperator
argument_list|,
name|GreaterThanOrEqual
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"ge"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|equalsOperator
argument_list|,
name|Equal
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"eq"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|notEqualsOperator
argument_list|,
name|NotEqual
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"ne"
argument_list|)
expr_stmt|;
comment|// arithmetic
name|defineMethod
argument_list|(
name|plusOperator
argument_list|,
literal|"plus"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|minusOperator
argument_list|,
literal|"minus"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|multiplyOperator
argument_list|,
literal|"multiply"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|divideOperator
argument_list|,
literal|"divide"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|modFunc
argument_list|,
literal|"mod"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|expFunc
argument_list|,
literal|"exp"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|powerFunc
argument_list|,
literal|"power"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|lnFunc
argument_list|,
literal|"ln"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|isNullOperator
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|isNotNullOperator
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|isTrueOperator
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|isNotTrueOperator
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|isFalseOperator
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|isNotFalseOperator
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|caseOperator
argument_list|,
operator|new
name|CaseImplementor
argument_list|()
argument_list|)
expr_stmt|;
name|defineImplementor
argument_list|(
name|SqlStdOperatorTable
operator|.
name|castFunc
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
operator|new
name|CastImplementor
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|CallImplementor
name|value
init|=
operator|new
name|ValueConstructorImplementor
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SqlStdOperatorTable
operator|.
name|mapValueConstructor
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SqlStdOperatorTable
operator|.
name|arrayValueConstructor
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SqlStdOperatorTable
operator|.
name|itemOp
argument_list|,
operator|new
name|ItemImplementor
argument_list|()
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|countOperator
argument_list|,
operator|new
name|BuiltinAggregateImplementor
argument_list|(
literal|"longCount"
argument_list|)
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|sumOperator
argument_list|,
operator|new
name|BuiltinAggregateImplementor
argument_list|(
literal|"sum"
argument_list|)
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|minOperator
argument_list|,
operator|new
name|BuiltinAggregateImplementor
argument_list|(
literal|"min"
argument_list|)
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|maxOperator
argument_list|,
operator|new
name|BuiltinAggregateImplementor
argument_list|(
literal|"max"
argument_list|)
argument_list|)
expr_stmt|;
name|agg2Map
operator|.
name|put
argument_list|(
name|countOperator
argument_list|,
operator|new
name|CountImplementor2
argument_list|()
argument_list|)
expr_stmt|;
name|agg2Map
operator|.
name|put
argument_list|(
name|sumOperator
argument_list|,
operator|new
name|SumImplementor2
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MinMaxImplementor2
name|minMax
init|=
operator|new
name|MinMaxImplementor2
argument_list|()
decl_stmt|;
name|agg2Map
operator|.
name|put
argument_list|(
name|minOperator
argument_list|,
name|minMax
argument_list|)
expr_stmt|;
name|agg2Map
operator|.
name|put
argument_list|(
name|maxOperator
argument_list|,
name|minMax
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineImplementor
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|,
name|NotNullImplementor
name|implementor
parameter_list|,
name|boolean
name|harmonize
parameter_list|)
block|{
name|CallImplementor
name|callImplementor
init|=
name|createImplementor
argument_list|(
name|implementor
argument_list|,
name|nullPolicy
argument_list|,
name|harmonize
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|operator
argument_list|,
name|callImplementor
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RexCall
name|call2
parameter_list|(
name|boolean
name|harmonize
parameter_list|,
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
operator|!
name|harmonize
condition|)
block|{
return|return
name|call
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands2
init|=
name|harmonize
argument_list|(
name|translator
argument_list|,
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|operands2
operator|.
name|equals
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|operands2
argument_list|)
return|;
block|}
specifier|private
name|CallImplementor
name|createImplementor
parameter_list|(
specifier|final
name|NotNullImplementor
name|implementor
parameter_list|,
specifier|final
name|NullPolicy
name|nullPolicy
parameter_list|,
specifier|final
name|boolean
name|harmonize
parameter_list|)
block|{
switch|switch
condition|(
name|nullPolicy
condition|)
block|{
case|case
name|ANY
case|:
case|case
name|STRICT
case|:
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|IS_NOT_NULL
case|:
comment|// If "f" is strict, then "f(a0, a1) IS NOT NULL" is
comment|// equivalent to "a0 IS NOT NULL AND a1 IS NOT NULL".
if|if
condition|(
name|nullPolicy
operator|==
name|NullPolicy
operator|.
name|STRICT
condition|)
block|{
return|return
name|JavaRules
operator|.
name|EnumUtil
operator|.
name|foldAnd
argument_list|(
name|translator
operator|.
name|translateList
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|,
name|nullAs
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|IS_NULL
case|:
comment|// If "f" is strict, then "f(a0, a1) IS NULL" is
comment|// equivalent to "a0 IS NULL OR a1 IS NULL".
if|if
condition|(
name|nullPolicy
operator|==
name|NullPolicy
operator|.
name|STRICT
condition|)
block|{
return|return
name|JavaRules
operator|.
name|EnumUtil
operator|.
name|foldOr
argument_list|(
name|translator
operator|.
name|translateList
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|,
name|nullAs
argument_list|)
argument_list|)
return|;
block|}
break|break;
block|}
specifier|final
name|RexCall
name|call2
init|=
name|call2
argument_list|(
name|harmonize
argument_list|,
name|translator
argument_list|,
name|call
argument_list|)
decl_stmt|;
return|return
name|implementNullSemantics
argument_list|(
name|translator
argument_list|,
name|call2
argument_list|,
name|nullAs
argument_list|,
name|implementor
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|AND
case|:
comment|/* TODO:             if (nullAs == NullAs.FALSE) {                 nullPolicy2 = NullPolicy.ANY;             } */
comment|// If any of the arguments are false, result is false;
comment|// else if any arguments are null, result is null;
comment|// else true.
comment|//
comment|// b0 == null ? (b1 == null || b1 ? null : Boolean.FALSE)
comment|//   : b0 ? b1
comment|//   : Boolean.FALSE;
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|RexCall
name|call2
init|=
name|call2
argument_list|(
literal|false
argument_list|,
name|translator
argument_list|,
name|call
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
name|translator
operator|.
name|translateList
argument_list|(
name|call2
operator|.
name|getOperandList
argument_list|()
argument_list|,
name|nullAs
argument_list|)
decl_stmt|;
return|return
name|JavaRules
operator|.
name|EnumUtil
operator|.
name|foldAnd
argument_list|(
name|expressions
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|OR
case|:
comment|// If any of the arguments are true, result is true;
comment|// else if any arguments are null, result is null;
comment|// else false.
comment|//
comment|// b0 == null ? (b1 == null || !b1 ? null : Boolean.TRUE)
comment|//   : !b0 ? b1
comment|//   : Boolean.TRUE;
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|RexCall
name|call2
init|=
name|call2
argument_list|(
name|harmonize
argument_list|,
name|translator
argument_list|,
name|call
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|t0
init|=
name|translator
operator|.
name|translate
argument_list|(
name|call2
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|t1
init|=
name|translator
operator|.
name|translate
argument_list|(
name|call2
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nullable
argument_list|(
name|call2
argument_list|,
literal|0
argument_list|)
operator|&&
operator|!
name|nullable
argument_list|(
name|call2
argument_list|,
literal|1
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|orElse
argument_list|(
name|t0
argument_list|,
name|t1
argument_list|)
return|;
block|}
return|return
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|t0
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|t1
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|not
argument_list|(
name|t1
argument_list|)
argument_list|)
argument_list|,
name|NULL_EXPR
argument_list|,
name|BOXED_TRUE_EXPR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|t0
argument_list|)
argument_list|,
name|t1
argument_list|,
name|BOXED_TRUE_EXPR
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|NONE
case|:
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|RexCall
name|call2
init|=
name|call2
argument_list|(
literal|false
argument_list|,
name|translator
argument_list|,
name|call
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|translator
argument_list|,
name|call2
argument_list|)
return|;
block|}
block|}
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|nullPolicy
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|defineMethod
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|String
name|functionName
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|)
block|{
name|defineImplementor
argument_list|(
name|operator
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|MethodNameImplementor
argument_list|(
name|functionName
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineMethod
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|Method
name|method
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|)
block|{
name|defineImplementor
argument_list|(
name|operator
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|MethodImplementor
argument_list|(
name|method
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineUnary
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|ExpressionType
name|expressionType
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|)
block|{
name|defineImplementor
argument_list|(
name|operator
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|UnaryImplementor
argument_list|(
name|expressionType
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineBinary
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|ExpressionType
name|expressionType
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|,
name|String
name|backupMethodName
parameter_list|)
block|{
name|defineImplementor
argument_list|(
name|operator
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|BinaryImplementor
argument_list|(
name|expressionType
argument_list|,
name|backupMethodName
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|RexImpTable
name|INSTANCE
init|=
operator|new
name|RexImpTable
argument_list|()
decl_stmt|;
specifier|public
name|CallImplementor
name|get
parameter_list|(
specifier|final
name|SqlOperator
name|operator
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|operator
argument_list|)
return|;
block|}
specifier|public
name|AggregateImplementor
name|get
parameter_list|(
specifier|final
name|Aggregation
name|aggregation
parameter_list|)
block|{
return|return
name|aggMap
operator|.
name|get
argument_list|(
name|aggregation
argument_list|)
return|;
block|}
specifier|public
name|AggImplementor2
name|get2
parameter_list|(
specifier|final
name|Aggregation
name|aggregation
parameter_list|)
block|{
return|return
name|agg2Map
operator|.
name|get
argument_list|(
name|aggregation
argument_list|)
return|;
block|}
specifier|static
name|Expression
name|maybeNegate
parameter_list|(
name|boolean
name|negate
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
operator|!
name|negate
condition|)
block|{
return|return
name|expression
return|;
block|}
else|else
block|{
return|return
name|Expressions
operator|.
name|not
argument_list|(
name|expression
argument_list|)
return|;
block|}
block|}
specifier|static
name|Expression
name|optimize
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|expression
operator|.
name|accept
argument_list|(
operator|new
name|OptimizeVisitor
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|Expression
name|optimize2
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|,
name|NULL_EXPR
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|nullable
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|call
operator|.
name|getOperands
argument_list|()
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
return|;
block|}
comment|/** Ensures that operands have identical type. */
specifier|private
specifier|static
name|List
argument_list|<
name|RexNode
argument_list|>
name|harmonize
parameter_list|(
specifier|final
name|RexToLixTranslator
name|translator
parameter_list|,
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
name|int
name|nullCount
init|=
literal|0
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|translator
operator|.
name|builder
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|RelDataType
name|type
init|=
name|operand
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|translator
operator|.
name|isNullable
argument_list|(
name|operand
argument_list|)
condition|)
block|{
operator|++
name|nullCount
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allSame
argument_list|(
name|types
argument_list|)
condition|)
block|{
comment|// Operands have the same nullability and type. Return them
comment|// unchanged.
return|return
name|operands
return|;
block|}
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|leastRestrictive
argument_list|(
name|types
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|nullCount
operator|>
literal|0
operator|)
operator|==
name|type
operator|.
name|isNullable
argument_list|()
assert|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translator
operator|.
name|builder
operator|.
name|ensureType
argument_list|(
name|type
argument_list|,
name|operand
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|boolean
name|allSame
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
name|E
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|list
control|)
block|{
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
operator|!
name|prev
operator|.
name|equals
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|prev
operator|=
name|e
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|Expression
name|implementNullSemantics
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|,
name|NotNullImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|NULL
case|:
comment|// v0 == null || v1 == null ? null : f(v0, v1)
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|operand
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|translator
operator|.
name|isNullable
argument_list|(
name|operand
operator|.
name|e
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
name|operand
operator|.
name|e
argument_list|,
name|NullAs
operator|.
name|IS_NULL
argument_list|)
argument_list|)
expr_stmt|;
name|translator
operator|=
name|translator
operator|.
name|setNullable
argument_list|(
name|operand
operator|.
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|JavaRules
operator|.
name|EnumUtil
operator|.
name|foldOr
argument_list|(
name|list
argument_list|)
argument_list|,
name|NULL_EXPR
argument_list|,
name|RexToLixTranslator
operator|.
name|box
argument_list|(
name|implementor
operator|.
name|implement
argument_list|(
name|translator
argument_list|,
name|call
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|FALSE
case|:
comment|// v0 != null&& v1 != null&& f(v0, v1)
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|operand
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|translator
operator|.
name|isNullable
argument_list|(
name|operand
operator|.
name|e
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
name|operand
operator|.
name|e
argument_list|,
name|NullAs
operator|.
name|IS_NOT_NULL
argument_list|)
argument_list|)
expr_stmt|;
name|translator
operator|=
name|translator
operator|.
name|setNullable
argument_list|(
name|operand
operator|.
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|implementor
operator|.
name|implement
argument_list|(
name|translator
argument_list|,
name|call
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|JavaRules
operator|.
name|EnumUtil
operator|.
name|foldAnd
argument_list|(
name|list
argument_list|)
return|;
default|default:
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|translator
argument_list|,
name|call
argument_list|)
return|;
block|}
block|}
comment|/** Implements an aggregate function by generating a call to a method that      * takes an enumeration and an accessor function. */
interface|interface
name|AggregateImplementor
block|{
name|Expression
name|implementAggregate
parameter_list|(
name|Expression
name|grouping
parameter_list|,
name|Expression
name|accessor
parameter_list|)
function_decl|;
block|}
comment|/** Implements an aggregate function by generating expressions to      * initialize, add to, and get a result from, an accumulator. */
interface|interface
name|AggImplementor2
block|{
comment|/** Whether "add" code is called if any of the arguments are null. If          * false, the container will ensure that the "add" arguments are always          * not-null. If true, the container code must handle null values          * appropriately. */
name|boolean
name|callOnNull
parameter_list|()
function_decl|;
name|Expression
name|implementInit
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
function_decl|;
name|Expression
name|implementAdd
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
function_decl|;
name|Expression
name|implementResult
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
function_decl|;
block|}
enum|enum
name|NullAs
block|{
name|NULL
block|,
name|FALSE
block|,
name|TRUE
block|,
name|NOT_POSSIBLE
block|,
comment|/** Return false if result is not null, true if result is null. */
name|IS_NULL
block|,
comment|/** Return true if result is not null, false if result is null. */
name|IS_NOT_NULL
block|;
specifier|public
specifier|static
name|NullAs
name|of
parameter_list|(
name|boolean
name|nullable
parameter_list|)
block|{
return|return
name|nullable
condition|?
name|NULL
else|:
name|NOT_POSSIBLE
return|;
block|}
comment|/** Adapts an expression with "normal" result to one that adheres to          * this particular policy. */
specifier|public
name|Expression
name|handle
parameter_list|(
name|Expression
name|x
parameter_list|)
block|{
if|if
condition|(
name|Primitive
operator|.
name|of
argument_list|(
name|x
operator|.
name|getType
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Expression cannot be null. We can skip any runtime checks.
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|NULL
case|:
case|case
name|NOT_POSSIBLE
case|:
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
return|return
name|x
return|;
case|case
name|IS_NULL
case|:
return|return
name|FALSE_EXPR
return|;
case|case
name|IS_NOT_NULL
case|:
return|return
name|TRUE_EXPR
return|;
block|}
block|}
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|NULL
case|:
case|case
name|NOT_POSSIBLE
case|:
return|return
name|x
return|;
case|case
name|FALSE
case|:
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|IS_TRUE
operator|.
name|method
argument_list|,
name|x
argument_list|)
return|;
case|case
name|TRUE
case|:
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|IS_NOT_FALSE
operator|.
name|method
argument_list|,
name|x
argument_list|)
return|;
case|case
name|IS_NULL
case|:
return|return
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|NULL_EXPR
argument_list|)
return|;
case|case
name|IS_NOT_NULL
case|:
return|return
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|NULL_EXPR
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
interface|interface
name|CallImplementor
block|{
comment|/** Implements a call. */
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
function_decl|;
block|}
specifier|static
specifier|abstract
class|class
name|AbstractCallImplementor
implements|implements
name|CallImplementor
block|{
comment|/** Implements a call with "normal" {@link NullAs} semantics. */
specifier|abstract
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
function_decl|;
specifier|public
specifier|final
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
comment|// Convert "normal" NullAs semantics to those asked for.
return|return
name|nullAs
operator|.
name|handle
argument_list|(
name|implement
argument_list|(
name|translator
argument_list|,
name|call
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Simplified version of {@link CallImplementor} that does not know about      * null semantics. */
interface|interface
name|NotNullImplementor
block|{
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
function_decl|;
block|}
specifier|static
class|class
name|BuiltinAggregateImplementor
implements|implements
name|AggregateImplementor
block|{
specifier|private
specifier|final
name|String
name|methodName
decl_stmt|;
specifier|public
name|BuiltinAggregateImplementor
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
specifier|public
name|Expression
name|implementAggregate
parameter_list|(
name|Expression
name|grouping
parameter_list|,
name|Expression
name|accessor
parameter_list|)
block|{
return|return
name|accessor
operator|==
literal|null
condition|?
name|Expressions
operator|.
name|call
argument_list|(
name|grouping
argument_list|,
name|methodName
argument_list|)
else|:
name|Expressions
operator|.
name|call
argument_list|(
name|grouping
argument_list|,
name|methodName
argument_list|,
name|accessor
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CountImplementor2
implements|implements
name|AggImplementor2
block|{
specifier|public
name|boolean
name|callOnNull
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
comment|// We don't need to check whether the argument is NULL. callOnNull()
comment|// returned false, so that container has checked for us.
return|return
name|Expressions
operator|.
name|add
argument_list|(
name|accumulator
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|,
name|accumulator
operator|.
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|static
class|class
name|SumImplementor2
implements|implements
name|AggImplementor2
block|{
specifier|public
name|boolean
name|callOnNull
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|==
literal|null
condition|)
block|{
name|primitive
operator|=
name|Primitive
operator|.
name|ofBox
argument_list|(
name|returnType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|primitive
operator|==
literal|null
condition|)
block|{
assert|assert
name|returnType
operator|==
name|BigDecimal
operator|.
name|class
operator|:
literal|"expected primitive or boxed primitive, got "
operator|+
name|returnType
assert|;
name|primitive
operator|=
name|Primitive
operator|.
name|INT
expr_stmt|;
block|}
return|return
name|Expressions
operator|.
name|constant
argument_list|(
name|primitive
operator|.
name|number
argument_list|(
literal|0
argument_list|)
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
assert|assert
name|arguments
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
if|if
condition|(
name|accumulator
operator|.
name|type
operator|==
name|BigDecimal
operator|.
name|class
operator|||
name|accumulator
operator|.
name|type
operator|==
name|BigInteger
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|accumulator
argument_list|,
literal|"add"
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|accumulator
operator|.
name|type
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|accumulator
argument_list|,
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|accumulator
operator|.
name|type
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|static
class|class
name|MinMaxImplementor2
implements|implements
name|AggImplementor2
block|{
specifier|public
name|boolean
name|callOnNull
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
condition|)
block|{
comment|// allow nulls even if input does not
name|returnType
operator|=
name|primitive
operator|.
name|boxClass
expr_stmt|;
block|}
return|return
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|returnType
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
comment|// Need to check for null accumulator (e.g. first call to "add"
comment|// after "init") but because callWithNull() returned false, the
comment|// container has ensured that argument is not null.
comment|//
comment|// acc = acc == null
comment|//   ? arg
comment|//   : lesser(acc, arg)
assert|assert
name|arguments
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|Expression
name|arg
init|=
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|accumulator
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|,
name|arg
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|aggregation
operator|==
name|minOperator
condition|?
literal|"lesser"
else|:
literal|"greater"
argument_list|,
name|RexToLixTranslator
operator|.
name|unbox
argument_list|(
name|accumulator
argument_list|)
argument_list|,
name|arg
argument_list|)
argument_list|,
name|arg
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MethodImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
name|MethodImplementor
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|method
argument_list|,
name|translator
operator|.
name|translateList
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MethodNameImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|private
specifier|final
name|String
name|methodName
decl_stmt|;
name|MethodNameImplementor
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|methodName
argument_list|,
name|translator
operator|.
name|translateList
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BinaryImplementor
implements|implements
name|NotNullImplementor
block|{
comment|/** Types that can be arguments to comparison operators such as          * {@code<}. */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Primitive
argument_list|>
name|COMP_OP_TYPES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Primitive
operator|.
name|BYTE
argument_list|,
name|Primitive
operator|.
name|CHAR
argument_list|,
name|Primitive
operator|.
name|SHORT
argument_list|,
name|Primitive
operator|.
name|INT
argument_list|,
name|Primitive
operator|.
name|LONG
argument_list|,
name|Primitive
operator|.
name|FLOAT
argument_list|,
name|Primitive
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExpressionType
name|expressionType
decl_stmt|;
specifier|private
specifier|final
name|String
name|backupMethodName
decl_stmt|;
name|BinaryImplementor
parameter_list|(
name|ExpressionType
name|expressionType
parameter_list|,
name|String
name|backupMethodName
parameter_list|)
block|{
name|this
operator|.
name|expressionType
operator|=
name|expressionType
expr_stmt|;
name|this
operator|.
name|backupMethodName
operator|=
name|backupMethodName
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
comment|// neither nullable:
comment|//   return x OP y
comment|// x nullable
comment|//   null_returns_null
comment|//     return x == null ? null : x OP y
comment|//   ignore_null
comment|//     return x == null ? null : y
comment|// x, y both nullable
comment|//   null_returns_null
comment|//     return x == null || y == null ? null : x OP y
comment|//   ignore_null
comment|//     return x == null ? y : y == null ? x : x OP y
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
name|translator
operator|.
name|translateList
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|backupMethodName
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|==
literal|null
operator|||
operator|!
name|COMP_OP_TYPES
operator|.
name|contains
argument_list|(
name|primitive
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|backupMethodName
argument_list|,
name|expressions
argument_list|)
return|;
block|}
block|}
return|return
name|Expressions
operator|.
name|makeBinary
argument_list|(
name|expressionType
argument_list|,
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expressions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|UnaryImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|private
specifier|final
name|ExpressionType
name|expressionType
decl_stmt|;
name|UnaryImplementor
parameter_list|(
name|ExpressionType
name|expressionType
parameter_list|)
block|{
name|this
operator|.
name|expressionType
operator|=
name|expressionType
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|makeUnary
argument_list|(
name|expressionType
argument_list|,
name|translator
operator|.
name|translate
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Describes when a function/operator will return null.      *      *<p>STRICT and ANY are similar. STRICT says f(a0, a1) will NEVER return      * null if a0 and a1 are not null. This means that we can check whether f      * returns null just by checking its arguments. Use STRICT in preference to      * ANY whenever possible.</p>      */
enum|enum
name|NullPolicy
block|{
comment|/** Returns null if and only if one of the arguments are null. */
name|STRICT
block|,
comment|/** If any of the arguments are null, return null. */
name|ANY
block|,
comment|/** If any of the arguments are false, result is false; else if any          * arguments are null, result is null; else true. */
name|AND
block|,
comment|/** If any of the arguments are true, result is true; else if any          * arguments are null, result is null; else false. */
name|OR
block|,
name|NONE
block|}
comment|/** Visitor that optimizes expressions.      *      *<p>The optimizations are essential, not mere tweaks. Without      * optimization, expressions such as {@code false == null} will be left in,      * which are invalid to Janino (because it does not automatically box      * primitives).</p>      */
specifier|static
class|class
name|OptimizeVisitor
extends|extends
name|Visitor
block|{
annotation|@
name|Override
specifier|public
name|Expression
name|visit
parameter_list|(
name|TernaryExpression
name|ternaryExpression
parameter_list|,
name|Expression
name|expression0
parameter_list|,
name|Expression
name|expression1
parameter_list|,
name|Expression
name|expression2
parameter_list|)
block|{
specifier|final
name|TernaryExpression
name|ternary
init|=
operator|(
name|TernaryExpression
operator|)
name|super
operator|.
name|visit
argument_list|(
name|ternaryExpression
argument_list|,
name|expression0
argument_list|,
name|expression1
argument_list|,
name|expression2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ternary
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Conditional
case|:
name|Boolean
name|always
init|=
name|always
argument_list|(
name|ternary
operator|.
name|expression0
argument_list|)
decl_stmt|;
if|if
condition|(
name|always
operator|!=
literal|null
condition|)
block|{
comment|// true ? y : z  ===  y
comment|// false ? y : z  === z
return|return
name|always
condition|?
name|ternary
operator|.
name|expression1
else|:
name|ternary
operator|.
name|expression2
return|;
block|}
if|if
condition|(
name|ternary
operator|.
name|expression1
operator|.
name|equals
argument_list|(
name|ternary
operator|.
name|expression2
argument_list|)
condition|)
block|{
comment|// a ? b : b   ===   b
return|return
name|ternary
operator|.
name|expression1
return|;
block|}
block|}
return|return
name|ternary
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|visit
parameter_list|(
name|BinaryExpression
name|binaryExpression
parameter_list|,
name|Expression
name|expression0
parameter_list|,
name|Expression
name|expression1
parameter_list|)
block|{
specifier|final
name|BinaryExpression
name|binary
init|=
operator|(
name|BinaryExpression
operator|)
name|super
operator|.
name|visit
argument_list|(
name|binaryExpression
argument_list|,
name|expression0
argument_list|,
name|expression1
argument_list|)
decl_stmt|;
name|Boolean
name|always
decl_stmt|;
switch|switch
condition|(
name|binary
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|AndAlso
case|:
name|always
operator|=
name|always
argument_list|(
name|binary
operator|.
name|expression0
argument_list|)
expr_stmt|;
if|if
condition|(
name|always
operator|!=
literal|null
condition|)
block|{
return|return
name|always
condition|?
name|binary
operator|.
name|expression1
else|:
name|FALSE_EXPR
return|;
block|}
name|always
operator|=
name|always
argument_list|(
name|binary
operator|.
name|expression1
argument_list|)
expr_stmt|;
if|if
condition|(
name|always
operator|!=
literal|null
condition|)
block|{
return|return
name|always
condition|?
name|binary
operator|.
name|expression0
else|:
name|FALSE_EXPR
return|;
block|}
break|break;
case|case
name|OrElse
case|:
name|always
operator|=
name|always
argument_list|(
name|binary
operator|.
name|expression0
argument_list|)
expr_stmt|;
if|if
condition|(
name|always
operator|!=
literal|null
condition|)
block|{
comment|// true or x  --> true
comment|// null or x  --> x
comment|// false or x --> x
return|return
operator|!
name|always
condition|?
name|binary
operator|.
name|expression1
else|:
name|TRUE_EXPR
return|;
block|}
name|always
operator|=
name|always
argument_list|(
name|binary
operator|.
name|expression1
argument_list|)
expr_stmt|;
if|if
condition|(
name|always
operator|!=
literal|null
condition|)
block|{
return|return
operator|!
name|always
condition|?
name|binary
operator|.
name|expression0
else|:
name|TRUE_EXPR
return|;
block|}
break|break;
case|case
name|Equal
case|:
if|if
condition|(
name|binary
operator|.
name|expression0
operator|instanceof
name|ConstantExpression
operator|&&
name|binary
operator|.
name|expression1
operator|instanceof
name|ConstantExpression
condition|)
block|{
return|return
name|binary
operator|.
name|expression0
operator|.
name|equals
argument_list|(
name|binary
operator|.
name|expression1
argument_list|)
condition|?
name|TRUE_EXPR
else|:
name|FALSE_EXPR
return|;
block|}
break|break;
case|case
name|NotEqual
case|:
if|if
condition|(
name|binary
operator|.
name|expression0
operator|instanceof
name|ConstantExpression
operator|&&
name|binary
operator|.
name|expression1
operator|instanceof
name|ConstantExpression
condition|)
block|{
return|return
operator|!
name|binary
operator|.
name|expression0
operator|.
name|equals
argument_list|(
name|binary
operator|.
name|expression1
argument_list|)
condition|?
name|TRUE_EXPR
else|:
name|FALSE_EXPR
return|;
block|}
break|break;
block|}
return|return
name|binary
return|;
block|}
comment|/** Returns whether an expression always evaluates to true or false.          * Assumes that expression has already been optimized. */
specifier|private
specifier|static
name|Boolean
name|always
parameter_list|(
name|Expression
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|FALSE_EXPR
argument_list|)
operator|||
name|x
operator|.
name|equals
argument_list|(
name|BOXED_FALSE_EXPR
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|TRUE_EXPR
argument_list|)
operator|||
name|x
operator|.
name|equals
argument_list|(
name|BOXED_TRUE_EXPR
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CaseImplementor
extends|extends
name|AbstractCallImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|implementRecurse
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Expression
name|implementRecurse
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|RexNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|operands
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// the "else" clause
return|return
name|translator
operator|.
name|translate
argument_list|(
name|translator
operator|.
name|builder
operator|.
name|ensureType
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|operands
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|translator
operator|.
name|translateCondition
argument_list|(
name|operands
index|[
name|i
index|]
argument_list|)
argument_list|,
name|translator
operator|.
name|translate
argument_list|(
name|translator
operator|.
name|builder
operator|.
name|ensureType
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|operands
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|implementRecurse
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|i
operator|+
literal|2
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|CastImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|length
operator|==
literal|1
assert|;
name|RexNode
name|expr
init|=
name|call
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|RelDataType
name|type
init|=
name|call
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|translator
operator|.
name|translateCast
argument_list|(
name|expr
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ValueConstructorImplementor
implements|implements
name|CallImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
return|return
name|translator
operator|.
name|translateConstructor
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ItemImplementor
implements|implements
name|CallImplementor
block|{
specifier|private
specifier|static
specifier|final
name|MethodImplementor
name|ARRAY_ELEMENT
init|=
operator|new
name|MethodImplementor
argument_list|(
name|BuiltinMethod
operator|.
name|ARRAY_ELEMENT
operator|.
name|method
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MethodImplementor
name|MAP_ELEMENT
init|=
operator|new
name|MethodImplementor
argument_list|(
name|BuiltinMethod
operator|.
name|MAP_ELEMENT
operator|.
name|method
argument_list|)
decl_stmt|;
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
return|return
name|implementNullSemantics
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|nullAs
argument_list|,
name|call
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|ARRAY
condition|?
name|ARRAY_ELEMENT
else|:
name|MAP_ELEMENT
argument_list|)
return|;
block|}
block|}
comment|/** Implements "IS XXX" operations such as "IS NULL"      * or "IS NOT TRUE".      *      *<p>What these operators have in common:</p>      * 1. They return TRUE or FALSE, never NULL.      * 2. Of the 3 input values (TRUE, FALSE, NULL) they return TRUE for 1 or 2,      *    FALSE for the other 2 or 1.      */
specifier|private
specifier|static
class|class
name|IsXxxImplementor
implements|implements
name|CallImplementor
block|{
specifier|private
specifier|final
name|Boolean
name|seek
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|negate
decl_stmt|;
specifier|public
name|IsXxxImplementor
parameter_list|(
name|Boolean
name|seek
parameter_list|,
name|boolean
name|negate
parameter_list|)
block|{
name|this
operator|.
name|seek
operator|=
name|seek
expr_stmt|;
name|this
operator|.
name|negate
operator|=
name|negate
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
name|RexNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
assert|assert
name|operands
operator|.
name|length
operator|==
literal|1
assert|;
if|if
condition|(
name|seek
operator|==
literal|null
condition|)
block|{
return|return
name|translator
operator|.
name|translate
argument_list|(
name|operands
index|[
literal|0
index|]
argument_list|,
name|negate
condition|?
name|NullAs
operator|.
name|IS_NOT_NULL
else|:
name|NullAs
operator|.
name|IS_NULL
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|maybeNegate
argument_list|(
name|negate
operator|==
name|seek
argument_list|,
name|translator
operator|.
name|translate
argument_list|(
name|operands
index|[
literal|0
index|]
argument_list|,
name|seek
condition|?
name|NullAs
operator|.
name|FALSE
else|:
name|NullAs
operator|.
name|TRUE
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End RexImpTable.java
end_comment

end_unit

