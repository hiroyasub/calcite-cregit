begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|BuiltinMethod
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|ModifiableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|stmt
operator|.
name|OJPreparingStmt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|trace
operator|.
name|EigenbaseTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Rules and relational operators for the {@link Enumerable} calling convention.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|JavaRules
block|{
specifier|private
specifier|static
specifier|final
name|Constructor
name|ABSTRACT_ENUMERABLE_CTOR
init|=
name|Types
operator|.
name|lookupConstructor
argument_list|(
name|AbstractEnumerable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|tracer
init|=
name|EigenbaseTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|BRIDGE_METHODS
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|NO_PARAMS
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|NO_EXPRS
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|ENUMERABLE_JOIN_RULE
init|=
operator|new
name|EnumerableJoinRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|LEFT_RIGHT
init|=
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|}
decl_stmt|;
specifier|private
specifier|static
class|class
name|EnumerableJoinRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableJoinRule
parameter_list|()
block|{
name|super
argument_list|(
name|JoinRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|CUSTOM
argument_list|,
literal|"EnumerableJoinRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|JoinRel
name|join
init|=
operator|(
name|JoinRel
operator|)
name|rel
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|.
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
operator|)
condition|)
block|{
name|input
operator|=
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|CUSTOM
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newInputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|EnumerableJoinRel
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|join
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|CUSTOM
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|getVariablesStopped
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|tracer
operator|.
name|warning
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableJoinRel
extends|extends
name|JoinRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
specifier|protected
name|EnumerableJoinRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|RelOptUtil
operator|.
name|isEqui
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"EnumerableJoinRel only supports equi-join"
argument_list|)
throw|;
block|}
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableJoinRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RexNode
name|conditionExpr
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|EnumerableJoinRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|conditionExpr
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
comment|// Inflate Java cost to make Cascading implementation more
comment|// attractive.
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|2d
argument_list|)
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leftKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rightKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|RexNode
name|remaining
init|=
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|leftKeys
argument_list|,
name|rightKeys
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
comment|// We checked "isEqui" in constructor. Something went wrong.
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not equi-join condition: "
operator|+
name|remaining
argument_list|)
throw|;
block|}
name|BlockBuilder
name|list
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|leftExpression
init|=
name|list
operator|.
name|append
argument_list|(
literal|"left"
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|left
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|rightExpression
init|=
name|list
operator|.
name|append
argument_list|(
literal|"right"
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|1
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|right
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|keyPhysType
init|=
operator|(
operator|(
name|EnumerableRel
operator|)
name|left
operator|)
operator|.
name|getPhysType
argument_list|()
operator|.
name|project
argument_list|(
name|leftKeys
argument_list|,
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|append
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|leftExpression
argument_list|,
name|BuiltinMethod
operator|.
name|JOIN
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|rightExpression
argument_list|,
operator|(
operator|(
name|EnumerableRel
operator|)
name|left
operator|)
operator|.
name|getPhysType
argument_list|()
operator|.
name|generateAccessor
argument_list|(
name|leftKeys
argument_list|)
argument_list|,
operator|(
operator|(
name|EnumerableRel
operator|)
name|right
operator|)
operator|.
name|getPhysType
argument_list|()
operator|.
name|generateAccessor
argument_list|(
name|rightKeys
argument_list|)
argument_list|,
name|generateSelector
argument_list|()
argument_list|)
operator|.
name|appendIfNotNull
argument_list|(
name|keyPhysType
operator|.
name|comparer
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toBlock
argument_list|()
return|;
block|}
name|Expression
name|generateSelector
parameter_list|()
block|{
comment|// A parameter for each input.
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ParameterExpression
argument_list|>
argument_list|()
decl_stmt|;
comment|// Generate all fields.
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|rel
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|getInputs
argument_list|()
argument_list|)
control|)
block|{
name|PhysType
name|inputPhysType
init|=
operator|(
operator|(
name|EnumerableRel
operator|)
name|rel
operator|.
name|e
operator|)
operator|.
name|getPhysType
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
name|LEFT_RIGHT
index|[
name|rel
operator|.
name|i
index|]
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
name|int
name|fieldCount
init|=
name|inputPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|expressions
operator|.
name|add
argument_list|(
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|inputPhysType
operator|.
name|fieldClass
argument_list|(
name|i
argument_list|)
argument_list|,
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|parameter
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|physType
operator|.
name|record
argument_list|(
name|expressions
argument_list|)
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
comment|/**      * Utilities for generating programs in the Enumerable (functional)      * style.      */
specifier|public
specifier|static
class|class
name|EnumUtil
block|{
comment|/** Declares a method that overrides another method. */
specifier|static
name|MethodDeclaration
name|overridingMethodDecl
parameter_list|(
name|Method
name|method
parameter_list|,
name|Iterable
argument_list|<
name|ParameterExpression
argument_list|>
name|parameters
parameter_list|,
name|BlockExpression
name|body
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|ABSTRACT
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|parameters
argument_list|,
name|body
argument_list|)
return|;
block|}
specifier|static
name|Type
name|javaClass
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
specifier|final
name|Type
name|clazz
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|instanceof
name|Class
condition|?
name|clazz
else|:
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|static
name|Class
name|javaRowClass
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isStruct
argument_list|()
operator|&&
name|type
operator|.
name|getFieldCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Type
name|clazz
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|instanceof
name|Class
condition|?
operator|(
name|Class
operator|)
name|clazz
else|:
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
specifier|static
name|Expression
name|foldAnd
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|conditions
parameter_list|)
block|{
name|Expression
name|e
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Expression
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|condition
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|Expressions
operator|.
name|andAlso
argument_list|(
name|e
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
return|;
block|}
return|return
name|e
return|;
block|}
specifier|public
specifier|static
name|Expression
name|foldOr
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|conditions
parameter_list|)
block|{
name|Expression
name|e
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Expression
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|condition
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|Expressions
operator|.
name|orElse
argument_list|(
name|e
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|false
argument_list|)
return|;
block|}
return|return
name|e
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableTableAccessRel
extends|extends
name|TableAccessRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
specifier|private
specifier|final
name|Class
name|elementType
decl_stmt|;
specifier|public
name|EnumerableTableAccessRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Class
name|elementType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
name|this
operator|.
name|elementType
operator|=
name|elementType
expr_stmt|;
if|if
condition|(
name|Types
operator|.
name|isArray
argument_list|(
name|expression
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|Types
operator|.
name|toClass
argument_list|(
name|expression
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|expression
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|AS_LIST
operator|.
name|method
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
name|expression
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|AS_ENUMERABLE
operator|.
name|method
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
comment|// Note that representation is ARRAY. This assumes that the table
comment|// returns a Object[] for each record. Actually a Table<T> can
comment|// return any type T. And, if it is a JdbcTable, we'd like to be
comment|// able to generate alternate accessors that return e.g. synthetic
comment|// records {T0 f0; T1 f1; ...} and don't box every primitive value.
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
operator|)
operator|.
name|format
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableTableAccessRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|expression
argument_list|,
name|elementType
argument_list|)
return|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
return|return
name|Blocks
operator|.
name|toBlock
argument_list|(
name|expression
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableCalcRule
name|ENUMERABLE_CALC_RULE
init|=
operator|new
name|EnumerableCalcRule
argument_list|()
decl_stmt|;
comment|/**      * Rule to convert a {@link CalcRel} to an      * {@link EnumerableCalcRel}.      */
specifier|private
specifier|static
class|class
name|EnumerableCalcRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableCalcRule
parameter_list|()
block|{
name|super
argument_list|(
name|CalcRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
literal|"EnumerableCalcRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|CalcRel
name|calc
init|=
operator|(
name|CalcRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|calc
operator|.
name|getChild
argument_list|()
argument_list|,
name|calc
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedChild
operator|==
literal|null
condition|)
block|{
comment|// We can't convert the child, so we can't convert rel.
return|return
literal|null
return|;
block|}
comment|// If there's a multiset, let FarragoMultisetSplitter work on it
comment|// first.
if|if
condition|(
name|RexMultisetUtil
operator|.
name|containsMultiset
argument_list|(
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|EnumerableCalcRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
argument_list|,
name|convertedChild
argument_list|,
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|,
name|ProjectRelBase
operator|.
name|Flags
operator|.
name|Boxed
argument_list|)
return|;
block|}
block|}
comment|/**      * Rule to convert an {@link EnumerableCalcRel} on an      * {@link EnumerableConvention#ARRAY} input to one on a      * {@link EnumerableConvention#CUSTOM} input.      */
specifier|public
specifier|static
class|class
name|EnumerableCustomCalcRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|INSTANCE
init|=
operator|new
name|EnumerableCustomCalcRule
argument_list|()
decl_stmt|;
specifier|private
name|EnumerableCustomCalcRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|EnumerableCalcRel
operator|.
name|class
argument_list|,
operator|(
name|RelTrait
operator|)
literal|null
argument_list|,
operator|new
name|RelOptRuleOperand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
name|RelOptRuleOperand
operator|.
name|Dummy
operator|.
name|ANY
argument_list|)
argument_list|)
argument_list|,
literal|"EnumerableCustomCalcRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|EnumerableCalcRel
name|calc
init|=
operator|(
name|EnumerableCalcRel
operator|)
name|call
operator|.
name|getRels
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|call
operator|.
name|getRels
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|calc
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|CUSTOM
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedChild
operator|==
literal|null
condition|)
block|{
comment|// We can't convert the child, so we can't convert rel.
return|return;
block|}
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|EnumerableCalcRel
argument_list|(
name|calc
operator|.
name|getCluster
argument_list|()
argument_list|,
name|calc
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|convertedChild
argument_list|,
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|,
name|calc
operator|.
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|ConverterRule
name|ENUMERABLE_ARRAY_TO_CUSTOM_RULE
init|=
operator|new
name|EnumerableConverterRule
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
name|EnumerableConvention
operator|.
name|CUSTOM
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ConverterRule
name|ENUMERABLE_CUSTOM_TO_ARRAY_RULE
init|=
operator|new
name|EnumerableConverterRule
argument_list|(
name|EnumerableConvention
operator|.
name|CUSTOM
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
comment|/**      * Rule to convert a relational expression from      * {@link EnumerableConvention#ARRAY} to another      * {@link EnumerableConvention}.      */
specifier|private
specifier|static
class|class
name|EnumerableConverterRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableConverterRule
parameter_list|(
name|EnumerableConvention
name|out
parameter_list|,
name|EnumerableConvention
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
literal|"Enumerable-"
operator|+
name|in
operator|.
name|name
argument_list|()
operator|+
literal|"-to-"
operator|+
name|out
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|EnumerableTableAccessRel
condition|)
block|{
comment|// The physical row type of a table access is baked in.
return|return
literal|null
return|;
block|}
name|RelTraitSet
name|newTraitSet
init|=
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|,
name|getOutTrait
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rel
operator|instanceof
name|EnumerableSortRel
condition|)
block|{
comment|// The physical row type of a sort must be the same as its
comment|// input.
name|EnumerableSortRel
name|sortRel
init|=
operator|(
name|EnumerableSortRel
operator|)
name|rel
decl_stmt|;
return|return
name|sortRel
operator|.
name|copy
argument_list|(
name|newTraitSet
argument_list|,
name|convert
argument_list|(
name|sortRel
operator|.
name|getChild
argument_list|()
argument_list|,
name|newTraitSet
argument_list|)
argument_list|,
name|sortRel
operator|.
name|getCollations
argument_list|()
argument_list|)
return|;
block|}
return|return
name|rel
operator|.
name|copy
argument_list|(
name|newTraitSet
argument_list|,
name|rel
operator|.
name|getInputs
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableCalcRel
extends|extends
name|SingleRel
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|RexProgram
name|program
decl_stmt|;
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
comment|/**          * Values defined in {@link org.eigenbase.rel.ProjectRelBase.Flags}.          */
specifier|protected
name|int
name|flags
decl_stmt|;
specifier|public
name|EnumerableCalcRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|program
operator|.
name|getOutputRowType
argument_list|()
expr_stmt|;
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|void
name|explain
parameter_list|(
name|RelOptPlanWriter
name|pw
parameter_list|)
block|{
name|program
operator|.
name|explainCalc
argument_list|(
name|this
argument_list|,
name|pw
argument_list|)
expr_stmt|;
block|}
specifier|public
name|double
name|getRows
parameter_list|()
block|{
return|return
name|FilterRel
operator|.
name|estimateFilteredRows
argument_list|(
name|getChild
argument_list|()
argument_list|,
name|program
argument_list|)
return|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
name|double
name|dRows
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|double
name|dCpu
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getChild
argument_list|()
argument_list|)
operator|*
name|program
operator|.
name|getExprCount
argument_list|()
decl_stmt|;
name|double
name|dIo
init|=
literal|0
decl_stmt|;
return|return
name|planner
operator|.
name|makeCost
argument_list|(
name|dRows
argument_list|,
name|dCpu
argument_list|,
name|dIo
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableCalcRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|program
operator|.
name|copy
argument_list|()
argument_list|,
name|getFlags
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getFlags
parameter_list|()
block|{
return|return
name|flags
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
operator|(
name|JavaTypeFactory
operator|)
name|implementor
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
decl_stmt|;
comment|// final Enumerable<Employee> inputEnumerable =<<child impl>>;
comment|// return new Enumerable<IntString>() {
comment|//     Enumerator<IntString> enumerator() {
comment|//         return new Enumerator<IntString>() {
comment|//             public void reset() {
comment|// ...
name|Type
name|outputJavaType
init|=
name|getPhysType
argument_list|()
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|enumeratorType
init|=
name|Types
operator|.
name|of
argument_list|(
name|Enumerator
operator|.
name|class
argument_list|,
name|outputJavaType
argument_list|)
decl_stmt|;
name|Type
name|inputJavaType
init|=
name|child
operator|.
name|getPhysType
argument_list|()
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
name|ParameterExpression
name|inputEnumerator
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Types
operator|.
name|of
argument_list|(
name|Enumerator
operator|.
name|class
argument_list|,
name|inputJavaType
argument_list|)
argument_list|,
literal|"inputEnumerator"
argument_list|)
decl_stmt|;
name|Expression
name|input
init|=
name|RexToLixTranslator
operator|.
name|convert
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_CURRENT
operator|.
name|method
argument_list|)
argument_list|,
name|inputJavaType
argument_list|)
decl_stmt|;
name|BlockExpression
name|moveNextBody
decl_stmt|;
if|if
condition|(
name|program
operator|.
name|getCondition
argument_list|()
operator|==
literal|null
condition|)
block|{
name|moveNextBody
operator|=
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_MOVE_NEXT
operator|.
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BlockBuilder
name|list
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|condition
init|=
name|RexToLixTranslator
operator|.
name|translateCondition
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|list
argument_list|,
operator|new
name|RexToLixTranslator
operator|.
name|InputGetterImpl
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|child
operator|.
name|getPhysType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|condition
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|moveNextBody
operator|=
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|while_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_MOVE_NEXT
operator|.
name|method
argument_list|)
argument_list|,
name|list
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockBuilder
name|list
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
name|RexToLixTranslator
operator|.
name|translateProjects
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|list
argument_list|,
operator|new
name|RexToLixTranslator
operator|.
name|InputGetterImpl
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|child
operator|.
name|getPhysType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|physType
operator|.
name|record
argument_list|(
name|expressions
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BlockExpression
name|currentBody
init|=
name|list
operator|.
name|toBlock
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|inputEnumerable
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"inputEnumerable"
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|body
init|=
name|Expressions
operator|.
name|new_
argument_list|(
name|enumeratorType
argument_list|,
name|NO_EXPRS
argument_list|,
name|Expressions
operator|.
expr|<
name|MemberDeclaration
operator|>
name|list
argument_list|(
name|Expressions
operator|.
name|fieldDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
operator||
name|Modifier
operator|.
name|FINAL
argument_list|,
name|inputEnumerator
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerable
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERABLE_ENUMERATOR
operator|.
name|method
argument_list|)
argument_list|)
argument_list|,
name|EnumUtil
operator|.
name|overridingMethodDecl
argument_list|(
name|BuiltinMethod
operator|.
name|ENUMERATOR_RESET
operator|.
name|method
argument_list|,
name|NO_PARAMS
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_RESET
operator|.
name|method
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|EnumUtil
operator|.
name|overridingMethodDecl
argument_list|(
name|BuiltinMethod
operator|.
name|ENUMERATOR_MOVE_NEXT
operator|.
name|method
argument_list|,
name|NO_PARAMS
argument_list|,
name|moveNextBody
argument_list|)
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|BRIDGE_METHODS
condition|?
name|Object
operator|.
name|class
else|:
name|outputJavaType
argument_list|,
literal|"current"
argument_list|,
name|NO_PARAMS
argument_list|,
name|currentBody
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|ABSTRACT_ENUMERABLE_CTOR
argument_list|,
comment|// TODO: generics
comment|//   Collections.singletonList(inputRowType),
name|NO_EXPRS
argument_list|,
name|Arrays
operator|.
expr|<
name|MemberDeclaration
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|enumeratorType
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERABLE_ENUMERATOR
operator|.
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|NO_PARAMS
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|body
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|statements
operator|.
name|toBlock
argument_list|()
return|;
block|}
specifier|public
name|RexProgram
name|getProgram
parameter_list|()
block|{
return|return
name|program
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableAggregateRule
name|ENUMERABLE_AGGREGATE_RULE
init|=
operator|new
name|EnumerableAggregateRule
argument_list|()
decl_stmt|;
comment|/**      * Rule to convert an {@link org.eigenbase.rel.AggregateRel} to an      * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableAggregateRel}.      */
specifier|private
specifier|static
class|class
name|EnumerableAggregateRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableAggregateRule
parameter_list|()
block|{
name|super
argument_list|(
name|AggregateRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
literal|"EnumerableAggregateRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|AggregateRel
name|agg
init|=
operator|(
name|AggregateRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|agg
operator|.
name|getChild
argument_list|()
argument_list|,
name|agg
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedChild
operator|==
literal|null
condition|)
block|{
comment|// We can't convert the child, so we can't convert rel.
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|EnumerableAggregateRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|plus
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
argument_list|,
name|convertedChild
argument_list|,
name|agg
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|agg
operator|.
name|getAggCallList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|tracer
operator|.
name|warning
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableAggregateRel
extends|extends
name|AggregateRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
specifier|public
name|EnumerableAggregateRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|BitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"distinct aggregation not supported"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableAggregateRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|EnumerableAggregateRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
operator|(
name|JavaTypeFactory
operator|)
name|implementor
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
decl_stmt|;
name|Expression
name|childExp
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|)
argument_list|)
decl_stmt|;
name|RelDataType
name|inputRowType
init|=
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
comment|// final Enumerable<Employee> child =<<child impl>>;
comment|// Function1<Employee, Integer> keySelector =
comment|//     new Function1<Employee, Integer>() {
comment|//         public Integer apply(Employee a0) {
comment|//             return a0.deptno;
comment|//         }
comment|//     };
comment|// Function1<Employee, Object[]> accumulatorInitializer =
comment|//     new Function1<Employee, Object[]>() {
comment|//         public Object[] apply(Employee a0) {
comment|//             return new Object[] {0, 0};
comment|//         }
comment|//     };
comment|// Function2<Object[], Employee, Object[]> accumulatorAdder =
comment|//     new Function2<Object[], Employee, Object[]>() {
comment|//         public Object[] apply(Object[] a1, Employee a0) {
comment|//              a1[0] = ((Integer) a1[0]) + 1;
comment|//              a1[1] = ((Integer) a1[1]) + a0.salary;
comment|//             return a1;
comment|//         }
comment|//     };
comment|// Function2<Integer, Object[], Object[]> resultSelector =
comment|//     new Function2<Integer, Object[], Object[]>() {
comment|//         public Object[] apply(Integer a0, Object[] a1) {
comment|//             return new Object[] { a0, a1[0], a1[1] };
comment|//         }
comment|//     };
comment|// return childEnumerable
comment|//     .groupBy(
comment|//        keySelector, accumulatorInitializer, accumulatorAdder,
comment|//        resultSelector);
comment|//
comment|// or, if key has 0 columns,
comment|//
comment|// return childEnumerable
comment|//     .aggregate(
comment|//       accumulatorInitializer.apply(),
comment|//       accumulatorAdder,
comment|//       resultSelector);
comment|//
comment|// with a slightly different resultSelector.
name|PhysType
name|inputPhysType
init|=
name|child
operator|.
name|getPhysType
argument_list|()
decl_stmt|;
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"a0"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|keyExpressions
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
name|PhysType
name|keyPhysType
init|=
name|inputPhysType
operator|.
name|project
argument_list|(
name|Util
operator|.
name|toList
argument_list|(
name|groupSet
argument_list|)
argument_list|,
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
decl_stmt|;
specifier|final
name|int
name|keyArity
init|=
name|groupSet
operator|.
name|cardinality
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|groupKey
range|:
name|Util
operator|.
name|toIter
argument_list|(
name|groupSet
argument_list|)
control|)
block|{
name|keyExpressions
operator|.
name|add
argument_list|(
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|parameter
argument_list|,
name|groupKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Expression
name|keySelector
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"keySelector"
argument_list|,
name|child
operator|.
name|getPhysType
argument_list|()
operator|.
name|generateSelector
argument_list|(
name|parameter
argument_list|,
name|Util
operator|.
name|toList
argument_list|(
name|groupSet
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexImpTable
operator|.
name|AggImplementor2
argument_list|>
name|implementors
init|=
operator|new
name|ArrayList
argument_list|<
name|RexImpTable
operator|.
name|AggImplementor2
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
name|RexImpTable
operator|.
name|AggImplementor2
name|implementor2
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get2
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot implement aggregate "
operator|+
name|aggCall
argument_list|)
throw|;
block|}
name|implementors
operator|.
name|add
argument_list|(
name|implementor2
argument_list|)
expr_stmt|;
block|}
comment|// Function0<Object[]> accumulatorInitializer =
comment|//     new Function0<Object[]>() {
comment|//         public Object[] apply() {
comment|//             return new Object[] {0, 0};
comment|//         }
comment|//     };
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|initExpressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|RexImpTable
operator|.
name|AggImplementor2
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
name|initExpressions
operator|.
name|add
argument_list|(
name|ord
operator|.
name|e
operator|.
name|right
operator|.
name|implementInit
argument_list|(
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|physType
operator|.
name|fieldClass
argument_list|(
name|keyArity
operator|+
name|ord
operator|.
name|i
argument_list|)
argument_list|,
name|fieldTypes
argument_list|(
name|typeFactory
argument_list|,
name|inputRowType
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PhysType
name|accPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|typeFactory
operator|.
name|createSyntheticType
argument_list|(
operator|new
name|AbstractList
argument_list|<
name|Type
argument_list|>
argument_list|()
block|{
specifier|public
name|Type
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|initExpressions
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|initExpressions
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|accumulatorInitializer
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"accumulatorInitializer"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function0
operator|.
name|class
argument_list|,
name|accPhysType
operator|.
name|record
argument_list|(
name|initExpressions
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Function2<Object[], Employee, Object[]> accumulatorAdder =
comment|//     new Function2<Object[], Employee, Object[]>() {
comment|//         public Object[] apply(Object[] acc, Employee in) {
comment|//              acc[0] = ((Integer) acc[0]) + 1;
comment|//              acc[1] = ((Integer) acc[1]) + in.salary;
comment|//             return acc;
comment|//         }
comment|//     };
name|BlockBuilder
name|bb2
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|inParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|accParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|accPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"acc"
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|RexImpTable
operator|.
name|AggImplementor2
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
specifier|final
name|Type
name|type
init|=
name|initExpressions
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
operator|.
name|type
decl_stmt|;
specifier|final
name|Expression
name|accumulator
init|=
name|accPhysType
operator|.
name|fieldReference
argument_list|(
name|accParameter
argument_list|,
name|ord
operator|.
name|i
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|arg
range|:
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getArgList
argument_list|()
control|)
block|{
if|if
condition|(
name|inputPhysType
operator|.
name|fieldNullable
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|conditions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|inParameter
argument_list|,
name|arg
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Statement
name|assign
init|=
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|accumulator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|right
operator|.
name|implementAdd
argument_list|(
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|type
argument_list|,
name|accumulator
argument_list|)
argument_list|,
name|accessors
argument_list|(
name|inputPhysType
argument_list|,
name|inParameter
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|conditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bb2
operator|.
name|add
argument_list|(
name|assign
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bb2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|EnumUtil
operator|.
name|foldAnd
argument_list|(
name|conditions
argument_list|)
argument_list|,
name|assign
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|bb2
operator|.
name|add
argument_list|(
name|accParameter
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|accumulatorAdder
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"accumulatorAdder"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|bb2
operator|.
name|toBlock
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|accParameter
argument_list|,
name|inParameter
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Function2<Integer, Object[], Object[]> resultSelector =
comment|//     new Function2<Integer, Object[], Object[]>() {
comment|//         public Object[] apply(Integer key, Object[] acc) {
comment|//             return new Object[] { key, acc[0], acc[1] };
comment|//         }
comment|//     };
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|results
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|keyParameter
decl_stmt|;
if|if
condition|(
name|keyArity
operator|==
literal|0
condition|)
block|{
name|keyParameter
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Type
name|keyType
init|=
name|keyPhysType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
name|keyParameter
operator|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|keyType
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|keyArity
condition|;
name|j
operator|++
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|keyPhysType
operator|.
name|fieldReference
argument_list|(
name|keyParameter
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|RexImpTable
operator|.
name|AggImplementor2
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|ord
operator|.
name|e
operator|.
name|right
operator|.
name|implementResult
argument_list|(
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|accPhysType
operator|.
name|fieldReference
argument_list|(
name|accParameter
argument_list|,
name|ord
operator|.
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PhysType
name|resultPhysType
init|=
name|physType
decl_stmt|;
if|if
condition|(
name|keyArity
operator|==
literal|0
condition|)
block|{
specifier|final
name|Expression
name|resultSelector
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"resultSelector"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function1
operator|.
name|class
argument_list|,
name|resultPhysType
operator|.
name|record
argument_list|(
name|results
argument_list|)
argument_list|,
name|accParameter
argument_list|)
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|SINGLETON_ENUMERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltinMethod
operator|.
name|AGGREGATE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
expr|<
name|Expression
operator|>
name|list
argument_list|()
operator|.
name|append
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|accumulatorInitializer
argument_list|,
literal|"apply"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|accumulatorAdder
argument_list|)
operator|.
name|append
argument_list|(
name|resultSelector
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Expression
name|resultSelector
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"resultSelector"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|resultPhysType
operator|.
name|record
argument_list|(
name|results
argument_list|)
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|keyParameter
argument_list|,
name|accParameter
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltinMethod
operator|.
name|GROUP_BY2
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|keySelector
argument_list|,
name|accumulatorInitializer
argument_list|,
name|accumulatorAdder
argument_list|,
name|resultSelector
argument_list|)
operator|.
name|appendIfNotNull
argument_list|(
name|keyPhysType
operator|.
name|comparer
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|statements
operator|.
name|toBlock
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|Type
argument_list|>
name|fieldTypes
parameter_list|(
specifier|final
name|JavaTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|RelDataType
name|inputRowType
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|)
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|Type
argument_list|>
argument_list|()
block|{
specifier|public
name|Type
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|EnumUtil
operator|.
name|javaClass
argument_list|(
name|typeFactory
argument_list|,
name|inputRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|argList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|argList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|List
argument_list|<
name|Expression
argument_list|>
name|accessors
parameter_list|(
name|PhysType
name|physType
parameter_list|,
name|ParameterExpression
name|v1
parameter_list|,
name|AggregateCall
name|aggCall
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|field
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|expressions
operator|.
name|add
argument_list|(
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|physType
operator|.
name|fieldClass
argument_list|(
name|field
argument_list|)
argument_list|,
name|physType
operator|.
name|fieldReference
argument_list|(
name|v1
argument_list|,
name|field
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expressions
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableSortRule
name|ENUMERABLE_SORT_RULE
init|=
operator|new
name|EnumerableSortRule
argument_list|()
decl_stmt|;
comment|/**      * Rule to convert an {@link org.eigenbase.rel.SortRel} to an      * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableSortRel}.      */
specifier|private
specifier|static
class|class
name|EnumerableSortRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableSortRule
parameter_list|()
block|{
name|super
argument_list|(
name|SortRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
literal|"EnumerableSortRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|SortRel
name|sort
init|=
operator|(
name|SortRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|sort
operator|.
name|getChild
argument_list|()
argument_list|,
name|sort
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedChild
operator|==
literal|null
condition|)
block|{
comment|// We can't convert the child, so we can't convert rel.
return|return
literal|null
return|;
block|}
return|return
operator|new
name|EnumerableSortRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
argument_list|,
name|convertedChild
argument_list|,
name|sort
operator|.
name|getCollations
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableSortRel
extends|extends
name|SortRel
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
specifier|public
name|EnumerableSortRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|collations
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|child
operator|.
name|getConvention
argument_list|()
assert|;
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableSortRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|newInput
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|newCollations
parameter_list|)
block|{
return|return
operator|new
name|EnumerableSortRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|newInput
argument_list|,
name|newCollations
argument_list|)
return|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
decl_stmt|;
name|Expression
name|childExp
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|)
argument_list|)
decl_stmt|;
name|PhysType
name|inputPhysType
init|=
name|child
operator|.
name|getPhysType
argument_list|()
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|pair
init|=
name|inputPhysType
operator|.
name|generateCollationKey
argument_list|(
name|collations
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|keySelector
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"keySelector"
argument_list|,
name|pair
operator|.
name|left
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|comparatorExp
init|=
name|pair
operator|.
name|right
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
init|=
name|Expressions
operator|.
name|list
argument_list|(
name|keySelector
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparatorExp
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Expression
name|comparator
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"comparator"
argument_list|,
name|comparatorExp
argument_list|)
decl_stmt|;
name|arguments
operator|.
name|add
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
block|}
name|statements
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltinMethod
operator|.
name|ORDER_BY
operator|.
name|method
argument_list|,
name|arguments
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|statements
operator|.
name|toBlock
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableUnionRule
name|ENUMERABLE_UNION_RULE
init|=
operator|new
name|EnumerableUnionRule
argument_list|()
decl_stmt|;
comment|/**      * Rule to convert an {@link org.eigenbase.rel.UnionRel} to an      * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableUnionRel}.      */
specifier|private
specifier|static
class|class
name|EnumerableUnionRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableUnionRule
parameter_list|()
block|{
name|super
argument_list|(
name|UnionRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
literal|"EnumerableUnionRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|UnionRel
name|union
init|=
operator|(
name|UnionRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|union
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|convertedChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|child
range|:
name|union
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|child
argument_list|,
name|traitSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedChild
operator|==
literal|null
condition|)
block|{
comment|// We can't convert the child, so we can't convert rel.
return|return
literal|null
return|;
block|}
name|convertedChildren
operator|.
name|add
argument_list|(
name|convertedChild
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EnumerableUnionRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertedChildren
argument_list|,
operator|!
name|union
operator|.
name|isDistinct
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableUnionRel
extends|extends
name|UnionRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
specifier|public
name|EnumerableUnionRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EnumerableUnionRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|EnumerableUnionRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|unionExp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|inputs
argument_list|)
control|)
block|{
name|EnumerableRel
name|input
init|=
operator|(
name|EnumerableRel
operator|)
name|ord
operator|.
name|e
decl_stmt|;
name|Expression
name|childExp
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"child"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
name|ord
operator|.
name|i
argument_list|,
name|input
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|unionExp
operator|==
literal|null
condition|)
block|{
name|unionExp
operator|=
name|childExp
expr_stmt|;
block|}
else|else
block|{
name|unionExp
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|unionExp
argument_list|,
name|all
condition|?
name|BuiltinMethod
operator|.
name|CONCAT
operator|.
name|method
else|:
name|BuiltinMethod
operator|.
name|UNION
operator|.
name|method
argument_list|,
name|childExp
argument_list|)
expr_stmt|;
block|}
block|}
name|statements
operator|.
name|add
argument_list|(
name|unionExp
argument_list|)
expr_stmt|;
return|return
name|statements
operator|.
name|toBlock
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableIntersectRule
name|ENUMERABLE_INTERSECT_RULE
init|=
operator|new
name|EnumerableIntersectRule
argument_list|()
decl_stmt|;
comment|/**      * Rule to convert an {@link org.eigenbase.rel.IntersectRel} to an      * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableIntersectRel}.      */
specifier|private
specifier|static
class|class
name|EnumerableIntersectRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableIntersectRule
parameter_list|()
block|{
name|super
argument_list|(
name|IntersectRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
literal|"EnumerableIntersectRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|IntersectRel
name|intersect
init|=
operator|(
name|IntersectRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
operator|!
name|intersect
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|// INTERSECT ALL not implemented
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|intersect
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|convertedChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|child
range|:
name|intersect
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|child
argument_list|,
name|traitSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedChild
operator|==
literal|null
condition|)
block|{
comment|// We can't convert the child, so we can't convert rel.
return|return
literal|null
return|;
block|}
name|convertedChildren
operator|.
name|add
argument_list|(
name|convertedChild
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EnumerableIntersectRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertedChildren
argument_list|,
operator|!
name|intersect
operator|.
name|isDistinct
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableIntersectRel
extends|extends
name|IntersectRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
specifier|public
name|EnumerableIntersectRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|all
assert|;
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EnumerableIntersectRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|EnumerableIntersectRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|intersectExp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"child"
operator|+
name|i
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
name|i
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|input
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|intersectExp
operator|==
literal|null
condition|)
block|{
name|intersectExp
operator|=
name|childExp
expr_stmt|;
block|}
else|else
block|{
name|intersectExp
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|intersectExp
argument_list|,
name|all
condition|?
name|BuiltinMethod
operator|.
name|CONCAT
operator|.
name|method
else|:
name|BuiltinMethod
operator|.
name|INTERSECT
operator|.
name|method
argument_list|,
name|childExp
argument_list|)
expr_stmt|;
block|}
block|}
name|statements
operator|.
name|add
argument_list|(
name|intersectExp
argument_list|)
expr_stmt|;
return|return
name|statements
operator|.
name|toBlock
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableMinusRule
name|ENUMERABLE_MINUS_RULE
init|=
operator|new
name|EnumerableMinusRule
argument_list|()
decl_stmt|;
comment|/**      * Rule to convert an {@link org.eigenbase.rel.MinusRel} to an      * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableMinusRel}.      */
specifier|private
specifier|static
class|class
name|EnumerableMinusRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableMinusRule
parameter_list|()
block|{
name|super
argument_list|(
name|MinusRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
literal|"EnumerableMinusRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|MinusRel
name|minus
init|=
operator|(
name|MinusRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
operator|!
name|minus
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|// EXCEPT ALL not implemented
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|convertedChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|child
range|:
name|minus
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|child
argument_list|,
name|traitSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedChild
operator|==
literal|null
condition|)
block|{
comment|// We can't convert the child, so we can't convert rel.
return|return
literal|null
return|;
block|}
name|convertedChildren
operator|.
name|add
argument_list|(
name|convertedChild
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EnumerableMinusRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertedChildren
argument_list|,
operator|!
name|minus
operator|.
name|isDistinct
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableMinusRel
extends|extends
name|MinusRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
specifier|public
name|EnumerableMinusRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|all
assert|;
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EnumerableMinusRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|EnumerableMinusRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|minusExp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|statements
operator|.
name|append
argument_list|(
literal|"child"
operator|+
name|i
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
name|i
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|input
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|minusExp
operator|==
literal|null
condition|)
block|{
name|minusExp
operator|=
name|childExp
expr_stmt|;
block|}
else|else
block|{
name|minusExp
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|minusExp
argument_list|,
name|BuiltinMethod
operator|.
name|EXCEPT
operator|.
name|method
argument_list|,
name|childExp
argument_list|)
expr_stmt|;
block|}
block|}
name|statements
operator|.
name|add
argument_list|(
name|minusExp
argument_list|)
expr_stmt|;
return|return
name|statements
operator|.
name|toBlock
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableTableModificationRule
name|ENUMERABLE_TABLE_MODIFICATION_RULE
init|=
operator|new
name|EnumerableTableModificationRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|EnumerableTableModificationRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableTableModificationRule
parameter_list|()
block|{
name|super
argument_list|(
name|TableModificationRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
literal|"EnumerableTableModificationRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|TableModificationRel
name|modify
init|=
operator|(
name|TableModificationRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|modify
operator|.
name|getTable
argument_list|()
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
operator|||
name|modifiableTable
operator|.
name|getExpression
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|modify
operator|.
name|getChild
argument_list|()
argument_list|,
name|modify
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|CUSTOM
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedChild
operator|==
literal|null
condition|)
block|{
comment|// We can't convert the child, so we can't convert rel.
return|return
literal|null
return|;
block|}
return|return
operator|new
name|EnumerableTableModificationRel
argument_list|(
name|modify
operator|.
name|getCluster
argument_list|()
argument_list|,
name|modify
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|CUSTOM
argument_list|)
argument_list|,
name|modify
operator|.
name|getTable
argument_list|()
argument_list|,
name|modify
operator|.
name|getCatalogReader
argument_list|()
argument_list|,
name|convertedChild
argument_list|,
name|modify
operator|.
name|getOperation
argument_list|()
argument_list|,
name|modify
operator|.
name|getUpdateColumnList
argument_list|()
argument_list|,
name|modify
operator|.
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableTableModificationRel
extends|extends
name|TableModificationRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|public
name|EnumerableTableModificationRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|OJPreparingStmt
operator|.
name|CatalogReader
name|catalogReader
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|updateColumnList
parameter_list|,
name|boolean
name|flattened
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|table
argument_list|,
name|catalogReader
argument_list|,
name|child
argument_list|,
name|operation
argument_list|,
name|updateColumnList
argument_list|,
name|flattened
argument_list|)
expr_stmt|;
assert|assert
name|child
operator|.
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO: user error in validator
block|}
name|this
operator|.
name|expression
operator|=
name|modifiableTable
operator|.
name|getExpression
argument_list|()
expr_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO: user error in validator
block|}
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
operator|new
name|EnumerableTableModificationRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|getCatalogReader
argument_list|()
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|getOperation
argument_list|()
argument_list|,
name|getUpdateColumnList
argument_list|()
argument_list|,
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|collectionParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Collection
operator|.
name|class
argument_list|,
literal|"collection"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|collectionParameter
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|expression
argument_list|,
name|ModifiableTable
operator|.
name|class
argument_list|)
argument_list|,
name|BuiltinMethod
operator|.
name|MODIFIABLE_TABLE_GET_MODIFIABLE_COLLECTION
operator|.
name|method
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|countParameter
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"count"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|collectionParameter
argument_list|,
literal|"size"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
literal|"into"
argument_list|,
name|collectionParameter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|SINGLETON_ENUMERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|subtract
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|collectionParameter
argument_list|,
literal|"size"
argument_list|)
argument_list|,
name|countParameter
argument_list|)
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toBlock
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableValuesRule
name|ENUMERABLE_VALUES_RULE
init|=
operator|new
name|EnumerableValuesRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|EnumerableValuesRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableValuesRule
parameter_list|()
block|{
name|super
argument_list|(
name|ValuesRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|,
literal|"EnumerableValuesRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|ValuesRel
name|valuesRel
init|=
operator|(
name|ValuesRel
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|EnumerableValuesRel
argument_list|(
name|valuesRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getTuples
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|plus
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableOneRowRule
name|ENUMERABLE_ONE_ROW_RULE
init|=
operator|new
name|EnumerableOneRowRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|EnumerableOneRowRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|EnumerableOneRowRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|OneRowRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|)
argument_list|,
literal|"EnumerableOneRowRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|OneRowRel
name|rel
init|=
operator|(
name|OneRowRel
operator|)
name|call
operator|.
name|getRels
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|ValuesRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|ValuesRel
name|valuesRel
init|=
operator|(
name|ValuesRel
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|EnumerableValuesRel
argument_list|(
name|valuesRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getTuples
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|plus
argument_list|(
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumerableValuesRel
extends|extends
name|ValuesRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|PhysType
name|physType
decl_stmt|;
name|EnumerableValuesRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
name|this
operator|.
name|physType
operator|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
operator|(
name|EnumerableConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
operator|new
name|EnumerableValuesRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
return|;
block|}
specifier|public
name|PhysType
name|getPhysType
parameter_list|()
block|{
return|return
name|physType
return|;
block|}
specifier|public
name|BlockExpression
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|)
block|{
comment|/*             return Linq4j.asEnumerable(                 new Object[][] {                     new Object[] {1, 2},                     new Object[] {3, 4}                 }); */
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
operator|(
name|JavaTypeFactory
operator|)
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|statements
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|rowClass
init|=
name|physType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RexLiteral
argument_list|>
name|tuple
range|:
name|tuples
control|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|literals
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|RexLiteral
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|fields
argument_list|,
name|tuple
argument_list|)
control|)
block|{
name|literals
operator|.
name|add
argument_list|(
name|RexToLixTranslator
operator|.
name|translateLiteral
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|pair
operator|.
name|left
operator|.
name|getType
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expressions
operator|.
name|add
argument_list|(
name|physType
operator|.
name|record
argument_list|(
name|literals
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|statements
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|AS_ENUMERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|newArrayInit
argument_list|(
name|Primitive
operator|.
name|box
argument_list|(
name|rowClass
argument_list|)
argument_list|,
name|expressions
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|statements
operator|.
name|toBlock
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JavaRules.java
end_comment

end_unit

