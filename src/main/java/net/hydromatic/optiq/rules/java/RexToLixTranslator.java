begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|ExpressionType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Translates {@link org.eigenbase.rex.RexNode REX expressions} to  * {@link net.hydromatic.linq4j.expressions.Expression linq4j expressions}.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|RexToLixTranslator
block|{
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Method
argument_list|,
name|SqlOperator
argument_list|>
name|JAVA_TO_SQL_METHOD_MAP
init|=
name|Util
operator|.
expr|<
name|Method
decl_stmt|,
name|SqlOperator
decl|>
name|mapOf
argument_list|(
name|findMethod
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"toUpperCase"
argument_list|)
argument_list|,
name|upperFunc
argument_list|,
name|findMethod
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"substring"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
argument_list|,
name|substringFunc
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Slot
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|RexNode
argument_list|,
name|Slot
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|RexProgram
name|program
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Slot
argument_list|>
name|inputSlots
init|=
operator|new
name|ArrayList
argument_list|<
name|Slot
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Set of expressions which are to be translated inline. That is, they      * should not be assigned to variables on first use. At present, the      * algorithm is to use a first pass to determine how many times each      * expression is used, and expressions are marked for inlining if they are      * used at most once. */
specifier|private
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|inlineRexSet
init|=
operator|new
name|HashSet
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Statement
argument_list|>
name|list
decl_stmt|;
specifier|private
specifier|static
name|Method
name|findMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
modifier|...
name|parameterTypes
parameter_list|)
block|{
try|try
block|{
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|parameterTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RexToLixTranslator
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
for|for
control|(
name|Expression
name|input
range|:
name|inputs
control|)
block|{
name|inputSlots
operator|.
name|add
argument_list|(
operator|new
name|Slot
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Translates a {@link RexProgram} to a sequence of expressions and      * declarations.      *      * @param inputs Variables holding the current record of each input      * relational expression      * @param program Program to be translated      * @return Sequence of expressions, optional condition      */
specifier|public
specifier|static
name|List
argument_list|<
name|Expression
argument_list|>
name|translateProjects
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|inputs
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|Statement
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|inputs
argument_list|)
operator|.
name|translate
argument_list|(
name|list
argument_list|,
name|program
operator|.
name|getProjectList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Expression
name|translate
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
name|Slot
name|slot
init|=
name|map
operator|.
name|get
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|slot
operator|==
literal|null
condition|)
block|{
name|Expression
name|expression
init|=
name|translate0
argument_list|(
name|expr
argument_list|)
decl_stmt|;
assert|assert
name|expression
operator|!=
literal|null
assert|;
specifier|final
name|ParameterExpression
name|parameter
decl_stmt|;
if|if
condition|(
operator|!
name|inlineRexSet
operator|.
name|contains
argument_list|(
name|expr
argument_list|)
operator|&&
operator|!
operator|(
name|expr
operator|instanceof
name|RexLocalRef
operator|)
condition|)
block|{
name|parameter
operator|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|expression
operator|.
name|getType
argument_list|()
argument_list|,
literal|"v"
operator|+
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parameter
operator|=
literal|null
expr_stmt|;
block|}
name|slot
operator|=
operator|new
name|Slot
argument_list|(
name|parameter
argument_list|,
name|expression
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameter
operator|!=
literal|null
operator|&&
name|list
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|slot
operator|.
name|parameterExpression
argument_list|,
name|slot
operator|.
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|expr
argument_list|,
name|slot
argument_list|)
expr_stmt|;
block|}
name|slot
operator|.
name|count
operator|++
expr_stmt|;
return|return
name|slot
operator|.
name|parameterExpression
operator|!=
literal|null
condition|?
name|slot
operator|.
name|parameterExpression
else|:
name|slot
operator|.
name|expression
return|;
block|}
specifier|private
name|Expression
name|translate0
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|RexInputRef
condition|)
block|{
comment|// TODO: multiple inputs, e.g. joins
specifier|final
name|Expression
name|input
init|=
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|index
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|expr
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|program
operator|.
name|getInputRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|input
return|;
block|}
if|else if
condition|(
name|input
operator|.
name|getType
argument_list|()
operator|==
name|Object
index|[]
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|arrayIndex
argument_list|(
name|input
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|field
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Types
operator|.
name|box
argument_list|(
name|JavaRules
operator|.
name|EnumUtil
operator|.
name|javaClass
argument_list|(
name|typeFactory
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|Types
operator|.
name|isPrimitive
argument_list|(
name|Types
operator|.
name|unbox
argument_list|(
name|input
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|||
name|input
operator|.
name|getType
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
name|input
return|;
block|}
else|else
block|{
return|return
name|Expressions
operator|.
name|field
argument_list|(
name|input
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|expr
operator|instanceof
name|RexLocalRef
condition|)
block|{
return|return
name|translate
argument_list|(
name|program
operator|.
name|getExprList
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexLocalRef
operator|)
name|expr
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|RexLiteral
condition|)
block|{
return|return
name|translateLiteral
argument_list|(
name|expr
argument_list|,
name|typeFactory
argument_list|)
return|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|RexCall
condition|)
block|{
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|expr
decl_stmt|;
specifier|final
name|SqlOperator
name|operator
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
name|CallImplementor
name|implementor
init|=
name|ImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
name|operator
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor
operator|!=
literal|null
condition|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|,
name|call
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
name|expr
operator|.
name|getKind
argument_list|()
condition|)
block|{
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate expression "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
comment|/** Translates a literal. */
specifier|public
specifier|static
name|Expression
name|translateLiteral
parameter_list|(
name|RexNode
name|expr
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|Type
name|javaClass
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaClass
operator|==
name|BigDecimal
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|Arrays
operator|.
expr|<
name|Expression
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|expr
operator|)
operator|.
name|getValue3
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Expressions
operator|.
name|constant
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|expr
operator|)
operator|.
name|getValue3
argument_list|()
argument_list|,
name|javaClass
argument_list|)
return|;
block|}
comment|/**      * Gets the expression for an input and counts it.      *      * @param index Input ordinal      * @return Expression to which an input should be translated      */
specifier|private
name|Expression
name|getInput
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Slot
name|slot
init|=
name|inputSlots
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|slot
operator|.
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|slot
operator|.
name|count
operator|>
literal|1
operator|&&
name|slot
operator|.
name|parameterExpression
operator|==
literal|null
condition|)
block|{
name|slot
operator|.
name|parameterExpression
operator|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|slot
operator|.
name|expression
operator|.
name|type
argument_list|,
literal|"current"
operator|+
name|index
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|slot
operator|.
name|parameterExpression
argument_list|,
name|slot
operator|.
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|slot
operator|.
name|parameterExpression
operator|!=
literal|null
condition|?
name|slot
operator|.
name|parameterExpression
else|:
name|slot
operator|.
name|expression
return|;
block|}
specifier|private
name|List
argument_list|<
name|Expression
argument_list|>
name|translateList
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operandList
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|rex
range|:
name|operandList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translate
argument_list|(
name|rex
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|List
argument_list|<
name|Expression
argument_list|>
name|translate
parameter_list|(
name|List
argument_list|<
name|Statement
argument_list|>
name|list
parameter_list|,
name|List
argument_list|<
name|RexLocalRef
argument_list|>
name|rexList
parameter_list|)
block|{
comment|// First pass. Count how many times each sub-expression is used.
name|this
operator|.
name|list
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|RexNode
name|rexExpr
range|:
name|rexList
control|)
block|{
name|translate
argument_list|(
name|rexExpr
argument_list|)
expr_stmt|;
block|}
comment|// Mark expressions as inline if they are not used more than once.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RexNode
argument_list|,
name|Slot
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|count
operator|<
literal|2
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|instanceof
name|RexLiteral
condition|)
block|{
name|inlineRexSet
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Second pass. When translating each expression, if it is used more
comment|// than once, the first time it is encountered, add a declaration to the
comment|// list and set its usage count to 0.
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|this
operator|.
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|translateds
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|rexExpr
range|:
name|rexList
control|)
block|{
name|translateds
operator|.
name|add
argument_list|(
name|translate
argument_list|(
name|rexExpr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|translateds
return|;
block|}
specifier|public
specifier|static
name|Expression
name|translateCondition
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|inputs
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|Statement
argument_list|>
name|list
parameter_list|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|x
init|=
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|inputs
argument_list|)
operator|.
name|translate
argument_list|(
name|list
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|program
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|x
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|x
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Expression
name|translateAggregate
parameter_list|(
name|Expression
name|grouping
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accessor
parameter_list|)
block|{
specifier|final
name|AggregateImplementor
name|implementor
init|=
name|ImpTable
operator|.
name|INSTANCE
operator|.
name|aggMap
operator|.
name|get
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggregation
operator|==
name|countOperator
condition|)
block|{
comment|// FIXME: count(x) and count(distinct x) don't work currently
name|accessor
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|implementor
operator|!=
literal|null
condition|)
block|{
return|return
name|implementor
operator|.
name|implementAggregate
argument_list|(
name|grouping
argument_list|,
name|accessor
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown agg "
operator|+
name|aggregation
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|Expression
name|convert
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Type
name|javaType
parameter_list|)
block|{
if|if
condition|(
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
name|operand
return|;
block|}
comment|// E.g. from "Short" to "int".
comment|// Generate "x.intValue()".
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
specifier|final
name|Primitive
name|fromPrimitive
init|=
name|Primitive
operator|.
name|ofBox
argument_list|(
name|operand
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromPrimitive
operator|==
literal|null
condition|)
block|{
comment|// E.g. from "Object" to "short".
comment|// Generate "(Short) x".
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|primitive
operator|.
name|boxClass
argument_list|)
return|;
block|}
if|if
condition|(
name|fromPrimitive
operator|!=
name|primitive
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|operand
argument_list|,
name|primitive
operator|.
name|primitiveName
operator|+
literal|"Value"
argument_list|)
return|;
block|}
block|}
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|javaType
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|Slot
block|{
name|ParameterExpression
name|parameterExpression
decl_stmt|;
name|Expression
name|expression
decl_stmt|;
name|int
name|count
decl_stmt|;
specifier|public
name|Slot
parameter_list|(
name|ParameterExpression
name|parameterExpression
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|parameterExpression
operator|=
name|parameterExpression
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
block|}
specifier|private
interface|interface
name|CallImplementor
block|{
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|ImpTable
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|CallImplementor
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|SqlOperator
argument_list|,
name|CallImplementor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Aggregation
argument_list|,
name|AggregateImplementor
argument_list|>
name|aggMap
init|=
operator|new
name|HashMap
argument_list|<
name|Aggregation
argument_list|,
name|AggregateImplementor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Aggregation
argument_list|,
name|AggregateImplementor2
argument_list|>
name|agg2Map
init|=
operator|new
name|HashMap
argument_list|<
name|Aggregation
argument_list|,
name|AggregateImplementor2
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ImpTable
parameter_list|()
block|{
name|defineMethod
argument_list|(
name|upperFunc
argument_list|,
literal|"upper"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|lowerFunc
argument_list|,
literal|"lower"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|substringFunc
argument_list|,
literal|"substring"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
name|defineBinary
argument_list|(
name|andOperator
argument_list|,
name|AndAlso
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|orOperator
argument_list|,
name|OrElse
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|lessThanOperator
argument_list|,
name|LessThan
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|lessThanOrEqualOperator
argument_list|,
name|LessThanOrEqual
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|greaterThanOperator
argument_list|,
name|GreaterThan
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|greaterThanOrEqualOperator
argument_list|,
name|GreaterThanOrEqual
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|equalsOperator
argument_list|,
name|Equal
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|notEqualsOperator
argument_list|,
name|NotEqual
argument_list|)
expr_stmt|;
name|defineUnary
argument_list|(
name|notOperator
argument_list|,
name|Not
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// logical
name|defineMethod
argument_list|(
name|andOperator
argument_list|,
literal|"and"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|orOperator
argument_list|,
literal|"or"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|notOperator
argument_list|,
literal|"not"
argument_list|)
expr_stmt|;
comment|// comparisons
name|defineMethod
argument_list|(
name|lessThanOperator
argument_list|,
literal|"lt"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|lessThanOrEqualOperator
argument_list|,
literal|"le"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|greaterThanOperator
argument_list|,
literal|"gt"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|greaterThanOrEqualOperator
argument_list|,
literal|"ge"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|equalsOperator
argument_list|,
literal|"eq"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|notEqualsOperator
argument_list|,
literal|"ne"
argument_list|)
expr_stmt|;
comment|// arithmetic
name|defineMethod
argument_list|(
name|plusOperator
argument_list|,
literal|"plus"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|minusOperator
argument_list|,
literal|"minus"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|multiplyOperator
argument_list|,
literal|"multiply"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|divideOperator
argument_list|,
literal|"divide"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|modFunc
argument_list|,
literal|"mod"
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|expFunc
argument_list|,
literal|"exp"
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|isNullOperator
argument_list|,
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
name|RexNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
assert|assert
name|operands
operator|.
name|length
operator|==
literal|1
assert|;
specifier|final
name|Expression
name|translate
init|=
name|translator
operator|.
name|translate
argument_list|(
name|operands
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|Expressions
operator|.
name|notEqual
argument_list|(
name|translate
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|caseOperator
argument_list|,
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|implementRecurse
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Expression
name|implementRecurse
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|RexNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|operands
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// the "else" clause
return|return
name|translator
operator|.
name|translate
argument_list|(
name|operands
index|[
name|i
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
name|operands
index|[
name|i
index|]
argument_list|)
argument_list|,
name|translator
operator|.
name|translate
argument_list|(
name|operands
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
name|implementRecurse
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|i
operator|+
literal|2
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SqlStdOperatorTable
operator|.
name|castFunc
argument_list|,
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|length
operator|==
literal|1
assert|;
name|RexNode
name|expr
init|=
name|call
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Expression
name|operand
init|=
name|translator
operator|.
name|translate
argument_list|(
name|expr
argument_list|)
decl_stmt|;
return|return
name|convert
argument_list|(
name|operand
argument_list|,
name|translator
operator|.
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|countOperator
argument_list|,
operator|new
name|BuiltinAggregateImplementor
argument_list|(
literal|"longCount"
argument_list|)
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|sumOperator
argument_list|,
operator|new
name|BuiltinAggregateImplementor
argument_list|(
literal|"sum"
argument_list|)
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|minOperator
argument_list|,
operator|new
name|BuiltinAggregateImplementor
argument_list|(
literal|"min"
argument_list|)
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|maxOperator
argument_list|,
operator|new
name|BuiltinAggregateImplementor
argument_list|(
literal|"max"
argument_list|)
argument_list|)
expr_stmt|;
name|agg2Map
operator|.
name|put
argument_list|(
name|countOperator
argument_list|,
operator|new
name|CountImplementor2
argument_list|()
argument_list|)
expr_stmt|;
name|agg2Map
operator|.
name|put
argument_list|(
name|sumOperator
argument_list|,
operator|new
name|SumImplementor2
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MinMaxImplementor2
name|minMax
init|=
operator|new
name|MinMaxImplementor2
argument_list|()
decl_stmt|;
name|agg2Map
operator|.
name|put
argument_list|(
name|minOperator
argument_list|,
name|minMax
argument_list|)
expr_stmt|;
name|agg2Map
operator|.
name|put
argument_list|(
name|maxOperator
argument_list|,
name|minMax
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineMethod
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|String
name|functionName
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|operator
argument_list|,
operator|new
name|MethodImplementor
argument_list|(
name|functionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineUnary
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|ExpressionType
name|expressionType
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|operator
argument_list|,
operator|new
name|UnaryImplementor
argument_list|(
name|expressionType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineBinary
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|ExpressionType
name|expressionType
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|operator
argument_list|,
operator|new
name|BinaryImplementor
argument_list|(
name|expressionType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|ImpTable
name|INSTANCE
init|=
operator|new
name|ImpTable
argument_list|()
decl_stmt|;
specifier|public
name|CallImplementor
name|get
parameter_list|(
specifier|final
name|SqlOperator
name|operator
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|operator
argument_list|)
return|;
block|}
specifier|public
name|AggregateImplementor
name|get
parameter_list|(
specifier|final
name|Aggregation
name|aggregation
parameter_list|)
block|{
return|return
name|aggMap
operator|.
name|get
argument_list|(
name|aggregation
argument_list|)
return|;
block|}
specifier|public
name|AggregateImplementor2
name|get2
parameter_list|(
specifier|final
name|Aggregation
name|aggregation
parameter_list|)
block|{
return|return
name|agg2Map
operator|.
name|get
argument_list|(
name|aggregation
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MethodImplementor
implements|implements
name|CallImplementor
block|{
specifier|private
specifier|final
name|String
name|methodName
decl_stmt|;
name|MethodImplementor
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|methodName
argument_list|,
name|translator
operator|.
name|translateList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BinaryImplementor
implements|implements
name|CallImplementor
block|{
specifier|private
specifier|final
name|ExpressionType
name|expressionType
decl_stmt|;
name|BinaryImplementor
parameter_list|(
name|ExpressionType
name|expressionType
parameter_list|)
block|{
name|this
operator|.
name|expressionType
operator|=
name|expressionType
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|makeBinary
argument_list|(
name|expressionType
argument_list|,
name|translator
operator|.
name|translate
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|translator
operator|.
name|translate
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|UnaryImplementor
implements|implements
name|CallImplementor
block|{
specifier|private
specifier|final
name|ExpressionType
name|expressionType
decl_stmt|;
name|UnaryImplementor
parameter_list|(
name|ExpressionType
name|expressionType
parameter_list|)
block|{
name|this
operator|.
name|expressionType
operator|=
name|expressionType
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|makeUnary
argument_list|(
name|expressionType
argument_list|,
name|translator
operator|.
name|translate
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Implements an aggregate function by generating a call to a method that      * takes an enumeration and an accessor function. */
interface|interface
name|AggregateImplementor
block|{
name|Expression
name|implementAggregate
parameter_list|(
name|Expression
name|grouping
parameter_list|,
name|Expression
name|accessor
parameter_list|)
function_decl|;
block|}
comment|/** Implements an aggregate function by generating expressions to      * initialize, add to, and get a result from, an accumulator. */
interface|interface
name|AggregateImplementor2
block|{
name|Expression
name|implementInit
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
function_decl|;
name|Expression
name|implementAdd
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
function_decl|;
name|Expression
name|implementResult
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|BuiltinAggregateImplementor
implements|implements
name|AggregateImplementor
block|{
specifier|private
specifier|final
name|String
name|methodName
decl_stmt|;
specifier|public
name|BuiltinAggregateImplementor
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
specifier|public
name|Expression
name|implementAggregate
parameter_list|(
name|Expression
name|grouping
parameter_list|,
name|Expression
name|accessor
parameter_list|)
block|{
return|return
name|accessor
operator|==
literal|null
condition|?
name|Expressions
operator|.
name|call
argument_list|(
name|grouping
argument_list|,
name|methodName
argument_list|)
else|:
name|Expressions
operator|.
name|call
argument_list|(
name|grouping
argument_list|,
name|methodName
argument_list|,
name|accessor
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CountImplementor2
implements|implements
name|AggregateImplementor2
block|{
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
comment|// REVIEW: Should we check whether value is NOT NULL?
comment|//  Or should the container do that, and only call us if
comment|//  the value is NOT NULL?
return|return
name|Expressions
operator|.
name|add
argument_list|(
name|accumulator
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|,
name|accumulator
operator|.
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SumImplementor2
implements|implements
name|AggregateImplementor2
block|{
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
assert|assert
name|arguments
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|Expressions
operator|.
name|add
argument_list|(
name|accumulator
argument_list|,
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|accumulator
operator|.
name|type
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MinMaxImplementor2
implements|implements
name|AggregateImplementor2
block|{
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
return|return
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|returnType
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
assert|assert
name|arguments
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|aggregation
operator|==
name|minOperator
condition|?
literal|"lesser"
else|:
literal|"greater"
argument_list|,
name|accumulator
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RexToLixTranslator.java
end_comment

end_unit

