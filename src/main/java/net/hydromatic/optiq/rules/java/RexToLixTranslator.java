begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Translates {@link org.eigenbase.rex.RexNode REX expressions} to  * {@link net.hydromatic.linq4j.expressions.Expression linq4j expressions}.  *  * @author jhyde  */
end_comment

begin_class
specifier|public
class|class
name|RexToLixTranslator
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Pair
argument_list|<
name|ParameterExpression
argument_list|,
name|Expression
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|RexNode
argument_list|,
name|Pair
argument_list|<
name|ParameterExpression
argument_list|,
name|Expression
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|ParameterExpression
argument_list|,
name|Expression
argument_list|>
argument_list|>
name|localMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|ParameterExpression
argument_list|,
name|Expression
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|inputs
decl_stmt|;
specifier|private
name|RexToLixTranslator
parameter_list|(
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
comment|/**      * Translates a {@link RexProgram} to a sequence of expressions and      * declarations.      *      * @param inputs Variables holding the current record of each input      * relational expression      * @param program Program to be translated      * @return Sequence of expressions, optional condition      */
specifier|public
specifier|static
name|Pair
argument_list|<
name|Expression
argument_list|,
name|List
argument_list|<
name|Expression
argument_list|>
argument_list|>
name|translateProgram
parameter_list|(
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|inputs
parameter_list|,
name|RexProgram
name|program
parameter_list|)
block|{
return|return
operator|new
name|RexToLixTranslator
argument_list|(
name|inputs
argument_list|)
operator|.
name|translateProgram
argument_list|(
name|program
argument_list|)
return|;
block|}
specifier|private
name|ParameterExpression
name|define
parameter_list|(
name|RexNode
name|rexExpr
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
name|Pair
argument_list|<
name|ParameterExpression
argument_list|,
name|Expression
argument_list|>
name|pair
init|=
name|map
operator|.
name|get
argument_list|(
name|rexExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|!=
literal|null
condition|)
block|{
return|return
name|pair
operator|.
name|left
return|;
block|}
specifier|final
name|Expression
name|expression
init|=
name|translate
argument_list|(
name|rexExpr
argument_list|)
decl_stmt|;
name|String
name|variableName
init|=
literal|"v"
operator|+
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|expression
operator|.
name|getType
argument_list|()
argument_list|,
name|variableName
argument_list|)
decl_stmt|;
name|pair
operator|=
name|Pair
operator|.
name|of
argument_list|(
name|parameter
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|rexExpr
argument_list|,
name|pair
argument_list|)
expr_stmt|;
if|if
condition|(
name|ordinal
operator|>=
literal|0
condition|)
block|{
name|localMap
operator|.
name|put
argument_list|(
name|ordinal
argument_list|,
name|pair
argument_list|)
expr_stmt|;
block|}
return|return
name|parameter
return|;
block|}
specifier|private
name|Expression
name|translate
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|RexInputRef
condition|)
block|{
return|return
name|inputs
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|expr
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|RexLocalRef
condition|)
block|{
comment|// we require that expression has previously been registered
return|return
name|localMap
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexLocalRef
operator|)
name|expr
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|left
return|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|RexLiteral
condition|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|expr
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate expression "
operator|+
name|expr
argument_list|)
throw|;
block|}
specifier|private
name|Pair
argument_list|<
name|Expression
argument_list|,
name|List
argument_list|<
name|Expression
argument_list|>
argument_list|>
name|translateProgram
parameter_list|(
name|RexProgram
name|program
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RexNode
name|rexExpr
range|:
name|program
operator|.
name|getExprList
argument_list|()
control|)
block|{
name|define
argument_list|(
name|rexExpr
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RexLocalRef
argument_list|>
name|projectList
init|=
name|program
operator|.
name|getProjectList
argument_list|()
decl_stmt|;
return|return
name|Pair
operator|.
expr|<
name|Expression
operator|,
name|List
argument_list|<
name|Expression
argument_list|>
operator|>
name|of
argument_list|(
name|program
operator|.
name|getCondition
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|translate
argument_list|(
name|program
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|Expression
argument_list|>
argument_list|()
block|{
specifier|public
name|Expression
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|translate
argument_list|(
name|projectList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|projectList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RexToLixTranslator.java
end_comment

end_unit

