begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function0
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|Helper
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqPrepare
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|ChainedSqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|SqlToRelConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|janino
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|janino
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Shit just got real.  *  *<p>This class is public so that projects that create their own JDBC driver  * and server can fine-tune preferences. However, this class and its methods are  * subject to change without notice.</p>  */
end_comment

begin_class
specifier|public
class|class
name|OptiqPrepareImpl
implements|implements
name|OptiqPrepare
block|{
specifier|public
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"optiq.debug"
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Whether to enable the collation trait. Some extra optimizations are    * possible if enabled, but queries should work either way. At some point    * this will become a preference, or we will run multiple phases: first    * disabled, then enabled. */
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLE_COLLATION_TRAIT
init|=
literal|true
decl_stmt|;
specifier|public
name|ParseResult
name|parse
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|OptiqCatalogReader
name|catalogReader
init|=
operator|new
name|OptiqCatalogReader
argument_list|(
name|context
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|context
operator|.
name|getDefaultSchemaPath
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
name|SqlParser
name|parser
init|=
operator|new
name|SqlParser
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parser
operator|.
name|parseStmt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parse failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|SqlValidator
name|validator
init|=
operator|new
name|OptiqSqlValidator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|catalogReader
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode1
init|=
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
decl_stmt|;
return|return
operator|new
name|ParseResult
argument_list|(
name|sql
argument_list|,
name|sqlNode1
argument_list|,
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|sqlNode1
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a collection of planner factories.    *    *<p>The collection must have at least one factory, and each factory must    * create a planner. If the collection has more than one planner, Optiq will    * try each planner in turn.</p>    *    *<p>One of the things you can do with this mechanism is to try a simpler,    * faster, planner with a smaller rule set first, then fall back to a more    * complex planner for complex and costly queries.</p>    *    *<p>The default implementation returns a factory that calls    * {@link #createPlanner()}.</p> */
specifier|protected
name|List
argument_list|<
name|Function0
argument_list|<
name|RelOptPlanner
argument_list|>
argument_list|>
name|createPlannerFactories
parameter_list|()
block|{
return|return
name|Collections
operator|.
expr|<
name|Function0
argument_list|<
name|RelOptPlanner
argument_list|>
operator|>
name|singletonList
argument_list|(
operator|new
name|Function0
argument_list|<
name|RelOptPlanner
argument_list|>
argument_list|()
block|{
specifier|public
name|RelOptPlanner
name|apply
parameter_list|()
block|{
return|return
name|createPlanner
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Creates a query planner and initializes it with a default set of    * rules. */
specifier|protected
name|RelOptPlanner
name|createPlanner
parameter_list|()
block|{
specifier|final
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|ENABLE_COLLATION_TRAIT
condition|)
block|{
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|registerAbstractRelationalRules
argument_list|()
expr_stmt|;
block|}
name|RelOptUtil
operator|.
name|registerAbstractRels
argument_list|(
name|planner
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_JOIN_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_CALC_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_AGGREGATE_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_UNION_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_INTERSECT_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_MINUS_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_TABLE_MODIFICATION_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_VALUES_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_ONE_ROW_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_CUSTOM_FROM_ARRAY_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_ARRAY_FROM_CUSTOM_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|EnumerableCustomCalcRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|TableAccessRule
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|PushFilterPastProjectRule
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|PushFilterPastJoinRule
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|RemoveDistinctAggregateRule
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|ReduceAggregatesRule
operator|.
name|instance
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|SwapJoinRule
operator|.
name|instance
argument_list|)
expr_stmt|;
return|return
name|planner
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|prepareQueryable
parameter_list|(
name|Context
name|context
parameter_list|,
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
return|return
name|prepare_
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|queryable
argument_list|,
name|queryable
operator|.
name|getElementType
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|prepareSql
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|,
name|Queryable
argument_list|<
name|T
argument_list|>
name|expression
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
block|{
return|return
name|prepare_
argument_list|(
name|context
argument_list|,
name|sql
argument_list|,
name|expression
argument_list|,
name|elementType
argument_list|,
name|maxRowCount
argument_list|)
return|;
block|}
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|prepare_
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|,
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|OptiqCatalogReader
name|catalogReader
init|=
operator|new
name|OptiqCatalogReader
argument_list|(
name|context
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|context
operator|.
name|getDefaultSchemaPath
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Function0
argument_list|<
name|RelOptPlanner
argument_list|>
argument_list|>
name|plannerFactories
init|=
name|createPlannerFactories
argument_list|()
decl_stmt|;
if|if
condition|(
name|plannerFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"no planner factories"
argument_list|)
throw|;
block|}
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
for|for
control|(
name|Function0
argument_list|<
name|RelOptPlanner
argument_list|>
name|plannerFactory
range|:
name|plannerFactories
control|)
block|{
specifier|final
name|RelOptPlanner
name|planner
init|=
name|plannerFactory
operator|.
name|apply
argument_list|()
decl_stmt|;
if|if
condition|(
name|planner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"factory returned null planner"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|prepare2_
argument_list|(
name|context
argument_list|,
name|sql
argument_list|,
name|queryable
argument_list|,
name|elementType
argument_list|,
name|maxRowCount
argument_list|,
name|catalogReader
argument_list|,
name|planner
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RelOptPlanner
operator|.
name|CannotPlanException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
throw|throw
name|exception
throw|;
block|}
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|prepare2_
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|,
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|int
name|maxRowCount
parameter_list|,
name|OptiqCatalogReader
name|catalogReader
parameter_list|,
name|RelOptPlanner
name|planner
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
operator|.
name|Prefer
name|prefer
decl_stmt|;
if|if
condition|(
name|elementType
operator|==
name|Object
index|[]
operator|.
name|class
condition|)
block|{
name|prefer
operator|=
name|EnumerableRel
operator|.
name|Prefer
operator|.
name|ARRAY
expr_stmt|;
block|}
else|else
block|{
name|prefer
operator|=
name|EnumerableRel
operator|.
name|Prefer
operator|.
name|CUSTOM
expr_stmt|;
block|}
specifier|final
name|OptiqPreparingStmt
name|preparingStmt
init|=
operator|new
name|OptiqPreparingStmt
argument_list|(
name|catalogReader
argument_list|,
name|typeFactory
argument_list|,
name|context
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|prefer
argument_list|,
name|planner
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|x
decl_stmt|;
specifier|final
name|Prepare
operator|.
name|PreparedResult
name|preparedResult
decl_stmt|;
if|if
condition|(
name|sql
operator|!=
literal|null
condition|)
block|{
assert|assert
name|queryable
operator|==
literal|null
assert|;
name|SqlParser
name|parser
init|=
operator|new
name|SqlParser
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parser
operator|.
name|parseStmt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parse failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|Schema
name|rootSchema
init|=
name|context
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
specifier|final
name|ChainedSqlOperatorTable
name|opTab
init|=
operator|new
name|ChainedSqlOperatorTable
argument_list|(
name|Arrays
operator|.
expr|<
name|SqlOperatorTable
operator|>
name|asList
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
operator|new
name|OptiqSqlOperatorTable
argument_list|(
name|rootSchema
argument_list|,
name|typeFactory
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidator
name|validator
init|=
operator|new
name|OptiqSqlValidator
argument_list|(
name|opTab
argument_list|,
name|catalogReader
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
name|preparedResult
operator|=
name|preparingStmt
operator|.
name|prepareSql
argument_list|(
name|sqlNode
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|validator
argument_list|,
literal|true
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|sqlNode
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INSERT
case|:
case|case
name|EXPLAIN
case|:
comment|// FIXME: getValidatedNodeType is wrong for DML
name|x
operator|=
name|RelOptUtil
operator|.
name|createDmlRowType
argument_list|(
name|sqlNode
operator|.
name|getKind
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
break|break;
default|default:
name|x
operator|=
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|sqlNode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|queryable
operator|!=
literal|null
assert|;
name|x
operator|=
name|context
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createType
argument_list|(
name|elementType
argument_list|)
expr_stmt|;
name|preparedResult
operator|=
name|preparingStmt
operator|.
name|prepareQueryable
argument_list|(
name|queryable
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
comment|// TODO: parameters
specifier|final
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|// TODO: column meta data
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMetaData
argument_list|>
argument_list|()
decl_stmt|;
name|RelDataType
name|jdbcType
init|=
name|makeStruct
argument_list|(
name|typeFactory
argument_list|,
name|x
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|originList
init|=
name|preparedResult
operator|.
name|getFieldOrigins
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelDataTypeField
argument_list|>
name|pair
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|jdbcType
operator|.
name|getFieldList
argument_list|()
argument_list|)
control|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|pair
operator|.
name|e
decl_stmt|;
name|RelDataType
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|origins
init|=
name|originList
operator|.
name|get
argument_list|(
name|pair
operator|.
name|i
argument_list|)
decl_stmt|;
name|SqlTypeName
name|sqlTypeName
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnMetaData
argument_list|(
name|columns
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|type
operator|.
name|isNullable
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|true
argument_list|,
name|type
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|origins
operator|==
literal|null
condition|?
literal|null
else|:
name|origins
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|origins
operator|==
literal|null
condition|?
literal|null
else|:
name|origins
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|type
operator|.
name|getPrecision
argument_list|()
operator|==
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
condition|?
literal|0
else|:
name|type
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|type
operator|.
name|getScale
argument_list|()
operator|==
name|RelDataType
operator|.
name|SCALE_NOT_SPECIFIED
condition|?
literal|0
else|:
name|type
operator|.
name|getScale
argument_list|()
argument_list|,
name|origins
operator|==
literal|null
condition|?
literal|null
else|:
name|origins
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|sqlTypeName
operator|.
name|getJdbcOrdinal
argument_list|()
argument_list|,
name|sqlTypeName
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|(
name|Class
operator|)
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|x
operator|.
name|isStruct
argument_list|()
condition|?
name|x
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|pair
operator|.
name|i
argument_list|)
operator|.
name|getType
argument_list|()
else|:
name|type
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
init|=
operator|(
name|Enumerable
argument_list|<
name|T
argument_list|>
operator|)
name|preparedResult
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxRowCount
operator|>=
literal|0
condition|)
block|{
comment|// Apply limit. In JDBC 0 means "no limit". But for us, -1 means
comment|// "no limit", and 0 is a valid limit.
name|enumerable
operator|=
name|enumerable
operator|.
name|take
argument_list|(
name|maxRowCount
argument_list|)
expr_stmt|;
block|}
name|Class
name|resultClazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|preparedResult
operator|instanceof
name|Typed
condition|)
block|{
name|resultClazz
operator|=
operator|(
name|Class
operator|)
operator|(
operator|(
name|Typed
operator|)
name|preparedResult
operator|)
operator|.
name|getElementType
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|PrepareResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|sql
argument_list|,
name|parameters
argument_list|,
name|columns
argument_list|,
name|enumerable
argument_list|,
name|resultClazz
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RelDataType
name|makeStruct
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isStruct
argument_list|()
condition|)
block|{
return|return
name|type
return|;
block|}
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
operator|.
name|of
argument_list|(
literal|"$0"
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|OptiqPreparingStmt
extends|extends
name|Prepare
block|{
specifier|private
specifier|final
name|RelOptPlanner
name|planner
decl_stmt|;
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|private
name|int
name|expansionDepth
decl_stmt|;
specifier|private
name|SqlValidator
name|sqlValidator
decl_stmt|;
specifier|private
name|EnumerableRel
operator|.
name|Prefer
name|prefer
decl_stmt|;
specifier|public
name|OptiqPreparingStmt
parameter_list|(
name|CatalogReader
name|catalogReader
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|EnumerableRel
operator|.
name|Prefer
name|prefer
parameter_list|,
name|RelOptPlanner
name|planner
parameter_list|)
block|{
name|super
argument_list|(
name|catalogReader
argument_list|,
name|EnumerableConvention
operator|.
name|ARRAY
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|prefer
operator|=
name|prefer
expr_stmt|;
name|this
operator|.
name|planner
operator|=
name|planner
expr_stmt|;
name|this
operator|.
name|rexBuilder
operator|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|Class
name|runtimeContextClass
parameter_list|)
block|{
block|}
specifier|public
name|PreparedResult
name|prepareQueryable
parameter_list|(
name|Queryable
name|queryable
parameter_list|,
name|RelDataType
name|resultType
parameter_list|)
block|{
name|queryString
operator|=
literal|null
expr_stmt|;
name|Class
name|runtimeContextClass
init|=
name|Object
operator|.
name|class
decl_stmt|;
name|init
argument_list|(
name|runtimeContextClass
argument_list|)
expr_stmt|;
specifier|final
name|RelOptQuery
name|query
init|=
operator|new
name|RelOptQuery
argument_list|(
name|planner
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|query
operator|.
name|createCluster
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|RelNode
name|rootRel
init|=
operator|new
name|LixToRelTranslator
argument_list|(
name|cluster
argument_list|,
name|OptiqPreparingStmt
operator|.
name|this
argument_list|)
operator|.
name|translate
argument_list|(
name|queryable
argument_list|)
decl_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end sql2rel"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|jdbcType
init|=
name|makeStruct
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|resultType
argument_list|)
decl_stmt|;
name|fieldOrigins
operator|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|jdbcType
operator|.
name|getFieldCount
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Structured type flattening, view expansion, and plugging in
comment|// physical storage.
name|rootRel
operator|=
name|flattenTypes
argument_list|(
name|rootRel
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Trim unused fields.
name|rootRel
operator|=
name|trimUnusedFields
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
name|rootRel
operator|=
name|optimize
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|)
expr_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end optimization"
argument_list|)
expr_stmt|;
block|}
return|return
name|implement
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|,
name|SqlKind
operator|.
name|SELECT
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SqlToRelConverter
name|getSqlToRelConverter
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|CatalogReader
name|catalogReader
parameter_list|)
block|{
name|SqlToRelConverter
name|sqlToRelConverter
init|=
operator|new
name|SqlToRelConverter
argument_list|(
name|this
argument_list|,
name|validator
argument_list|,
name|catalogReader
argument_list|,
name|planner
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|sqlToRelConverter
operator|.
name|setTrimUnusedFields
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|sqlToRelConverter
return|;
block|}
annotation|@
name|Override
specifier|protected
name|EnumerableRelImplementor
name|getRelImplementor
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
return|return
operator|new
name|EnumerableRelImplementor
argument_list|(
name|rexBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldAlwaysWriteJavaFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|flattenTypes
parameter_list|(
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|restructure
parameter_list|)
block|{
return|return
name|rootRel
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelNode
name|decorrelate
parameter_list|(
name|SqlNode
name|query
parameter_list|,
name|RelNode
name|rootRel
parameter_list|)
block|{
return|return
name|rootRel
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|expandView
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|String
name|queryString
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|)
block|{
name|expansionDepth
operator|++
expr_stmt|;
name|SqlParser
name|parser
init|=
operator|new
name|SqlParser
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parser
operator|.
name|parseQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parse failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// View may have different schema path than current connection.
specifier|final
name|OptiqCatalogReader
name|catalogReader
init|=
operator|new
name|OptiqCatalogReader
argument_list|(
operator|(
operator|(
name|OptiqCatalogReader
operator|)
name|this
operator|.
name|catalogReader
operator|)
operator|.
name|rootSchema
argument_list|,
name|schemaPath
argument_list|,
operator|(
operator|(
name|OptiqCatalogReader
operator|)
name|this
operator|.
name|catalogReader
operator|)
operator|.
name|typeFactory
argument_list|)
decl_stmt|;
name|SqlValidator
name|validator
init|=
name|createSqlValidator
argument_list|(
name|catalogReader
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode1
init|=
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
decl_stmt|;
name|SqlToRelConverter
name|sqlToRelConverter
init|=
name|getSqlToRelConverter
argument_list|(
name|validator
argument_list|,
name|catalogReader
argument_list|)
decl_stmt|;
name|RelNode
name|relNode
init|=
name|sqlToRelConverter
operator|.
name|convertQuery
argument_list|(
name|sqlNode1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
operator|--
name|expansionDepth
expr_stmt|;
return|return
name|relNode
return|;
block|}
specifier|private
name|SqlValidatorImpl
name|createSqlValidator
parameter_list|(
name|CatalogReader
name|catalogReader
parameter_list|)
block|{
return|return
operator|new
name|SqlValidatorImpl
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|catalogReader
argument_list|,
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|SqlConformance
operator|.
name|Default
argument_list|)
block|{ }
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SqlValidator
name|getSqlValidator
parameter_list|()
block|{
if|if
condition|(
name|sqlValidator
operator|==
literal|null
condition|)
block|{
name|sqlValidator
operator|=
name|createSqlValidator
argument_list|(
name|catalogReader
argument_list|)
expr_stmt|;
block|}
return|return
name|sqlValidator
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PreparedResult
name|createPreparedExplanation
parameter_list|(
name|RelDataType
name|resultType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|explainAsXml
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|)
block|{
return|return
operator|new
name|OptiqPreparedExplain
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|,
name|explainAsXml
argument_list|,
name|detailLevel
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PreparedResult
name|implement
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|SqlKind
name|sqlKind
parameter_list|)
block|{
name|RelDataType
name|resultType
init|=
name|rootRel
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|boolean
name|isDml
init|=
name|sqlKind
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|DML
argument_list|)
decl_stmt|;
name|EnumerableRelImplementor
name|relImplementor
init|=
name|getRelImplementor
argument_list|(
name|rootRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|ClassDeclaration
name|expr
init|=
name|relImplementor
operator|.
name|implementRoot
argument_list|(
operator|(
name|EnumerableRel
operator|)
name|rootRel
argument_list|,
name|prefer
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|Expressions
operator|.
name|toString
argument_list|(
name|expr
operator|.
name|memberDeclarations
argument_list|,
literal|"\n"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|Hook
operator|.
name|JAVA_PLAN
operator|.
name|run
argument_list|(
name|s
argument_list|)
expr_stmt|;
specifier|final
name|Executable
name|executable
decl_stmt|;
try|try
block|{
name|executable
operator|=
operator|(
name|Executable
operator|)
name|ClassBodyEvaluator
operator|.
name|createFastClassBodyEvaluator
argument_list|(
operator|new
name|Scanner
argument_list|(
literal|null
argument_list|,
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|,
name|expr
operator|.
name|name
argument_list|,
name|Utilities
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Executable
operator|.
name|class
block|,
name|Typed
operator|.
name|class
block|}
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|Helper
operator|.
name|INSTANCE
operator|.
name|wrap
argument_list|(
literal|"Error while compiling generated Java code:\n"
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end codegen"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end compilation"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PreparedResultImpl
argument_list|(
name|resultType
argument_list|,
name|fieldOrigins
argument_list|,
name|rootRel
argument_list|,
name|mapTableModOp
argument_list|(
name|isDml
argument_list|,
name|sqlKind
argument_list|)
argument_list|,
name|isDml
argument_list|)
block|{
specifier|public
name|String
name|getCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
block|{
return|return
name|executable
operator|.
name|execute
argument_list|(
name|schema
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getElementType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Typed
operator|)
name|executable
operator|)
operator|.
name|getElementType
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|OptiqPreparedExplain
extends|extends
name|Prepare
operator|.
name|PreparedExplain
block|{
specifier|public
name|OptiqPreparedExplain
parameter_list|(
name|RelDataType
name|resultType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|explainAsXml
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|)
block|{
name|super
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|,
name|explainAsXml
argument_list|,
name|detailLevel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
block|{
specifier|final
name|String
name|explanation
init|=
name|getCode
argument_list|()
decl_stmt|;
return|return
name|Linq4j
operator|.
name|singletonEnumerable
argument_list|(
name|explanation
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|RelOptTableImpl
implements|implements
name|Prepare
operator|.
name|PreparingTable
block|{
specifier|private
specifier|final
name|RelOptSchema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
name|RelOptTableImpl
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|String
index|[]
name|names
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
name|this
argument_list|(
name|schema
argument_list|,
name|rowType
argument_list|,
name|names
argument_list|,
name|table
argument_list|,
name|table
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RelOptTableImpl
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|String
index|[]
name|names
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
argument_list|(
name|schema
argument_list|,
name|rowType
argument_list|,
name|names
argument_list|,
literal|null
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RelOptTableImpl
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|String
index|[]
name|names
parameter_list|,
name|Table
name|table
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
assert|assert
name|expression
operator|!=
literal|null
operator|:
literal|"table may be null; expr may not"
assert|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|table
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|double
name|getRowCount
parameter_list|()
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Double
name|rowCount
init|=
name|table
operator|.
name|getStatistic
argument_list|()
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowCount
operator|!=
literal|null
condition|)
block|{
return|return
name|rowCount
return|;
block|}
block|}
return|return
literal|100d
return|;
block|}
specifier|public
name|RelOptSchema
name|getRelOptSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|table
operator|instanceof
name|TranslatableTable
condition|)
block|{
return|return
operator|(
operator|(
name|TranslatableTable
operator|)
name|table
operator|)
operator|.
name|toRel
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
return|;
block|}
name|RelOptCluster
name|cluster
init|=
name|context
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|EnumerableConvention
name|convention
init|=
name|EnumerableConvention
operator|.
name|CUSTOM
decl_stmt|;
name|Class
name|elementType
init|=
name|Object
index|[]
operator|.
name|class
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
operator|&&
name|table
operator|.
name|getElementType
argument_list|()
operator|instanceof
name|Class
condition|)
block|{
name|elementType
operator|=
operator|(
name|Class
operator|)
name|table
operator|.
name|getElementType
argument_list|()
expr_stmt|;
if|if
condition|(
name|Object
index|[]
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
condition|)
block|{
name|convention
operator|=
name|EnumerableConvention
operator|.
name|ARRAY
expr_stmt|;
block|}
else|else
block|{
name|convention
operator|=
name|EnumerableConvention
operator|.
name|CUSTOM
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JavaRules
operator|.
name|EnumerableTableAccessRel
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|convention
argument_list|)
argument_list|,
name|this
argument_list|,
name|expression
argument_list|,
name|elementType
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelCollation
argument_list|>
name|getCollationList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isKey
parameter_list|(
name|BitSet
name|columns
parameter_list|)
block|{
return|return
name|table
operator|.
name|getStatistic
argument_list|()
operator|.
name|isKey
argument_list|(
name|columns
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQualifiedName
parameter_list|()
block|{
return|return
name|names
return|;
block|}
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|SqlMonotonicity
operator|.
name|NotMonotonic
return|;
block|}
specifier|public
name|SqlAccessType
name|getAllowedAccess
parameter_list|()
block|{
return|return
name|SqlAccessType
operator|.
name|ALL
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|OptiqCatalogReader
implements|implements
name|Prepare
operator|.
name|CatalogReader
block|{
specifier|private
specifier|final
name|Schema
name|rootSchema
decl_stmt|;
specifier|private
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|defaultSchema
decl_stmt|;
specifier|public
name|OptiqCatalogReader
parameter_list|(
name|Schema
name|rootSchema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|defaultSchema
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
assert|assert
name|rootSchema
operator|!=
name|defaultSchema
assert|;
name|this
operator|.
name|rootSchema
operator|=
name|rootSchema
expr_stmt|;
name|this
operator|.
name|defaultSchema
operator|=
name|defaultSchema
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
block|}
specifier|public
name|RelOptTableImpl
name|getTable
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
comment|// First look in the default schema, if any.
if|if
condition|(
name|defaultSchema
operator|!=
literal|null
condition|)
block|{
name|RelOptTableImpl
name|table
init|=
name|getTableFrom
argument_list|(
name|names
argument_list|,
name|defaultSchema
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
return|;
block|}
block|}
comment|// If not found, look in the root schema
return|return
name|getTableFrom
argument_list|(
name|names
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|RelOptTableImpl
name|getTableFrom
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaNames
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pairs
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
name|rootSchema
decl_stmt|;
for|for
control|(
name|String
name|schemaName
range|:
name|schemaNames
control|)
block|{
name|schema
operator|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|schemaName
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Schema
name|subSchema
init|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|subSchema
operator|!=
literal|null
condition|)
block|{
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|name
argument_list|,
name|subSchema
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|=
name|subSchema
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Table
name|table
init|=
name|schema
operator|.
name|getTable
argument_list|(
name|name
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|name
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// not enough objects to match all names
return|return
literal|null
return|;
block|}
return|return
operator|new
name|RelOptTableImpl
argument_list|(
name|this
argument_list|,
name|table
operator|.
name|getRowType
argument_list|()
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|pairs
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|pairs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|table
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|RelDataType
name|getNamedType
parameter_list|(
name|SqlIdentifier
name|typeName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|getAllSchemaObjectNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getSchemaName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|RelOptTableImpl
name|getTableForMember
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|getTable
argument_list|(
name|names
argument_list|)
return|;
block|}
specifier|public
name|RelDataTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
specifier|public
name|void
name|registerRules
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
throws|throws
name|Exception
block|{
block|}
block|}
interface|interface
name|ScalarTranslator
block|{
name|RexNode
name|toRex
parameter_list|(
name|BlockExpression
name|expression
parameter_list|)
function_decl|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|toRexList
parameter_list|(
name|BlockExpression
name|expression
parameter_list|)
function_decl|;
name|RexNode
name|toRex
parameter_list|(
name|Expression
name|expression
parameter_list|)
function_decl|;
name|ScalarTranslator
name|bind
parameter_list|(
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
function_decl|;
block|}
specifier|static
class|class
name|EmptyScalarTranslator
implements|implements
name|ScalarTranslator
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|public
name|EmptyScalarTranslator
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
block|}
specifier|public
specifier|static
name|ScalarTranslator
name|empty
parameter_list|(
name|RexBuilder
name|builder
parameter_list|)
block|{
return|return
operator|new
name|EmptyScalarTranslator
argument_list|(
name|builder
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|toRexList
parameter_list|(
name|BlockExpression
name|expression
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|simpleList
init|=
name|simpleList
argument_list|(
name|expression
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|expression1
range|:
name|simpleList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toRex
argument_list|(
name|expression1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|RexNode
name|toRex
parameter_list|(
name|BlockExpression
name|expression
parameter_list|)
block|{
return|return
name|toRex
argument_list|(
name|Blocks
operator|.
name|simple
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Expression
argument_list|>
name|simpleList
parameter_list|(
name|BlockExpression
name|expression
parameter_list|)
block|{
name|Expression
name|simple
init|=
name|Blocks
operator|.
name|simple
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|simple
operator|instanceof
name|NewExpression
condition|)
block|{
name|NewExpression
name|newExpression
init|=
operator|(
name|NewExpression
operator|)
name|simple
decl_stmt|;
return|return
name|newExpression
operator|.
name|arguments
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|simple
argument_list|)
return|;
block|}
block|}
specifier|public
name|RexNode
name|toRex
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
switch|switch
condition|(
name|expression
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|MemberAccess
case|:
return|return
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|toRex
argument_list|(
operator|(
operator|(
name|MemberExpression
operator|)
name|expression
operator|)
operator|.
name|expression
argument_list|)
argument_list|,
operator|(
operator|(
name|MemberExpression
operator|)
name|expression
operator|)
operator|.
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|GreaterThan
case|:
return|return
name|binary
argument_list|(
name|expression
argument_list|,
name|SqlStdOperatorTable
operator|.
name|greaterThanOperator
argument_list|)
return|;
case|case
name|LessThan
case|:
return|return
name|binary
argument_list|(
name|expression
argument_list|,
name|SqlStdOperatorTable
operator|.
name|lessThanOperator
argument_list|)
return|;
case|case
name|Parameter
case|:
return|return
name|parameter
argument_list|(
operator|(
name|ParameterExpression
operator|)
name|expression
argument_list|)
return|;
case|case
name|Call
case|:
name|MethodCallExpression
name|call
init|=
operator|(
name|MethodCallExpression
operator|)
name|expression
decl_stmt|;
name|SqlOperator
name|operator
init|=
name|RexToLixTranslator
operator|.
name|JAVA_TO_SQL_METHOD_MAP
operator|.
name|get
argument_list|(
name|call
operator|.
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|!=
literal|null
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|operator
argument_list|,
name|toRex
argument_list|(
name|Expressions
operator|.
expr|<
name|Expression
operator|>
name|list
argument_list|()
operator|.
name|appendIfNotNull
argument_list|(
name|call
operator|.
name|targetExpression
argument_list|)
operator|.
name|appendAll
argument_list|(
name|call
operator|.
name|expressions
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could translate call to method "
operator|+
name|call
operator|.
name|method
argument_list|)
throw|;
case|case
name|Constant
case|:
specifier|final
name|ConstantExpression
name|constant
init|=
operator|(
name|ConstantExpression
operator|)
name|expression
decl_stmt|;
name|Object
name|value
init|=
name|constant
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|Number
name|number
init|=
operator|(
name|Number
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Double
operator|||
name|value
operator|instanceof
name|Float
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeApproxLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|(
name|BigDecimal
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|constant
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unknown expression type "
operator|+
name|expression
operator|.
name|getNodeType
argument_list|()
operator|+
literal|" "
operator|+
name|expression
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RexNode
name|binary
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|SqlBinaryOperator
name|op
parameter_list|)
block|{
name|BinaryExpression
name|call
init|=
operator|(
name|BinaryExpression
operator|)
name|expression
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|,
name|toRex
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|call
operator|.
name|expression0
argument_list|,
name|call
operator|.
name|expression1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|RexNode
argument_list|>
name|toRex
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|expression
range|:
name|expressions
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toRex
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|ScalarTranslator
name|bind
parameter_list|(
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|new
name|LambdaScalarTranslator
argument_list|(
name|rexBuilder
argument_list|,
name|parameterList
argument_list|,
name|values
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|parameter
parameter_list|(
name|ParameterExpression
name|param
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LambdaScalarTranslator
extends|extends
name|EmptyScalarTranslator
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
decl_stmt|;
specifier|public
name|LambdaScalarTranslator
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
block|{
name|super
argument_list|(
name|rexBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameterList
operator|=
name|parameterList
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
specifier|public
name|RexNode
name|parameter
parameter_list|(
name|ParameterExpression
name|param
parameter_list|)
block|{
name|int
name|i
init|=
name|parameterList
operator|.
name|indexOf
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|OptiqSqlOperatorTable
implements|implements
name|SqlOperatorTable
block|{
specifier|private
specifier|final
name|Schema
name|rootSchema
decl_stmt|;
specifier|private
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|public
name|OptiqSqlOperatorTable
parameter_list|(
name|Schema
name|rootSchema
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|this
operator|.
name|rootSchema
operator|=
name|rootSchema
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|lookupOperatorOverloads
parameter_list|(
name|SqlIdentifier
name|opName
parameter_list|,
name|SqlFunctionCategory
name|category
parameter_list|,
name|SqlSyntax
name|syntax
parameter_list|)
block|{
if|if
condition|(
name|syntax
operator|!=
name|SqlSyntax
operator|.
name|Function
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// FIXME: ignoring prefix of opName
name|String
name|name
init|=
name|opName
operator|.
name|names
index|[
name|opName
operator|.
name|names
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|TableFunction
argument_list|>
name|tableFunctions
init|=
name|rootSchema
operator|.
name|getTableFunctions
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableFunctions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|toOps
argument_list|(
name|name
argument_list|,
name|tableFunctions
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|toOps
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|TableFunction
argument_list|>
name|tableFunctions
parameter_list|)
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|SqlOperator
argument_list|>
argument_list|()
block|{
specifier|public
name|SqlOperator
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|toOp
argument_list|(
name|name
argument_list|,
name|tableFunctions
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|tableFunctions
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|SqlOperator
name|toOp
parameter_list|(
name|String
name|name
parameter_list|,
name|TableFunction
name|fun
parameter_list|)
block|{
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|typeFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlTypeFamily
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Parameter
name|o
range|:
operator|(
name|List
argument_list|<
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Parameter
argument_list|>
operator|)
name|fun
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|argTypes
operator|.
name|add
argument_list|(
name|o
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|typeFamilies
operator|.
name|add
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SqlFunction
argument_list|(
name|name
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
operator|new
name|ExplicitReturnTypeInference
argument_list|(
name|typeFactory
operator|.
name|createType
argument_list|(
name|fun
operator|.
name|getElementType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ExplicitOperandTypeInference
argument_list|(
name|argTypes
operator|.
name|toArray
argument_list|(
operator|new
name|RelDataType
index|[
name|argTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
name|SqlTypeStrategies
operator|.
name|family
argument_list|(
name|typeFamilies
operator|.
name|toArray
argument_list|(
operator|new
name|SqlTypeFamily
index|[
name|typeFamilies
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|getOperatorList
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** Validator. */
specifier|private
specifier|static
class|class
name|OptiqSqlValidator
extends|extends
name|SqlValidatorImpl
block|{
specifier|public
name|OptiqSqlValidator
parameter_list|(
name|SqlOperatorTable
name|opTab
parameter_list|,
name|OptiqCatalogReader
name|catalogReader
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
argument_list|(
name|opTab
argument_list|,
name|catalogReader
argument_list|,
name|typeFactory
argument_list|,
name|SqlConformance
operator|.
name|Default
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RelDataType
name|getLogicalSourceRowType
parameter_list|(
name|RelDataType
name|sourceRowType
parameter_list|,
name|SqlInsert
name|insert
parameter_list|)
block|{
return|return
operator|(
operator|(
name|JavaTypeFactory
operator|)
name|typeFactory
operator|)
operator|.
name|toSql
argument_list|(
name|sourceRowType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelDataType
name|getLogicalTargetRowType
parameter_list|(
name|RelDataType
name|targetRowType
parameter_list|,
name|SqlInsert
name|insert
parameter_list|)
block|{
return|return
operator|(
operator|(
name|JavaTypeFactory
operator|)
name|typeFactory
operator|)
operator|.
name|toSql
argument_list|(
name|targetRowType
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End OptiqPrepareImpl.java
end_comment

end_unit

