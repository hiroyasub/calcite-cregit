begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate2
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|Helper
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqPrepare
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|Executable
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|ClassDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|janino
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|stmt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|TableAccessRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|MultisetSqlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|SqlToRelConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Shit just got real.  *  * @author jhyde  */
end_comment

begin_class
class|class
name|OptiqPrepareImpl
implements|implements
name|OptiqPrepare
block|{
specifier|static
specifier|final
name|Method
name|METHOD_QUERYABLE_SELECT
decl_stmt|;
specifier|static
specifier|final
name|Method
name|METHOD_ENUMERABLE_SELECT
decl_stmt|;
specifier|static
specifier|final
name|Method
name|METHOD_ENUMERABLE_SELECT2
decl_stmt|;
specifier|static
specifier|final
name|Method
name|METHOD_ENUMERABLE_WHERE
decl_stmt|;
specifier|static
specifier|final
name|Method
name|METHOD_ENUMERABLE_WHERE2
decl_stmt|;
specifier|static
specifier|final
name|Method
name|METHOD_ENUMERABLE_ASQUERYABLE
decl_stmt|;
static|static
block|{
try|try
block|{
name|METHOD_QUERYABLE_SELECT
operator|=
name|Queryable
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"select"
argument_list|,
name|FunctionExpression
operator|.
name|class
argument_list|)
expr_stmt|;
name|METHOD_ENUMERABLE_SELECT
operator|=
name|Enumerable
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"select"
argument_list|,
name|Function1
operator|.
name|class
argument_list|)
expr_stmt|;
name|METHOD_ENUMERABLE_SELECT2
operator|=
name|Enumerable
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"select"
argument_list|,
name|Function2
operator|.
name|class
argument_list|)
expr_stmt|;
name|METHOD_ENUMERABLE_WHERE
operator|=
name|Enumerable
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"where"
argument_list|,
name|Predicate1
operator|.
name|class
argument_list|)
expr_stmt|;
name|METHOD_ENUMERABLE_WHERE2
operator|=
name|Enumerable
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"where"
argument_list|,
name|Predicate2
operator|.
name|class
argument_list|)
expr_stmt|;
name|METHOD_ENUMERABLE_ASQUERYABLE
operator|=
name|Enumerable
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"asQueryable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|PrepareResult
name|prepare2
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Type
name|elementType
parameter_list|)
block|{
return|return
name|prepare
argument_list|(
name|statement
argument_list|,
literal|null
argument_list|,
name|expression
argument_list|,
name|elementType
argument_list|)
return|;
block|}
specifier|public
name|PrepareResult
name|prepare
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|String
name|sql
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Type
name|elementType
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|statement
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|OptiqCatalogReader
name|catalogReader
init|=
operator|new
name|OptiqCatalogReader
argument_list|(
name|statement
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
name|RelOptConnectionImpl
name|relOptConnection
init|=
operator|new
name|RelOptConnectionImpl
argument_list|(
name|catalogReader
argument_list|)
decl_stmt|;
specifier|final
name|OptiqPreparingStmt
name|preparingStmt
init|=
operator|new
name|OptiqPreparingStmt
argument_list|(
name|relOptConnection
argument_list|,
name|typeFactory
argument_list|,
name|statement
operator|.
name|getRootSchema
argument_list|()
argument_list|)
decl_stmt|;
name|preparingStmt
operator|.
name|setResultCallingConvention
argument_list|(
name|CallingConvention
operator|.
name|ENUMERABLE
argument_list|)
expr_stmt|;
specifier|final
name|RelDataType
name|x
decl_stmt|;
specifier|final
name|PreparedResult
name|preparedResult
decl_stmt|;
if|if
condition|(
name|sql
operator|!=
literal|null
condition|)
block|{
assert|assert
name|expression
operator|==
literal|null
assert|;
name|SqlParser
name|parser
init|=
operator|new
name|SqlParser
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parser
operator|.
name|parseQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parse failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|SqlValidator
name|validator
init|=
operator|new
name|SqlValidatorImpl
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|catalogReader
argument_list|,
name|typeFactory
argument_list|,
name|SqlConformance
operator|.
name|Default
argument_list|)
block|{ }
decl_stmt|;
name|preparedResult
operator|=
name|preparingStmt
operator|.
name|prepareSql
argument_list|(
name|sqlNode
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|validator
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|x
operator|=
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|sqlNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|expression
operator|!=
literal|null
assert|;
name|x
operator|=
name|statement
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createJavaType
argument_list|(
name|Types
operator|.
name|toClass
argument_list|(
name|elementType
argument_list|)
argument_list|)
expr_stmt|;
name|preparedResult
operator|=
name|preparingStmt
operator|.
name|prepareExpression
argument_list|(
name|expression
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
comment|// TODO: parameters
specifier|final
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|// TODO: column meta data
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMetaData
argument_list|>
argument_list|()
decl_stmt|;
name|RelDataType
name|jdbcType
init|=
name|makeStruct
argument_list|(
name|typeFactory
argument_list|,
name|x
argument_list|)
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|jdbcType
operator|.
name|getFields
argument_list|()
control|)
block|{
name|RelDataType
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|SqlTypeName
name|sqlTypeName
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnMetaData
argument_list|(
name|columns
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|type
operator|.
name|isNullable
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|sqlTypeName
operator|.
name|allowsPrec
argument_list|()
operator|&&
literal|false
condition|?
name|type
operator|.
name|getPrecision
argument_list|()
else|:
operator|-
literal|1
argument_list|,
name|sqlTypeName
operator|.
name|allowsScale
argument_list|()
condition|?
name|type
operator|.
name|getScale
argument_list|()
else|:
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|sqlTypeName
operator|.
name|getJdbcOrdinal
argument_list|()
argument_list|,
name|sqlTypeName
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PrepareResult
argument_list|(
name|sql
argument_list|,
name|parameters
argument_list|,
name|columns
argument_list|,
operator|(
name|Enumerable
operator|)
name|preparedResult
operator|.
name|execute
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RelDataType
name|makeStruct
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isStruct
argument_list|()
condition|)
block|{
return|return
name|type
return|;
block|}
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
operator|.
name|of
argument_list|(
literal|"$0"
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|OptiqPreparingStmt
extends|extends
name|OJPreparingStmt
block|{
specifier|private
specifier|final
name|RelOptPlanner
name|planner
decl_stmt|;
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|public
name|OptiqPreparingStmt
parameter_list|(
name|RelOptConnection
name|connection
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|planner
operator|=
operator|new
name|VolcanoPlanner
argument_list|()
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|CallingConventionTraitDef
operator|.
name|instance
argument_list|)
expr_stmt|;
name|RelOptUtil
operator|.
name|registerAbstractRels
argument_list|(
name|planner
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_JOIN_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_CALC_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_AGGREGATE_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_UNION_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_INTERSECT_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_MINUS_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|TableAccessRule
operator|.
name|instance
argument_list|)
expr_stmt|;
name|rexBuilder
operator|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PreparedResult
name|prepareExpression
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|RelDataType
name|resultType
parameter_list|)
block|{
name|queryString
operator|=
literal|null
expr_stmt|;
name|Class
name|runtimeContextClass
init|=
name|connection
operator|.
name|getClass
argument_list|()
decl_stmt|;
specifier|final
name|Argument
index|[]
name|arguments
init|=
block|{
operator|new
name|Argument
argument_list|(
name|connectionVariable
argument_list|,
name|runtimeContextClass
argument_list|,
name|connection
argument_list|)
block|}
decl_stmt|;
name|ClassDeclaration
name|decl
init|=
name|init
argument_list|(
name|arguments
argument_list|)
decl_stmt|;
specifier|final
name|RelOptQuery
name|query
init|=
operator|new
name|RelOptQuery
argument_list|(
name|planner
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|query
operator|.
name|createCluster
argument_list|(
name|env
argument_list|,
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|RelNode
name|rootRel
init|=
operator|new
name|LixToRelTranslator
argument_list|(
name|cluster
argument_list|,
name|connection
argument_list|)
operator|.
name|translate
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end sql2rel"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|jdbcType
init|=
name|makeStruct
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|resultType
argument_list|)
decl_stmt|;
name|fieldOrigins
operator|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|jdbcType
operator|.
name|getFieldCount
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Structured type flattening, view expansion, and plugging in
comment|// physical storage.
name|rootRel
operator|=
name|flattenTypes
argument_list|(
name|rootRel
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rootRel
operator|=
operator|(
name|RelNode
operator|)
name|optimize
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|)
expr_stmt|;
name|containsJava
operator|=
name|treeContainsJava
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end optimization"
argument_list|)
expr_stmt|;
block|}
return|return
name|implement
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|,
name|SqlKind
operator|.
name|SELECT
argument_list|,
name|decl
argument_list|,
name|arguments
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SqlToRelConverter
name|getSqlToRelConverter
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|RelOptConnection
name|connection
parameter_list|)
block|{
return|return
operator|new
name|SqlToRelConverter
argument_list|(
name|validator
argument_list|,
name|connection
operator|.
name|getRelOptSchema
argument_list|()
argument_list|,
name|env
argument_list|,
name|planner
argument_list|,
name|connection
argument_list|,
name|rexBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|EnumerableRelImplementor
name|getRelImplementor
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
return|return
operator|new
name|EnumerableRelImplementor
argument_list|(
name|rexBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getClassRoot
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getCompilerClassName
parameter_list|()
block|{
return|return
literal|"org.eigenbase.javac.JaninoCompiler"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getJavaRoot
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getTempPackageName
parameter_list|()
block|{
return|return
literal|"foo"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getTempMethodName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getTempClassName
parameter_list|()
block|{
return|return
literal|"Foo"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldAlwaysWriteJavaFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldSetConnectionInfo
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelNode
name|flattenTypes
parameter_list|(
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|restructure
parameter_list|)
block|{
return|return
name|rootRel
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelNode
name|decorrelate
parameter_list|(
name|SqlNode
name|query
parameter_list|,
name|RelNode
name|rootRel
parameter_list|)
block|{
return|return
name|rootRel
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PreparedExecution
name|implement
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|SqlKind
name|sqlKind
parameter_list|,
name|ClassDeclaration
name|decl
parameter_list|,
name|Argument
index|[]
name|args
parameter_list|)
block|{
name|RelDataType
name|resultType
init|=
name|rootRel
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|boolean
name|isDml
init|=
name|sqlKind
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|DML
argument_list|)
decl_stmt|;
name|javaCompiler
operator|=
name|createCompiler
argument_list|()
expr_stmt|;
name|EnumerableRelImplementor
name|relImplementor
init|=
name|getRelImplementor
argument_list|(
name|rootRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|BlockExpression
name|expr
init|=
name|relImplementor
operator|.
name|implementRoot
argument_list|(
operator|(
name|EnumerableRel
operator|)
name|rootRel
argument_list|)
decl_stmt|;
name|ParameterExpression
name|root0
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Map
operator|.
name|class
argument_list|,
literal|"root0"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|Expressions
operator|.
name|toString
argument_list|(
name|Blocks
operator|.
name|create
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|OptiqCatalogReader
operator|.
name|rootExpression
argument_list|,
name|root0
argument_list|)
argument_list|,
name|expr
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
specifier|final
name|Executable
name|executable
decl_stmt|;
try|try
block|{
name|executable
operator|=
operator|(
name|Executable
operator|)
name|ExpressionEvaluator
operator|.
name|createFastScriptEvaluator
argument_list|(
name|s
argument_list|,
name|Executable
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"root0"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|Helper
operator|.
name|INSTANCE
operator|.
name|wrap
argument_list|(
literal|"Error while compiling generated Java code:\n"
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end codegen"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end compilation"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PreparedExecution
argument_list|(
literal|null
argument_list|,
name|rootRel
argument_list|,
name|resultType
argument_list|,
name|isDml
argument_list|,
name|mapTableModOp
argument_list|(
name|isDml
argument_list|,
name|sqlKind
argument_list|)
argument_list|,
literal|null
argument_list|)
block|{
specifier|public
name|Object
name|execute
parameter_list|()
block|{
return|return
name|executable
operator|.
name|execute
argument_list|(
name|schema
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Table
implements|implements
name|SqlValidatorTable
implements|,
name|RelOptTable
block|{
specifier|private
specifier|final
name|RelOptSchema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|names
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|public
name|Table
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|String
index|[]
name|names
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
specifier|public
name|double
name|getRowCount
parameter_list|()
block|{
return|return
literal|100
return|;
block|}
specifier|public
name|RelOptSchema
name|getRelOptSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptConnection
name|connection
parameter_list|)
block|{
return|return
operator|new
name|JavaRules
operator|.
name|EnumerableTableAccessRel
argument_list|(
name|cluster
argument_list|,
name|this
argument_list|,
name|connection
argument_list|,
name|expression
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelCollation
argument_list|>
name|getCollationList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
specifier|public
name|String
index|[]
name|getQualifiedName
parameter_list|()
block|{
return|return
name|names
return|;
block|}
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|SqlMonotonicity
operator|.
name|NotMonotonic
return|;
block|}
specifier|public
name|SqlAccessType
name|getAllowedAccess
parameter_list|()
block|{
return|return
name|SqlAccessType
operator|.
name|READ_ONLY
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|OptiqCatalogReader
implements|implements
name|SqlValidatorCatalogReader
implements|,
name|RelOptSchema
block|{
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|RelDataTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ParameterExpression
name|rootExpression
init|=
name|Expressions
operator|.
name|variable
argument_list|(
name|Map
operator|.
name|class
argument_list|,
literal|"root"
argument_list|)
decl_stmt|;
specifier|public
name|OptiqCatalogReader
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|(
specifier|final
name|String
index|[]
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pairs
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Schema
name|schema2
init|=
name|schema
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|names
index|[
name|i
index|]
decl_stmt|;
name|Schema
name|subSchema
init|=
name|schema2
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|subSchema
operator|!=
literal|null
condition|)
block|{
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|name
argument_list|,
name|subSchema
argument_list|)
argument_list|)
expr_stmt|;
name|schema2
operator|=
name|subSchema
expr_stmt|;
continue|continue;
block|}
specifier|final
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Table
name|table
init|=
name|schema2
operator|.
name|getTable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|name
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|names
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// not enough objects to match all names
return|return
literal|null
return|;
block|}
name|Type
name|type
init|=
name|table
operator|.
name|getElementType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|MultisetSqlType
condition|)
block|{
name|Expression
name|expression
init|=
name|foo
argument_list|(
name|schema
argument_list|,
name|rootExpression
argument_list|,
name|pairs
argument_list|)
decl_stmt|;
return|return
operator|new
name|Table
argument_list|(
name|this
argument_list|,
name|type
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|names
argument_list|,
name|toEnumerable
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Expression
name|foo
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
name|String
name|name
init|=
name|pair
operator|.
name|left
decl_stmt|;
name|Object
name|object
init|=
name|pair
operator|.
name|right
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Schema
condition|)
block|{
name|Schema
name|subSchema
init|=
operator|(
name|Schema
operator|)
name|object
decl_stmt|;
name|expression
operator|=
name|schema
operator|.
name|getSubSchemaExpression
argument_list|(
name|expression
argument_list|,
name|subSchema
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|schema
operator|=
name|subSchema
expr_stmt|;
block|}
else|else
block|{
name|Member
name|member
init|=
operator|(
name|Member
operator|)
name|object
decl_stmt|;
name|expression
operator|=
name|schema
operator|.
name|getMemberExpression
argument_list|(
name|expression
argument_list|,
name|member
argument_list|,
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|expression
return|;
block|}
specifier|private
name|Expression
name|toEnumerable
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|Type
name|type
init|=
name|expression
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Types
operator|.
name|isAssignableFrom
argument_list|(
name|Enumerable
operator|.
name|class
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
name|expression
return|;
block|}
if|if
condition|(
name|Types
operator|.
name|isArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|Linq4j
operator|.
name|class
argument_list|,
literal|"asEnumerable3"
argument_list|,
comment|// FIXME
name|Collections
operator|.
name|singletonList
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot convert expression ["
operator|+
name|expression
operator|+
literal|"] to enumerable"
argument_list|)
throw|;
block|}
specifier|public
name|RelDataType
name|getNamedType
parameter_list|(
name|SqlIdentifier
name|typeName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|getAllSchemaObjectNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getSchemaName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Table
name|getTableForMember
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
block|{
return|return
name|getTable
argument_list|(
name|names
argument_list|)
return|;
block|}
specifier|public
name|RelDataTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
specifier|public
name|void
name|registerRules
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
throws|throws
name|Exception
block|{
block|}
block|}
specifier|private
specifier|static
class|class
name|RelOptConnectionImpl
implements|implements
name|RelOptConnection
block|{
specifier|private
specifier|final
name|RelOptSchema
name|schema
decl_stmt|;
specifier|public
name|RelOptConnectionImpl
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
specifier|public
name|RelOptSchema
name|getRelOptSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|Object
name|contentsAsArray
parameter_list|(
name|String
name|qualifier
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LixToRelTranslator
block|{
specifier|final
name|RelOptCluster
name|cluster
decl_stmt|;
specifier|private
specifier|final
name|RelOptConnection
name|connection
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|public
name|LixToRelTranslator
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptConnection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
expr_stmt|;
block|}
specifier|public
name|RelNode
name|translate
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|instanceof
name|MethodCallExpression
condition|)
block|{
name|MethodCallExpression
name|call
init|=
operator|(
name|MethodCallExpression
operator|)
name|expression
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|method
operator|.
name|equals
argument_list|(
name|METHOD_ENUMERABLE_SELECT
argument_list|)
condition|)
block|{
name|RelNode
name|child
init|=
name|translate
argument_list|(
name|call
operator|.
name|targetExpression
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProjectRel
argument_list|(
name|cluster
argument_list|,
name|child
argument_list|,
name|toRex
argument_list|(
name|child
argument_list|,
operator|(
name|FunctionExpression
operator|)
name|call
operator|.
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ProjectRel
operator|.
name|Flags
operator|.
name|Boxed
argument_list|)
return|;
block|}
if|if
condition|(
name|call
operator|.
name|method
operator|.
name|equals
argument_list|(
name|METHOD_ENUMERABLE_WHERE
argument_list|)
condition|)
block|{
name|RelNode
name|child
init|=
name|translate
argument_list|(
name|call
operator|.
name|targetExpression
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterRel
argument_list|(
name|cluster
argument_list|,
name|child
argument_list|,
name|toRex
argument_list|(
operator|(
name|FunctionExpression
operator|)
name|call
operator|.
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|child
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|call
operator|.
name|method
operator|.
name|equals
argument_list|(
name|METHOD_ENUMERABLE_ASQUERYABLE
argument_list|)
condition|)
block|{
return|return
operator|new
name|TableAccessRel
argument_list|(
name|cluster
argument_list|,
operator|new
name|Table
argument_list|(
literal|null
argument_list|,
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|Types
operator|.
name|toClass
argument_list|(
name|Types
operator|.
name|getComponentType
argument_list|(
name|call
operator|.
name|targetExpression
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|call
operator|.
name|targetExpression
argument_list|)
argument_list|,
name|connection
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unknown method "
operator|+
name|call
operator|.
name|method
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unknown expression type "
operator|+
name|expression
operator|.
name|getNodeType
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
name|RexNode
index|[]
name|toRex
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|FunctionExpression
name|expression
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
operator|new
name|RelNode
index|[]
block|{
name|child
block|}
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeRangeReference
argument_list|(
name|input
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ScalarTranslator
name|translator
init|=
name|EmptyScalarTranslator
operator|.
name|empty
argument_list|(
name|rexBuilder
argument_list|)
operator|.
name|bind
argument_list|(
name|expression
operator|.
name|parameterList
argument_list|,
name|list
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexList
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|simple
init|=
name|Blocks
operator|.
name|simple
argument_list|(
name|expression
operator|.
name|body
argument_list|)
decl_stmt|;
for|for
control|(
name|Expression
name|expression1
range|:
name|fieldExpressions
argument_list|(
name|simple
argument_list|)
control|)
block|{
name|rexList
operator|.
name|add
argument_list|(
name|translator
operator|.
name|toRex
argument_list|(
name|expression1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rexList
operator|.
name|toArray
argument_list|(
operator|new
name|RexNode
index|[
name|rexList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Expression
argument_list|>
name|fieldExpressions
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|instanceof
name|NewExpression
condition|)
block|{
comment|// Note: We are assuming that the arguments to the constructor
comment|// are the same order as the fields of the class.
return|return
operator|(
operator|(
name|NewExpression
operator|)
name|expression
operator|)
operator|.
name|arguments
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unsupported expression type "
operator|+
name|expression
argument_list|)
throw|;
block|}
specifier|private
name|RexNode
name|toRex
parameter_list|(
name|FunctionExpression
name|expression
parameter_list|,
name|RelNode
modifier|...
name|inputs
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|inputs
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeRangeReference
argument_list|(
name|input
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|EmptyScalarTranslator
operator|.
name|empty
argument_list|(
name|rexBuilder
argument_list|)
operator|.
name|bind
argument_list|(
name|expression
operator|.
name|parameterList
argument_list|,
name|list
argument_list|)
operator|.
name|toRex
argument_list|(
name|expression
operator|.
name|body
argument_list|)
return|;
block|}
block|}
specifier|private
interface|interface
name|ScalarTranslator
block|{
name|RexNode
name|toRex
parameter_list|(
name|BlockExpression
name|expression
parameter_list|)
function_decl|;
name|RexNode
name|toRex
parameter_list|(
name|Expression
name|expression
parameter_list|)
function_decl|;
name|ScalarTranslator
name|bind
parameter_list|(
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|EmptyScalarTranslator
implements|implements
name|ScalarTranslator
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|public
name|EmptyScalarTranslator
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
block|}
specifier|public
specifier|static
name|ScalarTranslator
name|empty
parameter_list|(
name|RexBuilder
name|builder
parameter_list|)
block|{
return|return
operator|new
name|EmptyScalarTranslator
argument_list|(
name|builder
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|toRex
parameter_list|(
name|BlockExpression
name|expression
parameter_list|)
block|{
return|return
name|toRex
argument_list|(
name|Blocks
operator|.
name|simple
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|toRex
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
switch|switch
condition|(
name|expression
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|MemberAccess
case|:
return|return
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|toRex
argument_list|(
operator|(
operator|(
name|MemberExpression
operator|)
name|expression
operator|)
operator|.
name|expression
argument_list|)
argument_list|,
operator|(
operator|(
name|MemberExpression
operator|)
name|expression
operator|)
operator|.
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|GreaterThan
case|:
return|return
name|binary
argument_list|(
name|expression
argument_list|,
name|SqlStdOperatorTable
operator|.
name|greaterThanOperator
argument_list|)
return|;
case|case
name|LessThan
case|:
return|return
name|binary
argument_list|(
name|expression
argument_list|,
name|SqlStdOperatorTable
operator|.
name|lessThanOperator
argument_list|)
return|;
case|case
name|Parameter
case|:
return|return
name|parameter
argument_list|(
operator|(
name|ParameterExpression
operator|)
name|expression
argument_list|)
return|;
case|case
name|Call
case|:
name|MethodCallExpression
name|call
init|=
operator|(
name|MethodCallExpression
operator|)
name|expression
decl_stmt|;
name|SqlOperator
name|operator
init|=
name|RexToLixTranslator
operator|.
name|JAVA_TO_SQL_METHOD_MAP
operator|.
name|get
argument_list|(
name|call
operator|.
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|!=
literal|null
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|operator
argument_list|,
name|toRex
argument_list|(
name|Expressions
operator|.
expr|<
name|Expression
operator|>
name|list
argument_list|()
operator|.
name|appendIfNotNull
argument_list|(
name|call
operator|.
name|targetExpression
argument_list|)
operator|.
name|appendAll
argument_list|(
name|call
operator|.
name|expressions
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could translate call to method "
operator|+
name|call
operator|.
name|method
argument_list|)
throw|;
case|case
name|Constant
case|:
specifier|final
name|ConstantExpression
name|constant
init|=
operator|(
name|ConstantExpression
operator|)
name|expression
decl_stmt|;
name|Object
name|value
init|=
name|constant
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|Number
name|number
init|=
operator|(
name|Number
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Double
operator|||
name|value
operator|instanceof
name|Float
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeApproxLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|(
name|BigDecimal
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|constant
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unknown expression type "
operator|+
name|expression
operator|.
name|getNodeType
argument_list|()
operator|+
literal|" "
operator|+
name|expression
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RexNode
name|binary
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|SqlBinaryOperator
name|op
parameter_list|)
block|{
name|BinaryExpression
name|call
init|=
operator|(
name|BinaryExpression
operator|)
name|expression
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|,
name|toRex
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|call
operator|.
name|expression0
argument_list|,
name|call
operator|.
name|expression1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|RexNode
argument_list|>
name|toRex
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|expression
range|:
name|expressions
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toRex
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|ScalarTranslator
name|bind
parameter_list|(
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|new
name|LambdaScalarTranslator
argument_list|(
name|rexBuilder
argument_list|,
name|parameterList
argument_list|,
name|values
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|parameter
parameter_list|(
name|ParameterExpression
name|param
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LambdaScalarTranslator
extends|extends
name|EmptyScalarTranslator
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
decl_stmt|;
specifier|public
name|LambdaScalarTranslator
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
block|{
name|super
argument_list|(
name|rexBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameterList
operator|=
name|parameterList
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
specifier|public
name|RexNode
name|parameter
parameter_list|(
name|ParameterExpression
name|param
parameter_list|)
block|{
name|int
name|i
init|=
name|parameterList
operator|.
name|indexOf
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End OptiqPrepareImpl.java
end_comment

end_unit

