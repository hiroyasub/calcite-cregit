begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|lamdba
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Static methods for dealing with {@link Predicate} objects.  */
end_comment

begin_class
specifier|public
class|class
name|Predicates
block|{
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Object
argument_list|>
name|IS_NULL
init|=
operator|new
name|AbstractPredicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Object
argument_list|>
name|NON_NULL
init|=
operator|new
name|AbstractPredicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|!=
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Object
argument_list|>
name|FALSE
init|=
operator|new
name|AbstractPredicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Object
argument_list|>
name|TRUE
init|=
operator|new
name|AbstractPredicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Predicates
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No instances!"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|isNull
parameter_list|()
block|{
return|return
operator|(
name|Predicate
argument_list|<
name|T
argument_list|>
operator|)
name|IS_NULL
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|nonNull
parameter_list|()
block|{
return|return
operator|(
name|Predicate
argument_list|<
name|T
argument_list|>
operator|)
name|NON_NULL
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|alwaysFalse
parameter_list|()
block|{
return|return
operator|(
name|Predicate
argument_list|<
name|T
argument_list|>
operator|)
name|FALSE
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|alwaysTrue
parameter_list|()
block|{
return|return
operator|(
name|Predicate
argument_list|<
name|T
argument_list|>
operator|)
name|TRUE
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|instanceOf
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|isInstance
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|isSame
parameter_list|(
specifier|final
name|Object
name|target
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|t
operator|==
name|target
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|isEqual
parameter_list|(
specifier|final
name|Object
name|target
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|target
condition|)
block|{
return|return
name|Predicates
operator|.
name|isNull
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|target
operator|.
name|equals
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|contains
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|target
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|target
operator|.
name|contains
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|V
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|compose
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|V
argument_list|>
name|predicate
parameter_list|,
specifier|final
name|Mapper
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|predicate
operator|.
name|test
argument_list|(
name|mapper
operator|.
name|map
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|negate
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
operator|!
name|predicate
operator|.
name|test
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|and
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|first
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|second
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|first
operator|.
name|test
argument_list|(
name|t
argument_list|)
operator|&&
name|second
operator|.
name|test
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|and
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|predicates
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
for|for
control|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|and
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|first
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|predicates
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
name|first
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|first
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|second
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|first
operator|.
name|test
argument_list|(
name|t
argument_list|)
operator|||
name|second
operator|.
name|test
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|predicates
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
for|for
control|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
comment|//@SafeVarargs
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
modifier|...
name|predicates
parameter_list|)
block|{
return|return
name|or
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|predicates
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|xor
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|first
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|second
parameter_list|)
block|{
return|return
operator|new
name|AbstractPredicate
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|first
operator|.
name|test
argument_list|(
name|t
argument_list|)
operator|^
name|second
operator|.
name|test
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|xor
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|predicates
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// TODO:
block|}
comment|//@SafeVarargs
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|xor
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
modifier|...
name|predicates
parameter_list|)
block|{
return|return
name|xor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|predicates
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|abstract
class|class
name|AbstractPredicate
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Predicate
argument_list|<
name|T
argument_list|>
block|{
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|and
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|p
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|Predicates
operator|.
name|and
argument_list|(
operator|(
name|Predicate
operator|)
name|this
argument_list|,
name|p
argument_list|)
return|;
block|}
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|p
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|Predicates
operator|.
name|or
argument_list|(
operator|(
name|Predicate
operator|)
name|this
argument_list|,
name|p
argument_list|)
return|;
block|}
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|xor
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|p
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|Predicates
operator|.
name|xor
argument_list|(
operator|(
name|Predicate
operator|)
name|this
argument_list|,
name|p
argument_list|)
return|;
block|}
specifier|public
name|Predicate
argument_list|<
name|T
argument_list|>
name|negate
parameter_list|()
block|{
return|return
name|Predicates
operator|.
name|negate
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Predicates.java
end_comment

end_unit

