begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|javac
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|janino
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|janino
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|janino
operator|.
name|util
operator|.
name|resource
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<code>JaninoCompiler</code> implements the {@link JavaCompiler} interface by  * calling<a href="http://www.janino.net">Janino</a>.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|JaninoCompiler
implements|implements
name|JavaCompiler
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|JaninoCompilerArgs
name|args
init|=
operator|new
name|JaninoCompilerArgs
argument_list|()
decl_stmt|;
comment|// REVIEW jvs 28-June-2004:  pool this instance?  Is it thread-safe?
specifier|private
name|AccountingClassLoader
name|classLoader
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|JaninoCompiler
parameter_list|()
block|{
name|args
operator|=
operator|new
name|JaninoCompilerArgs
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement JavaCompiler
specifier|public
name|void
name|compile
parameter_list|()
block|{
comment|// REVIEW: SWZ: 3/12/2006: When this method is invoked multiple times,
comment|// it creates a series of AccountingClassLoader objects, each with
comment|// the previous as its parent ClassLoader.  If we refactored this
comment|// class and its callers to specify all code to compile in one
comment|// go, we could probably just use a single AccountingClassLoader.
assert|assert
operator|(
name|args
operator|.
name|destdir
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|args
operator|.
name|fullClassName
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|args
operator|.
name|source
operator|!=
literal|null
operator|)
assert|;
name|ClassLoader
name|parentClassLoader
init|=
name|args
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
name|parentClassLoader
operator|=
name|classLoader
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|sourceMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|sourceMap
operator|.
name|put
argument_list|(
name|ClassFile
operator|.
name|getSourceResourceName
argument_list|(
name|args
operator|.
name|fullClassName
argument_list|)
argument_list|,
name|args
operator|.
name|source
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|MapResourceFinder
name|sourceFinder
init|=
operator|new
name|MapResourceFinder
argument_list|(
name|sourceMap
argument_list|)
decl_stmt|;
name|classLoader
operator|=
operator|new
name|AccountingClassLoader
argument_list|(
name|parentClassLoader
argument_list|,
name|sourceFinder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|classLoader
operator|.
name|loadClass
argument_list|(
name|args
operator|.
name|fullClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|ex
argument_list|,
literal|"while compiling "
operator|+
name|args
operator|.
name|fullClassName
argument_list|)
throw|;
block|}
block|}
comment|// implement JavaCompiler
specifier|public
name|JavaCompilerArgs
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
comment|// implement JavaCompiler
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|classLoader
return|;
block|}
comment|// implement JavaCompiler
specifier|public
name|int
name|getTotalByteCodeSize
parameter_list|()
block|{
return|return
name|classLoader
operator|.
name|getTotalByteCodeSize
argument_list|()
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|private
specifier|static
class|class
name|JaninoCompilerArgs
extends|extends
name|JavaCompilerArgs
block|{
name|String
name|destdir
decl_stmt|;
name|String
name|fullClassName
decl_stmt|;
name|String
name|source
decl_stmt|;
specifier|public
name|JaninoCompilerArgs
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|supportsSetSource
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setDestdir
parameter_list|(
name|String
name|destdir
parameter_list|)
block|{
name|super
operator|.
name|setDestdir
argument_list|(
name|destdir
argument_list|)
expr_stmt|;
name|this
operator|.
name|destdir
operator|=
name|destdir
expr_stmt|;
block|}
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|addFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFullClassName
parameter_list|(
name|String
name|fullClassName
parameter_list|)
block|{
name|this
operator|.
name|fullClassName
operator|=
name|fullClassName
expr_stmt|;
block|}
block|}
comment|/**      * Refinement of JavaSourceClassLoader which keeps track of the total      * bytecode length of the classes it has compiled.      */
specifier|private
specifier|static
class|class
name|AccountingClassLoader
extends|extends
name|JavaSourceClassLoader
block|{
specifier|private
name|int
name|nBytes
decl_stmt|;
specifier|public
name|AccountingClassLoader
parameter_list|(
name|ClassLoader
name|parentClassLoader
parameter_list|,
name|ResourceFinder
name|sourceFinder
parameter_list|,
name|String
name|optionalCharacterEncoding
parameter_list|)
block|{
name|super
argument_list|(
name|parentClassLoader
argument_list|,
name|sourceFinder
argument_list|,
name|optionalCharacterEncoding
argument_list|)
expr_stmt|;
block|}
name|int
name|getTotalByteCodeSize
parameter_list|()
block|{
return|return
name|nBytes
return|;
block|}
comment|// override JavaSourceClassLoader
specifier|public
name|Map
name|generateBytecodes
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Map
name|map
init|=
name|super
operator|.
name|generateBytecodes
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
name|map
return|;
block|}
comment|// NOTE jvs 18-Oct-2006:  Janino has actually compiled everything
comment|// to bytecode even before all of the classes have actually
comment|// been loaded.  So we intercept their sizes here just
comment|// after they've been compiled.
for|for
control|(
name|Object
name|obj
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|(
name|byte
index|[]
operator|)
name|obj
decl_stmt|;
name|nBytes
operator|+=
name|bytes
operator|.
name|length
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JaninoCompiler.java
end_comment

end_unit

