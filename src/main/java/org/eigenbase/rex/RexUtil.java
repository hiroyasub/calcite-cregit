begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|mapping
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility methods concerning row-expressions.  *  * @author jhyde  * @version $Id$  * @since Nov 23, 2003  */
end_comment

begin_class
specifier|public
class|class
name|RexUtil
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|RexNode
index|[]
name|emptyExpressionArray
init|=
operator|new
name|RexNode
index|[
literal|0
index|]
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Returns a guess for the selectivity of an expression.      *      * @param exp expression of interest, or null for none (implying a      * selectivity of 1.0)      *      * @return guessed selectivity      */
specifier|public
specifier|static
name|double
name|getSelectivity
parameter_list|(
name|RexNode
name|exp
parameter_list|)
block|{
if|if
condition|(
operator|(
name|exp
operator|==
literal|null
operator|)
operator|||
name|exp
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0.1
return|;
block|}
comment|/**      * Returns a copy of an array of row-expressions.      */
specifier|public
specifier|static
name|RexNode
index|[]
name|clone
parameter_list|(
name|RexNode
index|[]
name|exps
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|exps
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RexNode
index|[]
name|exps2
init|=
operator|new
name|RexNode
index|[
name|exps
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|exps2
index|[
name|i
index|]
operator|=
name|exps
index|[
name|i
index|]
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
return|return
name|exps2
return|;
block|}
comment|/**      * Generates a cast from one row type to another      *      * @param rexBuilder RexBuilder to use for constructing casts      * @param lhsRowType target row type      * @param rhsRowType source row type; fields must be 1-to-1 with lhsRowType,      * in same order      *      * @return cast expressions      */
specifier|public
specifier|static
name|RexNode
index|[]
name|generateCastExpressions
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|lhsRowType
parameter_list|,
name|RelDataType
name|rhsRowType
parameter_list|)
block|{
name|int
name|n
init|=
name|rhsRowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
assert|assert
name|n
operator|==
name|lhsRowType
operator|.
name|getFieldCount
argument_list|()
operator|:
literal|"field count: lhs ["
operator|+
name|lhsRowType
operator|+
literal|"] rhs ["
operator|+
name|rhsRowType
operator|+
literal|"]"
assert|;
name|RexNode
index|[]
name|rhsExps
init|=
operator|new
name|RexNode
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|rhsExps
index|[
name|i
index|]
operator|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|rhsRowType
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|generateCastExpressions
argument_list|(
name|rexBuilder
argument_list|,
name|lhsRowType
argument_list|,
name|rhsExps
argument_list|)
return|;
block|}
comment|/**      * Generates a cast for a row type.      *      * @param rexBuilder RexBuilder to use for constructing casts      * @param lhsRowType target row type      * @param rhsExps expressions to be cast      *      * @return cast expressions      */
specifier|public
specifier|static
name|RexNode
index|[]
name|generateCastExpressions
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|lhsRowType
parameter_list|,
name|RexNode
index|[]
name|rhsExps
parameter_list|)
block|{
name|RelDataTypeField
index|[]
name|lhsFields
init|=
name|lhsRowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|lhsFields
operator|.
name|length
decl_stmt|;
name|RexNode
index|[]
name|castExps
init|=
operator|new
name|RexNode
index|[
name|fieldCount
index|]
decl_stmt|;
assert|assert
name|fieldCount
operator|==
name|rhsExps
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
name|RelDataTypeField
name|lhsField
init|=
name|lhsFields
index|[
name|i
index|]
decl_stmt|;
name|RelDataType
name|lhsType
init|=
name|lhsField
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RelDataType
name|rhsType
init|=
name|rhsExps
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|lhsType
operator|.
name|equals
argument_list|(
name|rhsType
argument_list|)
condition|)
block|{
name|castExps
index|[
name|i
index|]
operator|=
name|rhsExps
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|castExps
index|[
name|i
index|]
operator|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|lhsType
argument_list|,
name|rhsExps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|castExps
return|;
block|}
comment|/**      * Casts an expression to desired type, or returns the expression unchanged      * if it is already the correct type.      *      * @param rexBuilder Rex builder      * @param lhsType Desired type      * @param expr Expression      *      * @return Expression cast to desired type      */
specifier|public
specifier|static
name|RexNode
name|maybeCast
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|lhsType
parameter_list|,
name|RexNode
name|expr
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rhsType
init|=
name|expr
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|lhsType
operator|.
name|equals
argument_list|(
name|rhsType
argument_list|)
condition|)
block|{
return|return
name|expr
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|lhsType
argument_list|,
name|expr
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns whether a node represents the NULL value.      *      *<p>Examples:      *      *<ul>      *<li>For {@link org.eigenbase.rex.RexLiteral} Unknown, returns false.      *<li>For<code>CAST(NULL AS<i>type</i>)</code>, returns true if<code>      * allowCast</code> is true, false otherwise.      *<li>For<code>CAST(CAST(NULL AS<i>type</i>) AS<i>type</i>))</code>,      * returns false.      *</ul>      */
specifier|public
specifier|static
name|boolean
name|isNullLiteral
parameter_list|(
name|RexNode
name|node
parameter_list|,
name|boolean
name|allowCast
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|RexLiteral
condition|)
block|{
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|literal
operator|.
name|getTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|NULL
condition|)
block|{
assert|assert
operator|(
literal|null
operator|==
name|literal
operator|.
name|getValue
argument_list|()
operator|)
assert|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// We don't regard UNKNOWN -- SqlLiteral(null,Boolean) -- as
comment|// NULL.
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|allowCast
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|Cast
argument_list|)
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|isNullLiteral
argument_list|(
name|call
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// node is "CAST(NULL as type)"
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns whether a node represents the NULL value or a series of nested      * CAST(NULL as<TYPE>) calls<br>      * For Example:<br>      * isNull(CAST(CAST(NULL as INTEGER) AS VARCHAR(1))) returns true      */
specifier|public
specifier|static
name|boolean
name|isNull
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
comment|/* Checks to see if the RexNode is null */
return|return
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|node
argument_list|)
operator|||
operator|(
operator|(
name|node
operator|.
name|getKind
argument_list|()
operator|==
name|RexKind
operator|.
name|Cast
operator|)
operator|&&
name|isNull
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|operands
index|[
literal|0
index|]
argument_list|)
operator|)
return|;
block|}
comment|/**      * Returns whether a given node contains a RexCall with a specified operator      *      * @param operator to look for      * @param node a RexNode tree      */
specifier|public
specifier|static
name|RexCall
name|findOperatorCall
parameter_list|(
specifier|final
name|SqlOperator
name|operator
parameter_list|,
name|RexNode
name|node
parameter_list|)
block|{
try|try
block|{
name|RexVisitor
argument_list|<
name|Void
argument_list|>
name|visitor
init|=
operator|new
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|true
argument_list|)
block|{
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|call
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|node
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
name|Util
operator|.
name|swallow
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|RexCall
operator|)
name|e
operator|.
name|getNode
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns whether a given tree contains any {link RexInputRef} nodes.      *      * @param node a RexNode tree      */
specifier|public
specifier|static
name|boolean
name|containsInputRef
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
try|try
block|{
name|RexVisitor
argument_list|<
name|Void
argument_list|>
name|visitor
init|=
operator|new
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|true
argument_list|)
block|{
specifier|public
name|Void
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|inputRef
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|node
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
name|Util
operator|.
name|swallow
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Returns whether a given tree contains any {@link      * org.eigenbase.rex.RexFieldAccess} nodes.      *      * @param node a RexNode tree      */
specifier|public
specifier|static
name|boolean
name|containsFieldAccess
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
try|try
block|{
name|RexVisitor
argument_list|<
name|Void
argument_list|>
name|visitor
init|=
operator|new
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|true
argument_list|)
block|{
specifier|public
name|Void
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|fieldAccess
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|node
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
name|Util
operator|.
name|swallow
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Creates an array of {@link RexInputRef}, one for each field of a given      * rowtype.      */
specifier|public
specifier|static
name|RexInputRef
index|[]
name|toInputRefs
parameter_list|(
name|RelDataType
name|rowType
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|rowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|RexInputRef
index|[]
name|rexNodes
init|=
operator|new
name|RexInputRef
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rexNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rexNodes
index|[
name|i
index|]
operator|=
operator|new
name|RexInputRef
argument_list|(
name|i
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rexNodes
return|;
block|}
comment|/**      * Creates an array of {@link RexLocalRef} objects, one for each field of a      * given rowtype.      */
specifier|public
specifier|static
name|RexLocalRef
index|[]
name|toLocalRefs
parameter_list|(
name|RelDataType
name|rowType
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|rowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|RexLocalRef
index|[]
name|refs
init|=
operator|new
name|RexLocalRef
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|refs
index|[
name|i
index|]
operator|=
operator|new
name|RexLocalRef
argument_list|(
name|i
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|refs
return|;
block|}
comment|/**      * Creates an array of {@link RexInputRef} objects, one for each field of a      * given rowtype, according to a permutation.      *      * @param args Permutation      * @param rowType Input row type      *      * @return Array of input refs      */
specifier|public
specifier|static
name|RexInputRef
index|[]
name|toInputRefs
parameter_list|(
name|int
index|[]
name|args
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|rowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|RexInputRef
index|[]
name|rexNodes
init|=
operator|new
name|RexInputRef
index|[
name|args
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fieldOrdinal
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
name|rexNodes
index|[
name|i
index|]
operator|=
operator|new
name|RexInputRef
argument_list|(
name|fieldOrdinal
argument_list|,
name|fields
index|[
name|fieldOrdinal
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rexNodes
return|;
block|}
comment|/**      * Converts an array of {@link RexNode} to an array of {@link Integer}.      * Every node must be a {@link RexLocalRef}.      */
specifier|public
specifier|static
name|Integer
index|[]
name|toOrdinalArray
parameter_list|(
name|RexNode
index|[]
name|rexNodes
parameter_list|)
block|{
name|Integer
index|[]
name|orderKeys
init|=
operator|new
name|Integer
index|[
name|rexNodes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orderKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RexLocalRef
name|inputRef
init|=
operator|(
name|RexLocalRef
operator|)
name|rexNodes
index|[
name|i
index|]
decl_stmt|;
name|orderKeys
index|[
name|i
index|]
operator|=
name|inputRef
operator|.
name|getIndex
argument_list|()
expr_stmt|;
block|}
return|return
name|orderKeys
return|;
block|}
comment|/**      * Collects the types of an array of row expressions.      *      * @param exprs array of row expressions      *      * @return array of types      */
specifier|public
specifier|static
name|RelDataType
index|[]
name|collectTypes
parameter_list|(
name|RexNode
index|[]
name|exprs
parameter_list|)
block|{
name|RelDataType
index|[]
name|types
init|=
operator|new
name|RelDataType
index|[
name|exprs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|exprs
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
comment|/**      * Determines whether a {@link RexCall} requires decimal expansion. It      * usually requires expansion if it has decimal operands.      *      *<p>Exceptions to this rule are:      *      *<ul>      *<li>isNull doesn't require expansion      *<li>It's okay to cast decimals to and from char types      *<li>It's okay to cast nulls as decimals      *<li>Casts require expansion if their return type is decimal      *<li>Reinterpret casts can handle a decimal operand      *</ul>      *      * @param expr expression possibly in need of expansion      * @param recurse whether to check nested calls      *      * @return whether the expression requires expansion      */
specifier|public
specifier|static
name|boolean
name|requiresDecimalExpansion
parameter_list|(
name|RexNode
name|expr
parameter_list|,
name|boolean
name|recurse
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|expr
operator|instanceof
name|RexCall
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|expr
decl_stmt|;
name|boolean
name|localCheck
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|Reinterpret
case|:
case|case
name|IsNull
case|:
name|localCheck
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|Cast
case|:
name|RelDataType
name|lhsType
init|=
name|call
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RelDataType
name|rhsType
init|=
name|call
operator|.
name|operands
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|rhsType
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|NULL
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|SqlTypeUtil
operator|.
name|inCharFamily
argument_list|(
name|lhsType
argument_list|)
operator|||
name|SqlTypeUtil
operator|.
name|inCharFamily
argument_list|(
name|rhsType
argument_list|)
condition|)
block|{
name|localCheck
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|SqlTypeUtil
operator|.
name|isDecimal
argument_list|(
name|lhsType
argument_list|)
operator|&&
operator|(
name|lhsType
operator|!=
name|rhsType
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
default|default:
name|localCheck
operator|=
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|requiresDecimalExpansion
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|localCheck
condition|)
block|{
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isDecimal
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// NOTE jvs 27-Mar-2007: Depending on the type factory, the
comment|// result of a division may be decimal, even though both inputs
comment|// are integer.
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|call
operator|.
name|operands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isDecimal
argument_list|(
name|call
operator|.
name|operands
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
operator|(
name|recurse
operator|&&
name|requiresDecimalExpansion
argument_list|(
name|call
operator|.
name|operands
argument_list|,
name|recurse
argument_list|)
operator|)
return|;
block|}
comment|/**      * Determines whether any operand of a set requires decimal expansion      */
specifier|public
specifier|static
name|boolean
name|requiresDecimalExpansion
parameter_list|(
name|RexNode
index|[]
name|operands
parameter_list|,
name|boolean
name|recurse
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|operands
index|[
name|i
index|]
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|operands
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|requiresDecimalExpansion
argument_list|(
name|call
argument_list|,
name|recurse
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns whether a {@link RexProgram} contains expressions which require      * decimal expansion.      */
specifier|public
specifier|static
name|boolean
name|requiresDecimalExpansion
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|boolean
name|recurse
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
name|program
operator|.
name|getExprList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|exprList
control|)
block|{
if|if
condition|(
name|requiresDecimalExpansion
argument_list|(
name|expr
argument_list|,
name|recurse
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|canReinterpretOverflow
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
assert|assert
operator|(
name|call
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|Reinterpret
argument_list|)
operator|)
operator|:
literal|"call is not a reinterpret"
assert|;
return|return
name|call
operator|.
name|operands
operator|.
name|length
operator|>
literal|1
return|;
block|}
comment|/**      * Creates an array of {@link RexInputRef} objects referencing fields {0 ..      * N} and having types {exprs[0].getType() .. exprs[N].getType()}.      *      * @param exprs Expressions whose types to mimic      *      * @return An array of input refs of the same length and types as exprs.      */
specifier|public
specifier|static
name|RexInputRef
index|[]
name|createIdentityArray
parameter_list|(
name|RexNode
index|[]
name|exprs
parameter_list|)
block|{
specifier|final
name|RexInputRef
index|[]
name|refs
init|=
operator|new
name|RexInputRef
index|[
name|exprs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|refs
index|[
name|i
index|]
operator|=
operator|new
name|RexInputRef
argument_list|(
name|i
argument_list|,
name|exprs
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|refs
return|;
block|}
comment|/**      * Returns whether an array of expressions has any common sub-expressions.      */
specifier|public
specifier|static
name|boolean
name|containCommonExprs
parameter_list|(
name|RexNode
index|[]
name|exprs
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
specifier|final
name|ExpressionNormalizer
name|visitor
init|=
operator|new
name|ExpressionNormalizer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|exprs
index|[
name|i
index|]
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionNormalizer
operator|.
name|SubExprExistsException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|swallow
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|fail
assert|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns whether an array of expressions contains a forward reference.      * That is, if expression #i contains a {@link RexInputRef} referencing      * field i or greater.      *      * @param exprs Array of expressions      * @param inputRowType Input row type      * @param fail Whether to assert if there is a forward reference      *      * @return Whether there is a forward reference      */
specifier|public
specifier|static
name|boolean
name|containForwardRefs
parameter_list|(
name|RexNode
index|[]
name|exprs
parameter_list|,
name|RelDataType
name|inputRowType
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
specifier|final
name|ForwardRefFinder
name|visitor
init|=
operator|new
name|ForwardRefFinder
argument_list|(
name|inputRowType
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|expr
init|=
name|exprs
index|[
name|i
index|]
decl_stmt|;
name|visitor
operator|.
name|setLimit
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// field cannot refer to self or later field
try|try
block|{
name|expr
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForwardRefFinder
operator|.
name|IllegalForwardRefException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|swallow
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|fail
operator|:
literal|"illegal forward reference in "
operator|+
name|expr
assert|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns whether an array of exp contains aggregate function calls whose      * arguments are not {@link RexInputRef}.s      *      * @param exprs Expressions      * @param fail Whether to assert if there is such a function call      */
specifier|static
name|boolean
name|containNonTrivialAggs
parameter_list|(
name|RexNode
index|[]
name|exprs
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|expr
init|=
name|exprs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|rexCall
init|=
operator|(
name|RexCall
operator|)
name|expr
decl_stmt|;
if|if
condition|(
name|rexCall
operator|.
name|getOperator
argument_list|()
operator|instanceof
name|SqlAggFunction
condition|)
block|{
specifier|final
name|RexNode
index|[]
name|operands
init|=
name|rexCall
operator|.
name|getOperands
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|operands
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|operand
operator|instanceof
name|RexLocalRef
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
literal|"contains non trivial agg"
assert|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns whether a list of expressions contains complex expressions, that      * is, a call whose arguments are not {@link RexVariable} (or a subtype such      * as {@link RexInputRef}) or {@link RexLiteral}.      */
specifier|public
specifier|static
name|boolean
name|containComplexExprs
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprs
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|expr
range|:
name|exprs
control|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|rexCall
init|=
operator|(
name|RexCall
operator|)
name|expr
decl_stmt|;
specifier|final
name|RexNode
index|[]
name|operands
init|=
name|rexCall
operator|.
name|getOperands
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|operands
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|isAtomic
argument_list|(
name|operand
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Replaces the operands of a call. The new operands' types must match the      * old operands' types.      */
specifier|public
specifier|static
name|RexCall
name|replaceOperands
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|RexNode
index|[]
name|operands
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|operands
operator|==
name|operands
condition|)
block|{
return|return
name|call
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RelDataType
name|oldType
init|=
name|call
operator|.
name|operands
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RelDataType
name|newType
init|=
name|operands
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldType
operator|.
name|isNullable
argument_list|()
operator|&&
name|newType
operator|.
name|isNullable
argument_list|()
condition|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"invalid nullability"
argument_list|)
throw|;
block|}
assert|assert
operator|(
name|oldType
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|newType
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
assert|;
block|}
return|return
operator|new
name|RexCall
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
argument_list|,
name|operands
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAtomic
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
return|return
operator|(
name|expr
operator|instanceof
name|RexLiteral
operator|)
operator|||
operator|(
name|expr
operator|instanceof
name|RexVariable
operator|)
return|;
block|}
comment|/**      * Returns whether a {@link RexNode node} is a {@link RexCall call} to a      * given {@link SqlOperator operator}.      */
specifier|public
specifier|static
name|boolean
name|isCallTo
parameter_list|(
name|RexNode
name|expr
parameter_list|,
name|SqlOperator
name|op
parameter_list|)
block|{
return|return
operator|(
name|expr
operator|instanceof
name|RexCall
operator|)
operator|&&
operator|(
operator|(
operator|(
name|RexCall
operator|)
name|expr
operator|)
operator|.
name|getOperator
argument_list|()
operator|==
name|op
operator|)
return|;
block|}
comment|/**      * Creates a record type with anonymous field names.      *      * @param typeFactory Type factory      * @param exprs Expressions      * @return Record type      */
specifier|public
specifier|static
name|RelDataType
name|createStructType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|RexNode
index|[]
name|exprs
parameter_list|)
block|{
return|return
name|createStructType
argument_list|(
name|typeFactory
argument_list|,
name|exprs
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates a record type with specified field names.      *      *<p>The array of field names may be null, or any of the names within it      * can be null. We recommend using explicit names where possible, because it      * makes it much easier to figure out the intent of fields when looking at      * planner output.      *      * @param typeFactory Type factory      * @param exprs Expressions      * @param names Field names, may be null, or elements may be null      * @return Record type      */
specifier|public
specifier|static
name|RelDataType
name|createStructType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|RexNode
index|[]
name|exprs
parameter_list|,
specifier|final
name|String
index|[]
name|names
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
operator|new
name|RelDataTypeFactory
operator|.
name|FieldInfo
argument_list|()
block|{
specifier|public
name|int
name|getFieldCount
parameter_list|()
block|{
return|return
name|exprs
operator|.
name|length
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return
literal|"$f"
operator|+
name|index
return|;
block|}
specifier|final
name|String
name|name
init|=
name|names
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|"$f"
operator|+
name|index
return|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|RelDataType
name|getFieldType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|exprs
index|[
name|index
index|]
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns whether the type of an array of expressions is compatible with a      * struct type.      *      * @param exprs Array of expressions      * @param type Type      * @param fail Whether to fail if there is a mismatch      *      * @return Whether every expression has the same type as the corresponding      * member of the struct type      *      * @see RelOptUtil#eq(String, RelDataType, String, RelDataType, boolean)      */
specifier|public
specifier|static
name|boolean
name|compatibleTypes
parameter_list|(
name|RexNode
index|[]
name|exprs
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|type
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|exprs
operator|.
name|length
operator|!=
name|fields
operator|.
name|length
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
literal|"rowtype mismatches expressions"
assert|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelDataType
name|exprType
init|=
name|exprs
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|fieldType
init|=
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"type1"
argument_list|,
name|exprType
argument_list|,
literal|"type2"
argument_list|,
name|fieldType
argument_list|,
name|fail
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Creates a key for {@link RexNode} which is the same as another key of      * another RexNode only if the two have both the same type and textual      * representation. For example, "10" integer and "10" bigint result in      * different keys.      */
specifier|public
specifier|static
name|String
name|makeKey
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
name|String
name|type
init|=
name|expr
operator|.
name|getType
argument_list|()
operator|.
name|getFullTypeString
argument_list|()
decl_stmt|;
name|String
name|separator
init|=
literal|";"
decl_stmt|;
name|String
name|node
init|=
name|expr
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuilder
name|keyBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|type
operator|.
name|length
argument_list|()
operator|+
name|separator
operator|.
name|length
argument_list|()
operator|+
name|node
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|keyBuilder
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|keyBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns whether the leading edge of a given array of expressions is      * wholly {@link RexInputRef} objects with types corresponding to the      * underlying datatype.      */
specifier|public
specifier|static
name|boolean
name|containIdentity
parameter_list|(
name|RexNode
index|[]
name|exprs
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|rowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|exprs
operator|.
name|length
operator|<
name|fields
operator|.
name|length
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
literal|"exprs/rowType length mismatch"
assert|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|exprs
index|[
name|i
index|]
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
literal|"expr["
operator|+
name|i
operator|+
literal|"] is not a RexInputRef"
assert|;
return|return
literal|false
return|;
block|}
name|RexInputRef
name|inputRef
init|=
operator|(
name|RexInputRef
operator|)
name|exprs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|inputRef
operator|.
name|getIndex
argument_list|()
operator|!=
name|i
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
literal|"expr["
operator|+
name|i
operator|+
literal|"] has ordinal "
operator|+
name|inputRef
operator|.
name|getIndex
argument_list|()
assert|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"type1"
argument_list|,
name|exprs
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|,
literal|"type2"
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|,
name|fail
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Creates an AND expression from a list of RexNodes      *      * @param rexList list of RexNodes      *      * @return AND'd expression      */
specifier|public
specifier|static
name|RexNode
name|andRexNodeList
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexList
parameter_list|)
block|{
if|if
condition|(
name|rexList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// create a right-deep tree to allow short-circuiting during
comment|// expression evaluation
name|RexNode
name|andExpr
init|=
name|rexList
operator|.
name|get
argument_list|(
name|rexList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|rexList
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|andExpr
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|andOperator
argument_list|,
name|rexList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|andExpr
argument_list|)
expr_stmt|;
block|}
return|return
name|andExpr
return|;
block|}
comment|/**      * Creates an OR expression from a list of RexNodes      *      * @param rexList list of RexNodes      *      * @return OR'd expression      */
specifier|public
specifier|static
name|RexNode
name|orRexNodeList
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexList
parameter_list|)
block|{
if|if
condition|(
name|rexList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RexNode
name|orExpr
init|=
name|rexList
operator|.
name|get
argument_list|(
name|rexList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|rexList
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|orExpr
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|orOperator
argument_list|,
name|rexList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|orExpr
argument_list|)
expr_stmt|;
block|}
return|return
name|orExpr
return|;
block|}
comment|/**      * Applies a mapping to a collation list.      *      * @param mapping Mapping      * @param collationList Collation list      * @return collation list with mapping applied to each field      */
specifier|public
specifier|static
name|List
argument_list|<
name|RelCollation
argument_list|>
name|apply
parameter_list|(
name|Mappings
operator|.
name|TargetMapping
name|mapping
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelCollation
argument_list|>
name|newCollationList
init|=
operator|new
name|ArrayList
argument_list|<
name|RelCollation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelCollation
name|collation
range|:
name|collationList
control|)
block|{
specifier|final
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|newFieldCollationList
init|=
operator|new
name|ArrayList
argument_list|<
name|RelFieldCollation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|fieldCollation
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
specifier|final
name|RelFieldCollation
name|newFieldCollation
init|=
name|apply
argument_list|(
name|mapping
argument_list|,
name|fieldCollation
argument_list|)
decl_stmt|;
if|if
condition|(
name|newFieldCollation
operator|==
literal|null
condition|)
block|{
comment|// This field is not mapped. Stop here. The leading edge
comment|// of the collation is still valid (although it's useless
comment|// if it's empty).
break|break;
block|}
name|newFieldCollationList
operator|.
name|add
argument_list|(
name|newFieldCollation
argument_list|)
expr_stmt|;
block|}
comment|// Truncation to collations to their leading edge creates empty
comment|// and duplicate collations. Ignore these.
if|if
condition|(
operator|!
name|newFieldCollationList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|RelCollationImpl
name|newCollation
init|=
operator|new
name|RelCollationImpl
argument_list|(
name|newFieldCollationList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newCollationList
operator|.
name|contains
argument_list|(
name|newCollation
argument_list|)
condition|)
block|{
name|newCollationList
operator|.
name|add
argument_list|(
name|newCollation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// REVIEW: There might be redundant collations in the list. For example,
comment|// in {(x), (x, y)}, (x) is redundant because it is a leading edge of
comment|// another collation in the list. Could remove redundant collations.
return|return
name|newCollationList
return|;
block|}
comment|/**      * Applies a mapping to a field collation.      *      *<p>If the field is not mapped, returns null.      *      * @param mapping Mapping      * @param fieldCollation Field collation      * @return collation with mapping applied      */
specifier|public
specifier|static
name|RelFieldCollation
name|apply
parameter_list|(
name|Mappings
operator|.
name|TargetMapping
name|mapping
parameter_list|,
name|RelFieldCollation
name|fieldCollation
parameter_list|)
block|{
specifier|final
name|int
name|target
init|=
name|mapping
operator|.
name|getTargetOpt
argument_list|(
name|fieldCollation
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fieldCollation
operator|.
name|copy
argument_list|(
name|target
argument_list|)
return|;
block|}
comment|/**      * Applies a mapping to a list of field collations.      *      * @param mapping Mapping      * @param fieldCollations Field collations      * @return collations with mapping applied      */
specifier|public
specifier|static
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|apply
parameter_list|(
name|Mapping
name|mapping
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|newFieldCollations
init|=
operator|new
name|ArrayList
argument_list|<
name|RelFieldCollation
argument_list|>
argument_list|(
name|fieldCollations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|fieldCollation
range|:
name|fieldCollations
control|)
block|{
name|newFieldCollations
operator|.
name|add
argument_list|(
name|apply
argument_list|(
name|mapping
argument_list|,
name|fieldCollation
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newFieldCollations
return|;
block|}
comment|/**      * Applies a shuttle to an array of expressions. Creates a copy first.      *      * @param shuttle Shuttle      * @param exprs Array of expressions      */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|RexNode
parameter_list|>
name|T
index|[]
name|apply
parameter_list|(
name|RexVisitor
argument_list|<
name|T
argument_list|>
name|shuttle
parameter_list|,
name|T
index|[]
name|exprs
parameter_list|)
block|{
name|T
index|[]
name|newExprs
init|=
name|exprs
operator|.
name|clone
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newExprs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|expr
init|=
name|newExprs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|expr
operator|!=
literal|null
condition|)
block|{
name|newExprs
index|[
name|i
index|]
operator|=
name|expr
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newExprs
return|;
block|}
comment|/**      * Applies a visitor to an array of expressions and, if specified, a single      * expression.      *      * @param visitor Visitor      * @param exprs Array of expressions      * @param expr Single expression, may be null      */
specifier|public
specifier|static
name|void
name|apply
parameter_list|(
name|RexVisitor
argument_list|<
name|Void
argument_list|>
name|visitor
parameter_list|,
name|RexNode
index|[]
name|exprs
parameter_list|,
name|RexNode
name|expr
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|exprs
index|[
name|i
index|]
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expr
operator|!=
literal|null
condition|)
block|{
name|expr
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Applies a visitor to a list of expressions and, if specified, a single      * expression.      *      * @param visitor Visitor      * @param exprs List of expressions      * @param expr Single expression, may be null      */
specifier|public
specifier|static
name|void
name|apply
parameter_list|(
name|RexVisitor
argument_list|<
name|Void
argument_list|>
name|visitor
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|exprs
parameter_list|,
name|RexNode
name|expr
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expr
operator|!=
literal|null
condition|)
block|{
name|expr
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Walks over expressions and builds a bank of common sub-expressions.      */
specifier|private
specifier|static
class|class
name|ExpressionNormalizer
extends|extends
name|RexVisitorImpl
argument_list|<
name|RexNode
argument_list|>
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|mapDigestToExpr
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|allowDups
decl_stmt|;
specifier|protected
name|ExpressionNormalizer
parameter_list|(
name|boolean
name|allowDups
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|allowDups
operator|=
name|allowDups
expr_stmt|;
block|}
specifier|protected
name|RexNode
name|register
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|expr
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|previous
init|=
name|mapDigestToExpr
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allowDups
operator|&&
operator|(
name|previous
operator|!=
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|SubExprExistsException
argument_list|(
name|expr
argument_list|)
throw|;
block|}
return|return
name|expr
return|;
block|}
specifier|protected
name|RexNode
name|lookup
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
return|return
name|mapDigestToExpr
operator|.
name|get
argument_list|(
name|expr
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
return|return
name|register
argument_list|(
name|inputRef
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
return|return
name|register
argument_list|(
name|literal
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|correlVariable
parameter_list|)
block|{
return|return
name|register
argument_list|(
name|correlVariable
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|RexNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
name|RexNode
index|[]
name|normalizedOperands
init|=
operator|new
name|RexNode
index|[
name|operands
operator|.
name|length
index|]
decl_stmt|;
name|int
name|diffCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
index|[
name|i
index|]
decl_stmt|;
name|operand
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|normalizedOperand
init|=
name|normalizedOperands
index|[
name|i
index|]
operator|=
name|lookup
argument_list|(
name|operand
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalizedOperand
operator|!=
name|operand
condition|)
block|{
operator|++
name|diffCount
expr_stmt|;
block|}
block|}
if|if
condition|(
name|diffCount
operator|>
literal|0
condition|)
block|{
name|call
operator|=
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|normalizedOperands
argument_list|)
expr_stmt|;
block|}
return|return
name|register
argument_list|(
name|call
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|visitDynamicParam
parameter_list|(
name|RexDynamicParam
name|dynamicParam
parameter_list|)
block|{
return|return
name|register
argument_list|(
name|dynamicParam
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|visitRangeRef
parameter_list|(
name|RexRangeRef
name|rangeRef
parameter_list|)
block|{
return|return
name|register
argument_list|(
name|rangeRef
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
specifier|final
name|RexNode
name|expr
init|=
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
decl_stmt|;
name|expr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|normalizedExpr
init|=
name|lookup
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalizedExpr
operator|!=
name|expr
condition|)
block|{
name|fieldAccess
operator|=
operator|new
name|RexFieldAccess
argument_list|(
name|normalizedExpr
argument_list|,
name|fieldAccess
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|register
argument_list|(
name|fieldAccess
argument_list|)
return|;
block|}
comment|/**          * Thrown if there is a sub-expression.          */
specifier|private
specifier|static
class|class
name|SubExprExistsException
extends|extends
name|RuntimeException
block|{
name|SubExprExistsException
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
name|Util
operator|.
name|discard
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Walks over an expression and throws an exception if it finds an {@link      * RexInputRef} with an ordinal beyond the number of fields in the input row      * type, or a {@link RexLocalRef} with ordinal greater than that set using      * {@link #setLimit(int)}.      */
specifier|private
specifier|static
class|class
name|ForwardRefFinder
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
name|int
name|limit
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|inputRowType
decl_stmt|;
specifier|public
name|ForwardRefFinder
parameter_list|(
name|RelDataType
name|inputRowType
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputRowType
operator|=
name|inputRowType
expr_stmt|;
block|}
specifier|public
name|Void
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
name|super
operator|.
name|visitInputRef
argument_list|(
name|inputRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputRef
operator|.
name|getIndex
argument_list|()
operator|>=
name|inputRowType
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalForwardRefException
argument_list|()
throw|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Void
name|visitLocalRef
parameter_list|(
name|RexLocalRef
name|inputRef
parameter_list|)
block|{
name|super
operator|.
name|visitLocalRef
argument_list|(
name|inputRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputRef
operator|.
name|getIndex
argument_list|()
operator|>=
name|limit
condition|)
block|{
throw|throw
operator|new
name|IllegalForwardRefException
argument_list|()
throw|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
specifier|static
class|class
name|IllegalForwardRefException
extends|extends
name|RuntimeException
block|{         }
block|}
comment|/**      * Visitor which builds a bitmap of the inputs used by an expression.      */
specifier|public
specifier|static
class|class
name|FieldAccessFinder
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|RexFieldAccess
argument_list|>
name|fieldAccessList
decl_stmt|;
specifier|public
name|FieldAccessFinder
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldAccessList
operator|=
operator|new
name|ArrayList
argument_list|<
name|RexFieldAccess
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Void
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
name|fieldAccessList
operator|.
name|add
argument_list|(
name|fieldAccess
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|RexNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
index|[
name|i
index|]
decl_stmt|;
name|operand
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|RexFieldAccess
argument_list|>
name|getFieldAccessList
parameter_list|()
block|{
return|return
name|fieldAccessList
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RexUtil.java
end_comment

end_unit

