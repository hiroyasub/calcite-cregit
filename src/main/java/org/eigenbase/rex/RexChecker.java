begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Visitor which checks the validity of a {@link RexNode} expression.  *  *<p>There are two modes of operation:  *  *<ul>  *<li>Use<code>fail=true</code> to throw an {@link AssertionError} as soon as  * an invalid node is detected:  *  *<blockquote><code>RexNode node;<br/>  * RelDataType rowType;<br/>  * assert new RexChecker(rowType, true).isValid(node);</code></blockquote>  *  * This mode requires that assertions are enabled.</li>  *<li>Use<code>fail=false</code> to test for validity without throwing an  * error.  *  *<blockquote><code>RexNode node;<br/>  * RelDataType rowType;<br/>  * RexChecker checker = new RexChecker(rowType, false);<br/>  * node.accept(checker);<br/>  * if (!checker.valid) {<br/>  *&nbsp;&nbsp;&nbsp;...<br/>  * }</br></code></blockquote>  *</li>  *  * @author jhyde  * @version $Id$  * @see RexNode  * @since May 21, 2006  */
end_comment

begin_class
specifier|public
class|class
name|RexChecker
extends|extends
name|RexVisitorImpl
argument_list|<
name|Boolean
argument_list|>
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|boolean
name|fail
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|inputTypeList
decl_stmt|;
specifier|protected
name|int
name|failCount
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a RexChecker with a given input row type.      *      *<p>If<code>fail</code> is true, the checker will throw an {@link      * AssertionError} if an invalid node is found and assertions are enabled.      *      *<p>Otherwise, each method returns whether its part of the tree is valid.      *      * @param inputRowType Input row type      * @param fail Whether to throw an {@link AssertionError} if an invalid node      * is detected      */
specifier|public
name|RexChecker
parameter_list|(
specifier|final
name|RelDataType
name|inputRowType
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
name|this
argument_list|(
name|RelOptUtil
operator|.
name|getFieldTypeList
argument_list|(
name|inputRowType
argument_list|)
argument_list|,
name|fail
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a RexChecker with a given set of input fields.      *      *<p>If<code>fail</code> is true, the checker will throw an {@link      * AssertionError} if an invalid node is found and assertions are enabled.      *      *<p>Otherwise, each method returns whether its part of the tree is valid.      *      * @param inputTypeList Input row type      * @param fail Whether to throw an {@link AssertionError} if an invalid node      * is detected      */
specifier|public
name|RexChecker
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|inputTypeList
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputTypeList
operator|=
name|inputTypeList
expr_stmt|;
name|this
operator|.
name|fail
operator|=
name|fail
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Returns the number of failures encountered.      *      * @return Number of failures      */
specifier|public
name|int
name|getFailureCount
parameter_list|()
block|{
return|return
name|failCount
return|;
block|}
specifier|public
name|Boolean
name|visitInputRef
parameter_list|(
name|RexInputRef
name|ref
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|ref
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|index
operator|<
literal|0
operator|)
operator|||
operator|(
name|index
operator|>=
name|inputTypeList
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
literal|"RexInputRef index "
operator|+
name|index
operator|+
literal|" out of range 0.."
operator|+
operator|(
name|inputTypeList
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
assert|;
operator|++
name|failCount
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ref
operator|.
name|getType
argument_list|()
operator|.
name|isStruct
argument_list|()
operator|&&
operator|!
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"ref"
argument_list|,
name|ref
operator|.
name|getType
argument_list|()
argument_list|,
literal|"input"
argument_list|,
name|inputTypeList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|fail
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
operator|++
name|failCount
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Boolean
name|visitLocalRef
parameter_list|(
name|RexLocalRef
name|ref
parameter_list|)
block|{
assert|assert
operator|!
name|fail
operator|:
literal|"RexLocalRef illegal outside program"
assert|;
operator|++
name|failCount
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|Boolean
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|Boolean
name|valid
init|=
name|operand
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
operator|!
name|valid
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Boolean
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
name|super
operator|.
name|visitFieldAccess
argument_list|(
name|fieldAccess
argument_list|)
expr_stmt|;
specifier|final
name|RelDataType
name|refType
init|=
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
assert|assert
name|refType
operator|.
name|isStruct
argument_list|()
assert|;
specifier|final
name|RelDataTypeField
name|field
init|=
name|fieldAccess
operator|.
name|getField
argument_list|()
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|field
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|index
operator|<
literal|0
operator|)
operator|||
operator|(
name|index
operator|>
name|refType
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
operator|++
name|failCount
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|RelDataTypeField
name|typeField
init|=
name|refType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"type1"
argument_list|,
name|typeField
operator|.
name|getType
argument_list|()
argument_list|,
literal|"type2"
argument_list|,
name|fieldAccess
operator|.
name|getType
argument_list|()
argument_list|,
name|fail
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
operator|++
name|failCount
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns whether an expression is valid.      */
specifier|public
specifier|final
name|boolean
name|isValid
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
return|return
name|expr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RexChecker.java
end_comment

end_unit

