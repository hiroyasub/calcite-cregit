begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<code>BufferedIterator</code> converts a regular iterator into one which  * implements {@link Iterable} (and {@link Enumeration} for good measure).  *  *<p><i>Implementation note</i>: The first time you read from it, it duplicates  * objects into a list. The next time, it creates an iterator from that list.  * The implementation handles infinite iterators gracefully: it copies objects  * onto the replay list only when they are requested for the first time.</p>  *  * @author jhyde  * @since 26 April, 2002  */
end_comment

begin_class
specifier|public
class|class
name|BufferedIterator
implements|implements
name|Iterator
implements|,
name|Iterable
implements|,
name|Enumeration
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|Clonerator
name|clonerator
decl_stmt|;
specifier|private
name|Iterator
name|iterator
decl_stmt|;
specifier|private
name|List
name|list
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|BufferedIterator
parameter_list|(
name|Iterator
name|iterator
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|clonerator
operator|=
operator|new
name|Clonerator
argument_list|(
name|iterator
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|this
operator|.
name|iterator
operator|=
name|clonerator
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement Enumeration
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
comment|// implement Iterator
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
comment|// implement Iterable
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
name|restart
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// implement Iterator
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
comment|// implement Enumeration
specifier|public
name|Object
name|nextElement
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
comment|// implement Iterator
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// implement Restartable
specifier|public
name|void
name|restart
parameter_list|()
block|{
if|if
condition|(
name|clonerator
operator|==
literal|null
condition|)
block|{
comment|// We have already read everything from the clonerator and
comment|// discarded it.
name|iterator
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|clonerator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// They read everything from the clonerator. We can discard it
comment|// now.
name|clonerator
operator|=
literal|null
expr_stmt|;
name|iterator
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Still stuff left in the clonerator. Create a compound
comment|// iterator, so that if they go further next time, it will
comment|// read later stuff from the clonerator.
name|iterator
operator|=
operator|new
name|CompoundIterator
argument_list|(
operator|new
name|Iterator
index|[]
block|{
name|list
operator|.
name|iterator
argument_list|()
block|,
name|clonerator
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Reads from an iterator, duplicating elements into a list as it does so.      */
specifier|static
class|class
name|Clonerator
implements|implements
name|Iterator
block|{
name|Iterator
name|iterator
decl_stmt|;
name|List
name|list
decl_stmt|;
name|Clonerator
parameter_list|(
name|Iterator
name|iterator
parameter_list|,
name|List
name|list
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|Object
name|o
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End BufferedIterator.java
end_comment

end_unit

