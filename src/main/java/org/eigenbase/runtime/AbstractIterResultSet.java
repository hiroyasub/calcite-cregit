begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util14
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * AbstractIterResultSet provides functionality common to all ResultSet  * implementations that convert from iterator convention.  *  * @author Stephan Zuercher  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractIterResultSet
extends|extends
name|AbstractResultSet
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|ColumnGetter
name|columnGetter
decl_stmt|;
specifier|protected
name|Object
name|current
decl_stmt|;
specifier|protected
name|int
name|row
decl_stmt|;
comment|// 1-based (starts on 0 to represent before first row)
specifier|protected
name|long
name|timeoutMillis
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|AbstractIterResultSet
parameter_list|(
name|ColumnGetter
name|columnGetter
parameter_list|)
block|{
name|Util
operator|.
name|discard
argument_list|(
name|columnGetter
operator|.
name|getColumnNames
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnGetter
operator|=
name|columnGetter
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|private
name|String
index|[]
name|getColumnNames
parameter_list|()
block|{
name|String
index|[]
name|columnNames
init|=
name|columnGetter
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnNames
operator|==
literal|null
condition|)
block|{
return|return
name|Util
operator|.
name|emptyStringArray
return|;
block|}
else|else
block|{
return|return
name|columnNames
return|;
block|}
block|}
comment|/**      * Sets the timeout that this AbstractIterResultSet will wait for a row from      * the underlying iterator. Note that the timeout must be implemented in the      * abstract method {@link #next()}.      *      * @param timeoutMillis Timeout in milliseconds. Must be greater than zero.      *      * @pre timeoutMillis> 0      * @pre this.timeoutMillis == 0      */
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
block|{
name|Util
operator|.
name|pre
argument_list|(
name|timeoutMillis
operator|>
literal|0
argument_list|,
literal|"timeoutMillis> 0"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|pre
argument_list|(
name|this
operator|.
name|timeoutMillis
operator|==
literal|0
argument_list|,
literal|"this.timeoutMillis == 0"
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeoutMillis
operator|=
name|timeoutMillis
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAfterLast
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO jvs 25-June-2005:  make this return true after
comment|// next() returns false
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isBeforeFirst
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// REVIEW jvs 25-June-2005:  make this return false if there are
comment|// no rows?
return|return
name|row
operator|==
literal|0
return|;
block|}
specifier|public
name|void
name|setFetchSize
parameter_list|(
name|int
name|rows
parameter_list|)
throws|throws
name|SQLException
block|{
block|}
specifier|public
name|int
name|getFetchSize
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|isFirst
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|row
operator|==
literal|1
return|;
block|}
specifier|public
name|boolean
name|isLast
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|ResultSetMetaData
name|getMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
operator|new
name|MetaData
argument_list|()
return|;
block|}
specifier|public
name|int
name|getRow
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|row
return|;
block|}
comment|/**      * Returns the raw value of a column as an object.      */
specifier|protected
name|Object
name|getRaw
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|columnGetter
operator|.
name|get
argument_list|(
name|current
argument_list|,
name|columnIndex
argument_list|)
return|;
block|}
comment|//~ Inner Interfaces -------------------------------------------------------
comment|/**      * A<code>ColumnGetter</code> retrieves a column from an input row based      * upon its 1-based ordinal.      */
specifier|public
interface|interface
name|ColumnGetter
block|{
name|String
index|[]
name|getColumnNames
parameter_list|()
function_decl|;
name|Object
name|get
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|columnIndex
parameter_list|)
function_decl|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * A<code>FieldGetter</code> retrieves each public field as a separate      * column.      */
specifier|public
specifier|static
class|class
name|FieldGetter
implements|implements
name|ColumnGetter
block|{
specifier|private
specifier|static
specifier|final
name|Field
index|[]
name|emptyFieldArray
init|=
operator|new
name|Field
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|final
name|Class
name|clazz
decl_stmt|;
specifier|private
specifier|final
name|Field
index|[]
name|fields
decl_stmt|;
specifier|public
name|FieldGetter
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|getFields
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getColumnNames
parameter_list|()
block|{
name|String
index|[]
name|columnNames
init|=
operator|new
name|String
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columnNames
index|[
name|i
index|]
operator|=
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|columnNames
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
try|try
block|{
return|return
name|fields
index|[
name|columnIndex
operator|-
literal|1
index|]
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"Error while retrieving field "
operator|+
name|fields
index|[
name|columnIndex
operator|-
literal|1
index|]
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"Error while retrieving field "
operator|+
name|fields
index|[
name|columnIndex
operator|-
literal|1
index|]
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Field
index|[]
name|getFields
parameter_list|()
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
name|clazz
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|Field
index|[]
operator|)
name|list
operator|.
name|toArray
argument_list|(
name|emptyFieldArray
argument_list|)
return|;
block|}
block|}
comment|// ------------------------------------------------------------------------
comment|// NOTE jvs 30-May-2003:  I made this public because iSQL wanted it that
comment|// way for reflection.
specifier|public
class|class
name|MetaData
extends|extends
name|Unwrappable
implements|implements
name|ResultSetMetaData
block|{
specifier|public
name|boolean
name|isAutoIncrement
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getCatalogName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|String
name|getColumnClassName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|getColumnNames
argument_list|()
operator|.
name|length
return|;
block|}
specifier|public
name|int
name|getColumnDisplaySize
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getPrecision
argument_list|(
name|column
argument_list|)
return|;
block|}
specifier|public
name|String
name|getColumnLabel
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getColumnName
argument_list|(
name|column
argument_list|)
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getColumnNames
argument_list|()
index|[
name|column
operator|-
literal|1
index|]
return|;
block|}
specifier|public
name|int
name|getColumnType
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|Types
operator|.
name|VARCHAR
return|;
block|}
specifier|public
name|String
name|getColumnTypeName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|"VARCHAR"
return|;
block|}
specifier|public
name|boolean
name|isCurrency
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isDefinitelyWritable
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|isNullable
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getPrecision
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// NOTE jvs 13-June-2006:  I put this in so that EXPLAIN PLAN
comment|// would work via VJDBC; but should probably do something
comment|// better down at the Farrago level instead.
return|return
literal|65535
return|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getScale
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|getSchemaName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|boolean
name|isSearchable
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isSigned
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|boolean
name|isWritable
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * A<code>SingletonColumnGetter</code> retrieves the object itself.      */
specifier|public
specifier|static
class|class
name|SingletonColumnGetter
implements|implements
name|ColumnGetter
block|{
specifier|public
name|SingletonColumnGetter
parameter_list|()
block|{
block|}
specifier|public
name|String
index|[]
name|getColumnNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"column0"
block|}
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
assert|assert
operator|(
name|columnIndex
operator|==
literal|1
operator|)
assert|;
return|return
name|o
return|;
block|}
block|}
comment|/**      * A<code>SyntheticColumnGetter</code> retrieves columns from a synthetic      * object.      */
specifier|public
specifier|static
class|class
name|SyntheticColumnGetter
implements|implements
name|ColumnGetter
block|{
name|String
index|[]
name|columnNames
decl_stmt|;
name|Field
index|[]
name|fields
decl_stmt|;
specifier|public
name|SyntheticColumnGetter
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
assert|assert
operator|(
name|SyntheticObject
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|)
assert|;
name|this
operator|.
name|fields
operator|=
name|clazz
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|this
operator|.
name|columnNames
operator|=
operator|new
name|String
index|[
name|fields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columnNames
index|[
name|i
index|]
operator|=
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|getColumnNames
parameter_list|()
block|{
return|return
name|columnNames
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
try|try
block|{
return|return
name|fields
index|[
name|columnIndex
operator|-
literal|1
index|]
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Indicates that an operation timed out. This is not an error; you can      * retry the operation.      */
specifier|public
specifier|static
class|class
name|SqlTimeoutException
extends|extends
name|SQLException
block|{
name|SqlTimeoutException
parameter_list|()
block|{
comment|// SQLException(reason, SQLState, vendorCode)
comment|// REVIEW mb 19-Jul-05 Is there a standard SQLState?
name|super
argument_list|(
literal|"timeout"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End AbstractIterResultSet.java
end_comment

end_unit

