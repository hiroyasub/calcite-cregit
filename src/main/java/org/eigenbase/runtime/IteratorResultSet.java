begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>IteratorResultSet</code> is an adapter which converts a {@link  * java.util.Iterator} into a {@link java.sql.ResultSet}.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|IteratorResultSet
extends|extends
name|AbstractIterResultSet
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Iterator
name|iterator
decl_stmt|;
specifier|private
name|TimeoutQueueIterator
name|timeoutIter
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a result set based upon an iterator. The column-getter accesses      * columns based upon their ordinal.      *      * @pre iterator != null      */
specifier|public
name|IteratorResultSet
parameter_list|(
name|Iterator
name|iterator
parameter_list|,
name|ColumnGetter
name|columnGetter
parameter_list|)
block|{
name|super
argument_list|(
name|columnGetter
argument_list|)
expr_stmt|;
name|Util
operator|.
name|pre
argument_list|(
name|iterator
operator|!=
literal|null
argument_list|,
literal|"iterator != null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Factory method. Returns a suitable implementation for the current JDBC      * version.      *      * @param iterator Underlying iterator      * @param columnGetter Accesses columns      */
specifier|public
specifier|static
name|IteratorResultSet
name|create
parameter_list|(
name|Iterator
name|iterator
parameter_list|,
name|ColumnGetter
name|columnGetter
parameter_list|)
block|{
return|return
operator|new
name|IteratorResultSetJdbc41
argument_list|(
name|iterator
argument_list|,
name|columnGetter
argument_list|)
return|;
block|}
comment|/**      * Sets the timeout that this IteratorResultSet will wait for a row from the      * underlying iterator.      *      * @param timeoutMillis Timeout in milliseconds. Must be greater than zero.      */
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
block|{
name|super
operator|.
name|setTimeout
argument_list|(
name|timeoutMillis
argument_list|)
expr_stmt|;
assert|assert
name|timeoutIter
operator|==
literal|null
assert|;
comment|// we create a new semaphore for each executeQuery call
comment|// and then pass ownership to the result set returned
comment|// the query timeout used is the last set via JDBC.
name|timeoutIter
operator|=
operator|new
name|TimeoutQueueIterator
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|timeoutIter
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|timeoutIter
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
name|noTimeout
init|=
literal|0
decl_stmt|;
name|timeoutIter
operator|.
name|close
argument_list|(
name|noTimeout
argument_list|)
expr_stmt|;
name|timeoutIter
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ------------------------------------------------------------------------
comment|// the remaining methods implement ResultSet
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|timeoutIter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeoutMillis
decl_stmt|;
if|if
condition|(
name|timeoutIter
operator|.
name|hasNext
argument_list|(
name|timeoutMillis
argument_list|)
condition|)
block|{
name|long
name|remainingTimeout
init|=
name|endTime
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainingTimeout
operator|<=
literal|0
condition|)
block|{
comment|// The call to hasNext() took longer than we
comment|// expected -- we're out of time.
throw|throw
operator|new
name|SqlTimeoutException
argument_list|()
throw|;
block|}
name|this
operator|.
name|current
operator|=
name|timeoutIter
operator|.
name|next
argument_list|(
name|remainingTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|row
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|QueueIterator
operator|.
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SqlTimeoutException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|newFetchError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|this
operator|.
name|current
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|this
operator|.
name|row
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|newFetchError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|IteratorResultSetJdbc41
extends|extends
name|IteratorResultSet
block|{
specifier|public
name|IteratorResultSetJdbc41
parameter_list|(
name|Iterator
name|iterator
parameter_list|,
name|ColumnGetter
name|columnGetter
parameter_list|)
block|{
name|super
argument_list|(
name|iterator
argument_list|,
name|columnGetter
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getObject
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|getObject
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getObject
parameter_list|(
name|String
name|columnLabel
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|getObject
argument_list|(
name|columnLabel
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End IteratorResultSet.java
end_comment

end_unit

