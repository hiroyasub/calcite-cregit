begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>ResultSetIterator</code> is an adapter which converts a {@link  * ResultSet} to a {@link Iterator}.  *  *<p>NOTE jvs 21-Mar-2006: This class is no longer used except by Saffron, but  * is generally useful. Should probably be moved to a utility package.  */
end_comment

begin_class
specifier|public
class|class
name|ResultSetIterator
implements|implements
name|RestartableIterator
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
name|ResultSet
name|resultSet
decl_stmt|;
specifier|private
name|Object
name|row
decl_stmt|;
specifier|private
name|boolean
name|endOfStream
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|ResultSetIterator
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
comment|// NOTE jvs 4-Mar-2004:  I changed this to not call makeRow() from
comment|// this constructor, since subclasses aren't initialized yet.  Now
comment|// it follows the same pattern as CalcTupleIter.
name|this
operator|.
name|resultSet
operator|=
name|resultSet
expr_stmt|;
name|endOfStream
operator|=
literal|false
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|moveToNext
argument_list|()
expr_stmt|;
return|return
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
name|Object
name|result
init|=
name|row
decl_stmt|;
name|row
operator|=
literal|null
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|restart
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|resultSet
operator|.
name|first
argument_list|()
condition|)
block|{
name|endOfStream
operator|=
literal|false
expr_stmt|;
name|row
operator|=
name|makeRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates an object representing the current row of the result set. The      * default implementation of this method returns a {@link Row}, but derived      * classes may override this.      */
specifier|protected
name|Object
name|makeRow
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
operator|new
name|Row
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
specifier|private
name|void
name|moveToNext
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|endOfStream
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|row
operator|=
name|makeRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// record endOfStream since some ResultSet implementations don't
comment|// like extra calls to next() after it returns false
name|endOfStream
operator|=
literal|true
expr_stmt|;
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ResultSetIterator.java
end_comment

end_unit

