begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test case for {@link QueueIterator} and its subclasses {@link ThreadIterator}  * and {@link TimeoutQueueIterator}.  */
end_comment

begin_class
specifier|public
class|class
name|QueueIteratorTest
extends|extends
name|TestCase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**      * Multiplier which determines how long each logical clock tick lasts, and      * therefore how fast the test is run. If you are getting sporadic problems,      * raise the value. 100 seems to be too low; 200 seems to be OK on my 1.8GHz      * laptop.      */
specifier|private
specifier|static
specifier|final
name|int
name|tickMillis
init|=
literal|1000
decl_stmt|;
comment|/**      * Contents of queue in both tests.      */
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|queueValues
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|null
block|,
literal|"d"
block|}
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/**      * Timestamp at which the test started. All timeouts are relative to this.      */
specifier|private
name|long
name|startTime
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|QueueIteratorTest
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// NOTE jvs 21-Oct-2006:  I'm disabling this test because
comment|// it fails sporadically, and we're planning to eliminate
comment|// usage of this class anyway (http://issues.eigenbase.org/browse/FRG-168).
specifier|public
name|void
name|testTimeoutIterator
parameter_list|()
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// writer
name|TickIterator
name|tickIter
init|=
operator|new
name|TickIterator
argument_list|(
name|queueValues
argument_list|,
literal|false
argument_list|,
name|startTime
argument_list|)
decl_stmt|;
comment|// reader
name|TestingTimeoutQueueIterator
name|ttqi
init|=
operator|new
name|TestingTimeoutQueueIterator
argument_list|(
name|tickIter
argument_list|)
decl_stmt|;
name|ttqi
operator|.
name|start
argument_list|()
expr_stmt|;
name|read
argument_list|(
name|ttqi
operator|.
name|getQueueIterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testThreadIterator
parameter_list|()
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// reader and writer
name|ThreadIterator
name|threadIter
init|=
operator|new
name|ThreadIterator
argument_list|()
block|{
comment|// paced data source
name|TickIterator
name|tickIter
init|=
operator|new
name|TickIterator
argument_list|(
name|queueValues
argument_list|,
literal|false
argument_list|,
name|startTime
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|doWork
parameter_list|()
block|{
while|while
condition|(
name|tickIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|put
argument_list|(
name|tickIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threadIter
operator|.
name|start
argument_list|()
expr_stmt|;
name|read
argument_list|(
name|threadIter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|read
parameter_list|(
name|QueueIterator
name|iter
parameter_list|)
block|{
comment|// tick 1: hasNext() returns true at tick 1
comment|// tick 2: next() returns "a"
comment|// tick 2: object is available
name|assertHasNext
argument_list|(
name|iter
argument_list|,
literal|true
argument_list|,
name|toMillis
argument_list|(
literal|2.1
argument_list|)
argument_list|)
expr_stmt|;
comment|// call next with zero timeout -- it already has the answer
name|assertNext
argument_list|(
name|iter
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// tick 3: hasNext returns true at tick 3
name|assertHasNextTimesOut
argument_list|(
name|iter
argument_list|,
name|toMillis
argument_list|(
literal|2.7
argument_list|)
argument_list|)
expr_stmt|;
name|assertHasNextTimesOut
argument_list|(
name|iter
argument_list|,
name|toMillis
argument_list|(
literal|2.9
argument_list|)
argument_list|)
expr_stmt|;
comment|// tick 4: next returns "b"
comment|// tick 4: object is available
name|assertNextTimesOut
argument_list|(
name|iter
argument_list|,
name|toMillis
argument_list|(
literal|3.3
argument_list|)
argument_list|)
expr_stmt|;
comment|// call next with zero timeout will timeout immediately (not the
comment|// same as JDBC ResultSet.setQueryTimeout(0), which means don't
comment|// timeout ever)
name|assertNextTimesOut
argument_list|(
name|iter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNextTimesOut
argument_list|(
name|iter
argument_list|,
name|toMillis
argument_list|(
literal|3.6
argument_list|)
argument_list|)
expr_stmt|;
name|assertNextTimesOut
argument_list|(
name|iter
argument_list|,
name|toMillis
argument_list|(
literal|3.8
argument_list|)
argument_list|)
expr_stmt|;
name|assertNext
argument_list|(
name|iter
argument_list|,
literal|"b"
argument_list|,
name|toMillis
argument_list|(
literal|4.2
argument_list|)
argument_list|)
expr_stmt|;
comment|// tick 5: hasNext returns true
comment|// tick 6: next returns null (does not mean end of data)
comment|// tick 6: object is available
comment|// tick 7: hasNext returns true
comment|// tick 8: next returns "d"
comment|// tick 8: object is available
name|assertHasNext
argument_list|(
name|iter
argument_list|,
literal|true
argument_list|,
name|toMillis
argument_list|(
literal|8.1
argument_list|)
argument_list|)
expr_stmt|;
comment|// call hasNext twice in succession
name|assertHasNext
argument_list|(
name|iter
argument_list|,
literal|true
argument_list|,
name|toMillis
argument_list|(
literal|8.2
argument_list|)
argument_list|)
expr_stmt|;
comment|// call hasNext with zero timeout -- it already has the answer
name|assertHasNext
argument_list|(
name|iter
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// call hasNext with non-zero timeout -- it already has the answer
name|assertHasNext
argument_list|(
name|iter
argument_list|,
literal|true
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertNext
argument_list|(
name|iter
argument_list|,
literal|null
argument_list|,
name|toMillis
argument_list|(
literal|8.2
argument_list|)
argument_list|)
expr_stmt|;
comment|// call next() without calling hasNext() is legal
name|assertNext
argument_list|(
name|iter
argument_list|,
literal|"d"
argument_list|,
name|toMillis
argument_list|(
literal|8.3
argument_list|)
argument_list|)
expr_stmt|;
name|assertHasNextTimesOut
argument_list|(
name|iter
argument_list|,
name|toMillis
argument_list|(
literal|8.4
argument_list|)
argument_list|)
expr_stmt|;
name|assertHasNextTimesOut
argument_list|(
name|iter
argument_list|,
name|toMillis
argument_list|(
literal|8.5
argument_list|)
argument_list|)
expr_stmt|;
comment|// tick 9: hasNext returns false
comment|// tick 9: no object is available
name|assertHasNext
argument_list|(
name|iter
argument_list|,
literal|false
argument_list|,
name|toMillis
argument_list|(
literal|10.5
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|iter
operator|.
name|next
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not throw NoSuchElementException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueueIterator
operator|.
name|TimeoutException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"next() timed out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// perfect
block|}
block|}
specifier|private
name|void
name|assertHasNext
parameter_list|(
name|QueueIterator
name|iter
parameter_list|,
name|boolean
name|expected
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
try|try
block|{
name|boolean
name|b
init|=
name|iter
operator|.
name|hasNext
argument_list|(
name|timeoutMillis
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueueIterator
operator|.
name|TimeoutException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"hasNext() timed out at "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertHasNextTimesOut
parameter_list|(
name|QueueIterator
name|iter
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
literal|false
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"entering hasNext at "
operator|+
operator|new
name|Date
argument_list|()
operator|+
literal|" with "
operator|+
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
name|boolean
name|b
init|=
name|iter
operator|.
name|hasNext
argument_list|(
name|timeoutMillis
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"hasNext() returned "
operator|+
name|b
operator|+
literal|" and did not time out at "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueueIterator
operator|.
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// success -- we timed out
block|}
block|}
specifier|private
name|void
name|assertNext
parameter_list|(
name|QueueIterator
name|iter
parameter_list|,
name|Object
name|expected
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
try|try
block|{
name|Object
name|actual
init|=
name|iter
operator|.
name|next
argument_list|(
name|timeoutMillis
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueueIterator
operator|.
name|TimeoutException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"next() timed out at "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertNextTimesOut
parameter_list|(
name|QueueIterator
name|iter
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
try|try
block|{
name|Object
name|o
init|=
name|iter
operator|.
name|next
argument_list|(
name|timeoutMillis
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"next() did not time out at "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueueIterator
operator|.
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// success -- we timed out
block|}
block|}
specifier|private
name|long
name|toMillis
parameter_list|(
name|double
name|tick
parameter_list|)
block|{
name|long
name|endTime
init|=
name|startTime
operator|+
operator|(
name|long
operator|)
operator|(
name|tick
operator|*
name|tickMillis
operator|)
decl_stmt|;
return|return
name|endTime
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * A TimeoutQueueIterator that exposes its inner QueueIterator for direct      * reading. Just a kludge to fit this test.      */
specifier|private
specifier|static
class|class
name|TestingTimeoutQueueIterator
extends|extends
name|TimeoutQueueIterator
block|{
name|TestingTimeoutQueueIterator
parameter_list|(
name|Iterator
name|producer
parameter_list|)
block|{
name|super
argument_list|(
name|producer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QueueIterator
name|getQueueIterator
parameter_list|()
block|{
return|return
name|queueIterator
return|;
block|}
block|}
comment|/**      * Iterator which returns an element from an array on a regular basis.      *      *<p>Every clock tick until the array is exhausted, {@link #hasNext}      * returns true, then the following clock tick, {@link #next} returns an      * object. If you call a method too early, the method waits until the      * appropriate time.      */
specifier|private
specifier|static
class|class
name|TickIterator
implements|implements
name|Iterator
block|{
specifier|private
specifier|final
name|boolean
name|verbose
decl_stmt|;
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
specifier|private
name|int
name|current
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|values
decl_stmt|;
name|TickIterator
parameter_list|(
name|Object
index|[]
name|values
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|int
name|tick
init|=
operator|(
name|current
operator|*
literal|2
operator|)
operator|+
literal|1
decl_stmt|;
name|waitUntil
argument_list|(
name|tick
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|<
name|values
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" (tick "
operator|+
name|tick
operator|+
literal|") hasNext returns true"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" (tick "
operator|+
name|tick
operator|+
literal|") hasNext returns false"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|waitUntil
parameter_list|(
name|int
name|tick
parameter_list|)
block|{
name|long
name|timeToWait
init|=
operator|(
name|startTime
operator|+
operator|(
name|tick
operator|*
name|QueueIteratorTest
operator|.
name|tickMillis
operator|)
operator|)
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeToWait
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeToWait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|int
name|tick
init|=
operator|(
name|current
operator|*
literal|2
operator|)
operator|+
literal|2
decl_stmt|;
name|waitUntil
argument_list|(
name|tick
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|values
index|[
name|current
index|]
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" (tick "
operator|+
name|tick
operator|+
literal|") return "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
operator|++
name|current
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
specifier|static
name|void
name|demo
parameter_list|()
block|{
name|String
index|[]
name|values
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
name|TickIterator
name|tickIterator
init|=
operator|new
name|TickIterator
argument_list|(
name|values
argument_list|,
literal|true
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|tickIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Util
operator|.
name|discard
argument_list|(
name|tickIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End QueueIteratorTest.java
end_comment

end_unit

