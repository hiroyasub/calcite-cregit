begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test case for {@link TimeoutQueueTupleIter}.  */
end_comment

begin_class
specifier|public
class|class
name|TimeoutQueueTupleIterTest
extends|extends
name|TestCase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**      * Multiplier which determines how long each logical clock tick lasts, and      * therefore how fast the test is run. If you are getting sporadic problems,      * raise the value. 100 seems to be too low; 200 seems to be OK on my 1.8GHz      * laptop.      */
specifier|private
specifier|static
specifier|final
name|int
name|tickMillis
init|=
literal|1000
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/**      * Timestamp at which the test started. All timeouts are relative to this.      */
specifier|private
name|long
name|startTime
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|TimeoutQueueTupleIterTest
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|testDummy
parameter_list|()
block|{
block|}
comment|// NOTE jvs 21-Oct-2006:  I'm disabling this test because
comment|// it fails sporadically, and we're planning to eliminate
comment|// usage of this class anyway (http://issues.eigenbase.org/browse/FRG-168).
specifier|public
name|void
name|_testTimeoutTupleIter
parameter_list|()
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|String
index|[]
name|values
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|null
block|,
literal|"d"
block|}
decl_stmt|;
name|TickIterator
name|tickIter
init|=
operator|new
name|TickIterator
argument_list|(
name|values
argument_list|,
literal|false
argument_list|,
name|startTime
argument_list|)
decl_stmt|;
name|TimeoutQueueTupleIter
name|timeoutIter
init|=
operator|new
name|TimeoutQueueTupleIter
argument_list|(
name|tickIter
argument_list|)
decl_stmt|;
name|timeoutIter
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// tick 1: fetchNext returns "a"
name|assertFetchNext
argument_list|(
name|timeoutIter
argument_list|,
literal|"a"
argument_list|,
name|toMillis
argument_list|(
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing available until tick 2
name|assertFetchNextTimesOut
argument_list|(
name|timeoutIter
argument_list|,
name|toMillis
argument_list|(
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
comment|// tick 2: fetchNext returns "b"
name|assertFetchNext
argument_list|(
name|timeoutIter
argument_list|,
literal|"b"
argument_list|,
name|toMillis
argument_list|(
literal|2.1
argument_list|)
argument_list|)
expr_stmt|;
comment|// tick 3: fetchNext returns null
name|assertFetchNext
argument_list|(
name|timeoutIter
argument_list|,
literal|null
argument_list|,
name|toMillis
argument_list|(
literal|3.1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFetchNextTimesOut
argument_list|(
name|timeoutIter
argument_list|,
name|toMillis
argument_list|(
literal|3.8
argument_list|)
argument_list|)
expr_stmt|;
comment|// tick 4: fetchNext returns "d"
name|assertFetchNext
argument_list|(
name|timeoutIter
argument_list|,
literal|"d"
argument_list|,
name|toMillis
argument_list|(
literal|4.5
argument_list|)
argument_list|)
expr_stmt|;
comment|// tick 5: fetchNext returns NoDataReason.END_OF_DATA
name|assertFetchNext
argument_list|(
name|timeoutIter
argument_list|,
name|TupleIter
operator|.
name|NoDataReason
operator|.
name|END_OF_DATA
argument_list|,
name|toMillis
argument_list|(
literal|6.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertFetchNext
parameter_list|(
name|TimeoutQueueTupleIter
name|timeoutIter
parameter_list|,
name|Object
name|expected
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
try|try
block|{
name|Object
name|actual
init|=
name|timeoutIter
operator|.
name|fetchNext
argument_list|(
name|timeoutMillis
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueueIterator
operator|.
name|TimeoutException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"fetchNext() timed out at "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertFetchNextTimesOut
parameter_list|(
name|TimeoutQueueTupleIter
name|timeoutIter
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
try|try
block|{
name|Object
name|o
init|=
name|timeoutIter
operator|.
name|fetchNext
argument_list|(
name|timeoutMillis
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fetchNext() did not time out at "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueueIterator
operator|.
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// success -- we timed out
block|}
block|}
specifier|private
name|long
name|toMillis
parameter_list|(
name|double
name|tick
parameter_list|)
block|{
name|long
name|endTime
init|=
name|startTime
operator|+
operator|(
name|long
operator|)
operator|(
name|tick
operator|*
name|tickMillis
operator|)
decl_stmt|;
return|return
name|endTime
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Iterator which returns an element from an array on a regular basis.      *      *<p>Every clock tick until the array is exhausted, {@link      * Iterator#hasNext} returns true, then the following clock tick, {@link      * Iterator#next} returns an object. If you call a method too early, the      * method waits until the appropriate time.      */
specifier|private
specifier|static
class|class
name|TickIterator
extends|extends
name|AbstractTupleIter
block|{
specifier|private
specifier|final
name|boolean
name|verbose
decl_stmt|;
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
specifier|private
name|int
name|current
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|values
decl_stmt|;
name|TickIterator
parameter_list|(
name|Object
index|[]
name|values
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
specifier|private
name|void
name|waitUntil
parameter_list|(
name|int
name|tick
parameter_list|)
block|{
name|long
name|timeToWait
init|=
operator|(
name|startTime
operator|+
operator|(
name|tick
operator|*
name|TimeoutQueueTupleIterTest
operator|.
name|tickMillis
operator|)
operator|)
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeToWait
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeToWait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
name|Object
name|fetchNext
parameter_list|()
block|{
name|int
name|tick
init|=
name|current
operator|+
literal|1
decl_stmt|;
name|waitUntil
argument_list|(
name|tick
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|<
name|values
operator|.
name|length
condition|)
block|{
name|Object
name|value
init|=
name|values
index|[
name|current
index|]
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Date
argument_list|()
operator|+
literal|" (tick "
operator|+
name|tick
operator|+
literal|") return "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
operator|++
name|current
expr_stmt|;
return|return
name|value
return|;
block|}
return|return
name|NoDataReason
operator|.
name|END_OF_DATA
return|;
block|}
specifier|public
name|void
name|restart
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|closeAllocation
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|void
name|demo
parameter_list|()
block|{
name|String
index|[]
name|values
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
name|TickIterator
name|tickIterator
init|=
operator|new
name|TickIterator
argument_list|(
name|values
argument_list|,
literal|true
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|o
decl_stmt|;
while|while
condition|(
operator|(
name|o
operator|=
name|tickIterator
operator|.
name|fetchNext
argument_list|()
operator|)
operator|!=
name|NoDataReason
operator|.
name|END_OF_DATA
condition|)
block|{
name|Util
operator|.
name|discard
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End TimeoutQueueTupleIterTest.java
end_comment

end_unit

