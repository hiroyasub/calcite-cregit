begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Adapter which allows you to iterate over an {@link TupleIter} with a timeout.  *  *<p>The interface is similar to an {@link TupleIter}: the {@link #fetchNext}  * method retrieves rows and indicates when there are no more rows. It has a  * timeout parameter, and throws a {@link QueueIterator.TimeoutException} if the  * timeout is exceeded. There is also a {@link #closeAllocation} method, which  * you must call.  *  *<p>The class is implemented using a thread which reads from the underlying  * TupleIter and places the results into a {@link QueueIterator}. If a method  * call times out, the underlying thread will wait for the result of the call  * until it completes.  *  *<p>There is no facility to cancel the fetch from the underlying iterator.  *  *<p><b>Reader/writer synchronization and the {@link #FENCEPOST}.</b> The  * thread within this class that reads row objects from the underlying  * TupleIter(s) must be careful not to read a subsequent row until the reading  * thread (e.g., the driver) is finished with the row. This is because the same  * row object may be re-used for subsequent rows. To achieve this, this class's  * thread always inserts {@link #FENCEPOST} after every row object and the  * {@link #fetchNext} method detects and discards the fencepost. The nature of  * the underlying {@link QueueIterator}'s SynchronousQueue prevents the writing  * thread from completing the put operation of the fencepost until the reading  * thread is prepared to read the value. In this way we guarantee that the row  * object is not modified until the reader has requested the next row object, at  * which point we assume it's safe to modify the row object.  *  * @author Stephan Zuecher (based on tleung's TimeoutQueueIterator)  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|TimeoutQueueTupleIter
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**      * Prevents reader's row object from being clobbered by the next row. See      * class description for how this works.      */
specifier|private
specifier|static
specifier|final
name|Fencepost
name|FENCEPOST
init|=
operator|new
name|Fencepost
argument_list|()
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|QueueIterator
name|queueIterator
decl_stmt|;
specifier|private
specifier|final
name|TupleIter
name|producer
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|TimeoutQueueTupleIter
parameter_list|(
name|TupleIter
name|producer
parameter_list|)
block|{
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
name|this
operator|.
name|queueIterator
operator|=
operator|new
name|QueueIterator
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Retrieve the next row from the underlying TupleIter, with the given      * timeout, in milliseconds.      *      *<p>See class description re: {@link #FENCEPOST}.      *      * @param timeoutMillis number of milliseconds to wait for the next row;      * less than or equal to 0 means do not wait      *      * @return next row      *      * @throws org.eigenbase.runtime.QueueIterator.TimeoutException on timeout      */
specifier|public
name|Object
name|fetchNext
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|QueueIterator
operator|.
name|TimeoutException
block|{
comment|// REVIEW: SWZ: 7/13/2006: A particularly timeout particularly
comment|// close to the amount of time it takes to fetch a row may
comment|// cause problems due to the fencepost objects.  Perhaps we
comment|// should reset the timeout when we find a fencepost object?
comment|// Then again, fetch time is in no way guaranteed constant, so
comment|// the timeout is probably to close for comfort even if we
comment|// reset.
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeoutMillis
decl_stmt|;
while|while
condition|(
name|queueIterator
operator|.
name|hasNext
argument_list|(
name|timeoutMillis
argument_list|)
condition|)
block|{
name|long
name|remainingTimeout
init|=
name|endTime
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainingTimeout
operator|<=
literal|0
condition|)
block|{
comment|// hasNext() took too long
throw|throw
operator|new
name|QueueIterator
operator|.
name|TimeoutException
argument_list|()
throw|;
block|}
name|Object
name|result
init|=
name|queueIterator
operator|.
name|next
argument_list|(
name|remainingTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|FENCEPOST
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|TupleIter
operator|.
name|NoDataReason
operator|.
name|END_OF_DATA
return|;
block|}
comment|/**      * Starts the thread which reads from the consumer.      *      * @pre thread == null // not previously started      */
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|Util
operator|.
name|pre
argument_list|(
name|thread
operator|==
literal|null
argument_list|,
literal|"thread == null"
argument_list|)
expr_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|doWork
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"TimeoutQueueTupleIter"
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Releases the resources used by this iterator, including killing the      * underlying thread.      *      * @param timeoutMillis Timeout while waiting for the underlying thread to      * die. Zero means wait forever.      */
specifier|public
specifier|synchronized
name|void
name|closeAllocation
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
block|{
if|if
condition|(
name|thread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Empty the queue -- the thread will wait for us to consume
comment|// all items in the queue, hanging the join call.
while|while
condition|(
name|queueIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|queueIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|thread
operator|.
name|join
argument_list|(
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore } catch (QueueIterator.TimeoutException e) { not
comment|// actually possible - because hasNext(timeout=0) means to poll
block|}
name|thread
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Reads objects from the producer and writes them into the QueueIterator.      * This is the method called by the thread when you call {@link #start}.      * Never throws an exception.      *      *<p>See class description re: {@link #FENCEPOST}.      */
specifier|private
name|void
name|doWork
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|next
init|=
name|producer
operator|.
name|fetchNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|TupleIter
operator|.
name|NoDataReason
operator|.
name|END_OF_DATA
condition|)
block|{
break|break;
block|}
if|else if
condition|(
name|next
operator|instanceof
name|TupleIter
operator|.
name|NoDataReason
condition|)
block|{
comment|// TODO: SWZ: 2/23/2006: Better exception
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
comment|// Insert the object and then a fencepost.
name|queueIterator
operator|.
name|put
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|queueIterator
operator|.
name|put
argument_list|(
name|FENCEPOST
argument_list|)
expr_stmt|;
block|}
comment|// Signal that the stream ended without error.
name|queueIterator
operator|.
name|done
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Signal that the stream ended with an error.
name|queueIterator
operator|.
name|done
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|private
specifier|static
class|class
name|Fencepost
block|{
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FENCEPOST_DUMMY"
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End TimeoutQueueTupleIter.java
end_comment

end_unit

