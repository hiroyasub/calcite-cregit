begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<code>RestartableCollectionTupleIter</code> implements the {@link TupleIter}  * interface in terms of an underlying {@link Collection}. It is used to  * implement {@link org.eigenbase.oj.rel.IterOneRowRel}.  *  * @author Stephan Zuercher  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RestartableCollectionTupleIter
extends|extends
name|AbstractTupleIter
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Collection
name|collection
decl_stmt|;
specifier|private
name|Iterator
name|iterator
decl_stmt|;
specifier|private
specifier|volatile
name|MoreDataListener
name|listener
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|// this handles the case where we thought a join was one-to-many
comment|// but it's actually one-to-one
specifier|public
name|RestartableCollectionTupleIter
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
name|collection
operator|=
operator|(
name|Collection
operator|)
name|obj
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|=
name|collection
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|listener
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|RestartableCollectionTupleIter
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|iterator
operator|=
name|collection
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|listener
operator|=
literal|null
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement TupleIter
specifier|public
name|boolean
name|addListener
parameter_list|(
name|MoreDataListener
name|c
parameter_list|)
block|{
name|listener
operator|=
name|c
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// implement TupleIter
specifier|public
name|Object
name|fetchNext
parameter_list|()
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
return|return
name|NoDataReason
operator|.
name|END_OF_DATA
return|;
block|}
comment|// implement TupleIter
specifier|public
name|void
name|restart
parameter_list|()
block|{
name|iterator
operator|=
name|collection
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|MoreDataListener
name|listener
init|=
name|this
operator|.
name|listener
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onMoreData
argument_list|()
expr_stmt|;
block|}
block|}
comment|// implement TupleIter
specifier|public
name|void
name|closeAllocation
parameter_list|()
block|{
name|iterator
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End RestartableCollectionTupleIter.java
end_comment

end_unit

