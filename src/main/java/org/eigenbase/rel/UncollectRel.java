begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A relational expression which unnests its input's sole column into a  * relation.  *  *<p>Like its inverse operation {@link CollectRel}, UncollectRel is generally  * invoked in a nested loop, driven by {@link CorrelatorRel} or similar.  *  * @author Wael Chatila  * @version $Id$  * @since Dec 12, 2004  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|UncollectRel
extends|extends
name|SingleRel
block|{
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates an UncollectRel.      *      *<p>The row type of the child relational expression must contain precisely      * one column, that column must be a multiset of records.      *      * @param cluster Cluster the relational expression belongs to      * @param child Child relational expression      */
specifier|public
name|UncollectRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|child
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|CallingConvention
operator|.
name|NONE
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
assert|assert
name|deriveRowType
argument_list|()
operator|!=
literal|null
operator|:
literal|"invalid child rowtype"
assert|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|CallingConvention
operator|.
name|NONE
argument_list|)
assert|;
return|return
operator|new
name|UncollectRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|deriveUncollectRowType
argument_list|(
name|getChild
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the row type returned by applying the 'UNNEST' operation to a      * relational expression. The relational expression must have precisely one      * column, whose type must be a multiset of structs. The return type is the      * type of that column.      */
specifier|public
specifier|static
name|RelDataType
name|deriveUncollectRowType
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|RelDataType
name|inputType
init|=
name|rel
operator|.
name|getRowType
argument_list|()
decl_stmt|;
assert|assert
name|inputType
operator|.
name|isStruct
argument_list|()
operator|:
name|inputType
operator|+
literal|" is not a struct"
assert|;
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|inputType
operator|.
name|getFields
argument_list|()
decl_stmt|;
assert|assert
literal|1
operator|==
name|fields
operator|.
name|length
operator|:
literal|"expected 1 field"
assert|;
name|RelDataType
name|ret
init|=
name|fields
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
assert|assert
literal|null
operator|!=
name|ret
assert|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isStruct
argument_list|()
condition|)
block|{
comment|// Element type is not a record. It may be a scalar type, say
comment|// "INTEGER". Wrap it in a struct type.
name|ret
operator|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
operator|new
name|RelDataType
index|[]
block|{
name|ret
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|SqlUtil
operator|.
name|deriveAliasFromOrdinal
argument_list|(
literal|0
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

begin_comment
comment|// End UncollectRel.java
end_comment

end_unit

