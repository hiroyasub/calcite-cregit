begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *<code>UnionRelBase</code> is an abstract base class for implementations of  * {@link UnionRel}.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|UnionRelBase
extends|extends
name|SetOpRel
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|UnionRelBase
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelNode
specifier|public
name|double
name|getRows
parameter_list|()
block|{
name|double
name|dRows
init|=
name|estimateRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDistinct
argument_list|()
condition|)
block|{
name|dRows
operator|*=
literal|0.5
expr_stmt|;
block|}
return|return
name|dRows
return|;
block|}
comment|/**      * Helper method for computing row count for UNION ALL.      *      * @param rel node representing UNION ALL      *      * @return estimated row count for rel      */
specifier|public
specifier|static
name|double
name|estimateRowCount
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|double
name|dRows
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|dRows
operator|+=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
return|return
name|dRows
return|;
block|}
block|}
end_class

begin_comment
comment|// End UnionRelBase.java
end_comment

end_unit

