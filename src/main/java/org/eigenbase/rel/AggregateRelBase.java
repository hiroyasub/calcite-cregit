begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<code>AggregateRelBase</code> is an abstract base class for implementations  * of {@link AggregateRel}.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AggregateRelBase
extends|extends
name|SingleRel
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
decl_stmt|;
specifier|protected
name|int
name|groupCount
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates an AggregateRelBase.      *      * @param cluster Cluster      * @param traits Traits      * @param child Child      * @param groupCount Size of grouping key      * @param aggCalls Collection of calls to aggregate functions      */
specifier|protected
name|AggregateRelBase
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|int
name|groupCount
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|Util
operator|.
name|pre
argument_list|(
name|aggCalls
operator|!=
literal|null
argument_list|,
literal|"aggCalls != null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupCount
operator|=
name|groupCount
expr_stmt|;
name|this
operator|.
name|aggCalls
operator|=
name|aggCalls
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelNode
specifier|public
name|boolean
name|isDistinct
parameter_list|()
block|{
comment|// REVIEW jvs 5-Apr-2008:  Shouldn't this just return true always?
comment|// How can the result of aggregation have any duplicates?
return|return
operator|(
name|aggCalls
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|groupCount
operator|==
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
comment|/**      * Returns a list of calls to aggregate functions.      *      * @return list of calls to aggregate functions      */
specifier|public
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|getAggCallList
parameter_list|()
block|{
return|return
name|aggCalls
return|;
block|}
comment|/**      * Returns the number of grouping fields. These fields are the leading      * fields in both the input and output records.      *      * @return number of grouping fields      */
specifier|public
name|int
name|getGroupCount
parameter_list|()
block|{
return|return
name|groupCount
return|;
block|}
specifier|public
name|void
name|explain
parameter_list|(
name|RelOptPlanWriter
name|pw
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"groupCount"
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|groupCount
argument_list|)
expr_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
operator|++
name|i
expr_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|aggCall
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|"agg#"
operator|+
name|i
expr_stmt|;
block|}
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|aggCall
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|explain
argument_list|(
name|this
argument_list|,
name|names
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|// implement RelNode
specifier|public
name|double
name|getRows
parameter_list|()
block|{
comment|// Assume that each sort column has 50% of the value count.
comment|// Therefore one sort column has .5 * rowCount,
comment|// 2 sort columns give .75 * rowCount.
comment|// Zero sort columns yields 1 row (or 0 if the input is empty).
if|if
condition|(
name|groupCount
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
name|double
name|rowCount
init|=
name|super
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|rowCount
operator|*=
operator|(
literal|1.0
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|.5
argument_list|,
name|groupCount
argument_list|)
operator|)
expr_stmt|;
return|return
name|rowCount
return|;
block|}
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
comment|// REVIEW jvs 24-Aug-2008:  This is bogus, but no more bogus
comment|// than what's currently in JoinRelBase.
name|double
name|rowCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
name|planner
operator|.
name|makeCost
argument_list|(
name|rowCount
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
operator|new
name|RelDataTypeFactory
operator|.
name|FieldInfo
argument_list|()
block|{
specifier|public
name|int
name|getFieldCount
parameter_list|()
block|{
return|return
name|groupCount
operator|+
name|aggCalls
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
name|groupCount
condition|)
block|{
return|return
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
index|[
name|index
index|]
operator|.
name|getName
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|AggregateCall
name|aggCall
init|=
name|aggCalls
operator|.
name|get
argument_list|(
name|index
operator|-
name|groupCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|aggCall
operator|.
name|getName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|"$f"
operator|+
name|index
return|;
block|}
block|}
block|}
specifier|public
name|RelDataType
name|getFieldType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
name|groupCount
condition|)
block|{
return|return
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
index|[
name|index
index|]
operator|.
name|getType
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|AggregateCall
name|aggCall
init|=
name|aggCalls
operator|.
name|get
argument_list|(
name|index
operator|-
name|groupCount
argument_list|)
decl_stmt|;
assert|assert
name|typeMatchesInferred
argument_list|(
name|aggCall
argument_list|,
literal|true
argument_list|)
assert|;
return|return
name|aggCall
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns whether the inferred type of an {@link AggregateCall} matches the      * type it was given when it was created.      *      * @param aggCall Aggregate call      * @param fail Whether to fail if the types do not match      *      * @return Whether the inferred and declared types match      */
specifier|private
name|boolean
name|typeMatchesInferred
parameter_list|(
specifier|final
name|AggregateCall
name|aggCall
parameter_list|,
specifier|final
name|boolean
name|fail
parameter_list|)
block|{
name|SqlAggFunction
name|aggFunction
init|=
operator|(
name|SqlAggFunction
operator|)
name|aggCall
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
name|AggCallBinding
name|callBinding
init|=
name|aggCall
operator|.
name|createBinding
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|RelDataType
name|type
init|=
name|aggFunction
operator|.
name|inferReturnType
argument_list|(
name|callBinding
argument_list|)
decl_stmt|;
name|RelDataType
name|expectedType
init|=
name|aggCall
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"aggCall type"
argument_list|,
name|expectedType
argument_list|,
literal|"inferred type"
argument_list|,
name|type
argument_list|,
name|fail
argument_list|)
return|;
block|}
comment|/**      * Returns whether any of the aggregates are DISTINCT.      */
specifier|public
name|boolean
name|containsDistinctCall
parameter_list|()
block|{
for|for
control|(
name|AggregateCall
name|call
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
name|call
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Implementation of the {@link SqlOperatorBinding} interface for an {@link      * AggregateCall aggregate call} applied to a set of operands in the context      * of a {@link AggregateRel}.      */
specifier|public
specifier|static
class|class
name|AggCallBinding
extends|extends
name|SqlOperatorBinding
block|{
specifier|private
specifier|final
name|AggregateRelBase
name|aggregateRel
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|operands
decl_stmt|;
comment|/**          * Creates an AggCallBinding          *          * @param typeFactory Type factory          * @param aggFunction Aggregation function          * @param aggregateRel Relational expression which is context          * @param operands Operand ordinals          */
name|AggCallBinding
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|SqlAggFunction
name|aggFunction
parameter_list|,
name|AggregateRelBase
name|aggregateRel
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|operands
parameter_list|)
block|{
name|super
argument_list|(
name|typeFactory
argument_list|,
name|aggFunction
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregateRel
operator|=
name|aggregateRel
expr_stmt|;
name|this
operator|.
name|operands
operator|=
name|operands
expr_stmt|;
block|}
specifier|public
name|int
name|getOperandCount
parameter_list|()
block|{
return|return
name|operands
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getOperandType
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
specifier|final
name|RelDataType
name|childType
init|=
name|aggregateRel
operator|.
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|int
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
return|return
name|childType
operator|.
name|getFields
argument_list|()
index|[
name|operand
index|]
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|EigenbaseException
name|newError
parameter_list|(
name|SqlValidatorException
name|e
parameter_list|)
block|{
return|return
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End AggregateRelBase.java
end_comment

end_unit

