begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<code>IntersectRel</code> returns the intersection of the rows of its inputs.  * If "all" is true, then multiset intersection is performed; otherwise, set  * intersection is performed (implying no duplicates in the results).  *  * @author jhyde  * @version $Id$  * @since 23 September, 2001  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|IntersectRel
extends|extends
name|SetOpRel
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|IntersectRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|CallingConvention
operator|.
name|NONE
argument_list|)
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelNode
specifier|public
name|double
name|getRows
parameter_list|()
block|{
comment|// REVIEW jvs 30-May-2005:  I just pulled this out of a hat.
name|double
name|dRows
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|dRows
operator|=
name|Math
operator|.
name|min
argument_list|(
name|dRows
argument_list|,
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dRows
operator|*=
literal|0.25
expr_stmt|;
return|return
name|dRows
return|;
block|}
specifier|public
name|IntersectRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|CallingConvention
operator|.
name|NONE
argument_list|)
assert|;
return|return
operator|new
name|IntersectRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End IntersectRel.java
end_comment

end_unit

