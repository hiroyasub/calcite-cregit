begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|IntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A relational expression representing a set of window aggregates.  *  *<p>A window rel can handle several window aggregate functions, over several  * partitions, with pre- and post-expressions, and an optional post-filter.  * Each of the partitions is defined by a partition key (zero or more columns)  * and a range (logical or physical). The partitions expect the data to be  * sorted correctly on input to the relational expression.  *  *<p>Each {@link org.eigenbase.rel.WindowRelBase.Window} has a set of  * {@link org.eigenbase.rel.WindowRelBase.Partition} objects, and each partition  * has a set of {@link org.eigenbase.rex.RexOver} objects.  *  *<p>Created by {@link org.eigenbase.rel.rules.WindowedAggSplitterRule}.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|WindowRel
extends|extends
name|WindowRelBase
block|{
comment|/**      * Creates a WindowRel.      *      * @param cluster Cluster      * @param child Input relational expression      * @param rowType Output row type      * @param windows Windows      */
specifier|public
name|WindowRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|Window
argument_list|>
name|windows
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|,
name|rowType
argument_list|,
name|windows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WindowRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|WindowRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|rowType
argument_list|,
name|windows
argument_list|)
return|;
block|}
comment|/** Creates a WindowRel. */
specifier|public
specifier|static
name|WindowRel
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
comment|// Build a list of distinct windows, partitions and aggregate
comment|// functions.
name|List
argument_list|<
name|WindowRel
operator|.
name|Window
argument_list|>
name|windowList
init|=
operator|new
name|ArrayList
argument_list|<
name|WindowRel
operator|.
name|Window
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RexOver
argument_list|,
name|WindowRelBase
operator|.
name|RexWinAggCall
argument_list|>
name|aggMap
init|=
operator|new
name|HashMap
argument_list|<
name|RexOver
argument_list|,
name|WindowRelBase
operator|.
name|RexWinAggCall
argument_list|>
argument_list|()
decl_stmt|;
comment|// Build a list of windows, partitions, and aggregate functions. Each
comment|// aggregate function will add its arguments as outputs of the input
comment|// program.
name|RexProgramBuilder
name|inputProgramBuilder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RexNode
name|agg
range|:
name|program
operator|.
name|getExprList
argument_list|()
control|)
block|{
if|if
condition|(
name|agg
operator|instanceof
name|RexOver
condition|)
block|{
specifier|final
name|RexOver
name|over
init|=
operator|(
name|RexOver
operator|)
name|agg
decl_stmt|;
name|WindowRelBase
operator|.
name|RexWinAggCall
name|aggCall
init|=
name|addWindows
argument_list|(
name|windowList
argument_list|,
name|over
argument_list|,
name|inputProgramBuilder
argument_list|)
decl_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|over
argument_list|,
name|aggCall
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RexProgram
name|inputProgram
init|=
name|inputProgramBuilder
operator|.
name|getProgram
argument_list|()
decl_stmt|;
comment|// Now the windows are complete, compute their digests.
for|for
control|(
name|WindowRel
operator|.
name|Window
name|window
range|:
name|windowList
control|)
block|{
name|window
operator|.
name|computeDigest
argument_list|()
expr_stmt|;
block|}
comment|// Figure out the type of the inputs to the output program.
comment|// They are: the inputs to this rel, followed by the outputs of
comment|// each window.
specifier|final
name|List
argument_list|<
name|WindowRelBase
operator|.
name|RexWinAggCall
argument_list|>
name|flattenedAggCallList
init|=
operator|new
name|ArrayList
argument_list|<
name|WindowRelBase
operator|.
name|RexWinAggCall
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|intermediateNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|intermediateTypeList
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|(
name|RelOptUtil
operator|.
name|getFieldTypeList
argument_list|(
name|child
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|WindowRel
operator|.
name|Window
name|window
range|:
name|windowList
control|)
block|{
operator|++
name|i
expr_stmt|;
name|int
name|j
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|WindowRel
operator|.
name|Partition
name|p
range|:
name|window
operator|.
name|partitionList
control|)
block|{
operator|++
name|j
expr_stmt|;
name|int
name|k
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|WindowRelBase
operator|.
name|RexWinAggCall
name|over
range|:
name|p
operator|.
name|overList
control|)
block|{
operator|++
name|k
expr_stmt|;
comment|// Add the k'th over expression of the j'th partition of
comment|// the i'th window to the output of the program.
name|intermediateNameList
operator|.
name|add
argument_list|(
literal|"w"
operator|+
name|i
operator|+
literal|"$p"
operator|+
name|j
operator|+
literal|"$o"
operator|+
name|k
argument_list|)
expr_stmt|;
name|intermediateTypeList
operator|.
name|add
argument_list|(
name|over
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|flattenedAggCallList
operator|.
name|add
argument_list|(
name|over
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|RelDataType
name|intermediateRowType
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|intermediateTypeList
argument_list|,
name|intermediateNameList
argument_list|)
decl_stmt|;
comment|// The output program is the windowed agg's program, combined with
comment|// the output calc (if it exists).
name|RexProgramBuilder
name|outputProgramBuilder
init|=
operator|new
name|RexProgramBuilder
argument_list|(
name|intermediateRowType
argument_list|,
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|inputFieldCount
init|=
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|RexShuttle
name|shuttle
init|=
operator|new
name|RexShuttle
argument_list|()
block|{
specifier|public
name|RexNode
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
block|{
comment|// Look up the aggCall which this expr was translated to.
specifier|final
name|WindowRelBase
operator|.
name|RexWinAggCall
name|aggCall
init|=
name|aggMap
operator|.
name|get
argument_list|(
name|over
argument_list|)
decl_stmt|;
assert|assert
name|aggCall
operator|!=
literal|null
assert|;
assert|assert
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"over"
argument_list|,
name|over
operator|.
name|getType
argument_list|()
argument_list|,
literal|"aggCall"
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
literal|true
argument_list|)
assert|;
comment|// Find the index of the aggCall among all partitions of all
comment|// windows.
specifier|final
name|int
name|aggCallIndex
init|=
name|flattenedAggCallList
operator|.
name|indexOf
argument_list|(
name|aggCall
argument_list|)
decl_stmt|;
assert|assert
name|aggCallIndex
operator|>=
literal|0
assert|;
comment|// Replace expression with a reference to the window slot.
specifier|final
name|int
name|index
init|=
name|inputFieldCount
operator|+
name|aggCallIndex
decl_stmt|;
assert|assert
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"over"
argument_list|,
name|over
operator|.
name|getType
argument_list|()
argument_list|,
literal|"intermed"
argument_list|,
name|intermediateTypeList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
literal|true
argument_list|)
assert|;
return|return
operator|new
name|RexInputRef
argument_list|(
name|index
argument_list|,
name|over
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|visitLocalRef
parameter_list|(
name|RexLocalRef
name|localRef
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|localRef
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|inputFieldCount
condition|)
block|{
comment|// Reference to input field.
return|return
name|localRef
return|;
block|}
return|return
operator|new
name|RexLocalRef
argument_list|(
name|flattenedAggCallList
operator|.
name|size
argument_list|()
operator|+
name|index
argument_list|,
name|localRef
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|program
operator|.
name|getExprList
argument_list|()
control|)
block|{
name|expr
operator|=
name|expr
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
expr_stmt|;
name|outputProgramBuilder
operator|.
name|registerInput
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|i
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|RexLocalRef
name|ref
range|:
name|program
operator|.
name|getProjectList
argument_list|()
control|)
block|{
operator|++
name|i
expr_stmt|;
name|int
name|index
init|=
name|ref
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|expr
init|=
name|program
operator|.
name|getExprList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|RexNode
name|expr2
init|=
name|expr
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
name|outputProgramBuilder
operator|.
name|addProject
argument_list|(
name|outputProgramBuilder
operator|.
name|registerInput
argument_list|(
name|expr2
argument_list|)
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create the output program.
specifier|final
name|RexProgram
name|outputProgram
decl_stmt|;
if|if
condition|(
literal|null
operator|==
literal|null
condition|)
block|{
name|outputProgram
operator|=
name|outputProgramBuilder
operator|.
name|getProgram
argument_list|()
expr_stmt|;
assert|assert
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"type1"
argument_list|,
name|outputProgram
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
literal|"type2"
argument_list|,
name|rowType
argument_list|,
literal|true
argument_list|)
assert|;
block|}
else|else
block|{
comment|// Merge intermediate program (from winAggRel) with output program
comment|// (from outCalc).
name|RexProgram
name|intermediateProgram
init|=
name|outputProgramBuilder
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|outputProgram
operator|=
name|RexProgramBuilder
operator|.
name|mergePrograms
argument_list|(
operator|(
operator|(
name|CalcRel
operator|)
literal|null
operator|)
operator|.
name|getProgram
argument_list|()
argument_list|,
name|intermediateProgram
argument_list|,
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"type1"
argument_list|,
name|outputProgram
operator|.
name|getInputRowType
argument_list|()
argument_list|,
literal|"type2"
argument_list|,
name|intermediateRowType
argument_list|,
literal|true
argument_list|)
assert|;
assert|assert
name|RelOptUtil
operator|.
name|eq
argument_list|(
literal|"type1"
argument_list|,
name|outputProgram
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
literal|"type2"
argument_list|,
operator|(
operator|(
name|CalcRel
operator|)
literal|null
operator|)
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|true
argument_list|)
assert|;
block|}
comment|// TODO:
return|return
operator|new
name|WindowRel
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|rowType
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|WindowRelBase
operator|.
name|RexWinAggCall
name|addWindows
parameter_list|(
name|List
argument_list|<
name|WindowRelBase
operator|.
name|Window
argument_list|>
name|windowList
parameter_list|,
name|RexOver
name|over
parameter_list|,
name|RexProgramBuilder
name|programBuilder
parameter_list|)
block|{
specifier|final
name|RexWindow
name|aggWindow
init|=
name|over
operator|.
name|getWindow
argument_list|()
decl_stmt|;
comment|// Look up or create a window.
name|ImmutableIntList
name|orderKeys
init|=
name|getProjectOrdinals
argument_list|(
name|programBuilder
argument_list|,
name|aggWindow
operator|.
name|orderKeys
argument_list|)
decl_stmt|;
name|WindowRel
operator|.
name|Window
name|fennelWindow
init|=
name|lookupWindow
argument_list|(
name|windowList
argument_list|,
name|aggWindow
operator|.
name|isRows
argument_list|()
argument_list|,
name|aggWindow
operator|.
name|getLowerBound
argument_list|()
argument_list|,
name|aggWindow
operator|.
name|getUpperBound
argument_list|()
argument_list|,
name|orderKeys
argument_list|)
decl_stmt|;
comment|// Lookup or create a partition within the window.
name|ImmutableIntList
name|partitionKeys
init|=
name|getProjectOrdinals
argument_list|(
name|programBuilder
argument_list|,
name|aggWindow
operator|.
name|partitionKeys
argument_list|)
decl_stmt|;
name|WindowRel
operator|.
name|Partition
name|fennelPartition
init|=
name|fennelWindow
operator|.
name|lookupOrCreatePartition
argument_list|(
name|partitionKeys
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|fennelPartition
argument_list|)
expr_stmt|;
comment|// Create a clone the 'over' expression, omitting the window (which is
comment|// already part of the partition spec), and add the clone to the
comment|// partition.
return|return
name|fennelPartition
operator|.
name|addOver
argument_list|(
name|over
operator|.
name|getType
argument_list|()
argument_list|,
name|over
operator|.
name|getAggOperator
argument_list|()
argument_list|,
name|over
operator|.
name|getOperands
argument_list|()
argument_list|,
name|programBuilder
argument_list|)
return|;
block|}
comment|/**      * Converts a list of expressions into a list of ordinals that these      * expressions are projected from a {@link org.eigenbase.rex.RexProgramBuilder}. If an      * expression is not projected, adds it.      *      *      * @param programBuilder Program builder      * @param exprs List of expressions      *      * @return List of ordinals where expressions are projected      */
specifier|private
specifier|static
name|ImmutableIntList
name|getProjectOrdinals
parameter_list|(
name|RexProgramBuilder
name|programBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprs
parameter_list|)
block|{
name|IntList
name|list
init|=
operator|new
name|IntList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|exprs
control|)
block|{
name|List
argument_list|<
name|RexLocalRef
argument_list|>
name|projectList
init|=
name|programBuilder
operator|.
name|getProjectList
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|projectList
operator|.
name|indexOf
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
name|projectList
operator|.
name|size
argument_list|()
expr_stmt|;
name|programBuilder
operator|.
name|addProject
argument_list|(
name|expr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|asImmutable
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|WindowRel
operator|.
name|Window
name|lookupWindow
parameter_list|(
name|List
argument_list|<
name|WindowRel
operator|.
name|Window
argument_list|>
name|windowList
parameter_list|,
name|boolean
name|physical
parameter_list|,
name|SqlNode
name|lowerBound
parameter_list|,
name|SqlNode
name|upperBound
parameter_list|,
name|ImmutableIntList
name|orderKeys
parameter_list|)
block|{
for|for
control|(
name|WindowRel
operator|.
name|Window
name|window
range|:
name|windowList
control|)
block|{
if|if
condition|(
operator|(
name|physical
operator|==
name|window
operator|.
name|physical
operator|)
operator|&&
name|Util
operator|.
name|equal
argument_list|(
name|lowerBound
argument_list|,
name|window
operator|.
name|lowerBound
argument_list|)
operator|&&
name|Util
operator|.
name|equal
argument_list|(
name|upperBound
argument_list|,
name|window
operator|.
name|upperBound
argument_list|)
operator|&&
name|orderKeys
operator|.
name|equals
argument_list|(
name|window
operator|.
name|orderKeys
argument_list|)
condition|)
block|{
return|return
name|window
return|;
block|}
block|}
specifier|final
name|WindowRel
operator|.
name|Window
name|window
init|=
operator|new
name|WindowRel
operator|.
name|Window
argument_list|(
name|physical
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|orderKeys
argument_list|)
decl_stmt|;
name|windowList
operator|.
name|add
argument_list|(
name|window
argument_list|)
expr_stmt|;
return|return
name|window
return|;
block|}
block|}
end_class

begin_comment
comment|// End WindowRel.java
end_comment

end_unit

