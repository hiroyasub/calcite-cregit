begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * A relational expression representing a set of window aggregates.  *  *<p>A window rel can handle several window aggregate functions, over several  * partitions, with pre- and post-expressions, and an optional post-filter.  * Each of the partitions is defined by a partition key (zero or more columns)  * and a range (logical or physical). The partitions expect the data to be  * sorted correctly on input to the relational expression.  *  *<p>Each {@link org.eigenbase.rel.WindowRelBase.Window} has a set of  * {@link org.eigenbase.rel.WindowRelBase.Partition} objects, and each partition  * has a set of {@link org.eigenbase.rex.RexOver} objects.  *  *<p>Created by {@link org.eigenbase.rel.rules.WindowedAggSplitterRule}.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|WindowRelBase
extends|extends
name|SingleRel
block|{
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|Window
argument_list|>
name|windows
decl_stmt|;
comment|/**      * Creates a window relational expression.      *      * @param cluster Cluster      * @param child Input relational expression      * @param rowType Output row type      * @param windows Windows      */
specifier|public
name|WindowRelBase
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|Window
argument_list|>
name|windows
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|)
expr_stmt|;
assert|assert
name|rowType
operator|!=
literal|null
assert|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|windows
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|windows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|boolean
name|fail
parameter_list|)
block|{
comment|// In the window specifications, an aggregate call such as
comment|// 'SUM(RexInputRef #10)' refers to expression #10 of inputProgram.
comment|// (Not its projections.)
specifier|final
name|RexChecker
name|checker
init|=
operator|new
name|RexChecker
argument_list|(
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|fail
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Window
name|window
range|:
name|windows
control|)
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|window
operator|.
name|partitionList
control|)
block|{
for|for
control|(
name|RexWinAggCall
name|over
range|:
name|partition
operator|.
name|overList
control|)
block|{
operator|++
name|count
expr_stmt|;
if|if
condition|(
operator|!
name|checker
operator|.
name|isValid
argument_list|(
name|over
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
literal|"empty"
assert|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|RelOptPlanWriter
name|explainTerms
parameter_list|(
name|RelOptPlanWriter
name|pw
parameter_list|)
block|{
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Window
argument_list|>
name|window
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|windows
argument_list|)
control|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"window#"
operator|+
name|window
operator|.
name|i
argument_list|,
name|window
operator|.
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pw
return|;
block|}
comment|/**      * A Window is a range of input rows, defined by an upper and lower bound.      * It also contains a list of      * {@link org.eigenbase.rel.WindowRelBase.Partition} objects.      *      *<p>A window is either logical or physical. A physical window is measured      * in terms of row count. A logical window is measured in terms of rows      * within a certain distance from the current sort key.      *      *<p>For example:      *      *<ul>      *<li><code>ROWS BETWEEN 10 PRECEDING and 5 FOLLOWING</code> is a physical      * window with an upper and lower bound;      *<li><code>RANGE BETWEEN INTERVAL '1' HOUR PRECEDING AND UNBOUNDED      * FOLLOWING</code> is a logical window with only a lower bound;      *<li><code>RANGE INTERVAL '10' MINUTES PRECEDING</code> (which is      * equivalent to<code>RANGE BETWEEN INTERVAL '10' MINUTES PRECEDING AND      * CURRENT ROW</code>) is a logical window with an upper and lower bound.      *</ul>      */
specifier|public
specifier|static
class|class
name|Window
block|{
comment|/** The partitions which make up this window. */
specifier|public
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionList
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|physical
decl_stmt|;
specifier|public
specifier|final
name|SqlNode
name|lowerBound
decl_stmt|;
specifier|public
specifier|final
name|SqlNode
name|upperBound
decl_stmt|;
specifier|public
specifier|final
name|RelCollation
name|orderKeys
decl_stmt|;
specifier|private
specifier|final
name|String
name|digest
decl_stmt|;
specifier|public
name|Window
parameter_list|(
name|boolean
name|physical
parameter_list|,
name|SqlNode
name|lowerBound
parameter_list|,
name|SqlNode
name|upperBound
parameter_list|,
name|RelCollation
name|orderKeys
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionList
parameter_list|)
block|{
assert|assert
name|orderKeys
operator|!=
literal|null
operator|:
literal|"precondition: ordinals != null"
assert|;
name|this
operator|.
name|physical
operator|=
name|physical
expr_stmt|;
name|this
operator|.
name|lowerBound
operator|=
name|lowerBound
expr_stmt|;
name|this
operator|.
name|upperBound
operator|=
name|upperBound
expr_stmt|;
name|this
operator|.
name|orderKeys
operator|=
name|orderKeys
expr_stmt|;
name|this
operator|.
name|partitionList
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|partitionList
argument_list|)
expr_stmt|;
name|this
operator|.
name|digest
operator|=
name|computeString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|digest
return|;
block|}
specifier|private
name|String
name|computeString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"window("
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"order by "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|orderKeys
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|physical
condition|?
literal|" rows "
else|:
literal|" range "
argument_list|)
expr_stmt|;
if|if
condition|(
name|lowerBound
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|upperBound
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"between "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|lowerBound
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|lowerBound
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|upperBound
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|upperBound
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|" partitions "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|partitionList
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|instanceof
name|Window
operator|&&
name|this
operator|.
name|digest
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Window
operator|)
name|obj
operator|)
operator|.
name|digest
argument_list|)
return|;
block|}
specifier|public
name|RelCollation
name|collation
parameter_list|()
block|{
return|return
name|orderKeys
return|;
block|}
block|}
comment|/**      * A Partition is a collection of windowed aggregate expressions which      * belong to the same {@link WindowRelBase.Window} and have the same      * partitioning keys.      */
specifier|public
specifier|static
class|class
name|Partition
block|{
comment|/**          * List of {@link org.eigenbase.rel.WindowRelBase.RexWinAggCall} objects,          * each of which is a call to a {@link org.eigenbase.sql.SqlAggFunction}.          */
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|RexWinAggCall
argument_list|>
name|overList
decl_stmt|;
comment|/**          * The ordinals of the input columns which uniquely identify rows in          * this partition. May be empty. Must not be null.          */
specifier|public
specifier|final
name|ImmutableIntList
name|partitionKeys
decl_stmt|;
specifier|final
name|String
name|digest
decl_stmt|;
name|Partition
parameter_list|(
name|ImmutableIntList
name|partitionKeys
parameter_list|,
name|List
argument_list|<
name|RexWinAggCall
argument_list|>
name|overList
parameter_list|)
block|{
assert|assert
name|partitionKeys
operator|!=
literal|null
assert|;
name|this
operator|.
name|partitionKeys
operator|=
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|partitionKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|overList
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|overList
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"partition(key "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|partitionKeys
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" aggs "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|overList
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|digest
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|Partition
operator|&&
name|partitionKeys
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Partition
operator|)
name|obj
operator|)
operator|.
name|partitionKeys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|digest
return|;
block|}
block|}
comment|/**      * A call to a windowed aggregate function.      *      *<p>Belongs to a {@link org.eigenbase.rel.WindowRel.Partition}.      *      *<p>It's a bastard son of a {@link org.eigenbase.rex.RexCall}; similar enough that it gets      * visited by a {@link org.eigenbase.rex.RexVisitor}, but it also has some extra data members.      */
specifier|public
specifier|static
class|class
name|RexWinAggCall
extends|extends
name|RexCall
block|{
comment|/**          * Ordinal of this aggregate within its partition.          */
specifier|public
specifier|final
name|int
name|ordinal
decl_stmt|;
comment|/**          * Creates a RexWinAggCall.          *          * @param aggFun Aggregate function          * @param type Result type          * @param operands Operands to call          * @param ordinal Ordinal within its partition          */
specifier|public
name|RexWinAggCall
parameter_list|(
name|SqlAggFunction
name|aggFun
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|aggFun
argument_list|,
name|operands
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End WindowRelBase.java
end_comment

end_unit

