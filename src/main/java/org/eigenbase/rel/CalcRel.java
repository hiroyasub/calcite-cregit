begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|mapping
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A relational expression which computes project expressions and also filters.  *  *<p>This relational expression combines the functionality of {@link  * ProjectRel} and {@link FilterRel}. It should be created in the latter stages  * of optimization, by merging consecutive {@link ProjectRel} and {@link  * FilterRel} nodes together.  *  *<p>The following rules relate to<code>CalcRel</code>:  *  *<ul>  *<li>{@link FilterToCalcRule} creates this from a {@link FilterRel}</li>  *<li>{@link ProjectToCalcRule} creates this from a {@link FilterRel}</li>  *<li>{@link MergeFilterOntoCalcRule} merges this with a {@link FilterRel}</li>  *<li>{@link MergeProjectOntoCalcRule} merges this with a {@link  * ProjectRel}</li>  *<li>{@link MergeCalcRule} merges two CalcRels</li>  *</ul>  *</p>  *  * @author jhyde  * @version $Id$  * @since Mar 7, 2004  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CalcRel
extends|extends
name|CalcRelBase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|boolean
name|DeprecateProjectAndFilter
init|=
literal|false
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|CalcRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|,
name|rowType
argument_list|,
name|program
argument_list|,
name|collationList
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|CalcRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|rowType
argument_list|,
name|program
operator|.
name|copy
argument_list|()
argument_list|,
name|getCollationList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a relational expression which projects an array of expressions.      *      * @param child input relational expression      * @param exprList list of expressions for the input columns      * @param fieldNameList aliases of the expressions, or null to generate      */
specifier|public
specifier|static
name|RelNode
name|createProject
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNameList
parameter_list|)
block|{
return|return
name|createProject
argument_list|(
name|child
argument_list|,
name|exprList
argument_list|,
name|fieldNameList
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Creates a relational expression which projects an array of expressions,      * and optionally optimizes.      *      * @param child input relational expression      * @param exprList list of expressions for the input columns      * @param fieldNameList aliases of the expressions, or null to generate      * @param optimize Whether to return<code>child</code> unchanged if the      * projections are trivial.      */
specifier|public
specifier|static
name|RelNode
name|createProject
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNameList
parameter_list|,
name|boolean
name|optimize
parameter_list|)
block|{
name|RexNode
index|[]
name|exprs
init|=
name|exprList
operator|.
name|toArray
argument_list|(
operator|new
name|RexNode
index|[
name|exprList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
operator|(
name|fieldNameList
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|fieldNameList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fieldNameList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
name|createProject
argument_list|(
name|child
argument_list|,
name|exprs
argument_list|,
name|fieldNames
argument_list|,
name|optimize
argument_list|)
return|;
block|}
comment|/**      * Creates a relational expression which projects a set of expressions.      *      * @param child input relational expression      * @param exprs set of expressions for the input columns      * @param fieldNames aliases of the expressions, or null to generate      */
specifier|public
specifier|static
name|ProjectRel
name|createProject
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|RexNode
index|[]
name|exprs
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|)
block|{
return|return
operator|(
name|ProjectRel
operator|)
name|createProject
argument_list|(
name|child
argument_list|,
name|exprs
argument_list|,
name|fieldNames
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelNode
name|createProject
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|posList
parameter_list|)
block|{
name|RexNode
index|[]
name|exprList
init|=
operator|new
name|RexNode
index|[
name|posList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|child
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|posList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exprList
index|[
name|i
index|]
operator|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
operator|(
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
index|[
name|posList
operator|.
name|get
argument_list|(
name|i
argument_list|)
index|]
operator|)
operator|.
name|getType
argument_list|()
argument_list|,
name|posList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|CalcRel
operator|.
name|createProject
argument_list|(
name|child
argument_list|,
name|exprList
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates a relational expression which projects a set of expressions.      *      *<p>The result may not be a {@link ProjectRel}. If the projection is      * trivial,<code>child</code> is returned directly; and future versions may      * return other formulations of expressions, such as {@link CalcRel}.      *      * @param child input relational expression      * @param exprs set of expressions for the input columns      * @param fieldNames aliases of the expressions, or null to generate      * @param optimize Whether to return<code>child</code> unchanged if the      * projections are trivial.      */
specifier|public
specifier|static
name|RelNode
name|createProject
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|RexNode
index|[]
name|exprs
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|,
name|boolean
name|optimize
parameter_list|)
block|{
assert|assert
operator|(
name|fieldNames
operator|==
literal|null
operator|)
operator|||
operator|(
name|fieldNames
operator|.
name|length
operator|==
name|exprs
operator|.
name|length
operator|)
operator|:
literal|"fieldNames="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|fieldNames
argument_list|)
operator|+
literal|", exprs="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|exprs
argument_list|)
assert|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|child
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|RexProgramBuilder
name|builder
init|=
operator|new
name|RexProgramBuilder
argument_list|(
name|child
operator|.
name|getRowType
argument_list|()
argument_list|,
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|exprs
control|)
block|{
operator|++
name|i
expr_stmt|;
specifier|final
name|String
name|fieldName
init|=
operator|(
name|fieldNames
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|fieldNames
index|[
name|i
index|]
decl_stmt|;
name|builder
operator|.
name|addProject
argument_list|(
name|expr
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexProgram
name|program
init|=
name|builder
operator|.
name|getProgram
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
init|=
name|program
operator|.
name|getCollations
argument_list|(
name|child
operator|.
name|getCollationList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|DeprecateProjectAndFilter
condition|)
block|{
return|return
operator|new
name|CalcRel
argument_list|(
name|cluster
argument_list|,
name|child
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|child
argument_list|,
name|program
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
name|program
argument_list|,
name|collationList
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|RexUtil
operator|.
name|createStructType
argument_list|(
name|child
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|exprs
argument_list|)
argument_list|,
name|fieldNames
operator|==
literal|null
condition|?
literal|null
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldNames
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|optimize
operator|&&
name|RemoveTrivialProjectRule
operator|.
name|isIdentity
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|exprs
argument_list|)
argument_list|,
name|rowType
argument_list|,
name|child
operator|.
name|getRowType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|child
return|;
block|}
return|return
operator|new
name|ProjectRel
argument_list|(
name|child
operator|.
name|getCluster
argument_list|()
argument_list|,
name|child
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|exprs
argument_list|)
argument_list|,
name|rowType
argument_list|,
name|ProjectRelBase
operator|.
name|Flags
operator|.
name|Boxed
argument_list|,
name|collationList
argument_list|)
return|;
block|}
block|}
comment|/**      * Creates a relational expression which filters according to a given      * condition, returning the same fields as its input.      *      * @param child Child relational expression      * @param condition Condition      *      * @return Relational expression      */
specifier|public
specifier|static
name|RelNode
name|createFilter
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
if|if
condition|(
name|DeprecateProjectAndFilter
condition|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|child
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|RexProgramBuilder
name|builder
init|=
operator|new
name|RexProgramBuilder
argument_list|(
name|child
operator|.
name|getRowType
argument_list|()
argument_list|,
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addIdentity
argument_list|()
expr_stmt|;
name|builder
operator|.
name|addCondition
argument_list|(
name|condition
argument_list|)
expr_stmt|;
specifier|final
name|RexProgram
name|program
init|=
name|builder
operator|.
name|getProgram
argument_list|()
decl_stmt|;
return|return
operator|new
name|CalcRel
argument_list|(
name|cluster
argument_list|,
name|child
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|child
argument_list|,
name|program
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
name|program
argument_list|,
name|Collections
operator|.
expr|<
name|RelCollation
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|FilterRel
argument_list|(
name|child
operator|.
name|getCluster
argument_list|()
argument_list|,
name|child
argument_list|,
name|condition
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns a relational expression which has the same fields as the      * underlying expression, but the fields have different names.      *      * @param rel Relational expression      * @param fieldNames Field names      *      * @return Renamed relational expression      */
specifier|public
specifier|static
name|RelNode
name|createRename
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
decl_stmt|;
assert|assert
name|fieldNames
operator|.
name|length
operator|==
name|fields
operator|.
name|length
assert|;
specifier|final
name|RexInputRef
index|[]
name|refs
init|=
operator|new
name|RexInputRef
index|[
name|fieldNames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|refs
index|[
name|i
index|]
operator|=
operator|new
name|RexInputRef
argument_list|(
name|i
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|createProject
argument_list|(
name|rel
argument_list|,
name|refs
argument_list|,
name|fieldNames
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|void
name|collectVariablesUsed
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|variableSet
parameter_list|)
block|{
specifier|final
name|RelOptUtil
operator|.
name|VariableUsedVisitor
name|vuv
init|=
operator|new
name|RelOptUtil
operator|.
name|VariableUsedVisitor
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|program
operator|.
name|getExprList
argument_list|()
control|)
block|{
name|expr
operator|.
name|accept
argument_list|(
name|vuv
argument_list|)
expr_stmt|;
block|}
name|variableSet
operator|.
name|addAll
argument_list|(
name|vuv
operator|.
name|variables
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a relational expression which permutes the output fields of a      * relational expression according to a permutation.      *      *<p>Optimizations:      *      *<ul>      *<li>If the relational expression is a {@link CalcRel} or {@link      * ProjectRel} which is already acting as a permutation, combines the new      * permutation with the old;</li>      *<li>If the permutation is the identity, returns the original relational      * expression.</li>      *</ul>      *</p>      *      *<p>If a permutation is combined with its inverse, these optimizations      * would combine to remove them both.      *      * @param rel Relational expression      * @param permutation Permutation to apply to fields      * @param fieldNames Field names; if null, or if a particular entry is null,      * the name of the permuted field is used      *      * @return relational expression which permutes its input fields      */
specifier|public
specifier|static
name|RelNode
name|permute
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|Permutation
name|permutation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
if|if
condition|(
name|permutation
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|rel
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|CalcRel
condition|)
block|{
name|CalcRel
name|calcRel
init|=
operator|(
name|CalcRel
operator|)
name|rel
decl_stmt|;
name|Permutation
name|permutation1
init|=
name|calcRel
operator|.
name|getProgram
argument_list|()
operator|.
name|getPermutation
argument_list|()
decl_stmt|;
if|if
condition|(
name|permutation1
operator|!=
literal|null
condition|)
block|{
name|Permutation
name|permutation2
init|=
name|permutation
operator|.
name|product
argument_list|(
name|permutation1
argument_list|)
decl_stmt|;
return|return
name|permute
argument_list|(
name|rel
argument_list|,
name|permutation2
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|rel
operator|instanceof
name|ProjectRel
condition|)
block|{
name|Permutation
name|permutation1
init|=
operator|(
operator|(
name|ProjectRel
operator|)
name|rel
operator|)
operator|.
name|getPermutation
argument_list|()
decl_stmt|;
if|if
condition|(
name|permutation1
operator|!=
literal|null
condition|)
block|{
name|Permutation
name|permutation2
init|=
name|permutation
operator|.
name|product
argument_list|(
name|permutation1
argument_list|)
decl_stmt|;
return|return
name|permute
argument_list|(
name|rel
argument_list|,
name|permutation2
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|outputTypeList
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outputNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexLocalRef
argument_list|>
name|projectRefList
init|=
operator|new
name|ArrayList
argument_list|<
name|RexLocalRef
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|permutation
operator|.
name|getTargetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|target
init|=
name|permutation
operator|.
name|getTarget
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|targetField
init|=
name|fields
index|[
name|target
index|]
decl_stmt|;
name|outputTypeList
operator|.
name|add
argument_list|(
name|targetField
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|outputNameList
operator|.
name|add
argument_list|(
operator|(
operator|(
name|fieldNames
operator|==
literal|null
operator|)
operator|||
operator|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|<=
name|i
operator|)
operator|||
operator|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
operator|)
operator|)
condition|?
name|targetField
operator|.
name|getName
argument_list|()
else|:
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|exprList
operator|.
name|add
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeInputRef
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|source
init|=
name|permutation
operator|.
name|getSource
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|projectRefList
operator|.
name|add
argument_list|(
operator|new
name|RexLocalRef
argument_list|(
name|source
argument_list|,
name|fields
index|[
name|source
index|]
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexProgram
name|program
init|=
operator|new
name|RexProgram
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|exprList
argument_list|,
name|projectRefList
argument_list|,
literal|null
argument_list|,
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|outputTypeList
argument_list|,
name|outputNameList
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|CalcRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|rel
argument_list|,
name|program
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
name|program
argument_list|,
name|Collections
operator|.
expr|<
name|RelCollation
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a relational expression which projects the output fields of a      * relational expression according to a partial mapping.      *      *<p>A partial mapping is weaker than a permutation: every target has one      * source, but a source may have 0, 1 or more than one targets. Usually the      * result will have fewer fields than the source, unless some source fields      * are projected multiple times.      *      *<p>This method could optimize the result as {@link #permute} does, but      * does not at present.      *      * @param rel Relational expression      * @param mapping Mapping from source fields to target fields. The mapping      * type must obey the constaints {@link MappingType#isMandatorySource()} and      * {@link MappingType#isSingleSource()}, as does {@link      * MappingType#InverseFunction}.      * @param fieldNames Field names; if null, or if a particular entry is null,      * the name of the permuted field is used      *      * @return relational expression which projects a subset of the input fields      */
specifier|public
specifier|static
name|RelNode
name|projectMapping
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|Mapping
name|mapping
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
assert|assert
name|mapping
operator|.
name|getMappingType
argument_list|()
operator|.
name|isSingleSource
argument_list|()
assert|;
assert|assert
name|mapping
operator|.
name|getMappingType
argument_list|()
operator|.
name|isMandatorySource
argument_list|()
assert|;
if|if
condition|(
name|mapping
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|rel
return|;
block|}
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|outputTypeList
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outputNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexLocalRef
argument_list|>
name|projectRefList
init|=
operator|new
name|ArrayList
argument_list|<
name|RexLocalRef
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
name|exprList
operator|.
name|add
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeInputRef
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapping
operator|.
name|getTargetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|source
init|=
name|mapping
operator|.
name|getSource
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|sourceField
init|=
name|fields
index|[
name|source
index|]
decl_stmt|;
name|outputTypeList
operator|.
name|add
argument_list|(
name|sourceField
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|outputNameList
operator|.
name|add
argument_list|(
operator|(
operator|(
name|fieldNames
operator|==
literal|null
operator|)
operator|||
operator|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|<=
name|i
operator|)
operator|||
operator|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
operator|)
operator|)
condition|?
name|sourceField
operator|.
name|getName
argument_list|()
else|:
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|projectRefList
operator|.
name|add
argument_list|(
operator|new
name|RexLocalRef
argument_list|(
name|source
argument_list|,
name|sourceField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexProgram
name|program
init|=
operator|new
name|RexProgram
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|exprList
argument_list|,
name|projectRefList
argument_list|,
literal|null
argument_list|,
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|outputTypeList
argument_list|,
name|outputNameList
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|CalcRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|rel
argument_list|,
name|program
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
name|program
argument_list|,
name|Collections
operator|.
expr|<
name|RelCollation
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End CalcRel.java
end_comment

end_unit

