begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * ReflectiveRelMetadataProvider provides an abstract base for reflective  * implementations of the {@link RelMetadataProvider} interface. For an example,  * see {@link DefaultRelMetadataProvider}.  *  *<p>TODO jvs 28-Mar-2006: most of this should probably be refactored into  * ReflectUtil.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ReflectiveRelMetadataProvider
implements|implements
name|RelMetadataProvider
implements|,
name|ReflectiveVisitor
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Class
argument_list|>
argument_list|>
name|parameterTypeMap
decl_stmt|;
specifier|private
specifier|final
name|ReflectiveVisitDispatcher
argument_list|<
name|ReflectiveRelMetadataProvider
argument_list|,
name|RelNode
argument_list|>
name|visitDispatcher
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a ReflectiveRelMetadataProvider.      */
specifier|protected
name|ReflectiveRelMetadataProvider
parameter_list|()
block|{
name|parameterTypeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Class
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|visitDispatcher
operator|=
name|ReflectUtil
operator|.
name|createDispatcher
argument_list|(
name|ReflectiveRelMetadataProvider
operator|.
name|class
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Maps the parameter type signature to look up for a given metadata query.      *      * @param metadataQueryName name of metadata query to map      * @param parameterTypes argument types (beyond the overloaded rel type) to      * map      */
specifier|protected
name|void
name|mapParameterTypes
parameter_list|(
name|String
name|metadataQueryName
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|>
name|parameterTypes
parameter_list|)
block|{
name|parameterTypeMap
operator|.
name|put
argument_list|(
name|metadataQueryName
argument_list|,
name|parameterTypes
argument_list|)
expr_stmt|;
block|}
comment|// implement RelMetadataProvider
specifier|public
name|Object
name|getRelMetadata
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|String
name|metadataQueryName
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|>
name|parameterTypes
init|=
name|parameterTypeMap
operator|.
name|get
argument_list|(
name|metadataQueryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameterTypes
operator|==
literal|null
condition|)
block|{
name|parameterTypes
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|Method
name|method
init|=
name|visitDispatcher
operator|.
name|lookupVisitMethod
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|rel
operator|.
name|getClass
argument_list|()
argument_list|,
name|metadataQueryName
argument_list|,
name|parameterTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
index|[]
name|allArgs
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
name|allArgs
operator|=
operator|new
name|Object
index|[
name|args
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|allArgs
index|[
literal|0
index|]
operator|=
name|rel
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|allArgs
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allArgs
operator|=
operator|new
name|Object
index|[]
block|{
name|rel
block|}
expr_stmt|;
block|}
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|allArgs
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// TODO jvs 28-Mar-2006:  share code with ReflectUtil
if|if
condition|(
name|ex
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|ex
throw|;
block|}
if|else if
condition|(
name|ex
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|ex
throw|;
block|}
else|else
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End ReflectiveRelMetadataProvider.java
end_comment

end_unit

