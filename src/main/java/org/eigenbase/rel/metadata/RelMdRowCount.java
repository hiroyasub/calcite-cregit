begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util14
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * RelMdRowCount supplies a default implementation of {@link  * RelMetadataQuery#getRowCount} for the standard logical algebra.  *  * @author Zelaine Fong  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RelMdRowCount
extends|extends
name|ReflectiveRelMetadataProvider
block|{
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|Double
name|getRowCount
parameter_list|(
name|UnionRelBase
name|rel
parameter_list|)
block|{
name|double
name|nRows
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|Double
name|partialRowCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|partialRowCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nRows
operator|+=
name|partialRowCount
expr_stmt|;
block|}
return|return
name|nRows
return|;
block|}
specifier|public
name|Double
name|getRowCount
parameter_list|(
name|FilterRelBase
name|rel
parameter_list|)
block|{
return|return
name|NumberUtil
operator|.
name|multiply
argument_list|(
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|,
name|rel
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|,
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getRowCount
parameter_list|(
name|ProjectRelBase
name|rel
parameter_list|)
block|{
return|return
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getRowCount
parameter_list|(
name|SortRel
name|rel
parameter_list|)
block|{
return|return
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getRowCount
parameter_list|(
name|SemiJoinRel
name|rel
parameter_list|)
block|{
comment|// create a RexNode representing the selectivity of the
comment|// semijoin filter and pass it to getSelectivity
name|RexNode
name|semiJoinSelectivity
init|=
name|RelMdUtil
operator|.
name|makeSemiJoinSelectivityRexNode
argument_list|(
name|rel
argument_list|)
decl_stmt|;
return|return
name|NumberUtil
operator|.
name|multiply
argument_list|(
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|,
name|semiJoinSelectivity
argument_list|)
argument_list|,
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getRowCount
parameter_list|(
name|AggregateRelBase
name|rel
parameter_list|)
block|{
name|BitSet
name|groupKey
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rel
operator|.
name|getGroupCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|groupKey
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// rowcount is the cardinality of the group by columns
name|Double
name|distinctRowCount
init|=
name|RelMetadataQuery
operator|.
name|getDistinctRowCount
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|,
name|groupKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|distinctRowCount
operator|==
literal|null
condition|)
block|{
return|return
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
operator|/
literal|10
return|;
block|}
else|else
block|{
return|return
name|distinctRowCount
return|;
block|}
block|}
comment|// Catch-all rule when none of the others apply.
specifier|public
name|Double
name|getRowCount
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
return|return
name|rel
operator|.
name|getRows
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelMdRowCount.java
end_comment

end_unit

