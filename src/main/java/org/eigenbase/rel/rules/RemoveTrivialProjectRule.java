begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Rule which, given a {@link ProjectRel} node which merely returns its input,  * converts the node into its child.  *  *<p>For example,<code>ProjectRel(ArrayReader(a), {$input0})</code> becomes  *<code>ArrayReader(a)</code>.</p>  *  * @see org.eigenbase.rel.rules.RemoveTrivialCalcRule  */
end_comment

begin_class
specifier|public
class|class
name|RemoveTrivialProjectRule
extends|extends
name|RelOptRule
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|RemoveTrivialProjectRule
name|instance
init|=
operator|new
name|RemoveTrivialProjectRule
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|RemoveTrivialProjectRule
parameter_list|()
block|{
name|super
argument_list|(
name|any
argument_list|(
name|ProjectRel
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|ProjectRel
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelNode
name|child
init|=
name|project
operator|.
name|getChild
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|childRowType
init|=
name|child
operator|.
name|getRowType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|childRowType
operator|.
name|isStruct
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|project
operator|.
name|isBoxed
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|isIdentity
argument_list|(
name|project
operator|.
name|getProjectExps
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
name|childRowType
argument_list|)
condition|)
block|{
return|return;
block|}
name|child
operator|=
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|register
argument_list|(
name|child
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|convert
argument_list|(
name|child
argument_list|,
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isIdentity
parameter_list|(
name|RexNode
index|[]
name|exps
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|RelDataType
name|childRowType
parameter_list|)
block|{
name|RelDataTypeField
index|[]
name|fields
init|=
name|rowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|RelDataTypeField
index|[]
name|childFields
init|=
name|childRowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|childFields
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|exps
operator|.
name|length
operator|!=
name|fieldCount
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|exp
init|=
name|exps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|RexInputRef
condition|)
block|{
name|RexInputRef
name|var
init|=
operator|(
name|RexInputRef
operator|)
name|exp
decl_stmt|;
if|if
condition|(
name|var
operator|.
name|getIndex
argument_list|()
operator|!=
name|i
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|childFields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

begin_comment
comment|// End RemoveTrivialProjectRule.java
end_comment

end_unit

