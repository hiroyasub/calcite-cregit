begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * MergeProjectRule merges a {@link ProjectRel} into another {@link ProjectRel},  * provided the projects aren't projecting identical sets of input references.  */
end_comment

begin_class
specifier|public
class|class
name|MergeProjectRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|MergeProjectRule
name|instance
init|=
operator|new
name|MergeProjectRule
argument_list|()
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/**      * if true, always merge projects      */
specifier|private
specifier|final
name|boolean
name|force
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a MergeProjectRule.      */
specifier|private
name|MergeProjectRule
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a MergeProjectRule, specifying whether to always merge projects.      *      * @param force Whether to always merge projects      */
specifier|public
name|MergeProjectRule
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
name|super
argument_list|(
name|some
argument_list|(
name|ProjectRel
operator|.
name|class
argument_list|,
name|any
argument_list|(
name|ProjectRel
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
literal|"MergeProjectRule"
operator|+
operator|(
name|force
condition|?
literal|": force mode"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|ProjectRel
name|topProject
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ProjectRel
name|bottomProject
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|topProject
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
comment|// if we're not in force mode and the two projects reference identical
comment|// inputs, then return and either let FennelRenameRule or
comment|// RemoveTrivialProjectRule replace the projects
if|if
condition|(
operator|!
name|force
condition|)
block|{
if|if
condition|(
name|RelOptUtil
operator|.
name|checkProjAndChildInputs
argument_list|(
name|topProject
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
comment|// create a RexProgram for the bottom project
name|RexProgram
name|bottomProgram
init|=
name|RexProgram
operator|.
name|create
argument_list|(
name|bottomProject
operator|.
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|bottomProject
operator|.
name|getProjectExps
argument_list|()
argument_list|,
literal|null
argument_list|,
name|bottomProject
operator|.
name|getRowType
argument_list|()
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
comment|// create a RexProgram for the topmost project
name|RexNode
index|[]
name|projExprs
init|=
name|topProject
operator|.
name|getProjectExps
argument_list|()
decl_stmt|;
name|RexProgram
name|topProgram
init|=
name|RexProgram
operator|.
name|create
argument_list|(
name|bottomProject
operator|.
name|getRowType
argument_list|()
argument_list|,
name|projExprs
argument_list|,
literal|null
argument_list|,
name|topProject
operator|.
name|getRowType
argument_list|()
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
comment|// combine the two RexPrograms
name|RexProgram
name|mergedProgram
init|=
name|RexProgramBuilder
operator|.
name|mergePrograms
argument_list|(
name|topProgram
argument_list|,
name|bottomProgram
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
comment|// re-expand the topmost projection expressions, now that they
comment|// reference the children of the bottom-most project
name|int
name|nProjExprs
init|=
name|projExprs
operator|.
name|length
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjExprs
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexLocalRef
argument_list|>
name|projList
init|=
name|mergedProgram
operator|.
name|getProjectList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nProjExprs
condition|;
name|i
operator|++
control|)
block|{
name|newProjExprs
operator|.
name|add
argument_list|(
name|mergedProgram
operator|.
name|expandLocalRef
argument_list|(
name|projList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// replace the two projects with a combined projection
name|ProjectRel
name|newProjectRel
init|=
operator|(
name|ProjectRel
operator|)
name|CalcRel
operator|.
name|createProject
argument_list|(
name|bottomProject
operator|.
name|getChild
argument_list|()
argument_list|,
name|newProjExprs
argument_list|,
name|topProject
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProjectRel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End MergeProjectRule.java
end_comment

end_unit

