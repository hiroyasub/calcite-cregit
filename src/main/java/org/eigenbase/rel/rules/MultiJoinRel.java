begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A MultiJoinRel represents a join of N inputs, whereas other join relnodes  * represent strictly binary joins.  *  * @author Zelaine Fong  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MultiJoinRel
extends|extends
name|AbstractRelNode
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
decl_stmt|;
specifier|private
name|RexNode
name|joinFilter
decl_stmt|;
specifier|private
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
name|boolean
name|isFullOuterJoin
decl_stmt|;
specifier|private
name|RexNode
index|[]
name|outerJoinConditions
decl_stmt|;
specifier|private
name|JoinRelType
index|[]
name|joinTypes
decl_stmt|;
specifier|private
name|BitSet
index|[]
name|projFields
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|joinFieldRefCountsMap
decl_stmt|;
specifier|private
name|RexNode
name|postJoinFilter
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Constructs a MultiJoinRel.      *      * @param cluster cluster that join belongs to      * @param inputs inputs into this multirel join      * @param joinFilter join filter applicable to this join node      * @param rowType row type of the join result of this node      * @param isFullOuterJoin true if the join is a full outer join      * @param outerJoinConditions outer join condition associated with each join      * input, if the input is null-generating in a left or right outer join;      * null otherwise      * @param joinTypes the join type corresponding to each input; if an input      * is null-generating in a left or right outer join, the entry indicates the      * type of outer join; otherwise, the entry is set to INNER      * @param projFields fields that will be projected from each input; if null,      * projection information is not available yet so it's assumed that all      * fields from the input are projected      * @param joinFieldRefCountsMap counters of the number of times each field      * is referenced in join conditions, indexed by the input #      * @param postJoinFilter filter to be applied after the joins are executed      */
specifier|public
name|MultiJoinRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|joinFilter
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|boolean
name|isFullOuterJoin
parameter_list|,
name|RexNode
index|[]
name|outerJoinConditions
parameter_list|,
name|JoinRelType
index|[]
name|joinTypes
parameter_list|,
name|BitSet
index|[]
name|projFields
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|joinFieldRefCountsMap
parameter_list|,
name|RexNode
name|postJoinFilter
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|CallingConvention
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
name|this
operator|.
name|joinFilter
operator|=
name|joinFilter
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|isFullOuterJoin
operator|=
name|isFullOuterJoin
expr_stmt|;
name|this
operator|.
name|outerJoinConditions
operator|=
name|outerJoinConditions
expr_stmt|;
name|this
operator|.
name|joinTypes
operator|=
name|joinTypes
expr_stmt|;
name|this
operator|.
name|projFields
operator|=
name|projFields
expr_stmt|;
name|this
operator|.
name|joinFieldRefCountsMap
operator|=
name|joinFieldRefCountsMap
expr_stmt|;
name|this
operator|.
name|postJoinFilter
operator|=
name|postJoinFilter
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|CallingConvention
operator|.
name|NONE
argument_list|)
assert|;
return|return
operator|new
name|MultiJoinRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|joinFilter
operator|.
name|clone
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|isFullOuterJoin
argument_list|,
name|RexUtil
operator|.
name|clone
argument_list|(
name|outerJoinConditions
argument_list|)
argument_list|,
name|joinTypes
operator|.
name|clone
argument_list|()
argument_list|,
name|projFields
operator|.
name|clone
argument_list|()
argument_list|,
name|cloneJoinFieldRefCountsMap
argument_list|()
argument_list|,
name|postJoinFilter
argument_list|)
return|;
block|}
comment|/**      * Returns a deep copy of {@link #joinFieldRefCountsMap}.      */
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|cloneJoinFieldRefCountsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|clonedMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|clonedMap
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|joinFieldRefCountsMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|clonedMap
return|;
block|}
specifier|public
name|void
name|explain
parameter_list|(
name|RelOptPlanWriter
name|pw
parameter_list|)
block|{
name|int
name|nInputs
init|=
name|inputs
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|nExtraTerms
init|=
operator|(
name|postJoinFilter
operator|!=
literal|null
operator|)
condition|?
literal|6
else|:
literal|5
decl_stmt|;
name|String
index|[]
name|terms
init|=
operator|new
name|String
index|[
name|nInputs
operator|+
name|nExtraTerms
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nInputs
condition|;
name|i
operator|++
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
literal|"input#"
operator|+
name|i
expr_stmt|;
block|}
name|terms
index|[
name|nInputs
index|]
operator|=
literal|"joinFilter"
expr_stmt|;
name|terms
index|[
name|nInputs
operator|+
literal|1
index|]
operator|=
literal|"isFullOuterJoin"
expr_stmt|;
name|terms
index|[
name|nInputs
operator|+
literal|2
index|]
operator|=
literal|"joinTypes"
expr_stmt|;
name|terms
index|[
name|nInputs
operator|+
literal|3
index|]
operator|=
literal|"outerJoinConditions"
expr_stmt|;
name|terms
index|[
name|nInputs
operator|+
literal|4
index|]
operator|=
literal|"projFields"
expr_stmt|;
if|if
condition|(
name|postJoinFilter
operator|!=
literal|null
condition|)
block|{
name|terms
index|[
name|nInputs
operator|+
literal|5
index|]
operator|=
literal|"postJoinFilter"
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|joinTypeNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outerJoinConds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projFieldObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nInputs
condition|;
name|i
operator|++
control|)
block|{
name|joinTypeNames
operator|.
name|add
argument_list|(
name|joinTypes
index|[
name|i
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outerJoinConditions
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|outerJoinConds
operator|.
name|add
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outerJoinConds
operator|.
name|add
argument_list|(
name|outerJoinConditions
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projFields
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|projFieldObjects
operator|.
name|add
argument_list|(
literal|"ALL"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|projFieldObjects
operator|.
name|add
argument_list|(
name|projFields
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Note that we don't need to include the join field reference counts
comment|// in the digest because that field does not change for a given set
comment|// of inputs
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|nExtraTerms
operator|-
literal|1
index|]
decl_stmt|;
name|objects
index|[
literal|0
index|]
operator|=
name|isFullOuterJoin
expr_stmt|;
name|objects
index|[
literal|1
index|]
operator|=
name|joinTypeNames
expr_stmt|;
name|objects
index|[
literal|2
index|]
operator|=
name|outerJoinConds
expr_stmt|;
name|objects
index|[
literal|3
index|]
operator|=
name|projFieldObjects
expr_stmt|;
if|if
condition|(
name|postJoinFilter
operator|!=
literal|null
condition|)
block|{
name|objects
index|[
literal|4
index|]
operator|=
name|postJoinFilter
expr_stmt|;
block|}
name|pw
operator|.
name|explain
argument_list|(
name|this
argument_list|,
name|terms
argument_list|,
name|objects
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelNode
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
specifier|public
name|RexNode
index|[]
name|getChildExps
parameter_list|()
block|{
return|return
operator|new
name|RexNode
index|[]
block|{
name|joinFilter
block|}
return|;
block|}
comment|/**      * @return join filters associated with this MultiJoinRel      */
specifier|public
name|RexNode
name|getJoinFilter
parameter_list|()
block|{
return|return
name|joinFilter
return|;
block|}
comment|/**      * @return true if the MultiJoinRel corresponds to a full outer join.      */
specifier|public
name|boolean
name|isFullOuterJoin
parameter_list|()
block|{
return|return
name|isFullOuterJoin
return|;
block|}
comment|/**      * @return outer join conditions for null-generating inputs      */
specifier|public
name|RexNode
index|[]
name|getOuterJoinConditions
parameter_list|()
block|{
return|return
name|outerJoinConditions
return|;
block|}
comment|/**      * @return join types of each input      */
specifier|public
name|JoinRelType
index|[]
name|getJoinTypes
parameter_list|()
block|{
return|return
name|joinTypes
return|;
block|}
comment|/**      * @return bitmaps representing the fields projected from each input; if an      * entry is null, all fields are projected      */
specifier|public
name|BitSet
index|[]
name|getProjFields
parameter_list|()
block|{
return|return
name|projFields
return|;
block|}
comment|/**      * @return the map of reference counts for each input, representing the      * fields accessed in join conditions      */
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|getJoinFieldRefCountsMap
parameter_list|()
block|{
return|return
name|joinFieldRefCountsMap
return|;
block|}
comment|/**      * @return a copy of the map of reference counts for each input,      * representing the fields accessed in join conditions      */
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|getCopyJoinFieldRefCountsMap
parameter_list|()
block|{
return|return
name|cloneJoinFieldRefCountsMap
argument_list|()
return|;
block|}
comment|/**      * @return post-join filter associated with this MultiJoinRel      */
specifier|public
name|RexNode
name|getPostJoinFilter
parameter_list|()
block|{
return|return
name|postJoinFilter
return|;
block|}
block|}
end_class

begin_comment
comment|// End MultiJoinRel.java
end_comment

end_unit

