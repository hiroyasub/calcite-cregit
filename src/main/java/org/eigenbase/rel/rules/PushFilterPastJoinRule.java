begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * PushFilterPastJoinRule implements the rule for pushing filters above and  * within a join node into the join node and/or its children nodes.  *  * @author Zelaine Fong  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|PushFilterPastJoinRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|PushFilterPastJoinRule
name|instance
init|=
operator|new
name|PushFilterPastJoinRule
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a PushFilterPastJoinRule.      */
specifier|private
name|PushFilterPastJoinRule
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RelOptRuleOperand
argument_list|(
name|FilterRel
operator|.
name|class
argument_list|,
operator|new
name|RelOptRuleOperand
argument_list|(
name|JoinRel
operator|.
name|class
argument_list|,
name|ANY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a PushFilterPastJoinRule with an explicit root operand.      */
specifier|public
name|PushFilterPastJoinRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|String
name|id
parameter_list|)
block|{
comment|// This rule is fired for either of the following two patterns:
comment|//
comment|// RelOptRuleOperand(
comment|//     FilterRel.class,
comment|//     new RelOptRuleOperand(JoinRel.class, ANY))
comment|//
comment|// RelOptRuleOperand(JoinRel.class, null)
comment|//
name|super
argument_list|(
name|operand
argument_list|,
literal|"PushFilterRule: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|FilterRel
name|filterRel
decl_stmt|;
name|JoinRel
name|joinRel
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|rels
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|filterRel
operator|=
literal|null
expr_stmt|;
name|joinRel
operator|=
operator|(
name|JoinRel
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|filterRel
operator|=
operator|(
name|FilterRel
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
expr_stmt|;
name|joinRel
operator|=
operator|(
name|JoinRel
operator|)
name|call
operator|.
name|rels
index|[
literal|1
index|]
expr_stmt|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|joinRel
operator|.
name|getCondition
argument_list|()
argument_list|,
name|joinFilters
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterRel
operator|==
literal|null
condition|)
block|{
comment|// There is only the joinRel
comment|// make sure it does not match a cartesian product joinRel
comment|// (with "true" condition) otherwise this rule will be applied
comment|// again on the new cartesian product joinRel.
name|boolean
name|onlyTrueFilter
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RexNode
name|joinFilter
range|:
name|joinFilters
control|)
block|{
if|if
condition|(
operator|!
name|joinFilter
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|onlyTrueFilter
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|onlyTrueFilter
condition|)
block|{
return|return;
block|}
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|aboveFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterRel
operator|!=
literal|null
condition|)
block|{
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|filterRel
operator|.
name|getCondition
argument_list|()
argument_list|,
name|aboveFilters
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|leftFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|rightFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO - add logic to derive additional filters.  E.g., from
comment|// (t1.a = 1 AND t2.a = 2) OR (t1.b = 3 AND t2.b = 4), you can
comment|// derive table filters:
comment|// (t1.a = 1 OR t1.b = 3)
comment|// (t2.a = 2 OR t2.b = 4)
comment|/*          * Try to push down above filters. These are typically where clause          * filters. They can be pushed down if they are not on the NULL          * generating side.          */
name|boolean
name|filterPushed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|RelOptUtil
operator|.
name|classifyFilters
argument_list|(
name|joinRel
argument_list|,
name|aboveFilters
argument_list|,
operator|(
name|joinRel
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|INNER
operator|)
argument_list|,
operator|!
name|joinRel
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnLeft
argument_list|()
argument_list|,
operator|!
name|joinRel
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnRight
argument_list|()
argument_list|,
name|joinFilters
argument_list|,
name|leftFilters
argument_list|,
name|rightFilters
argument_list|)
condition|)
block|{
name|filterPushed
operator|=
literal|true
expr_stmt|;
block|}
comment|/*          * Try to push down filters in ON clause. A ON clause filter can only be          * pushed down if it does not affect the non-matching set, i.e. it is          * not on the side which is preserved.          */
if|if
condition|(
name|RelOptUtil
operator|.
name|classifyFilters
argument_list|(
name|joinRel
argument_list|,
name|joinFilters
argument_list|,
literal|false
argument_list|,
operator|!
name|joinRel
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnRight
argument_list|()
argument_list|,
operator|!
name|joinRel
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnLeft
argument_list|()
argument_list|,
name|joinFilters
argument_list|,
name|leftFilters
argument_list|,
name|rightFilters
argument_list|)
condition|)
block|{
name|filterPushed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|filterPushed
condition|)
block|{
return|return;
block|}
comment|// create FilterRels on top of the children if any filters were
comment|// pushed to them
name|RexBuilder
name|rexBuilder
init|=
name|joinRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelNode
name|leftRel
init|=
name|createFilterOnRel
argument_list|(
name|rexBuilder
argument_list|,
name|joinRel
operator|.
name|getLeft
argument_list|()
argument_list|,
name|leftFilters
argument_list|)
decl_stmt|;
name|RelNode
name|rightRel
init|=
name|createFilterOnRel
argument_list|(
name|rexBuilder
argument_list|,
name|joinRel
operator|.
name|getRight
argument_list|()
argument_list|,
name|rightFilters
argument_list|)
decl_stmt|;
comment|// create the new join node referencing the new children and
comment|// containing its new join filters (if there are any)
name|RexNode
name|joinFilter
decl_stmt|;
if|if
condition|(
name|joinFilters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// if nothing actually got pushed and there is nothing leftover,
comment|// then this rule is a no-op
if|if
condition|(
operator|(
name|leftFilters
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|rightFilters
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return;
block|}
name|joinFilter
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinFilter
operator|=
name|RexUtil
operator|.
name|andRexNodeList
argument_list|(
name|rexBuilder
argument_list|,
name|joinFilters
argument_list|)
expr_stmt|;
block|}
name|RelNode
name|newJoinRel
init|=
operator|new
name|JoinRel
argument_list|(
name|joinRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|leftRel
argument_list|,
name|rightRel
argument_list|,
name|joinFilter
argument_list|,
name|joinRel
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|joinRel
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|,
name|joinRel
operator|.
name|getSystemFieldList
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a FilterRel on top of the join if needed
name|RelNode
name|newRel
init|=
name|createFilterOnRel
argument_list|(
name|rexBuilder
argument_list|,
name|newJoinRel
argument_list|,
name|aboveFilters
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newRel
argument_list|)
expr_stmt|;
block|}
comment|/**      * If the filter list passed in is non-empty, creates a FilterRel on top of      * the existing RelNode; otherwise, just returns the RelNode      *      * @param rexBuilder rex builder      * @param rel the RelNode that the filter will be put on top of      * @param filters list of filters      *      * @return new RelNode or existing one if no filters      */
specifier|private
name|RelNode
name|createFilterOnRel
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|)
block|{
name|RelNode
name|newRel
decl_stmt|;
if|if
condition|(
name|filters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newRel
operator|=
name|rel
expr_stmt|;
block|}
else|else
block|{
name|RexNode
name|andFilters
init|=
name|RexUtil
operator|.
name|andRexNodeList
argument_list|(
name|rexBuilder
argument_list|,
name|filters
argument_list|)
decl_stmt|;
name|newRel
operator|=
name|CalcRel
operator|.
name|createFilter
argument_list|(
name|rel
argument_list|,
name|andFilters
argument_list|)
expr_stmt|;
block|}
return|return
name|newRel
return|;
block|}
block|}
end_class

begin_comment
comment|// End PushFilterPastJoinRule.java
end_comment

end_unit

