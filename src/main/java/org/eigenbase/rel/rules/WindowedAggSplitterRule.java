begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Rule that slices the {@link CalcRel} into sections which contain windowed  * agg functions and sections which do not.  *  *<p>The sections which contain windowed agg functions become instances of  * {@link org.eigenbase.rel.WindowRel}. If the {@link CalcRel} does not contain any  * windowed agg functions, does nothing.  */
end_comment

begin_class
specifier|public
class|class
name|WindowedAggSplitterRule
extends|extends
name|RelOptRule
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**      * The {@link Glossary#SingletonPattern singleton} instance.      */
specifier|public
specifier|static
specifier|final
name|WindowedAggSplitterRule
name|INSTANCE
init|=
operator|new
name|WindowedAggSplitterRule
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a rule.      */
specifier|private
name|WindowedAggSplitterRule
parameter_list|()
block|{
name|super
argument_list|(
name|any
argument_list|(
name|CalcRel
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|CalcRel
name|calc
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RexOver
operator|.
name|containsOver
argument_list|(
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|CalcRelSplitter
name|transform
init|=
operator|new
name|WindowedAggRelSplitter
argument_list|(
name|calc
argument_list|)
decl_stmt|;
name|RelNode
name|newRel
init|=
name|transform
operator|.
name|execute
argument_list|()
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newRel
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Splitter which distinguishes between windowed aggregation expressions      * (calls to {@link RexOver}) and ordinary expressions.      */
specifier|static
class|class
name|WindowedAggRelSplitter
extends|extends
name|CalcRelSplitter
block|{
name|WindowedAggRelSplitter
parameter_list|(
name|CalcRel
name|calc
parameter_list|)
block|{
name|super
argument_list|(
name|calc
argument_list|,
operator|new
name|RelType
index|[]
block|{
operator|new
name|CalcRelSplitter
operator|.
name|RelType
argument_list|(
literal|"CalcRelType"
argument_list|)
block|{
specifier|protected
name|boolean
name|canImplement
parameter_list|(
name|RexFieldAccess
name|field
parameter_list|)
block|{
return|return
literal|true
return|;
block_content|}
block|protected boolean canImplement(RexDynamicParam param
block|)
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|canImplement
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
return|return
literal|true
return|;
block_content|}
block|protected boolean canImplement(RexCall call
block|)
block|{
return|return
operator|!
operator|(
name|call
operator|instanceof
name|RexOver
operator|)
return|;
block|}
specifier|protected
name|RelNode
name|makeRel
argument_list|(
name|RelOptCluster
name|cluster
argument_list|,
name|RelTraitSet
name|traits
argument_list|,
name|RelDataType
name|rowType
argument_list|,
name|RelNode
name|child
argument_list|,
name|RexProgram
name|program
argument_list|)
block|{
assert|assert
operator|!
name|program
operator|.
name|containsAggs
argument_list|()
assert|;
return|return
name|super
operator|.
name|makeRel
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|rowType
argument_list|,
name|child
argument_list|,
name|program
argument_list|)
return|;
block|}
block|}
operator|,
operator|new
name|CalcRelSplitter
operator|.
name|RelType
argument_list|(
literal|"WinAggRelType"
argument_list|)
block|{
specifier|protected
name|boolean
name|canImplement
parameter_list|(
name|RexFieldAccess
name|field
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|canImplement
parameter_list|(
name|RexDynamicParam
name|param
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|canImplement
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|canImplement
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|call
operator|instanceof
name|RexOver
return|;
block|}
specifier|protected
name|boolean
name|supportsCondition
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|RelNode
name|makeRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexProgram
name|program
parameter_list|)
block|{
name|Util
operator|.
name|permAssert
argument_list|(
name|program
operator|.
name|getCondition
argument_list|()
operator|==
literal|null
argument_list|,
literal|"WindowedAggregateRel cannot accept a condition"
argument_list|)
expr_stmt|;
return|return
name|WindowRel
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|,
name|program
argument_list|,
name|rowType
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}          @
name|Override
specifier|protected
name|List
argument_list|<
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getCohorts
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|cohort
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
name|program
operator|.
name|getExprList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|expr
init|=
name|exprList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|RexOver
condition|)
block|{
name|cohort
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cohort
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|cohort
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
unit|} }
comment|// End WindowedAggSplitterRule.java
end_comment

end_unit

