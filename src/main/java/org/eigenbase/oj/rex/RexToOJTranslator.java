begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|mop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Converts expressions in logical format ({@link RexNode}) into OpenJava code.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RexToOJTranslator
implements|implements
name|RexVisitor
argument_list|<
name|Expression
argument_list|>
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|JavaRelImplementor
name|implementor
decl_stmt|;
specifier|private
specifier|final
name|RelNode
name|contextRel
decl_stmt|;
specifier|private
specifier|final
name|OJRexImplementorTable
name|implementorTable
decl_stmt|;
comment|// TODO jvs 16-Oct-2006:  Eliminate this now that RexVisitor
comment|// can return values.
specifier|private
name|Expression
name|translatedExpr
decl_stmt|;
comment|/**      * Program which the expression is part of.      *      *<ul>      *<li>If this field is set, the expression is interpreted in terms of      * output fields of the program.      *<li>If this field is not set, the expression is interpreted in terms of      * the inputs to the calculator.</li>      *</ul>      */
specifier|private
name|RexProgram
name|program
decl_stmt|;
specifier|private
specifier|final
name|Stack
argument_list|<
name|RexProgram
argument_list|>
name|programStack
init|=
operator|new
name|Stack
argument_list|<
name|RexProgram
argument_list|>
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a translator.      *      * @param implementor implementation context      * @param contextRel relational expression which is the context for the      * row-expressions which are to be translated      * @param implementorTable table of implementation functors for Rex      * operators; if null, {@link OJRexImplementorTableImpl#instance} is used      */
specifier|public
name|RexToOJTranslator
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|RelNode
name|contextRel
parameter_list|,
name|OJRexImplementorTable
name|implementorTable
parameter_list|)
block|{
if|if
condition|(
name|implementorTable
operator|==
literal|null
condition|)
block|{
name|implementorTable
operator|=
name|OJRexImplementorTableImpl
operator|.
name|instance
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|implementor
operator|=
name|implementor
expr_stmt|;
name|this
operator|.
name|contextRel
operator|=
name|contextRel
expr_stmt|;
name|this
operator|.
name|implementorTable
operator|=
name|implementorTable
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|protected
name|Expression
name|setTranslation
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
return|return
name|translatedExpr
operator|=
name|expr
return|;
block|}
specifier|protected
name|Expression
name|getTranslation
parameter_list|()
block|{
return|return
name|translatedExpr
return|;
block|}
comment|/**      * Returns the current program.      *      * @see #pushProgram(RexProgram)      * @see #popProgram(RexProgram)      */
specifier|public
name|RexProgram
name|getProgram
parameter_list|()
block|{
return|return
name|program
return|;
block|}
specifier|protected
name|OJRexImplementorTable
name|getImplementorTable
parameter_list|()
block|{
return|return
name|implementorTable
return|;
block|}
specifier|public
name|JavaRelImplementor
name|getRelImplementor
parameter_list|()
block|{
return|return
name|implementor
return|;
block|}
specifier|public
name|RelNode
name|getContextRel
parameter_list|()
block|{
return|return
name|contextRel
return|;
block|}
specifier|public
name|RelDataTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|contextRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
return|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitLocalRef
parameter_list|(
name|RexLocalRef
name|localRef
parameter_list|)
block|{
assert|assert
name|program
operator|!=
literal|null
assert|;
if|if
condition|(
name|isInputRef
argument_list|(
name|localRef
argument_list|)
condition|)
block|{
return|return
name|translateInput
argument_list|(
name|localRef
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// It's a reference to a common sub-expression. Recursively
comment|// translate that expression.
return|return
name|setTranslation
argument_list|(
name|translateSubExpression
argument_list|(
name|localRef
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Translates a common subexpression.      *      * @param localRef common subexpression to be translated      *      * @return translation      */
specifier|public
name|Expression
name|translateSubExpression
parameter_list|(
name|RexLocalRef
name|localRef
parameter_list|)
block|{
specifier|final
name|RexNode
name|expr
init|=
name|program
operator|.
name|getExprList
argument_list|()
operator|.
name|get
argument_list|(
name|localRef
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|localRef
operator|.
name|getType
argument_list|()
assert|;
return|return
name|translateRexNode
argument_list|(
name|expr
argument_list|)
return|;
block|}
comment|/**      * Tests whether a RexLocalRef refers to an input.      *      * @param localRef reference to test      *      * @return true if an input reference; false if a reference to a common      * subexpression      */
specifier|protected
name|boolean
name|isInputRef
parameter_list|(
name|RexLocalRef
name|localRef
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|localRef
operator|.
name|getIndex
argument_list|()
decl_stmt|;
return|return
name|program
operator|.
name|getInputRowType
argument_list|()
operator|.
name|isStruct
argument_list|()
operator|&&
operator|(
name|index
operator|<
name|program
operator|.
name|getInputRowType
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|length
operator|)
return|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|inputRef
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|program
operator|!=
literal|null
condition|)
block|{
comment|// Lookup the expression.
specifier|final
name|RexNode
name|expanded
init|=
name|program
operator|.
name|getExprList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
assert|assert
name|expanded
operator|.
name|getType
argument_list|()
operator|==
name|inputRef
operator|.
name|getType
argument_list|()
assert|;
comment|// Unset program because the new expression is in terms of the
comment|// program's inputs. This also prevents infinite expansion.
name|pushProgram
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expanded
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|popProgram
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|translateInput
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|private
name|Expression
name|translateInput
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|WhichInputResult
name|inputAndCol
init|=
name|whichInput
argument_list|(
name|index
argument_list|,
name|contextRel
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputAndCol
operator|==
literal|null
condition|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"input not found"
argument_list|)
throw|;
block|}
specifier|final
name|Variable
name|v
init|=
name|implementor
operator|.
name|findInputVariable
argument_list|(
name|inputAndCol
operator|.
name|input
argument_list|)
decl_stmt|;
name|RelDataType
name|rowType
init|=
name|inputAndCol
operator|.
name|input
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeField
name|field
init|=
name|rowType
operator|.
name|getFields
argument_list|()
index|[
name|inputAndCol
operator|.
name|fieldIndex
index|]
decl_stmt|;
specifier|final
name|String
name|javaFieldName
init|=
name|Util
operator|.
name|toJavaId
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|inputAndCol
operator|.
name|fieldIndex
argument_list|)
decl_stmt|;
return|return
name|setTranslation
argument_list|(
operator|new
name|FieldAccess
argument_list|(
name|v
argument_list|,
name|javaFieldName
argument_list|)
argument_list|)
return|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
comment|// Refer to RexLiteral.valueMatchesType for the type/value combinations
comment|// we need to handle here.
specifier|final
name|Object
name|value
init|=
name|literal
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Calendar
name|calendar
decl_stmt|;
name|long
name|timeInMillis
decl_stmt|;
switch|switch
condition|(
name|literal
operator|.
name|getTypeName
argument_list|()
condition|)
block|{
case|case
name|NULL
case|:
name|setTranslation
argument_list|(
name|Literal
operator|.
name|constantNull
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|Literal
name|lit
init|=
name|Literal
operator|.
name|makeLiteral
argument_list|(
operator|(
operator|(
name|NlsString
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// Replace non-ASCII characters with Java Unicode escape
comment|// sequences to avoid encoding glitches in the generated
comment|// Java code.
name|String
name|s
init|=
name|lit
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|v
init|=
operator|(
name|int
operator|)
name|c
decl_stmt|;
if|if
condition|(
name|v
operator|<
literal|128
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\u"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%1$04X"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|lit
operator|=
operator|new
name|Literal
argument_list|(
name|Literal
operator|.
name|STRING
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setTranslation
argument_list|(
name|lit
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|BigDecimal
name|bd
init|=
operator|(
name|BigDecimal
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|bd
operator|.
name|scale
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Honor the requested type (if long) to prevent
comment|// unexpected overflow during arithmetic.
name|SqlTypeName
name|type
init|=
name|literal
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
name|long
name|longValue
init|=
name|bd
operator|.
name|longValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|TINYINT
case|:
case|case
name|SMALLINT
case|:
case|case
name|INTEGER
case|:
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
operator|(
name|int
operator|)
name|longValue
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
name|longValue
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
block|}
comment|// represent decimals with unscaled value
name|long
name|unscaled
init|=
name|bd
operator|.
name|unscaledValue
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
name|unscaled
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
if|if
condition|(
name|literal
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|REAL
condition|)
block|{
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
name|setTranslation
argument_list|(
name|convertByteArrayLiteral
argument_list|(
operator|(
operator|(
name|ByteBuffer
operator|)
name|value
operator|)
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
name|calendar
operator|=
operator|(
name|Calendar
operator|)
name|value
expr_stmt|;
name|timeInMillis
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
name|timeInMillis
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|BigDecimal
name|interval
init|=
operator|(
name|BigDecimal
operator|)
name|value
decl_stmt|;
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
name|interval
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SYMBOL
case|:
name|SqlLiteral
operator|.
name|SqlSymbol
name|ord
init|=
operator|(
name|SqlLiteral
operator|.
name|SqlSymbol
operator|)
name|value
decl_stmt|;
name|setTranslation
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
name|ord
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"Bad literal value "
operator|+
name|value
operator|+
literal|" ("
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|"); breaches "
operator|+
literal|"post-condition on RexLiteral.getValue()"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|Expression
name|callExpr
init|=
name|convertCallAndOperands
argument_list|(
name|call
argument_list|)
decl_stmt|;
return|return
name|setTranslation
argument_list|(
name|callExpr
argument_list|)
return|;
block|}
specifier|protected
name|Expression
name|convertCallAndOperands
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|exprs
operator|.
name|add
argument_list|(
name|translateRexNode
argument_list|(
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|convertCall
argument_list|(
name|call
argument_list|,
name|exprs
argument_list|)
return|;
block|}
comment|/**      * Converts a call after its operands have already been translated.      *      * @param call call to be translated      * @param operandExprList translated operands      *      * @return converted call      */
specifier|protected
name|Expression
name|convertCall
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|operandExprList
parameter_list|)
block|{
name|OJRexImplementor
name|implementor
init|=
name|implementorTable
operator|.
name|get
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor
operator|==
literal|null
condition|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
name|call
argument_list|)
throw|;
block|}
specifier|final
name|Expression
index|[]
name|operandExprs2
init|=
name|operandExprList
operator|.
name|toArray
argument_list|(
operator|new
name|Expression
index|[
name|operandExprList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|,
name|call
argument_list|,
name|operandExprs2
argument_list|)
return|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"Row-expression RexOver"
argument_list|)
throw|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|correlVariable
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"Row-expression RexCorrelVariable"
argument_list|)
throw|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitDynamicParam
parameter_list|(
name|RexDynamicParam
name|dynamicParam
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"Row-expression RexDynamicParam"
argument_list|)
throw|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitRangeRef
parameter_list|(
name|RexRangeRef
name|rangeRef
parameter_list|)
block|{
specifier|final
name|WhichInputResult
name|inputAndCol
init|=
name|whichInput
argument_list|(
name|rangeRef
operator|.
name|getOffset
argument_list|()
argument_list|,
name|contextRel
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputAndCol
operator|==
literal|null
condition|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"input not found"
argument_list|)
throw|;
block|}
specifier|final
name|RelDataType
name|inputRowType
init|=
name|inputAndCol
operator|.
name|input
operator|.
name|getRowType
argument_list|()
decl_stmt|;
comment|// Simple case is if the range refers to every field of the
comment|// input. Return the whole input.
specifier|final
name|Variable
name|inputExpr
init|=
name|implementor
operator|.
name|findInputVariable
argument_list|(
name|inputAndCol
operator|.
name|input
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rangeType
init|=
name|rangeRef
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|inputAndCol
operator|.
name|fieldIndex
operator|==
literal|0
operator|)
operator|&&
operator|(
name|rangeType
operator|==
name|inputRowType
operator|)
condition|)
block|{
return|return
name|setTranslation
argument_list|(
name|inputExpr
argument_list|)
return|;
block|}
comment|// More complex case is if the range refers to a subset of
comment|// the input's fields. Generate "new Type(argN,...,argM)".
specifier|final
name|RelDataTypeField
index|[]
name|rangeFields
init|=
name|rangeType
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeField
index|[]
name|inputRowFields
init|=
name|inputRowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|ExpressionList
name|args
init|=
operator|new
name|ExpressionList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rangeFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldName
init|=
name|inputRowFields
index|[
name|inputAndCol
operator|.
name|fieldIndex
operator|+
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|javaFieldName
init|=
name|Util
operator|.
name|toJavaId
argument_list|(
name|fieldName
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
operator|new
name|FieldAccess
argument_list|(
name|inputExpr
argument_list|,
name|javaFieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|setTranslation
argument_list|(
operator|new
name|AllocationExpression
argument_list|(
name|OJUtil
operator|.
name|typeToOJClass
argument_list|(
name|rangeType
argument_list|,
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
return|;
block|}
comment|// implement RexVisitor
specifier|public
name|Expression
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
specifier|final
name|String
name|javaFieldName
init|=
name|Util
operator|.
name|toJavaId
argument_list|(
name|fieldAccess
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|setTranslation
argument_list|(
operator|new
name|FieldAccess
argument_list|(
name|translateRexNode
argument_list|(
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
argument_list|)
argument_list|,
name|javaFieldName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Translates an expression into a Java expression. If the program has      * previously been set via {@link #pushProgram(RexProgram)}, the expression      * is interpreted in terms of the<em>output</em> fields of the program.      * Suppose that the program is      *      *<blockquote>      *<pre>      *   exprs: {$0, $1, $0 + $1}      *   projectRefs: {$0, $2}      *   conditionRef: null</pre>      *</blockquote>      *      * and the expression is<code>$1 + 5</code>. This would be expanded to      *<code>(a + b) + 5</code>, because output field $1 of the program is      * defined to be the expression<code>$0 + $1</code> in terms of the input      * fields.      *      *<p/>Sometimes a calculator expression is defined in terms of simpler      * calculator expressions. If this is the case, those expressions will be      * successively evaluated and assigned to variables. If a variable with the      * appropriate value is already in scope, it will be used.      *      *<p/>If the program is not present, no mapping occurs.      *      * @param node Expression to be translated.      *      * @return Java translation of expression      */
specifier|public
name|Expression
name|translateRexNode
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|JavaRowExpression
condition|)
block|{
return|return
operator|(
operator|(
name|JavaRowExpression
operator|)
name|node
operator|)
operator|.
name|getExpression
argument_list|()
return|;
block|}
else|else
block|{
name|node
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Expression
name|expr
init|=
name|translatedExpr
decl_stmt|;
name|this
operator|.
name|translatedExpr
operator|=
literal|null
expr_stmt|;
return|return
name|expr
return|;
block|}
block|}
specifier|protected
name|ArrayInitializer
name|convertByteArrayLiteralToInitializer
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|ExpressionList
name|byteList
init|=
operator|new
name|ExpressionList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|byteList
operator|.
name|add
argument_list|(
name|Literal
operator|.
name|makeLiteral
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayInitializer
argument_list|(
name|byteList
argument_list|)
return|;
block|}
specifier|protected
name|Expression
name|convertByteArrayLiteral
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|new
name|ArrayAllocationExpression
argument_list|(
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|OJSystem
operator|.
name|BYTE
argument_list|)
argument_list|,
operator|new
name|ExpressionList
argument_list|(
literal|null
argument_list|)
argument_list|,
name|convertByteArrayLiteralToInitializer
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canConvertCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|OJRexImplementor
name|implementor
init|=
name|implementorTable
operator|.
name|get
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|implementor
operator|.
name|canImplement
argument_list|(
name|call
argument_list|)
return|;
block|}
comment|/**      * Returns the ordinal of the input relational expression which a given      * column ordinal comes from.      *      *<p>For example, if<code>rel</code> has inputs<code>I(a, b, c)</code>      * and<code>J(d, e)</code>, then<code>whichInput(0, rel)</code> returns 0      * (column a),<code>whichInput(2, rel)</code> returns 0 (column c),<code>      * whichInput(3, rel)</code> returns 1 (column d).</p>      *      * @param fieldIndex Index of field      * @param rel Relational expression      *      * @return a {@link WhichInputResult} if found, otherwise null.      */
specifier|private
specifier|static
name|WhichInputResult
name|whichInput
parameter_list|(
name|int
name|fieldIndex
parameter_list|,
name|RelNode
name|rel
parameter_list|)
block|{
assert|assert
name|fieldIndex
operator|>=
literal|0
assert|;
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|rel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|inputIndex
init|=
literal|0
init|,
name|firstFieldIndex
init|=
literal|0
init|;
name|inputIndex
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|inputIndex
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
name|inputIndex
argument_list|)
decl_stmt|;
comment|// Index of first field in next input. Special case if this
comment|// input has no fields: it's ambiguous (we could be looking
comment|// at the first field of the next input) but we allow it.
specifier|final
name|int
name|fieldCount
init|=
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|lastFieldIndex
init|=
name|firstFieldIndex
operator|+
name|fieldCount
decl_stmt|;
if|if
condition|(
operator|(
name|lastFieldIndex
operator|>
name|fieldIndex
operator|)
operator|||
operator|(
operator|(
name|fieldCount
operator|==
literal|0
operator|)
operator|&&
operator|(
name|lastFieldIndex
operator|==
name|fieldIndex
operator|)
operator|)
condition|)
block|{
specifier|final
name|int
name|fieldIndex2
init|=
name|fieldIndex
operator|-
name|firstFieldIndex
decl_stmt|;
return|return
operator|new
name|WhichInputResult
argument_list|(
name|input
argument_list|,
name|inputIndex
argument_list|,
name|fieldIndex2
argument_list|)
return|;
block|}
name|firstFieldIndex
operator|=
name|lastFieldIndex
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Generates code for an assignment.      *      *<p>NOTE: This method is only implemented in translators which can      * generate sequences of statements. The default implementation of this      * method throws {@link UnsupportedOperationException}.      *      * @param lhsField target field      * @param lhs target field as OpenJava      * @param rhs the source expression (as RexNode)      */
specifier|public
name|void
name|translateAssignment
parameter_list|(
name|RelDataTypeField
name|lhsField
parameter_list|,
name|Expression
name|lhs
parameter_list|,
name|RexNode
name|rhs
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * Returns a sub-translator to deal with a sub-block.      *      *<p>The default implementation simply returns this translator. Other      * implementations may create a new translator which contains the      * expression-to-variable mappings of the sub-block.      *      * @param stmtList Sub-block to generate code into      *      * @return A translator      */
specifier|public
name|RexToOJTranslator
name|push
parameter_list|(
name|StatementList
name|stmtList
parameter_list|)
block|{
return|return
name|this
return|;
block|}
comment|/**      * Sets the current program. The previous program will be restored when      * {@link #popProgram} is called. The program may be null.      *      * @param program New current program      */
specifier|public
name|void
name|pushProgram
parameter_list|(
name|RexProgram
name|program
parameter_list|)
block|{
name|programStack
operator|.
name|push
argument_list|(
name|program
argument_list|)
expr_stmt|;
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
block|}
comment|/**      * Restores the current program to the one before {@link      * #pushProgram(RexProgram)} was called.      *      * @param program The program most recently pushed      */
specifier|public
name|void
name|popProgram
parameter_list|(
name|RexProgram
name|program
parameter_list|)
block|{
name|Util
operator|.
name|pre
argument_list|(
name|program
operator|==
name|this
operator|.
name|program
argument_list|,
literal|"mismatched push/pop"
argument_list|)
expr_stmt|;
assert|assert
name|programStack
operator|.
name|pop
argument_list|()
operator|==
name|program
assert|;
if|if
condition|(
name|programStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|program
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|program
operator|=
name|programStack
operator|.
name|lastElement
argument_list|()
expr_stmt|;
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Result of call to {@link RexToOJTranslator#whichInput}, contains the      * input relational expression, its index, and the index of the field within      * that relational expression.      */
specifier|private
specifier|static
class|class
name|WhichInputResult
block|{
specifier|final
name|RelNode
name|input
decl_stmt|;
specifier|final
name|int
name|inputIndex
decl_stmt|;
specifier|final
name|int
name|fieldIndex
decl_stmt|;
name|WhichInputResult
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|int
name|inputIndex
parameter_list|,
name|int
name|fieldIndex
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|inputIndex
operator|=
name|inputIndex
expr_stmt|;
name|this
operator|.
name|fieldIndex
operator|=
name|fieldIndex
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RexToOJTranslator.java
end_comment

end_unit

