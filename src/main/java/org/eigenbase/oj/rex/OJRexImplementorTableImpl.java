begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * OJRexImplementorTableImpl is a default implementation of {@link  * OJRexImplementorTable}, containing implementors for standard operators,  * functions, and aggregates. Say that three times fast.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|OJRexImplementorTableImpl
implements|implements
name|OJRexImplementorTable
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
name|OJRexImplementorTableImpl
name|instance
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|holderClassName
init|=
literal|"saffron.runtime.Holder"
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|OJRexImplementor
argument_list|>
name|implementorMap
init|=
operator|new
name|HashMap
argument_list|<
name|SqlOperator
argument_list|,
name|OJRexImplementor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlAggFunction
argument_list|,
name|OJSumAggImplementor
argument_list|>
name|aggImplementorMap
init|=
operator|new
name|HashMap
argument_list|<
name|SqlAggFunction
argument_list|,
name|OJSumAggImplementor
argument_list|>
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates an empty table.      *      *<p>You probably want to call the public method {@link #instance} instead.      */
specifier|protected
name|OJRexImplementorTableImpl
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Creates a table and initializes it with implementations of all of the      * standard SQL functions and operators.      */
specifier|public
specifier|synchronized
specifier|static
name|OJRexImplementorTable
name|instance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|OJRexImplementorTableImpl
argument_list|()
expr_stmt|;
name|instance
operator|.
name|initStandard
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|// implement OJRexImplementorTable
specifier|public
name|OJRexImplementor
name|get
parameter_list|(
name|SqlOperator
name|op
parameter_list|)
block|{
return|return
name|implementorMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
return|;
block|}
comment|// implement OJRexImplementorTable
specifier|public
name|OJAggImplementor
name|get
parameter_list|(
name|Aggregation
name|agg
parameter_list|)
block|{
return|return
name|aggImplementorMap
operator|.
name|get
argument_list|(
name|agg
argument_list|)
return|;
block|}
comment|/**      * Registers implementations for the standard set of functions and      * operators.      */
specifier|protected
name|void
name|initStandard
parameter_list|(
specifier|final
name|SqlStdOperatorTable
name|opTab
parameter_list|)
block|{
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|equalsOperator
argument_list|,
name|BinaryExpression
operator|.
name|EQUAL
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|notEqualsOperator
argument_list|,
name|BinaryExpression
operator|.
name|NOTEQUAL
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|lessThanOperator
argument_list|,
name|BinaryExpression
operator|.
name|LESS
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|lessThanOrEqualOperator
argument_list|,
name|BinaryExpression
operator|.
name|LESSEQUAL
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|greaterThanOperator
argument_list|,
name|BinaryExpression
operator|.
name|GREATER
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|greaterThanOrEqualOperator
argument_list|,
name|BinaryExpression
operator|.
name|GREATEREQUAL
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|plusOperator
argument_list|,
name|BinaryExpression
operator|.
name|PLUS
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|minusOperator
argument_list|,
name|BinaryExpression
operator|.
name|MINUS
argument_list|)
expr_stmt|;
name|registerOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|minusDateOperator
argument_list|,
operator|new
name|OJRexBinaryExpressionImplementor
argument_list|(
name|BinaryExpression
operator|.
name|MINUS
argument_list|)
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|multiplyOperator
argument_list|,
name|BinaryExpression
operator|.
name|TIMES
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|divideOperator
argument_list|,
name|BinaryExpression
operator|.
name|DIVIDE
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|divideIntegerOperator
argument_list|,
name|BinaryExpression
operator|.
name|DIVIDE
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|andOperator
argument_list|,
name|BinaryExpression
operator|.
name|LOGICAL_AND
argument_list|)
expr_stmt|;
name|registerBinaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|orOperator
argument_list|,
name|BinaryExpression
operator|.
name|LOGICAL_OR
argument_list|)
expr_stmt|;
name|registerUnaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|prefixMinusOperator
argument_list|,
name|UnaryExpression
operator|.
name|MINUS
argument_list|)
expr_stmt|;
name|registerUnaryOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|notOperator
argument_list|,
name|UnaryExpression
operator|.
name|NOT
argument_list|)
expr_stmt|;
name|registerOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|isTrueOperator
argument_list|,
operator|new
name|OJRexIgnoredCallImplementor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|castFunc
argument_list|,
operator|new
name|OJRexCastImplementor
argument_list|()
argument_list|)
expr_stmt|;
comment|// We hope that the internal 'slice' operator will be expanded away
comment|// before we need to generate code for it.
name|registerOperator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|sliceOp
argument_list|,
operator|new
name|OJRexIgnoredCallImplementor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register the standard aggregations.
name|aggImplementorMap
operator|.
name|put
argument_list|(
name|SqlStdOperatorTable
operator|.
name|sumOperator
argument_list|,
operator|new
name|OJSumAggImplementor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerOperator
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|OJRexImplementor
name|implementor
parameter_list|)
block|{
name|implementorMap
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|implementor
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerBinaryOperator
parameter_list|(
name|SqlBinaryOperator
name|op
parameter_list|,
name|int
name|ojBinaryExpressionOrdinal
parameter_list|)
block|{
name|registerOperator
argument_list|(
name|op
argument_list|,
operator|new
name|OJRexBinaryExpressionImplementor
argument_list|(
name|ojBinaryExpressionOrdinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerUnaryOperator
parameter_list|(
name|SqlPrefixOperator
name|op
parameter_list|,
name|int
name|ojUnaryExpressionOrdinal
parameter_list|)
block|{
name|registerOperator
argument_list|(
name|op
argument_list|,
operator|new
name|OJRexUnaryExpressionImplementor
argument_list|(
name|ojUnaryExpressionOrdinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|public
specifier|abstract
specifier|static
class|class
name|OJBasicAggImplementor
implements|implements
name|OJAggImplementor
block|{
comment|// implement Aggregation
specifier|public
name|boolean
name|canMerge
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|// implement Aggregation
specifier|public
name|void
name|implementMerge
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|Expression
name|otherAccumulator
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"This method shouldn't have been called, because canMerge "
operator|+
literal|"returned "
operator|+
name|canMerge
argument_list|()
argument_list|)
throw|;
block|}
comment|/**          * This is a default implementation of {@link          * org.eigenbase.oj.rex.OJAggImplementor#implementStartAndNext};          * particular derived classes may do better.          */
specifier|public
name|Expression
name|implementStartAndNext
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|JavaRel
name|rel
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
name|StatementList
name|stmtList
init|=
name|implementor
operator|.
name|getStatementList
argument_list|()
decl_stmt|;
name|Variable
name|var
init|=
name|implementor
operator|.
name|newVariable
argument_list|()
decl_stmt|;
name|stmtList
operator|.
name|add
argument_list|(
operator|new
name|VariableDeclaration
argument_list|(
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|OJUtil
operator|.
name|clazzObject
argument_list|)
argument_list|,
name|var
operator|.
name|toString
argument_list|()
argument_list|,
name|implementStart
argument_list|(
name|implementor
argument_list|,
name|rel
argument_list|,
name|call
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|implementNext
argument_list|(
name|implementor
argument_list|,
name|rel
argument_list|,
name|var
argument_list|,
name|call
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
block|}
comment|/**      *<code>Sum</code> is an aggregator which returns the sum of the values      * which go into it. It has precisely one argument of numeric type      * (<code>int</code>,<code>long</code>,<code>float</code>,<code>      * double</code>), and the result is the same type.      */
specifier|public
specifier|static
class|class
name|OJSumAggImplementor
extends|extends
name|OJBasicAggImplementor
block|{
specifier|public
name|OJSumAggImplementor
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|canMerge
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|implementNext
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|JavaRel
name|rel
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|args
init|=
name|call
operator|.
name|getArgList
argument_list|()
decl_stmt|;
specifier|final
name|SqlSumAggFunction
name|agg
init|=
operator|(
name|SqlSumAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|args
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|StatementList
name|stmtList
init|=
name|implementor
operator|.
name|getStatementList
argument_list|()
decl_stmt|;
name|Expression
name|arg
init|=
name|implementor
operator|.
name|translateInputField
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// e.g. "((Holder.int_Holder) acc).value += arg"
name|stmtList
operator|.
name|add
argument_list|(
operator|new
name|ExpressionStatement
argument_list|(
operator|new
name|AssignmentExpression
argument_list|(
operator|new
name|FieldAccess
argument_list|(
operator|new
name|CastExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|agg
operator|.
name|getType
argument_list|()
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
name|accumulator
argument_list|)
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|AssignmentExpression
operator|.
name|ADD
argument_list|,
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
comment|// e.g. "o" becomes "((Holder.int_Holder) o).value"
specifier|final
name|SqlSumAggFunction
name|agg
init|=
operator|(
name|SqlSumAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
return|return
operator|new
name|FieldAccess
argument_list|(
operator|new
name|CastExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|agg
operator|.
name|getType
argument_list|()
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
name|accumulator
argument_list|)
argument_list|,
literal|"value"
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementStart
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|JavaRel
name|rel
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
comment|// e.g. "new Holder.int_Holder(0)"
specifier|final
name|SqlSumAggFunction
name|agg
init|=
operator|(
name|SqlSumAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
return|return
operator|new
name|AllocationExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|agg
operator|.
name|getType
argument_list|()
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
operator|new
name|ExpressionList
argument_list|(
name|Literal
operator|.
name|constantZero
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"sum"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OJCountAggImplementor
extends|extends
name|OJBasicAggImplementor
block|{
specifier|public
name|OJCountAggImplementor
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|canMerge
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|implementNext
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|JavaRel
name|rel
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
name|SqlCountAggFunction
name|agg
init|=
operator|(
name|SqlCountAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
name|StatementList
name|stmtList
init|=
name|implementor
operator|.
name|getStatementList
argument_list|()
decl_stmt|;
name|ExpressionStatement
name|stmt
init|=
operator|new
name|ExpressionStatement
argument_list|(
operator|new
name|UnaryExpression
argument_list|(
name|UnaryExpression
operator|.
name|POST_INCREMENT
argument_list|,
operator|new
name|FieldAccess
argument_list|(
operator|new
name|CastExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|SqlCountAggFunction
operator|.
name|type
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
name|accumulator
argument_list|)
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
init|=
name|call
operator|.
name|getArgList
argument_list|()
decl_stmt|;
if|if
condition|(
name|argList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// e.g. "((Holder.int_Holder) acc).value++;"
name|stmtList
operator|.
name|add
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if (arg1 != null&& arg2 != null) {
comment|//  ((Holder.int_Holder) acc).value++;
comment|// }
name|Expression
name|condition
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Integer
name|arg
range|:
name|argList
control|)
block|{
name|Expression
name|term
init|=
operator|new
name|BinaryExpression
argument_list|(
name|implementor
operator|.
name|translateInputField
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|,
name|arg
argument_list|)
argument_list|,
name|BinaryExpression
operator|.
name|NOTEQUAL
argument_list|,
name|Literal
operator|.
name|constantNull
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|condition
operator|==
literal|null
condition|)
block|{
name|condition
operator|=
name|term
expr_stmt|;
block|}
else|else
block|{
name|condition
operator|=
operator|new
name|BinaryExpression
argument_list|(
name|condition
argument_list|,
name|BinaryExpression
operator|.
name|LOGICAL_AND
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
block|}
name|stmtList
operator|.
name|add
argument_list|(
operator|new
name|IfStatement
argument_list|(
name|condition
argument_list|,
operator|new
name|StatementList
argument_list|(
name|stmt
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
comment|// e.g. "o" becomes "((Holder.int_Holder) o).value"
name|SqlCountAggFunction
name|agg
init|=
operator|(
name|SqlCountAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
return|return
operator|new
name|FieldAccess
argument_list|(
operator|new
name|CastExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|SqlCountAggFunction
operator|.
name|type
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
name|accumulator
argument_list|)
argument_list|,
literal|"value"
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementStart
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|JavaRel
name|rel
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
comment|// e.g. "new Holder.int_Holder(0)"
name|SqlCountAggFunction
name|agg
init|=
operator|(
name|SqlCountAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
return|return
operator|new
name|AllocationExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|SqlCountAggFunction
operator|.
name|type
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
operator|new
name|ExpressionList
argument_list|(
name|Literal
operator|.
name|constantZero
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OJMinMaxAggImplementor
extends|extends
name|OJBasicAggImplementor
block|{
specifier|public
name|OJMinMaxAggImplementor
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|canMerge
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|implementNext
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|JavaRel
name|rel
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
name|SqlMinMaxAggFunction
name|agg
init|=
operator|(
name|SqlMinMaxAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
name|StatementList
name|stmtList
init|=
name|implementor
operator|.
name|getStatementList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
init|=
name|call
operator|.
name|getArgList
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|agg
operator|.
name|getMinMaxKind
argument_list|()
condition|)
block|{
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_PRIMITIVE
case|:
comment|// "((Holder.int_Holder) acc).setLesser(arg)"
name|Expression
name|arg
init|=
name|implementor
operator|.
name|translateInputField
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|,
name|argList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|stmtList
operator|.
name|add
argument_list|(
operator|new
name|ExpressionStatement
argument_list|(
operator|new
name|MethodCall
argument_list|(
operator|new
name|CastExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|agg
operator|.
name|argTypes
index|[
literal|0
index|]
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
name|accumulator
argument_list|)
argument_list|,
name|agg
operator|.
name|isMin
argument_list|()
condition|?
literal|"setLesser"
else|:
literal|"setGreater"
argument_list|,
operator|new
name|ExpressionList
argument_list|(
name|arg
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_COMPARABLE
case|:
comment|// T t = arg;
comment|// if (acc == null || (t != null&& t.compareTo(acc)< 0)) {
comment|//   acc = t;
comment|// }
name|arg
operator|=
name|implementor
operator|.
name|translateInputField
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|,
name|argList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Variable
name|var_t
init|=
name|implementor
operator|.
name|newVariable
argument_list|()
decl_stmt|;
name|stmtList
operator|.
name|add
argument_list|(
operator|new
name|VariableDeclaration
argument_list|(
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|OJUtil
operator|.
name|typeToOJClass
argument_list|(
name|agg
operator|.
name|argTypes
index|[
literal|0
index|]
argument_list|,
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|var_t
operator|.
name|toString
argument_list|()
argument_list|,
name|arg
argument_list|)
argument_list|)
expr_stmt|;
name|stmtList
operator|.
name|add
argument_list|(
operator|new
name|IfStatement
argument_list|(
operator|new
name|BinaryExpression
argument_list|(
operator|new
name|BinaryExpression
argument_list|(
name|accumulator
argument_list|,
name|BinaryExpression
operator|.
name|EQUAL
argument_list|,
name|Literal
operator|.
name|constantNull
argument_list|()
argument_list|)
argument_list|,
name|BinaryExpression
operator|.
name|LOGICAL_OR
argument_list|,
operator|new
name|BinaryExpression
argument_list|(
operator|new
name|BinaryExpression
argument_list|(
name|var_t
argument_list|,
name|BinaryExpression
operator|.
name|NOTEQUAL
argument_list|,
name|Literal
operator|.
name|constantNull
argument_list|()
argument_list|)
argument_list|,
name|BinaryExpression
operator|.
name|LOGICAL_AND
argument_list|,
operator|new
name|BinaryExpression
argument_list|(
operator|new
name|MethodCall
argument_list|(
name|var_t
argument_list|,
literal|"compareTo"
argument_list|,
operator|new
name|ExpressionList
argument_list|(
name|accumulator
argument_list|)
argument_list|)
argument_list|,
name|BinaryExpression
operator|.
name|LESS
argument_list|,
name|Literal
operator|.
name|constantZero
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|StatementList
argument_list|(
operator|new
name|ExpressionStatement
argument_list|(
operator|new
name|AssignmentExpression
argument_list|(
name|accumulator
argument_list|,
name|AssignmentExpression
operator|.
name|EQUALS
argument_list|,
name|var_t
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_COMPARATOR
case|:
comment|// "((Holder.ComparatorHolder)
comment|// acc).setLesser(arg)"
name|arg
operator|=
name|implementor
operator|.
name|translateInputField
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|,
name|argList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|stmtList
operator|.
name|add
argument_list|(
operator|new
name|ExpressionStatement
argument_list|(
operator|new
name|MethodCall
argument_list|(
operator|new
name|CastExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|agg
operator|.
name|argTypes
index|[
literal|1
index|]
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
name|accumulator
argument_list|)
argument_list|,
name|agg
operator|.
name|isMin
argument_list|()
condition|?
literal|"setLesser"
else|:
literal|"setGreater"
argument_list|,
operator|new
name|ExpressionList
argument_list|(
name|arg
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"bad kind: "
operator|+
name|agg
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
name|SqlMinMaxAggFunction
name|agg
init|=
operator|(
name|SqlMinMaxAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|agg
operator|.
name|getMinMaxKind
argument_list|()
condition|)
block|{
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_PRIMITIVE
case|:
comment|// ((Holder.int_Holder) acc).value
return|return
operator|new
name|FieldAccess
argument_list|(
operator|new
name|CastExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|agg
operator|.
name|argTypes
index|[
literal|1
index|]
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
name|accumulator
argument_list|)
argument_list|,
literal|"value"
argument_list|)
return|;
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_COMPARABLE
case|:
comment|// (T) acc
return|return
operator|new
name|CastExpression
argument_list|(
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|OJUtil
operator|.
name|typeToOJClass
argument_list|(
name|agg
operator|.
name|argTypes
index|[
literal|0
index|]
argument_list|,
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|accumulator
argument_list|)
return|;
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_COMPARATOR
case|:
comment|// (T) ((Holder.int_Holder) acc).value
return|return
operator|new
name|CastExpression
argument_list|(
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|OJUtil
operator|.
name|typeToOJClass
argument_list|(
name|agg
operator|.
name|argTypes
index|[
literal|1
index|]
argument_list|,
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FieldAccess
argument_list|(
operator|new
name|CastExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|".ComparatorHolder"
argument_list|)
argument_list|,
name|accumulator
argument_list|)
argument_list|,
literal|"value"
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"bad kind: "
operator|+
name|agg
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Expression
name|implementStart
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|,
name|JavaRel
name|rel
parameter_list|,
name|AggregateCall
name|call
parameter_list|)
block|{
name|SqlMinMaxAggFunction
name|agg
init|=
operator|(
name|SqlMinMaxAggFunction
operator|)
name|call
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|agg
operator|.
name|getMinMaxKind
argument_list|()
condition|)
block|{
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_PRIMITIVE
case|:
comment|// "new Holder.int_Holder(Integer.MAX_VALUE)" if
comment|// the type is "int" and the function is "min"
return|return
operator|new
name|AllocationExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
name|holderClassName
operator|+
literal|"."
operator|+
name|agg
operator|.
name|argTypes
index|[
literal|0
index|]
operator|+
literal|"_Holder"
argument_list|)
argument_list|,
operator|new
name|ExpressionList
argument_list|(
operator|new
name|FieldAccess
argument_list|(
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|OJUtil
operator|.
name|typeToOJClass
argument_list|(
name|agg
operator|.
name|argTypes
index|[
literal|0
index|]
argument_list|,
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
operator|.
name|primitiveWrapper
argument_list|()
argument_list|)
argument_list|,
name|agg
operator|.
name|isMin
argument_list|()
condition|?
literal|"MAX_VALUE"
else|:
literal|"MIN_VALUE"
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_COMPARABLE
case|:
comment|// "null"
return|return
name|Literal
operator|.
name|constantNull
argument_list|()
return|;
case|case
name|SqlMinMaxAggFunction
operator|.
name|MINMAX_COMPARATOR
case|:
comment|// "new saffron.runtime.ComparatorAndObject(comparator, null)"
name|Expression
name|arg
init|=
name|implementor
operator|.
name|translateInputField
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|,
name|call
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|AllocationExpression
argument_list|(
operator|new
name|TypeName
argument_list|(
literal|"saffron.runtime.ComparatorAndObject"
argument_list|)
argument_list|,
operator|new
name|ExpressionList
argument_list|(
name|arg
argument_list|,
name|Literal
operator|.
name|constantNull
argument_list|()
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"bad kind: "
operator|+
name|agg
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End OJRexImplementorTableImpl.java
end_comment

end_unit

