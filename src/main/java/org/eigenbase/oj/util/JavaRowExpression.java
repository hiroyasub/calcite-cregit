begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|util
package|;
end_package

begin_import
import|import
name|openjava
operator|.
name|mop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A row expression which is implemented by an underlying Java expression.  *  *<p>This is a leaf node of a {@link RexNode} tree, but the Java expression,  * represented by a {@link Expression} object, may be complex.</p>  *  * @author jhyde  * @version $Id$  * @see JavaRexBuilder  * @since Nov 23, 2003  */
end_comment

begin_class
specifier|public
class|class
name|JavaRowExpression
extends|extends
name|RexNode
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|final
name|Environment
name|env
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|type
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|JavaRowExpression
parameter_list|(
name|Environment
name|env
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|digest
operator|=
literal|"Java("
operator|+
name|expression
operator|+
literal|")"
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|boolean
name|isAlwaysTrue
parameter_list|()
block|{
return|return
name|expression
operator|==
name|Literal
operator|.
name|constantTrue
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|accept
parameter_list|(
name|RexVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visitor
operator|instanceof
name|RexShuttle
condition|)
block|{
return|return
operator|(
name|R
operator|)
name|this
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|JavaRowExpression
name|clone
parameter_list|()
block|{
return|return
operator|new
name|JavaRowExpression
argument_list|(
name|env
argument_list|,
name|type
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End JavaRowExpression.java
end_comment

end_unit

