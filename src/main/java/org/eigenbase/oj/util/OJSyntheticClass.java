begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|mop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * An<code>OJSyntheticClass</code> is a {@link OJClass class declaration} for  * intermediate results in expressions. It is created implicitly while  * expressions are being compiled.  *  *<p>Two synthetic classes are identical if their attributes are of the same  * number, type, and order.  *  *<p>Synthetic classes are created in two ways: {@link  * OJClassMap#createProject(OJClass, OJClass[], String[])} creates the type of a  * select clause, and {@link OJClassMap#createJoin(OJClass, OJClass[])} creates  * the type of a join. The semantics are slightly different: projection classes  * have field names, but join classes do not; two join classes with the same  * member types are equivalent, but two distinct projection classes may have the  * same set of attributes.  */
end_comment

begin_class
specifier|public
class|class
name|OJSyntheticClass
extends|extends
name|OJClass
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|String
name|JOIN_CLASS_PREFIX
init|=
literal|"Oj_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROJECT_CLASS_PREFIX
init|=
literal|"Ojp_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PREFIX
init|=
literal|"$f"
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/* -- Data Members -- */
name|String
name|description
decl_stmt|;
comment|// for debug
name|OJClass
index|[]
name|classes
decl_stmt|;
name|ClassDeclaration
name|decl
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Called only from {@link OJClassMap} methods.      */
name|OJSyntheticClass
parameter_list|(
name|Environment
name|env
parameter_list|,
name|OJClass
name|declarer
parameter_list|,
name|OJClass
index|[]
name|classes
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|,
name|ClassDeclaration
name|decl
parameter_list|,
name|String
name|description
parameter_list|,
name|boolean
name|defineValueConstructor
parameter_list|)
block|{
name|super
argument_list|(
name|env
argument_list|,
name|declarer
argument_list|,
name|decl
argument_list|)
expr_stmt|;
name|this
operator|.
name|classes
operator|=
name|classes
expr_stmt|;
name|this
operator|.
name|decl
operator|=
name|decl
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
comment|// default constructor
name|ConstructorDeclaration
name|constructor
init|=
operator|new
name|ConstructorDeclaration
argument_list|(
operator|new
name|ModifierList
argument_list|(
name|ModifierList
operator|.
name|PUBLIC
argument_list|)
argument_list|,
name|decl
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|StatementList
argument_list|()
argument_list|)
decl_stmt|;
name|decl
operator|.
name|getBody
argument_list|()
operator|.
name|add
argument_list|(
name|constructor
argument_list|)
expr_stmt|;
comment|// create value constructor (unless it is the same as the default
comment|// constructor, or we've been asked not to)
if|if
condition|(
operator|(
name|classes
operator|.
name|length
operator|>
literal|0
operator|)
operator|&&
name|defineValueConstructor
condition|)
block|{
name|ParameterList
name|parameterList
init|=
operator|new
name|ParameterList
argument_list|()
decl_stmt|;
name|StatementList
name|statementList
init|=
operator|new
name|StatementList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|varName
init|=
name|fieldNames
index|[
name|i
index|]
decl_stmt|;
name|parameterList
operator|.
name|add
argument_list|(
operator|new
name|Parameter
argument_list|(
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|classes
index|[
name|i
index|]
argument_list|)
argument_list|,
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|statementList
operator|.
name|add
argument_list|(
operator|new
name|ExpressionStatement
argument_list|(
operator|new
name|AssignmentExpression
argument_list|(
operator|new
name|FieldAccess
argument_list|(
name|SelfAccess
operator|.
name|makeThis
argument_list|()
argument_list|,
name|varName
argument_list|)
argument_list|,
name|AssignmentExpression
operator|.
name|EQUALS
argument_list|,
operator|new
name|Variable
argument_list|(
name|varName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ConstructorDeclaration
name|constructor2
init|=
operator|new
name|ConstructorDeclaration
argument_list|(
operator|new
name|ModifierList
argument_list|(
name|ModifierList
operator|.
name|PUBLIC
argument_list|)
argument_list|,
name|decl
operator|.
name|getName
argument_list|()
argument_list|,
name|parameterList
argument_list|,
literal|null
argument_list|,
name|statementList
argument_list|)
decl_stmt|;
name|decl
operator|.
name|getBody
argument_list|()
operator|.
name|add
argument_list|(
name|constructor2
argument_list|)
expr_stmt|;
block|}
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/* -- Methods -- */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|description
return|;
block|}
comment|// override Object
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|OJSyntheticClass
operator|)
operator|&&
name|this
operator|.
name|description
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|OJSyntheticClass
operator|)
name|o
operator|)
operator|.
name|description
argument_list|)
return|;
block|}
comment|// override Object
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|HashableArray
operator|.
name|arrayHashCode
argument_list|(
name|classes
argument_list|)
return|;
block|}
comment|/**      * Adds declarations of a set of classes<code>classes</code> as inner      * classes of a class declaration<code>outerClassDecl</code>. Declarations      * which are already present are not added again.      */
specifier|public
specifier|static
name|void
name|addMembers
parameter_list|(
name|ClassDeclaration
name|outerClassDecl
parameter_list|,
name|OJClass
index|[]
name|classes
parameter_list|)
block|{
name|MemberDeclarationList
name|memberDecls
init|=
name|outerClassDecl
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|outer
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|classes
index|[
name|i
index|]
operator|instanceof
name|OJSyntheticClass
condition|)
block|{
name|ClassDeclaration
name|innerClassDecl
init|=
operator|(
operator|(
name|OJSyntheticClass
operator|)
name|classes
index|[
name|i
index|]
operator|)
operator|.
name|decl
decl_stmt|;
for|for
control|(
name|Enumeration
name|existingDecls
init|=
name|memberDecls
operator|.
name|elements
argument_list|()
init|;
name|existingDecls
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|existingDecls
operator|.
name|nextElement
argument_list|()
operator|==
name|innerClassDecl
condition|)
block|{
continue|continue
name|outer
continue|;
block|}
block|}
name|memberDecls
operator|.
name|add
argument_list|(
name|innerClassDecl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates a method in a class.      */
specifier|public
specifier|static
name|void
name|addMethod
parameter_list|(
name|ClassDeclaration
name|classDecl
parameter_list|,
name|StatementList
name|statementList
parameter_list|,
name|String
name|name
parameter_list|,
name|String
index|[]
name|parameterNames
parameter_list|,
name|OJClass
index|[]
name|parameterTypes
parameter_list|,
name|OJClass
name|returnType
parameter_list|)
block|{
name|ParameterList
name|parameterList
init|=
operator|new
name|ParameterList
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterNames
operator|.
name|length
operator|!=
name|parameterTypes
operator|.
name|length
condition|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"must have same number& type of parameters"
argument_list|)
throw|;
block|}
name|ModifierList
name|modifierList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parameterList
operator|.
name|add
argument_list|(
operator|new
name|Parameter
argument_list|(
operator|new
name|ModifierList
argument_list|()
argument_list|,
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|parameterTypes
index|[
name|i
index|]
argument_list|)
argument_list|,
name|parameterNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MethodDeclaration
name|methodDecl
init|=
operator|new
name|MethodDeclaration
argument_list|(
operator|new
name|ModifierList
argument_list|(
name|ModifierList
operator|.
name|STATIC
operator||
name|ModifierList
operator|.
name|PUBLIC
argument_list|)
argument_list|,
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|returnType
argument_list|)
argument_list|,
name|name
argument_list|,
name|parameterList
argument_list|,
operator|new
name|TypeName
index|[]
block|{
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|OJUtil
operator|.
name|clazzSQLException
argument_list|)
block|}
argument_list|,
name|statementList
argument_list|)
decl_stmt|;
name|MethodDeclaration
name|oldMethodDecl
init|=
literal|null
decl_stmt|;
name|MemberDeclarationList
name|body
init|=
name|classDecl
operator|.
name|getBody
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|count
init|=
name|body
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|MemberDeclaration
name|memberDecl
init|=
name|body
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|memberDecl
operator|instanceof
name|MethodDeclaration
condition|)
block|{
name|MethodDeclaration
name|existingMethodDecl
init|=
operator|(
name|MethodDeclaration
operator|)
name|memberDecl
decl_stmt|;
if|if
condition|(
name|existingMethodDecl
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|existingMethodDecl
operator|.
name|getParameters
argument_list|()
operator|.
name|equals
argument_list|(
name|parameterList
argument_list|)
condition|)
block|{
name|oldMethodDecl
operator|=
name|existingMethodDecl
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|oldMethodDecl
operator|==
literal|null
condition|)
block|{
name|body
operator|.
name|add
argument_list|(
name|methodDecl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|oldMethodDecl
operator|.
name|replace
argument_list|(
name|methodDecl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseTreeException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"while replacing method "
operator|+
name|oldMethodDecl
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Converts a field name back to an ordinal. For example,<code>      * getOrdinal("$f2")</code> returns 2. If fieldName is not valid, throws an      * error if "fail" is true, otherwise returns -1.      */
specifier|public
specifier|static
name|int
name|getOrdinal
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|.
name|startsWith
argument_list|(
name|FIELD_PREFIX
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|fieldName
operator|.
name|substring
argument_list|(
name|FIELD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// fall through
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"bad field in synthetic class ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|makeField
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|FIELD_PREFIX
operator|+
name|ordinal
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isJoinClass
parameter_list|(
name|OJClass
name|clazz
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// null for the "null class"
return|return
operator|(
name|name
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|name
operator|.
name|indexOf
argument_list|(
name|JOIN_CLASS_PREFIX
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End OJSyntheticClass.java
end_comment

end_unit

