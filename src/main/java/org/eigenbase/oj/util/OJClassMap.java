begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|mop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * An<code>OJClassMap</code> is ...  *  * @author jhyde  * @version $Id$  * @since Jun 5, 2002  */
end_comment

begin_class
specifier|public
class|class
name|OJClassMap
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|Logger
name|tracer
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|OJClassMap
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|// REVIEW jvs 21-Jun-2003:  change to HashMap?  This shouldn't be accessed
comment|// from unsynchronized code.  Same for Vector later on.
comment|/**      * Map a {@link HashableArray} (which is just a wrapper around an array of      * classes and names to the {@link OJSyntheticClass} which implements that      * array of types.      */
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|OJSyntheticClass
argument_list|>
name|mapKey2SyntheticClass
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|OJSyntheticClass
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Class from which synthetic classes should be subclassed.      */
specifier|private
name|Class
name|syntheticSuperClass
decl_stmt|;
comment|// NOTE jvs 29-Sept-2004:  I made the id generator non-static because
comment|// for inner classes there's no need to worry about conflicts between
comment|// multiple threads.  Previously, this variable was static, but without
comment|// proper synchronization.
comment|/**      * Sequence generator for generated class names.      */
specifier|private
name|int
name|id
decl_stmt|;
comment|/**      * Do generated classes need value constructors? This can blow the Java      * virtual machine's limit on number of parameters per method, and in      * Farrago we don't actually use anything but the default constructor.      */
specifier|private
specifier|final
name|boolean
name|defineValueConstructors
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|OJClassMap
parameter_list|(
name|Class
argument_list|<
name|SyntheticObject
argument_list|>
name|syntheticSuperClass
parameter_list|)
block|{
name|this
argument_list|(
name|syntheticSuperClass
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OJClassMap
parameter_list|(
name|Class
name|syntheticSuperClass
parameter_list|,
name|boolean
name|defineValueConstructors
parameter_list|)
block|{
name|this
operator|.
name|syntheticSuperClass
operator|=
name|syntheticSuperClass
expr_stmt|;
name|this
operator|.
name|defineValueConstructors
operator|=
name|defineValueConstructors
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Creates a<code>OJSyntheticClass</code> with named fields. We don't check      * whether there is an equivalent class -- all classes with named fields are      * different.      */
specifier|public
name|OJClass
name|createProject
parameter_list|(
name|OJClass
name|declarer
parameter_list|,
name|OJClass
index|[]
name|classes
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|)
block|{
name|boolean
name|isJoin
init|=
literal|false
decl_stmt|;
return|return
name|create
argument_list|(
name|declarer
argument_list|,
name|classes
argument_list|,
name|fieldNames
argument_list|,
name|isJoin
argument_list|)
return|;
block|}
specifier|private
name|OJClass
name|create
parameter_list|(
name|OJClass
name|declarer
parameter_list|,
name|OJClass
index|[]
name|classes
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|,
name|boolean
name|isJoin
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|==
literal|null
condition|)
block|{
name|fieldNames
operator|=
operator|new
name|String
index|[
name|classes
operator|.
name|length
index|]
expr_stmt|;
block|}
assert|assert
name|classes
operator|.
name|length
operator|==
name|fieldNames
operator|.
name|length
operator|:
literal|"OJSyntheticClass.create: "
operator|+
literal|"mismatch between classes and field names"
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fieldNames
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|fieldNames
index|[
name|i
index|]
operator|=
name|OJSyntheticClass
operator|.
name|makeField
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make description
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|classes
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isJoin
condition|)
block|{
assert|assert
operator|!
name|OJSyntheticClass
operator|.
name|isJoinClass
argument_list|(
name|classes
index|[
name|i
index|]
argument_list|)
operator|:
literal|"join classes cannot contain join classes"
assert|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|String
name|description
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// is there already an equivalent OJSyntheticClass?
name|OJSyntheticClass
name|clazz
init|=
name|mapKey2SyntheticClass
operator|.
name|get
argument_list|(
name|description
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|Environment
name|env
init|=
name|declarer
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|String
name|className
init|=
operator|(
name|isJoin
condition|?
name|OJSyntheticClass
operator|.
name|JOIN_CLASS_PREFIX
else|:
name|OJSyntheticClass
operator|.
name|PROJECT_CLASS_PREFIX
operator|)
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|id
operator|++
argument_list|)
decl_stmt|;
name|ClassDeclaration
name|decl
init|=
name|makeDeclaration
argument_list|(
name|className
argument_list|,
name|classes
argument_list|,
name|fieldNames
argument_list|)
decl_stmt|;
name|clazz
operator|=
operator|new
name|OJSyntheticClass
argument_list|(
name|env
argument_list|,
name|declarer
argument_list|,
name|classes
argument_list|,
name|fieldNames
argument_list|,
name|decl
argument_list|,
name|description
argument_list|,
name|defineValueConstructors
argument_list|)
expr_stmt|;
comment|// register ourself
try|try
block|{
name|declarer
operator|.
name|addClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|openjava
operator|.
name|mop
operator|.
name|CannotAlterException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"holder class must be OJClassSourceCode"
argument_list|)
throw|;
block|}
name|OJUtil
operator|.
name|recordMemberClass
argument_list|(
name|env
argument_list|,
name|declarer
operator|.
name|getName
argument_list|()
argument_list|,
name|decl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|OJUtil
operator|.
name|getGlobalEnvironment
argument_list|(
name|env
argument_list|)
operator|.
name|record
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|fine
argument_list|(
literal|"created OJSyntheticClass: name="
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|", description="
operator|+
name|description
argument_list|)
expr_stmt|;
name|mapKey2SyntheticClass
operator|.
name|put
argument_list|(
name|description
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
specifier|private
name|ClassDeclaration
name|makeDeclaration
parameter_list|(
name|String
name|className
parameter_list|,
name|OJClass
index|[]
name|classes
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|)
block|{
name|MemberDeclarationList
name|fieldList
init|=
operator|new
name|MemberDeclarationList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FieldDeclaration
name|field
init|=
operator|new
name|FieldDeclaration
argument_list|(
operator|new
name|ModifierList
argument_list|(
name|ModifierList
operator|.
name|PUBLIC
argument_list|)
argument_list|,
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|classes
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fieldNames
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fieldList
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|ModifierList
name|modifierList
init|=
operator|new
name|ModifierList
argument_list|(
name|ModifierList
operator|.
name|PUBLIC
operator||
name|ModifierList
operator|.
name|STATIC
argument_list|)
decl_stmt|;
name|ClassDeclaration
name|classDecl
init|=
operator|new
name|ClassDeclaration
argument_list|(
name|modifierList
argument_list|,
name|className
argument_list|,
operator|new
name|TypeName
index|[]
block|{
name|OJUtil
operator|.
name|typeNameForClass
argument_list|(
name|syntheticSuperClass
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
name|fieldList
argument_list|)
decl_stmt|;
return|return
name|classDecl
return|;
block|}
comment|/**      * Creates a<code>OJSyntheticClass</code>, or if there is already one with      * the same number and type of fields, returns that.      */
specifier|public
name|OJClass
name|createJoin
parameter_list|(
name|OJClass
name|declarer
parameter_list|,
name|OJClass
index|[]
name|classes
parameter_list|)
block|{
if|if
condition|(
name|classes
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// don't make a singleton OJSyntheticClass, just return the atomic
comment|// class
return|return
name|classes
index|[
literal|0
index|]
return|;
block|}
name|boolean
name|isJoin
init|=
literal|true
decl_stmt|;
return|return
name|create
argument_list|(
name|declarer
argument_list|,
name|classes
argument_list|,
literal|null
argument_list|,
name|isJoin
argument_list|)
return|;
block|}
comment|/**      *<p>Makes the type of a join. There are two kinds of classes. A<dfn>real      * class</dfn> exists in the developer's environment. A<dfn>synthetic      * class</dfn> is constructed by the system to describe the intermediate and      * final results of a query. We are at liberty to modify synthetic      * classes.</p>      *      *<p>If we join class C1 to class C2, the result is a synthetic class:      *      *<pre>      * class SC1 {      *     C1 $f0;      *     C2 $f1;      * }      *</pre>      *      * Suppose that we now join class C3 to this; you would expect the result      * type to be a new synthetic class:      *      *<pre>      * class SC2 {      *     class SC1 {      *         C1 $f0;      *         C2 $f1;      *     } $f0;      *     class C3 $f1;      * }      *</pre>      *      * Now imagine the type resulting from a 6-way join. It will be very      * difficult to unpick the nesting in order to reference fields or to      * permute the join order. Therefore when one or both of the inputs to a      * join are synthetic, we break them apart and re-construct them. Type of      * synthetic class SC1 joined to class C3 above is      *      *<pre>      * class SC3 {      *     C1 $f0;      *     C2 $f1;      *     C3 $f2;      * }      *</pre>      *      *<p>There are also<dfn>row classes</dfn>, which are synthetic classes      * arising from projections. The type of      *      *<pre>select from (select deptno from dept)      *   join emp      *   join (select loc.nation, loc.zipcode from loc)</pre>      *      * is      *      *<pre>      * class SC {      *     int $f0;      *     Emp $f1;      *     class RC {      *         String nation;      *         int zipcode;      *     } $f2;      * }      *</pre>      *      *<p>This deals with nesting; we still need to deal with the field      * permutations which occur when we re-order joins. A permutation operator      * moves fields back to their original positions, so that join transforms      * preserve type.</p>      */
specifier|public
name|OJClass
name|makeJoinType
parameter_list|(
name|OJClass
name|declarer
parameter_list|,
name|OJClass
name|left
parameter_list|,
name|OJClass
name|right
parameter_list|)
block|{
name|Vector
argument_list|<
name|OJClass
argument_list|>
name|classesVector
init|=
operator|new
name|Vector
argument_list|<
name|OJClass
argument_list|>
argument_list|()
decl_stmt|;
name|addAtomicClasses
argument_list|(
name|classesVector
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|addAtomicClasses
argument_list|(
name|classesVector
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|OJClass
index|[]
name|classes
init|=
operator|new
name|OJClass
index|[
name|classesVector
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|classesVector
operator|.
name|copyInto
argument_list|(
name|classes
argument_list|)
expr_stmt|;
return|return
name|createJoin
argument_list|(
name|declarer
argument_list|,
name|classes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|addAtomicClasses
parameter_list|(
name|Vector
argument_list|<
name|OJClass
argument_list|>
name|classesVector
parameter_list|,
name|OJClass
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|OJSyntheticClass
operator|.
name|isJoinClass
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|OJClass
index|[]
name|classes
init|=
operator|(
operator|(
name|OJSyntheticClass
operator|)
name|clazz
operator|)
operator|.
name|classes
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addAtomicClasses
argument_list|(
name|classesVector
argument_list|,
name|classes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|classesVector
operator|.
name|addElement
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End OJClassMap.java
end_comment

end_unit

