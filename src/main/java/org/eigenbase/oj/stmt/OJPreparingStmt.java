begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|stmt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|mop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|javac
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|trace
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Abstract base for classes that implement  * the process of preparing and executing SQL expressions by generating OpenJava  * code.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|OJPreparingStmt
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|String
name|connectionVariable
init|=
literal|"connection"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|tracer
init|=
name|EigenbaseTrace
operator|.
name|getStatementTracer
argument_list|()
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
name|String
name|queryString
init|=
literal|null
decl_stmt|;
specifier|protected
name|Environment
name|env
decl_stmt|;
comment|/**      * CallingConvention via which results should be returned by execution.      */
specifier|private
name|CallingConvention
name|resultCallingConvention
decl_stmt|;
specifier|protected
name|JavaCompiler
name|javaCompiler
decl_stmt|;
specifier|protected
specifier|final
name|CatalogReader
name|catalogReader
decl_stmt|;
specifier|protected
name|EigenbaseTimingTracer
name|timingTracer
decl_stmt|;
comment|/**      * True if the statement contains java RelNodes      */
specifier|protected
name|boolean
name|containsJava
decl_stmt|;
specifier|protected
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldOrigins
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a statement.      *      * @param catalogReader Catalog reader      */
specifier|public
name|OJPreparingStmt
parameter_list|(
name|CatalogReader
name|catalogReader
parameter_list|)
block|{
name|this
operator|.
name|catalogReader
operator|=
name|catalogReader
expr_stmt|;
name|this
operator|.
name|resultCallingConvention
operator|=
name|CallingConvention
operator|.
name|RESULT_SET
expr_stmt|;
name|this
operator|.
name|containsJava
operator|=
literal|true
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|setResultCallingConvention
parameter_list|(
name|CallingConvention
name|resultCallingConvention
parameter_list|)
block|{
name|this
operator|.
name|resultCallingConvention
operator|=
name|resultCallingConvention
expr_stmt|;
block|}
specifier|protected
name|BoundMethod
name|compileAndBind
parameter_list|(
name|ClassDeclaration
name|decl
parameter_list|,
name|ParseTree
name|parseTree
parameter_list|,
name|Argument
index|[]
name|arguments
parameter_list|)
block|{
name|BoundMethod
name|thunk
init|=
name|compile
argument_list|(
name|decl
argument_list|,
name|env
argument_list|,
name|parseTree
argument_list|,
name|arguments
argument_list|)
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
name|thunk
operator|.
name|parameterNames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thunk
operator|.
name|parameterNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|parameterName
init|=
name|thunk
operator|.
name|parameterNames
index|[
name|i
index|]
decl_stmt|;
name|Argument
name|argument
init|=
name|findArgument
argument_list|(
name|arguments
argument_list|,
name|parameterName
argument_list|)
decl_stmt|;
name|args
index|[
name|i
index|]
operator|=
name|argument
operator|.
name|value
expr_stmt|;
block|}
name|thunk
operator|.
name|args
operator|=
name|args
expr_stmt|;
return|return
name|thunk
return|;
block|}
specifier|private
name|Argument
name|findArgument
parameter_list|(
name|Argument
index|[]
name|arguments
parameter_list|,
name|String
name|parameterName
parameter_list|)
block|{
for|for
control|(
name|Argument
name|argument
range|:
name|arguments
control|)
block|{
if|if
condition|(
name|argument
operator|.
name|name
operator|.
name|equals
argument_list|(
name|parameterName
argument_list|)
condition|)
block|{
return|return
name|argument
return|;
block|}
block|}
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"variable '"
operator|+
name|parameterName
operator|+
literal|"' not found"
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|initSub
parameter_list|()
block|{
block|}
specifier|public
name|ClassDeclaration
name|init
parameter_list|(
name|Argument
index|[]
name|arguments
parameter_list|)
block|{
name|env
operator|=
name|OJSystem
operator|.
name|env
expr_stmt|;
name|String
name|packageName
init|=
name|getTempPackageName
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getTempClassName
argument_list|()
decl_stmt|;
name|env
operator|=
operator|new
name|FileEnvironment
argument_list|(
name|env
argument_list|,
name|packageName
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|ClassDeclaration
name|decl
init|=
operator|new
name|ClassDeclaration
argument_list|(
operator|new
name|ModifierList
argument_list|(
name|ModifierList
operator|.
name|PUBLIC
argument_list|)
argument_list|,
name|className
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|MemberDeclarationList
argument_list|()
argument_list|)
decl_stmt|;
name|OJClass
name|clazz
init|=
operator|new
name|OJClass
argument_list|(
name|env
argument_list|,
literal|null
argument_list|,
name|decl
argument_list|)
decl_stmt|;
name|env
operator|.
name|record
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|env
operator|=
operator|new
name|ClosedEnvironment
argument_list|(
name|clazz
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|initSub
argument_list|()
expr_stmt|;
name|OJUtil
operator|.
name|threadDeclarers
operator|.
name|set
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Argument
name|argument
range|:
name|arguments
control|)
block|{
comment|// If the argument's type is a private class, change its
comment|// type to the nearest base class which is public. Otherwise
comment|// the generated code won't compile.
name|argument
operator|.
name|clazz
operator|=
name|visibleBaseClass
argument_list|(
name|argument
operator|.
name|clazz
argument_list|,
name|packageName
argument_list|)
expr_stmt|;
name|bindArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
return|return
name|decl
return|;
block|}
specifier|protected
name|void
name|bindArgument
parameter_list|(
name|Argument
name|arg
parameter_list|)
block|{
name|env
operator|.
name|bindVariable
argument_list|(
name|arg
operator|.
name|getName
argument_list|()
argument_list|,
name|arg
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PreparedResult
name|prepareSql
parameter_list|(
name|SqlNode
name|sqlQuery
parameter_list|,
name|Class
name|runtimeContextClass
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|boolean
name|needsValidation
parameter_list|)
block|{
return|return
name|prepareSql
argument_list|(
name|sqlQuery
argument_list|,
name|sqlQuery
argument_list|,
name|runtimeContextClass
argument_list|,
name|validator
argument_list|,
name|needsValidation
argument_list|)
return|;
block|}
comment|/**      * Prepares a statement for execution, starting from a parse tree and using      * a user-supplied validator.      */
specifier|public
name|PreparedResult
name|prepareSql
parameter_list|(
name|SqlNode
name|sqlQuery
parameter_list|,
name|SqlNode
name|sqlNodeOriginal
parameter_list|,
name|Class
name|runtimeContextClass
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|boolean
name|needsValidation
parameter_list|)
block|{
name|queryString
operator|=
name|sqlQuery
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|Argument
index|[]
name|arguments
init|=
block|{
operator|new
name|Argument
argument_list|(
name|connectionVariable
argument_list|,
name|runtimeContextClass
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
name|ClassDeclaration
name|decl
init|=
name|init
argument_list|(
name|arguments
argument_list|)
decl_stmt|;
name|SqlToRelConverter
name|sqlToRelConverter
init|=
name|getSqlToRelConverter
argument_list|(
name|validator
argument_list|,
name|catalogReader
argument_list|)
decl_stmt|;
name|SqlExplain
name|sqlExplain
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sqlQuery
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EXPLAIN
condition|)
block|{
comment|// dig out the underlying SQL statement
name|sqlExplain
operator|=
operator|(
name|SqlExplain
operator|)
name|sqlQuery
expr_stmt|;
name|sqlQuery
operator|=
name|sqlExplain
operator|.
name|getExplicandum
argument_list|()
expr_stmt|;
name|sqlToRelConverter
operator|.
name|setIsExplain
argument_list|(
name|sqlExplain
operator|.
name|getDynamicParamCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RelNode
name|rootRel
init|=
name|sqlToRelConverter
operator|.
name|convertQuery
argument_list|(
name|sqlQuery
argument_list|,
name|needsValidation
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end sql2rel"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|resultType
init|=
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|sqlQuery
argument_list|)
decl_stmt|;
name|fieldOrigins
operator|=
name|validator
operator|.
name|getFieldOrigins
argument_list|(
name|sqlQuery
argument_list|)
expr_stmt|;
assert|assert
name|fieldOrigins
operator|.
name|size
argument_list|()
operator|==
name|resultType
operator|.
name|getFieldCount
argument_list|()
assert|;
comment|// Display logical plans before view expansion, plugging in physical
comment|// storage and decorrelation
if|if
condition|(
name|sqlExplain
operator|!=
literal|null
condition|)
block|{
name|SqlExplain
operator|.
name|Depth
name|explainDepth
init|=
name|sqlExplain
operator|.
name|getDepth
argument_list|()
decl_stmt|;
name|boolean
name|explainAsXml
init|=
name|sqlExplain
operator|.
name|isXml
argument_list|()
decl_stmt|;
name|SqlExplainLevel
name|detailLevel
init|=
name|sqlExplain
operator|.
name|getDetailLevel
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|explainDepth
condition|)
block|{
case|case
name|Type
case|:
return|return
operator|new
name|PreparedExplanation
argument_list|(
name|resultType
argument_list|,
literal|null
argument_list|,
name|explainAsXml
argument_list|,
name|detailLevel
argument_list|)
return|;
case|case
name|Logical
case|:
return|return
operator|new
name|PreparedExplanation
argument_list|(
literal|null
argument_list|,
name|rootRel
argument_list|,
name|explainAsXml
argument_list|,
name|detailLevel
argument_list|)
return|;
default|default:
block|}
block|}
comment|// Structured type flattening, view expansion, and plugging in physical
comment|// storage.
name|rootRel
operator|=
name|flattenTypes
argument_list|(
name|rootRel
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Subquery decorrelation.
name|rootRel
operator|=
name|decorrelate
argument_list|(
name|sqlQuery
argument_list|,
name|rootRel
argument_list|)
expr_stmt|;
comment|// Trim unused fields.
name|rootRel
operator|=
name|trimUnusedFields
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
comment|// Display physical plan after decorrelation.
if|if
condition|(
name|sqlExplain
operator|!=
literal|null
condition|)
block|{
name|SqlExplain
operator|.
name|Depth
name|explainDepth
init|=
name|sqlExplain
operator|.
name|getDepth
argument_list|()
decl_stmt|;
name|boolean
name|explainAsXml
init|=
name|sqlExplain
operator|.
name|isXml
argument_list|()
decl_stmt|;
name|SqlExplainLevel
name|detailLevel
init|=
name|sqlExplain
operator|.
name|getDetailLevel
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|explainDepth
condition|)
block|{
case|case
name|Physical
case|:
default|default:
name|rootRel
operator|=
name|optimize
argument_list|(
name|rootRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|rootRel
argument_list|)
expr_stmt|;
return|return
operator|new
name|PreparedExplanation
argument_list|(
literal|null
argument_list|,
name|rootRel
argument_list|,
name|explainAsXml
argument_list|,
name|detailLevel
argument_list|)
return|;
block|}
block|}
name|rootRel
operator|=
name|optimize
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|)
expr_stmt|;
name|containsJava
operator|=
name|treeContainsJava
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end optimization"
argument_list|)
expr_stmt|;
block|}
comment|// For transformation from DML -> DML, use result of rewrite
comment|// (e.g. UPDATE -> MERGE).  For anything else (e.g. CALL -> SELECT),
comment|// use original kind.
name|SqlKind
name|kind
init|=
name|sqlQuery
operator|.
name|getKind
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|kind
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|DML
argument_list|)
condition|)
block|{
name|kind
operator|=
name|sqlNodeOriginal
operator|.
name|getKind
argument_list|()
expr_stmt|;
block|}
return|return
name|implement
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|,
name|kind
argument_list|,
name|decl
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|/**      * Optimizes a query plan.      *      * @param logicalRowType logical row type of relational expression (before      * struct fields are flattened, or field names are renamed for uniqueness)      * @param rootRel root of a relational expression      *      * @return an equivalent optimized relational expression      */
specifier|protected
name|RelNode
name|optimize
parameter_list|(
name|RelDataType
name|logicalRowType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|)
block|{
specifier|final
name|RelOptPlanner
name|planner
init|=
name|rootRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
decl_stmt|;
comment|// Allow each rel to register its own rules.
name|RelVisitor
name|visitor
init|=
operator|new
name|RelVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
name|planner
operator|.
name|registerClass
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|,
name|ordinal
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|visitor
operator|.
name|go
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
name|RelTraitSet
name|desiredTraits
init|=
name|getDesiredRootTraitSet
argument_list|(
name|rootRel
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rootRel2
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|rootRel
argument_list|,
name|desiredTraits
argument_list|)
decl_stmt|;
assert|assert
name|rootRel2
operator|!=
literal|null
assert|;
name|planner
operator|.
name|setRoot
argument_list|(
name|rootRel2
argument_list|)
expr_stmt|;
specifier|final
name|RelOptPlanner
name|planner2
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|rootRel3
init|=
name|planner2
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
assert|assert
name|rootRel3
operator|!=
literal|null
operator|:
literal|"could not implement exp"
assert|;
return|return
name|rootRel3
return|;
block|}
specifier|protected
name|RelTraitSet
name|getDesiredRootTraitSet
parameter_list|(
name|RelNode
name|rootRel
parameter_list|)
block|{
comment|// Make sure non-CallingConvention traits, if any, are preserved
return|return
name|rootRel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|resultCallingConvention
argument_list|)
return|;
block|}
comment|/**      * Determines if the RelNode tree contains Java RelNodes. Also, if the row      * contains an interval type, then effectively, the tree is treated as      * containing Java, since we currently cannot read raw interval columns.      *      * @param rootRel root of the RelNode tree      *      * @return true if the tree contains Java RelNodes or returns an interval      * type      */
specifier|protected
name|boolean
name|treeContainsJava
parameter_list|(
name|RelNode
name|rootRel
parameter_list|)
block|{
name|JavaRelFinder
name|javaFinder
init|=
operator|new
name|JavaRelFinder
argument_list|()
decl_stmt|;
name|javaFinder
operator|.
name|go
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
if|if
condition|(
name|javaFinder
operator|.
name|containsJavaRel
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|RelDataTypeField
index|[]
name|fields
init|=
name|rootRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isInterval
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|halfImplement
parameter_list|(
name|RelNode
name|rootRel
parameter_list|,
name|ClassDeclaration
name|decl
parameter_list|)
block|{
name|Class
name|runtimeContextClass
init|=
literal|null
decl_stmt|;
specifier|final
name|Argument
index|[]
name|arguments
init|=
block|{
operator|new
name|Argument
argument_list|(
name|connectionVariable
argument_list|,
name|runtimeContextClass
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
assert|assert
name|containsJava
assert|;
name|javaCompiler
operator|=
name|createCompiler
argument_list|()
expr_stmt|;
name|JavaRelImplementor
name|relImplementor
init|=
operator|(
name|JavaRelImplementor
operator|)
name|getRelImplementor
argument_list|(
name|rootRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|Expression
name|expr
init|=
name|relImplementor
operator|.
name|implementRoot
argument_list|(
operator|(
name|JavaRel
operator|)
name|rootRel
argument_list|)
decl_stmt|;
name|BoundMethod
name|boundMethod
decl_stmt|;
name|boundMethod
operator|=
name|compileAndBind
argument_list|(
name|decl
argument_list|,
name|expr
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|boundMethod
argument_list|)
expr_stmt|;
block|}
comment|/**      * Implements a physical query plan.      *      * @param rowType original rowtype returned by query validator      * @param rootRel root of the relational expression.      * @param sqlKind SqlKind of the original statement.      * @param decl ClassDeclaration of the generated result.      * @param args argument list of the generated result.      * @return an executable plan, a {@link PreparedExecution}.      */
specifier|protected
name|PreparedExecution
name|implement
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|SqlKind
name|sqlKind
parameter_list|,
name|ClassDeclaration
name|decl
parameter_list|,
name|Argument
index|[]
name|args
parameter_list|)
block|{
name|BoundMethod
name|boundMethod
decl_stmt|;
name|ParseTree
name|parseTree
decl_stmt|;
name|RelDataType
name|resultType
init|=
name|rootRel
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|boolean
name|isDml
init|=
name|sqlKind
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|DML
argument_list|)
decl_stmt|;
if|if
condition|(
name|containsJava
condition|)
block|{
name|javaCompiler
operator|=
name|createCompiler
argument_list|()
expr_stmt|;
name|JavaRelImplementor
name|relImplementor
init|=
operator|(
name|JavaRelImplementor
operator|)
name|getRelImplementor
argument_list|(
name|rootRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|Expression
name|expr
init|=
name|relImplementor
operator|.
name|implementRoot
argument_list|(
operator|(
name|JavaRel
operator|)
name|rootRel
argument_list|)
decl_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end codegen"
argument_list|)
expr_stmt|;
block|}
name|parseTree
operator|=
name|expr
expr_stmt|;
name|boundMethod
operator|=
name|compileAndBind
argument_list|(
name|decl
argument_list|,
name|parseTree
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end compilation"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boundMethod
operator|=
literal|null
expr_stmt|;
name|parseTree
operator|=
literal|null
expr_stmt|;
comment|// Need to create a new result rowtype where the field names of
comment|// the row originate from the original projection list. E.g,
comment|// if you have a query like:
comment|//      select col1 as x, col2 as x from tab;
comment|// the field names of the resulting tuples should be "x" and "x",
comment|// rather than "x" and "x0".
comment|//
comment|// This only needs to be done for non-DML statements.  For DML, the
comment|// resultant row is a single rowcount column, so we don't want to
comment|// change the field name in those cases.
if|if
condition|(
operator|!
name|isDml
condition|)
block|{
assert|assert
operator|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
operator|==
name|resultType
operator|.
name|getFieldCount
argument_list|()
operator|)
assert|;
name|String
index|[]
name|fieldNames
init|=
name|RelOptUtil
operator|.
name|getFieldNames
argument_list|(
name|rowType
argument_list|)
decl_stmt|;
name|RelDataType
index|[]
name|types
init|=
name|RelOptUtil
operator|.
name|getFieldTypes
argument_list|(
name|resultType
argument_list|)
decl_stmt|;
name|resultType
operator|=
name|rootRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|types
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
block|}
comment|// strip off the topmost, special converter RelNode, now that we no
comment|// longer need it
name|rootRel
operator|=
name|rootRel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PreparedExecution
name|plan
init|=
operator|new
name|PreparedExecution
argument_list|(
name|parseTree
argument_list|,
name|rootRel
argument_list|,
name|resultType
argument_list|,
name|isDml
argument_list|,
name|mapTableModOp
argument_list|(
name|isDml
argument_list|,
name|sqlKind
argument_list|)
argument_list|,
name|boundMethod
argument_list|,
name|fieldOrigins
argument_list|)
decl_stmt|;
return|return
name|plan
return|;
block|}
specifier|protected
name|TableModificationRel
operator|.
name|Operation
name|mapTableModOp
parameter_list|(
name|boolean
name|isDml
parameter_list|,
name|SqlKind
name|sqlKind
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDml
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|sqlKind
condition|)
block|{
case|case
name|INSERT
case|:
return|return
name|TableModificationRel
operator|.
name|Operation
operator|.
name|INSERT
return|;
case|case
name|DELETE
case|:
return|return
name|TableModificationRel
operator|.
name|Operation
operator|.
name|DELETE
return|;
case|case
name|MERGE
case|:
return|return
name|TableModificationRel
operator|.
name|Operation
operator|.
name|MERGE
return|;
case|case
name|UPDATE
case|:
return|return
name|TableModificationRel
operator|.
name|Operation
operator|.
name|UPDATE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Prepares a statement for execution, starting from a relational expression      * (ie a logical or a physical query plan).      *      * @param rowType Row type      * @param rootRel root of the relational expression.      * @param sqlKind SqlKind for the relational expression: only      * SqlKind.Explain and SqlKind.Dml are special cases.      * @param needOpt true for a logical query plan (still needs to be      * optimized), false for a physical plan.      * @param decl openjava ClassDeclaration for the code generated to implement      * the statement.      * @param args openjava argument list for the generated code.      */
specifier|public
name|PreparedResult
name|prepareSql
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|SqlKind
name|sqlKind
parameter_list|,
name|boolean
name|needOpt
parameter_list|,
name|ClassDeclaration
name|decl
parameter_list|,
name|Argument
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|needOpt
condition|)
block|{
name|rootRel
operator|=
name|flattenTypes
argument_list|(
name|rootRel
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rootRel
operator|=
name|optimize
argument_list|(
name|rootRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|rootRel
argument_list|)
expr_stmt|;
block|}
return|return
name|implement
argument_list|(
name|rowType
argument_list|,
name|rootRel
argument_list|,
name|sqlKind
argument_list|,
name|decl
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**      * Protected method to allow subclasses to override construction of      * SqlToRelConverter.      */
specifier|protected
specifier|abstract
name|SqlToRelConverter
name|getSqlToRelConverter
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|CatalogReader
name|catalogReader
parameter_list|)
function_decl|;
comment|/**      * Protected method to allow subclasses to override construction of      * RelImplementor.      */
specifier|protected
specifier|abstract
name|RelImplementor
name|getRelImplementor
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getClassRoot
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getCompilerClassName
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getJavaRoot
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getTempPackageName
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getTempMethodName
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getTempClassName
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|shouldAlwaysWriteJavaFile
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|shouldSetConnectionInfo
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|RelNode
name|flattenTypes
parameter_list|(
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|restructure
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|RelNode
name|decorrelate
parameter_list|(
name|SqlNode
name|query
parameter_list|,
name|RelNode
name|rootRel
parameter_list|)
function_decl|;
comment|/**      * Walks over a tree of relational expressions, replacing each      * {@link RelNode} with a 'slimmed down' relational expression that projects      * only the columns required by its consumer.      *      * @param rootRel Relational expression that is at the root of the tree      * @return Trimmed relational expression      */
specifier|protected
specifier|abstract
name|RelNode
name|trimUnusedFields
parameter_list|(
name|RelNode
name|rootRel
parameter_list|)
function_decl|;
specifier|protected
name|JavaCompiler
name|createCompiler
parameter_list|()
block|{
name|String
name|compilerClassName
init|=
name|getCompilerClassName
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
name|compilerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|compilerClassName
argument_list|)
decl_stmt|;
return|return
operator|(
name|JavaCompiler
operator|)
name|compilerClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"while instantiating compiler"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"while instantiating compiler"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"while instantiating compiler"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"while instantiating compiler"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the lowest ancestor of<code>clazz</code> which is visible from      *<code>fromPackage</code>&#46;<code>fromClazz</code>.      */
specifier|private
specifier|static
name|Class
name|visibleBaseClass
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|fromPackageName
parameter_list|)
block|{
for|for
control|(
name|Class
name|c
init|=
name|clazz
init|;
name|c
operator|!=
literal|null
condition|;
name|c
operator|=
name|c
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
name|int
name|modifiers
init|=
name|c
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
name|Package
name|pakkage
init|=
name|c
operator|.
name|getPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|pakkage
operator|==
literal|null
condition|)
block|{
name|pakkage
operator|=
name|Object
operator|.
name|class
operator|.
name|getPackage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPrivate
argument_list|(
name|modifiers
argument_list|)
operator|&&
name|pakkage
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromPackageName
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
name|java
operator|.
name|lang
operator|.
name|Object
operator|.
name|class
return|;
block|}
specifier|protected
name|void
name|addDecl
parameter_list|(
name|openjava
operator|.
name|ptree
operator|.
name|Statement
name|statement
parameter_list|,
name|ExpressionList
name|exprList
parameter_list|)
block|{
return|return;
block|}
specifier|private
name|BoundMethod
name|compile
parameter_list|(
name|ClassDeclaration
name|decl
parameter_list|,
name|Environment
name|env
parameter_list|,
name|ParseTree
name|parseTree
parameter_list|,
name|Argument
index|[]
name|arguments
parameter_list|)
block|{
if|if
condition|(
name|tracer
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|tracer
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"source "
operator|+
name|parseTree
operator|.
name|toFlattenString
argument_list|()
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"decl "
operator|+
name|decl
operator|.
name|toFlattenString
argument_list|()
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Before compile, parse tree"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parseTree
block|}
argument_list|)
expr_stmt|;
block|}
comment|// NOTE jvs 14-Jan-2004:  DynamicJava doesn't correctly handle
comment|// the FINAL modifier on parameters.  So I made the codegen
comment|// for the method body copy the parameter to a final local
comment|// variable instead.  The only side-effect is that the parameter
comment|// names in the method signature is different.
comment|// TODO jvs 18-Oct-2006:  get rid of this since we tossed DynamicJava
comment|// long ago
comment|// form parameter list
name|String
index|[]
name|parameterNames
init|=
operator|new
name|String
index|[
name|arguments
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|javaParameterNames
init|=
operator|new
name|String
index|[
name|arguments
operator|.
name|length
index|]
decl_stmt|;
name|Class
index|[]
name|parameterTypes
init|=
operator|new
name|Class
index|[
name|arguments
operator|.
name|length
index|]
decl_stmt|;
name|OJClass
index|[]
name|parameterOjTypes
init|=
operator|new
name|OJClass
index|[
name|arguments
operator|.
name|length
index|]
decl_stmt|;
name|ExpressionList
name|returnDeclList
init|=
operator|new
name|ExpressionList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parameterNames
index|[
name|i
index|]
operator|=
name|arguments
index|[
name|i
index|]
operator|.
name|name
expr_stmt|;
name|javaParameterNames
index|[
name|i
index|]
operator|=
name|arguments
index|[
name|i
index|]
operator|.
name|name
operator|+
literal|"_p"
expr_stmt|;
name|parameterTypes
index|[
name|i
index|]
operator|=
name|arguments
index|[
name|i
index|]
operator|.
name|clazz
expr_stmt|;
name|parameterOjTypes
index|[
name|i
index|]
operator|=
name|OJClass
operator|.
name|forClass
argument_list|(
name|arguments
index|[
name|i
index|]
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
comment|// form the body of the method, and figure out the return type
name|OJClass
name|returnType
init|=
name|OJUtil
operator|.
name|clazzVoid
decl_stmt|;
name|StatementList
name|statementList
init|=
operator|new
name|StatementList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|statementList
operator|.
name|add
argument_list|(
operator|new
name|VariableDeclaration
argument_list|(
operator|new
name|ModifierList
argument_list|(
name|ModifierList
operator|.
name|FINAL
argument_list|)
argument_list|,
name|TypeName
operator|.
name|forOJClass
argument_list|(
name|parameterOjTypes
index|[
name|i
index|]
argument_list|)
argument_list|,
name|arguments
index|[
name|i
index|]
operator|.
name|name
argument_list|,
operator|new
name|FieldAccess
argument_list|(
name|javaParameterNames
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parseTree
operator|instanceof
name|Expression
condition|)
block|{
name|Expression
name|expression
init|=
operator|(
name|Expression
operator|)
name|parseTree
decl_stmt|;
name|returnType
operator|=
name|OJUtil
operator|.
name|getType
argument_list|(
name|env
argument_list|,
name|expression
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|returnType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|returnType
operator|=
name|OJUtil
operator|.
name|clazzObject
expr_stmt|;
block|}
name|openjava
operator|.
name|ptree
operator|.
name|Statement
name|statement
decl_stmt|;
if|if
condition|(
name|returnType
operator|==
name|OJSystem
operator|.
name|VOID
condition|)
block|{
name|statement
operator|=
operator|new
name|ExpressionStatement
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|=
operator|new
name|ReturnStatement
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
name|statementList
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|returnDeclList
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|parseTree
operator|instanceof
name|openjava
operator|.
name|ptree
operator|.
name|Statement
condition|)
block|{
name|openjava
operator|.
name|ptree
operator|.
name|Statement
name|statement
init|=
operator|(
name|openjava
operator|.
name|ptree
operator|.
name|Statement
operator|)
name|parseTree
decl_stmt|;
name|statementList
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|addDecl
argument_list|(
name|statement
argument_list|,
name|returnDeclList
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parseTree
operator|instanceof
name|StatementList
condition|)
block|{
name|StatementList
name|newList
init|=
operator|(
name|StatementList
operator|)
name|parseTree
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|count
init|=
name|newList
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|addDecl
argument_list|(
name|newList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|returnDeclList
argument_list|)
expr_stmt|;
block|}
name|statementList
operator|.
name|addAll
argument_list|(
name|newList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"cannot handle a "
operator|+
name|parseTree
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|returnDeclList
operator|!=
literal|null
condition|)
block|{
name|statementList
operator|.
name|add
argument_list|(
operator|new
name|ReturnStatement
argument_list|(
operator|new
name|ArrayAllocationExpression
argument_list|(
name|OJClass
operator|.
name|forClass
argument_list|(
name|VarDecl
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|ExpressionList
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|ArrayInitializer
argument_list|(
name|returnDeclList
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|returnType
operator|=
name|OJClass
operator|.
name|arrayOf
argument_list|(
name|OJClass
operator|.
name|forClass
argument_list|(
name|VarDecl
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OJSyntheticClass
operator|.
name|addMethod
argument_list|(
name|decl
argument_list|,
name|statementList
argument_list|,
name|getTempMethodName
argument_list|()
argument_list|,
name|javaParameterNames
argument_list|,
name|parameterOjTypes
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|String
name|packageName
init|=
name|getTempPackageName
argument_list|()
decl_stmt|;
name|CompilationUnit
name|compUnit
init|=
operator|new
name|CompilationUnit
argument_list|(
name|packageName
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|ClassDeclarationList
argument_list|(
name|decl
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|)
block|{
comment|// use single line comments to avoid issues with */ in literals
name|queryString
operator|=
name|queryString
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\n// "
argument_list|)
expr_stmt|;
comment|// have to escape backslashes, because Java thinks
comment|// backslash-u means Unicode escape (LDB-141)
name|queryString
operator|=
name|queryString
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"\\\\\\\\"
argument_list|)
expr_stmt|;
name|compUnit
operator|.
name|setComment
argument_list|(
literal|"// "
operator|+
name|queryString
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|compUnit
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|decl
operator|.
name|getName
argument_list|()
decl_stmt|;
name|packageName
operator|=
name|compUnit
operator|.
name|getPackage
argument_list|()
expr_stmt|;
comment|// e.g. "abc.def", or null
return|return
name|compile
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|,
name|s
argument_list|,
name|parameterTypes
argument_list|,
name|parameterNames
argument_list|)
return|;
block|}
specifier|private
name|BoundMethod
name|compile
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|s
parameter_list|,
name|Class
index|[]
name|parameterTypes
parameter_list|,
name|String
index|[]
name|parameterNames
parameter_list|)
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|compileClass
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
name|getTempMethodName
argument_list|()
argument_list|,
name|parameterTypes
argument_list|)
decl_stmt|;
return|return
operator|new
name|BoundMethod
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
name|parameterNames
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Compile a single class with the given source in the given package.      *      * @param packageName package name, if null the className must be fully      * qualified      * @param className simple class name unless packageName is null      * @param source source code for the class      *      * @return a Class based on source      */
specifier|protected
name|Class
name|compileClass
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|JavaCompilerArgs
name|args
init|=
name|javaCompiler
operator|.
name|getArgs
argument_list|()
decl_stmt|;
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|initialArgs
init|=
name|SaffronProperties
operator|.
name|instance
argument_list|()
operator|.
name|javaCompilerArgs
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|initialArgs
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|setString
argument_list|(
name|initialArgs
argument_list|)
expr_stmt|;
block|}
name|String
name|fullClassName
decl_stmt|;
if|if
condition|(
name|packageName
operator|==
literal|null
condition|)
block|{
name|fullClassName
operator|=
name|className
expr_stmt|;
block|}
else|else
block|{
name|fullClassName
operator|=
name|packageName
operator|+
literal|"."
operator|+
name|className
expr_stmt|;
block|}
name|String
name|javaFileName
init|=
name|Util
operator|.
name|replace
argument_list|(
name|fullClassName
argument_list|,
literal|"."
argument_list|,
name|Util
operator|.
name|fileSeparator
argument_list|)
operator|+
literal|".java"
decl_stmt|;
name|File
name|javaRoot
init|=
operator|new
name|File
argument_list|(
name|getJavaRoot
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|javaFile
init|=
operator|new
name|File
argument_list|(
name|javaRoot
argument_list|,
name|javaFileName
argument_list|)
decl_stmt|;
name|boolean
name|writeJavaFile
init|=
name|shouldAlwaysWriteJavaFile
argument_list|()
decl_stmt|;
name|javaCompiler
operator|.
name|getArgs
argument_list|()
operator|.
name|setDestdir
argument_list|(
name|javaRoot
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|javaCompiler
operator|.
name|getArgs
argument_list|()
operator|.
name|setFullClassName
argument_list|(
name|fullClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|javaCompiler
operator|.
name|getArgs
argument_list|()
operator|.
name|supportsSetSource
argument_list|()
condition|)
block|{
name|javaCompiler
operator|.
name|getArgs
argument_list|()
operator|.
name|setSource
argument_list|(
name|source
argument_list|,
name|javaFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeJavaFile
operator|=
literal|true
expr_stmt|;
name|args
operator|.
name|addFile
argument_list|(
name|javaFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeJavaFile
condition|)
block|{
try|try
block|{
name|javaFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// make any necessary parent
comment|// directories
specifier|final
name|boolean
name|print
init|=
name|SaffronProperties
operator|.
name|instance
argument_list|()
operator|.
name|printBeforeCompile
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|print
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compiling "
operator|+
name|javaFile
operator|+
literal|", class "
operator|+
name|fullClassName
argument_list|)
expr_stmt|;
block|}
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|javaFile
argument_list|)
decl_stmt|;
name|fw
operator|.
name|write
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e2
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e2
argument_list|,
literal|"while writing java file '"
operator|+
name|javaFile
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
name|EigenbaseTrace
operator|.
name|getDynamicHandler
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|apply
argument_list|(
name|javaFile
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|javaCompiler
operator|.
name|compile
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|fullClassName
argument_list|,
literal|true
argument_list|,
name|javaCompiler
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a relational expression which is to be substituted for an access      * to a SQL view.      *      * @param rowType Row type of the view      * @param queryString Body of the view      *      * @return Relational expression      */
specifier|public
name|RelNode
name|expandView
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|String
name|queryString
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * An<code>Argument</code> supplies a name/value pair to a statement. The      * class of the argument is usually superfluous, but is necessary when the      * value is a primitive type (such as<code>int</code>, as opposed to {@link      * Integer}), or is a superclass of the object's runtime type.      */
specifier|public
specifier|static
class|class
name|Argument
block|{
name|Class
name|clazz
decl_stmt|;
name|Object
name|value
decl_stmt|;
name|String
name|name
decl_stmt|;
comment|/**          * Creates an argument.          */
specifier|public
name|Argument
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**          * Creates an argument whose type is the runtime type of<code>          * value</code>.          */
specifier|public
name|Argument
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|value
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**          * Creates an<code>int</code> argument.          */
specifier|public
name|Argument
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|TYPE
argument_list|,
operator|new
name|Integer
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OJClass
name|getType
parameter_list|()
block|{
return|return
name|OJClass
operator|.
name|forClass
argument_list|(
name|clazz
argument_list|)
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**      * Walks a {@link RelNode} tree and determines if it contains any {@link      * JavaRel}s.      *      * @author Zelaine Fong      */
specifier|public
specifier|static
class|class
name|JavaRelFinder
extends|extends
name|RelVisitor
block|{
specifier|private
name|boolean
name|javaRelFound
decl_stmt|;
specifier|public
name|JavaRelFinder
parameter_list|()
block|{
name|javaRelFound
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|JavaRel
condition|)
block|{
name|javaRelFound
operator|=
literal|true
expr_stmt|;
block|}
name|node
operator|.
name|childrenAccept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsJavaRel
parameter_list|()
block|{
return|return
name|javaRelFound
return|;
block|}
block|}
specifier|public
interface|interface
name|CatalogReader
extends|extends
name|RelOptSchema
extends|,
name|SqlValidatorCatalogReader
block|{
name|PreparingTable
name|getTableForMember
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
function_decl|;
name|PreparingTable
name|getTable
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
function_decl|;
block|}
specifier|public
interface|interface
name|PreparingTable
extends|extends
name|RelOptTable
extends|,
name|SqlValidatorTable
block|{     }
block|}
end_class

begin_comment
comment|// End OJPreparingStmt.java
end_comment

end_unit

