begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|stmt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * PreparedExplanation is a PreparedResult for an EXPLAIN PLAN statement. It's  * always good to have an explanation prepared.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|PreparedExplanation
implements|implements
name|PreparedResult
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
specifier|final
name|RelNode
name|rel
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|asXml
decl_stmt|;
specifier|private
specifier|final
name|SqlExplainLevel
name|detailLevel
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|PreparedExplanation
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|boolean
name|asXml
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|)
block|{
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|rel
operator|=
name|rel
expr_stmt|;
name|this
operator|.
name|asXml
operator|=
name|asXml
expr_stmt|;
name|this
operator|.
name|detailLevel
operator|=
name|detailLevel
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|String
name|getCode
parameter_list|()
block|{
if|if
condition|(
name|rel
operator|==
literal|null
condition|)
block|{
return|return
name|RelOptUtil
operator|.
name|dumpType
argument_list|(
name|rowType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|rel
argument_list|,
name|asXml
argument_list|,
name|detailLevel
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|isDml
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|TableModificationRel
operator|.
name|Operation
name|getTableModOp
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|RelNode
name|getRel
parameter_list|()
block|{
return|return
name|rel
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|()
block|{
specifier|final
name|String
name|explanation
init|=
name|getCode
argument_list|()
decl_stmt|;
return|return
name|executeStatic
argument_list|(
name|explanation
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ResultSet
name|executeStatic
parameter_list|(
specifier|final
name|String
name|explanation
parameter_list|)
block|{
specifier|final
name|LineNumberReader
name|lineReader
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|explanation
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
operator|new
name|Iterator
argument_list|()
block|{
specifier|private
name|String
name|line
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|line
operator|=
name|lineReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
operator|(
name|line
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|nextLine
init|=
name|line
decl_stmt|;
name|line
operator|=
literal|null
expr_stmt|;
return|return
name|nextLine
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
return|return
name|IteratorResultSet
operator|.
name|create
argument_list|(
name|iter
argument_list|,
operator|new
name|IteratorResultSet
operator|.
name|SingletonColumnGetter
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End PreparedExplanation.java
end_comment

end_unit

