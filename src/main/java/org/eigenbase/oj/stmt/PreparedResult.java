begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|stmt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * PreparedResult represents the result of a call to OJPreparingStmt.prepareSql.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_interface
specifier|public
interface|interface
name|PreparedResult
block|{
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * @return the code generated by preparation      */
name|String
name|getCode
parameter_list|()
function_decl|;
comment|/**      * @return true iff this result is for a DML statement, in which case the      * result set is one row with one column containing the number of rows      * affected.      */
name|boolean
name|isDml
parameter_list|()
function_decl|;
comment|/**      * @return the table modification operation corresponding to this statement      * if it is a table modification statement; otherwise null      */
name|TableModificationRel
operator|.
name|Operation
name|getTableModOp
parameter_list|()
function_decl|;
comment|/**      * Returns a list describing, for each result field, the origin of the field      * as a 4-element list of (database, schema, table, column).      */
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getFieldOrigins
parameter_list|()
function_decl|;
comment|/**      * Executes the prepared result.      *      * @return producer of rows resulting from execution      */
name|Object
name|execute
parameter_list|()
function_decl|;
block|}
end_interface

begin_comment
comment|// End PreparedResult.java
end_comment

end_unit

