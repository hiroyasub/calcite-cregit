begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|stmt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * PreparedExecution is a PreparedResult of a statement for which Java code was  * generated by preparation.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|PreparedExecution
implements|implements
name|PreparedResult
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|ParseTree
name|parseTree
decl_stmt|;
specifier|private
specifier|final
name|RelNode
name|rootRel
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDml
decl_stmt|;
specifier|private
specifier|final
name|TableModificationRel
operator|.
name|Operation
name|tableModOp
decl_stmt|;
specifier|private
specifier|final
name|BoundMethod
name|boundMethod
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
name|PreparedExecution
parameter_list|(
name|ParseTree
name|parseTree
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|boolean
name|isDml
parameter_list|,
name|TableModificationRel
operator|.
name|Operation
name|tableModOp
parameter_list|,
name|BoundMethod
name|boundMethod
parameter_list|)
block|{
name|this
operator|.
name|parseTree
operator|=
name|parseTree
expr_stmt|;
name|this
operator|.
name|rootRel
operator|=
name|rootRel
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|isDml
operator|=
name|isDml
expr_stmt|;
name|this
operator|.
name|tableModOp
operator|=
name|tableModOp
expr_stmt|;
name|this
operator|.
name|boundMethod
operator|=
name|boundMethod
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|String
name|getCode
parameter_list|()
block|{
return|return
name|parseTree
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDml
parameter_list|()
block|{
return|return
name|isDml
return|;
block|}
specifier|public
name|TableModificationRel
operator|.
name|Operation
name|getTableModOp
parameter_list|()
block|{
return|return
name|tableModOp
return|;
block|}
comment|/**      * Returns the physical row type of this prepared statement. May not be      * identical to the row type returned by the validator; for example, the      * field names may have been made unique.      */
specifier|public
name|RelDataType
name|getPhysicalRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|boundMethod
operator|.
name|method
return|;
block|}
specifier|public
name|RelNode
name|getRootRel
parameter_list|()
block|{
return|return
name|rootRel
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|()
block|{
try|try
block|{
return|return
name|boundMethod
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setArgs
parameter_list|(
name|Object
index|[]
name|args
parameter_list|)
block|{
name|boundMethod
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End PreparedExecution.java
end_comment

end_unit

