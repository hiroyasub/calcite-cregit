begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|mop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|ptree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<code>IterConcatenateRel</code> concatenates several iterators. It is an  * iterator implementation of {@link UnionRel}.  */
end_comment

begin_class
specifier|public
class|class
name|IterConcatenateRel
extends|extends
name|UnionRelBase
implements|implements
name|JavaRel
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|IterConcatenateRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|CallingConvention
operator|.
name|ITERATOR
argument_list|)
argument_list|,
name|inputs
argument_list|,
literal|true
comment|/*all*/
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|IterConcatenateRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
name|copy
argument_list|(
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|IterConcatenateRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
assert|assert
name|all
assert|;
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|CallingConvention
operator|.
name|ITERATOR
argument_list|)
assert|;
return|return
operator|new
name|IterConcatenateRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|inputs
argument_list|)
return|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
name|double
name|dRows
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// favor a Nexus over a CompoundIterator, due to hassles of
comment|// java/c++/java data transfer
name|double
name|dCpu
init|=
literal|1000
decl_stmt|;
name|double
name|dIo
init|=
literal|1000
decl_stmt|;
return|return
name|planner
operator|.
name|makeCost
argument_list|(
name|dRows
argument_list|,
name|dCpu
argument_list|,
name|dIo
argument_list|)
return|;
block|}
specifier|protected
name|OJClass
name|getCompoundIteratorClass
parameter_list|()
block|{
return|return
name|OJClass
operator|.
name|forClass
argument_list|(
name|org
operator|.
name|eigenbase
operator|.
name|runtime
operator|.
name|CompoundTupleIter
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ParseTree
name|implement
parameter_list|(
name|JavaRelImplementor
name|implementor
parameter_list|)
block|{
comment|// Generate
comment|//   new CompoundTupleIter(
comment|//     new TupleIter[] {<<input0>>, ...})
comment|// If any input is infinite, should instead generate
comment|//   new CompoundParallelTupleIter(
comment|//     new TupleIter[] {<<input0>>, ...})
comment|// but there's no way to tell, so we can't.
comment|// REVIEW: mb 9-Sep-2005: add a predicate RelNode.isInfinite().
name|ExpressionList
name|exps
init|=
operator|new
name|ExpressionList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|exp
init|=
name|implementor
operator|.
name|visitJavaChild
argument_list|(
name|this
argument_list|,
name|i
argument_list|,
operator|(
name|JavaRel
operator|)
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|exps
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AllocationExpression
argument_list|(
name|getCompoundIteratorClass
argument_list|()
argument_list|,
operator|new
name|ExpressionList
argument_list|(
operator|new
name|ArrayAllocationExpression
argument_list|(
name|OJUtil
operator|.
name|clazzTupleIter
argument_list|,
operator|new
name|ExpressionList
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|ArrayInitializer
argument_list|(
name|exps
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End IterConcatenateRel.java
end_comment

end_unit

