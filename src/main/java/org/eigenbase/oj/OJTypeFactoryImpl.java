begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|oj
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|openjava
operator|.
name|mop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|oj
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link RelDataTypeFactory} based upon OpenJava's type  * system.  *  * @author jhyde  * @version $Id$  * @see openjava.mop.OJClass  * @see RelDataTypeFactory  * @since May 30, 2003  */
end_comment

begin_class
specifier|public
class|class
name|OJTypeFactoryImpl
extends|extends
name|SqlTypeFactoryImpl
implements|implements
name|OJTypeFactory
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|HashMap
argument_list|<
name|OJClass
argument_list|,
name|RelDataType
argument_list|>
name|mapOJClassToType
init|=
operator|new
name|HashMap
argument_list|<
name|OJClass
argument_list|,
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|OJClassMap
name|ojClassMap
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates an<code>OJTypeFactoryImpl</code>.      */
specifier|public
name|OJTypeFactoryImpl
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|OJClassMap
argument_list|(
name|SyntheticObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|OJTypeFactoryImpl
parameter_list|(
name|OJClassMap
name|ojClassMap
parameter_list|)
block|{
name|this
operator|.
name|ojClassMap
operator|=
name|ojClassMap
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// override RelDataTypeFactoryImpl
specifier|public
name|RelDataType
name|createJavaType
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|toType
argument_list|(
name|OJClass
operator|.
name|forClass
argument_list|(
name|clazz
argument_list|)
argument_list|)
return|;
block|}
comment|// override RelDataTypeFactoryImpl
specifier|public
name|RelDataType
name|createArrayType
parameter_list|(
name|RelDataType
name|elementType
parameter_list|,
name|long
name|maxCardinality
parameter_list|)
block|{
name|OJClass
name|ojClass
init|=
name|OJUtil
operator|.
name|typeToOJClass
argument_list|(
name|elementType
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
operator|new
name|OJScalarType
argument_list|(
name|OJClass
operator|.
name|arrayOf
argument_list|(
name|ojClass
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|OJClass
name|createOJClassForRecordType
parameter_list|(
name|OJClass
name|declarer
parameter_list|,
name|RelDataType
name|recordType
parameter_list|)
block|{
comment|// convert to synthetic project type
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|recordType
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|OJClass
index|[]
name|fieldClasses
init|=
operator|new
name|OJClass
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RelDataTypeField
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
name|fieldNames
index|[
name|i
index|]
operator|=
name|Util
operator|.
name|toJavaId
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|final
name|RelDataType
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|fieldClasses
index|[
name|i
index|]
operator|=
name|OJUtil
operator|.
name|typeToOJClass
argument_list|(
name|declarer
argument_list|,
name|fieldType
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|ojClassMap
operator|.
name|createProject
argument_list|(
name|declarer
argument_list|,
name|fieldClasses
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
name|OJClass
name|toOJClass
parameter_list|(
name|OJClass
name|declarer
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|OJScalarType
condition|)
block|{
return|return
operator|(
operator|(
name|OJScalarType
operator|)
name|type
operator|)
operator|.
name|ojClass
return|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|JavaType
condition|)
block|{
name|JavaType
name|scalarType
init|=
operator|(
name|JavaType
operator|)
name|type
decl_stmt|;
return|return
name|OJClass
operator|.
name|forClass
argument_list|(
name|scalarType
operator|.
name|getJavaClass
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|RelRecordType
condition|)
block|{
name|RelRecordType
name|recordType
init|=
operator|(
name|RelRecordType
operator|)
name|type
decl_stmt|;
name|OJClass
name|projectClass
init|=
name|createOJClassForRecordType
argument_list|(
name|declarer
argument_list|,
name|recordType
argument_list|)
decl_stmt|;
comment|// store reverse mapping, so we will be able to convert
comment|// "projectClass" back to "type"
name|mapOJClassToType
operator|.
name|put
argument_list|(
name|projectClass
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|projectClass
return|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|RelCrossType
condition|)
block|{
comment|// convert to synthetic join type
name|RelCrossType
name|crossType
init|=
operator|(
name|RelCrossType
operator|)
name|type
decl_stmt|;
specifier|final
name|RelDataType
index|[]
name|types
init|=
name|crossType
operator|.
name|types
decl_stmt|;
specifier|final
name|OJClass
index|[]
name|ojClasses
init|=
operator|new
name|OJClass
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ojClasses
index|[
name|i
index|]
operator|=
name|OJUtil
operator|.
name|typeToOJClass
argument_list|(
name|declarer
argument_list|,
name|types
index|[
name|i
index|]
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|final
name|OJClass
name|joinClass
init|=
name|ojClassMap
operator|.
name|createJoin
argument_list|(
name|declarer
argument_list|,
name|ojClasses
argument_list|)
decl_stmt|;
comment|// store reverse mapping, so we will be able to convert
comment|// "joinClass" back to "type"
name|mapOJClassToType
operator|.
name|put
argument_list|(
name|joinClass
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|joinClass
return|;
block|}
else|else
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"Not an OJ type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
name|RelDataType
name|toType
parameter_list|(
specifier|final
name|OJClass
name|ojClass
parameter_list|)
block|{
name|RelDataType
name|type
init|=
name|mapOJClassToType
operator|.
name|get
argument_list|(
name|ojClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
name|Class
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|ojClass
operator|.
name|getByteCode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotExecuteException
name|e
parameter_list|)
block|{
name|clazz
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|super
operator|.
name|createJavaType
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|canonize
argument_list|(
operator|new
name|OJScalarType
argument_list|(
name|ojClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mapOJClassToType
operator|.
name|put
argument_list|(
name|ojClass
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Type based upon an {@link OJClass}.      *      *<p>Use this class only if the class is a 'pure' OJClass:      *      *<ul>      *<li>If the {@link OJClass} is based upon a Java class, call {@link      * #createJavaType} instead.</li>      *<li>If the {@link OJClass} is synthetic, call {@link      * OJTypeFactoryImpl#createStructType} or {@link      * OJTypeFactoryImpl#createJoinType} instead.</li>      *</ul>      *</p>      */
specifier|private
class|class
name|OJScalarType
extends|extends
name|RelDataTypeImpl
block|{
specifier|private
specifier|final
name|OJClass
name|ojClass
decl_stmt|;
comment|/**          * Creates an<code>OJScalarType</code>          *          * @param ojClass Equivalent {@link OJClass}          *          * @pre ojClass != null          * @pre !OJSyntheticClass.isJoinClass(ojClass)          * @pre !OJSyntheticClass.isProjectClass(ojClass)          */
name|OJScalarType
parameter_list|(
name|OJClass
name|ojClass
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|ojClass
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
operator|!
name|OJSyntheticClass
operator|.
name|isJoinClass
argument_list|(
name|ojClass
argument_list|)
operator|)
assert|;
comment|// REVIEW jvs 23-Sept-2004:  find out who commented this out and
comment|// why
comment|//assert(!OJSyntheticClass.isProjectClass(ojClass));
name|this
operator|.
name|ojClass
operator|=
name|ojClass
expr_stmt|;
name|computeDigest
argument_list|()
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getComponentType
parameter_list|()
block|{
name|OJClass
name|colType
init|=
name|OJUtil
operator|.
name|guessRowType
argument_list|(
name|ojClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|colType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|toType
argument_list|(
name|colType
argument_list|)
return|;
block|}
specifier|protected
name|void
name|generateTypeString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|boolean
name|withDetail
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"OJScalarType("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ojClass
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End OJTypeFactoryImpl.java
end_comment

end_unit

