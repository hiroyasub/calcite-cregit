begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util14
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  *<code>AbstractResultSet</code> provides a abstract implementation for a  * TYPE_FORWARD_ONLY, CONCUR_READ_ONLY ResultSet. This class is JDK 1.4  * compatible.  *  * @author angel  * @version $Id$  * @since Jan 8, 2006  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|AbstractResultSet
extends|extends
name|Unwrappable
implements|implements
name|ResultSet
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|static
specifier|final
name|TimeZone
name|gmtZone
init|=
name|DateTimeUtil
operator|.
name|gmtZone
decl_stmt|;
specifier|static
specifier|final
name|TimeZone
name|defaultZone
init|=
name|DateTimeUtil
operator|.
name|defaultZone
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
name|boolean
name|wasNull
decl_stmt|;
specifier|protected
name|int
name|fetchSize
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|maxRows
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Returns the raw value of a column as an object.      *      * @param columnIndex Column index, 1-based      */
specifier|abstract
specifier|protected
name|Object
name|getRaw
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
function_decl|;
comment|/**      * Returns the raw value of a column as an object.      *      * @param columnName Column name      */
specifier|protected
name|Object
name|getRaw
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getRaw
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getConcurrency
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|ResultSet
operator|.
name|CONCUR_READ_ONLY
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|ResultSet
operator|.
name|TYPE_FORWARD_ONLY
return|;
block|}
specifier|public
name|void
name|setFetchDirection
parameter_list|(
name|int
name|direction
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|direction
operator|!=
name|FETCH_FORWARD
condition|)
block|{
throw|throw
name|newDirectionError
argument_list|()
throw|;
block|}
block|}
specifier|public
name|int
name|getFetchDirection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|FETCH_FORWARD
return|;
block|}
specifier|public
name|int
name|getFetchSize
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|fetchSize
return|;
block|}
specifier|public
name|void
name|setFetchSize
parameter_list|(
name|int
name|rows
parameter_list|)
throws|throws
name|SQLException
block|{
name|fetchSize
operator|=
name|rows
expr_stmt|;
block|}
comment|/**      * A column may have the value of SQL NULL; wasNull reports whether the last      * column read had this special value. Note that you must first call getXXX      * on a column to try to read its value and then call wasNull() to find if      * the value was the SQL NULL.      *      * @return true if last column read was SQL NULL      */
specifier|public
name|boolean
name|wasNull
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|wasNull
return|;
block|}
comment|/**      * Map a Resultset column name to a ResultSet column index.      *      * @param columnName the name of the column      *      * @return the column index      */
specifier|public
name|int
name|findColumn
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
name|ResultSetMetaData
name|metaData
init|=
name|getMetaData
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|metaData
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnName
operator|.
name|equals
argument_list|(
name|metaData
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"column '"
operator|+
name|columnName
operator|+
literal|"' not found"
argument_list|)
throw|;
block|}
comment|/**      *<p>The first warning reported by calls on this ResultSet is returned.      * Subsequent ResultSet warnings will be chained to this SQLWarning.      *      *<P>The warning chain is automatically cleared each time a new row is      * read.      *      *<P><B>Note:</B> This warning chain only covers warnings caused by      * ResultSet methods. Any warning caused by statement methods (such as      * reading OUT parameters) will be chained on the Statement object.      *      * @return the first SQLWarning or null      */
specifier|public
name|SQLWarning
name|getWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|null
return|;
block|}
comment|/**      * After this call getWarnings returns null until a new warning is reported      * for this ResultSet.      */
specifier|public
name|void
name|clearWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
block|}
specifier|public
name|Statement
name|getStatement
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
block|}
comment|//======================================================================
comment|// Individual accessors for columns by name or number
comment|//======================================================================
comment|/**      * Get the value of a column in the current row as a Java String.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|String
name|getString
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toString
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java String.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getString
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java byte array. The      * bytes represent the raw values returned by the driver.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toBytes
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java byte array. The      * bytes represent the raw values returned by the driver.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getBytes
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java boolean.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is false      */
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toBoolean
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java boolean.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is false      */
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getBoolean
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java byte.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|byte
name|getByte
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toByte
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java byte.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|byte
name|getByte
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getByte
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java short.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|short
name|getShort
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toShort
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java short.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|short
name|getShort
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getShort
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java int.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|int
name|getInt
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toInt
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java int.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getInt
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java long.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|long
name|getLong
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toLong
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java long.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getLong
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java float.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|float
name|getFloat
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toFloat
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java float.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|float
name|getFloat
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getFloat
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java double.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|double
name|getDouble
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toDouble
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a Java double.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is 0      */
specifier|public
name|double
name|getDouble
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getDouble
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.lang.BigDecimal      * object.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toBigDecimal
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.lang.BigDecimal      * object.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getBigDecimal
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.lang.BigDecimal      * object.      *      * @param columnIndex the first column is 1, the second is 2, ...      * @param scale the number of digits to the right of the decimal      *      * @return the column value; if the value is SQL NULL, the result is null      *      * @deprecated      */
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// THIS IS DEPRECATED in the current JDBC spec (use of 'scale')
name|BigDecimal
name|bd
init|=
name|getBigDecimal
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|bd
operator|!=
literal|null
condition|)
block|{
return|return
name|NumberUtil
operator|.
name|rescaleBigDecimal
argument_list|(
name|bd
argument_list|,
name|scale
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Get the value of a column in the current row as a java.lang.BigDecimal      * object.      *      * @param columnName is the SQL name of the column      * @param scale the number of digits to the right of the decimal      *      * @return the column value; if the value is SQL NULL, the result is null      *      * @deprecated      */
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|String
name|columnName
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// THIS IS DEPRECATED in the current JDBC spec (use of 'scale')
return|return
name|getBigDecimal
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|scale
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Date object.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Date
name|getDate
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toDate
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Date object.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Date
name|getDate
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getDate
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Date object.      *      * @param columnIndex the first column is 1, the second is 2, ...      * @param cal - the java.util.Calendar object to use in constructing the      * date      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Date
name|getDate
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Calendar
name|cal
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toDate
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|,
name|cal
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Date object.      *      * @param columnName is the SQL name of the column      * @param cal - the java.util.Calendar object to use in constructing the      * date      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Date
name|getDate
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Calendar
name|cal
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getDate
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|cal
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Time object.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|java
operator|.
name|sql
operator|.
name|Time
name|getTime
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toTime
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Time object.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|java
operator|.
name|sql
operator|.
name|Time
name|getTime
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getTime
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Time object.      *      * @param columnIndex the first column is 1, the second is 2, ...      * @param cal - the java.util.Calendar object to use in constructing the      * time      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Time
name|getTime
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Calendar
name|cal
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toTime
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|,
name|cal
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Time object.      *      * @param columnName is the SQL name of the column      * @param cal - the java.util.Calendar object to use in constructing the      * time      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Time
name|getTime
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Calendar
name|cal
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getTime
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|cal
argument_list|)
return|;
block|}
specifier|public
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|getTimestamp
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// getTimestamp(x) -- i.e. without Calendar -- means don't do timezone
comment|// conversion: different than getTimestamp(x, null), which means
comment|// convert to the client Java VM's default timezone
return|return
name|toTimestamp
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Timestamp      * object.      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|getTimestamp
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getTimestamp
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Timestamp      * object.      *      * @param columnIndex the first column is 1, the second is 2, ...      * @param cal - the java.util.Calendar object to use in constructing the      * timestamp      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Calendar
name|cal
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|toTimestamp
argument_list|(
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
argument_list|,
name|DateTimeUtil
operator|.
name|getTimeZone
argument_list|(
name|cal
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Timestamp      * object.      *      * @param columnName is the SQL name of the column      * @param cal - the java.util.Calendar object to use in constructing the      * timestamp      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Calendar
name|cal
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getTimestamp
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|cal
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as an Array object      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Array
name|getArray
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * Get the value of a column in the current row as an Array object      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Array
name|getArray
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getArray
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Blob object      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Blob
name|getBlob
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Blob object      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Blob
name|getBlob
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getBlob
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Clob object      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Clob
name|getClob
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Clob object      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Clob
name|getClob
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getClob
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Ref object      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Ref
name|getRef
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * Get the value of a column in the current row as a java.sql.Ref object      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|Ref
name|getRef
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getRef
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get the value of a column in the current row as a java.net.URL object      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|java
operator|.
name|net
operator|.
name|URL
name|getURL
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * Get the value of a column in the current row as a java.net.URL object      *      * @param columnName is the SQL name of the column      *      * @return the column value; if the value is SQL NULL, the result is null      */
specifier|public
name|java
operator|.
name|net
operator|.
name|URL
name|getURL
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getURL
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<p>Get the value of a column in the current row as a Java object.      *      *<p>This method will return the value of the given column as a Java      * object. The type of the Java object will be the default Java Object type      * corresponding to the column's SQL type, following the mapping specified      * in the JDBC spec.      *      *<p>This method may also be used to read database specific abstract data      * types.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return A java.lang.Object holding the column value.      */
specifier|public
name|Object
name|getObject
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
name|Object
name|o
init|=
name|getRaw
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|ZonelessDatetime
condition|)
block|{
comment|// convert into standard Jdbc types
name|o
operator|=
operator|(
operator|(
name|ZonelessDatetime
operator|)
name|o
operator|)
operator|.
name|toJdbcObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
comment|/**      *<p>Get the value of a column in the current row as a Java object.      *      *<p>This method will return the value of the given column as a Java      * object. The type of the Java object will be the default Java Object type      * corresponding to the column's SQL type, following the mapping specified      * in the JDBC spec.      *      *<p>This method may also be used to read database specific abstract data      * types.      *      * @param columnName is the SQL name of the column      *      * @return A java.lang.Object holding the column value.      */
specifier|public
name|Object
name|getObject
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getObject
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<p>Get the value of a column in the current row as a Java object.      *      *<p>This method will return the value of the given column as a Java      * object. The type of the Java object will be the default Java Object type      * corresponding to the column's SQL type, following the mapping specified      * in the JDBC spec. This method uses the specified Map object for custom      * mapping if appropriate.      *      *<p>This method may also be used to read database specific abstract data      * types.      *      * @param columnIndex the first column is 1, the second is 2, ...      * @param map a java.util.Map object that contains the mapping from SQL type      * names to classes in the Java programming language      *      * @return A java.lang.Object holding the column value.      */
specifier|public
name|Object
name|getObject
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Map
name|map
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      *<p>Get the value of a column in the current row as a Java object.      *      *<p>This method will return the value of the given column as a Java      * object. The type of the Java object will be the default Java Object type      * corresponding to the column's SQL type, following the mapping specified      * in the JDBC spec. This method uses the specified Map object for custom      * mapping if appropriate.      *      *<p>This method may also be used to read database specific abstract data      * types.      *      * @param columnName is the SQL name of the column      * @param map a java.util.Map object that contains the mapping from SQL type      * names to classes in the Java programming language      *      * @return A java.lang.Object holding the column value.      */
specifier|public
name|Object
name|getObject
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Map
name|map
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getObject
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|map
argument_list|)
return|;
block|}
comment|/**      * A column value can be retrieved as a stream of ASCII characters and then      * read in chunks from the stream. This method is particularly suitable for      * retrieving large LONGVARCHAR values. The JDBC driver will do any      * necessary conversion from the database format into ASCII.      *      *<P><B>Note:</B> All the data in the returned stream must be read prior to      * getting the value of any other column. The next call to a get method      * implicitly closes the stream. . Also, a stream may return 0 for      * available() whether there is data available or not.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return a Java input stream that delivers the database column value as a      * stream of one byte ASCII characters. If the value is SQL NULL then the      * result is null.      */
specifier|public
name|java
operator|.
name|io
operator|.
name|InputStream
name|getAsciiStream
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * A column value can be retrieved as a stream of ASCII characters and then      * read in chunks from the stream. This method is particularly suitable for      * retrieving large LONGVARCHAR values. The JDBC driver will do any      * necessary conversion from the database format into ASCII.      *      *<P><B>Note:</B> All the data in the returned stream must be read prior to      * getting the value of any other column. The next call to a get method      * implicitly closes the stream.      *      * @param columnName is the SQL name of the column      *      * @return a Java input stream that delivers the database column value as a      * stream of one byte ASCII characters. If the value is SQL NULL then the      * result is null.      */
specifier|public
name|java
operator|.
name|io
operator|.
name|InputStream
name|getAsciiStream
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getAsciiStream
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * A column value can be retrieved as a stream of uninterpreted bytes and      * then read in chunks from the stream. This method is particularly suitable      * for retrieving large LONGVARBINARY values.      *      *<P><B>Note:</B> All the data in the returned stream must be read prior to      * getting the value of any other column. The next call to a get method      * implicitly closes the stream. Also, a stream may return 0 for available()      * whether there is data available or not.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return a Java input stream that delivers the database column value as a      * stream of uninterpreted bytes. If the value is SQL NULL then the result      * is null.      */
specifier|public
name|java
operator|.
name|io
operator|.
name|InputStream
name|getBinaryStream
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * A column value can be retrieved as a stream of uninterpreted bytes and      * then read in chunks from the stream. This method is particularly suitable      * for retrieving large LONGVARBINARY values.      *      *<P><B>Note:</B> All the data in the returned stream must be read prior to      * getting the value of any other column. The next call to a get method      * implicitly closes the stream.      *      * @param columnName is the SQL name of the column      *      * @return a Java input stream that delivers the database column value as a      * stream of uninterpreted bytes. If the value is SQL NULL then the result      * is null.      */
specifier|public
name|java
operator|.
name|io
operator|.
name|InputStream
name|getBinaryStream
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getBinaryStream
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * A column value can be retrieved as a stream of characters and then read      * in chunks from the stream. This method is particularly suitable for      * retrieving large LONGVARCHAR values. The JDBC driver will do any      * necessary conversion from the database format into ASCII.      *      *<P><B>Note:</B> All the data in the returned stream must be read prior to      * getting the value of any other column. The next call to a get method      * implicitly closes the stream.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return a Java input stream that delivers the database column value as a      * character stream. If the value is SQL NULL then the result is null.      */
specifier|public
name|java
operator|.
name|io
operator|.
name|Reader
name|getCharacterStream
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * A column value can be retrieved as a stream of characters and then read      * in chunks from the stream. This method is particularly suitable for      * retrieving large LONGVARCHAR values. The JDBC driver will do any      * necessary conversion from the database format into ASCII.      *      *<P><B>Note:</B> All the data in the returned stream must be read prior to      * getting the value of any other column. The next call to a get method      * implicitly closes the stream.      *      * @param columnName is the SQL name of the column      *      * @return a Java input stream that delivers the database column value as a      * character stream. If the value is SQL NULL then the result is null.      */
specifier|public
name|java
operator|.
name|io
operator|.
name|Reader
name|getCharacterStream
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getCharacterStream
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * A column value can be retrieved as a stream of Unicode characters and      * then read in chunks from the stream. This method is particularly suitable      * for retrieving large LONGVARCHAR values. The JDBC driver will do any      * necessary conversion from the database format into Unicode.      *      *<P><B>Note:</B> All the data in the returned stream must be read prior to      * getting the value of any other column. The next call to a get method      * implicitly closes the stream. . Also, a stream may return 0 for      * available() whether there is data available or not.      *      * @param columnIndex the first column is 1, the second is 2, ...      *      * @return a Java input stream that delivers the database column value as a      * stream of two byte Unicode characters. If the value is SQL NULL then the      * result is null.      *      * @deprecated      */
specifier|public
name|java
operator|.
name|io
operator|.
name|InputStream
name|getUnicodeStream
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * A column value can be retrieved as a stream of Unicode characters and      * then read in chunks from the stream. This method is particularly suitable      * for retrieving large LONGVARCHAR values. The JDBC driver will do any      * necessary conversion from the database format into Unicode.      *      *<P><B>Note:</B> All the data in the returned stream must be read prior to      * getting the value of any other column. The next call to a get method      * implicitly closes the stream.      *      * @param columnName is the SQL name of the column      *      * @return a Java input stream that delivers the database column value as a      * stream of two byte Unicode characters. If the value is SQL NULL then the      * result is null.      *      * @deprecated      */
specifier|public
name|java
operator|.
name|io
operator|.
name|InputStream
name|getUnicodeStream
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getUnicodeStream
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
return|;
block|}
comment|//======================================================================
comment|// Update methods for individual types; these are not supported
comment|//======================================================================
specifier|public
name|void
name|updateShort
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|short
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateShort
parameter_list|(
name|String
name|columnName
parameter_list|,
name|short
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateShort
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateNull
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateNull
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateNull
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateLong
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|long
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateLong
parameter_list|(
name|String
name|columnName
parameter_list|,
name|long
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateLong
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateInt
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|int
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateInt
parameter_list|(
name|String
name|columnName
parameter_list|,
name|int
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateInt
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateFloat
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|float
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateFloat
parameter_list|(
name|String
name|columnName
parameter_list|,
name|float
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateFloat
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateDouble
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|double
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateDouble
parameter_list|(
name|String
name|columnName
parameter_list|,
name|double
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateDouble
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateString
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|String
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateString
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateString
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateBigDecimal
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|BigDecimal
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateBigDecimal
parameter_list|(
name|String
name|columnName
parameter_list|,
name|BigDecimal
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateBigDecimal
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateBoolean
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|boolean
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateBoolean
parameter_list|(
name|String
name|columnName
parameter_list|,
name|boolean
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateBoolean
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateByte
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|byte
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateByte
parameter_list|(
name|String
name|columnName
parameter_list|,
name|byte
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateByte
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateBytes
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|byte
index|[]
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateBytes
parameter_list|(
name|String
name|columnName
parameter_list|,
name|byte
index|[]
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateBytes
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateDate
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Date
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateDate
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Date
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateDate
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateTime
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Time
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateTime
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Time
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateTime
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateTimestamp
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Timestamp
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateTimestamp
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Timestamp
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateTimestamp
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateArray
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Array
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateArray
parameter_list|(
name|String
name|columnName
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Array
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateArray
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateRef
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Ref
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateRef
parameter_list|(
name|String
name|columnName
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Ref
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateRef
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateBlob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Blob
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateBlob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Blob
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateBlob
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateClob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Clob
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateClob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Clob
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateClob
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateAsciiStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|java
operator|.
name|io
operator|.
name|InputStream
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateAsciiStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|java
operator|.
name|io
operator|.
name|InputStream
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateAsciiStream
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateBinaryStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|java
operator|.
name|io
operator|.
name|InputStream
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateBinaryStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|java
operator|.
name|io
operator|.
name|InputStream
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateBinaryStream
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateCharacterStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|java
operator|.
name|io
operator|.
name|Reader
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateCharacterStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|java
operator|.
name|io
operator|.
name|Reader
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateCharacterStream
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateObject
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Object
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateObject
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Object
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateObject
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateObject
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Object
name|x
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|updateObject
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Object
name|x
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateObject
argument_list|(
name|findColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|x
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateRow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
comment|//======================================================================
comment|// Other update functions
comment|//======================================================================
specifier|public
name|boolean
name|rowUpdated
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|rowInserted
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|rowDeleted
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
comment|//======================================================================
comment|// Methods for scrolling resultsets
comment|//======================================================================
specifier|public
name|void
name|afterLast
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newDirectionError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|beforeFirst
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newDirectionError
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|first
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newDirectionError
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|last
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newDirectionError
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|previous
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newDirectionError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|cancelRowUpdates
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|deleteRow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|moveToCurrentRow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|moveToInsertRow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|relative
parameter_list|(
name|int
name|rows
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|(
name|rows
operator|<
literal|0
operator|)
operator|||
operator|(
name|getType
argument_list|()
operator|==
name|TYPE_FORWARD_ONLY
operator|)
condition|)
block|{
throw|throw
name|newDirectionError
argument_list|()
throw|;
block|}
while|while
condition|(
name|rows
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|next
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|refreshRow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|insertRow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|newUpdatabilityError
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|absolute
parameter_list|(
name|int
name|row
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|(
name|row
operator|<
literal|1
operator|)
operator|||
operator|(
name|getType
argument_list|()
operator|==
name|TYPE_FORWARD_ONLY
operator|)
condition|)
block|{
throw|throw
name|newDirectionError
argument_list|()
throw|;
block|}
return|return
name|relative
argument_list|(
name|row
operator|-
name|getRow
argument_list|()
argument_list|)
return|;
block|}
comment|// Unsupported operations
comment|/**      * Get the name of the SQL cursor used by this ResultSet.      *      *<P>In SQL, a result table is retrieved through a cursor that is named.      * The current row of a result can be updated or deleted using a positioned      * update/delete statement that references the cursor name.      *      *<P>JDBC supports this SQL feature by providing the name of the SQL cursor      * used by a ResultSet. The current row of a ResultSet is also the current      * row of this SQL cursor.      *      *<P><B>Note:</B> If positioned update is not supported a      * java.sql.SQLException is thrown      *      * @return the ResultSet's SQL cursor name      */
specifier|public
name|String
name|getCursorName
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isLast
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isFirst
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isBeforeFirst
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isAfterLast
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getRow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported right now"
argument_list|)
throw|;
block|}
comment|/**      * @see Statement#setMaxRows      */
specifier|public
name|void
name|setMaxRows
parameter_list|(
name|int
name|maxRows
parameter_list|)
block|{
name|this
operator|.
name|maxRows
operator|=
name|maxRows
expr_stmt|;
block|}
comment|// Errors
specifier|protected
name|SQLException
name|newConversionError
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|className
parameter_list|)
block|{
return|return
operator|new
name|SQLException
argument_list|(
literal|"cannot convert "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|+
literal|"("
operator|+
name|o
operator|+
literal|") to "
operator|+
name|className
argument_list|)
return|;
block|}
specifier|protected
name|SQLException
name|newConversionError
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|SQLException
argument_list|(
literal|"cannot convert "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|+
literal|"("
operator|+
name|o
operator|+
literal|") to "
operator|+
name|clazz
argument_list|)
return|;
block|}
specifier|protected
name|SQLException
name|newDirectionError
parameter_list|()
block|{
return|return
operator|new
name|SQLException
argument_list|(
literal|"ResultSet is TYPE_FORWARD_ONLY"
argument_list|)
return|;
block|}
specifier|protected
name|SQLException
name|newUpdatabilityError
parameter_list|()
block|{
return|return
operator|new
name|SQLException
argument_list|(
literal|"ResultSet is CONCUR_READ_ONLY"
argument_list|)
return|;
block|}
specifier|protected
name|SQLException
name|newFetchError
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
specifier|final
name|SQLException
name|sqlEx
init|=
operator|new
name|SQLException
argument_list|(
literal|"error while fetching from cursor"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|sqlEx
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|sqlEx
return|;
block|}
comment|// Private conversion routines
comment|// TODO: Do rounding, generate warnings
specifier|private
name|boolean
name|toBoolean
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
comment|// REVIEW: JDBC spec maps the boolean type into the BOOLEAN or BIT type
comment|// so it allows conversions from/to numeric types. We treat any non-zero
comment|// numeric as true, 0 as false.  Strings are converted based on the
comment|// SQL.2003 standard or to a numeric value, and then to a boolean.
if|if
condition|(
name|o
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Allow SQL.2003 boolean literal strings to be converted into
comment|// boolean values
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"unknown"
argument_list|)
condition|)
block|{
comment|// SQL.2003 Part 2, Section 5.13, General Rules 10 specifies
comment|// that the literal unknown indicates that boolean truth value
comment|// is unknown, represented by null
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// Try numeric
return|return
operator|(
name|toDouble
argument_list|(
name|o
argument_list|)
operator|!=
literal|0
operator|)
return|;
comment|//throw newConversionError(o,boolean.class);
block|}
block|}
else|else
block|{
return|return
operator|(
name|toDouble
argument_list|(
name|o
argument_list|)
operator|!=
literal|0
operator|)
return|;
comment|//throw newConversionError(o,boolean.class);
block|}
block|}
specifier|private
name|byte
name|toByte
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Byte
condition|)
block|{
return|return
operator|(
operator|(
name|Byte
operator|)
name|o
operator|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|byte
operator|)
name|toLong_
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
specifier|private
name|Date
name|toDate
parameter_list|(
name|Object
name|o
parameter_list|,
name|TimeZone
name|zone
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|zone
operator|==
literal|null
condition|)
block|{
name|zone
operator|=
name|defaultZone
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|o
operator|instanceof
name|ZonelessDate
operator|)
operator|||
operator|(
name|o
operator|instanceof
name|ZonelessTimestamp
operator|)
condition|)
block|{
name|ZonelessDatetime
name|zd
init|=
operator|(
name|ZonelessDatetime
operator|)
name|o
decl_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|zd
operator|.
name|getJdbcDate
argument_list|(
name|zone
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|ZonelessDate
name|zd
init|=
name|ZonelessDate
operator|.
name|parse
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|zd
operator|==
literal|null
condition|)
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
name|Date
operator|.
name|class
argument_list|)
throw|;
block|}
return|return
operator|new
name|Date
argument_list|(
name|zd
operator|.
name|getJdbcDate
argument_list|(
name|zone
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
name|Date
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|private
name|double
name|toDouble
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|0.0
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Double
condition|)
block|{
return|return
operator|(
operator|(
name|Double
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|(
operator|(
name|Float
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
operator|(
name|BigDecimal
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Fail to convert to internal representation"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|double
operator|)
name|toLong_
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
specifier|private
name|float
name|toFloat
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
operator|(
name|float
operator|)
literal|0
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|(
operator|(
name|Float
operator|)
name|o
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Double
condition|)
block|{
return|return
operator|(
operator|(
name|Double
operator|)
name|o
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
operator|(
name|BigDecimal
operator|)
name|o
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Fail to convert to internal representation"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|float
operator|)
name|toLong_
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
specifier|private
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|o
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Double
condition|)
block|{
comment|// For JDK 1.4 compatibility
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
comment|// return BigDecimal.valueOf(((Double) o).doubleValue());
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Float
condition|)
block|{
comment|// For JDK 1.4 compatibility
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
comment|// return BigDecimal.valueOf(((Float) o).doubleValue());
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|toLong_
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|toInt
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|o
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|int
operator|)
name|toLong_
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
specifier|private
name|long
name|toLong
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|toLong_
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|private
name|long
name|toLong_
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|(
operator|(
name|Long
operator|)
name|o
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|o
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Short
condition|)
block|{
return|return
operator|(
operator|(
name|Short
operator|)
name|o
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Character
condition|)
block|{
return|return
operator|(
operator|(
name|Character
operator|)
name|o
operator|)
operator|.
name|charValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Byte
condition|)
block|{
return|return
operator|(
operator|(
name|Byte
operator|)
name|o
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Double
condition|)
block|{
return|return
name|NumberUtil
operator|.
name|round
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Float
condition|)
block|{
return|return
name|NumberUtil
operator|.
name|round
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
name|NumberUtil
operator|.
name|round
argument_list|(
operator|(
operator|(
name|BigDecimal
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Boolean
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
name|long
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
name|long
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|private
name|short
name|toShort
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Short
condition|)
block|{
return|return
operator|(
operator|(
name|Short
operator|)
name|o
operator|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|short
operator|)
name|toLong_
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|byte
index|[]
condition|)
block|{
comment|// convert to hex string
name|wasNull
operator|=
literal|false
expr_stmt|;
return|return
name|ConversionUtil
operator|.
name|toStringFromByteArray
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|o
argument_list|,
literal|16
argument_list|)
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
name|byte
index|[]
name|toBytes
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|o
return|;
block|}
else|else
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
literal|"byte[]"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Time
name|toTime
parameter_list|(
name|Object
name|o
parameter_list|,
name|TimeZone
name|zone
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|zone
operator|==
literal|null
condition|)
block|{
name|zone
operator|=
name|defaultZone
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|o
operator|instanceof
name|ZonelessTime
operator|)
operator|||
operator|(
name|o
operator|instanceof
name|ZonelessTimestamp
operator|)
condition|)
block|{
name|ZonelessDatetime
name|zd
init|=
operator|(
name|ZonelessDatetime
operator|)
name|o
decl_stmt|;
return|return
operator|new
name|Time
argument_list|(
name|zd
operator|.
name|getJdbcTime
argument_list|(
name|zone
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|ZonelessTime
name|zt
init|=
name|ZonelessTime
operator|.
name|parse
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|zt
operator|==
literal|null
condition|)
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
name|Time
operator|.
name|class
argument_list|)
throw|;
block|}
return|return
operator|new
name|Time
argument_list|(
name|zt
operator|.
name|getJdbcTime
argument_list|(
name|zone
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
name|Time
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Timestamp
name|toTimestamp
parameter_list|(
name|Object
name|o
parameter_list|,
name|TimeZone
name|zone
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// NOTE: ignore time zone since all timestamps are represented
comment|// as milliseconds since the epoch
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|wasNull
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|wasNull
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|zone
operator|==
literal|null
condition|)
block|{
name|zone
operator|=
name|defaultZone
expr_stmt|;
block|}
comment|// Note that dates returned as Jdbc objects already use the
comment|// apropriate conventions
if|if
condition|(
name|o
operator|instanceof
name|ZonelessDatetime
condition|)
block|{
name|ZonelessDatetime
name|zd
init|=
operator|(
name|ZonelessDatetime
operator|)
name|o
decl_stmt|;
return|return
operator|new
name|Timestamp
argument_list|(
name|zd
operator|.
name|getJdbcTimestamp
argument_list|(
name|zone
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|ZonelessTimestamp
name|ts
init|=
name|ZonelessTimestamp
operator|.
name|parse
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
name|Timestamp
operator|.
name|class
argument_list|)
throw|;
block|}
return|return
operator|new
name|Timestamp
argument_list|(
name|ts
operator|.
name|getJdbcTimestamp
argument_list|(
name|zone
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|newConversionError
argument_list|(
name|o
argument_list|,
name|Timestamp
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|// begin JDBC 4 methods
comment|// implement ResultSet
specifier|public
name|void
name|updateBinaryStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateBinaryStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateBinaryStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateBinaryStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateBinaryStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateBinaryStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateBinaryStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateBinaryStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateBlob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateBlob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateBlob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateBlob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateBlob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateBlob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateBlob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateBlob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateAsciiStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateAsciiStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateAsciiStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateAsciiStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateAsciiStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateAsciiStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateAsciiStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateAsciiStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNClob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNClob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNClob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|NClob
name|nclob
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNClob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|NClob
name|nclob
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNClob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNClob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateCharacterStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateCharacterStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateCharacterStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateCharacterStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateClob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateClob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateClob
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateClob
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateSQLXML
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|SQLXML
name|sqlxml
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateSQLXML"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateSQLXML
parameter_list|(
name|String
name|columnName
parameter_list|,
name|SQLXML
name|sqlxml
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateSQLXML"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNCharacterStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNCharacterStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNCharacterStream
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNCharacterStream
parameter_list|(
name|String
name|columnName
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNString
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNString"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateNString
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateNString"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateRowId
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|RowId
name|rowId
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateRowId"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|void
name|updateRowId
parameter_list|(
name|String
name|columnName
parameter_list|,
name|RowId
name|rowId
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"updateRowId"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|Reader
name|getNCharacterStream
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getNCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|Reader
name|getNCharacterStream
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getNCharacterStream"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|String
name|getNString
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getNString"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|String
name|getNString
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getNString"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|SQLXML
name|getSQLXML
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getSQLXML"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|SQLXML
name|getSQLXML
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getSQLXML"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|NClob
name|getNClob
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getNClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|NClob
name|getNClob
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getNClob"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|RowId
name|getRowId
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getRowId"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|RowId
name|getRowId
parameter_list|(
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getRowId"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|boolean
name|isClosed
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"isClosed"
argument_list|)
throw|;
block|}
comment|// implement ResultSet
specifier|public
name|int
name|getHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getHoldability"
argument_list|)
throw|;
block|}
comment|//
comment|// end JDBC 4 methods
comment|//
block|}
end_class

begin_comment
comment|// End AbstractResultSet.java
end_comment

end_unit

