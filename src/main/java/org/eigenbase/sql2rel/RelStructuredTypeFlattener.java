begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|// TODO jvs 10-Feb-2005:  factor out generic rewrite helper, with the
end_comment

begin_comment
comment|// ability to map between old and new rels and field ordinals.  Also,
end_comment

begin_comment
comment|// for now need to prohibit queries which return UDT instances.
end_comment

begin_comment
comment|/**  * RelStructuredTypeFlattener removes all structured types from a tree of  * relational expressions. Because it must operate globally on the tree, it is  * implemented as an explicit self-contained rewrite operation instead of via  * normal optimizer rules. This approach has the benefit that real optimizer and  * codegen rules never have to deal with structured types.  *  *<p>As an example, suppose we have a structured type<code>ST(A1 smallint, A2  * bigint)</code>, a table<code>T(c1 ST, c2 double)</code>, and a query<code>  * select t.c2, t.c1.a2 from t</code>. After SqlToRelConverter executes, the  * unflattened tree looks like:  *  *<pre><code>  * ProjectRel(C2=[$1], A2=[$0.A2])  *   TableAccessRel(table=[T])  *</code></pre>  *  * After flattening, the resulting tree looks like  *  *<pre><code>  * ProjectRel(C2=[$3], A2=[$2])  *   FtrsIndexScanRel(table=[T], index=[clustered])  *</code></pre>  *  * The index scan produces a flattened row type<code>(boolean, smallint,  * bigint, double)</code> (the boolean is a null indicator for c1), and the  * projection picks out the desired attributes (omitting<code>$0</code> and  *<code>$1</code> altogether). After optimization, the projection might be  * pushed down into the index scan, resulting in a final tree like  *  *<pre><code>  * FtrsIndexScanRel(table=[T], index=[clustered], projection=[3, 2])  *</code></pre>  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|RelStructuredTypeFlattener
implements|implements
name|ReflectiveVisitor
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|RewriteRelVisitor
name|visitor
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|RelNode
argument_list|,
name|RelNode
argument_list|>
name|oldToNewRelMap
decl_stmt|;
specifier|private
name|RelNode
name|currentRel
decl_stmt|;
specifier|private
name|int
name|iRestructureInput
decl_stmt|;
specifier|private
name|RelDataType
name|flattenedRootType
decl_stmt|;
name|boolean
name|restructured
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|RelStructuredTypeFlattener
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|visitor
operator|=
operator|new
name|RewriteRelVisitor
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|updateRelInMap
parameter_list|(
name|Map
argument_list|<
name|RelNode
argument_list|,
name|SortedSet
argument_list|<
name|CorrelatorRel
operator|.
name|Correlation
argument_list|>
argument_list|>
name|mapRefRelToCorVar
parameter_list|)
block|{
name|Set
argument_list|<
name|RelNode
argument_list|>
name|oldRefRelSet
init|=
operator|new
name|HashSet
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
name|oldRefRelSet
operator|.
name|addAll
argument_list|(
name|mapRefRelToCorVar
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RelNode
name|rel
range|:
name|oldRefRelSet
control|)
block|{
if|if
condition|(
name|oldToNewRelMap
operator|.
name|containsKey
argument_list|(
name|rel
argument_list|)
condition|)
block|{
name|SortedSet
argument_list|<
name|CorrelatorRel
operator|.
name|Correlation
argument_list|>
name|corVarSet
init|=
operator|new
name|TreeSet
argument_list|<
name|CorrelatorRel
operator|.
name|Correlation
argument_list|>
argument_list|()
decl_stmt|;
name|corVarSet
operator|.
name|addAll
argument_list|(
name|mapRefRelToCorVar
operator|.
name|get
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
name|mapRefRelToCorVar
operator|.
name|remove
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|mapRefRelToCorVar
operator|.
name|put
argument_list|(
name|oldToNewRelMap
operator|.
name|get
argument_list|(
name|rel
argument_list|)
argument_list|,
name|corVarSet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|updateRelInMap
parameter_list|(
name|SortedMap
argument_list|<
name|CorrelatorRel
operator|.
name|Correlation
argument_list|,
name|CorrelatorRel
argument_list|>
name|mapCorVarToCorRel
parameter_list|)
block|{
for|for
control|(
name|CorrelatorRel
operator|.
name|Correlation
name|corVar
range|:
name|mapCorVarToCorRel
operator|.
name|keySet
argument_list|()
control|)
block|{
name|CorrelatorRel
name|oldRel
init|=
name|mapCorVarToCorRel
operator|.
name|get
argument_list|(
name|corVar
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldToNewRelMap
operator|.
name|containsKey
argument_list|(
name|oldRel
argument_list|)
condition|)
block|{
name|RelNode
name|newRel
init|=
name|oldToNewRelMap
operator|.
name|get
argument_list|(
name|oldRel
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|newRel
operator|instanceof
name|CorrelatorRel
operator|)
assert|;
name|mapCorVarToCorRel
operator|.
name|put
argument_list|(
name|corVar
argument_list|,
operator|(
name|CorrelatorRel
operator|)
name|newRel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|RelNode
name|rewrite
parameter_list|(
name|RelNode
name|root
parameter_list|,
name|boolean
name|restructure
parameter_list|)
block|{
comment|// Perform flattening.
name|oldToNewRelMap
operator|=
operator|new
name|HashMap
argument_list|<
name|RelNode
argument_list|,
name|RelNode
argument_list|>
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|root
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RelNode
name|flattened
init|=
name|getNewForOldRel
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|flattenedRootType
operator|=
name|flattened
operator|.
name|getRowType
argument_list|()
expr_stmt|;
comment|// If requested, add an additional projection which puts
comment|// everything back into structured form for return to the
comment|// client.
name|restructured
operator|=
literal|false
expr_stmt|;
name|RexNode
index|[]
name|structuringExps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|restructure
condition|)
block|{
name|iRestructureInput
operator|=
literal|0
expr_stmt|;
name|structuringExps
operator|=
name|restructureFields
argument_list|(
name|root
operator|.
name|getRowType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restructured
condition|)
block|{
comment|// REVIEW jvs 23-Mar-2005:  How do we make sure that this
comment|// implementation stays in Java?  Fennel can't handle
comment|// structured types.
return|return
name|CalcRel
operator|.
name|createProject
argument_list|(
name|flattened
argument_list|,
name|structuringExps
argument_list|,
name|RelOptUtil
operator|.
name|getFieldNames
argument_list|(
name|root
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|flattened
return|;
block|}
block|}
specifier|private
name|RexNode
index|[]
name|restructureFields
parameter_list|(
name|RelDataType
name|structuredType
parameter_list|)
block|{
name|RexNode
index|[]
name|structuringExps
init|=
operator|new
name|RexNode
index|[
name|structuredType
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|iOutput
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|structuredType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
comment|// TODO:  row
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|STRUCTURED
condition|)
block|{
name|restructured
operator|=
literal|true
expr_stmt|;
name|structuringExps
index|[
name|iOutput
index|]
operator|=
name|restructure
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|iOutput
expr_stmt|;
block|}
else|else
block|{
name|structuringExps
index|[
name|iOutput
index|]
operator|=
operator|new
name|RexInputRef
argument_list|(
name|iRestructureInput
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|iOutput
expr_stmt|;
operator|++
name|iRestructureInput
expr_stmt|;
block|}
block|}
return|return
name|structuringExps
return|;
block|}
specifier|private
name|RexNode
name|restructure
parameter_list|(
name|RelDataType
name|structuredType
parameter_list|)
block|{
comment|// Access null indicator for entire structure.
name|RexInputRef
name|nullIndicator
init|=
operator|new
name|RexInputRef
argument_list|(
name|iRestructureInput
argument_list|,
name|flattenedRootType
operator|.
name|getFields
argument_list|()
index|[
name|iRestructureInput
index|]
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
operator|++
name|iRestructureInput
expr_stmt|;
comment|// Use NEW to put flattened data back together into a structure.
name|RexNode
index|[]
name|inputExprs
init|=
name|restructureFields
argument_list|(
name|structuredType
argument_list|)
decl_stmt|;
name|RexNode
name|newInvocation
init|=
name|rexBuilder
operator|.
name|makeNewInvocation
argument_list|(
name|structuredType
argument_list|,
name|inputExprs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|structuredType
operator|.
name|isNullable
argument_list|()
condition|)
block|{
comment|// Optimize away the null test.
return|return
name|newInvocation
return|;
block|}
comment|// Construct a CASE expression to handle the structure-level null
comment|// indicator.
name|RexNode
index|[]
name|caseOperands
init|=
operator|new
name|RexNode
index|[
literal|3
index|]
decl_stmt|;
comment|// WHEN StructuredType.Indicator IS NULL
name|caseOperands
index|[
literal|0
index|]
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|isNullOperator
argument_list|,
name|nullIndicator
argument_list|)
expr_stmt|;
comment|// THEN CAST(NULL AS StructuredType)
name|caseOperands
index|[
literal|1
index|]
operator|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|structuredType
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// ELSE NEW StructuredType(inputs...) END
name|caseOperands
index|[
literal|2
index|]
operator|=
name|newInvocation
expr_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|caseOperator
argument_list|,
name|caseOperands
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setNewForOldRel
parameter_list|(
name|RelNode
name|oldRel
parameter_list|,
name|RelNode
name|newRel
parameter_list|)
block|{
name|oldToNewRelMap
operator|.
name|put
argument_list|(
name|oldRel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RelNode
name|getNewForOldRel
parameter_list|(
name|RelNode
name|oldRel
parameter_list|)
block|{
return|return
name|oldToNewRelMap
operator|.
name|get
argument_list|(
name|oldRel
argument_list|)
return|;
block|}
comment|/**      * Maps the ordinal of a field pre-flattening to the ordinal of the      * corresponding field post-flattening, and optionally returns its type.      *      * @param oldOrdinal Pre-flattening ordinal      *      * @return Post-flattening ordinal      */
specifier|protected
name|int
name|getNewForOldInput
parameter_list|(
name|int
name|oldOrdinal
parameter_list|)
block|{
assert|assert
operator|(
name|currentRel
operator|!=
literal|null
operator|)
assert|;
name|int
name|newOrdinal
init|=
literal|0
decl_stmt|;
comment|// determine which input rel oldOrdinal references, and adjust
comment|// oldOrdinal to be relative to that input rel
name|List
argument_list|<
name|RelNode
argument_list|>
name|oldInputs
init|=
name|currentRel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|RelNode
name|oldInput
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldInputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|RelDataType
name|oldInputType
init|=
name|oldInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|oldInputType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldOrdinal
operator|<
name|n
condition|)
block|{
name|oldInput
operator|=
name|oldInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
name|RelNode
name|newInput
init|=
name|getNewForOldRel
argument_list|(
name|oldInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|newOrdinal
operator|+=
name|newInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
name|oldOrdinal
operator|-=
name|n
expr_stmt|;
block|}
assert|assert
operator|(
name|oldInput
operator|!=
literal|null
operator|)
assert|;
name|RelDataType
name|oldInputType
init|=
name|oldInput
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|newOrdinal
operator|+=
name|calculateFlattenedOffset
argument_list|(
name|oldInputType
argument_list|,
name|oldOrdinal
argument_list|)
expr_stmt|;
return|return
name|newOrdinal
return|;
block|}
specifier|private
name|int
name|calculateFlattenedOffset
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|SqlTypeUtil
operator|.
name|needsNullIndicator
argument_list|(
name|rowType
argument_list|)
condition|)
block|{
comment|// skip null indicator
operator|++
name|offset
expr_stmt|;
block|}
name|RelDataTypeField
index|[]
name|oldFields
init|=
name|rowType
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ordinal
condition|;
operator|++
name|i
control|)
block|{
name|RelDataType
name|oldFieldType
init|=
name|oldFields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldFieldType
operator|.
name|isStruct
argument_list|()
condition|)
block|{
comment|// TODO jvs 10-Feb-2005:  this isn't terribly efficient;
comment|// keep a mapping somewhere
name|RelDataType
name|flattened
init|=
name|SqlTypeUtil
operator|.
name|flattenRecordType
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|oldFieldType
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
index|[]
name|fields
init|=
name|flattened
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|offset
operator|+=
name|fields
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
operator|++
name|offset
expr_stmt|;
block|}
block|}
return|return
name|offset
return|;
block|}
specifier|protected
name|RexNode
name|flattenFieldAccesses
parameter_list|(
name|RexNode
name|exp
parameter_list|)
block|{
name|RewriteRexShuttle
name|shuttle
init|=
operator|new
name|RewriteRexShuttle
argument_list|()
decl_stmt|;
return|return
name|exp
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
return|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|TableModificationRel
name|rel
parameter_list|)
block|{
name|TableModificationRel
name|newRel
init|=
operator|new
name|TableModificationRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTable
argument_list|()
argument_list|,
name|rel
operator|.
name|getConnection
argument_list|()
argument_list|,
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
argument_list|,
name|rel
operator|.
name|getOperation
argument_list|()
argument_list|,
name|rel
operator|.
name|getUpdateColumnList
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|AggregateRel
name|rel
parameter_list|)
block|{
name|RelDataType
name|inputType
init|=
name|rel
operator|.
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|inputType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isStruct
argument_list|()
condition|)
block|{
comment|// TODO jvs 10-Feb-2005
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"aggregation on structured types"
argument_list|)
throw|;
block|}
block|}
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|SortRel
name|rel
parameter_list|)
block|{
name|RelFieldCollation
index|[]
name|oldCollations
init|=
name|rel
operator|.
name|getCollations
argument_list|()
decl_stmt|;
name|RelFieldCollation
index|[]
name|newCollations
init|=
operator|new
name|RelFieldCollation
index|[
name|oldCollations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldCollations
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|oldInput
init|=
name|oldCollations
index|[
name|i
index|]
operator|.
name|getFieldIndex
argument_list|()
decl_stmt|;
name|RelDataType
name|sortFieldType
init|=
name|rel
operator|.
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
index|[
name|oldInput
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortFieldType
operator|.
name|isStruct
argument_list|()
condition|)
block|{
comment|// TODO jvs 10-Feb-2005
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"sorting on structured types"
argument_list|)
throw|;
block|}
name|newCollations
index|[
name|i
index|]
operator|=
operator|new
name|RelFieldCollation
argument_list|(
name|getNewForOldInput
argument_list|(
name|oldInput
argument_list|)
argument_list|,
name|oldCollations
index|[
name|i
index|]
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SortRel
name|newRel
init|=
operator|new
name|SortRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
argument_list|,
name|newCollations
argument_list|)
decl_stmt|;
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|FilterRel
name|rel
parameter_list|)
block|{
name|RelNode
name|newRel
init|=
name|CalcRel
operator|.
name|createFilter
argument_list|(
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
argument_list|,
name|flattenFieldAccesses
argument_list|(
name|rel
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|JoinRel
name|rel
parameter_list|)
block|{
name|JoinRel
name|newRel
init|=
operator|new
name|JoinRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
argument_list|,
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getRight
argument_list|()
argument_list|)
argument_list|,
name|flattenFieldAccesses
argument_list|(
name|rel
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|,
name|rel
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|rel
operator|.
name|getVariablesStopped
argument_list|()
argument_list|)
decl_stmt|;
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|CorrelatorRel
name|rel
parameter_list|)
block|{
name|Iterator
name|oldCorrelations
init|=
name|rel
operator|.
name|getCorrelations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|CorrelatorRel
operator|.
name|Correlation
argument_list|>
name|newCorrelations
init|=
operator|new
name|ArrayList
argument_list|<
name|CorrelatorRel
operator|.
name|Correlation
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|oldCorrelations
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CorrelatorRel
operator|.
name|Correlation
name|c
init|=
operator|(
name|CorrelatorRel
operator|.
name|Correlation
operator|)
name|oldCorrelations
operator|.
name|next
argument_list|()
decl_stmt|;
name|RelDataType
name|corrFieldType
init|=
name|rel
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFields
argument_list|()
index|[
name|c
operator|.
name|getOffset
argument_list|()
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|corrFieldType
operator|.
name|isStruct
argument_list|()
condition|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"correlation on structured type"
argument_list|)
throw|;
block|}
name|newCorrelations
operator|.
name|add
argument_list|(
operator|new
name|CorrelatorRel
operator|.
name|Correlation
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|getNewForOldInput
argument_list|(
name|c
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CorrelatorRel
name|newRel
init|=
operator|new
name|CorrelatorRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
argument_list|,
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getRight
argument_list|()
argument_list|)
argument_list|,
name|rel
operator|.
name|getCondition
argument_list|()
argument_list|,
name|newCorrelations
argument_list|,
name|rel
operator|.
name|getJoinType
argument_list|()
argument_list|)
decl_stmt|;
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|CollectRel
name|rel
parameter_list|)
block|{
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|UncollectRel
name|rel
parameter_list|)
block|{
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|IntersectRel
name|rel
parameter_list|)
block|{
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|MinusRel
name|rel
parameter_list|)
block|{
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|UnionRel
name|rel
parameter_list|)
block|{
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|OneRowRel
name|rel
parameter_list|)
block|{
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|ValuesRel
name|rel
parameter_list|)
block|{
comment|// NOTE jvs 30-Apr-2006:  UDT instances require invocation
comment|// of a constructor method, which can't be represented
comment|// by the tuples stored in a ValuesRel, so we don't have
comment|// to worry about them here.
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|TableFunctionRel
name|rel
parameter_list|)
block|{
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|SamplingRel
name|rel
parameter_list|)
block|{
name|rewriteGeneric
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|ProjectRel
name|rel
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|flattenedExpList
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|flattenedFieldNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
name|RelOptUtil
operator|.
name|getFieldNames
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|flattenProjections
argument_list|(
name|rel
operator|.
name|getProjectExps
argument_list|()
argument_list|,
name|fieldNames
argument_list|,
literal|""
argument_list|,
name|flattenedExpList
argument_list|,
name|flattenedFieldNameList
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
index|[]
name|flattenedExps
init|=
operator|(
name|RexNode
index|[]
operator|)
name|flattenedExpList
operator|.
name|toArray
argument_list|(
name|RexNode
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|flattenedFieldNames
init|=
operator|(
name|String
index|[]
operator|)
name|flattenedFieldNameList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|flattenedFieldNameList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|RelNode
name|newRel
init|=
name|CalcRel
operator|.
name|createProject
argument_list|(
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
argument_list|,
name|flattenedExps
argument_list|,
name|flattenedFieldNames
argument_list|)
decl_stmt|;
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|CalcRel
name|rel
parameter_list|)
block|{
comment|// Translate the child.
specifier|final
name|RelNode
name|newChild
init|=
name|getNewForOldRel
argument_list|(
name|rel
operator|.
name|getChild
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|rel
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|RexProgramBuilder
name|programBuilder
init|=
operator|new
name|RexProgramBuilder
argument_list|(
name|newChild
operator|.
name|getRowType
argument_list|()
argument_list|,
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
comment|// Convert the common expressions.
specifier|final
name|RexProgram
name|program
init|=
name|rel
operator|.
name|getProgram
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|program
operator|.
name|getExprList
argument_list|()
control|)
block|{
name|programBuilder
operator|.
name|registerInput
argument_list|(
name|flattenFieldAccesses
argument_list|(
name|expr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Convert the projections.
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|flattenedExpList
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|flattenedFieldNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
name|RelOptUtil
operator|.
name|getFieldNames
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|flattenProjections
argument_list|(
operator|(
name|RexNode
index|[]
operator|)
name|program
operator|.
name|getProjectList
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|RexNode
index|[
name|program
operator|.
name|getProjectList
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|fieldNames
argument_list|,
literal|""
argument_list|,
name|flattenedExpList
argument_list|,
name|flattenedFieldNameList
argument_list|)
expr_stmt|;
comment|// Register each of the new projections.
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|RexNode
name|flattenedExp
range|:
name|flattenedExpList
control|)
block|{
operator|++
name|i
expr_stmt|;
name|programBuilder
operator|.
name|addProject
argument_list|(
name|flattenedExp
argument_list|,
name|flattenedFieldNameList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Translate the condition.
specifier|final
name|RexLocalRef
name|conditionRef
init|=
name|program
operator|.
name|getCondition
argument_list|()
decl_stmt|;
if|if
condition|(
name|conditionRef
operator|!=
literal|null
condition|)
block|{
name|programBuilder
operator|.
name|addCondition
argument_list|(
operator|new
name|RexLocalRef
argument_list|(
name|getNewForOldInput
argument_list|(
name|conditionRef
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|conditionRef
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RexProgram
name|newProgram
init|=
name|programBuilder
operator|.
name|getProgram
argument_list|()
decl_stmt|;
comment|// Create a new calc relational expression.
name|CalcRel
name|newRel
init|=
operator|new
name|CalcRel
argument_list|(
name|cluster
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newChild
argument_list|,
name|newProgram
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
name|newProgram
argument_list|,
name|Collections
operator|.
expr|<
name|RelCollation
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|SelfFlatteningRel
name|rel
parameter_list|)
block|{
name|rel
operator|.
name|flattenRel
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewriteGeneric
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|RelNode
name|newRel
init|=
name|rel
operator|.
name|clone
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|oldInputs
init|=
name|rel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldInputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|newRel
operator|.
name|replaceInput
argument_list|(
name|i
argument_list|,
name|getNewForOldRel
argument_list|(
name|oldInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|flattenProjections
parameter_list|(
name|RexNode
index|[]
name|exps
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|,
name|String
name|prefix
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|flattenedExps
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|flattenedFieldNames
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exps
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|RexNode
name|exp
init|=
name|exps
index|[
name|i
index|]
decl_stmt|;
name|String
name|fieldName
init|=
operator|(
operator|(
name|fieldNames
operator|==
literal|null
operator|)
operator|||
operator|(
name|fieldNames
index|[
name|i
index|]
operator|==
literal|null
operator|)
operator|)
condition|?
operator|(
literal|"$"
operator|+
name|i
operator|)
else|:
name|fieldNames
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|fieldName
operator|=
name|prefix
operator|+
literal|"$"
operator|+
name|fieldName
expr_stmt|;
block|}
name|flattenProjection
argument_list|(
name|exp
argument_list|,
name|fieldName
argument_list|,
name|flattenedExps
argument_list|,
name|flattenedFieldNames
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flattenProjection
parameter_list|(
name|RexNode
name|exp
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|flattenedExps
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|flattenedFieldNames
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|.
name|getType
argument_list|()
operator|.
name|isStruct
argument_list|()
condition|)
block|{
if|if
condition|(
name|exp
operator|instanceof
name|RexInputRef
condition|)
block|{
name|RexInputRef
name|inputRef
init|=
operator|(
name|RexInputRef
operator|)
name|exp
decl_stmt|;
name|int
name|newOffset
init|=
name|getNewForOldInput
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
comment|// expand to range
name|RelDataType
name|flattenedType
init|=
name|SqlTypeUtil
operator|.
name|flattenRecordType
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|exp
operator|.
name|getType
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fieldList
init|=
name|flattenedType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|fieldList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
operator|++
name|j
control|)
block|{
name|RelDataTypeField
name|field
init|=
name|fieldList
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|flattenedExps
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|newOffset
operator|+
name|j
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|flattenedFieldNames
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|isConstructor
argument_list|(
name|exp
argument_list|)
operator|||
name|exp
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|Cast
argument_list|)
condition|)
block|{
comment|// REVIEW jvs 27-Feb-2005:  for cast, see corresponding note
comment|// in RewriteRexShuttle
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|exp
decl_stmt|;
if|if
condition|(
name|exp
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|NewSpecification
argument_list|)
condition|)
block|{
comment|// For object constructors, prepend a FALSE null
comment|// indicator.
name|flattenedExps
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|flattenedFieldNames
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|exp
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|Cast
argument_list|)
condition|)
block|{
if|if
condition|(
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|exp
operator|)
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Translate CAST(NULL AS UDT) into
comment|// the correct number of null fields.
name|flattenNullLiteral
argument_list|(
name|exp
operator|.
name|getType
argument_list|()
argument_list|,
name|flattenedExps
argument_list|,
name|flattenedFieldNames
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|flattenProjections
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|,
operator|new
name|String
index|[
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|length
index|]
argument_list|,
name|fieldName
argument_list|,
name|flattenedExps
argument_list|,
name|flattenedFieldNames
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|exp
operator|instanceof
name|RexCall
condition|)
block|{
comment|// NOTE jvs 10-Feb-2005:  This is a lame hack to keep special
comment|// functions which return row types working.
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|exp
operator|.
name|getType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|RexNode
name|cloneCall
init|=
name|exp
operator|.
name|clone
argument_list|()
decl_stmt|;
name|RexNode
name|fieldAccess
init|=
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|cloneCall
argument_list|,
name|field
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|flattenedExps
operator|.
name|add
argument_list|(
name|fieldAccess
argument_list|)
expr_stmt|;
name|flattenedFieldNames
operator|.
name|add
argument_list|(
name|fieldName
operator|+
literal|"$"
operator|+
operator|(
name|j
operator|++
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
name|exp
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|exp
operator|=
name|flattenFieldAccesses
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|flattenedExps
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|flattenedFieldNames
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flattenNullLiteral
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|flattenedExps
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|flattenedFieldNames
parameter_list|)
block|{
name|RelDataType
name|flattenedType
init|=
name|SqlTypeUtil
operator|.
name|flattenRecordType
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|flattenedType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|flattenedExps
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|flattenedFieldNames
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isConstructor
parameter_list|(
name|RexNode
name|rexNode
parameter_list|)
block|{
comment|// TODO jvs 11-Feb-2005:  share code with SqlToRelConverter
if|if
condition|(
operator|!
operator|(
name|rexNode
operator|instanceof
name|RexCall
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|rexNode
decl_stmt|;
return|return
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"row"
argument_list|)
operator|||
operator|(
name|call
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|NewSpecification
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|rewriteRel
parameter_list|(
name|TableAccessRel
name|rel
parameter_list|)
block|{
name|RelNode
name|newRel
init|=
name|rel
operator|.
name|getTable
argument_list|()
operator|.
name|toRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
name|setNewForOldRel
argument_list|(
name|rel
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Interfaces -------------------------------------------------------
specifier|public
interface|interface
name|SelfFlatteningRel
extends|extends
name|RelNode
block|{
name|void
name|flattenRel
parameter_list|(
name|RelStructuredTypeFlattener
name|flattener
parameter_list|)
function_decl|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|private
class|class
name|RewriteRelVisitor
extends|extends
name|RelVisitor
block|{
specifier|private
specifier|final
name|ReflectiveVisitDispatcher
argument_list|<
name|RelStructuredTypeFlattener
argument_list|,
name|RelNode
argument_list|>
name|dispatcher
init|=
name|ReflectUtil
operator|.
name|createDispatcher
argument_list|(
name|RelStructuredTypeFlattener
operator|.
name|class
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// implement RelVisitor
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|p
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
comment|// rewrite children first
name|super
operator|.
name|visit
argument_list|(
name|p
argument_list|,
name|ordinal
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|currentRel
operator|=
name|p
expr_stmt|;
specifier|final
name|String
name|visitMethodName
init|=
literal|"rewriteRel"
decl_stmt|;
name|boolean
name|found
init|=
name|dispatcher
operator|.
name|invokeVisitor
argument_list|(
name|RelStructuredTypeFlattener
operator|.
name|this
argument_list|,
name|currentRel
argument_list|,
name|visitMethodName
argument_list|)
decl_stmt|;
name|currentRel
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// for leaves, it's usually safe to assume that
comment|// no transformation is required
name|rewriteGeneric
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"no '"
operator|+
name|visitMethodName
operator|+
literal|"' method found for class "
operator|+
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
class|class
name|RewriteRexShuttle
extends|extends
name|RexShuttle
block|{
comment|// override RexShuttle
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|input
parameter_list|)
block|{
specifier|final
name|int
name|oldIndex
init|=
name|input
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|int
name|newIndex
init|=
name|getNewForOldInput
argument_list|(
name|oldIndex
argument_list|)
decl_stmt|;
comment|// FIXME: jhyde, 2005/12/3: Once indicator fields have been
comment|//  introduced, the new field type may be very different to the
comment|//  old field type. We should look at the actual flattened types,
comment|//  rather than trying to deduce the type from the current type.
name|RelDataType
name|fieldType
init|=
name|removeDistinct
argument_list|(
name|input
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|RexInputRef
name|newInput
init|=
operator|new
name|RexInputRef
argument_list|(
name|newIndex
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
return|return
name|newInput
return|;
block|}
specifier|private
name|RelDataType
name|removeDistinct
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|!=
name|SqlTypeName
operator|.
name|DISTINCT
condition|)
block|{
return|return
name|type
return|;
block|}
return|return
name|type
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
return|;
block|}
comment|// override RexShuttle
specifier|public
name|RexNode
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
comment|// walk down the field access path expression, calculating
comment|// the desired input number
name|int
name|iInput
init|=
literal|0
decl_stmt|;
name|RelDataType
name|fieldType
init|=
name|removeDistinct
argument_list|(
name|fieldAccess
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|RexNode
name|refExp
init|=
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
decl_stmt|;
name|int
name|ordinal
init|=
name|refExp
operator|.
name|getType
argument_list|()
operator|.
name|getFieldOrdinal
argument_list|(
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|iInput
operator|+=
name|calculateFlattenedOffset
argument_list|(
name|refExp
operator|.
name|getType
argument_list|()
argument_list|,
name|ordinal
argument_list|)
expr_stmt|;
if|if
condition|(
name|refExp
operator|instanceof
name|RexInputRef
condition|)
block|{
name|RexInputRef
name|inputRef
init|=
operator|(
name|RexInputRef
operator|)
name|refExp
decl_stmt|;
name|iInput
operator|+=
name|getNewForOldInput
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RexInputRef
argument_list|(
name|iInput
argument_list|,
name|fieldType
argument_list|)
return|;
block|}
if|else if
condition|(
name|refExp
operator|instanceof
name|RexCorrelVariable
condition|)
block|{
return|return
name|fieldAccess
return|;
block|}
if|else if
condition|(
name|refExp
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|Cast
argument_list|)
condition|)
block|{
comment|// REVIEW jvs 27-Feb-2005:  what about a cast between
comment|// different user-defined types (once supported)?
name|RexCall
name|cast
init|=
operator|(
name|RexCall
operator|)
name|refExp
decl_stmt|;
name|refExp
operator|=
name|cast
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|refExp
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|NewSpecification
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|RexCall
operator|)
name|refExp
operator|)
operator|.
name|getOperands
argument_list|()
index|[
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getIndex
argument_list|()
index|]
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|refExp
operator|instanceof
name|RexFieldAccess
operator|)
condition|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
name|refExp
argument_list|)
throw|;
block|}
name|fieldAccess
operator|=
operator|(
name|RexFieldAccess
operator|)
name|refExp
expr_stmt|;
block|}
block|}
comment|// override RexShuttle
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|rexCall
parameter_list|)
block|{
if|if
condition|(
name|rexCall
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|Cast
argument_list|)
condition|)
block|{
name|RexNode
name|input
init|=
name|rexCall
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|RelDataType
name|targetType
init|=
name|removeDistinct
argument_list|(
name|rexCall
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|targetType
argument_list|,
name|input
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|rexCall
operator|.
name|isA
argument_list|(
name|RexKind
operator|.
name|Comparison
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|rexCall
argument_list|)
return|;
block|}
name|RexNode
name|lhs
init|=
name|rexCall
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|lhs
operator|.
name|getType
argument_list|()
operator|.
name|isStruct
argument_list|()
condition|)
block|{
comment|// NOTE jvs 9-Mar-2005:  Calls like IS NULL operate
comment|// on the representative null indicator.  Since it comes
comment|// first, we don't have to do any special translation.
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|rexCall
argument_list|)
return|;
block|}
comment|// NOTE jvs 22-Mar-2005:  Likewise, the null indicator takes
comment|// care of comparison null semantics without any special casing.
return|return
name|flattenComparison
argument_list|(
name|rexBuilder
argument_list|,
name|rexCall
operator|.
name|getOperator
argument_list|()
argument_list|,
name|rexCall
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|flattenComparison
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|SqlOperator
name|op
parameter_list|,
name|RexNode
index|[]
name|exprs
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|flattenedExps
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|flattenProjections
argument_list|(
name|exprs
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
name|flattenedExps
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|flattenedExps
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|boolean
name|negate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|NOT_EQUALS
condition|)
block|{
name|negate
operator|=
literal|true
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|equalsOperator
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|n
operator|>
literal|1
operator|)
operator|&&
name|op
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"inequality comparison for row types"
argument_list|)
throw|;
block|}
name|RexNode
name|conjunction
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|RexNode
name|comparison
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|,
name|flattenedExps
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|flattenedExps
operator|.
name|get
argument_list|(
name|i
operator|+
name|n
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|conjunction
operator|==
literal|null
condition|)
block|{
name|conjunction
operator|=
name|comparison
expr_stmt|;
block|}
else|else
block|{
name|conjunction
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|andOperator
argument_list|,
name|conjunction
argument_list|,
name|comparison
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|negate
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|notOperator
argument_list|,
name|conjunction
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|conjunction
return|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End RelStructuredTypeFlattener.java
end_comment

end_unit

