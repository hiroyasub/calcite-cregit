begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Definition of the "TRIM" builtin SQL function.  *  * @author Wael Chatila, Julian Hyde  * @version $Id$  * @since May 28, 2004  */
end_comment

begin_class
specifier|public
class|class
name|SqlTrimFunction
extends|extends
name|SqlFunction
block|{
comment|//~ Enums ------------------------------------------------------------------
comment|/**      * Defines the enumerated values "LEADING", "TRAILING", "BOTH".      */
specifier|public
enum|enum
name|Flag
implements|implements
name|SqlLiteral
operator|.
name|SqlSymbol
block|{
name|BOTH
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|LEADING
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
block|,
name|TRAILING
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|left
decl_stmt|;
specifier|private
specifier|final
name|int
name|right
decl_stmt|;
name|Flag
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
specifier|public
name|int
name|getLeft
parameter_list|()
block|{
return|return
name|left
return|;
block|}
specifier|public
name|int
name|getRight
parameter_list|()
block|{
return|return
name|right
return|;
block|}
block|}
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlTrimFunction
parameter_list|()
block|{
name|super
argument_list|(
literal|"TRIM"
argument_list|,
name|SqlKind
operator|.
name|TRIM
argument_list|,
operator|new
name|SqlTypeTransformCascade
argument_list|(
name|SqlTypeStrategies
operator|.
name|rtiThirdArgType
argument_list|,
name|SqlTypeTransforms
operator|.
name|toNullable
argument_list|,
name|SqlTypeTransforms
operator|.
name|toVarying
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SqlTypeStrategies
operator|.
name|otcStringSameX2
argument_list|,
name|SqlFunctionCategory
operator|.
name|String
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
comment|// REVIEW jvs 2-June-2005:  shouldn't this be TwoOrThree?
comment|// Also, inconsistent with with otc above!
return|return
name|SqlOperandCountRange
operator|.
name|Three
return|;
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|operands
index|[
literal|0
index|]
operator|instanceof
name|SqlLiteral
assert|;
name|operands
index|[
literal|0
index|]
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|operands
index|[
literal|1
index|]
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|"FROM"
argument_list|)
expr_stmt|;
name|operands
index|[
literal|2
index|]
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endFunCall
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSignatureTemplate
parameter_list|(
specifier|final
name|int
name|operandsCount
parameter_list|)
block|{
switch|switch
condition|(
name|operandsCount
condition|)
block|{
case|case
literal|2
case|:
return|return
literal|"{0}({1} FROM {2})"
return|;
case|case
literal|3
case|:
return|return
literal|"{0}({1} {2} FROM {3})"
return|;
block|}
assert|assert
operator|(
literal|false
operator|)
assert|;
return|return
literal|null
return|;
block|}
specifier|public
name|SqlCall
name|createCall
parameter_list|(
name|SqlLiteral
name|functionQualifier
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
name|SqlNode
modifier|...
name|operands
parameter_list|)
block|{
assert|assert
name|functionQualifier
operator|==
literal|null
assert|;
comment|// Be defensive, in case the parser instantiates a call using say
comment|// "TRIM"('a').
if|if
condition|(
name|operands
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|operands
operator|=
operator|new
name|SqlNode
index|[]
block|{
operator|(
name|operands
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|operands
index|[
literal|0
index|]
else|:
literal|null
block|,
operator|(
name|operands
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
name|operands
index|[
literal|1
index|]
else|:
literal|null
block|,
operator|(
name|operands
operator|.
name|length
operator|>
literal|2
operator|)
condition|?
name|operands
index|[
literal|2
index|]
else|:
name|SqlLiteral
operator|.
name|createNull
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
block|}
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|operands
index|[
literal|0
index|]
condition|)
block|{
name|operands
index|[
literal|0
index|]
operator|=
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|Flag
operator|.
name|BOTH
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|operands
index|[
literal|1
index|]
condition|)
block|{
name|operands
index|[
literal|1
index|]
operator|=
name|SqlLiteral
operator|.
name|createCharString
argument_list|(
literal|" "
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|createCall
argument_list|(
name|functionQualifier
argument_list|,
name|pos
argument_list|,
name|operands
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
name|SqlCall
name|call
init|=
name|callBinding
operator|.
name|getCall
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|SqlTypeStrategies
operator|.
name|otcString
operator|.
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|call
operator|.
name|operands
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|throwOnFailure
argument_list|)
condition|)
block|{
if|if
condition|(
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|newValidationSignatureError
argument_list|()
throw|;
block|}
return|return
literal|false
return|;
block|}
block|}
name|SqlNode
index|[]
name|ops
init|=
block|{
name|call
operator|.
name|operands
index|[
literal|1
index|]
block|,
name|call
operator|.
name|operands
index|[
literal|2
index|]
block|}
decl_stmt|;
return|return
name|SqlTypeUtil
operator|.
name|isCharTypeComparable
argument_list|(
name|callBinding
argument_list|,
name|ops
argument_list|,
name|throwOnFailure
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlTrimFunction.java
end_comment

end_unit

