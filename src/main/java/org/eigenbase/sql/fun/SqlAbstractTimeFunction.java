begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resource
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Base class for time functions such as "LOCALTIME", "LOCALTIME(n)".  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|SqlAbstractTimeFunction
extends|extends
name|SqlFunction
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|otcCustom
init|=
name|SqlTypeStrategies
operator|.
name|or
argument_list|(
name|SqlTypeStrategies
operator|.
name|otcPositiveIntLit
argument_list|,
name|SqlTypeStrategies
operator|.
name|otcNiladic
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlTypeName
name|typeName
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|SqlAbstractTimeFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlTypeName
name|typeName
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|otcCustom
argument_list|,
name|SqlFunctionCategory
operator|.
name|TimeDate
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlSyntax
name|getSyntax
parameter_list|()
block|{
return|return
name|SqlSyntax
operator|.
name|FunctionId
return|;
block|}
specifier|public
name|RelDataType
name|inferReturnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
comment|// REVIEW jvs 20-Feb-2005: Need to take care of time zones.
name|int
name|precision
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|opBinding
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|RelDataType
name|type
init|=
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isNumeric
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|precision
operator|=
name|opBinding
operator|.
name|getIntLiteralOperand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|precision
operator|>=
literal|0
operator|)
assert|;
if|if
condition|(
name|precision
operator|>
name|SqlTypeName
operator|.
name|MAX_DATETIME_PRECISION
condition|)
block|{
throw|throw
name|opBinding
operator|.
name|newError
argument_list|(
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|ArgumentMustBeValidPrecision
operator|.
name|ex
argument_list|(
name|opBinding
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"0"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|SqlTypeName
operator|.
name|MAX_DATETIME_PRECISION
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|,
name|precision
argument_list|)
return|;
block|}
comment|// All of the time functions are increasing. Not strictly increasing.
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
return|return
name|SqlMonotonicity
operator|.
name|Increasing
return|;
block|}
comment|// Plans referencing context variables should never be cached
specifier|public
name|boolean
name|isDynamicFunction
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlAbstractTimeFunction.java
end_comment

end_unit

