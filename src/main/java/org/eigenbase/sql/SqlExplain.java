begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>SqlExplain</code> is a node of a parse tree which represents an  * EXPLAIN PLAN statement.  */
end_comment

begin_class
specifier|public
class|class
name|SqlExplain
extends|extends
name|SqlCall
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|// constants representing operand positions
specifier|public
specifier|static
specifier|final
name|int
name|EXPLICANDUM_OPERAND
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DETAIL_LEVEL_OPERAND
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEPTH_OPERAND
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|AS_XML_OPERAND
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OPERAND_COUNT
init|=
literal|4
decl_stmt|;
comment|//~ Enums ------------------------------------------------------------------
comment|/**      * The level of abstraction with which to display the plan.      */
specifier|public
specifier|static
enum|enum
name|Depth
implements|implements
name|SqlLiteral
operator|.
name|SqlSymbol
block|{
name|Type
block|,
name|Logical
block|,
name|Physical
block|;
comment|/** Creates a parse-tree node representing an occurrence of this symbol          * at a particular position in the parsed text. */
specifier|public
name|SqlLiteral
name|symbol
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|this
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|int
name|nDynamicParams
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlExplain
parameter_list|(
name|SqlSpecialOperator
name|operator
parameter_list|,
name|SqlNode
name|explicandum
parameter_list|,
name|SqlLiteral
name|detailLevel
parameter_list|,
name|SqlLiteral
name|depth
parameter_list|,
name|SqlLiteral
name|asXml
parameter_list|,
name|int
name|nDynamicParams
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|operator
argument_list|,
operator|new
name|SqlNode
index|[
name|OPERAND_COUNT
index|]
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|operands
index|[
name|EXPLICANDUM_OPERAND
index|]
operator|=
name|explicandum
expr_stmt|;
name|operands
index|[
name|DETAIL_LEVEL_OPERAND
index|]
operator|=
name|detailLevel
expr_stmt|;
name|operands
index|[
name|DEPTH_OPERAND
index|]
operator|=
name|depth
expr_stmt|;
name|operands
index|[
name|AS_XML_OPERAND
index|]
operator|=
name|asXml
expr_stmt|;
name|this
operator|.
name|nDynamicParams
operator|=
name|nDynamicParams
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * @return the underlying SQL statement to be explained      */
specifier|public
name|SqlNode
name|getExplicandum
parameter_list|()
block|{
return|return
name|operands
index|[
name|EXPLICANDUM_OPERAND
index|]
return|;
block|}
comment|/**      * @return detail level to be generated      */
specifier|public
name|SqlExplainLevel
name|getDetailLevel
parameter_list|()
block|{
return|return
operator|(
name|SqlExplainLevel
operator|)
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|operands
index|[
name|DETAIL_LEVEL_OPERAND
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns the level of abstraction at which this plan should be displayed.      */
specifier|public
name|Depth
name|getDepth
parameter_list|()
block|{
return|return
operator|(
name|Depth
operator|)
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|operands
index|[
name|DEPTH_OPERAND
index|]
argument_list|)
return|;
block|}
comment|/**      * @return the number of dynamic parameters in the statement      */
specifier|public
name|int
name|getDynamicParamCount
parameter_list|()
block|{
return|return
name|nDynamicParams
return|;
block|}
comment|/**      * @return whether physical plan implementation should be returned      */
specifier|public
name|boolean
name|withImplementation
parameter_list|()
block|{
return|return
name|getDepth
argument_list|()
operator|==
name|Depth
operator|.
name|Physical
return|;
block|}
comment|/**      * @return whether type should be returned      */
specifier|public
name|boolean
name|withType
parameter_list|()
block|{
return|return
name|getDepth
argument_list|()
operator|==
name|Depth
operator|.
name|Type
return|;
block|}
comment|/**      * Returns whether result is to be in XML format.      */
specifier|public
name|boolean
name|isXml
parameter_list|()
block|{
return|return
name|SqlLiteral
operator|.
name|booleanValue
argument_list|(
name|operands
index|[
name|AS_XML_OPERAND
index|]
argument_list|)
return|;
block|}
comment|// implement SqlNode
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"EXPLAIN PLAN"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getDetailLevel
argument_list|()
condition|)
block|{
case|case
name|NO_ATTRIBUTES
case|:
name|writer
operator|.
name|keyword
argument_list|(
literal|"EXCLUDING ATTRIBUTES"
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXPPLAN_ATTRIBUTES
case|:
name|writer
operator|.
name|keyword
argument_list|(
literal|"INCLUDING ATTRIBUTES"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALL_ATTRIBUTES
case|:
name|writer
operator|.
name|keyword
argument_list|(
literal|"INCLUDING ALL ATTRIBUTES"
argument_list|)
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|getDepth
argument_list|()
condition|)
block|{
case|case
name|Type
case|:
name|writer
operator|.
name|keyword
argument_list|(
literal|"WITH TYPE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Logical
case|:
name|writer
operator|.
name|keyword
argument_list|(
literal|"WITHOUT IMPLEMENTATION"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Physical
case|:
name|writer
operator|.
name|keyword
argument_list|(
literal|"WITH IMPLEMENTATION"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
if|if
condition|(
name|isXml
argument_list|()
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"AS XML"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|keyword
argument_list|(
literal|"FOR"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newlineAndIndent
argument_list|()
expr_stmt|;
name|getExplicandum
argument_list|()
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|getOperator
argument_list|()
operator|.
name|getLeftPrec
argument_list|()
argument_list|,
name|getOperator
argument_list|()
operator|.
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SqlExplain.java
end_comment

end_unit

