begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resource
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * An operator describing a window function specification.  *  *<p>Operands are as follows:  *  *<ul>  *<li>0: name of window function ({@link org.eigenbase.sql.SqlCall})</li>  *<li>1: window name ({@link org.eigenbase.sql.SqlLiteral}) or window in-line  * specification ({@link SqlWindowOperator})</li>  *</ul>  *</p>  *  * @author klo  * @version $Id$  * @since Nov 4, 2004  */
end_comment

begin_class
specifier|public
class|class
name|SqlOverOperator
extends|extends
name|SqlBinaryOperator
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlOverOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"OVER"
argument_list|,
name|SqlKind
operator|.
name|OVER
argument_list|,
literal|20
argument_list|,
literal|true
argument_list|,
name|SqlTypeStrategies
operator|.
name|rtiFirstArgType
argument_list|,
literal|null
argument_list|,
name|SqlTypeStrategies
operator|.
name|otcAnyX2
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|validateCall
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlValidatorScope
name|operandScope
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|this
assert|;
specifier|final
name|SqlNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
assert|assert
name|operands
operator|.
name|length
operator|==
literal|2
assert|;
name|SqlCall
name|aggCall
init|=
operator|(
name|SqlCall
operator|)
name|operands
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|aggCall
operator|.
name|getOperator
argument_list|()
operator|.
name|isAggregator
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|aggCall
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|OverNonAggregate
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
name|validator
operator|.
name|validateWindow
argument_list|(
name|operands
index|[
literal|1
index|]
argument_list|,
name|scope
argument_list|,
name|aggCall
argument_list|)
expr_stmt|;
name|validator
operator|.
name|validateAggregateParams
argument_list|(
name|aggCall
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|deriveType
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
comment|// Do not try to derive the types of the operands. We will do that
comment|// later, top down.
return|return
name|validateOperands
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|call
argument_list|)
return|;
block|}
comment|/*      * Accepts a {@link SqlVisitor}, and tells it to visit each child.      *      * @param visitor Visitor.      */
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|acceptCall
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|boolean
name|onlyExpressions
parameter_list|,
name|SqlBasicVisitor
operator|.
name|ArgHandler
argument_list|<
name|R
argument_list|>
name|argHandler
parameter_list|)
block|{
if|if
condition|(
name|onlyExpressions
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|call
operator|.
name|operands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SqlNode
name|operand
init|=
name|call
operator|.
name|operands
index|[
name|i
index|]
decl_stmt|;
comment|// if the second parm is an Identifier then it's supposed to
comment|// be a name from a window clause and isn't part of the
comment|// group by check
if|if
condition|(
name|operand
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|i
operator|==
literal|1
operator|)
operator|&&
operator|(
name|operand
operator|instanceof
name|SqlIdentifier
operator|)
condition|)
block|{
continue|continue;
block|}
name|argHandler
operator|.
name|visitChild
argument_list|(
name|visitor
argument_list|,
name|call
argument_list|,
name|i
argument_list|,
name|operand
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|acceptCall
argument_list|(
name|visitor
argument_list|,
name|call
argument_list|,
name|onlyExpressions
argument_list|,
name|argHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlOverOperator.java
end_comment

end_unit

