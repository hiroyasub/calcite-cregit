begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_comment
comment|/**  * SqlOrderByOperator is used to represent an ORDER BY on a query other than a  * SELECT (e.g. VALUES or UNION). It is a purely syntactic operator, and is  * eliminated by SqlValidator.performUnconditionalRewrites and replaced with the  * ORDER_OPERAND of SqlSelect.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|SqlOrderByOperator
extends|extends
name|SqlSpecialOperator
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|// constants representing operand positions
specifier|public
specifier|static
specifier|final
name|int
name|QUERY_OPERAND
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ORDER_OPERAND
init|=
literal|1
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlOrderByOperator
parameter_list|()
block|{
comment|// NOTE:  make precedence lower then SELECT to avoid extra parens
name|super
argument_list|(
literal|"ORDER BY"
argument_list|,
name|SqlKind
operator|.
name|ORDER_BY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlSyntax
name|getSyntax
parameter_list|()
block|{
return|return
name|SqlSyntax
operator|.
name|Postfix
return|;
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
assert|assert
operator|(
name|operands
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|OrderBy
argument_list|)
decl_stmt|;
name|operands
index|[
name|QUERY_OPERAND
index|]
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|getLeftPrec
argument_list|()
argument_list|,
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|listFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|OrderByList
argument_list|)
decl_stmt|;
name|unparseListClause
argument_list|(
name|writer
argument_list|,
name|operands
index|[
name|ORDER_OPERAND
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|listFrame
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SqlOrderByOperator.java
end_comment

end_unit

