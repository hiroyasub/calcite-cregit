begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A class that describes how many operands an operator can take.  *  * @author Wael Chatila  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|SqlOperandCountRange
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|// common usage instances
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|Variadic
init|=
operator|new
name|SqlOperandCountRange
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|Zero
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|ZeroOrOne
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|One
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|OneOrTwo
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|Two
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|TwoOrThree
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|Three
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|ThreeOrFour
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlOperandCountRange
name|Four
init|=
operator|new
name|SqlOperandCountRange
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|possibleList
decl_stmt|;
specifier|private
name|boolean
name|isVariadic
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * This constructor should only be called internally from this class and      * only when creating a variadic count descriptor      */
specifier|private
name|SqlOperandCountRange
parameter_list|()
block|{
name|possibleList
operator|=
literal|null
expr_stmt|;
name|isVariadic
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|SqlOperandCountRange
parameter_list|(
name|Integer
index|[]
name|possibleCounts
parameter_list|)
block|{
name|this
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|possibleCounts
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlOperandCountRange
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Integer
index|[]
block|{
name|count
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlOperandCountRange
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|possibleList
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|isVariadic
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|SqlOperandCountRange
parameter_list|(
name|int
name|count1
parameter_list|,
name|int
name|count2
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Integer
index|[]
block|{
name|count1
block|,
name|count2
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlOperandCountRange
parameter_list|(
name|int
name|count1
parameter_list|,
name|int
name|count2
parameter_list|,
name|int
name|count3
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Integer
index|[]
block|{
name|count1
block|,
name|count2
block|,
name|count3
block|}
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Returns a list of allowed operand counts for a non-variadic operator.      *      * @return unmodifiable list of Integer      *      * @pre !isVariadic()      */
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getAllowedList
parameter_list|()
block|{
name|Util
operator|.
name|pre
argument_list|(
operator|!
name|isVariadic
argument_list|,
literal|"!isVariadic"
argument_list|)
expr_stmt|;
return|return
name|possibleList
return|;
block|}
comment|/**      * @return true if any number of operands is allowed      */
specifier|public
name|boolean
name|isVariadic
parameter_list|()
block|{
return|return
name|isVariadic
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlOperandCountRange.java
end_comment

end_unit

