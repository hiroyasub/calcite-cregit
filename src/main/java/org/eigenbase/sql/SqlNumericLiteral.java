begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A numeric SQL literal.  *  * @author jhyde  * @version $Id$  * @since Nov 18, 2004  */
end_comment

begin_class
specifier|public
class|class
name|SqlNumericLiteral
extends|extends
name|SqlLiteral
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|Integer
name|prec
decl_stmt|;
specifier|private
name|Integer
name|scale
decl_stmt|;
specifier|private
name|boolean
name|isExact
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|SqlNumericLiteral
parameter_list|(
name|BigDecimal
name|value
parameter_list|,
name|Integer
name|prec
parameter_list|,
name|Integer
name|scale
parameter_list|,
name|boolean
name|isExact
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|,
name|isExact
condition|?
name|SqlTypeName
operator|.
name|DECIMAL
else|:
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|prec
operator|=
name|prec
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|isExact
operator|=
name|isExact
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|Integer
name|getPrec
parameter_list|()
block|{
return|return
name|prec
return|;
block|}
specifier|public
name|Integer
name|getScale
parameter_list|()
block|{
return|return
name|scale
return|;
block|}
specifier|public
name|boolean
name|isExact
parameter_list|()
block|{
return|return
name|isExact
return|;
block|}
specifier|public
name|SqlNode
name|clone
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
operator|new
name|SqlNumericLiteral
argument_list|(
operator|(
name|BigDecimal
operator|)
name|value
argument_list|,
name|getPrec
argument_list|()
argument_list|,
name|getScale
argument_list|()
argument_list|,
name|isExact
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|writer
operator|.
name|literal
argument_list|(
name|toValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toValue
parameter_list|()
block|{
name|BigDecimal
name|bd
init|=
operator|(
name|BigDecimal
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|isExact
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|createSqlType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
if|if
condition|(
name|isExact
condition|)
block|{
name|int
name|scaleValue
init|=
name|scale
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|scaleValue
condition|)
block|{
name|BigDecimal
name|bd
init|=
operator|(
name|BigDecimal
operator|)
name|value
decl_stmt|;
name|SqlTypeName
name|result
decl_stmt|;
name|long
name|l
init|=
name|bd
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|l
operator|>=
name|Integer
operator|.
name|MIN_VALUE
operator|)
operator|&&
operator|(
name|l
operator|<=
name|Integer
operator|.
name|MAX_VALUE
operator|)
condition|)
block|{
name|result
operator|=
name|SqlTypeName
operator|.
name|INTEGER
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|SqlTypeName
operator|.
name|BIGINT
expr_stmt|;
block|}
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|//else we have a decimal
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|prec
operator|.
name|intValue
argument_list|()
argument_list|,
name|scaleValue
argument_list|)
return|;
block|}
comment|// else we have a a float, real or double.  make them all double for
comment|// now.
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isInteger
parameter_list|()
block|{
return|return
operator|(
literal|0
operator|==
name|scale
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlNumericLiteral.java
end_comment

end_unit

