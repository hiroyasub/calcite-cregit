begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Strategy to infer the type of an operator call from the type of the operands  * by using one {@link SqlReturnTypeInference} rule and a combination of {@link  * SqlTypeTransform}s  *  * @author Wael Chatila  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|SqlTypeTransformCascade
implements|implements
name|SqlReturnTypeInference
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlReturnTypeInference
name|rule
decl_stmt|;
specifier|private
specifier|final
name|SqlTypeTransform
index|[]
name|transforms
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a SqlTypeTransformCascade from a rule and an array of one or more      * transforms.      *      * @pre null!=rule      * @pre null!=transforms      * @pre transforms.length> 0      * @pre transforms[i] != null      */
specifier|public
name|SqlTypeTransformCascade
parameter_list|(
name|SqlReturnTypeInference
name|rule
parameter_list|,
name|SqlTypeTransform
index|[]
name|transforms
parameter_list|)
block|{
name|Util
operator|.
name|pre
argument_list|(
literal|null
operator|!=
name|rule
argument_list|,
literal|"null!=rule"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|pre
argument_list|(
literal|null
operator|!=
name|transforms
argument_list|,
literal|"null!=transforms"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|pre
argument_list|(
name|transforms
operator|.
name|length
operator|>
literal|0
argument_list|,
literal|"transforms.length>0"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transforms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Util
operator|.
name|pre
argument_list|(
name|transforms
index|[
name|i
index|]
operator|!=
literal|null
argument_list|,
literal|"transforms[i] != null"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rule
operator|=
name|rule
expr_stmt|;
name|this
operator|.
name|transforms
operator|=
name|transforms
expr_stmt|;
block|}
comment|/**      * Creates a SqlTypeTransformCascade from a rule and a single transform.      *      * @pre null!=rule      * @pre null!=transform      */
specifier|public
name|SqlTypeTransformCascade
parameter_list|(
name|SqlReturnTypeInference
name|rule
parameter_list|,
name|SqlTypeTransform
name|transform
parameter_list|)
block|{
name|this
argument_list|(
name|rule
argument_list|,
operator|new
name|SqlTypeTransform
index|[]
block|{
name|transform
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a SqlTypeTransformCascade from a rule and two transforms.      *      * @pre null!=rule      * @pre null!=transform0      * @pre null!=transform1      */
specifier|public
name|SqlTypeTransformCascade
parameter_list|(
name|SqlReturnTypeInference
name|rule
parameter_list|,
name|SqlTypeTransform
name|transform0
parameter_list|,
name|SqlTypeTransform
name|transform1
parameter_list|)
block|{
name|this
argument_list|(
name|rule
argument_list|,
operator|new
name|SqlTypeTransform
index|[]
block|{
name|transform0
block|,
name|transform1
block|}
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|RelDataType
name|inferReturnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
name|RelDataType
name|ret
init|=
name|rule
operator|.
name|inferReturnType
argument_list|(
name|opBinding
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transforms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SqlTypeTransform
name|transform
init|=
name|transforms
index|[
name|i
index|]
decl_stmt|;
name|ret
operator|=
name|transform
operator|.
name|transformType
argument_list|(
name|opBinding
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlTypeTransformCascade.java
end_comment

end_unit

