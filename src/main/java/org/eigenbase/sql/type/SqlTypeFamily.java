begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * SqlTypeFamily provides SQL type categorization.  *  *<p>The<em>primary</em> family categorization is a complete disjoint  * partitioning of SQL types into families, where two types are members of the  * same primary family iff instances of the two types can be the operands of an  * SQL equality predicate such as<code>WHERE v1 = v2</code>. Primary families  * are returned by RelDataType.getFamily().  *  *<p>There is also a<em>secondary</em> family categorization which overlaps  * with the primary categorization. It is used in type strategies for more  * specific or more general categorization than the primary families. Secondary  * families are never returned by RelDataType.getFamily().  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_enum
specifier|public
enum|enum
name|SqlTypeFamily
implements|implements
name|RelDataTypeFamily
block|{
comment|// Primary families.
name|CHARACTER
argument_list|(
name|SqlTypeName
operator|.
name|charTypes
argument_list|,
literal|0
argument_list|)
block|,
name|BINARY
argument_list|(
name|SqlTypeName
operator|.
name|binaryTypes
argument_list|,
literal|1
argument_list|)
block|,
name|NUMERIC
argument_list|(
name|SqlTypeName
operator|.
name|numericTypes
argument_list|,
literal|2
argument_list|)
block|,
name|DATE
argument_list|(
operator|new
name|SqlTypeName
index|[]
block|{
name|SqlTypeName
operator|.
name|DATE
block|}
argument_list|,
literal|3
argument_list|)
block|,
name|TIME
argument_list|(
operator|new
name|SqlTypeName
index|[]
block|{
name|SqlTypeName
operator|.
name|TIME
block|}
argument_list|,
literal|4
argument_list|)
block|,
name|TIMESTAMP
argument_list|(
operator|new
name|SqlTypeName
index|[]
block|{
name|SqlTypeName
operator|.
name|TIMESTAMP
block|}
argument_list|,
literal|5
argument_list|)
block|,
name|BOOLEAN
argument_list|(
name|SqlTypeName
operator|.
name|booleanTypes
argument_list|,
literal|6
argument_list|)
block|,
name|INTERVAL_YEAR_MONTH
argument_list|(
operator|new
name|SqlTypeName
index|[]
block|{
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
block|}
argument_list|,
literal|7
argument_list|)
block|,
name|INTERVAL_DAY_TIME
argument_list|(
operator|new
name|SqlTypeName
index|[]
block|{
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
block|}
argument_list|,
literal|8
argument_list|)
block|,
comment|// Secondary families.
name|STRING
argument_list|(
name|SqlTypeName
operator|.
name|stringTypes
argument_list|,
literal|9
argument_list|)
block|,
name|APPROXIMATE_NUMERIC
argument_list|(
name|SqlTypeName
operator|.
name|approxTypes
argument_list|,
literal|10
argument_list|)
block|,
name|EXACT_NUMERIC
argument_list|(
name|SqlTypeName
operator|.
name|exactTypes
argument_list|,
literal|11
argument_list|)
block|,
name|INTEGER
argument_list|(
name|SqlTypeName
operator|.
name|intTypes
argument_list|,
literal|12
argument_list|)
block|,
name|DATETIME
argument_list|(
name|SqlTypeName
operator|.
name|datetimeTypes
argument_list|,
literal|13
argument_list|)
block|,
name|DATETIME_INTERVAL
argument_list|(
name|SqlTypeName
operator|.
name|timeIntervalTypes
argument_list|,
literal|14
argument_list|)
block|,
name|MULTISET
argument_list|(
name|SqlTypeName
operator|.
name|multisetTypes
argument_list|,
literal|15
argument_list|)
block|,
name|ANY
argument_list|(
name|SqlTypeName
operator|.
name|allTypes
argument_list|,
literal|16
argument_list|)
block|,
name|CURSOR
argument_list|(
name|SqlTypeName
operator|.
name|cursorTypes
argument_list|,
literal|17
argument_list|)
block|,
name|COLUMN_LIST
argument_list|(
name|SqlTypeName
operator|.
name|columnListTypes
argument_list|,
literal|18
argument_list|)
block|;
specifier|private
specifier|static
name|SqlTypeFamily
index|[]
name|jdbcTypeToFamily
decl_stmt|;
specifier|private
specifier|static
name|SqlTypeFamily
index|[]
name|sqlTypeToFamily
decl_stmt|;
static|static
block|{
comment|// This squanders some memory since MAX_JDBC_TYPE == 2006!
name|jdbcTypeToFamily
operator|=
operator|new
name|SqlTypeFamily
index|[
operator|(
literal|1
operator|+
name|SqlTypeName
operator|.
name|MAX_JDBC_TYPE
operator|)
operator|-
name|SqlTypeName
operator|.
name|MIN_JDBC_TYPE
index|]
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|BIT
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|REAL
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|,
name|CHARACTER
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|CHARACTER
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|LONGVARCHAR
argument_list|,
name|CHARACTER
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|CLOB
argument_list|,
name|CHARACTER
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|BINARY
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|VARBINARY
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|BLOB
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
name|DATE
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|TIME
argument_list|,
name|TIME
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|,
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|BOOLEAN
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|SqlTypeName
operator|.
name|CURSOR
operator|.
name|getJdbcOrdinal
argument_list|()
argument_list|,
name|CURSOR
argument_list|)
expr_stmt|;
name|setFamilyForJdbcType
argument_list|(
name|SqlTypeName
operator|.
name|COLUMN_LIST
operator|.
name|getJdbcOrdinal
argument_list|()
argument_list|,
name|COLUMN_LIST
argument_list|)
expr_stmt|;
name|sqlTypeToFamily
operator|=
operator|new
name|SqlTypeFamily
index|[
name|SqlTypeName
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|BOOLEAN
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|BOOLEAN
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|CHAR
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|CHARACTER
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|VARCHAR
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|CHARACTER
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|BINARY
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|BINARY
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|VARBINARY
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|BINARY
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|DECIMAL
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|NUMERIC
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|TINYINT
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|NUMERIC
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|SMALLINT
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|NUMERIC
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|INTEGER
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|NUMERIC
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|BIGINT
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|NUMERIC
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|REAL
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|NUMERIC
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|DOUBLE
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|NUMERIC
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|FLOAT
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|NUMERIC
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|DATE
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|DATE
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|TIME
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|TIMESTAMP
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|TIMESTAMP
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|INTERVAL_YEAR_MONTH
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|NULL
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|ANY
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|ANY
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|ANY
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|INTERVAL_DAY_TIME
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|CURSOR
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|CURSOR
expr_stmt|;
name|sqlTypeToFamily
index|[
name|SqlTypeName
operator|.
name|COLUMN_LIST
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|COLUMN_LIST
expr_stmt|;
block|}
comment|/**      * List of {@link SqlTypeName}s included in this family.      */
specifier|private
name|List
argument_list|<
name|SqlTypeName
argument_list|>
name|typeNames
decl_stmt|;
specifier|private
name|int
name|ordinal
decl_stmt|;
specifier|private
name|SqlTypeFamily
parameter_list|(
name|SqlTypeName
index|[]
name|typeNames
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
name|this
operator|.
name|typeNames
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|typeNames
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setFamilyForJdbcType
parameter_list|(
name|int
name|jdbcType
parameter_list|,
name|SqlTypeFamily
name|family
parameter_list|)
block|{
name|jdbcTypeToFamily
index|[
name|jdbcType
operator|-
name|SqlTypeName
operator|.
name|MIN_JDBC_TYPE
index|]
operator|=
name|family
expr_stmt|;
block|}
comment|/**      * Gets the primary family containing a SqlTypeName.      *      * @param sqlTypeName the type of interest      *      * @return containing family, or null for none      */
specifier|public
specifier|static
name|SqlTypeFamily
name|getFamilyForSqlType
parameter_list|(
name|SqlTypeName
name|sqlTypeName
parameter_list|)
block|{
return|return
name|sqlTypeToFamily
index|[
name|sqlTypeName
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
comment|/**      * Gets the primary family containing a JDBC type.      *      * @param jdbcType the JDBC type of interest      *      * @return containing family      */
specifier|public
specifier|static
name|SqlTypeFamily
name|getFamilyForJdbcType
parameter_list|(
name|int
name|jdbcType
parameter_list|)
block|{
return|return
name|jdbcTypeToFamily
index|[
name|jdbcType
operator|-
name|SqlTypeName
operator|.
name|MIN_JDBC_TYPE
index|]
return|;
block|}
comment|/**      * @return collection of {@link SqlTypeName}s included in this family      */
specifier|public
name|Collection
argument_list|<
name|SqlTypeName
argument_list|>
name|getTypeNames
parameter_list|()
block|{
return|return
name|typeNames
return|;
block|}
block|}
end_enum

begin_comment
comment|// End SqlTypeFamily.java
end_comment

end_unit

