begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class allows multiple existing {@link SqlOperandTypeChecker} rules to be  * combined into one rule. For example, allowing an operand to be either string  * or numeric could be done by:  *  *<blockquote>  *<pre><code>  *  * CompositeOperandsTypeChecking newCompositeRule =  *  new CompositeOperandsTypeChecking(  *    Composition.OR,  *    new SqlOperandTypeChecker[]{stringRule, numericRule});  *  *</code></pre>  *</blockquote>  *  * Similary a rule that would only allow a numeric literal can be done by:  *  *<blockquote>  *<pre><code>  *  * CompositeOperandsTypeChecking newCompositeRule =  *  new CompositeOperandsTypeChecking(  *    Composition.AND,  *    new SqlOperandTypeChecker[]{numericRule, literalRule});  *  *</code></pre>  *</blockquote>  *  *<p>Finally, creating a signature expecting a string for the first operand and  * a numeric for the second operand can be done by:  *  *<blockquote>  *<pre><code>  *  * CompositeOperandsTypeChecking newCompositeRule =  *  new CompositeOperandsTypeChecking(  *    Composition.SEQUENCE,  *    new SqlOperandTypeChecker[]{stringRule, numericRule});  *  *</code></pre>  *</blockquote>  *  *<p>For SEQUENCE composition, the rules must be instances of  * SqlSingleOperandTypeChecker, and signature generation is not supported. For  * AND composition, only the first rule is used for signature generation.  *  * @author Wael Chatila  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|CompositeOperandTypeChecker
implements|implements
name|SqlSingleOperandTypeChecker
block|{
comment|//~ Enums ------------------------------------------------------------------
specifier|public
enum|enum
name|Composition
block|{
name|AND
block|,
name|OR
block|,
name|SEQUENCE
block|;     }
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlOperandTypeChecker
index|[]
name|allowedRules
decl_stmt|;
specifier|private
specifier|final
name|Composition
name|composition
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|CompositeOperandTypeChecker
parameter_list|(
name|Composition
name|composition
parameter_list|,
name|SqlOperandTypeChecker
modifier|...
name|allowedRules
parameter_list|)
block|{
name|Util
operator|.
name|pre
argument_list|(
literal|null
operator|!=
name|allowedRules
argument_list|,
literal|"null != allowedRules"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|pre
argument_list|(
name|allowedRules
operator|.
name|length
operator|>
literal|1
argument_list|,
literal|"Not a composite type"
argument_list|)
expr_stmt|;
name|this
operator|.
name|allowedRules
operator|=
name|allowedRules
expr_stmt|;
name|this
operator|.
name|composition
operator|=
name|composition
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlOperandTypeChecker
index|[]
name|getRules
parameter_list|()
block|{
return|return
name|allowedRules
return|;
block|}
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
if|if
condition|(
name|composition
operator|==
name|Composition
operator|.
name|SEQUENCE
condition|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"must override getAllowedSignatures"
argument_list|)
throw|;
block|}
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowedRules
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SqlOperandTypeChecker
name|rule
init|=
name|allowedRules
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|SqlOperator
operator|.
name|NL
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|rule
operator|.
name|getAllowedSignatures
argument_list|(
name|op
argument_list|,
name|opName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|composition
operator|==
name|Composition
operator|.
name|AND
condition|)
block|{
break|break;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
if|if
condition|(
name|composition
operator|==
name|Composition
operator|.
name|SEQUENCE
condition|)
block|{
return|return
operator|new
name|SqlOperandCountRange
argument_list|(
name|allowedRules
operator|.
name|length
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO jvs 2-June-2005:  technically, this is only correct
comment|// for OR, not AND; probably not a big deal
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowedRules
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SqlOperandTypeChecker
name|rule
init|=
name|allowedRules
index|[
name|i
index|]
decl_stmt|;
name|SqlOperandCountRange
name|range
init|=
name|rule
operator|.
name|getOperandCountRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|isVariadic
argument_list|()
condition|)
block|{
return|return
name|SqlOperandCountRange
operator|.
name|Variadic
return|;
block|}
name|set
operator|.
name|addAll
argument_list|(
name|range
operator|.
name|getAllowedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SqlOperandCountRange
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|set
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|checkSingleOperandType
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|SqlNode
name|node
parameter_list|,
name|int
name|iFormalOperand
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
name|Util
operator|.
name|pre
argument_list|(
name|allowedRules
operator|.
name|length
operator|>=
literal|1
argument_list|,
literal|"allowedRules.length>=1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|composition
operator|==
name|Composition
operator|.
name|SEQUENCE
condition|)
block|{
name|SqlSingleOperandTypeChecker
name|singleRule
init|=
operator|(
name|SqlSingleOperandTypeChecker
operator|)
name|allowedRules
index|[
name|iFormalOperand
index|]
decl_stmt|;
return|return
name|singleRule
operator|.
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|node
argument_list|,
literal|0
argument_list|,
name|throwOnFailure
argument_list|)
return|;
block|}
name|int
name|typeErrorCount
init|=
literal|0
decl_stmt|;
name|boolean
name|throwOnAndFailure
init|=
operator|(
name|composition
operator|==
name|Composition
operator|.
name|AND
operator|)
operator|&&
name|throwOnFailure
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowedRules
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SqlSingleOperandTypeChecker
name|rule
init|=
operator|(
name|SqlSingleOperandTypeChecker
operator|)
name|allowedRules
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|rule
operator|.
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|node
argument_list|,
name|iFormalOperand
argument_list|,
name|throwOnAndFailure
argument_list|)
condition|)
block|{
name|typeErrorCount
operator|++
expr_stmt|;
block|}
block|}
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|composition
condition|)
block|{
case|case
name|AND
case|:
name|ret
operator|=
name|typeErrorCount
operator|==
literal|0
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|ret
operator|=
operator|(
name|typeErrorCount
operator|<
name|allowedRules
operator|.
name|length
operator|)
expr_stmt|;
break|break;
default|default:
comment|//should never come here
throw|throw
name|Util
operator|.
name|unexpected
argument_list|(
name|composition
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ret
operator|&&
name|throwOnFailure
condition|)
block|{
comment|//in the case of a composite OR we want to throw an error
comment|//describing in more detail what the problem was, hence doing
comment|//the loop again
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowedRules
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SqlSingleOperandTypeChecker
name|rule
init|=
operator|(
name|SqlSingleOperandTypeChecker
operator|)
name|allowedRules
index|[
name|i
index|]
decl_stmt|;
name|rule
operator|.
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|node
argument_list|,
name|iFormalOperand
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//if no exception thrown, just throw a generic validation
comment|//signature error
throw|throw
name|callBinding
operator|.
name|newValidationSignatureError
argument_list|()
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
name|int
name|typeErrorCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowedRules
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SqlOperandTypeChecker
name|rule
init|=
name|allowedRules
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|composition
operator|==
name|Composition
operator|.
name|SEQUENCE
condition|)
block|{
name|SqlSingleOperandTypeChecker
name|singleRule
init|=
operator|(
name|SqlSingleOperandTypeChecker
operator|)
name|rule
decl_stmt|;
if|if
condition|(
name|i
operator|>=
name|callBinding
operator|.
name|getOperandCount
argument_list|()
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|singleRule
operator|.
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|callBinding
operator|.
name|getCall
argument_list|()
operator|.
name|operands
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|typeErrorCount
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|rule
operator|.
name|checkOperandTypes
argument_list|(
name|callBinding
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|typeErrorCount
operator|++
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|failed
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|composition
condition|)
block|{
case|case
name|AND
case|:
case|case
name|SEQUENCE
case|:
name|failed
operator|=
name|typeErrorCount
operator|>
literal|0
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|failed
operator|=
operator|(
name|typeErrorCount
operator|==
name|allowedRules
operator|.
name|length
operator|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|failed
condition|)
block|{
if|if
condition|(
name|throwOnFailure
condition|)
block|{
comment|//in the case of a composite OR we want to throw an error
comment|//describing in more detail what the problem was, hence doing
comment|//the loop again
if|if
condition|(
name|composition
operator|==
name|Composition
operator|.
name|OR
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowedRules
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allowedRules
index|[
name|i
index|]
operator|.
name|checkOperandTypes
argument_list|(
name|callBinding
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|//if no exception thrown, just throw a generic validation
comment|//signature error
throw|throw
name|callBinding
operator|.
name|newValidationSignatureError
argument_list|()
throw|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

begin_comment
comment|// End CompositeOperandTypeChecker.java
end_comment

end_unit

