begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>SqlJoin</code> is ...  *  * @author jhyde  * @version $Id$  * @since Mar 29, 2003  */
end_comment

begin_class
specifier|public
class|class
name|SqlJoin
extends|extends
name|SqlCall
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|int
name|LEFT_OPERAND
init|=
literal|0
decl_stmt|;
comment|/**      * Operand says whether this is a natural join. Must be constant TRUE or      * FALSE.      */
specifier|public
specifier|static
specifier|final
name|int
name|IS_NATURAL_OPERAND
init|=
literal|1
decl_stmt|;
comment|/**      * Value must be a {@link SqlLiteral}, one of the integer codes for {@link      * SqlJoinOperator.JoinType}.      */
specifier|public
specifier|static
specifier|final
name|int
name|TYPE_OPERAND
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|RIGHT_OPERAND
init|=
literal|3
decl_stmt|;
comment|/**      * Value must be a {@link SqlLiteral}, one of the integer codes for {@link      * SqlJoinOperator.ConditionType}.      */
specifier|public
specifier|static
specifier|final
name|int
name|CONDITION_TYPE_OPERAND
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CONDITION_OPERAND
init|=
literal|5
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlJoin
parameter_list|(
name|SqlJoinOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|operator
argument_list|,
name|operands
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
specifier|final
name|SqlNode
name|getCondition
parameter_list|()
block|{
return|return
name|operands
index|[
name|CONDITION_OPERAND
index|]
return|;
block|}
comment|/**      * Returns a {@link SqlJoinOperator.ConditionType}      *      * @post return != null      */
specifier|public
specifier|final
name|SqlJoinOperator
operator|.
name|ConditionType
name|getConditionType
parameter_list|()
block|{
return|return
operator|(
name|SqlJoinOperator
operator|.
name|ConditionType
operator|)
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|operands
index|[
name|CONDITION_TYPE_OPERAND
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns a {@link SqlJoinOperator.JoinType}      *      * @post return != null      */
specifier|public
specifier|final
name|SqlJoinOperator
operator|.
name|JoinType
name|getJoinType
parameter_list|()
block|{
return|return
operator|(
name|SqlJoinOperator
operator|.
name|JoinType
operator|)
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|operands
index|[
name|TYPE_OPERAND
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|SqlNode
name|getLeft
parameter_list|()
block|{
return|return
name|operands
index|[
name|LEFT_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isNatural
parameter_list|()
block|{
return|return
name|SqlLiteral
operator|.
name|booleanValue
argument_list|(
name|operands
index|[
name|IS_NATURAL_OPERAND
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|SqlNode
name|getRight
parameter_list|()
block|{
return|return
name|operands
index|[
name|RIGHT_OPERAND
index|]
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlJoin.java
end_comment

end_unit

