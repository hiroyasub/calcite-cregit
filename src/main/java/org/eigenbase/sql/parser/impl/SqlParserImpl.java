begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. SqlParserImpl.java */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|trace
operator|.
name|EigenbaseTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|BitString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util14
operator|.
name|DateTimeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resource
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * SQL parser, generated from Parser.jj and CommonParser.jj by JavaCC.  *  *<p>The public wrapper for this parser is {@link SqlParser}.  *  * @author jhyde  * @since Mar 18, 2003  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|SqlParserImpl
extends|extends
name|SqlAbstractParserImpl
implements|implements
name|SqlParserImplConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|tracer
init|=
name|EigenbaseTrace
operator|.
name|getParserTracer
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Metadata
name|metadata
decl_stmt|;
comment|// implement SqlAbstractParserImpl
specifier|public
name|SqlParseException
name|normalizeException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|ex
operator|instanceof
name|ParseException
condition|)
block|{
name|ex
operator|=
name|cleanupParseException
argument_list|(
operator|(
name|ParseException
operator|)
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|convertException
argument_list|(
name|ex
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// implement SqlAbstractParserImpl
specifier|public
name|Metadata
name|getMetadata
parameter_list|()
block|{
synchronized|synchronized
init|(
name|SqlParserImpl
operator|.
name|class
init|)
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|MetadataImpl
argument_list|(
operator|new
name|SqlParserImpl
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
block|}
comment|// implement SqlAbstractParserImpl
specifier|public
name|void
name|setTabSize
parameter_list|(
name|int
name|tabSize
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|setTabSize
argument_list|(
name|tabSize
argument_list|)
expr_stmt|;
block|}
name|void
name|debug_message1
parameter_list|()
throws|throws
name|ParseException
block|{
name|tracer
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
operator|+
literal|" , "
operator|+
name|getToken
argument_list|(
literal|1
argument_list|)
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
specifier|final
specifier|public
name|String
name|NonReservedKeyWord
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|kw
decl_stmt|;
name|kw
operator|=
name|CommonNonReservedKeyWord
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|kw
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Allows parser to be extended with new types of table references.  The  * default implementation of this production is empty.  */
specifier|final
specifier|public
name|SqlNode
name|ExtendedTableRef
parameter_list|()
throws|throws
name|ParseException
block|{
name|UnusedExtension
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Allows an OVER clause following a table expression as an extension to  * standard SQL syntax. The default implementation of this production is empty.  */
specifier|final
specifier|public
name|SqlNode
name|TableOverOpt
parameter_list|()
throws|throws
name|ParseException
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/*  * Parses dialect-specific keywords immediately following the SELECT keyword.  */
specifier|final
specifier|public
name|void
name|SqlSelectKeywords
parameter_list|(
name|List
name|keywords
parameter_list|)
throws|throws
name|ParseException
block|{
name|E
argument_list|()
expr_stmt|;
block|}
comment|/*  * Parses dialect-specific keywords immediately following the INSERT keyword.  */
specifier|final
specifier|public
name|void
name|SqlInsertKeywords
parameter_list|(
name|List
name|keywords
parameter_list|)
throws|throws
name|ParseException
block|{
name|E
argument_list|()
expr_stmt|;
block|}
specifier|final
specifier|public
name|SqlNode
name|ExtendedBuiltinFunctionCall
parameter_list|()
throws|throws
name|ParseException
block|{
name|UnusedExtension
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/* * Parse Floor/Ceil function parameters */
specifier|final
specifier|public
name|SqlNode
name|FloorCeilOptions
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|floorFlag
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|node
decl_stmt|;
name|node
operator|=
name|StandardFloorCeilOptions
argument_list|(
name|pos
argument_list|,
name|floorFlag
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|node
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
name|void
name|E
parameter_list|()
throws|throws
name|ParseException
block|{
block|}
name|List
name|startList
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
name|SqlParserPos
name|getPos
parameter_list|()
throws|throws
name|ParseException
block|{
return|return
operator|new
name|SqlParserPos
argument_list|(
name|token
operator|.
name|beginLine
argument_list|,
name|token
operator|.
name|beginColumn
argument_list|,
name|token
operator|.
name|endLine
argument_list|,
name|token
operator|.
name|endColumn
argument_list|)
return|;
block|}
name|void
name|checkQueryExpression
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
switch|switch
condition|(
name|exprContext
condition|)
block|{
case|case
name|ACCEPT_NONQUERY
case|:
case|case
name|ACCEPT_SUBQUERY
case|:
case|case
name|ACCEPT_CURSOR
case|:
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalQueryExpression
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|void
name|checkNonQueryExpression
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|exprContext
operator|==
name|ExprContext
operator|.
name|ACCEPT_QUERY
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalNonQueryExpression
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|SqlDateLiteral
name|parseDateLiteral
parameter_list|(
name|String
name|s
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|dateStr
init|=
name|SqlParserUtil
operator|.
name|strip
argument_list|(
name|s
argument_list|,
literal|"'"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|DateTimeUtil
operator|.
name|parseDateFormat
argument_list|(
name|dateStr
argument_list|,
name|DateTimeUtil
operator|.
name|DateFormatStr
argument_list|,
name|DateTimeUtil
operator|.
name|gmtZone
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|cal
condition|)
block|{
name|EigenbaseResource
name|res
init|=
name|EigenbaseResource
operator|.
name|instance
argument_list|()
decl_stmt|;
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|res
operator|.
name|IllegalLiteral
operator|.
name|ex
argument_list|(
literal|"DATE"
argument_list|,
name|s
argument_list|,
name|res
operator|.
name|BadFormat
operator|.
name|str
argument_list|(
name|DateTimeUtil
operator|.
name|DateFormatStr
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|SqlLiteral
operator|.
name|createDate
argument_list|(
name|cal
argument_list|,
name|pos
argument_list|)
return|;
block|}
name|SqlTimeLiteral
name|parseTimeLiteral
parameter_list|(
name|String
name|s
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|dateStr
init|=
name|SqlParserUtil
operator|.
name|strip
argument_list|(
name|s
argument_list|,
literal|"'"
argument_list|)
decl_stmt|;
name|DateTimeUtil
operator|.
name|PrecisionTime
name|pt
init|=
name|DateTimeUtil
operator|.
name|parsePrecisionDateTimeLiteral
argument_list|(
name|dateStr
argument_list|,
name|DateTimeUtil
operator|.
name|TimeFormatStr
argument_list|,
name|DateTimeUtil
operator|.
name|gmtZone
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|pt
condition|)
block|{
name|EigenbaseResource
name|res
init|=
name|EigenbaseResource
operator|.
name|instance
argument_list|()
decl_stmt|;
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|res
operator|.
name|IllegalLiteral
operator|.
name|ex
argument_list|(
literal|"TIME"
argument_list|,
name|s
argument_list|,
name|res
operator|.
name|BadFormat
operator|.
name|str
argument_list|(
name|DateTimeUtil
operator|.
name|TimeFormatStr
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|SqlLiteral
operator|.
name|createTime
argument_list|(
name|pt
operator|.
name|getCalendar
argument_list|()
argument_list|,
name|pt
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|pos
argument_list|)
return|;
block|}
name|SqlTimestampLiteral
name|parseTimestampLiteral
parameter_list|(
name|String
name|s
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|dateStr
init|=
name|SqlParserUtil
operator|.
name|strip
argument_list|(
name|s
argument_list|,
literal|"'"
argument_list|)
decl_stmt|;
name|DateTimeUtil
operator|.
name|PrecisionTime
name|pt
init|=
name|DateTimeUtil
operator|.
name|parsePrecisionDateTimeLiteral
argument_list|(
name|dateStr
argument_list|,
name|DateTimeUtil
operator|.
name|TimestampFormatStr
argument_list|,
name|DateTimeUtil
operator|.
name|gmtZone
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|pt
condition|)
block|{
name|EigenbaseResource
name|res
init|=
name|EigenbaseResource
operator|.
name|instance
argument_list|()
decl_stmt|;
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|res
operator|.
name|IllegalLiteral
operator|.
name|ex
argument_list|(
literal|"TIMESTAMP"
argument_list|,
name|s
argument_list|,
name|res
operator|.
name|BadFormat
operator|.
name|str
argument_list|(
name|DateTimeUtil
operator|.
name|TimestampFormatStr
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|SqlLiteral
operator|.
name|createTimestamp
argument_list|(
name|pt
operator|.
name|getCalendar
argument_list|()
argument_list|,
name|pt
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|pos
argument_list|)
return|;
block|}
name|SqlIntervalLiteral
name|parseIntervalLiteral
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|s
parameter_list|,
name|SqlIntervalQualifier
name|intervalQualifier
parameter_list|)
throws|throws
name|ParseException
throws|,
name|ParseException
block|{
name|String
name|intervalStr
init|=
name|SqlParserUtil
operator|.
name|strip
argument_list|(
name|s
argument_list|,
literal|"'"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|intervalStr
argument_list|)
condition|)
block|{
name|EigenbaseResource
name|res
init|=
name|EigenbaseResource
operator|.
name|instance
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
name|res
operator|.
name|IllegalIntervalLiteral
operator|.
name|str
argument_list|(
name|s
operator|+
literal|" "
operator|+
name|intervalQualifier
operator|.
name|toString
argument_list|()
argument_list|,
name|pos
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|SqlLiteral
operator|.
name|createInterval
argument_list|(
name|sign
argument_list|,
name|intervalStr
argument_list|,
name|intervalQualifier
argument_list|,
name|pos
argument_list|)
return|;
block|}
name|SqlParseException
name|convertException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|ex
operator|instanceof
name|SqlParseException
condition|)
block|{
return|return
operator|(
name|SqlParseException
operator|)
name|ex
return|;
block|}
name|SqlParserPos
name|pos
init|=
literal|null
decl_stmt|;
name|int
index|[]
index|[]
name|expectedTokenSequences
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|tokenImage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|ParseException
condition|)
block|{
name|ParseException
name|pex
init|=
operator|(
name|ParseException
operator|)
name|ex
decl_stmt|;
name|expectedTokenSequences
operator|=
name|pex
operator|.
name|expectedTokenSequences
expr_stmt|;
name|tokenImage
operator|=
name|pex
operator|.
name|tokenImage
expr_stmt|;
if|if
condition|(
name|pex
operator|.
name|currentToken
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Token
name|token
init|=
name|pex
operator|.
name|currentToken
operator|.
name|next
decl_stmt|;
name|pos
operator|=
operator|new
name|SqlParserPos
argument_list|(
name|token
operator|.
name|beginLine
argument_list|,
name|token
operator|.
name|beginColumn
argument_list|,
name|token
operator|.
name|endLine
argument_list|,
name|token
operator|.
name|endColumn
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ex
operator|instanceof
name|TokenMgrError
condition|)
block|{
name|TokenMgrError
name|tme
init|=
operator|(
name|TokenMgrError
operator|)
name|ex
decl_stmt|;
name|expectedTokenSequences
operator|=
literal|null
expr_stmt|;
name|tokenImage
operator|=
literal|null
expr_stmt|;
comment|// Example:
comment|//    Lexical error at line 3, column 24.  Encountered "#" after "a".
specifier|final
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
name|pattern
init|=
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?s)Lexical error at line ([0-9]+), column ([0-9]+).*"
argument_list|)
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|line
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|column
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|=
operator|new
name|SqlParserPos
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
name|line
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ex
operator|instanceof
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
condition|)
block|{
comment|// EigenbaseContextException is the standard wrapper for exceptions
comment|// produced by the validator, but in the parser, the standard is
comment|// SqlParseException; so, strip it away. In case you were wondering,
comment|// the EigenbaseContextException appears because the parser
comment|// occasionally calls into validator-style code such as
comment|// SqlSpecialOperator.reduceExpr.
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
name|ece
init|=
operator|(
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
operator|)
name|ex
decl_stmt|;
name|pos
operator|=
operator|new
name|SqlParserPos
argument_list|(
name|ece
operator|.
name|getPosLine
argument_list|()
argument_list|,
name|ece
operator|.
name|getPosColumn
argument_list|()
argument_list|,
name|ece
operator|.
name|getEndPosLine
argument_list|()
argument_list|,
name|ece
operator|.
name|getEndPosColumn
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|ece
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|SqlParseException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pos
argument_list|,
name|expectedTokenSequences
argument_list|,
name|tokenImage
argument_list|,
name|ex
argument_list|)
return|;
block|}
name|ParseException
name|cleanupParseException
parameter_list|(
name|ParseException
name|ex
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|ex
operator|.
name|expectedTokenSequences
operator|==
literal|null
condition|)
block|{
return|return
name|ex
return|;
block|}
name|int
name|iIdentifier
init|=
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|ex
operator|.
name|tokenImage
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"<IDENTIFIER>"
argument_list|)
decl_stmt|;
comment|// Find all sequences in the error which contain identifier. For
comment|// example,
comment|//       {<IDENTIFIER>}
comment|//       {A}
comment|//       {B, C}
comment|//       {D,<IDENTIFIER>}
comment|//       {D, A}
comment|//       {D, B}
comment|//
comment|// would yield
comment|//       {}
comment|//       {D}
name|boolean
name|id
init|=
literal|false
decl_stmt|;
name|ArrayList
name|prefixList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ex
operator|.
name|expectedTokenSequences
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
index|[]
name|seq
init|=
name|ex
operator|.
name|expectedTokenSequences
index|[
name|i
index|]
decl_stmt|;
name|int
name|j
init|=
name|seq
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|i1
init|=
name|seq
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|i1
operator|==
name|iIdentifier
condition|)
block|{
name|int
index|[]
name|prefix
init|=
operator|new
name|int
index|[
name|j
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|seq
argument_list|,
literal|0
argument_list|,
name|prefix
argument_list|,
literal|0
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|prefixList
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prefixList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ex
return|;
block|}
name|int
index|[]
index|[]
name|prefixes
init|=
operator|(
name|int
index|[]
index|[]
operator|)
name|prefixList
operator|.
name|toArray
argument_list|(
operator|new
name|int
index|[
name|prefixList
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
decl_stmt|;
comment|// Since<IDENTIFIER> was one of the possible productions,
comment|// we know that the parser will also have included all
comment|// of the non-reserved keywords (which are treated as
comment|// identifiers in non-keyword contexts).  So, now we need
comment|// to clean those out, since they're totally irrelevant.
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
name|getMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ex
operator|.
name|expectedTokenSequences
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
index|[]
name|seq
init|=
name|ex
operator|.
name|expectedTokenSequences
index|[
name|i
index|]
decl_stmt|;
name|String
name|tokenImage
init|=
name|ex
operator|.
name|tokenImage
index|[
name|seq
index|[
name|seq
operator|.
name|length
operator|-
literal|1
index|]
index|]
decl_stmt|;
name|String
name|token
init|=
name|SqlParserUtil
operator|.
name|getTokenVal
argument_list|(
name|tokenImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
operator|||
operator|!
name|metadata
operator|.
name|isNonReservedKeyword
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|seq
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|match
init|=
name|matchesPrefix
argument_list|(
name|seq
argument_list|,
name|prefixes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
name|ex
operator|.
name|expectedTokenSequences
operator|=
operator|(
name|int
index|[]
index|[]
operator|)
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|int
index|[
name|list
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
expr_stmt|;
return|return
name|ex
return|;
block|}
name|boolean
name|matchesPrefix
parameter_list|(
name|int
index|[]
name|seq
parameter_list|,
name|int
index|[]
index|[]
name|prefixes
parameter_list|)
throws|throws
name|ParseException
block|{
name|nextPrefix
label|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|prefixes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
index|[]
name|prefix
init|=
name|prefixes
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|seq
operator|.
name|length
operator|==
name|prefix
operator|.
name|length
operator|+
literal|1
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|prefix
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|prefix
index|[
name|k
index|]
operator|!=
name|seq
index|[
name|k
index|]
condition|)
block|{
continue|continue
name|nextPrefix
continue|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/*****************************************  * Syntactical Descriptions              *  *****************************************/
comment|/**  * Parses either a row expression or a query expression with an optional  * ORDER BY.  */
specifier|final
specifier|public
name|SqlNode
name|OrderedQueryOrExpr
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|SqlNodeList
name|orderBy
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|e
operator|=
name|QueryOrExpr
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ORDER
case|:
comment|// use the syntactic type of the expression we just parsed
comment|// to decide whether ORDER BY makes sense
name|orderBy
operator|=
name|OrderBy
argument_list|(
name|e
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|QUERY
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|e
operator|=
name|SqlStdOperatorTable
operator|.
name|orderByOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|e
argument_list|,
name|orderBy
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a leaf in a query expression (SELECT, VALUES or TABLE).  */
specifier|final
specifier|public
name|SqlNode
name|LeafQuery
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SELECT
case|:
comment|// ensure a query is legal in this context
name|checkQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|e
operator|=
name|SqlSelect
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|VALUES
case|:
name|e
operator|=
name|TableConstructor
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|TABLE
case|:
name|e
operator|=
name|ExplicitTable
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a parenthesized query or single row expression.  */
specifier|final
specifier|public
name|SqlNode
name|ParenthesizedExpression
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
comment|// we've now seen left paren, so queries inside should
comment|// be allowed as subqueries
switch|switch
condition|(
name|exprContext
condition|)
block|{
case|case
name|ACCEPT_SUBQUERY
case|:
name|exprContext
operator|=
name|ExprContext
operator|.
name|ACCEPT_NONCURSOR
expr_stmt|;
break|break;
case|case
name|ACCEPT_CURSOR
case|:
name|exprContext
operator|=
name|ExprContext
operator|.
name|ACCEPT_ALL
expr_stmt|;
break|break;
block|}
name|e
operator|=
name|OrderedQueryOrExpr
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a parenthesized query or comma-list of row expressions.  *  *<p>  *  * REVIEW jvs 8-Feb-2004: There's a small hole in this production.  It can be  * used to construct something like  *  *<code>WHERE x IN (select count(*) from t where c=d,5)</code>,  *  * which should be illegal.  The above is interpreted as equivalent to  *  *<code>WHERE x IN ((select count(*) from t where c=d),5)</code>,  *  * which is a legal use of a subquery.  The only way to fix the hole is to be  * able to remember whether a subexpression was parenthesized or not, which  * means preserving parentheses in the SqlNode tree.  This is probably  * desirable anyway for use in purely syntactic parsing applications (e.g. SQL  * pretty-printer).  However, if this is done, it's important to also make  * isA() on the paren node call down to its operand so that we can  * always correctly discriminate a query from a row expression.  */
specifier|final
specifier|public
name|SqlNodeList
name|ParenthesizedQueryOrCommaList
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|List
name|list
decl_stmt|;
name|ExprContext
name|firstExprContext
init|=
name|exprContext
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
comment|// we've now seen left paren, so a query by itself should
comment|// be interpreted as a subquery
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|exprContext
condition|)
block|{
case|case
name|ACCEPT_SUBQUERY
case|:
name|firstExprContext
operator|=
name|ExprContext
operator|.
name|ACCEPT_NONCURSOR
expr_stmt|;
break|break;
case|case
name|ACCEPT_CURSOR
case|:
name|firstExprContext
operator|=
name|ExprContext
operator|.
name|ACCEPT_ALL
expr_stmt|;
break|break;
block|}
name|e
operator|=
name|OrderedQueryOrExpr
argument_list|(
name|firstExprContext
argument_list|)
expr_stmt|;
name|list
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
comment|// a comma-list can't appear where only a query is expected
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses function parameter lists including DISTINCT keyword recognition  *  *<p>  *  * This is pretty much the same as ParenthesizedQueryOrCommaList but allows the  * DISTINCT keyword to follow the left paren and not be followed by a comma.  */
specifier|final
specifier|public
name|List
name|FunctionParameterList
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
init|=
literal|null
decl_stmt|;
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ExprContext
name|firstExprContext
init|=
name|exprContext
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
comment|// we've now seen left paren, so queries inside should
comment|// be allowed as subqueries
switch|switch
condition|(
name|exprContext
condition|)
block|{
case|case
name|ACCEPT_SUBQUERY
case|:
name|firstExprContext
operator|=
name|ExprContext
operator|.
name|ACCEPT_NONCURSOR
expr_stmt|;
break|break;
case|case
name|ACCEPT_CURSOR
case|:
name|firstExprContext
operator|=
name|ExprContext
operator|.
name|ACCEPT_ALL
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
case|case
name|DISTINCT
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DISTINCT
case|:
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|e
operator|=
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlSelectKeyword
operator|.
name|Distinct
argument_list|,
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|e
operator|=
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlSelectKeyword
operator|.
name|All
argument_list|,
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|OrderedQueryOrExpr
argument_list|(
name|firstExprContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
comment|// a comma-list can't appear where only a query is expected
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|list
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a query (SELECT, UNION, INTERSECT, EXCEPT, VALUES, TABLE) followed by  * the end-of-file symbol.  */
specifier|final
specifier|public
name|SqlNode
name|SqlQueryEof
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|query
decl_stmt|;
name|query
operator|=
name|OrderedQueryOrExpr
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|query
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses an SQL statement.  */
specifier|final
specifier|public
name|SqlNode
name|SqlStmt
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|stmt
decl_stmt|;
if|if
condition|(
name|jj_2_1
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|stmt
operator|=
name|OrderedQueryOrExpr
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EXPLAIN
case|:
name|stmt
operator|=
name|SqlExplain
argument_list|()
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|stmt
operator|=
name|SqlInsert
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|stmt
operator|=
name|SqlDelete
argument_list|()
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|stmt
operator|=
name|SqlUpdate
argument_list|()
expr_stmt|;
break|break;
case|case
name|MERGE
case|:
name|stmt
operator|=
name|SqlMerge
argument_list|()
expr_stmt|;
break|break;
case|case
name|CALL
case|:
name|stmt
operator|=
name|SqlProcedureCall
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|stmt
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses an SQL statement followed by the end-of-file symbol.  */
specifier|final
specifier|public
name|SqlNode
name|SqlStmtEof
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|stmt
decl_stmt|;
name|stmt
operator|=
name|SqlStmt
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|stmt
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a leaf SELECT expression without ORDER BY.  */
specifier|final
specifier|public
name|SqlSelect
name|SqlSelect
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
name|keywords
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|selectList
decl_stmt|;
name|SqlNode
name|fromClause
decl_stmt|;
name|SqlNode
name|where
decl_stmt|;
name|SqlNode
name|groupBy
decl_stmt|;
name|SqlNode
name|having
decl_stmt|;
name|SqlNodeList
name|windowDecls
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlParserPos
name|selectListPos
decl_stmt|;
name|SqlNode
name|selectItem
decl_stmt|;
name|jj_consume_token
argument_list|(
name|SELECT
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|SqlSelectKeywords
argument_list|(
name|keywords
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DISTINCT
case|:
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|keywords
operator|.
name|add
argument_list|(
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlSelectKeyword
operator|.
name|Distinct
argument_list|,
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|keywords
operator|.
name|add
argument_list|(
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlSelectKeyword
operator|.
name|All
argument_list|,
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
name|E
argument_list|()
expr_stmt|;
block|}
name|selectList
operator|=
name|SelectList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
name|fromClause
operator|=
name|FromClause
argument_list|()
expr_stmt|;
name|where
operator|=
name|WhereOpt
argument_list|()
expr_stmt|;
name|groupBy
operator|=
name|GroupByOpt
argument_list|()
expr_stmt|;
name|having
operator|=
name|HavingOpt
argument_list|()
expr_stmt|;
name|windowDecls
operator|=
name|WindowOpt
argument_list|()
expr_stmt|;
name|selectItem
operator|=
operator|(
name|SqlNode
operator|)
name|selectList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|selectListPos
operator|=
name|selectItem
operator|.
name|getParserPosition
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|selectOperator
operator|.
name|createCall
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|keywords
argument_list|,
name|pos
argument_list|)
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|selectList
argument_list|,
name|selectListPos
operator|.
name|plusAll
argument_list|(
name|selectList
argument_list|)
argument_list|)
argument_list|,
name|fromClause
argument_list|,
name|where
argument_list|,
name|groupBy
argument_list|,
name|having
argument_list|,
name|windowDecls
argument_list|,
literal|null
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/*  * Abstract production:  *  *    void SqlSelectKeywords(List keywords)  *  * Parses dialect-specific keywords immediately following the SELECT keyword.  */
comment|/**  * Parses an EXPLAIN PLAN statement.  */
specifier|final
specifier|public
name|SqlNode
name|SqlExplain
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|stmt
decl_stmt|;
name|SqlExplainLevel
name|detailLevel
init|=
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
decl_stmt|;
name|SqlExplain
operator|.
name|Depth
name|depth
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|boolean
name|asXml
decl_stmt|;
name|jj_consume_token
argument_list|(
name|EXPLAIN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|PLAN
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EXCLUDING
case|:
case|case
name|INCLUDING
case|:
name|detailLevel
operator|=
name|ExplainDetailLevel
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|depth
operator|=
name|ExplainDepth
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AS
case|:
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|XML
argument_list|)
expr_stmt|;
name|asXml
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
name|asXml
operator|=
literal|false
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|FOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|jj_2_2
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|stmt
operator|=
name|OrderedQueryOrExpr
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|INSERT
case|:
name|stmt
operator|=
name|SqlInsert
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|stmt
operator|=
name|SqlDelete
argument_list|()
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|stmt
operator|=
name|SqlUpdate
argument_list|()
expr_stmt|;
break|break;
case|case
name|MERGE
case|:
name|stmt
operator|=
name|SqlMerge
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlExplain
argument_list|(
name|SqlStdOperatorTable
operator|.
name|explainOperator
argument_list|,
name|stmt
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|detailLevel
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|depth
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
name|asXml
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|nDynamicParams
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses WITH TYPE | WITH IMPLEMENTATION | WITHOUT IMPLEMENTATION modifier for  * EXPLAIN PLAN.  */
specifier|final
specifier|public
name|SqlExplain
operator|.
name|Depth
name|ExplainDepth
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
name|jj_2_3
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|WITH
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlExplain
operator|.
name|Depth
operator|.
name|Type
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|WITH
case|:
name|jj_consume_token
argument_list|(
name|WITH
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IMPLEMENTATION
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlExplain
operator|.
name|Depth
operator|.
name|Physical
return|;
block|}
break|break;
case|case
name|WITHOUT
case|:
name|jj_consume_token
argument_list|(
name|WITHOUT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IMPLEMENTATION
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlExplain
operator|.
name|Depth
operator|.
name|Logical
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlExplain
operator|.
name|Depth
operator|.
name|Physical
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses INCLUDING ALL ATTRIBUTES modifier for EXPLAIN PLAN.  */
specifier|final
specifier|public
name|SqlExplainLevel
name|ExplainDetailLevel
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlExplainLevel
name|level
init|=
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EXCLUDING
case|:
name|jj_consume_token
argument_list|(
name|EXCLUDING
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ATTRIBUTES
argument_list|)
expr_stmt|;
name|level
operator|=
name|SqlExplainLevel
operator|.
name|NO_ATTRIBUTES
expr_stmt|;
break|break;
case|case
name|INCLUDING
case|:
name|jj_consume_token
argument_list|(
name|INCLUDING
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|level
operator|=
name|SqlExplainLevel
operator|.
name|ALL_ATTRIBUTES
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|ATTRIBUTES
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|level
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a CALL statement.  */
specifier|final
specifier|public
name|SqlNode
name|SqlProcedureCall
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlParserPos
name|callPos
decl_stmt|;
name|SqlNode
name|routineCall
decl_stmt|;
name|jj_consume_token
argument_list|(
name|CALL
argument_list|)
expr_stmt|;
name|callPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|routineCall
operator|=
name|NamedRoutineCall
argument_list|(
name|SqlFunctionCategory
operator|.
name|UserDefinedProcedure
argument_list|,
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|procedureCallOperator
operator|.
name|createCall
argument_list|(
name|callPos
argument_list|,
name|routineCall
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlNode
name|NamedRoutineCall
parameter_list|(
name|SqlFunctionCategory
name|routineType
parameter_list|,
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|name
decl_stmt|;
name|SqlNodeList
name|args
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|name
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
if|if
condition|(
name|jj_2_4
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|SqlNodeList
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|args
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
name|SqlNode
name|function
init|=
name|createCall
argument_list|(
name|name
argument_list|,
name|pos
argument_list|,
name|routineType
argument_list|,
literal|null
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|function
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses an INSERT statement.  */
specifier|final
specifier|public
name|SqlNode
name|SqlInsert
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
name|keywords
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SqlIdentifier
name|table
decl_stmt|;
name|SqlNode
name|source
decl_stmt|;
name|List
name|columnList
init|=
literal|null
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlParserPos
name|columnListPos
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|INSERT
argument_list|)
expr_stmt|;
name|SqlInsertKeywords
argument_list|(
name|keywords
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|INTO
argument_list|)
expr_stmt|;
name|table
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
if|if
condition|(
name|jj_2_5
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|columnList
operator|=
name|SimpleIdentifierCommaList
argument_list|()
expr_stmt|;
name|columnListPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
empty_stmt|;
block|}
name|source
operator|=
name|OrderedQueryOrExpr
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlInsert
argument_list|(
name|SqlStdOperatorTable
operator|.
name|insertOperator
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|keywords
argument_list|,
name|pos
argument_list|)
argument_list|,
name|table
argument_list|,
name|source
argument_list|,
operator|(
name|columnList
operator|!=
literal|null
operator|)
condition|?
operator|new
name|SqlNodeList
argument_list|(
name|columnList
argument_list|,
name|columnListPos
argument_list|)
else|:
literal|null
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/*  * Abstract production:  *  *    void SqlInsertKeywords(List keywords)  *  * Parses dialect-specific keywords immediately following the INSERT keyword.  */
comment|/**  * Parses a DELETE statement.  */
specifier|final
specifier|public
name|SqlNode
name|SqlDelete
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|table
decl_stmt|;
name|SqlIdentifier
name|alias
init|=
literal|null
decl_stmt|;
name|SqlNode
name|condition
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|DELETE
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
name|table
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|AS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AS
case|:
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|alias
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|condition
operator|=
name|WhereOpt
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlDelete
argument_list|(
name|SqlStdOperatorTable
operator|.
name|deleteOperator
argument_list|,
name|table
argument_list|,
name|condition
argument_list|,
name|alias
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses an UPDATE statement.  */
specifier|final
specifier|public
name|SqlNode
name|SqlUpdate
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|table
decl_stmt|;
name|SqlIdentifier
name|alias
init|=
literal|null
decl_stmt|;
name|SqlNode
name|condition
decl_stmt|;
name|SqlNodeList
name|sourceExpressionList
decl_stmt|;
name|SqlNodeList
name|targetColumnList
decl_stmt|;
name|SqlIdentifier
name|id
decl_stmt|;
name|SqlNode
name|exp
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|UPDATE
argument_list|)
expr_stmt|;
name|table
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|targetColumnList
operator|=
operator|new
name|SqlNodeList
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|sourceExpressionList
operator|=
operator|new
name|SqlNodeList
argument_list|(
name|pos
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|AS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AS
case|:
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|alias
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|SET
argument_list|)
expr_stmt|;
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|targetColumnList
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|exp
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
comment|// TODO:  support DEFAULT also
name|sourceExpressionList
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|19
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|targetColumnList
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|exp
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|sourceExpressionList
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
name|condition
operator|=
name|WhereOpt
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlUpdate
argument_list|(
name|SqlStdOperatorTable
operator|.
name|updateOperator
argument_list|,
name|table
argument_list|,
name|targetColumnList
argument_list|,
name|sourceExpressionList
argument_list|,
name|condition
argument_list|,
name|alias
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a MERGE statement.  */
specifier|final
specifier|public
name|SqlNode
name|SqlMerge
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|table
decl_stmt|;
name|SqlIdentifier
name|alias
init|=
literal|null
decl_stmt|;
name|SqlNode
name|sourceTableRef
decl_stmt|;
name|SqlNode
name|condition
decl_stmt|;
name|SqlNode
name|updateCall
init|=
literal|null
decl_stmt|;
name|SqlNode
name|insertCall
init|=
literal|null
decl_stmt|;
name|SqlParserPos
name|mergePos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|MERGE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|INTO
argument_list|)
expr_stmt|;
name|table
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
name|mergePos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|AS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AS
case|:
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|20
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|alias
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|21
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|USING
argument_list|)
expr_stmt|;
name|sourceTableRef
operator|=
name|TableRef
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ON
argument_list|)
expr_stmt|;
name|condition
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
if|if
condition|(
name|jj_2_6
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|updateCall
operator|=
name|WhenMatchedClause
argument_list|(
name|table
argument_list|,
name|alias
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|WHEN
case|:
name|insertCall
operator|=
name|WhenNotMatchedClause
argument_list|(
name|table
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|22
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|WHEN
case|:
name|insertCall
operator|=
name|WhenNotMatchedClause
argument_list|(
name|table
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|23
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlMerge
argument_list|(
name|SqlStdOperatorTable
operator|.
name|mergeOperator
argument_list|,
name|table
argument_list|,
name|condition
argument_list|,
name|sourceTableRef
argument_list|,
name|updateCall
argument_list|,
name|insertCall
argument_list|,
name|alias
argument_list|,
name|mergePos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlNode
name|WhenMatchedClause
parameter_list|(
name|SqlIdentifier
name|table
parameter_list|,
name|SqlIdentifier
name|alias
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|id
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlNodeList
name|updateColumnList
decl_stmt|;
name|SqlNode
name|exp
decl_stmt|;
name|SqlNodeList
name|updateExprList
decl_stmt|;
name|jj_consume_token
argument_list|(
name|WHEN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|MATCHED
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|THEN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|UPDATE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|SET
argument_list|)
expr_stmt|;
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|updateColumnList
operator|=
operator|new
name|SqlNodeList
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|updateExprList
operator|=
operator|new
name|SqlNodeList
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|updateColumnList
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|exp
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|updateExprList
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|24
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|updateColumnList
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|exp
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|updateExprList
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlUpdate
argument_list|(
name|SqlStdOperatorTable
operator|.
name|updateOperator
argument_list|,
name|table
argument_list|,
name|updateColumnList
argument_list|,
name|updateExprList
argument_list|,
literal|null
argument_list|,
name|alias
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlNode
name|WhenNotMatchedClause
parameter_list|(
name|SqlIdentifier
name|table
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlParserPos
name|pos
decl_stmt|,
name|insertPos
decl_stmt|,
name|columnListPos
init|=
literal|null
decl_stmt|;
name|List
name|keywords
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|insertColumnList
init|=
literal|null
decl_stmt|;
name|SqlNode
name|rowConstructor
decl_stmt|;
name|SqlNode
name|insertValues
decl_stmt|;
name|jj_consume_token
argument_list|(
name|WHEN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|MATCHED
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|THEN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|INSERT
argument_list|)
expr_stmt|;
name|insertPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|SqlInsertKeywords
argument_list|(
name|keywords
argument_list|)
expr_stmt|;
if|if
condition|(
name|jj_2_7
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|insertColumnList
operator|=
name|SimpleIdentifierCommaList
argument_list|()
expr_stmt|;
name|columnListPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|25
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|VALUES
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|rowConstructor
operator|=
name|RowConstructor
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RPAREN
case|:
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|26
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
comment|// TODO zfong 5/26/06: note that extra parentheses are accepted above
comment|// around the VALUES clause as a hack for unparse, but this is
comment|// actually invalid SQL; should fix unparse
name|insertValues
operator|=
name|SqlStdOperatorTable
operator|.
name|valuesOperator
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|rowConstructor
operator|.
name|getParserPosition
argument_list|()
argument_list|)
argument_list|,
name|rowConstructor
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlInsert
argument_list|(
name|SqlStdOperatorTable
operator|.
name|insertOperator
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|keywords
argument_list|,
name|insertPos
argument_list|)
argument_list|,
name|table
argument_list|,
name|insertValues
argument_list|,
operator|(
name|insertColumnList
operator|!=
literal|null
operator|)
condition|?
operator|new
name|SqlNodeList
argument_list|(
name|insertColumnList
argument_list|,
name|columnListPos
argument_list|)
else|:
literal|null
argument_list|,
name|insertPos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses the select list of a SELECT statement.  */
specifier|final
specifier|public
name|List
name|SelectList
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SqlNode
name|item
decl_stmt|;
name|item
operator|=
name|SelectItem
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|label_5
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|27
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_5
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|item
operator|=
name|SelectItem
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|list
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses one item in a select list.  */
specifier|final
specifier|public
name|SqlNode
name|SelectItem
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|SqlIdentifier
name|id
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|e
operator|=
name|SelectExpression
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|AS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AS
case|:
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|28
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|pos
operator|=
name|e
operator|.
name|getParserPosition
argument_list|()
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|SqlStdOperatorTable
operator|.
name|asOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|e
argument_list|,
name|id
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|29
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses one unaliased expression in a select list.  */
specifier|final
specifier|public
name|SqlNode
name|SelectExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|String
name|id
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|,
name|starPos
decl_stmt|;
if|if
condition|(
name|jj_2_8
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|id
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|starPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlIdentifier
argument_list|(
operator|new
name|String
index|[]
block|{
name|id
block|,
literal|"*"
block|}
argument_list|,
literal|null
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|starPos
argument_list|)
argument_list|,
operator|new
name|SqlParserPos
index|[]
block|{
name|pos
block|,
name|starPos
block|}
argument_list|)
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STAR
case|:
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlIdentifier
argument_list|(
literal|"*"
argument_list|,
name|pos
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|30
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_9
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
block|}
else|else
block|{
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// TODO jvs 15-Nov-2003:  SQL standard allows parentheses in the FROM list for
comment|// building up non-linear join trees (e.g. OUTER JOIN two tables, and then INNER
comment|// JOIN the result).  Also note that aliases on parenthesized FROM expressions
comment|// "hide" all table names inside the parentheses (without aliases, they're
comment|// visible).
comment|//
comment|// We allow CROSS JOIN to have a join condition, even though that is not valid
comment|// SQL; the validator will catch it.
comment|/**  * Parses the FROM clause a SELECT.  */
specifier|final
specifier|public
name|SqlNode
name|FromClause
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|,
name|e2
decl_stmt|,
name|condition
decl_stmt|;
name|boolean
name|isNatural
decl_stmt|;
name|SqlJoinOperator
operator|.
name|JoinType
name|joinType
decl_stmt|;
name|List
name|list
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlParserPos
name|joinTypePos
decl_stmt|;
name|SqlParserPos
name|naturalPos
decl_stmt|;
name|e
operator|=
name|TableRef
argument_list|()
expr_stmt|;
name|label_6
label|:
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|jj_2_10
argument_list|(
literal|1
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
break|break
name|label_6
break|;
block|}
if|if
condition|(
name|jj_2_11
argument_list|(
literal|2
argument_list|)
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NATURAL
case|:
name|jj_consume_token
argument_list|(
name|NATURAL
argument_list|)
expr_stmt|;
name|isNatural
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|31
index|]
operator|=
name|jj_gen
expr_stmt|;
name|isNatural
operator|=
literal|false
expr_stmt|;
block|}
name|naturalPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|JOIN
case|:
name|jj_consume_token
argument_list|(
name|JOIN
argument_list|)
expr_stmt|;
name|joinType
operator|=
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Inner
expr_stmt|;
break|break;
case|case
name|INNER
case|:
name|jj_consume_token
argument_list|(
name|INNER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|JOIN
argument_list|)
expr_stmt|;
name|joinType
operator|=
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Inner
expr_stmt|;
break|break;
case|case
name|LEFT
case|:
name|jj_consume_token
argument_list|(
name|LEFT
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OUTER
case|:
name|jj_consume_token
argument_list|(
name|OUTER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|32
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|JOIN
argument_list|)
expr_stmt|;
name|joinType
operator|=
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Left
expr_stmt|;
break|break;
case|case
name|RIGHT
case|:
name|jj_consume_token
argument_list|(
name|RIGHT
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OUTER
case|:
name|jj_consume_token
argument_list|(
name|OUTER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|33
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|JOIN
argument_list|)
expr_stmt|;
name|joinType
operator|=
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Right
expr_stmt|;
break|break;
case|case
name|FULL
case|:
name|jj_consume_token
argument_list|(
name|FULL
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OUTER
case|:
name|jj_consume_token
argument_list|(
name|OUTER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|34
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|JOIN
argument_list|)
expr_stmt|;
name|joinType
operator|=
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Full
expr_stmt|;
break|break;
case|case
name|CROSS
case|:
name|jj_consume_token
argument_list|(
name|CROSS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|JOIN
argument_list|)
expr_stmt|;
name|joinType
operator|=
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Cross
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|35
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|joinTypePos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|e2
operator|=
name|TableRef
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ON
case|:
name|jj_consume_token
argument_list|(
name|ON
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|condition
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|SqlParserPos
name|onPos
init|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|=
name|SqlStdOperatorTable
operator|.
name|joinOperator
operator|.
name|createCall
argument_list|(
name|e
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
name|isNatural
argument_list|,
name|naturalPos
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|joinType
argument_list|,
name|joinTypePos
argument_list|)
argument_list|,
name|e2
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlJoinOperator
operator|.
name|ConditionType
operator|.
name|On
argument_list|,
name|onPos
argument_list|)
argument_list|,
name|condition
argument_list|,
name|joinTypePos
argument_list|)
expr_stmt|;
break|break;
case|case
name|USING
case|:
name|jj_consume_token
argument_list|(
name|USING
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|list
operator|=
name|SimpleIdentifierCommaList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|SqlParserPos
name|usingPos
init|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|=
name|SqlStdOperatorTable
operator|.
name|joinOperator
operator|.
name|createCall
argument_list|(
name|e
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
name|isNatural
argument_list|,
name|naturalPos
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|joinType
argument_list|,
name|joinTypePos
argument_list|)
argument_list|,
name|e2
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlJoinOperator
operator|.
name|ConditionType
operator|.
name|Using
argument_list|,
name|usingPos
argument_list|)
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|usingPos
argument_list|)
argument_list|,
name|joinTypePos
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|36
index|]
operator|=
name|jj_gen
expr_stmt|;
name|e
operator|=
name|SqlStdOperatorTable
operator|.
name|joinOperator
operator|.
name|createCall
argument_list|(
name|e
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
name|isNatural
argument_list|,
name|naturalPos
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|joinType
argument_list|,
name|joinTypePos
argument_list|)
argument_list|,
name|e2
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlJoinOperator
operator|.
name|ConditionType
operator|.
name|None
argument_list|,
name|joinTypePos
argument_list|)
argument_list|,
literal|null
argument_list|,
name|joinTypePos
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|true
condition|)
block|{
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|e2
operator|=
name|TableRef
argument_list|()
expr_stmt|;
name|e
operator|=
name|SqlStdOperatorTable
operator|.
name|joinOperator
operator|.
name|createCall
argument_list|(
name|e
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|pos
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlJoinOperator
operator|.
name|JoinType
operator|.
name|Comma
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|e2
argument_list|,
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlJoinOperator
operator|.
name|ConditionType
operator|.
name|None
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// TODO jvs 15-Nov-2003: SQL standard allows column aliases on table
comment|// references, e.g. DEPTS AS D1(DEPTNO1,DNAME1); I guess this is syntactic
comment|// sugar to make it easier for query writers to conform to the column name
comment|// uniqueness rules without requiring them to write a nested SELECT, but it
comment|// seems pretty useless for non-trivial tables, since you have to supply names
comment|// for ALL columns at once.
comment|/**  * Parses a table reference in a FROM clause.  */
specifier|final
specifier|public
name|SqlNode
name|TableRef
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|tableRef
decl_stmt|;
name|SqlNode
name|over
decl_stmt|;
name|String
name|alias
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlNodeList
name|args
decl_stmt|;
name|SqlNode
name|sample
decl_stmt|;
name|boolean
name|isBernoulli
decl_stmt|;
name|SqlNumericLiteral
name|samplePercentage
decl_stmt|;
name|boolean
name|isRepeatable
init|=
literal|false
decl_stmt|;
name|int
name|repeatableSeed
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|SqlNode
argument_list|>
name|columnAliasList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jj_2_12
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|tableRef
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
name|over
operator|=
name|TableOverOpt
argument_list|()
expr_stmt|;
if|if
condition|(
name|over
operator|!=
literal|null
condition|)
block|{
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|tableRef
operator|=
name|SqlStdOperatorTable
operator|.
name|overOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|tableRef
argument_list|,
name|over
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LATERAL
case|:
case|case
name|LPAREN
case|:
name|boolean
name|isLateral
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LATERAL
case|:
name|jj_consume_token
argument_list|(
name|LATERAL
argument_list|)
expr_stmt|;
name|isLateral
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|37
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|tableRef
operator|=
name|ParenthesizedExpression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
name|over
operator|=
name|TableOverOpt
argument_list|()
expr_stmt|;
if|if
condition|(
name|over
operator|!=
literal|null
condition|)
block|{
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|tableRef
operator|=
name|SqlStdOperatorTable
operator|.
name|overOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|tableRef
argument_list|,
name|over
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLateral
condition|)
block|{
name|tableRef
operator|=
name|SqlStdOperatorTable
operator|.
name|lateralOperator
operator|.
name|createCall
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|tableRef
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNNEST
case|:
name|jj_consume_token
argument_list|(
name|UNNEST
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|args
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|tableRef
operator|=
name|SqlStdOperatorTable
operator|.
name|unnestOperator
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|args
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|jj_consume_token
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|tableRef
operator|=
name|TableFunctionCall
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|38
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_13
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|tableRef
operator|=
name|ExtendedTableRef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|AS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AS
case|:
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|39
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|alias
operator|=
name|Identifier
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|columnAliasList
operator|=
name|SimpleIdentifierCommaList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|40
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
if|if
condition|(
name|columnAliasList
operator|==
literal|null
condition|)
block|{
name|tableRef
operator|=
name|SqlStdOperatorTable
operator|.
name|asOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|tableRef
argument_list|,
operator|new
name|SqlIdentifier
argument_list|(
name|alias
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|SqlNode
argument_list|>
name|idList
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlNode
argument_list|>
argument_list|()
decl_stmt|;
name|idList
operator|.
name|add
argument_list|(
name|tableRef
argument_list|)
expr_stmt|;
name|idList
operator|.
name|add
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|alias
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|idList
operator|.
name|addAll
argument_list|(
name|columnAliasList
argument_list|)
expr_stmt|;
name|tableRef
operator|=
name|SqlStdOperatorTable
operator|.
name|asOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|idList
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|41
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TABLESAMPLE
case|:
name|jj_consume_token
argument_list|(
name|TABLESAMPLE
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SUBSTITUTE
case|:
name|jj_consume_token
argument_list|(
name|SUBSTITUTE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|sample
operator|=
name|StringLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|String
name|sampleName
init|=
name|SqlLiteral
operator|.
name|stringValue
argument_list|(
name|sample
argument_list|)
decl_stmt|;
name|SqlSampleSpec
name|sampleSpec
init|=
name|SqlSampleSpec
operator|.
name|createNamed
argument_list|(
name|sampleName
argument_list|)
decl_stmt|;
name|SqlLiteral
name|sampleLiteral
init|=
name|SqlLiteral
operator|.
name|createSample
argument_list|(
name|sampleSpec
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|tableRef
operator|=
name|SqlStdOperatorTable
operator|.
name|sampleFunction
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|tableRef
argument_list|,
name|sampleLiteral
argument_list|)
expr_stmt|;
break|break;
case|case
name|BERNOULLI
case|:
case|case
name|SYSTEM
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BERNOULLI
case|:
name|jj_consume_token
argument_list|(
name|BERNOULLI
argument_list|)
expr_stmt|;
name|isBernoulli
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SYSTEM
case|:
name|jj_consume_token
argument_list|(
name|SYSTEM
argument_list|)
expr_stmt|;
name|isBernoulli
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|42
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|samplePercentage
operator|=
name|UnsignedNumericLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|REPEATABLE
case|:
name|jj_consume_token
argument_list|(
name|REPEATABLE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|repeatableSeed
operator|=
name|IntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|isRepeatable
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|43
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
specifier|final
name|BigDecimal
name|ONE_HUNDRED
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|100L
argument_list|)
decl_stmt|;
name|BigDecimal
name|rate
init|=
name|samplePercentage
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rate
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
operator|||
name|rate
operator|.
name|compareTo
argument_list|(
name|ONE_HUNDRED
argument_list|)
operator|>
literal|0
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|InvalidSampleSize
operator|.
name|str
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Treat TABLESAMPLE(0) and TABLESAMPLE(100) as no table
comment|// sampling at all.  Not strictly correct: TABLESAMPLE(0)
comment|// should produce no output, but it simplifies implementation
comment|// to know that some amount of sampling will occur.
comment|// In practice values less than ~1E-43% are treated as 0.0 and
comment|// values greater than ~99.999997% are treated as 1.0
name|float
name|fRate
init|=
name|rate
operator|.
name|divide
argument_list|(
name|ONE_HUNDRED
argument_list|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fRate
operator|>
literal|0.0f
operator|&&
name|fRate
operator|<
literal|1.0f
condition|)
block|{
name|SqlSampleSpec
name|tableSampleSpec
init|=
name|isRepeatable
condition|?
name|SqlSampleSpec
operator|.
name|createTableSample
argument_list|(
name|isBernoulli
argument_list|,
name|fRate
argument_list|,
name|repeatableSeed
argument_list|)
else|:
name|SqlSampleSpec
operator|.
name|createTableSample
argument_list|(
name|isBernoulli
argument_list|,
name|fRate
argument_list|)
decl_stmt|;
name|SqlLiteral
name|tableSampleLiteral
init|=
name|SqlLiteral
operator|.
name|createSample
argument_list|(
name|tableSampleSpec
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|tableRef
operator|=
name|SqlStdOperatorTable
operator|.
name|sampleFunction
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|tableRef
argument_list|,
name|tableSampleLiteral
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|44
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|45
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|tableRef
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlNode
name|TableFunctionCall
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|call
decl_stmt|;
name|SqlFunctionCategory
name|funcType
init|=
name|SqlFunctionCategory
operator|.
name|UserDefinedFunction
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SPECIFIC
case|:
name|jj_consume_token
argument_list|(
name|SPECIFIC
argument_list|)
expr_stmt|;
name|funcType
operator|=
name|SqlFunctionCategory
operator|.
name|UserDefinedSpecificFunction
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|46
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|call
operator|=
name|NamedRoutineCall
argument_list|(
name|funcType
argument_list|,
name|ExprContext
operator|.
name|ACCEPT_CURSOR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|collectionTableOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|call
argument_list|)
return|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|call
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Abstract production:  *    SqlNode ExtendedTableRef()  *  * Allows parser to be extended with new types of table references.  The  * default implementation of this production is empty.  */
comment|/*  * Abstract production:  *  *    SqlNode TableOverOpt()  *  * Allows an OVER clause following a table expression as an extension to  * standard SQL syntax. The default implementation of this production is empty.  */
comment|/**  * Parses an explicit TABLE t reference.  */
specifier|final
specifier|public
name|SqlNode
name|ExplicitTable
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|tableRef
decl_stmt|;
name|jj_consume_token
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|tableRef
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|explicitTableOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|tableRef
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a VALUES leaf query expression.  */
specifier|final
specifier|public
name|SqlNode
name|TableConstructor
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNodeList
name|rowConstructorList
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|VALUES
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|rowConstructorList
operator|=
name|RowConstructorList
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|valuesOperator
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|rowConstructorList
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses one or more rows in a VALUES expression.  */
specifier|final
specifier|public
name|SqlNodeList
name|RowConstructorList
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SqlNode
name|rowConstructor
decl_stmt|;
name|rowConstructor
operator|=
name|RowConstructor
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rowConstructor
argument_list|)
expr_stmt|;
name|label_7
label|:
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|jj_2_14
argument_list|(
literal|2
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
break|break
name|label_7
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|rowConstructor
operator|=
name|RowConstructor
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rowConstructor
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a row constructor in the context of a VALUES expression.  */
specifier|final
specifier|public
name|SqlNode
name|RowConstructor
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNodeList
name|valueList
decl_stmt|;
name|SqlNode
name|value
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
if|if
condition|(
name|jj_2_15
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|valueList
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_NONCURSOR
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|jj_2_16
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ROW
case|:
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|47
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|valueList
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_NONCURSOR
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|jj_2_17
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|value
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_NONCURSOR
argument_list|)
expr_stmt|;
comment|// NOTE: A bare value here is standard SQL syntax, believe it or
comment|// not.  Taken together with multi-row table constructors, it leads
comment|// to very easy mistakes if you forget the parentheses on a
comment|// single-row constructor.  This is also the reason for the
comment|// LOOKAHEAD in RowConstructorList().  It would be so much more
comment|// reasonable to require parentheses.  Sigh.
name|pos
operator|=
name|value
operator|.
name|getParserPosition
argument_list|()
expr_stmt|;
name|valueList
operator|=
operator|new
name|SqlNodeList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|value
argument_list|)
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
comment|// REVIEW jvs 8-Feb-2004: Should we discriminate between scalar
comment|// subqueries inside of ROW and row subqueries?  The standard does,
comment|// but the distinction seems to be purely syntactic.
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|rowConstructor
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|valueList
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses the optional WHERE clause for SELECT, DELETE, and UPDATE.  */
specifier|final
specifier|public
name|SqlNode
name|WhereOpt
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|condition
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|WHERE
case|:
name|jj_consume_token
argument_list|(
name|WHERE
argument_list|)
expr_stmt|;
name|condition
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|condition
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|48
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses the optional GROUP BY clause for SELECT.  */
specifier|final
specifier|public
name|SqlNode
name|GroupByOpt
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNodeList
name|list
decl_stmt|;
name|SqlNode
name|e
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
if|if
condition|(
name|jj_2_18
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|GROUP
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|BY
argument_list|)
expr_stmt|;
name|list
operator|=
name|ExpressionCommaList
argument_list|(
name|pos
argument_list|,
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|list
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|GROUP
case|:
name|jj_consume_token
argument_list|(
name|GROUP
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|BY
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlNodeList
argument_list|(
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|49
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a list of expressions separated by commas.  */
specifier|final
specifier|public
name|SqlNodeList
name|ExpressionCommaList
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
name|list
decl_stmt|;
name|SqlNode
name|e
decl_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|==
literal|null
condition|)
block|{
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|}
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|label_8
label|:
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|jj_2_19
argument_list|(
literal|2
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
break|break
name|label_8
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses the optional HAVING clause for SELECT.  */
specifier|final
specifier|public
name|SqlNode
name|HavingOpt
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|HAVING
case|:
name|jj_consume_token
argument_list|(
name|HAVING
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|50
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses the optional WINDOW clause for SELECT  */
specifier|final
specifier|public
name|SqlNodeList
name|WindowOpt
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|id
decl_stmt|;
name|SqlWindow
name|e
decl_stmt|;
name|List
name|list
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|WINDOW
case|:
name|jj_consume_token
argument_list|(
name|WINDOW
argument_list|)
expr_stmt|;
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
name|e
operator|=
name|WindowSpecification
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|e
operator|.
name|setDeclName
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|list
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|label_9
label|:
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|jj_2_20
argument_list|(
literal|2
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
break|break
name|label_9
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
name|e
operator|=
name|WindowSpecification
argument_list|()
expr_stmt|;
name|e
operator|.
name|setDeclName
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|pos
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|51
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a window specification.  */
specifier|final
specifier|public
name|SqlWindow
name|WindowSpecification
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|id
decl_stmt|;
name|List
name|list
decl_stmt|;
name|SqlNodeList
name|partitionList
decl_stmt|;
name|SqlNodeList
name|orderList
decl_stmt|;
name|SqlLiteral
name|isRows
init|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|SqlNode
name|lowerBound
init|=
literal|null
decl_stmt|,
name|upperBound
init|=
literal|null
decl_stmt|;
name|SqlParserPos
name|startPos
decl_stmt|;
name|SqlParserPos
name|endPos
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlLiteral
name|allowPartial
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|startPos
operator|=
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|52
index|]
operator|=
name|jj_gen
expr_stmt|;
name|id
operator|=
literal|null
expr_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PARTITION
case|:
name|jj_consume_token
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|BY
argument_list|)
expr_stmt|;
name|partitionList
operator|=
name|ExpressionCommaList
argument_list|(
name|pos
argument_list|,
name|ExprContext
operator|.
name|ACCEPT_NONQUERY
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|53
index|]
operator|=
name|jj_gen
expr_stmt|;
name|partitionList
operator|=
name|SqlNodeList
operator|.
name|Empty
expr_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ORDER
case|:
name|orderList
operator|=
name|OrderBy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|54
index|]
operator|=
name|jj_gen
expr_stmt|;
name|orderList
operator|=
name|SqlNodeList
operator|.
name|Empty
expr_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGE
case|:
case|case
name|ROWS
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ROWS
case|:
name|jj_consume_token
argument_list|(
name|ROWS
argument_list|)
expr_stmt|;
name|isRows
operator|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGE
case|:
name|jj_consume_token
argument_list|(
name|RANGE
argument_list|)
expr_stmt|;
name|isRows
operator|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|55
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BETWEEN
case|:
name|jj_consume_token
argument_list|(
name|BETWEEN
argument_list|)
expr_stmt|;
name|lowerBound
operator|=
name|WindowRange
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|upperBound
operator|=
name|WindowRange
argument_list|()
expr_stmt|;
break|break;
case|case
name|CURRENT
case|:
case|case
name|DATE
case|:
case|case
name|FALSE
case|:
case|case
name|INTERVAL
case|:
case|case
name|NULL
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|TRUE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNKNOWN
case|:
case|case
name|UNSIGNED_INTEGER_LITERAL
case|:
case|case
name|APPROX_NUMERIC_LITERAL
case|:
case|case
name|DECIMAL_NUMERIC_LITERAL
case|:
case|case
name|BINARY_STRING_LITERAL
case|:
case|case
name|QUOTED_STRING
case|:
case|case
name|PREFIXED_STRING_LITERAL
case|:
case|case
name|UNICODE_STRING_LITERAL
case|:
case|case
name|LBRACE_D
case|:
case|case
name|LBRACE_T
case|:
case|case
name|LBRACE_TS
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
name|lowerBound
operator|=
name|WindowRange
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|56
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|57
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALLOW
case|:
case|case
name|DISALLOW
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALLOW
case|:
name|jj_consume_token
argument_list|(
name|ALLOW
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|PARTIAL
argument_list|)
expr_stmt|;
name|allowPartial
operator|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DISALLOW
case|:
name|jj_consume_token
argument_list|(
name|DISALLOW
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|PARTIAL
argument_list|)
expr_stmt|;
name|allowPartial
operator|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|58
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|59
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|endPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|windowOperator
operator|.
name|createCall
argument_list|(
literal|null
argument_list|,
name|id
argument_list|,
name|partitionList
argument_list|,
name|orderList
argument_list|,
name|isRows
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|allowPartial
argument_list|,
name|startPos
operator|.
name|plus
argument_list|(
name|endPos
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlNode
name|WindowRange
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|literal
decl_stmt|;
name|SqlParserPos
name|pos
init|=
literal|null
decl_stmt|;
name|SqlParserPos
name|endPos
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CURRENT
case|:
name|jj_consume_token
argument_list|(
name|CURRENT
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|endPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|windowOperator
operator|.
name|createCurrentRow
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|endPos
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|UNBOUNDED
case|:
name|jj_consume_token
argument_list|(
name|UNBOUNDED
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PRECEDING
case|:
name|jj_consume_token
argument_list|(
name|PRECEDING
argument_list|)
expr_stmt|;
name|endPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|windowOperator
operator|.
name|createUnboundedPreceding
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|endPos
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|FOLLOWING
case|:
name|jj_consume_token
argument_list|(
name|FOLLOWING
argument_list|)
expr_stmt|;
name|endPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|windowOperator
operator|.
name|createUnboundedFollowing
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|endPos
argument_list|)
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|60
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
case|case
name|DATE
case|:
case|case
name|FALSE
case|:
case|case
name|INTERVAL
case|:
case|case
name|NULL
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|TRUE
case|:
case|case
name|UNKNOWN
case|:
case|case
name|UNSIGNED_INTEGER_LITERAL
case|:
case|case
name|APPROX_NUMERIC_LITERAL
case|:
case|case
name|DECIMAL_NUMERIC_LITERAL
case|:
case|case
name|BINARY_STRING_LITERAL
case|:
case|case
name|QUOTED_STRING
case|:
case|case
name|PREFIXED_STRING_LITERAL
case|:
case|case
name|UNICODE_STRING_LITERAL
case|:
case|case
name|LBRACE_D
case|:
case|case
name|LBRACE_T
case|:
case|case
name|LBRACE_TS
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
name|literal
operator|=
name|Literal
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PRECEDING
case|:
name|jj_consume_token
argument_list|(
name|PRECEDING
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|windowOperator
operator|.
name|createPreceding
argument_list|(
name|SqlLiteral
operator|.
name|unchain
argument_list|(
name|literal
argument_list|)
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|FOLLOWING
case|:
name|jj_consume_token
argument_list|(
name|FOLLOWING
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|windowOperator
operator|.
name|createFollowing
argument_list|(
name|SqlLiteral
operator|.
name|unchain
argument_list|(
name|literal
argument_list|)
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|61
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|62
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses an ORDER BY clause.  */
specifier|final
specifier|public
name|SqlNodeList
name|OrderBy
parameter_list|(
name|boolean
name|accept
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
name|list
decl_stmt|;
name|SqlNode
name|e
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|ORDER
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accept
condition|)
block|{
comment|// Someone told us ORDER BY wasn't allowed here.  So why
comment|// did they bother calling us?  To get the correct
comment|// parser position for error reporting.
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalOrderBy
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|jj_consume_token
argument_list|(
name|BY
argument_list|)
expr_stmt|;
name|e
operator|=
name|OrderItem
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|list
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|label_10
label|:
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|jj_2_21
argument_list|(
literal|2
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
break|break
name|label_10
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|e
operator|=
name|OrderItem
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses one list item in an ORDER BY clause.  */
specifier|final
specifier|public
name|SqlNode
name|OrderItem
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ASC
case|:
name|jj_consume_token
argument_list|(
name|ASC
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|DESC
case|:
name|jj_consume_token
argument_list|(
name|DESC
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|descendingOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|e
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|63
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// ----------------------------------------------------------------------------
comment|// Expressions
comment|/**  * Parses a SQL expression (such as might occur in a WHERE clause) followed by  * the end-of-file symbol.  */
specifier|final
specifier|public
name|SqlNode
name|SqlExpressionEof
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses either a row expression or a query expression without ORDER BY.  */
specifier|final
specifier|public
name|SqlNode
name|QueryOrExpr
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|SqlOperator
name|op
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|List
name|list
decl_stmt|;
name|e
operator|=
name|LeafQueryOrExpr
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|list
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|label_11
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EXCEPT
case|:
case|case
name|INTERSECT
case|:
case|case
name|UNION
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|64
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_11
break|;
block|}
if|if
condition|(
operator|!
name|e
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|QUERY
argument_list|)
condition|)
block|{
comment|// whoops, expression we just parsed wasn't a query,
comment|// but we're about to see something like UNION, so
comment|// force an exception retroactively
name|checkNonQueryExpression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
block|}
name|op
operator|=
name|BinaryQueryOperator
argument_list|()
expr_stmt|;
comment|// ensure a query is legal in this context
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|checkQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|e
operator|=
name|LeafQueryOrExpr
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SqlParserUtil
operator|.
name|ToTreeListItem
argument_list|(
name|op
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
name|SqlParserUtil
operator|.
name|toTree
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses either a row expression, a leaf query expression, or  * a parenthesized expression of any kind.  */
specifier|final
specifier|public
name|SqlNode
name|LeafQueryOrExpr
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
if|if
condition|(
name|jj_2_22
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|e
operator|=
name|Expression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SELECT
case|:
case|case
name|TABLE
case|:
case|case
name|VALUES
case|:
name|e
operator|=
name|LeafQuery
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|65
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a row expression or a parenthesized expression of any kind.  */
specifier|final
specifier|public
name|SqlNode
name|Expression
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
name|list
decl_stmt|;
name|SqlNode
name|e
decl_stmt|;
name|list
operator|=
name|Expression2
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|e
operator|=
name|SqlParserUtil
operator|.
name|toTree
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// TODO jvs 15-Nov-2003:  ANY/ALL
comment|/**  * Parses a binary row expression, or a parenthesized expression of any  * kind.  *  *<p>The result is as a flat list of operators and operands. The top-level  * call to get an expression should call {@link #Expression}, but lower-level  * calls should call this, to give the parser the opos to associate  * operator calls.  *  *<p>For example 'a = b like c = d' should come out '((a = b) like c) = d'  * because LIKE and '=' have the same precedence, but tends to come out as '(a  * = b) like (c = d)' because (a = b) and (c = d) are parsed as separate  * expressions.  */
specifier|final
specifier|public
name|List
name|Expression2
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
name|list
decl_stmt|,
name|list2
decl_stmt|;
name|SqlNodeList
name|nodeList
decl_stmt|;
name|SqlNode
name|e
decl_stmt|;
name|SqlOperator
name|op
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|e
operator|=
name|Expression3
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|list
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|BETWEEN
case|:
case|case
name|IN
case|:
case|case
name|IS
case|:
case|case
name|LIKE
case|:
case|case
name|MEMBER
case|:
case|case
name|MULTISET
case|:
case|case
name|NOT
case|:
case|case
name|OR
case|:
case|case
name|SIMILAR
case|:
case|case
name|SUBMULTISET
case|:
case|case
name|EQ
case|:
case|case
name|GT
case|:
case|case
name|LT
case|:
case|case
name|LE
case|:
case|case
name|GE
case|:
case|case
name|NE
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|STAR
case|:
case|case
name|SLASH
case|:
case|case
name|CONCAT
case|:
name|label_12
label|:
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|jj_2_24
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IN
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|notInOperator
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
break|break;
case|case
name|IN
case|:
name|jj_consume_token
argument_list|(
name|IN
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|inOperator
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|66
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|nodeList
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_NONCURSOR
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SqlParserUtil
operator|.
name|ToTreeListItem
argument_list|(
name|op
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|// special case for stuff like IN (s1 UNION s2)
if|if
condition|(
name|nodeList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|SqlNode
name|item
init|=
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|QUERY
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|nodeList
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|nodeList
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|jj_2_25
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|BETWEEN
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|notBetweenOperator
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ASYMMETRIC
case|:
case|case
name|SYMMETRIC
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SYMMETRIC
case|:
name|jj_consume_token
argument_list|(
name|SYMMETRIC
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|symmetricNotBetweenOperator
expr_stmt|;
break|break;
case|case
name|ASYMMETRIC
case|:
name|jj_consume_token
argument_list|(
name|ASYMMETRIC
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|67
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|68
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
case|case
name|BETWEEN
case|:
name|jj_consume_token
argument_list|(
name|BETWEEN
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|betweenOperator
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ASYMMETRIC
case|:
case|case
name|SYMMETRIC
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SYMMETRIC
case|:
name|jj_consume_token
argument_list|(
name|SYMMETRIC
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|symmetricBetweenOperator
expr_stmt|;
break|break;
case|case
name|ASYMMETRIC
case|:
name|jj_consume_token
argument_list|(
name|ASYMMETRIC
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|69
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|70
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|71
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|e
operator|=
name|Expression3
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SqlParserUtil
operator|.
name|ToTreeListItem
argument_list|(
name|op
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LIKE
case|:
case|case
name|NOT
case|:
case|case
name|SIMILAR
case|:
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LIKE
case|:
name|jj_consume_token
argument_list|(
name|LIKE
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|notLikeOperator
expr_stmt|;
break|break;
case|case
name|SIMILAR
case|:
name|jj_consume_token
argument_list|(
name|SIMILAR
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|TO
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|notSimilarOperator
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|72
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
case|case
name|LIKE
case|:
name|jj_consume_token
argument_list|(
name|LIKE
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|likeOperator
expr_stmt|;
break|break;
case|case
name|SIMILAR
case|:
name|jj_consume_token
argument_list|(
name|SIMILAR
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|TO
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|similarOperator
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|73
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|list2
operator|=
name|Expression2
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SqlParserUtil
operator|.
name|ToTreeListItem
argument_list|(
name|op
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|list2
argument_list|)
expr_stmt|;
if|if
condition|(
name|jj_2_23
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|ESCAPE
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression3
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SqlParserUtil
operator|.
name|ToTreeListItem
argument_list|(
name|SqlStdOperatorTable
operator|.
name|escapeOperator
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|74
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_26
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|op
operator|=
name|BinaryRowOperator
argument_list|()
expr_stmt|;
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression3
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SqlParserUtil
operator|.
name|ToTreeListItem
argument_list|(
name|op
argument_list|,
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IS
case|:
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|op
operator|=
name|PostfixRowOperator
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SqlParserUtil
operator|.
name|ToTreeListItem
argument_list|(
name|op
argument_list|,
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|75
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|jj_2_27
argument_list|(
literal|2
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
break|break
name|label_12
break|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|list
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|76
index|]
operator|=
name|jj_gen
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|list
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a unary row expression, or a parenthesized expression of any  * kind.  */
specifier|final
specifier|public
name|SqlNode
name|Expression3
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|List
name|list
decl_stmt|;
name|SqlNodeList
name|list1
decl_stmt|;
name|SqlNodeList
name|list2
decl_stmt|;
name|SqlPrefixOperator
name|op
decl_stmt|;
name|boolean
name|rowSeen
init|=
literal|false
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlParserPos
name|prefixRowOpPos
decl_stmt|;
if|if
condition|(
name|jj_2_28
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|e
operator|=
name|AtomicRowExpression
argument_list|()
expr_stmt|;
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CURSOR
case|:
name|e
operator|=
name|CursorExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|80
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_29
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|list
operator|=
name|SimpleIdentifierCommaList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
if|if
condition|(
name|exprContext
operator|!=
name|ExprContext
operator|.
name|ACCEPT_ALL
operator|&&
name|exprContext
operator|!=
name|ExprContext
operator|.
name|ACCEPT_CURSOR
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalRowExpression
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|rowConstructor
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EXISTS
case|:
case|case
name|NOT
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
name|op
operator|=
name|PrefixRowOperator
argument_list|()
expr_stmt|;
name|prefixRowOpPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|checkNonQueryExpression
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression3
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|SqlParserPos
name|callPos
init|=
name|prefixRowOpPos
operator|.
name|plus
argument_list|(
name|e
operator|.
name|getParserPosition
argument_list|()
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|op
operator|.
name|createCall
argument_list|(
name|callPos
argument_list|,
name|e
argument_list|)
return|;
block|}
break|break;
case|case
name|ROW
case|:
case|case
name|LPAREN
case|:
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ROW
case|:
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|rowSeen
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|77
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|list1
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowSeen
condition|)
block|{
comment|// interpret as row constructor
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|rowConstructor
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|list1
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|MONTH
case|:
case|case
name|OVERLAPS
case|:
case|case
name|SECOND
case|:
case|case
name|YEAR
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OVERLAPS
case|:
name|jj_consume_token
argument_list|(
name|OVERLAPS
argument_list|)
expr_stmt|;
name|list2
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|exprContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|list1
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|||
name|list2
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|list1
operator|.
name|getParserPosition
argument_list|()
operator|.
name|plus
argument_list|(
name|list2
operator|.
name|getParserPosition
argument_list|()
argument_list|)
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalOverlaps
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|SqlNode
name|node
range|:
name|list2
control|)
block|{
name|list1
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|overlapsOperator
operator|.
name|createCall
argument_list|(
name|list1
operator|.
name|getParserPosition
argument_list|()
operator|.
name|plus
argument_list|(
name|list2
operator|.
name|getParserPosition
argument_list|()
argument_list|)
argument_list|,
name|list1
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|MONTH
case|:
case|case
name|SECOND
case|:
case|case
name|YEAR
case|:
name|e
operator|=
name|IntervalQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|list1
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
name|list1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|SqlCall
condition|)
block|{
specifier|final
name|SqlCall
name|call
init|=
operator|(
name|SqlCall
operator|)
name|list1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|MINUS
operator|&&
operator|(
name|call
operator|.
name|operands
operator|.
name|length
operator|==
literal|2
operator|)
condition|)
block|{
name|List
name|list3
init|=
name|startList
argument_list|(
name|call
operator|.
name|operands
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|list3
operator|.
name|add
argument_list|(
name|call
operator|.
name|operands
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|list3
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|minusDateOperator
operator|.
name|createCall
argument_list|(
name|list1
operator|.
name|getParserPosition
argument_list|()
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|list3
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|list1
operator|.
name|getParserPosition
argument_list|()
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalMinusDate
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|78
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|79
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|list1
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// interpret as single value or query
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|list1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// interpret as row constructor
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|rowConstructor
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|list1
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|81
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a COLLATE clause  */
specifier|final
specifier|public
name|SqlCollation
name|CollateClause
parameter_list|()
throws|throws
name|ParseException
block|{
name|jj_consume_token
argument_list|(
name|COLLATE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COLLATION_ID
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlCollation
argument_list|(
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
argument_list|,
name|SqlCollation
operator|.
name|Coercibility
operator|.
name|Explicit
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses an atomic row expression.  */
specifier|final
specifier|public
name|SqlNode
name|AtomicRowExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|SqlParserPos
name|whenPos
decl_stmt|;
name|SqlParserPos
name|thenPos
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DATE
case|:
case|case
name|FALSE
case|:
case|case
name|INTERVAL
case|:
case|case
name|NULL
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|TRUE
case|:
case|case
name|UNKNOWN
case|:
case|case
name|UNSIGNED_INTEGER_LITERAL
case|:
case|case
name|APPROX_NUMERIC_LITERAL
case|:
case|case
name|DECIMAL_NUMERIC_LITERAL
case|:
case|case
name|BINARY_STRING_LITERAL
case|:
case|case
name|QUOTED_STRING
case|:
case|case
name|PREFIXED_STRING_LITERAL
case|:
case|case
name|UNICODE_STRING_LITERAL
case|:
case|case
name|LBRACE_D
case|:
case|case
name|LBRACE_T
case|:
case|case
name|LBRACE_TS
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
name|e
operator|=
name|Literal
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|HOOK
case|:
name|e
operator|=
name|DynamicParam
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|84
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_31
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|e
operator|=
name|BuiltinFunctionCall
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LBRACE_FN
case|:
name|e
operator|=
name|JdbcFunctionCall
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|MULTISET
case|:
name|e
operator|=
name|MultisetConstructor
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|85
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_32
argument_list|(
literal|2147483647
argument_list|)
condition|)
block|{
name|e
operator|=
name|NamedFunctionCall
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CURRENT_CATALOG
case|:
case|case
name|CURRENT_DATE
case|:
case|case
name|CURRENT_DEFAULT_TRANSFORM_GROUP
case|:
case|case
name|CURRENT_PATH
case|:
case|case
name|CURRENT_ROLE
case|:
case|case
name|CURRENT_SCHEMA
case|:
case|case
name|CURRENT_TIME
case|:
case|case
name|CURRENT_TIMESTAMP
case|:
case|case
name|CURRENT_USER
case|:
case|case
name|LOCALTIME
case|:
case|case
name|LOCALTIMESTAMP
case|:
case|case
name|SESSION_USER
case|:
case|case
name|SYSTEM_USER
case|:
case|case
name|USER
case|:
name|e
operator|=
name|ContextVariable
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|e
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|NEW
case|:
name|e
operator|=
name|NewSpecification
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|CASE
case|:
name|SqlNode
name|caseIdentifier
init|=
literal|null
decl_stmt|;
name|SqlNode
name|elseClause
init|=
literal|null
decl_stmt|;
name|List
name|whenList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|thenList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|//sorry there is no wishlist
name|jj_consume_token
argument_list|(
name|CASE
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
if|if
condition|(
name|jj_2_30
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|caseIdentifier
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
empty_stmt|;
block|}
name|label_13
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|jj_consume_token
argument_list|(
name|WHEN
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|whenPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|whenList
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|THEN
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|thenPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|thenList
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|WHEN
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|82
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_13
break|;
block|}
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ELSE
case|:
name|jj_consume_token
argument_list|(
name|ELSE
argument_list|)
expr_stmt|;
name|elseClause
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|83
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|END
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|caseOperator
operator|.
name|createSwitchedCall
argument_list|(
name|pos
argument_list|,
name|caseIdentifier
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|whenList
argument_list|,
name|whenPos
argument_list|)
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|thenList
argument_list|,
name|thenPos
argument_list|)
argument_list|,
name|elseClause
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|86
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a literal expression, allowing continued string literals.  * Usually returns an SqlLiteral, but a continued string literal  * is an SqlCall expression, which concatenates 2 or more string  * literals; the validator reduces this.  */
specifier|final
specifier|public
name|SqlNode
name|Literal
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|UNSIGNED_INTEGER_LITERAL
case|:
case|case
name|APPROX_NUMERIC_LITERAL
case|:
case|case
name|DECIMAL_NUMERIC_LITERAL
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
name|e
operator|=
name|NumericLiteral
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|BINARY_STRING_LITERAL
case|:
case|case
name|QUOTED_STRING
case|:
case|case
name|PREFIXED_STRING_LITERAL
case|:
case|case
name|UNICODE_STRING_LITERAL
case|:
name|e
operator|=
name|StringLiteral
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|FALSE
case|:
case|case
name|NULL
case|:
case|case
name|TRUE
case|:
case|case
name|UNKNOWN
case|:
name|e
operator|=
name|SpecialLiteral
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|LBRACE_D
case|:
case|case
name|LBRACE_T
case|:
case|case
name|LBRACE_TS
case|:
name|e
operator|=
name|DateTimeLiteral
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|INTERVAL
case|:
name|e
operator|=
name|IntervalLiteral
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|87
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/** Parses a unsigned numeric literal */
specifier|final
specifier|public
name|SqlNumericLiteral
name|UnsignedNumericLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|UNSIGNED_INTEGER_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|UNSIGNED_INTEGER_LITERAL
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlLiteral
operator|.
name|createExactNumeric
argument_list|(
name|token
operator|.
name|image
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|DECIMAL_NUMERIC_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|DECIMAL_NUMERIC_LITERAL
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlLiteral
operator|.
name|createExactNumeric
argument_list|(
name|token
operator|.
name|image
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|APPROX_NUMERIC_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|APPROX_NUMERIC_LITERAL
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlLiteral
operator|.
name|createApproxNumeric
argument_list|(
name|token
operator|.
name|image
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|88
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/** Parses a numeric literal (can be signed) */
specifier|final
specifier|public
name|SqlLiteral
name|NumericLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlNumericLiteral
name|num
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PLUS
case|:
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|num
operator|=
name|UnsignedNumericLiteral
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|num
return|;
block|}
break|break;
case|case
name|MINUS
case|:
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|num
operator|=
name|UnsignedNumericLiteral
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlLiteral
operator|.
name|createNegative
argument_list|(
name|num
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|UNSIGNED_INTEGER_LITERAL
case|:
case|case
name|APPROX_NUMERIC_LITERAL
case|:
case|case
name|DECIMAL_NUMERIC_LITERAL
case|:
name|num
operator|=
name|UnsignedNumericLiteral
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|num
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|89
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/** Parse a special literal keyword */
specifier|final
specifier|public
name|SqlLiteral
name|SpecialLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TRUE
case|:
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|FALSE
case|:
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|UNKNOWN
case|:
name|jj_consume_token
argument_list|(
name|UNKNOWN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlLiteral
operator|.
name|createUnknown
argument_list|(
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|NULL
case|:
name|jj_consume_token
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlLiteral
operator|.
name|createNull
argument_list|(
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|90
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a string literal. The literal may be continued onto several  * lines.  For a simple literal, the result is an SqlLiteral.  For a continued  * literal, the result is an SqlCall expression, which concatenates 2 or more  * string literals; the validator reduces this.  *  * @see SqlLiteral#unchain(SqlNode)  * @see SqlLiteral#stringValue(SqlNode)  *  * @return a literal expression  */
specifier|final
specifier|public
name|SqlNode
name|StringLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|p
decl_stmt|;
name|int
name|nfrags
init|=
literal|0
decl_stmt|;
name|List
name|frags
init|=
literal|null
decl_stmt|;
name|char
name|unicodeEscapeChar
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BINARY_STRING_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|BINARY_STRING_LITERAL
argument_list|)
expr_stmt|;
try|try
block|{
name|p
operator|=
name|SqlParserUtil
operator|.
name|trim
argument_list|(
name|token
operator|.
name|image
argument_list|,
literal|"xX'"
argument_list|)
expr_stmt|;
name|frags
operator|=
name|startList
argument_list|(
name|SqlLiteral
operator|.
name|createBinaryString
argument_list|(
name|p
argument_list|,
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nfrags
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalBinaryString
operator|.
name|ex
argument_list|(
name|token
operator|.
name|image
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|label_14
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|QUOTED_STRING
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|91
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_14
break|;
block|}
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
try|try
block|{
name|p
operator|=
name|SqlParserUtil
operator|.
name|trim
argument_list|(
name|token
operator|.
name|image
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
comment|// no embedded quotes
name|frags
operator|.
name|add
argument_list|(
name|SqlLiteral
operator|.
name|createBinaryString
argument_list|(
name|p
argument_list|,
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nfrags
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalBinaryString
operator|.
name|ex
argument_list|(
name|token
operator|.
name|image
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
assert|assert
operator|(
name|nfrags
operator|>
literal|0
operator|)
assert|;
if|if
condition|(
name|nfrags
operator|==
literal|1
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|SqlLiteral
operator|)
name|frags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// just the head fragment
block|}
else|else
block|{
name|SqlParserPos
name|pos2
init|=
name|SqlParserPos
operator|.
name|sum
argument_list|(
name|frags
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|literalChainOperator
operator|.
name|createCall
argument_list|(
name|pos2
argument_list|,
name|frags
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|QUOTED_STRING
case|:
case|case
name|PREFIXED_STRING_LITERAL
case|:
case|case
name|UNICODE_STRING_LITERAL
case|:
name|String
name|charSet
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PREFIXED_STRING_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|PREFIXED_STRING_LITERAL
argument_list|)
expr_stmt|;
name|charSet
operator|=
name|SqlParserUtil
operator|.
name|getCharacterSet
argument_list|(
name|token
operator|.
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNICODE_STRING_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|UNICODE_STRING_LITERAL
argument_list|)
expr_stmt|;
comment|// TODO jvs 2-Feb-2009:  support the explicit specification of
comment|// a character set for Unicode string literals, per SQL:2003
name|unicodeEscapeChar
operator|=
literal|'\u005c\u005c'
expr_stmt|;
name|charSet
operator|=
literal|"UTF16"
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|92
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|p
operator|=
name|SqlParserUtil
operator|.
name|parseString
argument_list|(
name|token
operator|.
name|image
argument_list|)
expr_stmt|;
name|SqlCharStringLiteral
name|literal
decl_stmt|;
try|try
block|{
name|literal
operator|=
name|SqlLiteral
operator|.
name|createCharString
argument_list|(
name|p
argument_list|,
name|charSet
argument_list|,
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|UnsupportedCharsetException
name|e
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|UnknownCharacterSet
operator|.
name|ex
argument_list|(
name|charSet
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|frags
operator|=
name|startList
argument_list|(
name|literal
argument_list|)
expr_stmt|;
name|nfrags
operator|++
expr_stmt|;
name|label_15
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|QUOTED_STRING
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|93
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_15
break|;
block|}
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
name|p
operator|=
name|SqlParserUtil
operator|.
name|parseString
argument_list|(
name|token
operator|.
name|image
argument_list|)
expr_stmt|;
try|try
block|{
name|literal
operator|=
name|SqlLiteral
operator|.
name|createCharString
argument_list|(
name|p
argument_list|,
name|charSet
argument_list|,
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|UnsupportedCharsetException
name|e
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|UnknownCharacterSet
operator|.
name|ex
argument_list|(
name|charSet
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|frags
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
name|nfrags
operator|++
expr_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|UESCAPE
case|:
name|jj_consume_token
argument_list|(
name|UESCAPE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
if|if
condition|(
name|unicodeEscapeChar
operator|==
literal|0
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|UnicodeEscapeUnexpected
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|String
name|s
init|=
name|SqlParserUtil
operator|.
name|parseString
argument_list|(
name|token
operator|.
name|image
argument_list|)
decl_stmt|;
name|unicodeEscapeChar
operator|=
name|SqlParserUtil
operator|.
name|checkUnicodeEscapeChar
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|94
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
assert|assert
operator|(
name|nfrags
operator|>
literal|0
operator|)
assert|;
if|if
condition|(
name|nfrags
operator|==
literal|1
condition|)
block|{
comment|// just the head fragment
name|SqlLiteral
name|lit
init|=
operator|(
name|SqlLiteral
operator|)
name|frags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|lit
operator|.
name|unescapeUnicode
argument_list|(
name|unicodeEscapeChar
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|SqlNode
index|[]
name|rands
init|=
operator|(
name|SqlNode
index|[]
operator|)
name|frags
operator|.
name|toArray
argument_list|(
operator|new
name|SqlNode
index|[
name|nfrags
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rands
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|rands
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|SqlLiteral
operator|)
name|rands
index|[
name|i
index|]
operator|)
operator|.
name|unescapeUnicode
argument_list|(
name|unicodeEscapeChar
argument_list|)
expr_stmt|;
block|}
name|SqlParserPos
name|pos2
init|=
name|SqlParserPos
operator|.
name|sum
argument_list|(
name|rands
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|literalChainOperator
operator|.
name|createCall
argument_list|(
name|pos2
argument_list|,
name|rands
argument_list|)
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|95
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a date/time literal.  */
specifier|final
specifier|public
name|SqlLiteral
name|DateTimeLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|p
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LBRACE_D
case|:
name|jj_consume_token
argument_list|(
name|LBRACE_D
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
name|p
operator|=
name|token
operator|.
name|image
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|parseDateLiteral
argument_list|(
name|p
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|LBRACE_T
case|:
name|jj_consume_token
argument_list|(
name|LBRACE_T
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
name|p
operator|=
name|token
operator|.
name|image
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|parseTimeLiteral
argument_list|(
name|p
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|LBRACE_TS
case|:
name|jj_consume_token
argument_list|(
name|LBRACE_TS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
name|p
operator|=
name|token
operator|.
name|image
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|parseTimestampLiteral
argument_list|(
name|p
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
name|DATE
case|:
name|jj_consume_token
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|parseDateLiteral
argument_list|(
name|token
operator|.
name|image
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|TIME
case|:
name|jj_consume_token
argument_list|(
name|TIME
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|parseTimeLiteral
argument_list|(
name|token
operator|.
name|image
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
name|jj_consume_token
argument_list|(
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|parseTimestampLiteral
argument_list|(
name|token
operator|.
name|image
argument_list|,
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|96
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/** Parses a MULTISET constructor */
specifier|final
specifier|public
name|SqlNode
name|MultisetConstructor
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
name|args
decl_stmt|;
name|SqlNode
name|e
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
if|if
condition|(
name|jj_2_33
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|MULTISET
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
comment|//by sub query "MULTISET(SELECT * FROM T)"
name|e
operator|=
name|LeafQueryOrExpr
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|multisetQueryConstructor
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MULTISET
case|:
name|jj_consume_token
argument_list|(
name|MULTISET
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LBRACKET
argument_list|)
expr_stmt|;
comment|//todo do trigraph aswell ??( ??)
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_NONQUERY
argument_list|)
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|label_16
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|97
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_16
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_NONQUERY
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RBRACKET
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|multisetValueConstructor
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|98
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses an interval literal.  */
specifier|final
specifier|public
name|SqlLiteral
name|IntervalLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|p
decl_stmt|;
name|SqlIntervalQualifier
name|intervalQualifier
decl_stmt|;
name|int
name|sign
init|=
literal|1
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|INTERVAL
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MINUS
case|:
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|sign
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|PLUS
case|:
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|sign
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|99
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|100
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
name|p
operator|=
name|token
operator|.
name|image
expr_stmt|;
name|intervalQualifier
operator|=
name|IntervalQualifier
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|parseIntervalLiteral
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|sign
argument_list|,
name|p
argument_list|,
name|intervalQualifier
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlIntervalQualifier
name|IntervalQualifier
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIntervalQualifier
operator|.
name|TimeUnit
name|start
decl_stmt|;
name|SqlIntervalQualifier
operator|.
name|TimeUnit
name|end
init|=
literal|null
decl_stmt|;
name|int
name|startPrec
init|=
name|SqlIntervalQualifier
operator|.
name|getDefaultPrecisionId
argument_list|()
decl_stmt|;
name|int
name|secondFracPrec
init|=
name|SqlIntervalQualifier
operator|.
name|getDefaultPrecisionId
argument_list|()
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|YEAR
case|:
name|jj_consume_token
argument_list|(
name|YEAR
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|startPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|101
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|jj_2_34
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|TO
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|MONTH
argument_list|)
expr_stmt|;
name|end
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|MONTH
expr_stmt|;
block|}
else|else
block|{
empty_stmt|;
block|}
name|start
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|YEAR
expr_stmt|;
break|break;
case|case
name|MONTH
case|:
name|jj_consume_token
argument_list|(
name|MONTH
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|startPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|102
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|start
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|MONTH
expr_stmt|;
break|break;
case|case
name|DAY
case|:
name|jj_consume_token
argument_list|(
name|DAY
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|startPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|103
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|jj_2_35
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|TO
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|HOUR
case|:
name|jj_consume_token
argument_list|(
name|HOUR
argument_list|)
expr_stmt|;
name|end
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|HOUR
expr_stmt|;
break|break;
case|case
name|MINUTE
case|:
name|jj_consume_token
argument_list|(
name|MINUTE
argument_list|)
expr_stmt|;
name|end
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|MINUTE
expr_stmt|;
break|break;
case|case
name|SECOND
case|:
name|jj_consume_token
argument_list|(
name|SECOND
argument_list|)
expr_stmt|;
name|end
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|SECOND
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|secondFracPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|104
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|105
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
empty_stmt|;
block|}
name|start
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|DAY
expr_stmt|;
break|break;
case|case
name|HOUR
case|:
name|jj_consume_token
argument_list|(
name|HOUR
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|startPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|106
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|jj_2_36
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|TO
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MINUTE
case|:
name|jj_consume_token
argument_list|(
name|MINUTE
argument_list|)
expr_stmt|;
name|end
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|MINUTE
expr_stmt|;
break|break;
case|case
name|SECOND
case|:
name|jj_consume_token
argument_list|(
name|SECOND
argument_list|)
expr_stmt|;
name|end
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|SECOND
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|secondFracPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|107
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|108
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
empty_stmt|;
block|}
name|start
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|HOUR
expr_stmt|;
break|break;
case|case
name|MINUTE
case|:
name|jj_consume_token
argument_list|(
name|MINUTE
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|startPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|109
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|jj_2_37
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|TO
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|SECOND
argument_list|)
expr_stmt|;
name|end
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|SECOND
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|secondFracPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|110
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|}
else|else
block|{
empty_stmt|;
block|}
name|start
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|MINUTE
expr_stmt|;
break|break;
case|case
name|SECOND
case|:
name|jj_consume_token
argument_list|(
name|SECOND
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|startPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|secondFracPrec
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|111
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|112
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|start
operator|=
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|SECOND
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|113
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlIntervalQualifier
argument_list|(
name|start
argument_list|,
name|startPrec
argument_list|,
name|end
argument_list|,
name|secondFracPrec
argument_list|,
name|getPos
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlIntervalQualifier
operator|.
name|TimeUnit
name|TimeUnit
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|YEAR
case|:
name|jj_consume_token
argument_list|(
name|YEAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|YEAR
return|;
block|}
break|break;
case|case
name|MONTH
case|:
name|jj_consume_token
argument_list|(
name|MONTH
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|MONTH
return|;
block|}
break|break;
case|case
name|DAY
case|:
name|jj_consume_token
argument_list|(
name|DAY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|DAY
return|;
block|}
break|break;
case|case
name|HOUR
case|:
name|jj_consume_token
argument_list|(
name|HOUR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|HOUR
return|;
block|}
break|break;
case|case
name|MINUTE
case|:
name|jj_consume_token
argument_list|(
name|MINUTE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|MINUTE
return|;
block|}
break|break;
case|case
name|SECOND
case|:
name|jj_consume_token
argument_list|(
name|SECOND
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlIntervalQualifier
operator|.
name|TimeUnit
operator|.
name|SECOND
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|114
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a dynamic parameter marker.  */
specifier|final
specifier|public
name|SqlDynamicParam
name|DynamicParam
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlParserPos
name|pos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|HOOK
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlDynamicParam
argument_list|(
name|nDynamicParams
operator|++
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a simple identifier as a string.  */
specifier|final
specifier|public
name|String
name|Identifier
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|id
decl_stmt|;
name|char
name|unicodeEscapeChar
init|=
literal|'\u005c\u005c'
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IDENTIFIER
case|:
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|id
operator|=
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
break|break;
case|case
name|QUOTED_IDENTIFIER
case|:
name|jj_consume_token
argument_list|(
name|QUOTED_IDENTIFIER
argument_list|)
expr_stmt|;
name|id
operator|=
name|SqlParserUtil
operator|.
name|strip
argument_list|(
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
argument_list|,
literal|"\u005c""
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|jj_consume_token
argument_list|(
name|UNICODE_QUOTED_IDENTIFIER
argument_list|)
expr_stmt|;
name|id
operator|=
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
expr_stmt|;
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
name|id
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|=
name|SqlParserUtil
operator|.
name|strip
argument_list|(
name|id
argument_list|,
literal|"\u005c""
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|UESCAPE
case|:
name|jj_consume_token
argument_list|(
name|UESCAPE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|SqlParserUtil
operator|.
name|parseString
argument_list|(
name|token
operator|.
name|image
argument_list|)
decl_stmt|;
name|unicodeEscapeChar
operator|=
name|SqlParserUtil
operator|.
name|checkUnicodeEscapeChar
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|115
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|SqlLiteral
name|lit
init|=
name|SqlLiteral
operator|.
name|createCharString
argument_list|(
name|id
argument_list|,
literal|"UTF16"
argument_list|,
name|getPos
argument_list|()
argument_list|)
decl_stmt|;
name|lit
operator|=
name|lit
operator|.
name|unescapeUnicode
argument_list|(
name|unicodeEscapeChar
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|lit
operator|.
name|toValue
argument_list|()
return|;
block|}
break|break;
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
name|id
operator|=
name|NonReservedKeyWord
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|116
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
if|if
condition|(
name|id
operator|.
name|length
argument_list|()
operator|>
literal|128
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IdentifierTooLong
operator|.
name|ex
argument_list|(
name|id
argument_list|,
literal|128
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|id
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a simple identifier as an SqlIdentifier.  */
specifier|final
specifier|public
name|SqlIdentifier
name|SimpleIdentifier
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|p
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|p
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|p
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a comma-separated list of simple identifiers.  */
specifier|final
specifier|public
name|List
name|SimpleIdentifierCommaList
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SqlIdentifier
name|id
decl_stmt|;
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|label_17
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|117
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_17
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|list
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a compound identifier.  */
specifier|final
specifier|public
name|SqlIdentifier
name|CompoundIdentifier
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|posList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
name|p
decl_stmt|;
name|p
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|posList
operator|.
name|add
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|label_18
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOT
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|118
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_18
break|;
block|}
name|jj_consume_token
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|p
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|posList
operator|.
name|add
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SqlParserPos
index|[]
name|componentPositions
init|=
operator|(
name|SqlParserPos
index|[]
operator|)
name|posList
operator|.
name|toArray
argument_list|(
operator|new
name|SqlParserPos
index|[
name|posList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|SqlParserPos
name|pos
init|=
name|SqlParserPos
operator|.
name|sum
argument_list|(
name|componentPositions
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|SqlParserUtil
operator|.
name|toStringArray
argument_list|(
name|list
argument_list|)
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|,
name|componentPositions
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a NEW UDT(...) expression.  */
specifier|final
specifier|public
name|SqlNode
name|NewSpecification
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlParserPos
name|callPos
decl_stmt|;
name|SqlNode
name|routineCall
decl_stmt|;
name|jj_consume_token
argument_list|(
name|NEW
argument_list|)
expr_stmt|;
name|callPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|routineCall
operator|=
name|NamedRoutineCall
argument_list|(
name|SqlFunctionCategory
operator|.
name|UserDefinedConstructor
argument_list|,
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|newOperator
operator|.
name|createCall
argument_list|(
name|callPos
argument_list|,
name|routineCall
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|//TODO: real parse errors.
specifier|final
specifier|public
name|int
name|UnsignedIntLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|UNSIGNED_INTEGER_LITERAL
argument_list|)
expr_stmt|;
try|try
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|image
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|int
name|IntLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|UNSIGNED_INTEGER_LITERAL
case|:
case|case
name|PLUS
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|UNSIGNED_INTEGER_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|UNSIGNED_INTEGER_LITERAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|PLUS
case|:
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|UNSIGNED_INTEGER_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|119
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
try|try
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|image
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
break|break;
case|case
name|MINUS
case|:
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|UNSIGNED_INTEGER_LITERAL
argument_list|)
expr_stmt|;
try|try
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|-
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|image
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|120
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// Type name with optional scale and precision
specifier|final
specifier|public
name|SqlDataTypeSpec
name|DataType
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|typeName
decl_stmt|;
name|SqlIdentifier
name|collectionTypeName
init|=
literal|null
decl_stmt|;
name|int
name|scale
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|precision
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|charSetName
init|=
literal|null
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|typeName
operator|=
name|TypeName
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|precision
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|scale
operator|=
name|UnsignedIntLiteral
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|121
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|122
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CHARACTER
case|:
name|jj_consume_token
argument_list|(
name|CHARACTER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|SET
argument_list|)
expr_stmt|;
name|charSetName
operator|=
name|Identifier
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|123
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MULTISET
case|:
name|collectionTypeName
operator|=
name|CollectionsTypeName
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|124
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|collectionTypeName
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlDataTypeSpec
argument_list|(
name|collectionTypeName
argument_list|,
name|typeName
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|,
name|charSetName
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlDataTypeSpec
argument_list|(
name|typeName
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|,
name|charSetName
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// Some SQL type names need special handling due to the fact that they have
comment|// spaces in them but are not quoted.
specifier|final
specifier|public
name|SqlIdentifier
name|TypeName
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|typeName
init|=
literal|null
decl_stmt|;
name|SqlParserPos
name|pos
init|=
name|getPos
argument_list|()
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|CHARACTER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CHARACTER
case|:
name|jj_consume_token
argument_list|(
name|CHARACTER
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|jj_consume_token
argument_list|(
name|CHAR
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|125
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|VARYING
case|:
name|jj_consume_token
argument_list|(
name|VARYING
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|126
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
case|case
name|VARCHAR
case|:
name|jj_consume_token
argument_list|(
name|VARCHAR
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|jj_consume_token
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|DATE
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|jj_consume_token
argument_list|(
name|TIME
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|TIME
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|jj_consume_token
argument_list|(
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEC
case|:
case|case
name|DECIMAL
case|:
case|case
name|NUMERIC
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DECIMAL
case|:
name|jj_consume_token
argument_list|(
name|DECIMAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEC
case|:
name|jj_consume_token
argument_list|(
name|DEC
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMERIC
case|:
name|jj_consume_token
argument_list|(
name|NUMERIC
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|127
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|jj_consume_token
argument_list|(
name|BOOLEAN
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTEGER
case|:
name|jj_consume_token
argument_list|(
name|INTEGER
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|jj_consume_token
argument_list|(
name|INT
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|jj_consume_token
argument_list|(
name|BINARY
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|VARYING
case|:
name|jj_consume_token
argument_list|(
name|VARYING
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|128
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
case|case
name|VARBINARY
case|:
name|jj_consume_token
argument_list|(
name|VARBINARY
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|TINYINT
case|:
name|jj_consume_token
argument_list|(
name|TINYINT
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|SMALLINT
case|:
name|jj_consume_token
argument_list|(
name|SMALLINT
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|BIGINT
case|:
name|jj_consume_token
argument_list|(
name|BIGINT
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|REAL
case|:
name|jj_consume_token
argument_list|(
name|REAL
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|REAL
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|jj_consume_token
argument_list|(
name|DOUBLE
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PRECISION
case|:
name|jj_consume_token
argument_list|(
name|PRECISION
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|129
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|jj_consume_token
argument_list|(
name|FLOAT
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|MULTISET
case|:
name|typeName
operator|=
name|CollectionsTypeName
argument_list|()
expr_stmt|;
break|break;
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|typeName
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|130
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|typeName
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlIdentifier
name|CollectionsTypeName
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|typeName
init|=
literal|null
decl_stmt|;
name|SqlParserPos
name|pos
init|=
name|getPos
argument_list|()
decl_stmt|;
name|jj_consume_token
argument_list|(
name|MULTISET
argument_list|)
expr_stmt|;
name|typeName
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|SqlTypeName
operator|.
name|MULTISET
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|typeName
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a CURSOR(query) expression.  The parser allows these  * anywhere, but the validator restricts them to appear only as  * arguments to table functions.  */
specifier|final
specifier|public
name|SqlNode
name|CursorExpression
parameter_list|(
name|ExprContext
name|exprContext
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlNode
name|e
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|CURSOR
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
if|if
condition|(
name|exprContext
operator|!=
name|ExprContext
operator|.
name|ACCEPT_ALL
operator|&&
name|exprContext
operator|!=
name|ExprContext
operator|.
name|ACCEPT_CURSOR
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalCursorExpression
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_QUERY
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|cursorConstructor
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|e
argument_list|)
return|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a call to a builtin function with special syntax.  */
specifier|final
specifier|public
name|SqlNode
name|BuiltinFunctionCall
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|name
decl_stmt|;
name|List
name|args
init|=
literal|null
decl_stmt|;
name|SqlNode
name|e
init|=
literal|null
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlParserPos
name|starPos
decl_stmt|;
name|SqlParserPos
name|namePos
decl_stmt|;
name|SqlDataTypeSpec
name|dt
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CAST
case|:
name|jj_consume_token
argument_list|(
name|CAST
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|AS
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BIGINT
case|:
case|case
name|BINARY
case|:
case|case
name|BOOLEAN
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHAR
case|:
case|case
name|CHARACTER
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATE
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEC
case|:
case|case
name|DECIMAL
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DOUBLE
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FLOAT
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INT
case|:
case|case
name|INTEGER
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MULTISET
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|NUMERIC
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|REAL
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SMALLINT
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|TINYINT
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VARCHAR
case|:
case|case
name|VARBINARY
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|dt
operator|=
name|DataType
argument_list|()
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|dt
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL
case|:
name|jj_consume_token
argument_list|(
name|INTERVAL
argument_list|)
expr_stmt|;
name|e
operator|=
name|IntervalQualifier
argument_list|()
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|131
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|castFunc
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|EXTRACT
case|:
name|jj_consume_token
argument_list|(
name|EXTRACT
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|SqlIntervalQualifier
operator|.
name|TimeUnit
name|unit
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|unit
operator|=
name|TimeUnit
argument_list|()
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
operator|new
name|SqlIntervalQualifier
argument_list|(
name|unit
argument_list|,
literal|null
argument_list|,
name|getPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|extractFunc
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|POSITION
case|:
name|jj_consume_token
argument_list|(
name|POSITION
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
comment|// FIXME jvs 31-Aug-2006:  FRG-192:  This should be
comment|// Expression(ExprContext.ACCEPT_SUBQUERY), but that doesn't work
comment|// because it matches the other kind of IN.
name|e
operator|=
name|AtomicRowExpression
argument_list|()
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IN
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|positionFunc
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|CONVERT
case|:
name|jj_consume_token
argument_list|(
name|CONVERT
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|USING
argument_list|)
expr_stmt|;
name|name
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|namePos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|name
argument_list|,
name|namePos
argument_list|)
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|convertFunc
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|TRANSLATE
case|:
name|jj_consume_token
argument_list|(
name|TRANSLATE
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|USING
argument_list|)
expr_stmt|;
name|name
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|namePos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|name
argument_list|,
name|namePos
argument_list|)
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|translateFunc
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|OVERLAY
case|:
name|jj_consume_token
argument_list|(
name|OVERLAY
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|PLACING
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FOR
case|:
name|jj_consume_token
argument_list|(
name|FOR
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|132
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|overlayFunc
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|FLOOR
case|:
name|jj_consume_token
argument_list|(
name|FLOOR
argument_list|)
expr_stmt|;
name|e
operator|=
name|FloorCeilOptions
argument_list|(
name|getPos
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|CEIL
case|:
case|case
name|CEILING
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CEIL
case|:
name|jj_consume_token
argument_list|(
name|CEIL
argument_list|)
expr_stmt|;
break|break;
case|case
name|CEILING
case|:
name|jj_consume_token
argument_list|(
name|CEILING
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|133
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|e
operator|=
name|FloorCeilOptions
argument_list|(
name|getPos
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|e
return|;
block|}
break|break;
case|case
name|SUBSTRING
case|:
name|jj_consume_token
argument_list|(
name|SUBSTRING
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
name|e
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FROM
case|:
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|134
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FOR
case|:
case|case
name|COMMA
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FOR
case|:
name|jj_consume_token
argument_list|(
name|FOR
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|135
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|136
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|substringFunc
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|TRIM
case|:
name|jj_consume_token
argument_list|(
name|TRIM
argument_list|)
expr_stmt|;
name|SqlLiteral
name|flag
init|=
literal|null
decl_stmt|;
name|SqlNode
name|trimChars
init|=
literal|null
decl_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|jj_2_39
argument_list|(
literal|2
argument_list|)
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BOTH
case|:
case|case
name|LEADING
case|:
case|case
name|TRAILING
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BOTH
case|:
name|jj_consume_token
argument_list|(
name|BOTH
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|flag
operator|=
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlTrimFunction
operator|.
name|Flag
operator|.
name|BOTH
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRAILING
case|:
name|jj_consume_token
argument_list|(
name|TRAILING
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|flag
operator|=
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlTrimFunction
operator|.
name|Flag
operator|.
name|TRAILING
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEADING
case|:
name|jj_consume_token
argument_list|(
name|LEADING
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|flag
operator|=
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|SqlTrimFunction
operator|.
name|Flag
operator|.
name|LEADING
argument_list|,
name|pos
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|137
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|138
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|jj_2_38
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|trimChars
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FROM
case|:
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|flag
operator|&&
literal|null
operator|==
name|trimChars
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|getPos
argument_list|()
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|IllegalFromEmpty
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|RPAREN
case|:
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
comment|// This is to handle the case of TRIM(x)
comment|// (FRG-191).
name|args
operator|=
name|startList
argument_list|(
name|flag
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// no trim chars
name|args
operator|.
name|add
argument_list|(
name|trimChars
argument_list|)
expr_stmt|;
comment|// reinterpret trimChars as source
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|trimFunc
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|139
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
empty_stmt|;
block|}
name|e
operator|=
name|Expression
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
name|flag
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|trimChars
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|trimFunc
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|140
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_40
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|SqlNode
name|node
decl_stmt|;
name|node
operator|=
name|ExtendedBuiltinFunctionCall
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|node
return|;
block|}
block|}
else|else
block|{
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a call to a named function (could be a builtin with regular  * syntax, or else a UDF).  *  *<p>  *  * NOTE: every UDF has two names: an<em>invocation name</em> and a  *<em>specific name</em>.  Normally, function calls are resolved via overload  * resolution and invocation names.  The SPECIFIC prefix allows overload  * resolution to be bypassed.  Note that usage of the SPECIFIC prefix in  * queries is non-standard; it is used internally by Farrago, e.g. in stored  * view definitions to permanently bind references to a particular function  * after the overload resolution performed by view creation.  *  *<p>  *  * TODO jvs 25-Mar-2005:  Once we have SQL-Flagger support, flag SPECIFIC  * as non-standard.  */
specifier|final
specifier|public
name|SqlNode
name|NamedFunctionCall
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|qualifiedName
decl_stmt|;
name|SqlIdentifier
name|id
init|=
literal|null
decl_stmt|;
name|List
name|args
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlParserPos
name|starPos
decl_stmt|;
name|SqlParserPos
name|overPos
init|=
literal|null
decl_stmt|;
name|boolean
name|over
init|=
literal|false
decl_stmt|;
name|SqlCall
name|function
init|=
literal|null
decl_stmt|;
name|SqlFunctionCategory
name|funcType
init|=
name|SqlFunctionCategory
operator|.
name|UserDefinedFunction
decl_stmt|;
name|SqlNode
name|e
init|=
literal|null
decl_stmt|;
name|SqlLiteral
name|quantifier
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SPECIFIC
case|:
name|jj_consume_token
argument_list|(
name|SPECIFIC
argument_list|)
expr_stmt|;
name|funcType
operator|=
name|SqlFunctionCategory
operator|.
name|UserDefinedSpecificFunction
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|141
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|qualifiedName
operator|=
name|FunctionName
argument_list|()
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
if|if
condition|(
name|jj_2_41
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|starPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|args
operator|=
name|startList
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
literal|"*"
argument_list|,
name|starPos
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|jj_2_42
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|args
operator|=
name|SqlParserUtil
operator|.
name|emptyList
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|args
operator|=
name|FunctionParameterList
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|quantifier
operator|=
operator|(
name|SqlLiteral
operator|)
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|args
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|142
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OVER
case|:
name|jj_consume_token
argument_list|(
name|OVER
argument_list|)
expr_stmt|;
name|overPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|over
operator|=
literal|true
expr_stmt|;
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|overPos
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
break|break;
case|case
name|LPAREN
case|:
name|e
operator|=
name|WindowSpecification
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|143
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|144
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|function
operator|=
name|createCall
argument_list|(
name|qualifiedName
argument_list|,
name|pos
argument_list|,
name|funcType
argument_list|,
name|quantifier
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|over
condition|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|overOperator
operator|.
name|createCall
argument_list|(
name|overPos
argument_list|,
operator|new
name|SqlNode
index|[]
block|{
name|function
block|,
name|id
block|}
argument_list|)
return|;
block|}
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|overOperator
operator|.
name|createCall
argument_list|(
name|overPos
argument_list|,
operator|new
name|SqlNode
index|[]
block|{
name|function
block|,
name|e
block|}
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|function
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/* * Parse Floor/Ceil function parameters */
specifier|final
specifier|public
name|SqlNode
name|StandardFloorCeilOptions
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|floorFlag
parameter_list|)
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|name
decl_stmt|;
name|SqlParserPos
name|overPos
init|=
literal|null
decl_stmt|;
name|SqlIdentifier
name|id
init|=
literal|null
decl_stmt|;
name|SqlNode
name|e
init|=
literal|null
decl_stmt|;
name|SqlCall
name|function
init|=
literal|null
decl_stmt|;
name|SqlNodeList
name|args
decl_stmt|;
name|boolean
name|over
init|=
literal|false
decl_stmt|;
name|args
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OVER
case|:
name|jj_consume_token
argument_list|(
name|OVER
argument_list|)
expr_stmt|;
name|overPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|over
operator|=
literal|true
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|id
operator|=
name|SimpleIdentifier
argument_list|()
expr_stmt|;
break|break;
case|case
name|LPAREN
case|:
name|e
operator|=
name|WindowSpecification
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|145
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|146
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|SqlOperator
name|op
init|=
name|floorFlag
condition|?
name|SqlStdOperatorTable
operator|.
name|floorFunc
else|:
name|SqlStdOperatorTable
operator|.
name|ceilFunc
decl_stmt|;
name|function
operator|=
name|op
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|args
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|over
condition|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|overOperator
operator|.
name|createCall
argument_list|(
name|overPos
argument_list|,
operator|new
name|SqlNode
index|[]
block|{
name|function
block|,
name|id
block|}
argument_list|)
return|;
block|}
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|overOperator
operator|.
name|createCall
argument_list|(
name|overPos
argument_list|,
operator|new
name|SqlNode
index|[]
block|{
name|function
block|,
name|e
block|}
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|function
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses the name of a JDBC function that is a token but is not reserved.  */
specifier|final
specifier|public
name|String
name|NonReservedJdbcFunctionName
parameter_list|()
throws|throws
name|ParseException
block|{
name|jj_consume_token
argument_list|(
name|SUBSTRING
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses the name of a function (either a compound identifier or  * a reserved word which can be used as a function name).  */
specifier|final
specifier|public
name|SqlIdentifier
name|FunctionName
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|qualifiedName
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|qualifiedName
operator|=
name|CompoundIdentifier
argument_list|()
expr_stmt|;
break|break;
case|case
name|ABS
case|:
case|case
name|AVG
case|:
case|case
name|CARDINALITY
case|:
case|case
name|CHAR_LENGTH
case|:
case|case
name|CHARACTER_LENGTH
case|:
case|case
name|COALESCE
case|:
case|case
name|COLLECT
case|:
case|case
name|COUNT
case|:
case|case
name|CUME_DIST
case|:
case|case
name|CURRENT_DATE
case|:
case|case
name|CURRENT_TIME
case|:
case|case
name|CURRENT_TIMESTAMP
case|:
case|case
name|DENSE_RANK
case|:
case|case
name|ELEMENT
case|:
case|case
name|EXP
case|:
case|case
name|FIRST_VALUE
case|:
case|case
name|FUSION
case|:
case|case
name|LAST_VALUE
case|:
case|case
name|LN
case|:
case|case
name|LOCALTIME
case|:
case|case
name|LOCALTIMESTAMP
case|:
case|case
name|LOWER
case|:
case|case
name|MAX
case|:
case|case
name|MIN
case|:
case|case
name|MOD
case|:
case|case
name|NULLIF
case|:
case|case
name|OCTET_LENGTH
case|:
case|case
name|PERCENT_RANK
case|:
case|case
name|POWER
case|:
case|case
name|RANK
case|:
case|case
name|ROW_NUMBER
case|:
case|case
name|SQRT
case|:
case|case
name|STDDEV_POP
case|:
case|case
name|STDDEV_SAMP
case|:
case|case
name|SUM
case|:
case|case
name|UPPER
case|:
case|case
name|VAR_POP
case|:
case|case
name|VAR_SAMP
case|:
name|qualifiedName
operator|=
name|ReservedFunctionName
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|147
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|qualifiedName
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a reserved word which is used as the name of a function.  */
specifier|final
specifier|public
name|SqlIdentifier
name|ReservedFunctionName
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|name
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ABS
case|:
name|jj_consume_token
argument_list|(
name|ABS
argument_list|)
expr_stmt|;
break|break;
case|case
name|AVG
case|:
name|jj_consume_token
argument_list|(
name|AVG
argument_list|)
expr_stmt|;
break|break;
case|case
name|CARDINALITY
case|:
name|jj_consume_token
argument_list|(
name|CARDINALITY
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR_LENGTH
case|:
name|jj_consume_token
argument_list|(
name|CHAR_LENGTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARACTER_LENGTH
case|:
name|jj_consume_token
argument_list|(
name|CHARACTER_LENGTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|COALESCE
case|:
name|jj_consume_token
argument_list|(
name|COALESCE
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLLECT
case|:
name|jj_consume_token
argument_list|(
name|COLLECT
argument_list|)
expr_stmt|;
break|break;
case|case
name|CUME_DIST
case|:
name|jj_consume_token
argument_list|(
name|CUME_DIST
argument_list|)
expr_stmt|;
break|break;
case|case
name|COUNT
case|:
name|jj_consume_token
argument_list|(
name|COUNT
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_DATE
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_DATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_TIME
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_TIME
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_TIMESTAMP
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_TIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|DENSE_RANK
case|:
name|jj_consume_token
argument_list|(
name|DENSE_RANK
argument_list|)
expr_stmt|;
break|break;
case|case
name|ELEMENT
case|:
name|jj_consume_token
argument_list|(
name|ELEMENT
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXP
case|:
name|jj_consume_token
argument_list|(
name|EXP
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIRST_VALUE
case|:
name|jj_consume_token
argument_list|(
name|FIRST_VALUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|FUSION
case|:
name|jj_consume_token
argument_list|(
name|FUSION
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAST_VALUE
case|:
name|jj_consume_token
argument_list|(
name|LAST_VALUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|LN
case|:
name|jj_consume_token
argument_list|(
name|LN
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCALTIME
case|:
name|jj_consume_token
argument_list|(
name|LOCALTIME
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCALTIMESTAMP
case|:
name|jj_consume_token
argument_list|(
name|LOCALTIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOWER
case|:
name|jj_consume_token
argument_list|(
name|LOWER
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|jj_consume_token
argument_list|(
name|MAX
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIN
case|:
name|jj_consume_token
argument_list|(
name|MIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|MOD
case|:
name|jj_consume_token
argument_list|(
name|MOD
argument_list|)
expr_stmt|;
break|break;
case|case
name|NULLIF
case|:
name|jj_consume_token
argument_list|(
name|NULLIF
argument_list|)
expr_stmt|;
break|break;
case|case
name|OCTET_LENGTH
case|:
name|jj_consume_token
argument_list|(
name|OCTET_LENGTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|PERCENT_RANK
case|:
name|jj_consume_token
argument_list|(
name|PERCENT_RANK
argument_list|)
expr_stmt|;
break|break;
case|case
name|POWER
case|:
name|jj_consume_token
argument_list|(
name|POWER
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANK
case|:
name|jj_consume_token
argument_list|(
name|RANK
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROW_NUMBER
case|:
name|jj_consume_token
argument_list|(
name|ROW_NUMBER
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQRT
case|:
name|jj_consume_token
argument_list|(
name|SQRT
argument_list|)
expr_stmt|;
break|break;
case|case
name|STDDEV_POP
case|:
name|jj_consume_token
argument_list|(
name|STDDEV_POP
argument_list|)
expr_stmt|;
break|break;
case|case
name|STDDEV_SAMP
case|:
name|jj_consume_token
argument_list|(
name|STDDEV_SAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUM
case|:
name|jj_consume_token
argument_list|(
name|SUM
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPPER
case|:
name|jj_consume_token
argument_list|(
name|UPPER
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_POP
case|:
name|jj_consume_token
argument_list|(
name|VAR_POP
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_SAMP
case|:
name|jj_consume_token
argument_list|(
name|VAR_SAMP
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|148
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|name
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|name
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SqlIdentifier
name|ContextVariable
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlIdentifier
name|name
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CURRENT_CATALOG
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_DATE
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_DATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_DEFAULT_TRANSFORM_GROUP
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_DEFAULT_TRANSFORM_GROUP
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_PATH
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_PATH
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_ROLE
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_ROLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_TIME
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_TIME
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_TIMESTAMP
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_TIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRENT_USER
case|:
name|jj_consume_token
argument_list|(
name|CURRENT_USER
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCALTIME
case|:
name|jj_consume_token
argument_list|(
name|LOCALTIME
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCALTIMESTAMP
case|:
name|jj_consume_token
argument_list|(
name|LOCALTIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|SESSION_USER
case|:
name|jj_consume_token
argument_list|(
name|SESSION_USER
argument_list|)
expr_stmt|;
break|break;
case|case
name|SYSTEM_USER
case|:
name|jj_consume_token
argument_list|(
name|SYSTEM_USER
argument_list|)
expr_stmt|;
break|break;
case|case
name|USER
case|:
name|jj_consume_token
argument_list|(
name|USER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|149
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|name
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|name
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a function call expression with JDBC syntax.  */
specifier|final
specifier|public
name|SqlNode
name|JdbcFunctionCall
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|name
decl_stmt|;
name|SqlIdentifier
name|id
decl_stmt|;
name|SqlNodeList
name|args
decl_stmt|;
name|SqlParserPos
name|pos
decl_stmt|;
name|SqlParserPos
name|starPos
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LBRACE_FN
argument_list|)
expr_stmt|;
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|INSERT
case|:
name|jj_consume_token
argument_list|(
name|INSERT
argument_list|)
expr_stmt|;
name|name
operator|=
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
break|break;
case|case
name|ABS
case|:
case|case
name|AVG
case|:
case|case
name|CARDINALITY
case|:
case|case
name|CHAR_LENGTH
case|:
case|case
name|CHARACTER_LENGTH
case|:
case|case
name|COALESCE
case|:
case|case
name|COLLECT
case|:
case|case
name|COUNT
case|:
case|case
name|CUME_DIST
case|:
case|case
name|CURRENT_DATE
case|:
case|case
name|CURRENT_TIME
case|:
case|case
name|CURRENT_TIMESTAMP
case|:
case|case
name|DENSE_RANK
case|:
case|case
name|ELEMENT
case|:
case|case
name|EXP
case|:
case|case
name|FIRST_VALUE
case|:
case|case
name|FUSION
case|:
case|case
name|LAST_VALUE
case|:
case|case
name|LN
case|:
case|case
name|LOCALTIME
case|:
case|case
name|LOCALTIMESTAMP
case|:
case|case
name|LOWER
case|:
case|case
name|MAX
case|:
case|case
name|MIN
case|:
case|case
name|MOD
case|:
case|case
name|NULLIF
case|:
case|case
name|OCTET_LENGTH
case|:
case|case
name|PERCENT_RANK
case|:
case|case
name|POWER
case|:
case|case
name|RANK
case|:
case|case
name|ROW_NUMBER
case|:
case|case
name|SQRT
case|:
case|case
name|STDDEV_POP
case|:
case|case
name|STDDEV_SAMP
case|:
case|case
name|SUM
case|:
case|case
name|UPPER
case|:
case|case
name|VAR_POP
case|:
case|case
name|VAR_SAMP
case|:
comment|// For cases like {fn power(1,2)} and {fn lower('a')}
name|id
operator|=
name|ReservedFunctionName
argument_list|()
expr_stmt|;
name|name
operator|=
name|id
operator|.
name|getSimple
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUBSTRING
case|:
comment|// For cases like {fn substring('foo', 1,2)}
name|name
operator|=
name|NonReservedJdbcFunctionName
argument_list|()
expr_stmt|;
break|break;
case|case
name|A
case|:
case|case
name|ABSOLUTE
case|:
case|case
name|ACTION
case|:
case|case
name|ADA
case|:
case|case
name|ADD
case|:
case|case
name|ADMIN
case|:
case|case
name|AFTER
case|:
case|case
name|ALWAYS
case|:
case|case
name|ASC
case|:
case|case
name|ASSERTION
case|:
case|case
name|ASSIGNMENT
case|:
case|case
name|ATTRIBUTE
case|:
case|case
name|ATTRIBUTES
case|:
case|case
name|BEFORE
case|:
case|case
name|BERNOULLI
case|:
case|case
name|BREADTH
case|:
case|case
name|C
case|:
case|case
name|CASCADE
case|:
case|case
name|CATALOG
case|:
case|case
name|CATALOG_NAME
case|:
case|case
name|CHAIN
case|:
case|case
name|CHARACTER_SET_CATALOG
case|:
case|case
name|CHARACTER_SET_NAME
case|:
case|case
name|CHARACTER_SET_SCHEMA
case|:
case|case
name|CHARACTERISTICS
case|:
case|case
name|CHARACTERS
case|:
case|case
name|CLASS_ORIGIN
case|:
case|case
name|COBOL
case|:
case|case
name|COLLATION
case|:
case|case
name|COLLATION_CATALOG
case|:
case|case
name|COLLATION_NAME
case|:
case|case
name|COLLATION_SCHEMA
case|:
case|case
name|COLUMN_NAME
case|:
case|case
name|COMMAND_FUNCTION
case|:
case|case
name|COMMAND_FUNCTION_CODE
case|:
case|case
name|COMMITTED
case|:
case|case
name|CONDITION_NUMBER
case|:
case|case
name|CONNECTION
case|:
case|case
name|CONNECTION_NAME
case|:
case|case
name|CONSTRAINT_CATALOG
case|:
case|case
name|CONSTRAINT_NAME
case|:
case|case
name|CONSTRAINT_SCHEMA
case|:
case|case
name|CONSTRAINTS
case|:
case|case
name|CONSTRUCTOR
case|:
case|case
name|CONTAINS
case|:
case|case
name|CONTINUE
case|:
case|case
name|CURSOR_NAME
case|:
case|case
name|DATA
case|:
case|case
name|DATETIME_INTERVAL_CODE
case|:
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
case|case
name|DEFAULTS
case|:
case|case
name|DEFERRABLE
case|:
case|case
name|DEFERRED
case|:
case|case
name|DEFINED
case|:
case|case
name|DEFINER
case|:
case|case
name|DEGREE
case|:
case|case
name|DEPTH
case|:
case|case
name|DERIVED
case|:
case|case
name|DESC
case|:
case|case
name|DESCRIPTION
case|:
case|case
name|DESCRIPTOR
case|:
case|case
name|DIAGNOSTICS
case|:
case|case
name|DISPATCH
case|:
case|case
name|DOMAIN
case|:
case|case
name|DYNAMIC_FUNCTION
case|:
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
case|case
name|EQUALS
case|:
case|case
name|EXCEPTION
case|:
case|case
name|EXCLUDE
case|:
case|case
name|EXCLUDING
case|:
case|case
name|FINAL
case|:
case|case
name|FIRST
case|:
case|case
name|FOLLOWING
case|:
case|case
name|FORTRAN
case|:
case|case
name|FOUND
case|:
case|case
name|G
case|:
case|case
name|GENERAL
case|:
case|case
name|GENERATED
case|:
case|case
name|GO
case|:
case|case
name|GOTO
case|:
case|case
name|GRANTED
case|:
case|case
name|HIERARCHY
case|:
case|case
name|IMMEDIATE
case|:
case|case
name|IMPLEMENTATION
case|:
case|case
name|INCLUDING
case|:
case|case
name|INCREMENT
case|:
case|case
name|INITIALLY
case|:
case|case
name|INPUT
case|:
case|case
name|INSTANCE
case|:
case|case
name|INSTANTIABLE
case|:
case|case
name|INVOKER
case|:
case|case
name|ISOLATION
case|:
case|case
name|JAVA
case|:
case|case
name|K
case|:
case|case
name|KEY
case|:
case|case
name|KEY_MEMBER
case|:
case|case
name|KEY_TYPE
case|:
case|case
name|LABEL
case|:
case|case
name|LAST
case|:
case|case
name|LENGTH
case|:
case|case
name|LEVEL
case|:
case|case
name|LIBRARY
case|:
case|case
name|LOCATOR
case|:
case|case
name|M
case|:
case|case
name|MAP
case|:
case|case
name|MATCHED
case|:
case|case
name|MAXVALUE
case|:
case|case
name|MESSAGE_LENGTH
case|:
case|case
name|MESSAGE_OCTET_LENGTH
case|:
case|case
name|MESSAGE_TEXT
case|:
case|case
name|MINVALUE
case|:
case|case
name|MORE_KW
case|:
case|case
name|MUMPS
case|:
case|case
name|NAME
case|:
case|case
name|NAMES
case|:
case|case
name|NESTING
case|:
case|case
name|NEXT
case|:
case|case
name|NORMALIZED
case|:
case|case
name|NULLABLE
case|:
case|case
name|NULLS
case|:
case|case
name|NUMBER
case|:
case|case
name|OBJECT
case|:
case|case
name|OCTETS
case|:
case|case
name|OPTION
case|:
case|case
name|OPTIONS
case|:
case|case
name|ORDERING
case|:
case|case
name|ORDINALITY
case|:
case|case
name|OTHERS
case|:
case|case
name|OUTPUT
case|:
case|case
name|OVERRIDING
case|:
case|case
name|PAD
case|:
case|case
name|PARAMETER_MODE
case|:
case|case
name|PARAMETER_NAME
case|:
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
case|case
name|PARTIAL
case|:
case|case
name|PASCAL
case|:
case|case
name|PASSTHROUGH
case|:
case|case
name|PATH
case|:
case|case
name|PLACING
case|:
case|case
name|PLAN
case|:
case|case
name|PLI
case|:
case|case
name|PRECEDING
case|:
case|case
name|PRESERVE
case|:
case|case
name|PRIOR
case|:
case|case
name|PRIVILEGES
case|:
case|case
name|PUBLIC
case|:
case|case
name|READ
case|:
case|case
name|RELATIVE
case|:
case|case
name|REPEATABLE
case|:
case|case
name|RESTART
case|:
case|case
name|RESTRICT
case|:
case|case
name|RETURNED_CARDINALITY
case|:
case|case
name|RETURNED_LENGTH
case|:
case|case
name|RETURNED_OCTET_LENGTH
case|:
case|case
name|RETURNED_SQLSTATE
case|:
case|case
name|ROLE
case|:
case|case
name|ROUTINE
case|:
case|case
name|ROUTINE_CATALOG
case|:
case|case
name|ROUTINE_NAME
case|:
case|case
name|ROUTINE_SCHEMA
case|:
case|case
name|ROW_COUNT
case|:
case|case
name|SCALE
case|:
case|case
name|SCHEMA
case|:
case|case
name|SCHEMA_NAME
case|:
case|case
name|SCOPE_CATALOGS
case|:
case|case
name|SCOPE_NAME
case|:
case|case
name|SCOPE_SCHEMA
case|:
case|case
name|SECTION
case|:
case|case
name|SECURITY
case|:
case|case
name|SELF
case|:
case|case
name|SEQUENCE
case|:
case|case
name|SERIALIZABLE
case|:
case|case
name|SERVER
case|:
case|case
name|SERVER_NAME
case|:
case|case
name|SESSION
case|:
case|case
name|SETS
case|:
case|case
name|SIMPLE
case|:
case|case
name|SIZE
case|:
case|case
name|SOURCE
case|:
case|case
name|SPACE
case|:
case|case
name|SPECIFIC_NAME
case|:
case|case
name|STATE
case|:
case|case
name|STATEMENT
case|:
case|case
name|STRUCTURE
case|:
case|case
name|STYLE
case|:
case|case
name|SUBCLASS_ORIGIN
case|:
case|case
name|SUBSTITUTE
case|:
case|case
name|TABLE_NAME
case|:
case|case
name|TEMPORARY
case|:
case|case
name|TIES
case|:
case|case
name|TOP_LEVEL_COUNT
case|:
case|case
name|TRANSACTION
case|:
case|case
name|TRANSACTIONS_ACTIVE
case|:
case|case
name|TRANSACTIONS_COMMITTED
case|:
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
case|case
name|TRANSFORM
case|:
case|case
name|TRANSFORMS
case|:
case|case
name|TRIGGER_CATALOG
case|:
case|case
name|TRIGGER_NAME
case|:
case|case
name|TRIGGER_SCHEMA
case|:
case|case
name|TYPE
case|:
case|case
name|UNBOUNDED
case|:
case|case
name|UNCOMMITTED
case|:
case|case
name|UNDER
case|:
case|case
name|UNNAMED
case|:
case|case
name|USAGE
case|:
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
case|case
name|USER_DEFINED_TYPE_CODE
case|:
case|case
name|USER_DEFINED_TYPE_NAME
case|:
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
case|case
name|VERSION
case|:
case|case
name|VIEW
case|:
case|case
name|WORK
case|:
case|case
name|WRAPPER
case|:
case|case
name|WRITE
case|:
case|case
name|XML
case|:
case|case
name|ZONE
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|UNICODE_QUOTED_IDENTIFIER
case|:
name|name
operator|=
name|Identifier
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|150
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
if|if
condition|(
name|jj_2_43
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|starPos
operator|=
name|getPos
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|SqlNodeList
argument_list|(
name|starPos
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
literal|"*"
argument_list|,
name|starPos
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|jj_2_44
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|SqlNodeList
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LPAREN
case|:
name|args
operator|=
name|ParenthesizedQueryOrCommaList
argument_list|(
name|ExprContext
operator|.
name|ACCEPT_SUBQUERY
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|151
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
name|jj_consume_token
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|SqlJdbcFunctionCall
argument_list|(
name|name
argument_list|)
operator|.
name|createCall
argument_list|(
name|pos
operator|.
name|plus
argument_list|(
name|getPos
argument_list|()
argument_list|)
argument_list|,
name|SqlParserUtil
operator|.
name|toNodeArray
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a binary query operator like UNION.  */
specifier|final
specifier|public
name|SqlBinaryOperator
name|BinaryQueryOperator
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlBinaryOperator
name|op
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|UNION
case|:
name|jj_consume_token
argument_list|(
name|UNION
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|unionOperator
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
case|case
name|DISTINCT
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|unionAllOperator
expr_stmt|;
break|break;
case|case
name|DISTINCT
case|:
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|unionOperator
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|152
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|153
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
case|case
name|INTERSECT
case|:
name|jj_consume_token
argument_list|(
name|INTERSECT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|intersectOperator
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
case|case
name|DISTINCT
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|intersectAllOperator
expr_stmt|;
break|break;
case|case
name|DISTINCT
case|:
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|intersectOperator
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|154
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|155
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
case|case
name|EXCEPT
case|:
name|jj_consume_token
argument_list|(
name|EXCEPT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|exceptOperator
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
case|case
name|DISTINCT
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|exceptAllOperator
expr_stmt|;
break|break;
case|case
name|DISTINCT
case|:
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|exceptOperator
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|156
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|157
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|158
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|op
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a binary multiset operator.  */
specifier|final
specifier|public
name|SqlBinaryOperator
name|BinaryMultisetOperator
parameter_list|()
throws|throws
name|ParseException
block|{
name|SqlBinaryOperator
name|op
decl_stmt|;
name|jj_consume_token
argument_list|(
name|MULTISET
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|UNION
case|:
name|jj_consume_token
argument_list|(
name|UNION
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetUnionOperator
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
case|case
name|DISTINCT
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetUnionAllOperator
expr_stmt|;
break|break;
case|case
name|DISTINCT
case|:
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetUnionOperator
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|159
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|160
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
case|case
name|INTERSECT
case|:
name|jj_consume_token
argument_list|(
name|INTERSECT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetIntersectOperator
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
case|case
name|DISTINCT
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetIntersectAllOperator
expr_stmt|;
break|break;
case|case
name|DISTINCT
case|:
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetIntersectOperator
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|161
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|162
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
case|case
name|EXCEPT
case|:
name|jj_consume_token
argument_list|(
name|EXCEPT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetExceptOperator
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
case|case
name|DISTINCT
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALL
case|:
name|jj_consume_token
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetExceptAllOperator
expr_stmt|;
break|break;
case|case
name|DISTINCT
case|:
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|op
operator|=
name|SqlStdOperatorTable
operator|.
name|multisetExceptOperator
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|163
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|164
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|165
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|op
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a binary row operator like AND.  */
specifier|final
specifier|public
name|SqlBinaryOperator
name|BinaryRowOperator
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EQ
case|:
name|jj_consume_token
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|equalsOperator
return|;
block|}
break|break;
case|case
name|GT
case|:
name|jj_consume_token
argument_list|(
name|GT
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|greaterThanOperator
return|;
block|}
break|break;
case|case
name|LT
case|:
name|jj_consume_token
argument_list|(
name|LT
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|lessThanOperator
return|;
block|}
break|break;
case|case
name|LE
case|:
name|jj_consume_token
argument_list|(
name|LE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|lessThanOrEqualOperator
return|;
block|}
break|break;
case|case
name|GE
case|:
name|jj_consume_token
argument_list|(
name|GE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|greaterThanOrEqualOperator
return|;
block|}
break|break;
case|case
name|NE
case|:
name|jj_consume_token
argument_list|(
name|NE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|notEqualsOperator
return|;
block|}
break|break;
case|case
name|PLUS
case|:
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|plusOperator
return|;
block|}
break|break;
case|case
name|MINUS
case|:
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|minusOperator
return|;
block|}
break|break;
case|case
name|STAR
case|:
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|multiplyOperator
return|;
block|}
break|break;
case|case
name|SLASH
case|:
name|jj_consume_token
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|divideOperator
return|;
block|}
break|break;
case|case
name|CONCAT
case|:
name|jj_consume_token
argument_list|(
name|CONCAT
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|concatOperator
return|;
block|}
break|break;
case|case
name|AND
case|:
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|andOperator
return|;
block|}
break|break;
case|case
name|OR
case|:
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|orOperator
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|166
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_45
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|IS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isDistinctFromOperator
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IS
case|:
name|jj_consume_token
argument_list|(
name|IS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|DISTINCT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isNotDistinctFromOperator
return|;
block|}
break|break;
case|case
name|MEMBER
case|:
name|jj_consume_token
argument_list|(
name|MEMBER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|OF
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|memberOfOperator
return|;
block|}
break|break;
case|case
name|SUBMULTISET
case|:
name|jj_consume_token
argument_list|(
name|SUBMULTISET
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|OF
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|submultisetOfOperator
return|;
block|}
break|break;
case|case
name|MULTISET
case|:
name|SqlBinaryOperator
name|op
decl_stmt|;
name|op
operator|=
name|BinaryMultisetOperator
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|op
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|167
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a prefix row operator like NOT.  */
specifier|final
specifier|public
name|SqlPrefixOperator
name|PrefixRowOperator
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PLUS
case|:
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|prefixPlusOperator
return|;
block|}
break|break;
case|case
name|MINUS
case|:
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|prefixMinusOperator
return|;
block|}
break|break;
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|notOperator
return|;
block|}
break|break;
case|case
name|EXISTS
case|:
name|jj_consume_token
argument_list|(
name|EXISTS
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|existsOperator
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|168
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Parses a postfix row operator like IS NOT NULL.  */
specifier|final
specifier|public
name|SqlPostfixOperator
name|PostfixRowOperator
parameter_list|()
throws|throws
name|ParseException
block|{
name|jj_consume_token
argument_list|(
name|IS
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
name|jj_consume_token
argument_list|(
name|A
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|SET
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isASetOperator
return|;
block|}
break|break;
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NULL
case|:
name|jj_consume_token
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isNotNullOperator
return|;
block|}
break|break;
case|case
name|TRUE
case|:
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isNotTrueOperator
return|;
block|}
break|break;
case|case
name|FALSE
case|:
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isNotFalseOperator
return|;
block|}
break|break;
case|case
name|UNKNOWN
case|:
name|jj_consume_token
argument_list|(
name|UNKNOWN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isNotUnknownOperator
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|169
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
case|case
name|FALSE
case|:
case|case
name|NULL
case|:
case|case
name|TRUE
case|:
case|case
name|UNKNOWN
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NULL
case|:
name|jj_consume_token
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isNullOperator
return|;
block|}
break|break;
case|case
name|TRUE
case|:
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isTrueOperator
return|;
block|}
break|break;
case|case
name|FALSE
case|:
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isFalseOperator
return|;
block|}
break|break;
case|case
name|UNKNOWN
case|:
name|jj_consume_token
argument_list|(
name|UNKNOWN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|SqlStdOperatorTable
operator|.
name|isUnknownOperator
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|170
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|171
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/*  * Abstract production:  *  *   String NonReservedKeyWord()  *  * Parses non-reserved keywords (e.g. keywords that may be used as  * identifiers).  Should use CommonNonReservedKeyWord as a base, but  * may add other key words.  */
comment|/**  * Parses a non-reserved keyword for use as an identifier.  Specializations  * of this parser can use this as a base for implementing the  * NonReservedKeyWord() production.  *  *<p>  *  * When adding keywords to this list, be sure that they are not reserved  * by the SQL:2003 standard (see productions for "non-reserved word"  * and "reserved word" in reference below).  *  * @sql.2003 Part 2 Section 5.2  */
specifier|final
specifier|public
name|String
name|CommonNonReservedKeyWord
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|A
case|:
name|jj_consume_token
argument_list|(
name|A
argument_list|)
expr_stmt|;
break|break;
case|case
name|ABSOLUTE
case|:
name|jj_consume_token
argument_list|(
name|ABSOLUTE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ACTION
case|:
name|jj_consume_token
argument_list|(
name|ACTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADA
case|:
name|jj_consume_token
argument_list|(
name|ADA
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADD
case|:
name|jj_consume_token
argument_list|(
name|ADD
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADMIN
case|:
name|jj_consume_token
argument_list|(
name|ADMIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|AFTER
case|:
name|jj_consume_token
argument_list|(
name|AFTER
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALWAYS
case|:
name|jj_consume_token
argument_list|(
name|ALWAYS
argument_list|)
expr_stmt|;
break|break;
case|case
name|ASC
case|:
name|jj_consume_token
argument_list|(
name|ASC
argument_list|)
expr_stmt|;
break|break;
case|case
name|ASSERTION
case|:
name|jj_consume_token
argument_list|(
name|ASSERTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|ASSIGNMENT
case|:
name|jj_consume_token
argument_list|(
name|ASSIGNMENT
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE
case|:
name|jj_consume_token
argument_list|(
name|ATTRIBUTE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTES
case|:
name|jj_consume_token
argument_list|(
name|ATTRIBUTES
argument_list|)
expr_stmt|;
break|break;
case|case
name|BEFORE
case|:
name|jj_consume_token
argument_list|(
name|BEFORE
argument_list|)
expr_stmt|;
break|break;
case|case
name|BERNOULLI
case|:
name|jj_consume_token
argument_list|(
name|BERNOULLI
argument_list|)
expr_stmt|;
break|break;
case|case
name|BREADTH
case|:
name|jj_consume_token
argument_list|(
name|BREADTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|C
case|:
name|jj_consume_token
argument_list|(
name|C
argument_list|)
expr_stmt|;
break|break;
case|case
name|CASCADE
case|:
name|jj_consume_token
argument_list|(
name|CASCADE
argument_list|)
expr_stmt|;
break|break;
case|case
name|CATALOG
case|:
name|jj_consume_token
argument_list|(
name|CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|CATALOG_NAME
case|:
name|jj_consume_token
argument_list|(
name|CATALOG_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAIN
case|:
name|jj_consume_token
argument_list|(
name|CHAIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARACTER_SET_CATALOG
case|:
name|jj_consume_token
argument_list|(
name|CHARACTER_SET_CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARACTER_SET_NAME
case|:
name|jj_consume_token
argument_list|(
name|CHARACTER_SET_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARACTER_SET_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|CHARACTER_SET_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARACTERISTICS
case|:
name|jj_consume_token
argument_list|(
name|CHARACTERISTICS
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARACTERS
case|:
name|jj_consume_token
argument_list|(
name|CHARACTERS
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLASS_ORIGIN
case|:
name|jj_consume_token
argument_list|(
name|CLASS_ORIGIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|COBOL
case|:
name|jj_consume_token
argument_list|(
name|COBOL
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLLATION
case|:
name|jj_consume_token
argument_list|(
name|COLLATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLLATION_CATALOG
case|:
name|jj_consume_token
argument_list|(
name|COLLATION_CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLLATION_NAME
case|:
name|jj_consume_token
argument_list|(
name|COLLATION_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLLATION_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|COLLATION_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLUMN_NAME
case|:
name|jj_consume_token
argument_list|(
name|COLUMN_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMMAND_FUNCTION
case|:
name|jj_consume_token
argument_list|(
name|COMMAND_FUNCTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMMAND_FUNCTION_CODE
case|:
name|jj_consume_token
argument_list|(
name|COMMAND_FUNCTION_CODE
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMMITTED
case|:
name|jj_consume_token
argument_list|(
name|COMMITTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONDITION_NUMBER
case|:
name|jj_consume_token
argument_list|(
name|CONDITION_NUMBER
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONNECTION
case|:
name|jj_consume_token
argument_list|(
name|CONNECTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONNECTION_NAME
case|:
name|jj_consume_token
argument_list|(
name|CONNECTION_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONSTRAINT_CATALOG
case|:
name|jj_consume_token
argument_list|(
name|CONSTRAINT_CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONSTRAINT_NAME
case|:
name|jj_consume_token
argument_list|(
name|CONSTRAINT_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONSTRAINT_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|CONSTRAINT_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONSTRAINTS
case|:
name|jj_consume_token
argument_list|(
name|CONSTRAINTS
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONSTRUCTOR
case|:
name|jj_consume_token
argument_list|(
name|CONSTRUCTOR
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINS
case|:
name|jj_consume_token
argument_list|(
name|CONTAINS
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTINUE
case|:
name|jj_consume_token
argument_list|(
name|CONTINUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURSOR_NAME
case|:
name|jj_consume_token
argument_list|(
name|CURSOR_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATA
case|:
name|jj_consume_token
argument_list|(
name|DATA
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATETIME_INTERVAL_CODE
case|:
name|jj_consume_token
argument_list|(
name|DATETIME_INTERVAL_CODE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATETIME_INTERVAL_PRECISION
case|:
name|jj_consume_token
argument_list|(
name|DATETIME_INTERVAL_PRECISION
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFAULTS
case|:
name|jj_consume_token
argument_list|(
name|DEFAULTS
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFERRABLE
case|:
name|jj_consume_token
argument_list|(
name|DEFERRABLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFERRED
case|:
name|jj_consume_token
argument_list|(
name|DEFERRED
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFINED
case|:
name|jj_consume_token
argument_list|(
name|DEFINED
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFINER
case|:
name|jj_consume_token
argument_list|(
name|DEFINER
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEGREE
case|:
name|jj_consume_token
argument_list|(
name|DEGREE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEPTH
case|:
name|jj_consume_token
argument_list|(
name|DEPTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|DERIVED
case|:
name|jj_consume_token
argument_list|(
name|DERIVED
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESC
case|:
name|jj_consume_token
argument_list|(
name|DESC
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESCRIPTION
case|:
name|jj_consume_token
argument_list|(
name|DESCRIPTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESCRIPTOR
case|:
name|jj_consume_token
argument_list|(
name|DESCRIPTOR
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIAGNOSTICS
case|:
name|jj_consume_token
argument_list|(
name|DIAGNOSTICS
argument_list|)
expr_stmt|;
break|break;
case|case
name|DISPATCH
case|:
name|jj_consume_token
argument_list|(
name|DISPATCH
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOMAIN
case|:
name|jj_consume_token
argument_list|(
name|DOMAIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|DYNAMIC_FUNCTION
case|:
name|jj_consume_token
argument_list|(
name|DYNAMIC_FUNCTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|DYNAMIC_FUNCTION_CODE
case|:
name|jj_consume_token
argument_list|(
name|DYNAMIC_FUNCTION_CODE
argument_list|)
expr_stmt|;
break|break;
case|case
name|EQUALS
case|:
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXCEPTION
case|:
name|jj_consume_token
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXCLUDE
case|:
name|jj_consume_token
argument_list|(
name|EXCLUDE
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXCLUDING
case|:
name|jj_consume_token
argument_list|(
name|EXCLUDING
argument_list|)
expr_stmt|;
break|break;
case|case
name|FINAL
case|:
name|jj_consume_token
argument_list|(
name|FINAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIRST
case|:
name|jj_consume_token
argument_list|(
name|FIRST
argument_list|)
expr_stmt|;
break|break;
case|case
name|FOLLOWING
case|:
name|jj_consume_token
argument_list|(
name|FOLLOWING
argument_list|)
expr_stmt|;
break|break;
case|case
name|FORTRAN
case|:
name|jj_consume_token
argument_list|(
name|FORTRAN
argument_list|)
expr_stmt|;
break|break;
case|case
name|FOUND
case|:
name|jj_consume_token
argument_list|(
name|FOUND
argument_list|)
expr_stmt|;
break|break;
case|case
name|G
case|:
name|jj_consume_token
argument_list|(
name|G
argument_list|)
expr_stmt|;
break|break;
case|case
name|GENERAL
case|:
name|jj_consume_token
argument_list|(
name|GENERAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|GENERATED
case|:
name|jj_consume_token
argument_list|(
name|GENERATED
argument_list|)
expr_stmt|;
break|break;
case|case
name|GO
case|:
name|jj_consume_token
argument_list|(
name|GO
argument_list|)
expr_stmt|;
break|break;
case|case
name|GOTO
case|:
name|jj_consume_token
argument_list|(
name|GOTO
argument_list|)
expr_stmt|;
break|break;
case|case
name|GRANTED
case|:
name|jj_consume_token
argument_list|(
name|GRANTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|HIERARCHY
case|:
name|jj_consume_token
argument_list|(
name|HIERARCHY
argument_list|)
expr_stmt|;
break|break;
case|case
name|IMMEDIATE
case|:
name|jj_consume_token
argument_list|(
name|IMMEDIATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|IMPLEMENTATION
case|:
name|jj_consume_token
argument_list|(
name|IMPLEMENTATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCLUDING
case|:
name|jj_consume_token
argument_list|(
name|INCLUDING
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCREMENT
case|:
name|jj_consume_token
argument_list|(
name|INCREMENT
argument_list|)
expr_stmt|;
break|break;
case|case
name|INITIALLY
case|:
name|jj_consume_token
argument_list|(
name|INITIALLY
argument_list|)
expr_stmt|;
break|break;
case|case
name|INPUT
case|:
name|jj_consume_token
argument_list|(
name|INPUT
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSTANCE
case|:
name|jj_consume_token
argument_list|(
name|INSTANCE
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSTANTIABLE
case|:
name|jj_consume_token
argument_list|(
name|INSTANTIABLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|INVOKER
case|:
name|jj_consume_token
argument_list|(
name|INVOKER
argument_list|)
expr_stmt|;
break|break;
case|case
name|ISOLATION
case|:
name|jj_consume_token
argument_list|(
name|ISOLATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|JAVA
case|:
name|jj_consume_token
argument_list|(
name|JAVA
argument_list|)
expr_stmt|;
break|break;
case|case
name|K
case|:
name|jj_consume_token
argument_list|(
name|K
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY
case|:
name|jj_consume_token
argument_list|(
name|KEY
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_MEMBER
case|:
name|jj_consume_token
argument_list|(
name|KEY_MEMBER
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_TYPE
case|:
name|jj_consume_token
argument_list|(
name|KEY_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|LABEL
case|:
name|jj_consume_token
argument_list|(
name|LABEL
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAST
case|:
name|jj_consume_token
argument_list|(
name|LAST
argument_list|)
expr_stmt|;
break|break;
case|case
name|LENGTH
case|:
name|jj_consume_token
argument_list|(
name|LENGTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEVEL
case|:
name|jj_consume_token
argument_list|(
name|LEVEL
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIBRARY
case|:
name|jj_consume_token
argument_list|(
name|LIBRARY
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCATOR
case|:
name|jj_consume_token
argument_list|(
name|LOCATOR
argument_list|)
expr_stmt|;
break|break;
case|case
name|M
case|:
name|jj_consume_token
argument_list|(
name|M
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|jj_consume_token
argument_list|(
name|MAP
argument_list|)
expr_stmt|;
break|break;
case|case
name|MATCHED
case|:
name|jj_consume_token
argument_list|(
name|MATCHED
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAXVALUE
case|:
name|jj_consume_token
argument_list|(
name|MAXVALUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|MESSAGE_LENGTH
case|:
name|jj_consume_token
argument_list|(
name|MESSAGE_LENGTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|MESSAGE_OCTET_LENGTH
case|:
name|jj_consume_token
argument_list|(
name|MESSAGE_OCTET_LENGTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|MESSAGE_TEXT
case|:
name|jj_consume_token
argument_list|(
name|MESSAGE_TEXT
argument_list|)
expr_stmt|;
break|break;
case|case
name|MINVALUE
case|:
name|jj_consume_token
argument_list|(
name|MINVALUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|MORE_KW
case|:
name|jj_consume_token
argument_list|(
name|MORE_KW
argument_list|)
expr_stmt|;
break|break;
case|case
name|MUMPS
case|:
name|jj_consume_token
argument_list|(
name|MUMPS
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAME
case|:
name|jj_consume_token
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAMES
case|:
name|jj_consume_token
argument_list|(
name|NAMES
argument_list|)
expr_stmt|;
break|break;
case|case
name|NESTING
case|:
name|jj_consume_token
argument_list|(
name|NESTING
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEXT
case|:
name|jj_consume_token
argument_list|(
name|NEXT
argument_list|)
expr_stmt|;
break|break;
case|case
name|NORMALIZED
case|:
name|jj_consume_token
argument_list|(
name|NORMALIZED
argument_list|)
expr_stmt|;
break|break;
case|case
name|NULLABLE
case|:
name|jj_consume_token
argument_list|(
name|NULLABLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|NULLS
case|:
name|jj_consume_token
argument_list|(
name|NULLS
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMBER
case|:
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
case|case
name|OBJECT
case|:
name|jj_consume_token
argument_list|(
name|OBJECT
argument_list|)
expr_stmt|;
break|break;
case|case
name|OCTETS
case|:
name|jj_consume_token
argument_list|(
name|OCTETS
argument_list|)
expr_stmt|;
break|break;
case|case
name|OPTION
case|:
name|jj_consume_token
argument_list|(
name|OPTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|OPTIONS
case|:
name|jj_consume_token
argument_list|(
name|OPTIONS
argument_list|)
expr_stmt|;
break|break;
case|case
name|ORDERING
case|:
name|jj_consume_token
argument_list|(
name|ORDERING
argument_list|)
expr_stmt|;
break|break;
case|case
name|ORDINALITY
case|:
name|jj_consume_token
argument_list|(
name|ORDINALITY
argument_list|)
expr_stmt|;
break|break;
case|case
name|OTHERS
case|:
name|jj_consume_token
argument_list|(
name|OTHERS
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUTPUT
case|:
name|jj_consume_token
argument_list|(
name|OUTPUT
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDING
case|:
name|jj_consume_token
argument_list|(
name|OVERRIDING
argument_list|)
expr_stmt|;
break|break;
case|case
name|PAD
case|:
name|jj_consume_token
argument_list|(
name|PAD
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARAMETER_MODE
case|:
name|jj_consume_token
argument_list|(
name|PARAMETER_MODE
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARAMETER_NAME
case|:
name|jj_consume_token
argument_list|(
name|PARAMETER_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARAMETER_ORDINAL_POSITION
case|:
name|jj_consume_token
argument_list|(
name|PARAMETER_ORDINAL_POSITION
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARAMETER_SPECIFIC_CATALOG
case|:
name|jj_consume_token
argument_list|(
name|PARAMETER_SPECIFIC_CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARAMETER_SPECIFIC_NAME
case|:
name|jj_consume_token
argument_list|(
name|PARAMETER_SPECIFIC_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARAMETER_SPECIFIC_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|PARAMETER_SPECIFIC_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARTIAL
case|:
name|jj_consume_token
argument_list|(
name|PARTIAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|PASCAL
case|:
name|jj_consume_token
argument_list|(
name|PASCAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|PASSTHROUGH
case|:
name|jj_consume_token
argument_list|(
name|PASSTHROUGH
argument_list|)
expr_stmt|;
break|break;
case|case
name|PATH
case|:
name|jj_consume_token
argument_list|(
name|PATH
argument_list|)
expr_stmt|;
break|break;
case|case
name|PLACING
case|:
name|jj_consume_token
argument_list|(
name|PLACING
argument_list|)
expr_stmt|;
break|break;
case|case
name|PLAN
case|:
name|jj_consume_token
argument_list|(
name|PLAN
argument_list|)
expr_stmt|;
break|break;
case|case
name|PLI
case|:
name|jj_consume_token
argument_list|(
name|PLI
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRECEDING
case|:
name|jj_consume_token
argument_list|(
name|PRECEDING
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRESERVE
case|:
name|jj_consume_token
argument_list|(
name|PRESERVE
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIOR
case|:
name|jj_consume_token
argument_list|(
name|PRIOR
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIVILEGES
case|:
name|jj_consume_token
argument_list|(
name|PRIVILEGES
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUBLIC
case|:
name|jj_consume_token
argument_list|(
name|PUBLIC
argument_list|)
expr_stmt|;
break|break;
case|case
name|READ
case|:
name|jj_consume_token
argument_list|(
name|READ
argument_list|)
expr_stmt|;
break|break;
case|case
name|RELATIVE
case|:
name|jj_consume_token
argument_list|(
name|RELATIVE
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPEATABLE
case|:
name|jj_consume_token
argument_list|(
name|REPEATABLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|RESTART
case|:
name|jj_consume_token
argument_list|(
name|RESTART
argument_list|)
expr_stmt|;
break|break;
case|case
name|RESTRICT
case|:
name|jj_consume_token
argument_list|(
name|RESTRICT
argument_list|)
expr_stmt|;
break|break;
case|case
name|RETURNED_CARDINALITY
case|:
name|jj_consume_token
argument_list|(
name|RETURNED_CARDINALITY
argument_list|)
expr_stmt|;
break|break;
case|case
name|RETURNED_LENGTH
case|:
name|jj_consume_token
argument_list|(
name|RETURNED_LENGTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|RETURNED_OCTET_LENGTH
case|:
name|jj_consume_token
argument_list|(
name|RETURNED_OCTET_LENGTH
argument_list|)
expr_stmt|;
break|break;
case|case
name|RETURNED_SQLSTATE
case|:
name|jj_consume_token
argument_list|(
name|RETURNED_SQLSTATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROLE
case|:
name|jj_consume_token
argument_list|(
name|ROLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROUTINE
case|:
name|jj_consume_token
argument_list|(
name|ROUTINE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROUTINE_CATALOG
case|:
name|jj_consume_token
argument_list|(
name|ROUTINE_CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROUTINE_NAME
case|:
name|jj_consume_token
argument_list|(
name|ROUTINE_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROUTINE_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|ROUTINE_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROW_COUNT
case|:
name|jj_consume_token
argument_list|(
name|ROW_COUNT
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCALE
case|:
name|jj_consume_token
argument_list|(
name|SCALE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCHEMA_NAME
case|:
name|jj_consume_token
argument_list|(
name|SCHEMA_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCOPE_CATALOGS
case|:
name|jj_consume_token
argument_list|(
name|SCOPE_CATALOGS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCOPE_NAME
case|:
name|jj_consume_token
argument_list|(
name|SCOPE_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCOPE_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|SCOPE_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|SECTION
case|:
name|jj_consume_token
argument_list|(
name|SECTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|SECURITY
case|:
name|jj_consume_token
argument_list|(
name|SECURITY
argument_list|)
expr_stmt|;
break|break;
case|case
name|SELF
case|:
name|jj_consume_token
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
break|break;
case|case
name|SEQUENCE
case|:
name|jj_consume_token
argument_list|(
name|SEQUENCE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERIALIZABLE
case|:
name|jj_consume_token
argument_list|(
name|SERIALIZABLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERVER
case|:
name|jj_consume_token
argument_list|(
name|SERVER
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERVER_NAME
case|:
name|jj_consume_token
argument_list|(
name|SERVER_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|SESSION
case|:
name|jj_consume_token
argument_list|(
name|SESSION
argument_list|)
expr_stmt|;
break|break;
case|case
name|SETS
case|:
name|jj_consume_token
argument_list|(
name|SETS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SIMPLE
case|:
name|jj_consume_token
argument_list|(
name|SIMPLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SIZE
case|:
name|jj_consume_token
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SOURCE
case|:
name|jj_consume_token
argument_list|(
name|SOURCE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPACE
case|:
name|jj_consume_token
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPECIFIC_NAME
case|:
name|jj_consume_token
argument_list|(
name|SPECIFIC_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|STATE
case|:
name|jj_consume_token
argument_list|(
name|STATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|STATEMENT
case|:
name|jj_consume_token
argument_list|(
name|STATEMENT
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCTURE
case|:
name|jj_consume_token
argument_list|(
name|STRUCTURE
argument_list|)
expr_stmt|;
break|break;
case|case
name|STYLE
case|:
name|jj_consume_token
argument_list|(
name|STYLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUBCLASS_ORIGIN
case|:
name|jj_consume_token
argument_list|(
name|SUBCLASS_ORIGIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUBSTITUTE
case|:
name|jj_consume_token
argument_list|(
name|SUBSTITUTE
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_NAME
case|:
name|jj_consume_token
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|TEMPORARY
case|:
name|jj_consume_token
argument_list|(
name|TEMPORARY
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIES
case|:
name|jj_consume_token
argument_list|(
name|TIES
argument_list|)
expr_stmt|;
break|break;
case|case
name|TOP_LEVEL_COUNT
case|:
name|jj_consume_token
argument_list|(
name|TOP_LEVEL_COUNT
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRANSACTION
case|:
name|jj_consume_token
argument_list|(
name|TRANSACTION
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRANSACTIONS_ACTIVE
case|:
name|jj_consume_token
argument_list|(
name|TRANSACTIONS_ACTIVE
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRANSACTIONS_COMMITTED
case|:
name|jj_consume_token
argument_list|(
name|TRANSACTIONS_COMMITTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRANSACTIONS_ROLLED_BACK
case|:
name|jj_consume_token
argument_list|(
name|TRANSACTIONS_ROLLED_BACK
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRANSFORM
case|:
name|jj_consume_token
argument_list|(
name|TRANSFORM
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRANSFORMS
case|:
name|jj_consume_token
argument_list|(
name|TRANSFORMS
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRIGGER_CATALOG
case|:
name|jj_consume_token
argument_list|(
name|TRIGGER_CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRIGGER_NAME
case|:
name|jj_consume_token
argument_list|(
name|TRIGGER_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRIGGER_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|TRIGGER_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|TYPE
case|:
name|jj_consume_token
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNBOUNDED
case|:
name|jj_consume_token
argument_list|(
name|UNBOUNDED
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNCOMMITTED
case|:
name|jj_consume_token
argument_list|(
name|UNCOMMITTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNDER
case|:
name|jj_consume_token
argument_list|(
name|UNDER
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNNAMED
case|:
name|jj_consume_token
argument_list|(
name|UNNAMED
argument_list|)
expr_stmt|;
break|break;
case|case
name|USAGE
case|:
name|jj_consume_token
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
break|break;
case|case
name|USER_DEFINED_TYPE_CATALOG
case|:
name|jj_consume_token
argument_list|(
name|USER_DEFINED_TYPE_CATALOG
argument_list|)
expr_stmt|;
break|break;
case|case
name|USER_DEFINED_TYPE_CODE
case|:
name|jj_consume_token
argument_list|(
name|USER_DEFINED_TYPE_CODE
argument_list|)
expr_stmt|;
break|break;
case|case
name|USER_DEFINED_TYPE_NAME
case|:
name|jj_consume_token
argument_list|(
name|USER_DEFINED_TYPE_NAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|USER_DEFINED_TYPE_SCHEMA
case|:
name|jj_consume_token
argument_list|(
name|USER_DEFINED_TYPE_SCHEMA
argument_list|)
expr_stmt|;
break|break;
case|case
name|VERSION
case|:
name|jj_consume_token
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
break|break;
case|case
name|VIEW
case|:
name|jj_consume_token
argument_list|(
name|VIEW
argument_list|)
expr_stmt|;
break|break;
case|case
name|WRAPPER
case|:
name|jj_consume_token
argument_list|(
name|WRAPPER
argument_list|)
expr_stmt|;
break|break;
case|case
name|WORK
case|:
name|jj_consume_token
argument_list|(
name|WORK
argument_list|)
expr_stmt|;
break|break;
case|case
name|WRITE
case|:
name|jj_consume_token
argument_list|(
name|WRITE
argument_list|)
expr_stmt|;
break|break;
case|case
name|XML
case|:
name|jj_consume_token
argument_list|(
name|XML
argument_list|)
expr_stmt|;
break|break;
case|case
name|ZONE
case|:
name|jj_consume_token
argument_list|(
name|ZONE
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|172
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getToken
argument_list|(
literal|0
argument_list|)
operator|.
name|image
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/**  * Defines a production which can never be accepted by the parser.  * In effect, it tells the parser, "If you got here, you've gone too far."  * It is used as the default production for parser extension points;  * derived parsers replace it with a real production when they want to  * implement a particular extension point.  */
specifier|final
specifier|public
name|void
name|UnusedExtension
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
literal|false
condition|)
block|{
block|}
else|else
block|{
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jj_consume_token
argument_list|(
name|ZONE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_1
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|0
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_2
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_2
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|1
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_3
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_3
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|2
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_4
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_4
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|3
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_5
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_5
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|4
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_6
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_6
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|5
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_7
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_7
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|6
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_8
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_8
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|7
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_9
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_9
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|8
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_10
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_10
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|9
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_11
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_11
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|10
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_12
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_12
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|11
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_13
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_13
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|12
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_14
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_14
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|13
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_15
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_15
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|14
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_16
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_16
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|15
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_17
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_17
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|16
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_18
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_18
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|17
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_19
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_19
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|18
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_20
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_20
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|19
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_21
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_21
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|20
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_22
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_22
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|21
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_23
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_23
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|22
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_24
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_24
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|23
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_25
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_25
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|24
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_26
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_26
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|25
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_27
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_27
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|26
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_28
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_28
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|27
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_29
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_29
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|28
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_30
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_30
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|29
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_31
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_31
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|30
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_32
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_32
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|31
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_33
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_33
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|32
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_34
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_34
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|33
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_35
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_35
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|34
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_36
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_36
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|35
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_37
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_37
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|36
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_38
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_38
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|37
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_39
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_39
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|38
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_40
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_40
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|39
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_41
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_41
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|40
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_42
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_42
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|41
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_43
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_43
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|42
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_44
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_44
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|43
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_2_45
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_45
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|44
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|jj_3R_115
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_142
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_47
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_91
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_92
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_93
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|jj_3R_66
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_114
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_33
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_73
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_127
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|23
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_127
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SYMMETRIC
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_51
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_114
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_115
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_65
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_121
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_45
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|BETWEEN
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_73
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_12
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_33
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_34
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_44
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|BETWEEN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_184
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SUBSTRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_120
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UESCAPE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_64
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UNICODE_QUOTED_IDENTIFIER
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_120
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_25
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_44
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_45
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_3R_41
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_63
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_IDENTIFIER
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_62
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IDENTIFIER
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_22
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_62
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_63
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_64
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_65
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_43
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_42
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_135
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|HOOK
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_214
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_37
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_185
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_24
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_42
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_3R_37
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_24
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COMMA
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_27
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_24
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_25
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_47
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_26
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_48
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_147
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
if|if
condition|(
name|jj_3_27
argument_list|()
condition|)
return|return
literal|true
return|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_27
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_66
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_41
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_147
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_148
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_69
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COMMA
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_171
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_185
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_42
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|RPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_56
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SECOND
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_37
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_19
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_69
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|jj_scan_token
argument_list|(
name|RPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_32
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|CROSS
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_37
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TO
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SECOND
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_41
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|STAR
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_55
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MINUTE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_31
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FULL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_23
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_66
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_30
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|RIGHT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_29
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LEFT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_54
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SECOND
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_53
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MINUTE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_36
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TO
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_55
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_56
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_28
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|INNER
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_52
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|HOUR
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_27
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|JOIN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_170
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SPECIFIC
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_143
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_173
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_138
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_170
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_51
argument_list|()
condition|)
return|return
literal|true
return|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_41
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_42
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_171
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_26
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_35
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TO
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_52
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_53
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_54
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_22
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_119
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_22
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_143
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_25
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NATURAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_10
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_11
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
name|jj_lookingAhead
operator|=
literal|true
expr_stmt|;
name|jj_semLA
operator|=
literal|true
expr_stmt|;
name|jj_lookingAhead
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|jj_semLA
operator|||
name|jj_3R_24
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_11
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_25
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_26
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_27
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_28
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_29
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_30
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_31
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_32
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_34
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TO
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MONTH
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_145
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_174
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_225
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|PLUS
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_213
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_224
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_225
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_224
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MINUS
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_182
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|INTERVAL
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_213
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_188
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_217
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_61
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_119
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_145
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_40
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_60
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_9
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_187
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_216
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_59
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|RPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_173
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_186
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_187
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_188
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_186
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_215
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_8
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_22
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|STAR
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_58
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FROM
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_169
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MULTISET
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LBRACKET
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_38
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_123
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_146
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_118
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LEADING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_33
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MULTISET
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_137
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_33
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_169
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_117
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TRAILING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_19
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_61
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_123
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_122
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_116
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|BOTH
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_57
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_116
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_117
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_118
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_40
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_212
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TIMESTAMP
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_39
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_57
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_38
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_58
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_59
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_211
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TIME
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_21
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COMMA
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_40
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_210
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DATE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_68
parameter_list|()
block|{
name|jj_lookingAhead
operator|=
literal|true
expr_stmt|;
name|jj_semLA
operator|=
literal|false
expr_stmt|;
name|jj_lookingAhead
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|jj_semLA
operator|||
name|jj_3R_122
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ZONE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_209
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LBRACE_TS
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_113
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TRIM
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_208
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LBRACE_T
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_146
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ORDER
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_181
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_207
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_208
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_209
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_210
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_211
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_212
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_207
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LBRACE_D
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_112
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SUBSTRING
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_7
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_20
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_111
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|52
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|53
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_3R_183
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_110
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FLOOR
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_183
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_223
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UESCAPE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_109
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|OVERLAY
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_222
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_21
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|WHEN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MATCHED
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_108
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TRANSLATE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_221
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UNICODE_STRING_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_220
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|PREFIXED_STRING_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_202
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_220
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|527
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_221
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_222
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_223
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_6
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_107
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|CONVERT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_219
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|QUOTED_STRING
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_106
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|POSITION
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_179
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_201
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_202
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_201
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|BINARY_STRING_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_219
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_105
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|EXTRACT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_20
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COMMA
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_39
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_104
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|CAST
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_50
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_104
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_105
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_106
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_107
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_108
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_109
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_110
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_111
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_112
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_113
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_40
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_206
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NULL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_205
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UNKNOWN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_204
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FALSE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_180
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_203
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_204
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_205
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_206
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_203
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TRUE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_200
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_218
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_199
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MINUS
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_218
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_178
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_198
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_199
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_200
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_198
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|PLUS
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_218
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_19
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COMMA
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_124
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|CURSOR
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_228
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|APPROX_NUMERIC_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_38
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_19
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_227
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DECIMAL_NUMERIC_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_218
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_226
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_227
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_228
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_226
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UNSIGNED_INTEGER_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_159
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UNKNOWN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_158
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FALSE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_157
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TRUE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_164
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_182
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_156
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NULL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_163
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_181
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_133
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_156
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_157
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_158
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_159
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_162
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_180
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_18
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|GROUP
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|BY
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_38
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_161
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_179
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_5
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_20
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_132
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_131
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|A
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_134
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_160
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_161
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_162
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_163
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_164
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_160
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_178
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_94
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IS
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_131
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_132
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_133
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_152
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|EXISTS
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_151
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_150
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MINUS
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_125
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_149
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_150
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_151
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_152
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_149
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|PLUS
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_141
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|WHEN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_90
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_128
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_89
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SUBMULTISET
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|OF
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_30
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_88
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MEMBER
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|OF
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_4
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|RPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_87
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IS
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DISTINCT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_45
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IS
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DISTINCT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FROM
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_86
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|OR
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_17
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_85
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|AND
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_172
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_33
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_84
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|CONCAT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_83
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SLASH
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_32
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|425
argument_list|)
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_51
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_82
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|STAR
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_103
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|CASE
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_30
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_141
argument_list|()
condition|)
return|return
literal|true
return|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_141
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_16
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|390
argument_list|)
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_37
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_81
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MINUS
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_102
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_140
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_80
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|PLUS
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_101
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_33
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_79
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_100
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_139
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_15
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ROW
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_37
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_78
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|GE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_99
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_138
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_77
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_76
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_75
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|GT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_98
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_137
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_36
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_15
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_16
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_17
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_97
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_136
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_74
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|EQ
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_46
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_74
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_75
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_76
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_77
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_78
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_79
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_80
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_81
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_82
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_83
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_84
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_85
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_86
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_45
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_87
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_88
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_89
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_90
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_197
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DISTINCT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_31
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_50
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_96
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_135
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_177
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_196
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_197
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_196
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ALL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_95
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_134
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_49
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_95
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_96
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_31
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_97
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_98
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_99
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_100
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_101
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_102
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_103
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_195
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DISTINCT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_155
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|EXCEPT
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_177
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_176
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_194
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_195
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_194
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ALL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_183
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_214
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_193
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DISTINCT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_14
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COMMA
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_36
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_154
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|INTERSECT
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_176
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_175
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_192
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_193
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_192
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ALL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_230
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_36
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_153
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UNION
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_175
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_60
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_68
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_128
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|MULTISET
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_153
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_154
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_155
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_216
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|VALUES
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_230
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_229
parameter_list|()
block|{
if|if
condition|(
literal|true
condition|)
block|{
name|jj_la
operator|=
literal|0
expr_stmt|;
name|jj_scanpos
operator|=
name|jj_lastpos
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_191
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|EXCEPT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_3
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|WITH
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TYPE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_190
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|INTERSECT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_34
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_217
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TABLE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_33
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_189
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|UNION
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_174
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_189
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_190
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_191
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_35
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_68
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_44
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|RPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_2
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_19
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_121
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_144
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_43
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|STAR
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_168
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_22
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_167
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_184
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_166
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_142
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_165
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|INSERT
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_126
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ROW
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_72
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_126
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_37
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_136
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LBRACE_FN
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_165
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_166
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_167
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_168
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_71
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_125
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_41
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_29
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ROW
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_20
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_70
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_124
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_144
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|7
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|8
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|12
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|19
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|21
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|22
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|26
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|27
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|30
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|32
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|40
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|42
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|46
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|50
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|51
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|54
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|59
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|60
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|61
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|62
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|63
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|65
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|69
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|71
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|72
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|73
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|74
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|77
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|78
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|79
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|81
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|83
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|85
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|86
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|88
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|89
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|90
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|91
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|92
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|93
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|95
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|117
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|119
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|121
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|122
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|129
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|130
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|131
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|132
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|133
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|134
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|137
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|139
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|141
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|142
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|143
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|145
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|148
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|150
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|154
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|155
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|161
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|165
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|166
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|167
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|178
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|179
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|183
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|186
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|187
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|193
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|194
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|195
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|198
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|199
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|201
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|205
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|209
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|210
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|214
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|215
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|216
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|219
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|222
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|223
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|230
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|232
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|233
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|235
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|236
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|237
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|238
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|239
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|242
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|247
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|248
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|249
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|256
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|258
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|259
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|261
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|263
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|266
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|267
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|268
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|272
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|277
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|279
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|280
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|281
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|286
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|288
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|292
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|295
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|297
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|298
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|300
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|302
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|308
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|309
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|312
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|313
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|314
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|317
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|321
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|322
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|324
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|325
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|326
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|327
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|328
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|329
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|330
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|332
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|333
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|334
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|338
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|339
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|340
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|343
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|346
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|348
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|349
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|351
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|354
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|369
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|371
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|372
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|373
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|376
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|377
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|378
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|379
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|383
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|386
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|387
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|388
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|389
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|391
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|395
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|396
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|397
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|399
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|400
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|401
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|405
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|406
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|408
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|410
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|411
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|412
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|413
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|414
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|417
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|419
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|420
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|423
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|424
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|426
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|434
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|435
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|439
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|440
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|441
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|444
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|450
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|452
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|454
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|461
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|463
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|464
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|465
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|466
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|467
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|468
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|473
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|474
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|475
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|478
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|480
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|481
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|482
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|486
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|490
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|492
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|493
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|494
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|495
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|504
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|505
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|515
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|514
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|516
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|517
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|519
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_28
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_49
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_41
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3_28
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_70
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_29
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_71
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_72
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_140
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NEW
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_172
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_139
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|106
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|107
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|108
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|109
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|110
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|111
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|112
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|113
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|115
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|254
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|255
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|415
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|448
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|491
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_215
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SELECT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_229
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_148
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_67
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_22
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_48
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_94
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_33
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_22
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_67
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_26
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_46
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_41
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_23
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ESCAPE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_41
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_93
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SIMILAR
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TO
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_20
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_39
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_13
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_35
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_130
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|SIMILAR
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_92
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LIKE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_129
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LIKE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_142
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|29
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|45
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|56
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|58
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|68
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|75
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|104
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|98
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|107
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|112
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|113
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|136
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|157
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|171
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|180
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|192
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|243
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|252
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|254
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|255
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|257
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|262
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|270
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|273
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|296
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|301
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|335
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|342
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|353
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|392
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|432
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|437
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|438
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|445
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|489
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|499
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|500
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_19
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_91
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_129
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_130
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|jj_3R_39
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_22
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/** Generated Token Manager. */
specifier|public
name|SqlParserImplTokenManager
name|token_source
decl_stmt|;
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
comment|/** Current token. */
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
specifier|public
name|Token
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
specifier|private
name|int
name|jj_la
decl_stmt|;
comment|/** Whether we are looking ahead. */
specifier|private
name|boolean
name|jj_lookingAhead
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|jj_semLA
decl_stmt|;
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|173
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_2
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_3
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_4
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_5
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_6
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_7
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_8
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_9
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_10
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_11
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_12
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_13
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_14
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_15
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_16
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_17
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_18
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
name|jj_la1_init_1
argument_list|()
expr_stmt|;
name|jj_la1_init_2
argument_list|()
expr_stmt|;
name|jj_la1_init_3
argument_list|()
expr_stmt|;
name|jj_la1_init_4
argument_list|()
expr_stmt|;
name|jj_la1_init_5
argument_list|()
expr_stmt|;
name|jj_la1_init_6
argument_list|()
expr_stmt|;
name|jj_la1_init_7
argument_list|()
expr_stmt|;
name|jj_la1_init_8
argument_list|()
expr_stmt|;
name|jj_la1_init_9
argument_list|()
expr_stmt|;
name|jj_la1_init_10
argument_list|()
expr_stmt|;
name|jj_la1_init_11
argument_list|()
expr_stmt|;
name|jj_la1_init_12
argument_list|()
expr_stmt|;
name|jj_la1_init_13
argument_list|()
expr_stmt|;
name|jj_la1_init_14
argument_list|()
expr_stmt|;
name|jj_la1_init_15
argument_list|()
expr_stmt|;
name|jj_la1_init_16
argument_list|()
expr_stmt|;
name|jj_la1_init_17
argument_list|()
expr_stmt|;
name|jj_la1_init_18
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x40000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000
block|,
literal|0x4c6c11fa
block|,
literal|0x40000
block|,
literal|0x4c6c11fa
block|,
literal|0x0
block|,
literal|0x40000
block|,
literal|0x4c6c11fa
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000
block|,
literal|0x4c6c11fa
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000
block|,
literal|0x0
block|,
literal|0x4c6c11fa
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4c6811fa
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x800
block|,
literal|0x800
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x800000
block|,
literal|0x800000
block|,
literal|0x800000
block|,
literal|0x800000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4c6811fa
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4c6811fa
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4c6811fa
block|,
literal|0x4c6811fa
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4c6811fa
block|,
literal|0x0
block|,
literal|0x4c6811fa
block|,
literal|0x0
block|,
literal|0x6c6811fe
block|,
literal|0x20000004
block|,
literal|0x0
block|,
literal|0x6c6811fe
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x4000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x4c6811fa
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x800
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84d4501
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2000000
block|,
literal|0x0
block|,
literal|0x2800000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xfacc454d
block|,
literal|0xfacc454d
block|,
literal|0x0
block|,
literal|0x300000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80
block|,
literal|0x80
block|,
literal|0x0
block|,
literal|0x320000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,
literal|0x0
block|,
literal|0xfd4c6501
block|,
literal|0x5002000
block|,
literal|0x0
block|,
literal|0xfd4c6501
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xf84c4501
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_2
parameter_list|()
block|{
name|jj_la1_2
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,
literal|0x0
block|,
literal|0xbf6aefb2
block|,
literal|0x810
block|,
literal|0x0
block|,
literal|0xbf6aefb2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbf6ae7a2
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_3
parameter_list|()
block|{
name|jj_la1_3
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1000200
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1000200
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000000
block|,
literal|0x8000000
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1000000
block|,
literal|0x0
block|,
literal|0x6abfc00
block|,
literal|0x1000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000000
block|,
literal|0x8000000
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x60000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x67a00000
block|,
literal|0x67a00000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x6a00000
block|,
literal|0x0
block|,
literal|0x6a30904
block|,
literal|0x30904
block|,
literal|0xbfc00
block|,
literal|0x6a30904
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x6a00000
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_4
parameter_list|()
block|{
name|jj_la1_4
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x0
block|,
literal|0x80
block|,
literal|0x200000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000
block|,
literal|0x40000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xcd2ea7e
block|,
literal|0xcd2ea7e
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,
literal|0x0
block|,
literal|0x2c52eb7e
block|,
literal|0x20000100
block|,
literal|0x0
block|,
literal|0x2c52eb7e
block|,
literal|0x0
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x0
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc52ea7e
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_5
parameter_list|()
block|{
name|jj_la1_5
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1000
block|,
literal|0x0
block|,
literal|0x80
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x800000
block|,
literal|0x800000
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x10
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xcac00e2
block|,
literal|0xcac00e2
block|,
literal|0x1000000
block|,
literal|0x0
block|,
literal|0x20000000
block|,
literal|0x1000000
block|,
literal|0x1000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20000000
block|,
literal|0x404000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0xc8c00e2
block|,
literal|0x0
block|,
literal|0xc9c08e2
block|,
literal|0x100800
block|,
literal|0x0
block|,
literal|0xc9c08e2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x10
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x10
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400
block|,
literal|0x8000
block|,
literal|0x8000
block|,
literal|0x8000
block|,
literal|0xc8c00e2
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_6
parameter_list|()
block|{
name|jj_la1_6
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20000000
block|,
literal|0x0
block|,
literal|0x400000
block|,
literal|0x0
block|,
literal|0x20000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400
block|,
literal|0x1000
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,
literal|0x0
block|,
literal|0xc9c622cf
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0xe9c622cf
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc9c622ce
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_7
parameter_list|()
block|{
name|jj_la1_7
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400400
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x10
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x10
block|,
literal|0x0
block|,
literal|0x4
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4000000
block|,
literal|0x4000000
block|,
literal|0x4000000
block|,
literal|0x80
block|,
literal|0x4000080
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x10
block|,
literal|0x0
block|,
literal|0xc384fb40
block|,
literal|0x10
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb43
block|,
literal|0x384fb53
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200000
block|,
literal|0x200000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0x384fb40
block|,
literal|0x0
block|,
literal|0xd38cfb40
block|,
literal|0xd0080000
block|,
literal|0xc0000000
block|,
literal|0xd38cfb40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4
block|,
literal|0x0
block|,
literal|0x80
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x384fb40
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_8
parameter_list|()
block|{
name|jj_la1_8
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x8000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400100
block|,
literal|0x0
block|,
literal|0x108000
block|,
literal|0x108000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400000
block|,
literal|0xc3a11cad
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x108000
block|,
literal|0x108000
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x43e11cad
block|,
literal|0x43e11cad
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,
literal|0x0
block|,
literal|0x43a35cef
block|,
literal|0x24042
block|,
literal|0x0
block|,
literal|0x43a35cef
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400100
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x43a11cad
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_9
parameter_list|()
block|{
name|jj_la1_9
operator|=
operator|new
name|int
index|[]
block|{
literal|0x800000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x10000000
block|,
literal|0x10000000
block|,
literal|0x10000000
block|,
literal|0x0
block|,
literal|0x20000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x0
block|,
literal|0x800000
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20
block|,
literal|0x0
block|,
literal|0x20
block|,
literal|0x20
block|,
literal|0x0
block|,
literal|0x400020
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x20
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x800
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x27305e91
block|,
literal|0x27305e91
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x27305691
block|,
literal|0x40000000
block|,
literal|0x27305691
block|,
literal|0x40000000
block|,
literal|0x27307791
block|,
literal|0x2100
block|,
literal|0x0
block|,
literal|0x27307791
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x400000
block|,
literal|0x0
block|,
literal|0x20
block|,
literal|0x40
block|,
literal|0x40
block|,
literal|0x60
block|,
literal|0x27305691
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_10
parameter_list|()
block|{
name|jj_la1_10
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x800
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x800000
block|,
literal|0x800000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1000000
block|,
literal|0xb49c77f6
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200001
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,
literal|0x0
block|,
literal|0xb4dcf7f6
block|,
literal|0x408000
block|,
literal|0x0
block|,
literal|0xb4dcf7f6
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb49c77f6
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_11
parameter_list|()
block|{
name|jj_la1_11
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x80000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0014
block|,
literal|0x8f3a0014
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,
literal|0x0
block|,
literal|0x8f3a0006
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x8f3a0006
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8f3a0004
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_12
parameter_list|()
block|{
name|jj_la1_12
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x800000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x800000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xfd63b8bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,
literal|0x0
block|,
literal|0x7d63b9bc
block|,
literal|0x100
block|,
literal|0x80000000
block|,
literal|0x7d63b9bc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x7d63b8bc
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_13
parameter_list|()
block|{
name|jj_la1_13
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x90000000
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000000
block|,
literal|0x40000000
block|,
literal|0x40000000
block|,
literal|0x40000000
block|,
literal|0x0
block|,
literal|0x4
block|,
literal|0x4
block|,
literal|0x4
block|,
literal|0x0
block|,
literal|0x4000004
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c05ba
block|,
literal|0x138c05ba
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8000000
block|,
literal|0x200
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x138c059a
block|,
literal|0x0
block|,
literal|0x33ed059a
block|,
literal|0x20610000
block|,
literal|0x0
block|,
literal|0x3bed059a
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x138c059a
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_14
parameter_list|()
block|{
name|jj_la1_14
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20000180
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20000180
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20000180
block|,
literal|0x0
block|,
literal|0x4e1fa055
block|,
literal|0x20000180
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x180
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4e1fa9d4
block|,
literal|0x4e1fa9d4
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4000
block|,
literal|0x4000
block|,
literal|0x0
block|,
literal|0x10200000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x4e1fa054
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20000000
block|,
literal|0x20000000
block|,
literal|0x20000000
block|,
literal|0x4e1fa054
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_15
parameter_list|()
block|{
name|jj_la1_15
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x40000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x300f447
block|,
literal|0x0
block|,
literal|0x300f447
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x300f447
block|,
literal|0x4000000
block|,
literal|0x4000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x300f447
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x10000
block|,
literal|0x0
block|,
literal|0x80
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x300f447
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x10000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40000000
block|,
literal|0x300f447
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x21
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x21
block|,
literal|0x0
block|,
literal|0x8
block|,
literal|0x40000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x4000000
block|,
literal|0x0
block|,
literal|0x20
block|,
literal|0x0
block|,
literal|0x300fc47
block|,
literal|0x20
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x300f447
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x800000
block|,
literal|0x0
block|,
literal|0x800000
block|,
literal|0x0
block|,
literal|0x360f447
block|,
literal|0x360f447
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x300f447
block|,
literal|0x0
block|,
literal|0x300f447
block|,
literal|0x0
block|,
literal|0x318f647
block|,
literal|0x180200
block|,
literal|0x800
block|,
literal|0x318f647
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x8
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x20
block|,
literal|0x20
block|,
literal|0x20
block|,
literal|0x300f447
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_16
parameter_list|()
block|{
name|jj_la1_16
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x200000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1c3c700
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1c3c700
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1c3c700
block|,
literal|0x2000000
block|,
literal|0xbc
block|,
literal|0x1c3c700
block|,
literal|0x700
block|,
literal|0x700
block|,
literal|0x0
block|,
literal|0x8000
block|,
literal|0x38000
block|,
literal|0x8000
block|,
literal|0x0
block|,
literal|0x3c000
block|,
literal|0x1c00000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x40
block|,
literal|0x40
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x100
block|,
literal|0x100
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x200000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x100000
block|,
literal|0x1000bc
block|,
literal|0x0
block|,
literal|0x1000bc
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbc
block|,
literal|0x100000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xbc
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_17
parameter_list|()
block|{
name|jj_la1_17
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x800
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x600
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x600
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3fce
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x600
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x610
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x600
block|,
literal|0x0
block|,
literal|0x600
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x600
block|,
literal|0x600
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x200
block|,
literal|0x600
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x1
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3fce
block|,
literal|0x0
block|,
literal|0x600
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_18
parameter_list|()
block|{
name|jj_la1_18
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,}
expr_stmt|;
block|}
specifier|final
specifier|private
name|JJCalls
index|[]
name|jj_2_rtns
init|=
operator|new
name|JJCalls
index|[
literal|45
index|]
decl_stmt|;
specifier|private
name|boolean
name|jj_rescan
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|jj_gc
init|=
literal|0
decl_stmt|;
comment|/** Constructor with InputStream. */
specifier|public
name|SqlParserImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor with InputStream and supplied encoding */
specifier|public
name|SqlParserImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|SqlParserImplTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|173
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|173
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor. */
specifier|public
name|SqlParserImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|SqlParserImplTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|173
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|173
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor with generated Token Manager. */
specifier|public
name|SqlParserImpl
parameter_list|(
name|SqlParserImplTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|173
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|SqlParserImplTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|173
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|jj_gc
operator|>
literal|100
condition|)
block|{
name|jj_gc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|c
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|gen
operator|<
name|jj_gen
condition|)
name|c
operator|.
name|first
operator|=
literal|null
expr_stmt|;
name|c
operator|=
name|c
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
specifier|static
specifier|private
specifier|final
class|class
name|LookaheadSuccess
extends|extends
name|java
operator|.
name|lang
operator|.
name|Error
block|{ }
specifier|final
specifier|private
name|LookaheadSuccess
name|jj_ls
init|=
operator|new
name|LookaheadSuccess
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_rescan
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Token
name|tok
init|=
name|token
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|!=
name|jj_scanpos
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|tok
operator|=
name|tok
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
name|jj_add_error_token
argument_list|(
name|kind
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
throw|throw
name|jj_ls
throw|;
return|return
literal|false
return|;
block|}
comment|/** Get the next Token. */
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|jj_lookingAhead
condition|?
name|jj_scanpos
else|:
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_lasttokens
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
specifier|private
name|int
name|jj_endpos
decl_stmt|;
specifier|private
name|void
name|jj_add_error_token
parameter_list|(
name|int
name|kind
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
literal|100
condition|)
return|return;
if|if
condition|(
name|pos
operator|==
name|jj_endpos
operator|+
literal|1
condition|)
block|{
name|jj_lasttokens
index|[
name|jj_endpos
operator|++
index|]
operator|=
name|kind
expr_stmt|;
block|}
if|else if
condition|(
name|jj_endpos
operator|!=
literal|0
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
name|jj_endpos
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_endpos
condition|;
name|i
operator|++
control|)
block|{
name|jj_expentry
index|[
name|i
index|]
operator|=
name|jj_lasttokens
index|[
name|i
index|]
expr_stmt|;
block|}
name|jj_entries_loop
label|:
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|jj_expentries
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|oldentry
init|=
operator|(
name|int
index|[]
operator|)
operator|(
name|it
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|oldentry
operator|.
name|length
operator|==
name|jj_expentry
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldentry
index|[
name|i
index|]
operator|!=
name|jj_expentry
index|[
name|i
index|]
condition|)
block|{
continue|continue
name|jj_entries_loop
continue|;
block|}
block|}
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
break|break
name|jj_entries_loop
break|;
block|}
block|}
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
name|jj_lasttokens
index|[
operator|(
name|jj_endpos
operator|=
name|pos
operator|)
operator|-
literal|1
index|]
operator|=
name|kind
expr_stmt|;
block|}
block|}
comment|/** Generate ParseException. */
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|581
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|173
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_2
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|64
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_3
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|96
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_4
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|128
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_5
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|160
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_6
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|192
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_7
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|224
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_8
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|256
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_9
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|288
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_10
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|320
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_11
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|352
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_12
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|384
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_13
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|416
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_14
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|448
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_15
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|480
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_16
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|512
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_17
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|544
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_18
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|576
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|581
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|jj_endpos
operator|=
literal|0
expr_stmt|;
name|jj_rescan_token
argument_list|()
expr_stmt|;
name|jj_add_error_token
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{
block|}
comment|/** Disable tracing. */
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{
block|}
specifier|private
name|void
name|jj_rescan_token
parameter_list|()
block|{
name|jj_rescan
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|45
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
name|jj_la
operator|=
name|p
operator|.
name|arg
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|p
operator|.
name|first
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|jj_3_1
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|jj_3_2
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|jj_3_3
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|jj_3_4
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|jj_3_5
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|jj_3_6
argument_list|()
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|jj_3_7
argument_list|()
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|jj_3_8
argument_list|()
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|jj_3_9
argument_list|()
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|jj_3_10
argument_list|()
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|jj_3_11
argument_list|()
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|jj_3_12
argument_list|()
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|jj_3_13
argument_list|()
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|jj_3_14
argument_list|()
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|jj_3_15
argument_list|()
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|jj_3_16
argument_list|()
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|jj_3_17
argument_list|()
expr_stmt|;
break|break;
case|case
literal|17
case|:
name|jj_3_18
argument_list|()
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|jj_3_19
argument_list|()
expr_stmt|;
break|break;
case|case
literal|19
case|:
name|jj_3_20
argument_list|()
expr_stmt|;
break|break;
case|case
literal|20
case|:
name|jj_3_21
argument_list|()
expr_stmt|;
break|break;
case|case
literal|21
case|:
name|jj_3_22
argument_list|()
expr_stmt|;
break|break;
case|case
literal|22
case|:
name|jj_3_23
argument_list|()
expr_stmt|;
break|break;
case|case
literal|23
case|:
name|jj_3_24
argument_list|()
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|jj_3_25
argument_list|()
expr_stmt|;
break|break;
case|case
literal|25
case|:
name|jj_3_26
argument_list|()
expr_stmt|;
break|break;
case|case
literal|26
case|:
name|jj_3_27
argument_list|()
expr_stmt|;
break|break;
case|case
literal|27
case|:
name|jj_3_28
argument_list|()
expr_stmt|;
break|break;
case|case
literal|28
case|:
name|jj_3_29
argument_list|()
expr_stmt|;
break|break;
case|case
literal|29
case|:
name|jj_3_30
argument_list|()
expr_stmt|;
break|break;
case|case
literal|30
case|:
name|jj_3_31
argument_list|()
expr_stmt|;
break|break;
case|case
literal|31
case|:
name|jj_3_32
argument_list|()
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|jj_3_33
argument_list|()
expr_stmt|;
break|break;
case|case
literal|33
case|:
name|jj_3_34
argument_list|()
expr_stmt|;
break|break;
case|case
literal|34
case|:
name|jj_3_35
argument_list|()
expr_stmt|;
break|break;
case|case
literal|35
case|:
name|jj_3_36
argument_list|()
expr_stmt|;
break|break;
case|case
literal|36
case|:
name|jj_3_37
argument_list|()
expr_stmt|;
break|break;
case|case
literal|37
case|:
name|jj_3_38
argument_list|()
expr_stmt|;
break|break;
case|case
literal|38
case|:
name|jj_3_39
argument_list|()
expr_stmt|;
break|break;
case|case
literal|39
case|:
name|jj_3_40
argument_list|()
expr_stmt|;
break|break;
case|case
literal|40
case|:
name|jj_3_41
argument_list|()
expr_stmt|;
break|break;
case|case
literal|41
case|:
name|jj_3_42
argument_list|()
expr_stmt|;
break|break;
case|case
literal|42
case|:
name|jj_3_43
argument_list|()
expr_stmt|;
break|break;
case|case
literal|43
case|:
name|jj_3_44
argument_list|()
expr_stmt|;
break|break;
case|case
literal|44
case|:
name|jj_3_45
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
block|}
block|}
name|jj_rescan
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|jj_save
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|xla
parameter_list|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|next
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
name|p
operator|.
name|gen
operator|=
name|jj_gen
operator|+
name|xla
operator|-
name|jj_la
expr_stmt|;
name|p
operator|.
name|first
operator|=
name|token
expr_stmt|;
name|p
operator|.
name|arg
operator|=
name|xla
expr_stmt|;
block|}
specifier|static
specifier|final
class|class
name|JJCalls
block|{
name|int
name|gen
decl_stmt|;
name|Token
name|first
decl_stmt|;
name|int
name|arg
decl_stmt|;
name|JJCalls
name|next
decl_stmt|;
block|}
block|}
end_class

end_unit

