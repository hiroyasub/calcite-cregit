begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  *<code>HashableArray</code> provides a<code>Object[]</code> with a {@link  * #hashCode} and an {@link #equals} function, so it can be used as a key in a  * {@link java.util.Hashtable}.  */
end_comment

begin_class
specifier|public
class|class
name|HashableArray
block|{
comment|//~ Instance fields --------------------------------------------------------
name|Object
index|[]
name|a
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|HashableArray
parameter_list|(
name|Object
index|[]
name|a
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// override Object
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|arrayHashCode
argument_list|(
name|a
argument_list|)
return|;
block|}
comment|// override Object
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|HashableArray
operator|)
operator|&&
name|arraysAreEqual
argument_list|(
name|this
operator|.
name|a
argument_list|,
operator|(
operator|(
name|HashableArray
operator|)
name|o
operator|)
operator|.
name|a
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|arrayHashCode
parameter_list|(
name|Object
index|[]
name|a
parameter_list|)
block|{
comment|// hash algorithm borrowed from java.lang.String
name|int
name|h
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|=
operator|(
literal|31
operator|*
name|h
operator|)
operator|+
name|a
index|[
name|i
index|]
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
comment|/**      * Returns whether two arrays are equal (deep compare).      */
specifier|public
specifier|static
name|boolean
name|arraysAreEqual
parameter_list|(
name|Object
index|[]
name|a1
parameter_list|,
name|Object
index|[]
name|a2
parameter_list|)
block|{
if|if
condition|(
name|a1
operator|.
name|length
operator|!=
name|a2
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|a1
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|a2
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

begin_comment
comment|// End HashableArray.java
end_comment

end_unit

