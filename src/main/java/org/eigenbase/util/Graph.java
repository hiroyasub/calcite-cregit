begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A collection of directed arcs between nodes;  * supports various graph-theoretic operations.  *  * @author jhyde  * @since May 6, 2003  */
end_comment

begin_class
specifier|public
class|class
name|Graph
parameter_list|<
name|T
parameter_list|>
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|Arc
index|[]
name|noArcs
init|=
operator|new
name|Arc
index|[
literal|0
index|]
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/**      * Maps {@link Arc} to {@link Arc}[].      */
specifier|private
name|Map
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|,
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
name|shortestPath
init|=
operator|new
name|HashMap
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|,
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
name|arcs
init|=
operator|new
name|HashSet
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|mutable
init|=
literal|true
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Returns an iterator of all paths between two nodes, shortest first.      *      *<p>The current implementation is not optimal.</p>      */
specifier|public
name|Iterator
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
name|getPaths
parameter_list|(
name|T
name|from
parameter_list|,
name|T
name|to
parameter_list|)
block|{
name|List
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|findPaths
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|list
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Returns the shortest path between two points, null if there is no path.      *      * @param from From      * @param to To      *      * @return A list of arcs, null if there is no path.      */
specifier|public
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
name|getShortestPath
parameter_list|(
name|T
name|from
parameter_list|,
name|T
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return
name|noArcs
return|;
block|}
name|makeImmutable
argument_list|()
expr_stmt|;
return|return
name|shortestPath
operator|.
name|get
argument_list|(
operator|new
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Arc
name|createArc
parameter_list|(
name|T
name|from
parameter_list|,
name|T
name|to
parameter_list|)
block|{
specifier|final
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
operator|new
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|arcs
operator|.
name|add
argument_list|(
name|arc
argument_list|)
expr_stmt|;
name|mutable
operator|=
literal|true
expr_stmt|;
return|return
name|arc
return|;
block|}
comment|/**      * Removes an arc between two vertices.      *      * @return The arc removed, or null      */
specifier|public
name|Arc
name|deleteArc
parameter_list|(
name|T
name|from
parameter_list|,
name|T
name|to
parameter_list|)
block|{
specifier|final
name|Arc
name|arc
init|=
operator|new
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|arcs
operator|.
name|remove
argument_list|(
name|arc
argument_list|)
condition|)
block|{
name|mutable
operator|=
literal|true
expr_stmt|;
return|return
name|arc
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|findPaths
parameter_list|(
name|T
name|from
parameter_list|,
name|T
name|to
parameter_list|,
name|List
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|Arc
index|[]
name|shortestPath
init|=
name|getShortestPath
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|shortestPath
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
operator|new
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|arcs
operator|.
name|contains
argument_list|(
name|arc
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|Arc
index|[]
block|{
name|arc
block|}
argument_list|)
expr_stmt|;
block|}
name|findPathsExcluding
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|list
argument_list|,
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Finds all paths from "from" to "to" of length 2 or greater, such that the      * intermediate nodes are not contained in "excludedNodes".      */
specifier|private
name|void
name|findPathsExcluding
parameter_list|(
name|T
name|from
parameter_list|,
name|T
name|to
parameter_list|,
name|List
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
name|list
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|excludedNodes
parameter_list|,
name|List
argument_list|<
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
name|prefix
parameter_list|)
block|{
name|excludedNodes
operator|.
name|add
argument_list|(
name|from
argument_list|)
expr_stmt|;
for|for
control|(
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
range|:
name|arcs
control|)
block|{
if|if
condition|(
name|arc
operator|.
name|from
operator|.
name|equals
argument_list|(
name|from
argument_list|)
condition|)
block|{
if|if
condition|(
name|arc
operator|.
name|to
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
comment|// We found a path.
name|prefix
operator|.
name|add
argument_list|(
name|arc
argument_list|)
expr_stmt|;
specifier|final
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
name|arcs
init|=
name|prefix
operator|.
name|toArray
argument_list|(
name|noArcs
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|arcs
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|remove
argument_list|(
name|prefix
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|excludedNodes
operator|.
name|contains
argument_list|(
name|arc
operator|.
name|to
argument_list|)
condition|)
block|{
comment|// ignore it
block|}
else|else
block|{
name|prefix
operator|.
name|add
argument_list|(
name|arc
argument_list|)
expr_stmt|;
name|findPathsExcluding
argument_list|(
name|arc
operator|.
name|to
argument_list|,
name|to
argument_list|,
name|list
argument_list|,
name|excludedNodes
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|remove
argument_list|(
name|prefix
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|excludedNodes
operator|.
name|remove
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|makeImmutable
parameter_list|()
block|{
if|if
condition|(
name|mutable
condition|)
block|{
name|mutable
operator|=
literal|false
expr_stmt|;
name|shortestPath
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
range|:
name|arcs
control|)
block|{
name|shortestPath
operator|.
name|put
argument_list|(
name|arc
argument_list|,
operator|new
name|Arc
index|[]
block|{
name|arc
block|}
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
comment|// Take a copy of the map's keys to avoid
comment|// ConcurrentModificationExceptions.
name|ArrayList
argument_list|<
name|Arc
argument_list|>
name|previous
init|=
operator|new
name|ArrayList
argument_list|<
name|Arc
argument_list|>
argument_list|(
name|shortestPath
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|changeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
range|:
name|arcs
control|)
block|{
for|for
control|(
name|Arc
argument_list|<
name|T
argument_list|>
name|arc2
range|:
name|previous
control|)
block|{
if|if
condition|(
name|arc
operator|.
name|to
operator|.
name|equals
argument_list|(
name|arc2
operator|.
name|from
argument_list|)
condition|)
block|{
specifier|final
name|Arc
argument_list|<
name|T
argument_list|>
name|newArc
init|=
operator|new
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|(
name|arc
operator|.
name|from
argument_list|,
name|arc2
operator|.
name|to
argument_list|)
decl_stmt|;
name|Arc
index|[]
name|bestPath
init|=
name|shortestPath
operator|.
name|get
argument_list|(
name|newArc
argument_list|)
decl_stmt|;
name|Arc
index|[]
name|arc2Path
init|=
name|shortestPath
operator|.
name|get
argument_list|(
name|arc2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|bestPath
operator|==
literal|null
operator|)
operator|||
operator|(
name|bestPath
operator|.
name|length
operator|>
operator|(
name|arc2Path
operator|.
name|length
operator|+
literal|1
operator|)
operator|)
condition|)
block|{
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
name|newPath
init|=
operator|new
name|Arc
index|[
name|arc2Path
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|newPath
index|[
literal|0
index|]
operator|=
name|arc
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|arc2Path
argument_list|,
literal|0
argument_list|,
name|newPath
argument_list|,
literal|1
argument_list|,
name|arc2Path
operator|.
name|length
argument_list|)
expr_stmt|;
name|shortestPath
operator|.
name|put
argument_list|(
name|newArc
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|changeCount
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|changeCount
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * An<code>Arc</code> is a directed link between two nodes.      *      *<p>The nodes are compared according to {@link Object#equals} and {@link      * Object#hashCode}. We assume that their {@link Object#toString} works,      * too.</p>      */
specifier|public
specifier|static
class|class
name|Arc
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
specifier|final
name|T
name|from
decl_stmt|;
specifier|public
specifier|final
name|T
name|to
decl_stmt|;
specifier|private
specifier|final
name|String
name|string
decl_stmt|;
comment|// for debug
comment|/**          * Creates an arc.          *          * @pre from != null          * @pre to != null          */
specifier|public
name|Arc
parameter_list|(
name|T
name|from
parameter_list|,
name|T
name|to
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
name|this
operator|.
name|string
operator|=
name|toString
argument_list|()
expr_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|this
operator|.
name|string
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Arc
condition|)
block|{
name|Arc
name|other
init|=
operator|(
name|Arc
operator|)
name|obj
decl_stmt|;
return|return
name|from
operator|.
name|equals
argument_list|(
name|other
operator|.
name|from
argument_list|)
operator|&&
name|to
operator|.
name|equals
argument_list|(
name|other
operator|.
name|to
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|from
operator|.
name|hashCode
argument_list|()
operator|^
operator|(
name|to
operator|.
name|hashCode
argument_list|()
operator|<<
literal|4
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|from
operator|+
literal|"-"
operator|+
name|to
return|;
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|String
name|toString
parameter_list|(
name|Arc
argument_list|<
name|T
argument_list|>
index|[]
name|arcs
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|arcs
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Graph.java
end_comment

end_unit

