begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Base class for properties which can respond to triggers.  *  *<p>If you wish to be notified of changes to properties, use the {@link  * Property#addTrigger(Trigger)} method to register a callback.  *  * @author Julian Hyde  * @version $Id$  * @since 5 July 2005  */
end_comment

begin_class
specifier|public
class|class
name|TriggerableProperties
extends|extends
name|Properties
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|Map
name|triggers
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Map
comment|/*<String, Property>*/
name|properties
init|=
operator|new
name|HashMap
comment|/*<String, Property>*/
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|TriggerableProperties
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Sets the value of a property.      *      *<p>If the previous value does not equal the new value, executes any      * {@link Trigger}s associated with the property, in order of their {@link      * Trigger#phase() phase}.      *      * @param key Name of property      * @param value Value      *      * @return the old value      */
specifier|public
specifier|synchronized
name|Object
name|setProperty
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|String
name|oldValue
init|=
name|super
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|super
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|oldValue
operator|==
literal|null
operator|)
operator|&&
operator|(
name|object
operator|!=
literal|null
operator|)
condition|)
block|{
name|oldValue
operator|=
name|object
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// If there is a property object, notify it to give it chane to fire
comment|// its triggers. If one of those triggers fires a veto exception, roll
comment|// back the change.
name|Property
name|property
init|=
operator|(
name|Property
operator|)
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|property
operator|!=
literal|null
operator|)
operator|&&
name|triggersAreEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|property
operator|.
name|onChange
argument_list|(
name|oldValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Trigger
operator|.
name|VetoRT
name|vex
parameter_list|)
block|{
comment|// Reset to the old value, do not call setProperty
comment|// unless you want to run out of stack space!
name|superSetProperty
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
try|try
block|{
name|property
operator|.
name|onChange
argument_list|(
name|value
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Trigger
operator|.
name|VetoRT
name|ex
parameter_list|)
block|{
comment|// ignore during reset
block|}
comment|// Re-throw.
throw|throw
name|vex
throw|;
block|}
block|}
return|return
name|oldValue
return|;
block|}
comment|/**      * Whether triggers are enabled. Derived class can override.      */
specifier|public
name|boolean
name|triggersAreEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Returns the definition of a named property, or null if there is no such      * property.      *      * @param path Name of the property      *      * @return Definition of property, or null if there is no property with this      * name      */
specifier|public
name|Property
name|getPropertyDefinition
parameter_list|(
name|String
name|path
parameter_list|)
block|{
specifier|final
name|List
comment|/*<Property>*/
name|propertyList
init|=
name|getPropertyList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Property
name|property
init|=
operator|(
name|Property
operator|)
name|propertyList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|property
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This is ONLY called during a veto operation. It calls the super class      * {@link #setProperty}.      *      * @param key Property name      * @param oldValue Previous value of property      */
specifier|private
name|void
name|superSetProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|oldValue
parameter_list|)
block|{
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
operator|(
name|o1
operator|==
literal|null
operator|)
condition|?
operator|(
name|o2
operator|==
literal|null
operator|)
else|:
operator|(
operator|(
name|o2
operator|!=
literal|null
operator|)
operator|&&
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
operator|)
return|;
block|}
comment|/**      * Registers a property with this properties object to make it available for      * callbacks.      */
specifier|public
name|void
name|register
parameter_list|(
name|Property
name|property
parameter_list|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|property
operator|.
name|getPath
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a collection of registered properties.      *      * @return registered properties      */
specifier|public
name|Collection
comment|/*<Property>*/
name|getProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|properties
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a list of every {@link org.eigenbase.util.property.Property}.      *      * @return List of properties      */
specifier|public
name|List
comment|/*<Property>*/
name|getPropertyList
parameter_list|()
block|{
name|Field
index|[]
name|fields
init|=
name|getClass
argument_list|()
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
comment|/*<Property>*/
name|list
init|=
operator|new
name|ArrayList
comment|/*<Property>*/
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|Property
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|Property
operator|)
name|field
operator|.
name|get
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while accessing property '"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
block|}
end_class

begin_comment
comment|// End TriggerableProperties.java
end_comment

end_unit

