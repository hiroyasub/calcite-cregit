begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Definition and accessor for an integer property.  *  * @author jhyde  * @version $Id$  * @since May 4, 2004  */
end_comment

begin_class
specifier|public
class|class
name|IntegerProperty
extends|extends
name|Property
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|int
name|minValue
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxValue
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates an Integer property. Minimum and maximum values are set to {@link      * Integer#MIN_VALUE} and {@link Integer#MAX_VALUE}.      *      * @param properties Properties object which holds values for this property.      * @param path Name by which this property is serialized to a properties      * file, for example "com.acme.trace.Verbosity".      * @param defaultValue Default value.      */
specifier|public
name|IntegerProperty
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|this
argument_list|(
name|properties
argument_list|,
name|path
argument_list|,
name|defaultValue
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates an Integer property which has no default value. Minimum and      * maximum values are set to {@link Integer#MIN_VALUE} and {@link      * Integer#MAX_VALUE}.      *      * @param properties Properties object which holds values for this property.      * @param path Name by which this property is serialized to a properties      * file, for example "com.acme.trace.Verbosity".      */
specifier|public
name|IntegerProperty
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
argument_list|(
name|properties
argument_list|,
name|path
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates an Integer property with a default value and fixed minimum and      * maximum values.      *      * @param properties Properties object which holds values for this property.      * @param path Name by which this property is serialized to a properties      * file, for example "com.acme.trace.Verbosity".      * @param defaultValue Default value.      * @param minValue the minimum value of this property (inclusive)      * @param maxValue the maximum value of this property (inclusive)      *      * @throws IllegalArgumentException if<code>defaultValue</code> is not in      * the range [<code>minValue</code>,<code>maxValue</code>].      */
specifier|public
name|IntegerProperty
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|defaultValue
parameter_list|,
name|int
name|minValue
parameter_list|,
name|int
name|maxValue
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|,
name|path
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|minValue
operator|>
name|maxValue
condition|)
block|{
name|int
name|temp
init|=
name|minValue
decl_stmt|;
name|minValue
operator|=
name|maxValue
expr_stmt|;
name|maxValue
operator|=
name|temp
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|defaultValue
operator|<
name|minValue
operator|)
operator|||
operator|(
name|defaultValue
operator|>
name|maxValue
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid default value "
operator|+
name|defaultValue
argument_list|)
throw|;
block|}
name|this
operator|.
name|minValue
operator|=
name|minValue
expr_stmt|;
name|this
operator|.
name|maxValue
operator|=
name|maxValue
expr_stmt|;
block|}
comment|/**      * Creates an Integer property with fixed minimum and maximum values.      *      * @param properties Properties object which holds values for this property.      * @param path Name by which this property is serialized to a properties      * file, for example "com.acme.trace.Verbosity".      * @param minValue the minimum value of this property (inclusive)      * @param maxValue the maximum value of this property (inclusive)      */
specifier|public
name|IntegerProperty
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|minValue
parameter_list|,
name|int
name|maxValue
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|minValue
operator|>
name|maxValue
condition|)
block|{
name|int
name|temp
init|=
name|minValue
decl_stmt|;
name|minValue
operator|=
name|maxValue
expr_stmt|;
name|maxValue
operator|=
name|temp
expr_stmt|;
block|}
name|this
operator|.
name|minValue
operator|=
name|minValue
expr_stmt|;
name|this
operator|.
name|maxValue
operator|=
name|maxValue
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Retrieves the value of this integer property according to these rules.      *      *<ul>      *<li>If the property has no value, returns the default value.</li>      *<li>If there is no default value and {@link #minValue}&lt;= 0&lt;=      * {@link #maxValue}, returns 0.</li>      *<li>If there is no default value and 0 is not in the min/max range,      * returns {@link #minValue}.</li>      *</ul>      */
specifier|public
name|int
name|get
parameter_list|()
block|{
specifier|final
name|String
name|value
init|=
name|getInternal
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|noValue
argument_list|()
return|;
block|}
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// need to limit value in case setString() was called directly with
comment|// an out-of-range value
return|return
name|limit
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/**      * Retrieves the value of this integer property. If the property has no      * value, returns the default value. If there is no default value, returns      * the given default value. In all cases, the returned value is limited to      * the min/max value range given during construction.      */
specifier|public
name|int
name|get
parameter_list|(
name|int
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|getInternal
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|limit
argument_list|(
name|defaultValue
argument_list|)
return|;
block|}
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|limit
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/**      * Sets the value of this integer property. The value is limited to the      * min/max range given during construction.      *      * @return the previous value, or if not set: the default value. If no      * default value exists, 0 if that value is in the range [minValue,      * maxValue], or minValue if 0 is not in the range      */
specifier|public
name|int
name|set
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|String
name|prevValue
init|=
name|setString
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|limit
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevValue
operator|==
literal|null
condition|)
block|{
name|prevValue
operator|=
name|getDefaultValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|prevValue
operator|==
literal|null
condition|)
block|{
return|return
name|noValue
argument_list|()
return|;
block|}
block|}
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|prevValue
argument_list|)
decl_stmt|;
return|return
name|limit
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/**      * Returns value limited to the range [minValue, maxValue].      *      * @param value the value to limit      *      * @return value limited to the range [minValue, maxValue].      */
specifier|private
name|int
name|limit
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|value
argument_list|,
name|minValue
argument_list|)
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
comment|/**      * Returns 0 if that value is in the range [minValue, maxValue]. Otherwise,      * returns minValue.      */
specifier|private
name|int
name|noValue
parameter_list|()
block|{
if|if
condition|(
operator|(
name|minValue
operator|<=
literal|0
operator|)
operator|&&
operator|(
name|maxValue
operator|>=
literal|0
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|minValue
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End IntegerProperty.java
end_comment

end_unit

