begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * PersistentPropertyStorage handles storage for persistent property objects.  * For example, see {@link PersistentStringProperty}.  *  * @author stephan  * @version $Id$  * @since December 3, 2004  */
end_comment

begin_class
class|class
name|PersistentPropertyStorage
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|HashMap
name|propertyFileMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|File
name|propertyFile
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a PersistentPropertyStorage for the given property file.      *      * @param propertyFile the name of the property file to use      */
specifier|private
name|PersistentPropertyStorage
parameter_list|(
name|File
name|propertyFile
parameter_list|)
block|{
name|this
operator|.
name|propertyFile
operator|=
name|propertyFile
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Factory method for PersistentPropertyStorage. Guarantees that only a      * single PersistentPropertyStorage object exists for any property file.      *      * @param propertyFile the name of the property file to use      *      * @throws IOException if<code>propertyFile</code> cannot be converted into      * a canonical path name (via {@link File#getCanonicalPath()}).      */
specifier|synchronized
specifier|static
name|PersistentPropertyStorage
name|newPersistentPropertyStorage
parameter_list|(
name|String
name|propertyFile
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|propertyFile
argument_list|)
decl_stmt|;
name|String
name|canonicalName
init|=
name|file
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyFileMap
operator|.
name|containsKey
argument_list|(
name|canonicalName
argument_list|)
condition|)
block|{
return|return
operator|(
name|PersistentPropertyStorage
operator|)
name|propertyFileMap
operator|.
name|get
argument_list|(
name|canonicalName
argument_list|)
return|;
block|}
name|PersistentPropertyStorage
name|storage
init|=
operator|new
name|PersistentPropertyStorage
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|propertyFileMap
operator|.
name|put
argument_list|(
name|canonicalName
argument_list|,
name|storage
argument_list|)
expr_stmt|;
return|return
name|storage
return|;
block|}
comment|/**      * Stores the given property's value in the property file. Unlike {@link      * java.util.Properties#store(java.io.OutputStream, String)} this method      * does not obliterate the format of the existing property file.      *      * @param property a {@link Property} value to store.      *      * @throws IOException if a temporary file cannot be created ({@link      * File#createTempFile(String, String)}) or written, or if the property file      * given during construction cannot be created (if it didn't already exist)      * or written.      */
specifier|synchronized
name|void
name|storeProperty
parameter_list|(
name|Property
name|property
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|propertyFileExists
init|=
name|propertyFile
operator|.
name|exists
argument_list|()
decl_stmt|;
name|boolean
name|propertyStored
init|=
literal|false
decl_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propertyFileExists
condition|)
block|{
comment|// Copy properties file to a temp file.
name|tempFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"eigenbase"
argument_list|,
literal|".properties"
argument_list|)
expr_stmt|;
name|FileReader
name|fileReader
init|=
operator|new
name|FileReader
argument_list|(
name|propertyFile
argument_list|)
decl_stmt|;
try|try
block|{
name|FileWriter
name|fileWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
try|try
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|fileReader
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|fileWriter
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fileReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Copy the temp file back to properties file,
comment|// substituting our property's value for the existing one,
comment|// if any.
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^#?\\Q"
operator|+
name|property
operator|.
name|getPath
argument_list|()
operator|+
literal|"\\E=.*"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|tempFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|propertyFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|matcher
operator|.
name|reset
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Found the property -- output our value.
name|writePropertyValue
argument_list|(
name|writer
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|propertyStored
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Simply copy the existing line to the output.
name|writer
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete the temp file, we're done with it.
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|propertyStored
condition|)
block|{
comment|// The property does not currently exist in the file.
comment|// Simply append property=value to the property file.
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|propertyFile
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|writePropertyValue
argument_list|(
name|writer
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writePropertyValue
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|Property
name|property
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|property
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|getInternal
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End PersistentPropertyStorage.java
end_comment

end_unit

