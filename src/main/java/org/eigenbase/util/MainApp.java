begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Abstract base class for a Java application invoked from the command-line.  *  *<p>Example usage:  *  *<blockquote>  *<pre>public class MyClass extends MainApp {  *     public static void main(String[] args) {  *         new MyClass(args).run();  *     }  *     public void mainImpl() {  *         System.out.println("Hello, world!");  *     }  * }</pre>  *</blockquote>  *</p>  *  * @author jhyde  * @version $Id$  * @since Aug 31, 2003  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MainApp
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|String
index|[]
name|args
decl_stmt|;
specifier|private
name|OptionsList
name|options
init|=
operator|new
name|OptionsList
argument_list|()
decl_stmt|;
specifier|private
name|int
name|exitCode
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|MainApp
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Does the work of the application. Derived classes must implement this      * method; they can throw any exception they like, and {@link #run} will      * clean up after them.      */
specifier|public
specifier|abstract
name|void
name|mainImpl
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Does the work of the application, handles any errors, then calls {@link      * System#exit} to terminate the application.      */
specifier|public
specifier|final
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|initializeOptions
argument_list|()
expr_stmt|;
name|mainImpl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handle
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the code which this program will return to the operating system.      *      * @param exitCode Exit code      *      * @see System#exit      */
specifier|public
name|void
name|setExitCode
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
comment|/**      * Handles an error. Derived classes may override this method to provide      * their own error-handling.      *      * @param throwable Error to handle.      */
specifier|public
name|void
name|handle
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|throwable
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|parseOptions
parameter_list|(
name|OptionsList
operator|.
name|OptionHandler
name|values
parameter_list|)
block|{
name|options
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the application.      */
specifier|protected
name|void
name|initializeOptions
parameter_list|()
block|{
name|options
operator|.
name|add
argument_list|(
operator|new
name|OptionsList
operator|.
name|BooleanOption
argument_list|(
literal|"-h"
argument_list|,
literal|"help"
argument_list|,
literal|"Prints command-line parameters"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End MainApp.java
end_comment

end_unit

