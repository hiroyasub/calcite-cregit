begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link OptionsList}.  *  * @author Julian Hyde  * @version $Id$  * @since Sep 4, 2003  */
end_comment

begin_class
specifier|public
class|class
name|OptionsListTest
extends|extends
name|TestCase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|String
name|NL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|_testBooleanArg
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"flag=true"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|BooleanOption
argument_list|(
literal|"flag"
argument_list|,
literal|null
argument_list|,
literal|"xxx"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-flag"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testBooleanArgMissing
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|""
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|BooleanOption
argument_list|(
literal|"flag"
argument_list|,
literal|null
argument_list|,
literal|"xxx"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testUnknownArg
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"?"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|BooleanOption
argument_list|(
literal|"flag"
argument_list|,
literal|null
argument_list|,
literal|"xxx"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-unknown"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testUnknownArgWithEqualsSyntax
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"?"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|BooleanOption
argument_list|(
literal|"flag"
argument_list|,
literal|null
argument_list|,
literal|"xxx"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"unknown=foo"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testStringArgSameAsDefault
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"foo=default"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|StringOption
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"xxx"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo=default"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testStringArgUsesDefaultValue
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"foo=default (default)"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|StringOption
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"xxx"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testEnumeratedArgShort
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"color=GREEN"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|EnumeratedOption
argument_list|(
literal|"c"
argument_list|,
literal|"color"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|RED
argument_list|,
name|Color
operator|.
name|RED
operator|.
name|getEnumeratedType
argument_list|()
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-c GREEN"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testEnumeratedArgLong
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"color=BLUE"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|EnumeratedOption
argument_list|(
literal|"c"
argument_list|,
literal|"color"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|RED
argument_list|,
name|Color
operator|.
name|RED
operator|.
name|getEnumeratedType
argument_list|()
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"color=BLUE"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testEnumeratedArgWrong
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"PURPLE is not a valid value"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|EnumeratedOption
argument_list|(
literal|"c"
argument_list|,
literal|"color"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|RED
argument_list|,
name|Color
operator|.
name|RED
operator|.
name|getEnumeratedType
argument_list|()
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-c PURPLE"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testEnumeratedArgDefault
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"color=RED (default)"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|EnumeratedOption
argument_list|(
literal|"c"
argument_list|,
literal|"color"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|RED
argument_list|,
name|Color
operator|.
name|RED
operator|.
name|getEnumeratedType
argument_list|()
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|OptionsList
operator|.
name|NumberOption
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-c PURPLE"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testMissingMandatory
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"missing x"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|NumberOption
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testGroupOptionsMustBeOptional
parameter_list|()
block|{
specifier|final
name|OptionsList
operator|.
name|NumberOption
name|optionX
init|=
operator|new
name|OptionsList
operator|.
name|NumberOption
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|OptionsList
operator|.
name|NumberOption
name|optionY
init|=
operator|new
name|OptionsList
operator|.
name|NumberOption
argument_list|(
literal|"y"
argument_list|,
literal|"y"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OptionsList
name|optionsList
init|=
operator|new
name|OptionsList
argument_list|(
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
name|optionX
block|,
name|optionY
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|optionsList
operator|.
name|constrain
argument_list|(
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
name|optionX
block|,
name|optionY
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected an error"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertContains
argument_list|(
literal|"fewer than 1..."
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|_testGroupMissing
parameter_list|()
block|{
specifier|final
name|StringBufferOptionsHandler
name|handler
init|=
operator|new
name|StringBufferOptionsHandler
argument_list|()
decl_stmt|;
specifier|final
name|OptionsList
operator|.
name|NumberOption
name|optionX
init|=
operator|new
name|OptionsList
operator|.
name|NumberOption
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|OptionsList
operator|.
name|NumberOption
name|optionY
init|=
operator|new
name|OptionsList
operator|.
name|NumberOption
argument_list|(
literal|"y"
argument_list|,
literal|"y"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|OptionsList
operator|.
name|NumberOption
name|optionZ
init|=
operator|new
name|OptionsList
operator|.
name|NumberOption
argument_list|(
literal|"z"
argument_list|,
literal|"z"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OptionsList
name|optionsList
init|=
operator|new
name|OptionsList
argument_list|(
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
name|optionX
block|,
name|optionY
block|,
name|optionZ
block|}
argument_list|)
decl_stmt|;
name|optionsList
operator|.
name|constrain
argument_list|(
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
name|optionX
block|,
name|optionY
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-z"
block|}
decl_stmt|;
name|optionsList
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testAnonymousOption
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"verbose=true"
operator|+
name|NL
operator|+
literal|"file=file.txt"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|BooleanOption
argument_list|(
literal|"flag"
argument_list|,
literal|"flag"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|OptionsList
operator|.
name|StringOption
argument_list|(
literal|"file"
argument_list|,
literal|"file"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"foo.txt"
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-v"
block|,
literal|"bar.txt"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_testRepeatingOption
parameter_list|()
block|{
name|checkIt
argument_list|(
literal|"verbose=true"
operator|+
name|NL
operator|+
literal|"file=foo.txt"
operator|+
name|NL
operator|+
literal|"file=bar.txt"
argument_list|,
operator|new
name|OptionsList
operator|.
name|Option
index|[]
block|{
operator|new
name|OptionsList
operator|.
name|BooleanOption
argument_list|(
literal|"flag"
argument_list|,
literal|"flag"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|OptionsList
operator|.
name|StringOption
argument_list|(
literal|"file"
argument_list|,
literal|"file"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"foo.txt"
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-v"
block|,
literal|"-f"
block|,
literal|"foo.txt"
block|,
literal|"-f"
block|,
literal|"bar.txt"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAlwaysSucceeds
parameter_list|()
block|{
comment|// TODO enable the other tests, and remove this test -- it only exists
comment|//   to stop junit complaining that there are no tests!
block|}
comment|// -------------------------------------------------------------------------
comment|// Utility methods and classes
specifier|private
name|void
name|assertContains
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|.
name|indexOf
argument_list|(
name|expected
argument_list|)
operator|<
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Expected '"
operator|+
name|actual
operator|+
literal|"' to contain '"
operator|+
name|expected
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkIt
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|,
specifier|final
name|OptionsList
operator|.
name|Option
index|[]
name|options
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|StringBufferOptionsHandler
name|handler
init|=
operator|new
name|StringBufferOptionsHandler
argument_list|()
decl_stmt|;
specifier|final
name|OptionsList
name|optionsList
init|=
operator|new
name|OptionsList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|options
index|[
name|i
index|]
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|optionsList
operator|.
name|add
argument_list|(
name|options
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|optionsList
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|private
specifier|static
class|class
name|Color
extends|extends
name|EnumeratedValues
operator|.
name|BasicValue
block|{
specifier|public
specifier|static
specifier|final
name|Color
name|RED
init|=
operator|new
name|Color
argument_list|(
literal|"RED"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Color
name|GREEN
init|=
operator|new
name|Color
argument_list|(
literal|"GREEN"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Color
name|BLUE
init|=
operator|new
name|Color
argument_list|(
literal|"BLUE"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|EnumeratedValues
name|enumeration
init|=
operator|new
name|EnumeratedValues
argument_list|(
operator|new
name|Color
index|[]
block|{
name|RED
block|,
name|GREEN
block|,
name|BLUE
block|}
argument_list|)
decl_stmt|;
specifier|public
name|Color
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|ordinal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EnumeratedValues
name|getEnumeratedType
parameter_list|()
block|{
return|return
name|enumeration
return|;
block|}
block|}
comment|/**      * Implementation of {@link OptionsList.OptionHandler} which writes to a      * buffer. For testing purposes.      */
specifier|public
specifier|static
class|class
name|StringBufferOptionsHandler
implements|implements
name|OptionsList
operator|.
name|OptionHandler
block|{
specifier|private
name|StringWriter
name|buf
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|public
name|void
name|set
parameter_list|(
name|OptionsList
operator|.
name|Option
name|option
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isExplicit
parameter_list|)
block|{
name|buf
operator|.
name|write
argument_list|(
name|option
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|value
operator|+
operator|(
name|isExplicit
condition|?
literal|""
else|:
literal|" (default)"
operator|)
operator|+
name|NL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invalidValue
parameter_list|(
name|OptionsList
operator|.
name|Option
name|option
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|buf
operator|.
name|write
argument_list|(
name|value
operator|+
literal|" is not valid for "
operator|+
name|option
operator|.
name|getName
argument_list|()
operator|+
name|NL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End OptionsListTest.java
end_comment

end_unit

