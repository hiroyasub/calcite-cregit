begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|relopt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Callback for an expression to dump itself to.  */
end_comment

begin_class
specifier|public
class|class
name|RelOptPlanWriter
extends|extends
name|java
operator|.
name|io
operator|.
name|PrintWriter
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|boolean
name|withIdPrefix
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|SqlExplainLevel
name|detailLevel
decl_stmt|;
name|int
name|level
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|RelOptPlanWriter
parameter_list|(
name|java
operator|.
name|io
operator|.
name|PrintWriter
name|pw
parameter_list|)
block|{
name|this
argument_list|(
name|pw
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelOptPlanWriter
parameter_list|(
name|java
operator|.
name|io
operator|.
name|PrintWriter
name|pw
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|)
block|{
name|super
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|this
operator|.
name|level
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|detailLevel
operator|=
name|detailLevel
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|setIdPrefix
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|withIdPrefix
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Prints the plan of a given relational expression to this writer.      *      *<p>The terms and values array must be specified. Individual values may      * be null.</p>      *      * @param rel Relational expression      * @param terms Names of the attributes of the plan      * @param values Values of the attributes of the plan      *      * @pre rel != null      * @pre terms.length == rel.getChildExps().length + values.length      * @pre values != null      */
specifier|public
name|void
name|explain
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|String
index|[]
name|terms
parameter_list|,
name|Object
index|[]
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|rel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|RelMetadataQuery
operator|.
name|isVisibleInExplain
argument_list|(
name|rel
argument_list|,
name|detailLevel
argument_list|)
condition|)
block|{
comment|// render children in place of this, at same level
name|explainInputs
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
return|return;
block|}
name|RexNode
index|[]
name|children
init|=
name|rel
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
assert|assert
name|terms
operator|.
name|length
operator|==
operator|(
name|inputs
operator|.
name|size
argument_list|()
operator|+
name|children
operator|.
name|length
operator|+
name|values
operator|.
name|length
operator|)
operator|:
literal|"terms.length="
operator|+
name|terms
operator|.
name|length
operator|+
literal|" inputs.length="
operator|+
name|inputs
operator|.
name|size
argument_list|()
operator|+
literal|" children.length="
operator|+
name|children
operator|.
name|length
operator|+
literal|" values.length="
operator|+
name|values
operator|.
name|length
assert|;
name|String
name|s
decl_stmt|;
if|if
condition|(
name|withIdPrefix
condition|)
block|{
name|s
operator|=
name|rel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
literal|""
expr_stmt|;
block|}
name|s
operator|=
name|s
operator|+
name|rel
operator|.
name|getRelTypeName
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|level
condition|;
name|i
operator|++
control|)
block|{
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailLevel
operator|!=
name|SqlExplainLevel
operator|.
name|NO_ATTRIBUTES
condition|)
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|child
init|=
name|children
index|[
name|i
index|]
decl_stmt|;
name|print
argument_list|(
operator|(
operator|(
name|j
operator|==
literal|0
operator|)
condition|?
literal|"("
else|:
literal|", "
operator|)
operator|+
name|terms
index|[
name|inputs
operator|.
name|size
argument_list|()
operator|+
name|j
operator|++
index|]
operator|+
literal|"=["
operator|+
name|child
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
name|print
argument_list|(
operator|(
operator|(
name|j
operator|==
literal|0
operator|)
condition|?
literal|"("
else|:
literal|", "
operator|)
operator|+
name|terms
index|[
name|inputs
operator|.
name|size
argument_list|()
operator|+
name|j
operator|++
index|]
operator|+
literal|"=["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|print
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|detailLevel
operator|==
name|SqlExplainLevel
operator|.
name|ALL_ATTRIBUTES
condition|)
block|{
name|print
argument_list|(
literal|": rowcount = "
operator|+
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|", cumulative cost = "
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|RelMetadataQuery
operator|.
name|getCumulativeCost
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|level
operator|++
expr_stmt|;
name|explainInputs
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
name|level
operator|--
expr_stmt|;
block|}
specifier|private
name|void
name|explainInputs
parameter_list|(
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|child
init|=
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|explain
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|explain
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|String
index|[]
name|terms
parameter_list|)
block|{
name|explain
argument_list|(
name|rel
argument_list|,
name|terms
argument_list|,
name|Util
operator|.
name|emptyStringArray
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shorthand for {@link #explain(RelNode, String[], Object[])}.      *      * @param rel Relational expression      * @param termList List of names of the attributes of the plan      * @param valueList List of values of the attributes of the plan      */
specifier|public
specifier|final
name|void
name|explain
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|termList
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|valueList
parameter_list|)
block|{
name|String
index|[]
name|terms
init|=
name|termList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|termList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Object
index|[]
name|values
init|=
name|valueList
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|valueList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|explain
argument_list|(
name|rel
argument_list|,
name|terms
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**      * Special form used by {@link      * org.eigenbase.relopt.volcano.RelSubset}.      */
specifier|public
name|void
name|explainSubset
parameter_list|(
name|String
name|s
parameter_list|,
name|RelNode
name|child
parameter_list|)
block|{
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|level
operator|++
expr_stmt|;
name|child
operator|.
name|explain
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|level
operator|--
expr_stmt|;
block|}
specifier|public
name|void
name|explainTree
parameter_list|(
name|RelNode
name|exp
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
literal|0
expr_stmt|;
name|exp
operator|.
name|explain
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return detail level at which plan should be generated      */
specifier|public
name|SqlExplainLevel
name|getDetailLevel
parameter_list|()
block|{
return|return
name|detailLevel
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelOptPlanWriter.java
end_comment

end_unit

