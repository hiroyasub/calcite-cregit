begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|relopt
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_comment
comment|/**  * Calling convention trait.  */
end_comment

begin_interface
specifier|public
interface|interface
name|Convention
extends|extends
name|RelTrait
block|{
comment|/**      * Convention that for a relational expression that does not support any      * convention. It is not implementable, and has to be transformed to      * something else in order to be implemented.      *      *<p>Relational expressions generally start off in this form.</p>      *      *<p>Such expressions always have infinite cost.</p>      */
name|Convention
name|NONE
init|=
operator|new
name|Impl
argument_list|(
literal|"NONE"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
name|getInterface
parameter_list|()
function_decl|;
name|String
name|getName
parameter_list|()
function_decl|;
comment|/** Default implementation. */
class|class
name|Impl
implements|implements
name|Convention
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|relClass
decl_stmt|;
specifier|public
name|Impl
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|relClass
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|relClass
operator|=
name|relClass
expr_stmt|;
block|}
specifier|public
name|Class
name|getInterface
parameter_list|()
block|{
return|return
name|relClass
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|RelTraitDef
name|getTraitDef
parameter_list|()
block|{
return|return
name|ConventionTraitDef
operator|.
name|instance
return|;
block|}
block|}
block|}
end_interface

begin_comment
comment|// End Convention.java
end_comment

end_unit

