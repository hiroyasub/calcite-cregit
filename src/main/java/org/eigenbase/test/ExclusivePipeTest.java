begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Testcase for {@link org.eigenbase.runtime.ExclusivePipe}.  */
end_comment

begin_class
specifier|public
class|class
name|ExclusivePipeTest
extends|extends
name|TestCase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|int
name|BUF_BYTES
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|timeoutMillis
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|words
init|=
block|{
literal|"the"
block|,
literal|"quick"
block|,
literal|"brown"
block|,
literal|"fox"
block|,
literal|"jumped"
block|,
literal|"over"
block|,
literal|"the"
block|,
literal|"lazy"
block|,
literal|"dog"
block|,     }
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|test
parameter_list|()
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|BUF_BYTES
argument_list|)
decl_stmt|;
name|ExclusivePipe
name|pipe
init|=
operator|new
name|ExclusivePipe
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
operator|new
name|Producer
argument_list|(
name|pipe
argument_list|)
decl_stmt|;
name|Consumer
name|consumer
init|=
operator|new
name|Consumer
argument_list|(
name|pipe
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|producer
operator|.
name|join
argument_list|(
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"producer interrupted"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|consumer
operator|.
name|join
argument_list|(
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"consumer interrupted"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|producer
operator|.
name|thrown
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"producer had error: "
operator|+
name|producer
operator|.
name|thrown
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"producer blocked"
argument_list|,
name|producer
operator|.
name|succeeded
argument_list|)
expr_stmt|;
if|if
condition|(
name|consumer
operator|.
name|thrown
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"producer had error: "
operator|+
name|consumer
operator|.
name|thrown
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"consumer blocked"
argument_list|,
name|consumer
operator|.
name|succeeded
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Producer thread writes a list of words into a pipe.      */
specifier|private
specifier|static
class|class
name|Producer
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|ExclusivePipe
name|pipe
decl_stmt|;
specifier|private
name|boolean
name|succeeded
decl_stmt|;
specifier|private
name|Throwable
name|thrown
decl_stmt|;
name|Producer
parameter_list|(
name|ExclusivePipe
name|pipe
parameter_list|)
block|{
name|this
operator|.
name|pipe
operator|=
name|pipe
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ByteBuffer
name|buf
init|=
name|pipe
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|word
init|=
name|words
index|[
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|word
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|pipe
operator|.
name|beginWriting
argument_list|()
expr_stmt|;
comment|// Store the string as a 1-byte length followed by n bytes.
comment|// Can't handle strings longer than 255 but hey, this is
comment|// only a test!
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|pipe
operator|.
name|endWriting
argument_list|()
expr_stmt|;
block|}
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|thrown
operator|=
name|e
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Consumer thread reads words from a pipe, comparing with the list of      * expected words, until it has read all of the words it expects to see.      */
specifier|private
specifier|static
class|class
name|Consumer
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|ExclusivePipe
name|pipe
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|BUF_BYTES
index|]
decl_stmt|;
specifier|private
name|boolean
name|succeeded
decl_stmt|;
specifier|private
name|Throwable
name|thrown
decl_stmt|;
name|Consumer
parameter_list|(
name|ExclusivePipe
name|pipe
parameter_list|)
block|{
name|this
operator|.
name|pipe
operator|=
name|pipe
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ByteBuffer
name|buf
init|=
name|pipe
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|word
init|=
name|words
index|[
name|i
index|]
decl_stmt|;
name|pipe
operator|.
name|beginReading
argument_list|()
expr_stmt|;
name|int
name|length
init|=
name|buf
operator|.
name|get
argument_list|()
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|String
name|actualWord
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|word
argument_list|,
name|actualWord
argument_list|)
expr_stmt|;
name|pipe
operator|.
name|endReading
argument_list|()
expr_stmt|;
block|}
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|thrown
operator|=
name|e
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End ExclusivePipeTest.java
end_comment

end_unit

