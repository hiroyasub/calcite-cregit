begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test for {@link ThreadIterator}.  *  * @author Julian Hyde  * @version $Id$  */
end_comment

begin_class
specifier|public
class|class
name|ThreadIteratorTest
extends|extends
name|EigenbaseTestCase
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|ThreadIteratorTest
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|testBeatlesSynchronous
parameter_list|()
block|{
name|testBeatles
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBeatlesPipelined
parameter_list|()
block|{
name|testBeatles
argument_list|(
operator|new
name|ArrayBlockingQueue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testBeatles
parameter_list|(
name|BlockingQueue
name|queue
parameter_list|)
block|{
name|Iterator
name|beatles
init|=
operator|new
name|ThreadIterator
argument_list|(
name|queue
argument_list|)
block|{
name|String
index|[]
name|strings
decl_stmt|;
specifier|public
name|ThreadIterator
name|start
parameter_list|(
name|String
index|[]
name|strings
parameter_list|)
block|{
name|this
operator|.
name|strings
operator|=
name|strings
expr_stmt|;
return|return
name|start
argument_list|()
return|;
block|}
specifier|protected
name|void
name|doWork
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|strings
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"lennon"
block|,
literal|"mccartney"
block|,
literal|null
block|,
literal|"starr"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|beatles
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beatles
operator|.
name|next
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beatles
operator|.
name|next
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|barf
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Util
operator|.
name|discard
argument_list|(
name|beatles
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|barf
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"expected a NullPointerException"
argument_list|,
name|barf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDigits
parameter_list|()
block|{
name|ThreadIterator
name|threadIterator
init|=
operator|new
name|ThreadIterator
argument_list|()
block|{
specifier|protected
name|void
name|doWork
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Iterator
name|digits
init|=
name|threadIterator
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|digits
argument_list|,
operator|new
name|Integer
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|6
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|7
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|8
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|9
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|digits
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|Object
index|[]
name|empty
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayIterator
argument_list|(
name|empty
argument_list|)
argument_list|,
name|empty
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testXyz
parameter_list|()
block|{
name|String
index|[]
name|xyz
init|=
operator|new
name|String
index|[]
block|{
literal|"x"
block|,
literal|"y"
block|,
literal|"z"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayIterator
argument_list|(
name|xyz
argument_list|)
argument_list|,
name|xyz
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|private
specifier|static
class|class
name|ArrayIterator
extends|extends
name|ThreadIterator
block|{
name|Object
index|[]
name|a
decl_stmt|;
name|ArrayIterator
parameter_list|(
name|Object
index|[]
name|a
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doWork
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|put
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End ThreadIteratorTest.java
end_comment

end_unit

