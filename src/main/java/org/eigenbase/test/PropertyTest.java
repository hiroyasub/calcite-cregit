begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|property
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit test for properties system ({@link TriggerableProperties}, {@link  * IntegerProperty} and the like).  *  * @author jhyde  * @version $Id$  * @since July 6, 2005  */
end_comment

begin_class
specifier|public
class|class
name|PropertyTest
extends|extends
name|TestCase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|boolean
index|[]
name|FalseTrue
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|testInt
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// Default value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|props
operator|.
name|intProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|789
argument_list|,
name|props
operator|.
name|intProp
operator|.
name|get
argument_list|(
literal|789
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|prev
init|=
name|props
operator|.
name|intProp
operator|.
name|set
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|props
operator|.
name|intProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|props
operator|.
name|intProp
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntNoDefault
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// As above, on property with no default value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|props
operator|.
name|intPropNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|props
operator|.
name|intPropNoDefault
operator|.
name|get
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|prev
init|=
name|props
operator|.
name|intPropNoDefault
operator|.
name|set
argument_list|(
operator|-
literal|56
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|56
argument_list|,
name|props
operator|.
name|intPropNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|56
argument_list|,
name|props
operator|.
name|intPropNoDefault
operator|.
name|get
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second time set returns the previous value.
name|prev
operator|=
name|props
operator|.
name|intPropNoDefault
operator|.
name|set
argument_list|(
literal|12345
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|56
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|props
operator|.
name|intPropNoDefault
operator|.
name|setString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
specifier|public
name|void
name|testIntLimit
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// Default value.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Specified default value w/limit
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|(
literal|51
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|prev
init|=
name|props
operator|.
name|intPropLimit
operator|.
name|set
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|props
operator|.
name|intPropLimit
operator|.
name|set
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|props
operator|.
name|intPropLimit
operator|.
name|set
argument_list|(
operator|-
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// set string isn't limited until read
name|props
operator|.
name|intPropLimit
operator|.
name|setString
argument_list|(
literal|"99"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|intPropLimit
operator|.
name|setString
argument_list|(
literal|"-2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|props
operator|.
name|intPropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|props
operator|.
name|intPropLimit
operator|.
name|setString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testIntLimitNoDefault
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|props
operator|.
name|intPropLimitNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|intPropLimitNoDefault2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// prev is "no value" == 0; set value is limited
name|int
name|prev
init|=
name|props
operator|.
name|intPropLimitNoDefault
operator|.
name|set
argument_list|(
operator|-
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|props
operator|.
name|intPropLimitNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|props
operator|.
name|intPropLimitNoDefault
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// prev is "no value" == 1; set value is limited
name|prev
operator|=
name|props
operator|.
name|intPropLimitNoDefault2
operator|.
name|set
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|props
operator|.
name|intPropLimitNoDefault2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|props
operator|.
name|intPropLimitNoDefault2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|prev
operator|=
name|props
operator|.
name|intPropLimitNoDefault
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|props
operator|.
name|intPropLimitNoDefault
operator|.
name|setString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testDouble
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// Default value.
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|3.14
argument_list|,
name|props
operator|.
name|doubleProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.789
argument_list|,
name|props
operator|.
name|doubleProp
operator|.
name|get
argument_list|(
literal|.789
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|prev
init|=
name|props
operator|.
name|doubleProp
operator|.
name|set
argument_list|(
literal|.8
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.8
argument_list|,
name|props
operator|.
name|doubleProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|3.14
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|props
operator|.
name|doubleProp
operator|.
name|set
argument_list|(
literal|.0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.8
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoubleNoDefault
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// As above, on property with no default value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.0
argument_list|,
name|props
operator|.
name|doublePropNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.17
argument_list|,
name|props
operator|.
name|doublePropNoDefault
operator|.
name|get
argument_list|(
literal|.17
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|prev
init|=
name|props
operator|.
name|doublePropNoDefault
operator|.
name|set
argument_list|(
operator|-
literal|.56
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.0
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|.56
argument_list|,
name|props
operator|.
name|doublePropNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|.56
argument_list|,
name|props
operator|.
name|doublePropNoDefault
operator|.
name|get
argument_list|(
literal|.17
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second time set returns the previous value.
name|prev
operator|=
name|props
operator|.
name|doublePropNoDefault
operator|.
name|set
argument_list|(
literal|.12345
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|.56
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|props
operator|.
name|doublePropNoDefault
operator|.
name|setString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
specifier|public
name|void
name|testDoubleLimit
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// Default value.
name|assertEquals
argument_list|(
name|Math
operator|.
name|E
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Specified default value w/limit
name|assertEquals
argument_list|(
literal|1.1
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|(
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|PI
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|(
literal|5.1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
name|Math
operator|.
name|PI
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|(
operator|-
literal|4.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|PI
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
name|Math
operator|.
name|PI
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|(
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|prev
init|=
name|props
operator|.
name|doublePropLimit
operator|.
name|set
argument_list|(
literal|2.5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2.5
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|E
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|props
operator|.
name|doublePropLimit
operator|.
name|set
argument_list|(
literal|10.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|PI
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.5
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|props
operator|.
name|doublePropLimit
operator|.
name|set
argument_list|(
operator|-
literal|10.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
name|Math
operator|.
name|PI
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|PI
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// set string isn't limited until read
name|props
operator|.
name|doublePropLimit
operator|.
name|setString
argument_list|(
literal|"99.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|PI
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|doublePropLimit
operator|.
name|setString
argument_list|(
literal|"-20.2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
name|Math
operator|.
name|PI
argument_list|,
name|props
operator|.
name|doublePropLimit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|props
operator|.
name|doublePropLimit
operator|.
name|setString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testDoubleLimitNoDefault
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|props
operator|.
name|doublePropLimitNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|props
operator|.
name|doublePropLimitNoDefault2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// prev is "no value" == 0.0; set value is limited
name|double
name|prev
init|=
name|props
operator|.
name|doublePropLimitNoDefault
operator|.
name|set
argument_list|(
operator|-
literal|100.0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0
argument_list|,
name|props
operator|.
name|doublePropLimitNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0
argument_list|,
name|props
operator|.
name|doublePropLimitNoDefault
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// prev is "no value" == 1.0; set value is limited
name|prev
operator|=
name|props
operator|.
name|doublePropLimitNoDefault2
operator|.
name|set
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.0
argument_list|,
name|props
operator|.
name|doublePropLimitNoDefault2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.0
argument_list|,
name|props
operator|.
name|doublePropLimitNoDefault2
operator|.
name|get
argument_list|(
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
name|prev
operator|=
name|props
operator|.
name|doublePropLimitNoDefault
operator|.
name|set
argument_list|(
operator|-
literal|0.5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|props
operator|.
name|doublePropLimitNoDefault
operator|.
name|setString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testString
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// Default value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|props
operator|.
name|stringProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"xxxxx"
argument_list|,
name|props
operator|.
name|stringProp
operator|.
name|get
argument_list|(
literal|"xxxxx"
argument_list|)
argument_list|)
expr_stmt|;
comment|// First time set returns the default value.
name|String
name|prev
init|=
name|props
operator|.
name|stringProp
operator|.
name|set
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|props
operator|.
name|stringProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Second time set returns the previous value.
name|prev
operator|=
name|props
operator|.
name|stringProp
operator|.
name|set
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|prev
operator|=
name|props
operator|.
name|stringProp
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
specifier|public
name|void
name|testStringNoDefault
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// As above, on property with no default value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|props
operator|.
name|stringPropNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"xx"
argument_list|,
name|props
operator|.
name|stringPropNoDefault
operator|.
name|get
argument_list|(
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|prev
init|=
name|props
operator|.
name|stringPropNoDefault
operator|.
name|set
argument_list|(
literal|"paul"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"paul"
argument_list|,
name|props
operator|.
name|stringPropNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"paul"
argument_list|,
name|props
operator|.
name|stringPropNoDefault
operator|.
name|get
argument_list|(
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second time set returns the previous value.
name|prev
operator|=
name|props
operator|.
name|stringPropNoDefault
operator|.
name|set
argument_list|(
literal|"ringo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"paul"
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|prev
operator|=
name|props
operator|.
name|stringPropNoDefault
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
specifier|public
name|void
name|testBoolean
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// Default value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// First time set returns the default value.
name|boolean
name|prev
init|=
name|props
operator|.
name|booleanProp
operator|.
name|set
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Second time set returns the previous value.
name|prev
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Various values all mean true.
name|String
name|prevString
init|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"Yes"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Leading and trailing spaces are ignored.
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"  yes  "
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"false   "
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"true "
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// All other values mean false.
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"wombat"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prevString
operator|=
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|props
operator|.
name|booleanProp
operator|.
name|setString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
specifier|public
name|void
name|testBooleanNoDefault
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
comment|// As above, on property with no default value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanPropNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanPropNoDefault
operator|.
name|get
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|props
operator|.
name|booleanPropNoDefault
operator|.
name|get
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|prev
init|=
name|props
operator|.
name|booleanPropNoDefault
operator|.
name|set
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanPropNoDefault
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|props
operator|.
name|booleanPropNoDefault
operator|.
name|get
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second time set returns the previous value.
name|prev
operator|=
name|props
operator|.
name|booleanPropNoDefault
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Setting null is not OK.
try|try
block|{
name|props
operator|.
name|booleanPropNoDefault
operator|.
name|setString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
specifier|public
name|void
name|testTrigger
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|ints
init|=
block|{
literal|0
block|}
decl_stmt|;
specifier|final
name|Trigger
name|trigger
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|VetoRT
block|{
name|int
name|intValue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|intValue
operator|>
literal|10
condition|)
block|{
name|ints
index|[
literal|0
index|]
operator|=
name|intValue
expr_stmt|;
block|}
if|if
condition|(
name|intValue
operator|>
literal|100
condition|)
block|{
throw|throw
operator|new
name|VetoRT
argument_list|(
literal|"too big"
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|props
operator|.
name|intProp
operator|.
name|addTrigger
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|props
operator|.
name|intProp
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ints
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// unchanged
name|props
operator|.
name|intProp
operator|.
name|set
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|ints
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// changed by trigger
try|try
block|{
name|props
operator|.
name|intProp
operator|.
name|set
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expecting exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Trigger
operator|.
name|VetoRT
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"too big"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|props
operator|.
name|intProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// change was rolled back
block|}
comment|/**      * Tests that trigger is called after the value is changed      */
specifier|public
name|void
name|testValueChange
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"test.mondrian.properties.change.value"
decl_stmt|;
name|BooleanProperty
name|boolProp
init|=
operator|new
name|BooleanProperty
argument_list|(
name|props
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check property value NOT false"
argument_list|,
operator|!
name|boolProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// set via the 'set' method
specifier|final
name|boolean
name|prevBoolean
init|=
name|boolProp
operator|.
name|set
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|prevBoolean
argument_list|)
expr_stmt|;
comment|// now explicitly set the property
specifier|final
name|Object
name|prevObject
init|=
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|prevObject
argument_list|)
expr_stmt|;
name|String
name|v
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check property value is null"
argument_list|,
name|v
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check property value is true"
argument_list|,
operator|(
operator|!
name|Boolean
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
specifier|final
name|State
name|state
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|state
operator|.
name|triggerCalled
operator|=
literal|false
expr_stmt|;
name|state
operator|.
name|triggerValue
operator|=
literal|null
expr_stmt|;
specifier|final
name|Trigger
name|trigger
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|PRIMARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|state
operator|.
name|triggerCalled
operator|=
literal|true
expr_stmt|;
name|state
operator|.
name|triggerValue
operator|=
name|value
expr_stmt|;
block|}
block|}
decl_stmt|;
name|boolProp
operator|.
name|addTrigger
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|String
name|falseStr
init|=
literal|"false"
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|falseStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check trigger was called"
argument_list|,
operator|!
name|state
operator|.
name|triggerCalled
argument_list|)
expr_stmt|;
name|String
name|trueStr
init|=
literal|"true"
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|trueStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check trigger was NOT called"
argument_list|,
name|state
operator|.
name|triggerCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check trigger value was null"
argument_list|,
operator|(
name|state
operator|.
name|triggerValue
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check trigger value is NOT correct"
argument_list|,
name|state
operator|.
name|triggerValue
operator|.
name|equals
argument_list|(
name|trueStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that triggers are called in the correct order.      */
specifier|public
name|void
name|testTriggerCallOrder
parameter_list|()
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"test.mondrian.properties.call.order"
decl_stmt|;
name|BooleanProperty
name|boolProp
init|=
operator|new
name|BooleanProperty
argument_list|(
name|props
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|State2
name|state
init|=
operator|new
name|State2
argument_list|()
decl_stmt|;
name|state
operator|.
name|callCounter
operator|=
literal|0
expr_stmt|;
comment|// now explicitly set the property
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|String
name|v
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check property value is null"
argument_list|,
operator|(
name|v
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check property value is true"
argument_list|,
operator|(
operator|!
name|Boolean
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// primaryOne
name|Trigger
name|primaryOneTrigger
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|PRIMARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|state
operator|.
name|primaryOne
operator|=
name|state
operator|.
name|callCounter
operator|++
expr_stmt|;
block|}
block|}
decl_stmt|;
name|boolProp
operator|.
name|addTrigger
argument_list|(
name|primaryOneTrigger
argument_list|)
expr_stmt|;
comment|// secondaryOne
name|Trigger
name|secondaryOneTrigger
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|SECONDARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|state
operator|.
name|secondaryOne
operator|=
name|state
operator|.
name|callCounter
operator|++
expr_stmt|;
block|}
block|}
decl_stmt|;
name|boolProp
operator|.
name|addTrigger
argument_list|(
name|secondaryOneTrigger
argument_list|)
expr_stmt|;
comment|// tertiaryOne
name|Trigger
name|tertiaryOneTrigger
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|TERTIARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|state
operator|.
name|tertiaryOne
operator|=
name|state
operator|.
name|callCounter
operator|++
expr_stmt|;
block|}
block|}
decl_stmt|;
name|boolProp
operator|.
name|addTrigger
argument_list|(
name|tertiaryOneTrigger
argument_list|)
expr_stmt|;
comment|// tertiaryTwo
name|Trigger
name|tertiaryTwoTrigger
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|TERTIARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|state
operator|.
name|tertiaryTwo
operator|=
name|state
operator|.
name|callCounter
operator|++
expr_stmt|;
block|}
block|}
decl_stmt|;
name|boolProp
operator|.
name|addTrigger
argument_list|(
name|tertiaryTwoTrigger
argument_list|)
expr_stmt|;
comment|// secondaryTwo
name|Trigger
name|secondaryTwoTrigger
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|SECONDARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|state
operator|.
name|secondaryTwo
operator|=
name|state
operator|.
name|callCounter
operator|++
expr_stmt|;
block|}
block|}
decl_stmt|;
name|boolProp
operator|.
name|addTrigger
argument_list|(
name|secondaryTwoTrigger
argument_list|)
expr_stmt|;
comment|// primaryTwo
name|Trigger
name|primaryTwoTrigger
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|PRIMARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|state
operator|.
name|primaryTwo
operator|=
name|state
operator|.
name|callCounter
operator|++
expr_stmt|;
block|}
block|}
decl_stmt|;
name|boolProp
operator|.
name|addTrigger
argument_list|(
name|primaryTwoTrigger
argument_list|)
expr_stmt|;
name|String
name|falseStr
init|=
literal|"false"
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|falseStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check trigger was called"
argument_list|,
operator|(
name|state
operator|.
name|callCounter
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
name|String
name|trueStr
init|=
literal|"true"
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|trueStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check trigger was NOT called"
argument_list|,
operator|(
name|state
operator|.
name|callCounter
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check triggers was NOT called correct number of times"
argument_list|,
operator|(
name|state
operator|.
name|callCounter
operator|==
literal|6
operator|)
argument_list|)
expr_stmt|;
comment|// now make sure that primary are called before secondary which are
comment|// before tertiary
name|assertTrue
argument_list|(
literal|"Check primaryOne> secondaryOne"
argument_list|,
operator|(
name|state
operator|.
name|primaryOne
operator|<
name|state
operator|.
name|secondaryOne
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check primaryOne> secondaryTwo"
argument_list|,
operator|(
name|state
operator|.
name|primaryOne
operator|<
name|state
operator|.
name|secondaryTwo
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check primaryOne> tertiaryOne"
argument_list|,
operator|(
name|state
operator|.
name|primaryOne
operator|<
name|state
operator|.
name|tertiaryOne
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check primaryOne> tertiaryTwo"
argument_list|,
operator|(
name|state
operator|.
name|primaryOne
operator|<
name|state
operator|.
name|tertiaryTwo
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check primaryTwo> secondaryOne"
argument_list|,
operator|(
name|state
operator|.
name|primaryTwo
operator|<
name|state
operator|.
name|secondaryOne
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check primaryTwo> secondaryTwo"
argument_list|,
operator|(
name|state
operator|.
name|primaryTwo
operator|<
name|state
operator|.
name|secondaryTwo
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check primaryTwo> tertiaryOne"
argument_list|,
operator|(
name|state
operator|.
name|primaryTwo
operator|<
name|state
operator|.
name|tertiaryOne
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check primaryTwo> tertiaryTwo"
argument_list|,
operator|(
name|state
operator|.
name|primaryTwo
operator|<
name|state
operator|.
name|tertiaryTwo
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check secondaryOne> tertiaryOne"
argument_list|,
operator|(
name|state
operator|.
name|secondaryOne
operator|<
name|state
operator|.
name|tertiaryOne
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check secondaryOne> tertiaryTwo"
argument_list|,
operator|(
name|state
operator|.
name|secondaryOne
operator|<
name|state
operator|.
name|tertiaryTwo
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check secondaryTwo> tertiaryOne"
argument_list|,
operator|(
name|state
operator|.
name|secondaryTwo
operator|<
name|state
operator|.
name|tertiaryOne
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check secondaryTwo> tertiaryTwo"
argument_list|,
operator|(
name|state
operator|.
name|secondaryTwo
operator|<
name|state
operator|.
name|tertiaryTwo
operator|)
argument_list|)
expr_stmt|;
comment|// remove some of the triggers
name|boolProp
operator|.
name|removeTrigger
argument_list|(
name|primaryTwoTrigger
argument_list|)
expr_stmt|;
name|boolProp
operator|.
name|removeTrigger
argument_list|(
name|secondaryTwoTrigger
argument_list|)
expr_stmt|;
name|boolProp
operator|.
name|removeTrigger
argument_list|(
name|tertiaryTwoTrigger
argument_list|)
expr_stmt|;
comment|// reset
name|state
operator|.
name|callCounter
operator|=
literal|0
expr_stmt|;
name|state
operator|.
name|primaryOne
operator|=
literal|0
expr_stmt|;
name|state
operator|.
name|primaryTwo
operator|=
literal|0
expr_stmt|;
name|state
operator|.
name|secondaryOne
operator|=
literal|0
expr_stmt|;
name|state
operator|.
name|secondaryTwo
operator|=
literal|0
expr_stmt|;
name|state
operator|.
name|tertiaryOne
operator|=
literal|0
expr_stmt|;
name|state
operator|.
name|tertiaryTwo
operator|=
literal|0
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|falseStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check trigger was NOT called"
argument_list|,
operator|(
name|state
operator|.
name|callCounter
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check triggers was NOT called correct number of times"
argument_list|,
operator|(
name|state
operator|.
name|callCounter
operator|==
literal|3
operator|)
argument_list|)
expr_stmt|;
comment|// now make sure that primary are called before secondary which are
comment|// before tertiary
name|assertTrue
argument_list|(
literal|"Check primaryOne> secondaryOne"
argument_list|,
operator|(
name|state
operator|.
name|primaryOne
operator|<
name|state
operator|.
name|secondaryOne
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check primaryOne> tertiaryOne"
argument_list|,
operator|(
name|state
operator|.
name|primaryOne
operator|<
name|state
operator|.
name|tertiaryOne
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check secondaryOne> tertiaryOne"
argument_list|,
operator|(
name|state
operator|.
name|secondaryOne
operator|<
name|state
operator|.
name|tertiaryOne
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVetoChangeValue
parameter_list|()
throws|throws
name|Exception
block|{
name|checkVetoChangeValue
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVetoChangeValuePersistent
parameter_list|()
throws|throws
name|Exception
block|{
name|checkVetoChangeValue
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that one can veto a property change.      *      * @param persistent Whether to make strong references to triggers, to      * prevent them from being garbage collected      * @param save Whether to keep a pointer to each trigger on the stack, to      * prevent them from being garbage collected      */
specifier|private
name|void
name|checkVetoChangeValue
parameter_list|(
specifier|final
name|boolean
name|persistent
parameter_list|,
name|boolean
name|save
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MyProperties
name|props
init|=
operator|new
name|MyProperties
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"test.mondrian.properties.veto.change.value"
decl_stmt|;
name|IntegerProperty
name|intProp
init|=
operator|new
name|IntegerProperty
argument_list|(
name|props
argument_list|,
name|path
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check property value NOT false"
argument_list|,
operator|(
name|intProp
operator|.
name|get
argument_list|()
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// now explicitly set the property
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|String
name|v
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Check property value is null"
argument_list|,
operator|(
name|v
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Check property value is -1"
argument_list|,
operator|(
name|Integer
operator|.
name|decode
argument_list|(
name|v
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
specifier|final
name|State3
name|state
init|=
operator|new
name|State3
argument_list|()
decl_stmt|;
name|state
operator|.
name|callCounter
operator|=
literal|0
expr_stmt|;
comment|// Add a trigger. Keep it on the stack to prevent it from being
comment|// garbage-collected.
specifier|final
name|Trigger
name|trigger1
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|PRIMARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|state
operator|.
name|triggerCalled
operator|=
literal|true
expr_stmt|;
name|state
operator|.
name|triggerValue
operator|=
name|value
expr_stmt|;
block|}
block|}
decl_stmt|;
name|intProp
operator|.
name|addTrigger
argument_list|(
name|trigger1
argument_list|)
expr_stmt|;
name|SoftReference
argument_list|<
name|Trigger
argument_list|>
name|ref1
init|=
operator|new
name|SoftReference
argument_list|<
name|Trigger
argument_list|>
argument_list|(
name|trigger1
argument_list|)
decl_stmt|;
specifier|final
name|Trigger
name|trigger2
init|=
operator|new
name|Trigger
argument_list|()
block|{
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
specifier|public
name|int
name|phase
parameter_list|()
block|{
return|return
name|Trigger
operator|.
name|SECONDARY_PHASE
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|VetoRT
block|{
comment|// even numbers are rejected
name|state
operator|.
name|callCounter
operator|++
expr_stmt|;
name|int
name|ival
init|=
name|Integer
operator|.
name|decode
argument_list|(
name|value
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ival
operator|%
literal|2
operator|)
operator|==
literal|0
condition|)
block|{
comment|// throw on even
throw|throw
operator|new
name|VetoRT
argument_list|(
literal|"have a nice day"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// ok
block|}
block|}
block|}
decl_stmt|;
name|intProp
operator|.
name|addTrigger
argument_list|(
name|trigger2
argument_list|)
expr_stmt|;
name|SoftReference
argument_list|<
name|Trigger
argument_list|>
name|ref2
init|=
operator|new
name|SoftReference
argument_list|<
name|Trigger
argument_list|>
argument_list|(
name|trigger2
argument_list|)
decl_stmt|;
comment|// Holder object prevents triggers from being garbage-collected even
comment|// if persistent=false.
name|Object
name|saver
decl_stmt|;
if|if
condition|(
name|save
condition|)
block|{
name|saver
operator|=
operator|new
name|Trigger
index|[]
block|{
name|trigger1
block|,
name|trigger2
block|}
expr_stmt|;
block|}
else|else
block|{
name|saver
operator|=
literal|"dummy"
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// reset values
name|state
operator|.
name|triggerCalled
operator|=
literal|false
expr_stmt|;
name|state
operator|.
name|triggerValue
operator|=
literal|null
expr_stmt|;
name|boolean
name|isEven
init|=
operator|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
operator|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// If triggers have been gc'ed - only possible if persistent =
comment|// save = false - then we can't guarantee that state has been
comment|// changed.
if|if
condition|(
operator|!
name|persistent
operator|&&
operator|!
name|save
operator|&&
operator|(
operator|(
name|ref1
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|ref2
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|)
operator|)
condition|)
block|{
continue|continue;
block|}
comment|// should only be here if odd
if|if
condition|(
name|isEven
condition|)
block|{
name|fail
argument_list|(
literal|"Did not pass odd number: "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|val
init|=
name|Integer
operator|.
name|decode
argument_list|(
name|state
operator|.
name|triggerValue
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Odd counter not value"
argument_list|,
operator|(
name|i
operator|==
name|val
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Trigger
operator|.
name|VetoRT
name|ex
parameter_list|)
block|{
comment|// If triggers have been gc'ed - only possible if persistent =
comment|// save = false - then we can't guarantee that state has been
comment|// changed.
if|if
condition|(
operator|!
name|persistent
operator|&&
operator|!
name|save
operator|&&
operator|(
operator|(
name|ref1
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|ref2
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|)
operator|)
condition|)
block|{
continue|continue;
block|}
comment|// Trigger rejects even numbers so if even its ok
if|if
condition|(
operator|!
name|isEven
condition|)
block|{
name|fail
argument_list|(
literal|"Did not reject even number: "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|val
init|=
name|Integer
operator|.
name|decode
argument_list|(
name|state
operator|.
name|triggerValue
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// the property value was reset to the previous value of "i"
comment|// so we add "1" to it to get the current value.
if|if
condition|(
name|i
operator|!=
operator|(
name|val
operator|+
literal|1
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Even counter not value plus one: "
operator|+
name|i
operator|+
literal|", "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Refer to the saver object at the end of the routine so that it
comment|// cannot be garbage-collected. (Some VMs try to be smart.)
name|assertTrue
argument_list|(
name|saver
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs {@link #testVetoChangeValue} many times, to test concurrency.      */
specifier|public
name|void
name|testVetoChangeValueManyTimes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|count
init|=
literal|10000
decl_stmt|;
for|for
control|(
name|boolean
name|persistent
range|:
name|FalseTrue
control|)
block|{
for|for
control|(
name|boolean
name|save
range|:
name|FalseTrue
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|checkVetoChangeValue
argument_list|(
name|persistent
argument_list|,
name|save
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|private
specifier|static
class|class
name|State
block|{
name|boolean
name|triggerCalled
decl_stmt|;
name|String
name|triggerValue
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|State2
block|{
name|int
name|callCounter
decl_stmt|;
name|int
name|primaryOne
decl_stmt|;
name|int
name|primaryTwo
decl_stmt|;
name|int
name|secondaryOne
decl_stmt|;
name|int
name|secondaryTwo
decl_stmt|;
name|int
name|tertiaryOne
decl_stmt|;
name|int
name|tertiaryTwo
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|State3
block|{
name|int
name|callCounter
decl_stmt|;
name|boolean
name|triggerCalled
decl_stmt|;
name|String
name|triggerValue
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MyProperties
extends|extends
name|TriggerableProperties
block|{
specifier|public
specifier|final
name|IntegerProperty
name|intProp
init|=
operator|new
name|IntegerProperty
argument_list|(
name|this
argument_list|,
literal|"props.int"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|IntegerProperty
name|intPropNoDefault
init|=
operator|new
name|IntegerProperty
argument_list|(
name|this
argument_list|,
literal|"props.int.nodefault"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|IntegerProperty
name|intPropLimit
init|=
operator|new
name|IntegerProperty
argument_list|(
name|this
argument_list|,
literal|"props.int.limit"
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|50
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|IntegerProperty
name|intPropLimitNoDefault
init|=
operator|new
name|IntegerProperty
argument_list|(
name|this
argument_list|,
literal|"props.int.limit.nodefault"
argument_list|,
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|IntegerProperty
name|intPropLimitNoDefault2
init|=
operator|new
name|IntegerProperty
argument_list|(
name|this
argument_list|,
literal|"props.int.limit.nodefault2"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|StringProperty
name|stringProp
init|=
operator|new
name|StringProperty
argument_list|(
name|this
argument_list|,
literal|"props.string"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|StringProperty
name|stringPropNoDefault
init|=
operator|new
name|StringProperty
argument_list|(
name|this
argument_list|,
literal|"props.string.nodefault"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|DoubleProperty
name|doubleProp
init|=
operator|new
name|DoubleProperty
argument_list|(
name|this
argument_list|,
literal|"props.double"
argument_list|,
operator|-
literal|3.14
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|DoubleProperty
name|doublePropNoDefault
init|=
operator|new
name|DoubleProperty
argument_list|(
name|this
argument_list|,
literal|"props.double.nodefault"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|DoubleProperty
name|doublePropLimit
init|=
operator|new
name|DoubleProperty
argument_list|(
name|this
argument_list|,
literal|"props.double.limit"
argument_list|,
name|Math
operator|.
name|E
argument_list|,
operator|-
name|Math
operator|.
name|PI
argument_list|,
name|Math
operator|.
name|PI
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|DoubleProperty
name|doublePropLimitNoDefault
init|=
operator|new
name|DoubleProperty
argument_list|(
name|this
argument_list|,
literal|"props.double.limit.nodefault"
argument_list|,
operator|-
literal|1.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|DoubleProperty
name|doublePropLimitNoDefault2
init|=
operator|new
name|DoubleProperty
argument_list|(
name|this
argument_list|,
literal|"props.double.limit.nodefault2"
argument_list|,
literal|1.0
argument_list|,
literal|10.0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|BooleanProperty
name|booleanProp
init|=
operator|new
name|BooleanProperty
argument_list|(
name|this
argument_list|,
literal|"props.boolean"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|BooleanProperty
name|booleanPropNoDefault
init|=
operator|new
name|BooleanProperty
argument_list|(
name|this
argument_list|,
literal|"props.boolean.nodefault"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End PropertyTest.java
end_comment

end_unit

