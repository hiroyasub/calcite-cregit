begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to DynamoBI Corporation (DynamoBI) under one // or more contributor license agreements.  See the NOTICE file // distributed with this work for additional information // regarding copyright ownership.  DynamoBI licenses this file // to you under the Apache License, Version 2.0 (the // "License"); you may not use this file except in compliance // with the License.  You may obtain a copy of the License at  //   http://www.apache.org/licenses/LICENSE-2.0  // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied.  See the License for the // specific language governing permissions and limitations // under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility to generate a SQL script from validator test.  *  * @author jhyde  * @version $Id$  * @since Nov 10, 2004  */
end_comment

begin_class
specifier|public
class|class
name|SqlTestGen
block|{
comment|//~ Methods ----------------------------------------------------------------
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
operator|new
name|SqlTestGen
argument_list|()
operator|.
name|genValidatorTest
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|genValidatorTest
parameter_list|()
block|{
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|pw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"validatorTest.sql"
argument_list|)
decl_stmt|;
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|Method
index|[]
name|methods
init|=
name|getJunitMethods
argument_list|(
name|SqlValidatorSpooler
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|method
init|=
name|methods
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|SqlValidatorSpooler
name|test
init|=
operator|new
name|SqlValidatorSpooler
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|pw
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
name|method
operator|.
name|invoke
argument_list|(
name|test
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|==
literal|null
assert|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|pw
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Returns a list of all of the Junit methods in a given class.      */
specifier|private
specifier|static
name|Method
index|[]
name|getJunitMethods
parameter_list|(
name|Class
argument_list|<
name|SqlValidatorSpooler
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|TYPE
operator|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Method
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Subversive subclass, which spools restuls to a writer rather than running      * tests. It is not a valid JUnit test because it does not have a public      * constructor.      */
specifier|private
specifier|static
class|class
name|SqlValidatorSpooler
extends|extends
name|SqlValidatorTest
block|{
specifier|private
specifier|final
name|PrintWriter
name|pw
decl_stmt|;
specifier|private
name|SqlValidatorSpooler
parameter_list|(
name|String
name|testName
parameter_list|,
name|PrintWriter
name|pw
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|)
expr_stmt|;
name|this
operator|.
name|pw
operator|=
name|pw
expr_stmt|;
block|}
specifier|public
name|SqlValidatorTestCase
operator|.
name|Tester
name|getTester
parameter_list|(
name|SqlConformance
name|conformance
parameter_list|)
block|{
return|return
operator|new
name|TesterImpl
argument_list|(
name|conformance
argument_list|)
block|{
specifier|public
name|SqlValidator
name|getValidator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|assertExceptionIsThrown
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedMsgPattern
parameter_list|)
block|{
if|if
condition|(
name|expectedMsgPattern
operator|==
literal|null
condition|)
block|{
comment|// This SQL statement is supposed to succeed.
comment|// Generate it to the file, so we can see what
comment|// output it produces.
name|pw
operator|.
name|println
argument_list|(
literal|"-- "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Do nothing. We know that this fails the validator
comment|// test, so we don't learn anything by having it fail
comment|// from SQL.
block|}
block|}
specifier|public
name|RelDataType
name|getColumnType
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|checkType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
comment|// We could generate the SQL -- or maybe describe -- but
comment|// ignore it for now.
block|}
specifier|public
name|void
name|checkCollation
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedCollationName
parameter_list|,
name|SqlCollation
operator|.
name|Coercibility
name|expectedCoercibility
parameter_list|)
block|{
comment|// We could generate the SQL -- or maybe describe -- but
comment|// ignore it for now.
block|}
specifier|public
name|void
name|checkCharset
parameter_list|(
name|String
name|sql
parameter_list|,
name|Charset
name|expectedCharset
parameter_list|)
block|{
comment|// We could generate the SQL -- or maybe describe -- but
comment|// ignore it for now.
block|}
block|}
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlTestGen.java
end_comment

end_unit

