begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|innodb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|schema
operator|.
name|TableDef
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Implementation of a {@link org.apache.calcite.rel.core.Filter}  * relational expression for an InnoDB data source.  */
end_comment

begin_class
specifier|public
class|class
name|InnodbFilter
extends|extends
name|Filter
implements|implements
name|InnodbRel
block|{
specifier|private
specifier|final
name|TableDef
name|tableDef
decl_stmt|;
specifier|public
specifier|final
name|IndexCondition
name|indexCondition
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|String
name|forceIndexName
decl_stmt|;
comment|/** Creates an InnodbFilter; but use {@link #create} if possible. */
specifier|private
name|InnodbFilter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|IndexCondition
name|indexCondition
parameter_list|,
name|TableDef
name|tableDef
parameter_list|,
annotation|@
name|Nullable
name|String
name|forceIndexName
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableDef
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tableDef
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexCondition
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|indexCondition
argument_list|)
expr_stmt|;
name|this
operator|.
name|forceIndexName
operator|=
name|forceIndexName
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|InnodbRel
operator|.
name|CONVENTION
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|input
operator|.
name|getConvention
argument_list|()
assert|;
block|}
comment|/** Creates an InnodbFilter. */
specifier|public
specifier|static
name|InnodbFilter
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|IndexCondition
name|indexCondition
parameter_list|,
name|TableDef
name|tableDef
parameter_list|,
annotation|@
name|Nullable
name|String
name|forceIndexName
parameter_list|)
block|{
return|return
operator|new
name|InnodbFilter
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|,
name|indexCondition
argument_list|,
name|tableDef
argument_list|,
name|forceIndexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|0.1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InnodbFilter
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
return|return
operator|new
name|InnodbFilter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|,
name|indexCondition
argument_list|,
name|tableDef
argument_list|,
name|forceIndexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|implementor
operator|.
name|setIndexCondition
argument_list|(
name|indexCondition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|input
argument_list|(
literal|"input"
argument_list|,
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|itemIf
argument_list|(
literal|"condition"
argument_list|,
name|indexCondition
argument_list|,
name|indexCondition
operator|.
name|canPushDown
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pw
return|;
block|}
comment|/**    * Returns the resulting collation by the primary or secondary    * indexes after filtering.    *    * @return the implicit collation based on the natural sorting by specific index    */
specifier|public
name|RelCollation
name|getImplicitCollation
parameter_list|()
block|{
return|return
name|indexCondition
operator|.
name|getImplicitCollation
argument_list|()
return|;
block|}
block|}
end_class

end_unit

