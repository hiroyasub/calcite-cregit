begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|innodb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|comparator
operator|.
name|ComparisonOperator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_comment
comment|/**  * Index condition.  *  *<p>Works in the following places:  *  *<ul>  *<li>In {@link InnodbFilterTranslator}, it is the index condition  * to push down according to {@link InnodbFilter} by planner rule.  *  *<li>In {@link InnodbTableScan}, it represents a full scan by a  * primary key or a secondary key.  *  *<li>In code generation, it indicates the storage engine which index  * to use and the associated condition if present.  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|IndexCondition
block|{
specifier|static
specifier|final
name|IndexCondition
name|EMPTY_CONDITION
init|=
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ComparisonOperator
operator|.
name|NOP
argument_list|,
name|ComparisonOperator
operator|.
name|NOP
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Field names per row type. */
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexName
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|indexColumnNames
decl_stmt|;
specifier|private
specifier|final
name|RelCollation
name|implicitCollation
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|pushDownConditions
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|remainderConditions
decl_stmt|;
specifier|private
specifier|final
name|QueryType
name|queryType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|pointQueryKey
decl_stmt|;
specifier|private
specifier|final
name|ComparisonOperator
name|rangeQueryLowerOp
decl_stmt|;
specifier|private
specifier|final
name|ComparisonOperator
name|rangeQueryUpperOp
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryLowerKey
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryUpperKey
decl_stmt|;
comment|/** Constructor that assigns all fields. All other constructors call this. */
specifier|private
name|IndexCondition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|String
name|indexName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indexColumnNames
parameter_list|,
name|RelCollation
name|implicitCollation
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|pushDownConditions
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|remainderConditions
parameter_list|,
name|QueryType
name|queryType
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|pointQueryKey
parameter_list|,
name|ComparisonOperator
name|rangeQueryLowerOp
parameter_list|,
name|ComparisonOperator
name|rangeQueryUpperOp
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryLowerKey
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryUpperKey
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|indexColumnNames
operator|=
name|indexColumnNames
expr_stmt|;
name|this
operator|.
name|implicitCollation
operator|=
name|implicitCollation
operator|!=
literal|null
condition|?
name|implicitCollation
else|:
name|deduceImplicitCollation
argument_list|(
name|fieldNames
argument_list|,
name|indexColumnNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|pushDownConditions
operator|=
name|pushDownConditions
operator|==
literal|null
condition|?
name|ImmutableList
operator|.
name|of
argument_list|()
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|pushDownConditions
argument_list|)
expr_stmt|;
name|this
operator|.
name|remainderConditions
operator|=
name|remainderConditions
operator|==
literal|null
condition|?
name|ImmutableList
operator|.
name|of
argument_list|()
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|remainderConditions
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryType
operator|=
name|queryType
expr_stmt|;
name|this
operator|.
name|pointQueryKey
operator|=
name|pointQueryKey
expr_stmt|;
name|this
operator|.
name|rangeQueryLowerOp
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rangeQueryLowerOp
argument_list|)
expr_stmt|;
name|this
operator|.
name|rangeQueryUpperOp
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rangeQueryUpperOp
argument_list|)
expr_stmt|;
name|this
operator|.
name|rangeQueryLowerKey
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rangeQueryLowerKey
argument_list|)
expr_stmt|;
name|this
operator|.
name|rangeQueryUpperKey
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rangeQueryUpperKey
argument_list|)
expr_stmt|;
block|}
specifier|static
name|IndexCondition
name|create
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|String
name|indexName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indexColumnNames
parameter_list|,
name|QueryType
name|queryType
parameter_list|)
block|{
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|queryType
argument_list|,
literal|null
argument_list|,
name|ComparisonOperator
operator|.
name|NOP
argument_list|,
name|ComparisonOperator
operator|.
name|NOP
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new instance for {@link InnodbFilterTranslator} to build    * index condition which can be pushed down.    */
specifier|static
name|IndexCondition
name|create
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|String
name|indexName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indexColumnNames
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|pushDownConditions
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|remainderConditions
parameter_list|)
block|{
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
literal|null
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ComparisonOperator
operator|.
name|NOP
argument_list|,
name|ComparisonOperator
operator|.
name|NOP
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new instance for code generation to build query parameters    * for underlying storage engine<code>Innodb-java-reader</code>.    */
specifier|public
specifier|static
name|IndexCondition
name|create
parameter_list|(
name|String
name|indexName
parameter_list|,
name|QueryType
name|queryType
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|pointQueryKey
parameter_list|,
name|ComparisonOperator
name|rangeQueryLowerOp
parameter_list|,
name|ComparisonOperator
name|rangeQueryUpperOp
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryLowerKey
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryUpperKey
parameter_list|)
block|{
return|return
operator|new
name|IndexCondition
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|indexName
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
comment|/** Returns whether there are any push down conditions. */
name|boolean
name|canPushDown
parameter_list|()
block|{
return|return
operator|!
name|pushDownConditions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|RelCollation
name|getImplicitCollation
parameter_list|()
block|{
return|return
name|implicitCollation
return|;
block|}
comment|/**    * Infers the implicit correlation from the index.    *    * @param indexColumnNames index column names    * @return the collation of the filtered results    */
specifier|private
specifier|static
name|RelCollation
name|deduceImplicitCollation
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indexColumnNames
parameter_list|)
block|{
name|checkState
argument_list|(
name|fieldNames
operator|!=
literal|null
argument_list|,
literal|"field names cannot be null"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|keyCollations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|indexColumnNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|keyColumnName
range|:
name|indexColumnNames
control|)
block|{
name|int
name|fieldIndex
init|=
name|fieldNames
operator|.
name|indexOf
argument_list|(
name|keyColumnName
argument_list|)
decl_stmt|;
name|keyCollations
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|fieldIndex
argument_list|,
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|RelCollations
operator|.
name|of
argument_list|(
name|keyCollations
argument_list|)
return|;
block|}
specifier|public
name|IndexCondition
name|withFieldNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|fieldNames
argument_list|,
name|this
operator|.
name|fieldNames
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|indexName
return|;
block|}
specifier|public
name|IndexCondition
name|withIndexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|indexName
argument_list|,
name|this
operator|.
name|indexName
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|IndexCondition
name|withIndexColumnNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|indexColumnNames
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|indexColumnNames
argument_list|,
name|this
operator|.
name|indexColumnNames
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|getPushDownConditions
parameter_list|()
block|{
return|return
name|pushDownConditions
return|;
block|}
specifier|public
name|IndexCondition
name|withPushDownConditions
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|pushDownConditions
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|pushDownConditions
argument_list|,
name|this
operator|.
name|pushDownConditions
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|getRemainderConditions
parameter_list|()
block|{
return|return
name|remainderConditions
return|;
block|}
specifier|public
name|IndexCondition
name|withRemainderConditions
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|remainderConditions
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|remainderConditions
argument_list|,
name|this
operator|.
name|remainderConditions
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|QueryType
name|getQueryType
parameter_list|()
block|{
return|return
name|queryType
return|;
block|}
specifier|public
name|IndexCondition
name|withQueryType
parameter_list|(
name|QueryType
name|queryType
parameter_list|)
block|{
if|if
condition|(
name|queryType
operator|==
name|this
operator|.
name|queryType
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getPointQueryKey
parameter_list|()
block|{
return|return
name|pointQueryKey
return|;
block|}
specifier|public
name|IndexCondition
name|withPointQueryKey
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|pointQueryKey
parameter_list|)
block|{
if|if
condition|(
name|pointQueryKey
operator|==
name|this
operator|.
name|pointQueryKey
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|ComparisonOperator
name|getRangeQueryLowerOp
parameter_list|()
block|{
return|return
name|rangeQueryLowerOp
return|;
block|}
specifier|public
name|IndexCondition
name|withRangeQueryLowerOp
parameter_list|(
name|ComparisonOperator
name|rangeQueryLowerOp
parameter_list|)
block|{
if|if
condition|(
name|rangeQueryLowerOp
operator|==
name|this
operator|.
name|rangeQueryLowerOp
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|ComparisonOperator
name|getRangeQueryUpperOp
parameter_list|()
block|{
return|return
name|rangeQueryUpperOp
return|;
block|}
specifier|public
name|IndexCondition
name|withRangeQueryUpperOp
parameter_list|(
name|ComparisonOperator
name|rangeQueryUpperOp
parameter_list|)
block|{
if|if
condition|(
name|rangeQueryUpperOp
operator|==
name|this
operator|.
name|rangeQueryUpperOp
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getRangeQueryLowerKey
parameter_list|()
block|{
return|return
name|rangeQueryLowerKey
return|;
block|}
specifier|public
name|IndexCondition
name|withRangeQueryLowerKey
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryLowerKey
parameter_list|)
block|{
if|if
condition|(
name|rangeQueryLowerKey
operator|==
name|this
operator|.
name|rangeQueryLowerKey
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getRangeQueryUpperKey
parameter_list|()
block|{
return|return
name|rangeQueryUpperKey
return|;
block|}
specifier|public
name|IndexCondition
name|withRangeQueryUpperKey
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryUpperKey
parameter_list|)
block|{
if|if
condition|(
name|rangeQueryUpperKey
operator|==
name|this
operator|.
name|rangeQueryUpperKey
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|IndexCondition
argument_list|(
name|fieldNames
argument_list|,
name|indexName
argument_list|,
name|indexColumnNames
argument_list|,
name|implicitCollation
argument_list|,
name|pushDownConditions
argument_list|,
name|remainderConditions
argument_list|,
name|queryType
argument_list|,
name|pointQueryKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryUpperKey
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|nameMatch
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|indexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|queryType
argument_list|)
operator|.
name|append
argument_list|(
literal|", index="
argument_list|)
operator|.
name|append
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryType
operator|==
name|QueryType
operator|.
name|PK_POINT_QUERY
operator|||
name|queryType
operator|==
name|QueryType
operator|.
name|SK_POINT_QUERY
condition|)
block|{
name|checkState
argument_list|(
name|pointQueryKey
operator|.
name|size
argument_list|()
operator|==
name|indexColumnNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|builder
argument_list|,
name|indexColumnNames
argument_list|,
name|pointQueryKey
argument_list|,
literal|"="
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|rangeQueryLowerKey
argument_list|)
condition|)
block|{
name|append
argument_list|(
name|builder
argument_list|,
name|indexColumnNames
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryLowerOp
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|rangeQueryUpperKey
argument_list|)
condition|)
block|{
name|append
argument_list|(
name|builder
argument_list|,
name|indexColumnNames
argument_list|,
name|rangeQueryUpperKey
argument_list|,
name|rangeQueryUpperOp
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|append
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keyColumnNames
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|key
parameter_list|,
name|String
name|op
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|value
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|keyColumnNames
argument_list|,
name|key
argument_list|)
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|deleteCharAt
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

