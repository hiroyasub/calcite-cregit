begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|innodb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTableQueryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|TableReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|TableReaderFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|comparator
operator|.
name|ComparisonOperator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|page
operator|.
name|index
operator|.
name|GenericRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|schema
operator|.
name|KeyMeta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|schema
operator|.
name|TableDef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|service
operator|.
name|impl
operator|.
name|RecordIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Table based on an InnoDB data file.  */
end_comment

begin_class
specifier|public
class|class
name|InnodbTable
extends|extends
name|AbstractQueryableTable
implements|implements
name|TranslatableTable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InnodbTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|InnodbSchema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|RelProtoDataType
argument_list|>
name|protoRowTypeSupplier
init|=
name|Suppliers
operator|.
name|memoize
argument_list|(
name|this
operator|::
name|supplyProto
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|TableDef
argument_list|>
name|tableDefSupplier
init|=
name|Suppliers
operator|.
name|memoize
argument_list|(
name|this
operator|::
name|supplyTableDef
argument_list|)
decl_stmt|;
specifier|public
name|InnodbTable
parameter_list|(
name|InnodbSchema
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InnodbTable {"
operator|+
name|tableName
operator|+
literal|"}"
return|;
block|}
specifier|private
name|RelProtoDataType
name|supplyProto
parameter_list|()
block|{
return|return
name|schema
operator|.
name|getRelDataType
argument_list|(
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|protoRowTypeSupplier
operator|.
name|get
argument_list|()
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
return|;
block|}
specifier|public
name|TableDef
name|getTableDef
parameter_list|()
block|{
return|return
name|tableDefSupplier
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|TableDef
name|supplyTableDef
parameter_list|()
block|{
return|return
name|schema
operator|.
name|getTableDef
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Get index name set.    *    * @return set of index names    */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getIndexesNameSet
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|PRIMARY_KEY_NAME
argument_list|)
operator|.
name|addAll
argument_list|(
name|getTableDef
argument_list|()
operator|.
name|getSecondaryKeyMetaList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|KeyMeta
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
specifier|final
name|TableReaderFactory
name|tableReaderFactory
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|tableReaderFactory
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|IndexCondition
operator|.
name|EMPTY_CONDITION
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Executes a query on the underlying InnoDB table.    *    * @param tableReaderFactory InnoDB Java table reader factory    * @param fields             list of fields    * @param selectFields       list of fields to project    * @param condition          push down index condition    * @param ascOrder           if scan ordering is ascending    * @return Enumerator of results    */
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
specifier|final
name|TableReaderFactory
name|tableReaderFactory
parameter_list|,
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|,
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|selectFields
parameter_list|,
specifier|final
name|IndexCondition
name|condition
parameter_list|,
specifier|final
name|Boolean
name|ascOrder
parameter_list|)
block|{
specifier|final
name|QueryType
name|queryType
init|=
name|condition
operator|.
name|getQueryType
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|pointQueryKey
init|=
name|condition
operator|.
name|getPointQueryKey
argument_list|()
decl_stmt|;
specifier|final
name|ComparisonOperator
name|rangeQueryLowerOp
init|=
name|condition
operator|.
name|getRangeQueryLowerOp
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryLowerKey
init|=
name|condition
operator|.
name|getRangeQueryLowerKey
argument_list|()
decl_stmt|;
specifier|final
name|ComparisonOperator
name|rangeQueryUpperOp
init|=
name|condition
operator|.
name|getRangeQueryUpperOp
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|rangeQueryUpperKey
init|=
name|condition
operator|.
name|getRangeQueryUpperKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|indexName
init|=
name|condition
operator|.
name|getIndexName
argument_list|()
decl_stmt|;
comment|// Build the type of the resulting row based on the provided fields
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|fieldInfo
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|getRowType
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|Function1
argument_list|<
name|String
argument_list|,
name|Void
argument_list|>
name|addField
init|=
name|fieldName
lambda|->
block|{
name|RelDataType
name|relDataType
init|=
name|rowType
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|fieldInfo
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|relDataType
argument_list|)
operator|.
name|nullable
argument_list|(
name|relDataType
operator|.
name|isNullable
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selectedColumnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|selectFields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|field
range|:
name|fields
control|)
block|{
name|addField
operator|.
name|apply
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field
range|:
name|selectFields
control|)
block|{
name|addField
operator|.
name|apply
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|selectedColumnNames
operator|.
name|add
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RelProtoDataType
name|resultRowType
init|=
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|fieldInfo
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|TableReader
name|tableReader
init|=
name|tableReaderFactory
operator|.
name|createTableReader
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|tableReader
operator|.
name|open
argument_list|()
expr_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|enumerator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|GenericRecord
argument_list|>
name|resultIterator
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Create query iterator, queryType={}, indexName={}, "
operator|+
literal|"pointQueryKey={}, projection={}, rangeQueryKey={}{} AND {}{}, "
operator|+
literal|"ascOrder={}"
argument_list|,
name|queryType
argument_list|,
name|indexName
argument_list|,
name|pointQueryKey
argument_list|,
name|selectedColumnNames
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperKey
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|ascOrder
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|queryType
condition|)
block|{
case|case
name|PK_POINT_QUERY
case|:
name|resultIterator
operator|=
name|RecordIterator
operator|.
name|create
argument_list|(
name|tableReader
operator|.
name|queryByPrimaryKey
argument_list|(
name|pointQueryKey
argument_list|,
name|selectedColumnNames
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PK_RANGE_QUERY
case|:
name|resultIterator
operator|=
name|tableReader
operator|.
name|getRangeQueryIterator
argument_list|(
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperKey
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|selectedColumnNames
argument_list|,
name|ascOrder
argument_list|)
expr_stmt|;
break|break;
case|case
name|SK_POINT_QUERY
case|:
name|resultIterator
operator|=
name|tableReader
operator|.
name|getRecordIteratorBySk
argument_list|(
name|indexName
argument_list|,
name|pointQueryKey
argument_list|,
name|ComparisonOperator
operator|.
name|GTE
argument_list|,
name|pointQueryKey
argument_list|,
name|ComparisonOperator
operator|.
name|LTE
argument_list|,
name|selectedColumnNames
argument_list|,
name|ascOrder
argument_list|)
expr_stmt|;
break|break;
case|case
name|SK_RANGE_QUERY
case|:
case|case
name|SK_FULL_SCAN
case|:
name|resultIterator
operator|=
name|tableReader
operator|.
name|getRecordIteratorBySk
argument_list|(
name|indexName
argument_list|,
name|rangeQueryLowerKey
argument_list|,
name|rangeQueryLowerOp
argument_list|,
name|rangeQueryUpperKey
argument_list|,
name|rangeQueryUpperOp
argument_list|,
name|selectedColumnNames
argument_list|,
name|ascOrder
argument_list|)
expr_stmt|;
break|break;
case|case
name|PK_FULL_SCAN
case|:
name|resultIterator
operator|=
name|tableReader
operator|.
name|getQueryAllIterator
argument_list|(
name|selectedColumnNames
argument_list|,
name|ascOrder
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"query type is invalid"
argument_list|)
throw|;
block|}
name|RelDataType
name|rowType
init|=
name|resultRowType
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|InnodbEnumerator
argument_list|(
name|resultIterator
argument_list|,
name|rowType
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|tableReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|InnodbQueryable
argument_list|<>
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|context
operator|.
name|getCluster
argument_list|()
decl_stmt|;
return|return
operator|new
name|InnodbTableScan
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|InnodbRel
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|relOptTable
argument_list|,
name|this
argument_list|,
literal|null
argument_list|,
name|context
operator|.
name|getTableHints
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Implementation of {@link org.apache.calcite.linq4j.Queryable} based on    * a {@link org.apache.calcite.adapter.innodb.InnodbTable}.    *    * @param<T> element type    */
specifier|public
specifier|static
class|class
name|InnodbQueryable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractTableQueryable
argument_list|<
name|T
argument_list|>
block|{
specifier|public
name|InnodbQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|InnodbTable
name|table
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
comment|//noinspection unchecked
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
init|=
operator|(
name|Enumerable
argument_list|<
name|T
argument_list|>
operator|)
name|getTable
argument_list|()
operator|.
name|query
argument_list|(
name|getTableReaderFactory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|enumerable
operator|.
name|enumerator
argument_list|()
return|;
block|}
specifier|private
name|InnodbTable
name|getTable
parameter_list|()
block|{
return|return
operator|(
name|InnodbTable
operator|)
name|table
return|;
block|}
specifier|private
name|TableReaderFactory
name|getTableReaderFactory
parameter_list|()
block|{
return|return
name|schema
operator|.
name|unwrap
argument_list|(
name|InnodbSchema
operator|.
name|class
argument_list|)
operator|.
name|tableReaderFactory
return|;
block|}
comment|/**      * Called via code-generation.      *      * @see org.apache.calcite.adapter.innodb.InnodbMethod#INNODB_QUERYABLE_QUERY      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|selectFields
parameter_list|,
name|IndexCondition
name|condition
parameter_list|,
name|Boolean
name|ascOrder
parameter_list|)
block|{
return|return
name|getTable
argument_list|()
operator|.
name|query
argument_list|(
name|getTableReaderFactory
argument_list|()
argument_list|,
name|fields
argument_list|,
name|selectFields
argument_list|,
name|condition
argument_list|,
name|ascOrder
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

