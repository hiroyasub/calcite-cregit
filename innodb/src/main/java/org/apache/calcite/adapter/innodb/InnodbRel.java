begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|innodb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Relational expression that uses InnoDB calling convention.  */
end_comment

begin_interface
specifier|public
interface|interface
name|InnodbRel
extends|extends
name|RelNode
block|{
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
function_decl|;
comment|/** Calling convention for relational operations that occur in InnoDB. */
name|Convention
name|CONVENTION
init|=
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"INNODB"
argument_list|,
name|InnodbRel
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Callback for the implementation process that converts a tree of    * {@link InnodbRel} nodes into an InnoDB direct call query. */
class|class
name|Implementor
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|selectFields
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IndexCondition
name|indexCondition
init|=
name|IndexCondition
operator|.
name|EMPTY_CONDITION
decl_stmt|;
name|boolean
name|ascOrder
init|=
literal|true
decl_stmt|;
name|RelOptTable
name|table
decl_stmt|;
name|InnodbTable
name|innodbTable
decl_stmt|;
specifier|public
name|void
name|addSelectFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|selectFields
operator|.
name|putAll
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setIndexCondition
parameter_list|(
name|IndexCondition
name|indexCondition
parameter_list|)
block|{
name|this
operator|.
name|indexCondition
operator|=
name|indexCondition
expr_stmt|;
block|}
specifier|public
name|void
name|setAscOrder
parameter_list|(
name|boolean
name|ascOrder
parameter_list|)
block|{
name|this
operator|.
name|ascOrder
operator|=
name|ascOrder
expr_stmt|;
block|}
specifier|public
name|void
name|visitChild
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
assert|assert
name|ordinal
operator|==
literal|0
assert|;
operator|(
operator|(
name|InnodbRel
operator|)
name|input
operator|)
operator|.
name|implement
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

