begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|innodb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|alibaba
operator|.
name|innodb
operator|.
name|java
operator|.
name|reader
operator|.
name|column
operator|.
name|ColumnType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Mappings from<code>innodb-java-reader</code> column types  * to corresponding SQL types.  */
end_comment

begin_class
specifier|public
class|class
name|ColumnTypeToSqlTypeConversionRules
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|ColumnTypeToSqlTypeConversionRules
name|INSTANCE
init|=
operator|new
name|ColumnTypeToSqlTypeConversionRules
argument_list|()
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SqlTypeName
argument_list|>
name|rules
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|SqlTypeName
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|TINYINT
argument_list|,
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|SMALLINT
argument_list|,
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|MEDIUMINT
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|INT
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|BIGINT
argument_list|,
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|UNSIGNED_TINYINT
argument_list|,
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|UNSIGNED_SMALLINT
argument_list|,
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|UNSIGNED_MEDIUMINT
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|UNSIGNED_INT
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|UNSIGNED_BIGINT
argument_list|,
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|FLOAT
argument_list|,
name|SqlTypeName
operator|.
name|REAL
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|REAL
argument_list|,
name|SqlTypeName
operator|.
name|REAL
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|DOUBLE
argument_list|,
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|DECIMAL
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|BOOL
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|BOOLEAN
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|CHAR
argument_list|,
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|VARCHAR
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|BINARY
argument_list|,
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|VARBINARY
argument_list|,
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|TINYBLOB
argument_list|,
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|MEDIUMBLOB
argument_list|,
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|BLOB
argument_list|,
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|LONGBLOB
argument_list|,
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|TINYTEXT
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|MEDIUMTEXT
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|TEXT
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|LONGTEXT
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|YEAR
argument_list|,
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|TIME
argument_list|,
name|SqlTypeName
operator|.
name|TIME
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|DATE
argument_list|,
name|SqlTypeName
operator|.
name|DATE
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|DATETIME
argument_list|,
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|TIMESTAMP
argument_list|,
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|ENUM
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|SET
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl|.
name|put
argument_list|(
name|ColumnType
operator|.
name|BIT
argument_list|,
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Returns the    * {@link org.apache.calcite.util.Glossary#SINGLETON_PATTERN singleton}    * instance.    */
specifier|public
specifier|static
name|ColumnTypeToSqlTypeConversionRules
name|instance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
comment|/**    * Returns a corresponding {@link SqlTypeName} for a given InnoDB type name.    *    * @param name the column type name to lookup    * @return a corresponding SqlTypeName if found, ANY otherwise    */
specifier|public
name|SqlTypeName
name|lookup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|rules
operator|.
name|getOrDefault
argument_list|(
name|name
argument_list|,
name|SqlTypeName
operator|.
name|ANY
argument_list|)
return|;
block|}
block|}
end_class

end_unit

