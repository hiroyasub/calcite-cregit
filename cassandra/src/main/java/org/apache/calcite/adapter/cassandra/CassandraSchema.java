begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|ColumnMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|KeyspaceMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|driver
operator|.
name|core
operator|.
name|TableMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Schema mapped onto a Cassandra column family  */
end_comment

begin_class
specifier|public
class|class
name|CassandraSchema
extends|extends
name|AbstractSchema
block|{
specifier|final
name|Session
name|session
decl_stmt|;
specifier|final
name|String
name|keyspace
decl_stmt|;
comment|/**    * Creates a Cassandra schema.    *    * @param host Cassandra host, e.g. "localhost"    * @param keyspace Cassandra keyspace name, e.g. "twissandra"    */
specifier|public
name|CassandraSchema
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|keyspace
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|keyspace
operator|=
name|keyspace
expr_stmt|;
try|try
block|{
name|Cluster
name|cluster
init|=
name|Cluster
operator|.
name|builder
argument_list|()
operator|.
name|addContactPoint
argument_list|(
name|host
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|session
operator|=
name|cluster
operator|.
name|connect
argument_list|(
name|keyspace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|RelProtoDataType
name|getRelDataType
parameter_list|(
name|String
name|columnFamily
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnMetadata
argument_list|>
name|columns
init|=
name|getKeyspace
argument_list|()
operator|.
name|getTable
argument_list|(
name|columnFamily
argument_list|)
operator|.
name|getColumns
argument_list|()
decl_stmt|;
comment|// Temporary type factory, just for the duration of this method. Allowable
comment|// because we're creating a proto-type, not a type; before being used, the
comment|// proto-type will be copied into a real type factory.
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|fieldInfo
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnMetadata
name|column
range|:
name|columns
control|)
block|{
specifier|final
name|String
name|columnName
init|=
name|column
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|DataType
name|type
init|=
name|column
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// TODO: This mapping of types can be done much better
name|SqlTypeName
name|typeName
init|=
name|SqlTypeName
operator|.
name|ANY
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|DataType
operator|.
name|ascii
argument_list|()
operator|||
name|type
operator|==
name|DataType
operator|.
name|text
argument_list|()
operator|||
name|type
operator|==
name|DataType
operator|.
name|varchar
argument_list|()
operator|||
name|type
operator|==
name|DataType
operator|.
name|uuid
argument_list|()
operator|||
name|type
operator|==
name|DataType
operator|.
name|timeuuid
argument_list|()
condition|)
block|{
name|typeName
operator|=
name|SqlTypeName
operator|.
name|CHAR
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|==
name|DataType
operator|.
name|cint
argument_list|()
operator|||
name|type
operator|==
name|DataType
operator|.
name|varint
argument_list|()
condition|)
block|{
name|typeName
operator|=
name|SqlTypeName
operator|.
name|INTEGER
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|==
name|DataType
operator|.
name|bigint
argument_list|()
condition|)
block|{
name|typeName
operator|=
name|SqlTypeName
operator|.
name|BIGINT
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|==
name|DataType
operator|.
name|cdouble
argument_list|()
operator|||
name|type
operator|==
name|DataType
operator|.
name|cfloat
argument_list|()
operator|||
name|type
operator|==
name|DataType
operator|.
name|decimal
argument_list|()
condition|)
block|{
name|typeName
operator|=
name|SqlTypeName
operator|.
name|DOUBLE
expr_stmt|;
block|}
name|fieldInfo
operator|.
name|add
argument_list|(
name|columnName
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|)
operator|.
name|nullable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|fieldInfo
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get all primary key columns from the underlying CQL table    *    * @return A list of field names that are part of the partition and clustering keys    */
name|Pair
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getKeyFields
parameter_list|(
name|String
name|columnFamily
parameter_list|)
block|{
name|TableMetadata
name|table
init|=
name|getKeyspace
argument_list|()
operator|.
name|getTable
argument_list|(
name|columnFamily
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnMetadata
argument_list|>
name|partitionKey
init|=
name|table
operator|.
name|getPartitionKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pKeyFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnMetadata
name|column
range|:
name|partitionKey
control|)
block|{
name|pKeyFields
operator|.
name|add
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ColumnMetadata
argument_list|>
name|clusteringKey
init|=
name|table
operator|.
name|getClusteringColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cKeyFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnMetadata
name|column
range|:
name|clusteringKey
control|)
block|{
name|cKeyFields
operator|.
name|add
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|pKeyFields
argument_list|)
argument_list|,
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|cKeyFields
argument_list|)
argument_list|)
return|;
block|}
comment|/** Get the collation of all clustering key columns.    *    * @return A RelCollations representing the collation of all clustering keys    */
specifier|public
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|getClusteringOrder
parameter_list|(
name|String
name|columnFamily
parameter_list|)
block|{
name|TableMetadata
name|table
init|=
name|getKeyspace
argument_list|()
operator|.
name|getTable
argument_list|(
name|columnFamily
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TableMetadata
operator|.
name|Order
argument_list|>
name|clusteringOrder
init|=
name|table
operator|.
name|getClusteringOrder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|keyCollations
init|=
operator|new
name|ArrayList
argument_list|<
name|RelFieldCollation
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TableMetadata
operator|.
name|Order
name|order
range|:
name|clusteringOrder
control|)
block|{
name|RelFieldCollation
operator|.
name|Direction
name|direction
decl_stmt|;
switch|switch
condition|(
name|order
condition|)
block|{
case|case
name|DESC
case|:
name|direction
operator|=
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|DESCENDING
expr_stmt|;
break|break;
case|case
name|ASC
case|:
default|default:
name|direction
operator|=
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
expr_stmt|;
break|break;
block|}
name|keyCollations
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|i
argument_list|,
name|direction
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|keyCollations
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|TableMetadata
name|table
range|:
name|getKeyspace
argument_list|()
operator|.
name|getTables
argument_list|()
control|)
block|{
name|String
name|tableName
init|=
name|table
operator|.
name|getName
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|CassandraTable
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|KeyspaceMetadata
name|getKeyspace
parameter_list|()
block|{
return|return
name|session
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|getKeyspace
argument_list|(
name|keyspace
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End CassandraSchema.java
end_comment

end_unit

