begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateTimeStringUtils
operator|.
name|ISO_DATETIME_FRACTIONAL_SECOND_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateTimeStringUtils
operator|.
name|getDateFormatter
import|;
end_import

begin_comment
comment|/**  * Implementation of a {@link org.apache.calcite.rel.core.Filter}  * relational expression in Cassandra.  */
end_comment

begin_class
specifier|public
class|class
name|CassandraFilter
extends|extends
name|Filter
implements|implements
name|CassandraRel
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partitionKeys
decl_stmt|;
specifier|private
name|Boolean
name|singlePartition
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|clusteringKeys
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|implicitFieldCollations
decl_stmt|;
specifier|private
specifier|final
name|RelCollation
name|implicitCollation
decl_stmt|;
specifier|private
specifier|final
name|String
name|match
decl_stmt|;
specifier|public
name|CassandraFilter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionKeys
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|clusteringKeys
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|implicitFieldCollations
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|condition
argument_list|)
expr_stmt|;
name|this
operator|.
name|partitionKeys
operator|=
name|partitionKeys
expr_stmt|;
name|this
operator|.
name|singlePartition
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|clusteringKeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|clusteringKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|implicitFieldCollations
operator|=
name|implicitFieldCollations
expr_stmt|;
name|Translator
name|translator
init|=
operator|new
name|Translator
argument_list|(
name|getRowType
argument_list|()
argument_list|,
name|partitionKeys
argument_list|,
name|clusteringKeys
argument_list|,
name|implicitFieldCollations
argument_list|)
decl_stmt|;
name|this
operator|.
name|match
operator|=
name|translator
operator|.
name|translateMatch
argument_list|(
name|condition
argument_list|)
expr_stmt|;
name|this
operator|.
name|singlePartition
operator|=
name|translator
operator|.
name|isSinglePartition
argument_list|()
expr_stmt|;
name|this
operator|.
name|implicitCollation
operator|=
name|translator
operator|.
name|getImplicitCollation
argument_list|()
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|CassandraRel
operator|.
name|CONVENTION
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|child
operator|.
name|getConvention
argument_list|()
assert|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|0.1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CassandraFilter
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
return|return
operator|new
name|CassandraFilter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|,
name|partitionKeys
argument_list|,
name|clusteringKeys
argument_list|,
name|implicitFieldCollations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|implementor
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Check if the filter restricts to a single partition.    *    * @return True if the filter will restrict the underlying to a single partition    */
specifier|public
name|boolean
name|isSinglePartition
parameter_list|()
block|{
return|return
name|singlePartition
return|;
block|}
comment|/** Get the resulting collation by the clustering keys after filtering.    *    * @return The implicit collation based on the natural sorting by clustering keys    */
specifier|public
name|RelCollation
name|getImplicitCollation
parameter_list|()
block|{
return|return
name|implicitCollation
return|;
block|}
comment|/** Translates {@link RexNode} expressions into Cassandra expression strings. */
specifier|static
class|class
name|Translator
block|{
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|partitionKeys
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|clusteringKeys
decl_stmt|;
specifier|private
name|int
name|restrictedClusteringKeys
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|implicitFieldCollations
decl_stmt|;
name|Translator
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionKeys
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|clusteringKeys
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|implicitFieldCollations
parameter_list|)
block|{
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|CassandraRules
operator|.
name|cassandraFieldNames
argument_list|(
name|rowType
argument_list|)
expr_stmt|;
name|this
operator|.
name|partitionKeys
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|partitionKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusteringKeys
operator|=
name|clusteringKeys
expr_stmt|;
name|this
operator|.
name|restrictedClusteringKeys
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|implicitFieldCollations
operator|=
name|implicitFieldCollations
expr_stmt|;
block|}
comment|/** Check if the query spans only one partition.      *      * @return True if the matches translated so far have resulted in a single partition      */
specifier|public
name|boolean
name|isSinglePartition
parameter_list|()
block|{
return|return
name|partitionKeys
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/** Infer the implicit correlation from the unrestricted clustering keys.      *      * @return The collation of the filtered results      */
specifier|public
name|RelCollation
name|getImplicitCollation
parameter_list|()
block|{
comment|// No collation applies if we aren't restricted to a single partition
if|if
condition|(
operator|!
name|isSinglePartition
argument_list|()
condition|)
block|{
return|return
name|RelCollations
operator|.
name|EMPTY
return|;
block|}
comment|// Pull out the correct fields along with their original collations
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|restrictedClusteringKeys
init|;
name|i
operator|<
name|clusteringKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fieldIndex
init|=
name|fieldNames
operator|.
name|indexOf
argument_list|(
name|clusteringKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|RelFieldCollation
operator|.
name|Direction
name|direction
init|=
name|implicitFieldCollations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDirection
argument_list|()
decl_stmt|;
name|fieldCollations
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|fieldIndex
argument_list|,
name|direction
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|RelCollations
operator|.
name|of
argument_list|(
name|fieldCollations
argument_list|)
return|;
block|}
comment|/** Produce the CQL predicate string for the given condition.      *      * @param condition Condition to translate      * @return CQL predicate string      */
specifier|private
name|String
name|translateMatch
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
comment|// CQL does not support disjunctions
name|List
argument_list|<
name|RexNode
argument_list|>
name|disjunctions
init|=
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
name|disjunctions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|translateAnd
argument_list|(
name|disjunctions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate "
operator|+
name|condition
argument_list|)
throw|;
block|}
block|}
comment|/** Returns the value of the literal.      *      * @param literal Literal to translate      * @return The value of the literal in the form of the actual type.      */
specifier|private
specifier|static
name|Object
name|literalValue
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
name|Comparable
argument_list|<
name|?
argument_list|>
name|value
init|=
name|RexLiteral
operator|.
name|value
argument_list|(
name|literal
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|literal
operator|.
name|getTypeName
argument_list|()
condition|)
block|{
case|case
name|TIMESTAMP
case|:
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
assert|assert
name|value
operator|instanceof
name|TimestampString
assert|;
specifier|final
name|SimpleDateFormat
name|dateFormatter
init|=
name|getDateFormatter
argument_list|(
name|ISO_DATETIME_FRACTIONAL_SECOND_FORMAT
argument_list|)
decl_stmt|;
return|return
name|dateFormatter
operator|.
name|format
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
argument_list|)
return|;
case|case
name|DATE
case|:
assert|assert
name|value
operator|instanceof
name|DateString
assert|;
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
default|default:
name|Object
name|val
init|=
name|literal
operator|.
name|getValue3
argument_list|()
decl_stmt|;
return|return
name|val
operator|==
literal|null
condition|?
literal|"null"
else|:
name|val
return|;
block|}
block|}
comment|/** Translate a conjunctive predicate to a CQL string.      *      * @param condition A conjunctive predicate      * @return CQL string for the predicate      */
specifier|private
name|String
name|translateAnd
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|predicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|condition
argument_list|)
control|)
block|{
name|predicates
operator|.
name|add
argument_list|(
name|translateMatch2
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Util
operator|.
name|toString
argument_list|(
name|predicates
argument_list|,
literal|""
argument_list|,
literal|" AND "
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/** Translate a binary relation. */
specifier|private
name|String
name|translateMatch2
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
comment|// We currently only use equality, but inequalities on clustering keys
comment|// should be possible in the future
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|translateBinary
argument_list|(
literal|"="
argument_list|,
literal|"="
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
name|translateBinary
argument_list|(
literal|"<"
argument_list|,
literal|">"
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|translateBinary
argument_list|(
literal|"<="
argument_list|,
literal|">="
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|translateBinary
argument_list|(
literal|">"
argument_list|,
literal|"<"
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|translateBinary
argument_list|(
literal|">="
argument_list|,
literal|"<="
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
comment|/** Translates a call to a binary operator, reversing arguments if      * necessary. */
specifier|private
name|String
name|translateBinary
parameter_list|(
name|String
name|op
parameter_list|,
name|String
name|rop
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|RexNode
name|left
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|right
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|expression
init|=
name|translateBinary2
argument_list|(
name|op
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
return|;
block|}
name|expression
operator|=
name|translateBinary2
argument_list|(
name|rop
argument_list|,
name|right
argument_list|,
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate op "
operator|+
name|op
operator|+
literal|" call "
operator|+
name|call
argument_list|)
throw|;
block|}
comment|/** Translates a call to a binary operator. Returns null on failure. */
specifier|private
annotation|@
name|Nullable
name|String
name|translateBinary2
parameter_list|(
name|String
name|op
parameter_list|,
name|RexNode
name|left
parameter_list|,
name|RexNode
name|right
parameter_list|)
block|{
switch|switch
condition|(
name|right
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
break|break;
default|default:
return|return
literal|null
return|;
block|}
specifier|final
name|RexLiteral
name|rightLiteral
init|=
operator|(
name|RexLiteral
operator|)
name|right
decl_stmt|;
switch|switch
condition|(
name|left
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
specifier|final
name|RexInputRef
name|left1
init|=
operator|(
name|RexInputRef
operator|)
name|left
decl_stmt|;
name|String
name|name
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|left1
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|translateOp2
argument_list|(
name|op
argument_list|,
name|name
argument_list|,
name|rightLiteral
argument_list|)
return|;
case|case
name|CAST
case|:
comment|// FIXME This will not work in all cases (for example, we ignore string encoding)
return|return
name|translateBinary2
argument_list|(
name|op
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|left
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|right
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/** Combines a field name, operator, and literal to produce a predicate string. */
specifier|private
name|String
name|translateOp2
parameter_list|(
name|String
name|op
parameter_list|,
name|String
name|name
parameter_list|,
name|RexLiteral
name|right
parameter_list|)
block|{
comment|// In case this is a key, record that it is now restricted
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|partitionKeys
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusteringKeys
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|restrictedClusteringKeys
operator|++
expr_stmt|;
block|}
block|}
name|Object
name|value
init|=
name|literalValue
argument_list|(
name|right
argument_list|)
decl_stmt|;
name|String
name|valueString
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|RelDataTypeField
name|field
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rowType
operator|.
name|getField
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|SqlTypeName
name|typeName
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|!=
name|SqlTypeName
operator|.
name|CHAR
condition|)
block|{
name|valueString
operator|=
literal|"'"
operator|+
name|valueString
operator|+
literal|"'"
expr_stmt|;
block|}
block|}
return|return
name|name
operator|+
literal|" "
operator|+
name|op
operator|+
literal|" "
operator|+
name|valueString
return|;
block|}
block|}
block|}
end_class

end_unit

