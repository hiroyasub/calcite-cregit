begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|cassandra
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|datastax
operator|.
name|oss
operator|.
name|driver
operator|.
name|api
operator|.
name|core
operator|.
name|CqlSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Factory that creates a {@link CassandraSchema}.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
class|class
name|CassandraSchemaFactory
implements|implements
name|SchemaFactory
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CASSANDRA_PORT
init|=
literal|9042
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|CqlSession
argument_list|>
name|INFO_TO_SESSION
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SESSION_DEFINING_KEYS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"host"
argument_list|,
literal|"port"
argument_list|,
literal|"keyspace"
argument_list|,
literal|"username"
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|public
name|CassandraSchemaFactory
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Schema
name|create
parameter_list|(
name|SchemaPlus
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|operand
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sessionMap
init|=
name|projectMapOverKeys
argument_list|(
name|operand
argument_list|,
name|SESSION_DEFINING_KEYS
argument_list|)
decl_stmt|;
name|INFO_TO_SESSION
operator|.
name|computeIfAbsent
argument_list|(
name|sessionMap
argument_list|,
name|m
lambda|->
block|{
name|String
name|host
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
name|String
name|keyspace
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"keyspace"
argument_list|)
decl_stmt|;
name|String
name|username
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|getPort
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Creating session for info {}"
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|username
operator|!=
literal|null
operator|&&
name|password
operator|!=
literal|null
condition|)
block|{
return|return
name|CqlSession
operator|.
name|builder
argument_list|()
operator|.
name|addContactPoint
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
operator|.
name|withAuthCredentials
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
operator|.
name|withKeyspace
argument_list|(
name|keyspace
argument_list|)
operator|.
name|withLocalDatacenter
argument_list|(
literal|"datacenter1"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|CqlSession
operator|.
name|builder
argument_list|()
operator|.
name|addContactPoint
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
operator|.
name|withKeyspace
argument_list|(
name|keyspace
argument_list|)
operator|.
name|withLocalDatacenter
argument_list|(
literal|"datacenter1"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|CassandraSchema
argument_list|(
name|INFO_TO_SESSION
operator|.
name|get
argument_list|(
name|sessionMap
argument_list|)
argument_list|,
name|parentSchema
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|projectMapOverKeys
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|keysToKeep
parameter_list|)
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|keysToKeep
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|,
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getPort
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"port"
argument_list|)
condition|)
block|{
name|Object
name|portObj
init|=
name|map
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
if|if
condition|(
name|portObj
operator|instanceof
name|String
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|portObj
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|int
operator|)
name|portObj
return|;
block|}
block|}
else|else
block|{
return|return
name|DEFAULT_CASSANDRA_PORT
return|;
block|}
block|}
block|}
end_class

end_unit

