begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|noop
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Timer
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link NoopMetricsSystem}.  */
end_comment

begin_class
specifier|public
class|class
name|NoopMetricsSystemTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNoNulls
parameter_list|()
block|{
comment|// The NOOP implementation should act as a real implementation, no "nulls" allowed.
name|MetricsSystem
name|metrics
init|=
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Counter
name|counter
init|=
name|metrics
operator|.
name|getCounter
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
name|counter
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
name|counter
operator|.
name|decrement
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|Histogram
name|histogram
init|=
name|metrics
operator|.
name|getHistogram
argument_list|(
literal|"histogram"
argument_list|)
decl_stmt|;
name|histogram
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|histogram
operator|.
name|update
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|Timer
name|timer
init|=
name|metrics
operator|.
name|getTimer
argument_list|(
literal|"timer"
argument_list|)
decl_stmt|;
name|Context
name|context
init|=
name|timer
operator|.
name|start
argument_list|()
decl_stmt|;
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
name|Context
name|contextTwo
init|=
name|timer
operator|.
name|start
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Timer's context should be a singleton"
argument_list|,
name|context
operator|==
name|contextTwo
argument_list|)
expr_stmt|;
name|Meter
name|meter
init|=
name|metrics
operator|.
name|getMeter
argument_list|(
literal|"meter"
argument_list|)
decl_stmt|;
name|meter
operator|.
name|mark
argument_list|()
expr_stmt|;
name|meter
operator|.
name|mark
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"gauge"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
literal|42L
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleton
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"Should be a singleton"
argument_list|,
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
operator|==
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End NoopMetricsSystemTest.java
end_comment

end_unit

