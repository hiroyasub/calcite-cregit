begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|fakemongo
operator|.
name|junit
operator|.
name|FongoRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|BsonDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_comment
comment|/**  * Tests current adapter using in-memory (fake) implementation of Mongo API:  *<a href="https://github.com/fakemongo/fongo">Fongo</a>.  *  */
end_comment

begin_class
specifier|public
class|class
name|MongoAdapterTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|FongoRule
name|rule
init|=
operator|new
name|FongoRule
argument_list|()
decl_stmt|;
specifier|private
name|MongoDatabase
name|mongoDb
decl_stmt|;
specifier|private
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|zips
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|mongoDb
operator|=
name|rule
operator|.
name|getDatabase
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|zips
operator|=
name|mongoDb
operator|.
name|getCollection
argument_list|(
literal|"zips"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handcrafted connection where we manually added {@link MongoSchema}    */
specifier|private
name|CalciteAssert
operator|.
name|ConnectionFactory
name|newConnectionFactory
parameter_list|()
block|{
return|return
operator|new
name|CalciteAssert
operator|.
name|ConnectionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
specifier|final
name|SchemaPlus
name|root
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|root
operator|.
name|add
argument_list|(
literal|"mongo"
argument_list|,
operator|new
name|MongoSchema
argument_list|(
name|mongoDb
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|single
parameter_list|()
block|{
name|zips
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newConnectionFactory
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"mongo\".\"zips\""
argument_list|)
operator|.
name|runs
argument_list|()
operator|.
name|returnsCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|empty
parameter_list|()
block|{
comment|// for some reason fongo doesn't list collection if it was unused
name|zips
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|zips
operator|.
name|deleteMany
argument_list|(
operator|new
name|BsonDocument
argument_list|()
argument_list|)
expr_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newConnectionFactory
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"mongo\".\"zips\""
argument_list|)
operator|.
name|runs
argument_list|()
operator|.
name|returnsCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|filter
parameter_list|()
block|{
name|zips
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"CITY"
argument_list|,
literal|"New York"
argument_list|)
operator|.
name|append
argument_list|(
literal|"STATE"
argument_list|,
literal|"NY"
argument_list|)
argument_list|)
expr_stmt|;
name|zips
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"CITY"
argument_list|,
literal|"Washington"
argument_list|)
operator|.
name|append
argument_list|(
literal|"STATE"
argument_list|,
literal|"DC"
argument_list|)
argument_list|)
expr_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newConnectionFactory
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select cast(_MAP['CITY'] as varchar(20)) as \"city\" from \"mongo\".\"zips\" "
operator|+
literal|" where _MAP['STATE'] = 'NY'"
argument_list|)
operator|.
name|returns
argument_list|(
literal|"city=New York\n"
argument_list|)
expr_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newConnectionFactory
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select cast(_MAP['CITY'] as varchar(20)) as \"city\" from \"mongo\".\"zips\" "
operator|+
literal|" where _MAP['STATE'] = 'DC'"
argument_list|)
operator|.
name|returns
argument_list|(
literal|"city=Washington\n"
argument_list|)
expr_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newConnectionFactory
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select cast(_MAP['CITY'] as varchar(20)) as \"city\" from \"mongo\".\"zips\" "
operator|+
literal|" where _MAP['STATE'] in ('DC', 'NY')"
argument_list|)
operator|.
name|returns
argument_list|(
literal|"city=New York\ncity=Washington\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|limit
parameter_list|()
block|{
name|zips
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"CITY"
argument_list|,
literal|"New York"
argument_list|)
operator|.
name|append
argument_list|(
literal|"STATE"
argument_list|,
literal|"NY"
argument_list|)
argument_list|)
expr_stmt|;
name|zips
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"CITY"
argument_list|,
literal|"Washington"
argument_list|)
operator|.
name|append
argument_list|(
literal|"STATE"
argument_list|,
literal|"DC"
argument_list|)
argument_list|)
expr_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newConnectionFactory
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"mongo\".\"zips\" limit 1"
argument_list|)
operator|.
name|returnsCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newConnectionFactory
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"mongo\".\"zips\" limit 2"
argument_list|)
operator|.
name|returnsCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Following queries are not supported in Mongo adapter :    *<pre>    * {@code A and (B or C)}    * {@code (A or B) and C}    *</pre>    *    * @see<a href="https://issues.apache.org/jira/browse/CALCITE-2331">[CALCITE-2331]</a>    */
annotation|@
name|Ignore
argument_list|(
literal|"broken; [CALCITE-2331] is logged to fix it"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|validateCALCITE2331
parameter_list|()
block|{
name|zips
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"CITY"
argument_list|,
literal|"New York"
argument_list|)
operator|.
name|append
argument_list|(
literal|"STATE"
argument_list|,
literal|"NY"
argument_list|)
argument_list|)
expr_stmt|;
name|zips
operator|.
name|insertOne
argument_list|(
operator|new
name|Document
argument_list|(
literal|"CITY"
argument_list|,
literal|"Washington"
argument_list|)
operator|.
name|append
argument_list|(
literal|"STATE"
argument_list|,
literal|"DC"
argument_list|)
argument_list|)
expr_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newConnectionFactory
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
literal|"select cast(_MAP['CITY'] as varchar(20)) as \"city\" from \"mongo\".\"zips\" "
operator|+
literal|" where _MAP['STATE'] in ('DC', 'NY') and _MAP['CITY'] = 'New York'"
argument_list|)
operator|.
name|returns
argument_list|(
literal|"city=New York\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End MongoAdapterTest.java
end_comment

end_unit

