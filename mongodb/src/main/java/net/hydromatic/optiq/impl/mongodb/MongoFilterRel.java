begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|JsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link org.eigenbase.rel.FilterRel} relational expression in  * MongoDB.  */
end_comment

begin_class
specifier|public
class|class
name|MongoFilterRel
extends|extends
name|FilterRelBase
implements|implements
name|MongoRel
block|{
specifier|public
name|MongoFilterRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|condition
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|MongoRel
operator|.
name|CONVENTION
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|child
operator|.
name|getConvention
argument_list|()
assert|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|0.1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|MongoFilterRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|condition
argument_list|)
return|;
block|}
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getChild
argument_list|()
argument_list|)
expr_stmt|;
name|Translator
name|translator
init|=
operator|new
name|Translator
argument_list|(
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|match
init|=
name|translator
operator|.
name|translateMatch
argument_list|(
name|condition
argument_list|)
decl_stmt|;
name|implementor
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
comment|/** Translates {@link RexNode} expressions into MongoDB expression strings. */
specifier|static
class|class
name|Translator
block|{
specifier|final
name|JsonBuilder
name|builder
init|=
operator|new
name|JsonBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
argument_list|>
name|multimap
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|eqMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
name|Translator
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
specifier|private
name|String
name|translateMatch
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|builder
operator|.
name|map
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"$match"
argument_list|,
name|translateOr
argument_list|(
name|condition
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toJsonString
argument_list|(
name|map
argument_list|)
return|;
block|}
specifier|private
name|Object
name|translateOr
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|condition
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translateAnd
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|builder
operator|.
name|map
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"$or"
argument_list|,
name|list
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
comment|/** Translates a condition that may be an AND of other conditions. Gathers      * together conditions that apply to the same field. */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|translateAnd
parameter_list|(
name|RexNode
name|node0
parameter_list|)
block|{
name|eqMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|node0
argument_list|)
control|)
block|{
name|translateMatch2
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|builder
operator|.
name|map
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|entry
range|:
name|eqMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|multimap
operator|.
name|removeAll
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|literalToString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map2
init|=
name|builder
operator|.
name|map
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|s
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|map2
operator|.
name|put
argument_list|(
name|s
operator|.
name|left
argument_list|,
name|literalToString
argument_list|(
name|s
operator|.
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|map2
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
specifier|static
name|Object
name|literalToString
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
return|return
name|literal
operator|.
name|getValue2
argument_list|()
return|;
block|}
specifier|private
name|Void
name|translateMatch2
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|translateOp
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
name|translateOp
argument_list|(
literal|"$lt"
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|translateOp
argument_list|(
literal|"$lte"
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
return|return
name|translateOp
argument_list|(
literal|"$ne"
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|translateOp
argument_list|(
literal|"$gt"
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|translateOp
argument_list|(
literal|"$gte"
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Void
name|translateOp
parameter_list|(
name|String
name|op
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
name|RexNode
name|left
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|right
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|left
operator|instanceof
name|RexInputRef
operator|&&
name|right
operator|instanceof
name|RexLiteral
condition|)
block|{
name|translateOp2
argument_list|(
name|op
argument_list|,
operator|(
name|RexInputRef
operator|)
name|left
argument_list|,
operator|(
name|RexLiteral
operator|)
name|right
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|right
operator|instanceof
name|RexInputRef
operator|&&
name|left
operator|instanceof
name|RexLiteral
condition|)
block|{
name|translateOp2
argument_list|(
name|op
argument_list|,
operator|(
name|RexInputRef
operator|)
name|right
argument_list|,
operator|(
name|RexLiteral
operator|)
name|left
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate op "
operator|+
name|op
operator|+
literal|" operands "
operator|+
name|operands
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|translateOp2
parameter_list|(
name|String
name|op
parameter_list|,
name|RexInputRef
name|left
parameter_list|,
name|RexLiteral
name|right
parameter_list|)
block|{
name|String
name|name
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|left
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
comment|// E.g.: {deptno: 100}
name|eqMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// E.g. {deptno: {$lt: 100}}
comment|// which may later be combined with other conditions:
comment|// E.g. {deptno: [$lt: 100, $gt: 50]}
name|multimap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|op
argument_list|,
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End MongoFilterRel.java
end_comment

end_unit

