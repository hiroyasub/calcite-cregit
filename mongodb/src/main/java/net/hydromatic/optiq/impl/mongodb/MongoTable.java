begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|AbstractTableQueryable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|util
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Table based on a MongoDB collection.  */
end_comment

begin_class
specifier|public
class|class
name|MongoTable
extends|extends
name|AbstractQueryableTable
implements|implements
name|TranslatableTable
block|{
specifier|protected
specifier|final
name|String
name|collectionName
decl_stmt|;
comment|/** Creates a MongoTable. */
name|MongoTable
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
name|super
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|collectionName
operator|=
name|collectionName
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MongoTable {"
operator|+
name|collectionName
operator|+
literal|"}"
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
specifier|final
name|RelDataType
name|mapType
init|=
name|typeFactory
operator|.
name|createMapType
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"_MAP"
argument_list|,
name|mapType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|MongoQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
return|return
operator|new
name|MongoTableScan
argument_list|(
name|context
operator|.
name|getCluster
argument_list|()
argument_list|,
name|context
operator|.
name|getCluster
argument_list|()
operator|.
name|traitSetOf
argument_list|(
name|MongoRel
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|relOptTable
argument_list|,
name|this
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
expr|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/** Executes a "find" operation on the underlying collection.    *    *<p>For example,    *<code>zipsTable.find("{state: 'OR'}", "{city: 1, zipcode: 1}")</code></p>    *    * @param mongoDb MongoDB connection    * @param filterJson Filter JSON string, or null    * @param projectJson Project JSON string, or null    * @param fields List of fields to project; or null to return map    * @return Enumerator of results    */
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|find
parameter_list|(
name|DB
name|mongoDb
parameter_list|,
name|String
name|filterJson
parameter_list|,
name|String
name|projectJson
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
specifier|final
name|DBCollection
name|collection
init|=
name|mongoDb
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
specifier|final
name|DBObject
name|filter
init|=
name|filterJson
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|filterJson
argument_list|)
decl_stmt|;
specifier|final
name|DBObject
name|project
init|=
name|projectJson
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|projectJson
argument_list|)
decl_stmt|;
specifier|final
name|Function1
argument_list|<
name|DBObject
argument_list|,
name|Object
argument_list|>
name|getter
init|=
name|MongoEnumerator
operator|.
name|getter
argument_list|(
name|fields
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|DBCursor
name|cursor
init|=
name|collection
operator|.
name|find
argument_list|(
name|filter
argument_list|,
name|project
argument_list|)
decl_stmt|;
return|return
operator|new
name|MongoEnumerator
argument_list|(
name|cursor
argument_list|,
name|getter
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Executes an "aggregate" operation on the underlying collection.    *    *<p>For example:    *<code>zipsTable.aggregate(    * "{$filter: {state: 'OR'}",    * "{$group: {_id: '$city', c: {$sum: 1}, p: {$sum: '$pop'}}}")    *</code></p>    *    * @param mongoDb MongoDB connection    * @param fields List of fields to project; or null to return map    * @param operations One or more JSON strings    * @return Enumerator of results    */
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|aggregate
parameter_list|(
specifier|final
name|DB
name|mongoDb
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|operations
parameter_list|)
block|{
name|List
argument_list|<
name|DBObject
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DBObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|operation
range|:
name|operations
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|operation
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DBObject
name|first
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DBObject
argument_list|>
name|rest
init|=
name|Util
operator|.
name|skip
argument_list|(
name|list
argument_list|)
decl_stmt|;
specifier|final
name|Function1
argument_list|<
name|DBObject
argument_list|,
name|Object
argument_list|>
name|getter
init|=
name|MongoEnumerator
operator|.
name|getter
argument_list|(
name|fields
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|AggregationOutput
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|mongoDb
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|aggregate
argument_list|(
name|first
argument_list|,
name|rest
operator|.
name|toArray
argument_list|(
operator|new
name|DBObject
index|[
name|rest
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"While running MongoDB query "
operator|+
name|operations
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|MongoEnumerator
argument_list|(
name|result
operator|.
name|results
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|getter
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Implementation of {@link net.hydromatic.linq4j.Queryable} based on    * a {@link net.hydromatic.optiq.impl.mongodb.MongoTable}. */
specifier|public
specifier|static
class|class
name|MongoQueryable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractTableQueryable
argument_list|<
name|T
argument_list|>
block|{
specifier|public
name|MongoQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|MongoTable
name|table
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
comment|//noinspection unchecked
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
init|=
operator|(
name|Enumerable
argument_list|<
name|T
argument_list|>
operator|)
name|getTable
argument_list|()
operator|.
name|find
argument_list|(
name|getMongoDb
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|enumerable
operator|.
name|enumerator
argument_list|()
return|;
block|}
specifier|private
name|DB
name|getMongoDb
parameter_list|()
block|{
return|return
name|schema
operator|.
name|unwrap
argument_list|(
name|MongoSchema
operator|.
name|class
argument_list|)
operator|.
name|mongoDb
return|;
block|}
specifier|private
name|MongoTable
name|getTable
parameter_list|()
block|{
return|return
operator|(
name|MongoTable
operator|)
name|table
return|;
block|}
comment|/** Called via code-generation.      *      * @see net.hydromatic.optiq.impl.mongodb.MongoMethod#MONGO_QUERYABLE_AGGREGATE      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|aggregate
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|operations
parameter_list|)
block|{
return|return
name|getTable
argument_list|()
operator|.
name|aggregate
argument_list|(
name|getMongoDb
argument_list|()
argument_list|,
name|fields
argument_list|,
name|operations
argument_list|)
return|;
block|}
comment|/** Called via code-generation.      *      * @see net.hydromatic.optiq.impl.mongodb.MongoMethod#MONGO_QUERYABLE_FIND      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|find
parameter_list|(
name|String
name|filterJson
parameter_list|,
name|String
name|projectJson
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
return|return
name|getTable
argument_list|()
operator|.
name|find
argument_list|(
name|getMongoDb
argument_list|()
argument_list|,
name|filterJson
argument_list|,
name|projectJson
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MongoTable.java
end_comment

end_unit

