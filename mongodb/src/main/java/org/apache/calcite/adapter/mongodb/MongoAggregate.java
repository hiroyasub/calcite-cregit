begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|InvalidRelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlSumAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlSumEmptyIsZeroAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of  * {@link org.apache.calcite.rel.core.Aggregate} relational expression  * in MongoDB.  */
end_comment

begin_class
specifier|public
class|class
name|MongoAggregate
extends|extends
name|Aggregate
implements|implements
name|MongoRel
block|{
specifier|public
name|MongoAggregate
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|BitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|MongoRel
operator|.
name|CONVENTION
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|child
operator|.
name|getConvention
argument_list|()
assert|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"distinct aggregation not supported"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Aggregate
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|BitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|MongoAggregate
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|inNames
init|=
name|MongoRules
operator|.
name|mongoFieldNames
argument_list|(
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outNames
init|=
name|MongoRules
operator|.
name|mongoFieldNames
argument_list|(
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|groupSet
operator|.
name|cardinality
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|String
name|inName
init|=
name|inNames
operator|.
name|get
argument_list|(
name|BitSets
operator|.
name|toList
argument_list|(
name|groupSet
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"_id: "
operator|+
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
literal|"$"
operator|+
name|inName
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|group
range|:
name|BitSets
operator|.
name|toIter
argument_list|(
name|groupSet
argument_list|)
control|)
block|{
specifier|final
name|String
name|inName
init|=
name|inNames
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|inName
operator|+
literal|": "
operator|+
name|MongoRules
operator|.
name|quote
argument_list|(
literal|"$"
operator|+
name|inName
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
literal|"_id: "
operator|+
name|Util
operator|.
name|toString
argument_list|(
name|keys
argument_list|,
literal|"{"
argument_list|,
literal|", "
argument_list|,
literal|"}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
name|outNames
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
operator|+
literal|": "
operator|+
name|toMongo
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|inNames
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|implementor
operator|.
name|add
argument_list|(
literal|null
argument_list|,
literal|"{$group: "
operator|+
name|Util
operator|.
name|toString
argument_list|(
name|list
argument_list|,
literal|"{"
argument_list|,
literal|", "
argument_list|,
literal|"}"
argument_list|)
operator|+
literal|"}"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fixups
decl_stmt|;
if|if
condition|(
name|groupSet
operator|.
name|cardinality
argument_list|()
operator|==
literal|1
condition|)
block|{
name|fixups
operator|=
operator|new
name|AbstractList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|String
name|outName
init|=
name|outNames
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
name|outName
argument_list|)
operator|+
literal|": "
operator|+
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
literal|"$"
operator|+
operator|(
name|index
operator|==
literal|0
condition|?
literal|"_id"
else|:
name|outName
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|outNames
operator|.
name|size
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|fixups
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|fixups
operator|.
name|add
argument_list|(
literal|"_id: 0"
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|group
range|:
name|BitSets
operator|.
name|toIter
argument_list|(
name|groupSet
argument_list|)
control|)
block|{
name|fixups
operator|.
name|add
argument_list|(
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
name|outNames
operator|.
name|get
argument_list|(
name|group
argument_list|)
argument_list|)
operator|+
literal|": "
operator|+
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
literal|"$_id."
operator|+
name|outNames
operator|.
name|get
argument_list|(
name|group
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
for|for
control|(
name|AggregateCall
name|ignored
range|:
name|aggCalls
control|)
block|{
specifier|final
name|String
name|outName
init|=
name|outNames
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|fixups
operator|.
name|add
argument_list|(
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
name|outName
argument_list|)
operator|+
literal|": "
operator|+
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
literal|"$"
operator|+
name|outName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|groupSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|implementor
operator|.
name|add
argument_list|(
literal|null
argument_list|,
literal|"{$project: "
operator|+
name|Util
operator|.
name|toString
argument_list|(
name|fixups
argument_list|,
literal|"{"
argument_list|,
literal|", "
argument_list|,
literal|"}"
argument_list|)
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|toMongo
parameter_list|(
name|SqlAggFunction
name|aggregation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|inNames
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|aggregation
operator|==
name|SqlStdOperatorTable
operator|.
name|COUNT
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"{$sum: 1}"
return|;
block|}
else|else
block|{
assert|assert
name|args
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|String
name|inName
init|=
name|inNames
operator|.
name|get
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
literal|"{$sum: {$cond: [ {$eq: ["
operator|+
name|MongoRules
operator|.
name|quote
argument_list|(
name|inName
argument_list|)
operator|+
literal|", null]}, 0, 1]}}"
return|;
block|}
block|}
if|else if
condition|(
name|aggregation
operator|instanceof
name|SqlSumAggFunction
operator|||
name|aggregation
operator|instanceof
name|SqlSumEmptyIsZeroAggFunction
condition|)
block|{
assert|assert
name|args
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|String
name|inName
init|=
name|inNames
operator|.
name|get
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
literal|"{$sum: "
operator|+
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
literal|"$"
operator|+
name|inName
argument_list|)
operator|+
literal|"}"
return|;
block|}
if|else if
condition|(
name|aggregation
operator|==
name|SqlStdOperatorTable
operator|.
name|MIN
condition|)
block|{
assert|assert
name|args
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|String
name|inName
init|=
name|inNames
operator|.
name|get
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
literal|"{$min: "
operator|+
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
literal|"$"
operator|+
name|inName
argument_list|)
operator|+
literal|"}"
return|;
block|}
if|else if
condition|(
name|aggregation
operator|==
name|SqlStdOperatorTable
operator|.
name|MAX
condition|)
block|{
assert|assert
name|args
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|String
name|inName
init|=
name|inNames
operator|.
name|get
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
literal|"{$max: "
operator|+
name|MongoRules
operator|.
name|maybeQuote
argument_list|(
literal|"$"
operator|+
name|inName
argument_list|)
operator|+
literal|"}"
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown aggregate "
operator|+
name|aggregation
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MongoAggregate.java
end_comment

end_unit

