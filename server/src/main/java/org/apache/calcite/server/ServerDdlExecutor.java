begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalcitePrepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|ContextSqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|MaterializationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|model
operator|.
name|JsonSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ColumnStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Wrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDataTypeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlAttributeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlColumnDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlCreateForeignSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlCreateFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlCreateMaterializedView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlCreateSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlCreateTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlCreateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlCreateView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlDropObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
operator|.
name|SqlDropSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|CalciteSqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlAbstractParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserImplFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|ddl
operator|.
name|SqlDdlParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|pretty
operator|.
name|SqlPrettyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|NullInitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Planner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NlsString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/** Executes DDL commands.  *  *<p>Given a DDL command that is a sub-class of {@link SqlNode}, dispatches  * the command to an appropriate {@code execute} method. For example,  * "CREATE TABLE" ({@link SqlCreateTable}) is dispatched to  * {@link #execute(SqlCreateTable, CalcitePrepare.Context)}. */
end_comment

begin_class
specifier|public
class|class
name|ServerDdlExecutor
extends|extends
name|DdlExecutorImpl
block|{
comment|/** Singleton instance. */
specifier|public
specifier|static
specifier|final
name|ServerDdlExecutor
name|INSTANCE
init|=
operator|new
name|ServerDdlExecutor
argument_list|()
decl_stmt|;
comment|/** Parser factory. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used via reflection
specifier|public
specifier|static
specifier|final
name|SqlParserImplFactory
name|PARSER_FACTORY
init|=
operator|new
name|SqlParserImplFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SqlAbstractParserImpl
name|getParser
parameter_list|(
name|Reader
name|stream
parameter_list|)
block|{
return|return
name|SqlDdlParserImpl
operator|.
name|FACTORY
operator|.
name|getParser
argument_list|(
name|stream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DdlExecutor
name|getDdlExecutor
parameter_list|()
block|{
return|return
name|ServerDdlExecutor
operator|.
name|INSTANCE
return|;
block|}
block|}
decl_stmt|;
comment|/** Creates a ServerDdlExecutor.    * Protected only to allow sub-classing;    * use {@link #INSTANCE} where possible. */
specifier|protected
name|ServerDdlExecutor
parameter_list|()
block|{
block|}
comment|/** Returns the schema in which to create an object. */
specifier|static
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|(
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|,
name|boolean
name|mutable
parameter_list|,
name|SqlIdentifier
name|id
parameter_list|)
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|path
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isSimple
argument_list|()
condition|)
block|{
name|path
operator|=
name|context
operator|.
name|getDefaultSchemaPath
argument_list|()
expr_stmt|;
name|name
operator|=
name|id
operator|.
name|getSimple
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|Util
operator|.
name|skipLast
argument_list|(
name|id
operator|.
name|names
argument_list|)
expr_stmt|;
name|name
operator|=
name|Util
operator|.
name|last
argument_list|(
name|id
operator|.
name|names
argument_list|)
expr_stmt|;
block|}
name|CalciteSchema
name|schema
init|=
name|mutable
condition|?
name|context
operator|.
name|getMutableRootSchema
argument_list|()
else|:
name|context
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|path
control|)
block|{
name|schema
operator|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|schema
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Returns the SqlValidator with the given {@code context} schema    * and type factory.    */
specifier|static
name|SqlValidator
name|validator
parameter_list|(
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|,
name|boolean
name|mutable
parameter_list|)
block|{
return|return
operator|new
name|ContextSqlValidator
argument_list|(
name|context
argument_list|,
name|mutable
argument_list|)
return|;
block|}
comment|/** Wraps a query to rename its columns. Used by CREATE VIEW and CREATE    * MATERIALIZED VIEW. */
specifier|static
name|SqlNode
name|renameColumns
parameter_list|(
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
if|if
condition|(
name|columnList
operator|==
literal|null
condition|)
block|{
return|return
name|query
return|;
block|}
specifier|final
name|SqlParserPos
name|p
init|=
name|query
operator|.
name|getParserPosition
argument_list|()
decl_stmt|;
specifier|final
name|SqlNodeList
name|selectList
init|=
name|SqlNodeList
operator|.
name|SINGLETON_STAR
decl_stmt|;
specifier|final
name|SqlCall
name|from
init|=
name|SqlStdOperatorTable
operator|.
name|AS
operator|.
name|createCall
argument_list|(
name|p
argument_list|,
name|ImmutableList
operator|.
expr|<
name|SqlNode
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|query
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
literal|"_"
argument_list|,
name|p
argument_list|)
argument_list|)
operator|.
name|addAll
argument_list|(
name|columnList
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SqlSelect
argument_list|(
name|p
argument_list|,
literal|null
argument_list|,
name|selectList
argument_list|,
name|from
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Populates the table called {@code name} by executing {@code query}. */
specifier|static
name|void
name|populate
parameter_list|(
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNode
name|query
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
comment|// Generate, prepare and execute an "INSERT INTO table query" statement.
comment|// (It's a bit inefficient that we convert from SqlNode to SQL and back
comment|// again.)
specifier|final
name|FrameworkConfig
name|config
init|=
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|defaultSchema
argument_list|(
name|context
operator|.
name|getRootSchema
argument_list|()
operator|.
name|plus
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Planner
name|planner
init|=
name|Frameworks
operator|.
name|getPlanner
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|SqlWriterConfig
name|writerConfig
init|=
name|SqlPrettyWriter
operator|.
name|config
argument_list|()
operator|.
name|withAlwaysUseParentheses
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|SqlPrettyWriter
name|w
init|=
operator|new
name|SqlPrettyWriter
argument_list|(
name|writerConfig
argument_list|,
name|buf
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
expr_stmt|;
name|name
operator|.
name|unparse
argument_list|(
name|w
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|query
operator|.
name|unparse
argument_list|(
name|w
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|query1
init|=
name|planner
operator|.
name|parse
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|query2
init|=
name|planner
operator|.
name|validate
argument_list|(
name|query1
argument_list|)
decl_stmt|;
specifier|final
name|RelRoot
name|r
init|=
name|planner
operator|.
name|rel
argument_list|(
name|query2
argument_list|)
decl_stmt|;
specifier|final
name|PreparedStatement
name|prepare
init|=
name|context
operator|.
name|getRelRunner
argument_list|()
operator|.
name|prepare
argument_list|(
name|r
operator|.
name|rel
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
name|prepare
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
name|prepare
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
decl||
name|ValidationException
decl||
name|RelConversionException
decl||
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Returns the value of a literal, converting    * {@link NlsString} into String. */
specifier|static
name|Comparable
name|value
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
specifier|final
name|Comparable
name|v
init|=
name|SqlLiteral
operator|.
name|value
argument_list|(
name|node
argument_list|)
decl_stmt|;
return|return
name|v
operator|instanceof
name|NlsString
condition|?
operator|(
operator|(
name|NlsString
operator|)
name|v
operator|)
operator|.
name|getValue
argument_list|()
else|:
name|v
return|;
block|}
comment|/** Executes a {@code CREATE FOREIGN SCHEMA} command. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlCreateForeignSchema
name|create
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|schema
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|create
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|SchemaPlus
name|subSchema0
init|=
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
operator|.
name|getSubSchema
argument_list|(
name|pair
operator|.
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|subSchema0
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|create
operator|.
name|getReplace
argument_list|()
operator|&&
operator|!
name|create
operator|.
name|ifNotExists
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|create
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|schemaExists
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Schema
name|subSchema
decl_stmt|;
specifier|final
name|String
name|libraryName
decl_stmt|;
if|if
condition|(
name|create
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|create
operator|.
name|library
operator|==
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|String
name|typeName
init|=
operator|(
name|String
operator|)
name|value
argument_list|(
name|create
operator|.
name|type
argument_list|)
decl_stmt|;
specifier|final
name|JsonSchema
operator|.
name|Type
name|type
init|=
name|Util
operator|.
name|enumVal
argument_list|(
name|JsonSchema
operator|.
name|Type
operator|.
name|class
argument_list|,
name|typeName
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JDBC
case|:
name|libraryName
operator|=
name|JdbcSchema
operator|.
name|Factory
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
default|default:
name|libraryName
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|libraryName
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|libraryName
operator|==
literal|null
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|create
operator|.
name|type
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|schemaInvalidType
argument_list|(
name|typeName
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|JsonSchema
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|create
operator|.
name|library
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|libraryName
operator|=
operator|(
name|String
operator|)
name|value
argument_list|(
name|create
operator|.
name|library
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SchemaFactory
name|schemaFactory
init|=
name|AvaticaUtils
operator|.
name|instantiatePlugin
argument_list|(
name|SchemaFactory
operator|.
name|class
argument_list|,
name|libraryName
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|operandMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|SqlIdentifier
argument_list|,
name|SqlNode
argument_list|>
name|option
range|:
name|create
operator|.
name|options
argument_list|()
control|)
block|{
name|operandMap
operator|.
name|put
argument_list|(
name|option
operator|.
name|left
operator|.
name|getSimple
argument_list|()
argument_list|,
name|value
argument_list|(
name|option
operator|.
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subSchema
operator|=
name|schemaFactory
operator|.
name|create
argument_list|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
argument_list|,
name|pair
operator|.
name|right
argument_list|,
name|operandMap
argument_list|)
expr_stmt|;
name|pair
operator|.
name|left
operator|.
name|add
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|subSchema
argument_list|)
expr_stmt|;
block|}
comment|/** Executes a {@code CREATE FUNCTION} command. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlCreateFunction
name|create
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"CREATE FUNCTION is not supported"
argument_list|)
throw|;
block|}
comment|/** Executes {@code DROP FUNCTION}, {@code DROP TABLE},    * {@code DROP MATERIALIZED VIEW}, {@code DROP TYPE},    * {@code DROP VIEW} commands. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlDropObject
name|drop
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|schema
argument_list|(
name|context
argument_list|,
literal|false
argument_list|,
name|drop
operator|.
name|name
argument_list|)
decl_stmt|;
name|CalciteSchema
name|schema
init|=
name|pair
operator|.
name|left
decl_stmt|;
name|String
name|objectName
init|=
name|pair
operator|.
name|right
decl_stmt|;
assert|assert
name|objectName
operator|!=
literal|null
assert|;
name|boolean
name|schemaExists
init|=
name|schema
operator|!=
literal|null
decl_stmt|;
name|boolean
name|existed
decl_stmt|;
switch|switch
condition|(
name|drop
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|DROP_TABLE
case|:
case|case
name|DROP_MATERIALIZED_VIEW
case|:
name|Table
name|materializedView
init|=
name|schemaExists
operator|&&
name|drop
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|DROP_MATERIALIZED_VIEW
condition|?
name|schema
operator|.
name|plus
argument_list|()
operator|.
name|getTable
argument_list|(
name|objectName
argument_list|)
else|:
literal|null
decl_stmt|;
name|existed
operator|=
name|schemaExists
operator|&&
name|schema
operator|.
name|removeTable
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
if|if
condition|(
name|existed
condition|)
block|{
if|if
condition|(
name|materializedView
operator|instanceof
name|Wrapper
condition|)
block|{
operator|(
operator|(
name|Wrapper
operator|)
name|materializedView
operator|)
operator|.
name|maybeUnwrap
argument_list|(
name|MaterializationKey
operator|.
name|class
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|materializationKey
lambda|->
block|{
name|MaterializationService
operator|.
name|instance
argument_list|()
operator|.
name|removeMaterialization
argument_list|(
name|materializationKey
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|drop
operator|.
name|ifExists
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|drop
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|tableNotFound
argument_list|(
name|objectName
argument_list|)
argument_list|)
throw|;
block|}
break|break;
case|case
name|DROP_VIEW
case|:
comment|// Not quite right: removes any other functions with the same name
name|existed
operator|=
name|schemaExists
operator|&&
name|schema
operator|.
name|removeFunction
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existed
operator|&&
operator|!
name|drop
operator|.
name|ifExists
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|drop
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|viewNotFound
argument_list|(
name|objectName
argument_list|)
argument_list|)
throw|;
block|}
break|break;
case|case
name|DROP_TYPE
case|:
name|existed
operator|=
name|schemaExists
operator|&&
name|schema
operator|.
name|removeType
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existed
operator|&&
operator|!
name|drop
operator|.
name|ifExists
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|drop
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|typeNotFound
argument_list|(
name|objectName
argument_list|)
argument_list|)
throw|;
block|}
break|break;
case|case
name|DROP_FUNCTION
case|:
name|existed
operator|=
name|schemaExists
operator|&&
name|schema
operator|.
name|removeFunction
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existed
operator|&&
operator|!
name|drop
operator|.
name|ifExists
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|drop
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|functionNotFound
argument_list|(
name|objectName
argument_list|)
argument_list|)
throw|;
block|}
break|break;
case|case
name|OTHER_DDL
case|:
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|drop
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** Executes a {@code CREATE MATERIALIZED VIEW} command. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlCreateMaterializedView
name|create
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|schema
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|create
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
operator|.
name|getTable
argument_list|(
name|pair
operator|.
name|right
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Materialized view exists.
if|if
condition|(
operator|!
name|create
operator|.
name|ifNotExists
condition|)
block|{
comment|// They did not specify IF NOT EXISTS, so give error.
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|create
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|tableExists
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
throw|;
block|}
return|return;
block|}
specifier|final
name|SqlNode
name|q
init|=
name|renameColumns
argument_list|(
name|create
operator|.
name|columnList
argument_list|,
name|create
operator|.
name|query
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sql
init|=
name|q
operator|.
name|toSqlString
argument_list|(
name|CalciteSqlDialect
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
init|=
name|pair
operator|.
name|left
operator|.
name|path
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|ViewTableMacro
name|viewTableMacro
init|=
name|ViewTable
operator|.
name|viewMacro
argument_list|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
argument_list|,
name|sql
argument_list|,
name|schemaPath
argument_list|,
name|context
operator|.
name|getObjectPath
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TranslatableTable
name|x
init|=
name|viewTableMacro
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|x
operator|.
name|getRowType
argument_list|(
name|context
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|// Table does not exist. Create it.
specifier|final
name|MaterializedViewTable
name|table
init|=
operator|new
name|MaterializedViewTable
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|rowType
argument_list|)
argument_list|)
decl_stmt|;
name|pair
operator|.
name|left
operator|.
name|add
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|populate
argument_list|(
name|create
operator|.
name|name
argument_list|,
name|create
operator|.
name|query
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|table
operator|.
name|key
operator|=
name|MaterializationService
operator|.
name|instance
argument_list|()
operator|.
name|defineMaterialization
argument_list|(
name|pair
operator|.
name|left
argument_list|,
literal|null
argument_list|,
name|sql
argument_list|,
name|schemaPath
argument_list|,
name|pair
operator|.
name|right
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Executes a {@code CREATE SCHEMA} command. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlCreateSchema
name|create
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|schema
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|create
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|SchemaPlus
name|subSchema0
init|=
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
operator|.
name|getSubSchema
argument_list|(
name|pair
operator|.
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|subSchema0
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|ifNotExists
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|create
operator|.
name|getReplace
argument_list|()
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|create
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|schemaExists
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Schema
name|subSchema
init|=
operator|new
name|AbstractSchema
argument_list|()
decl_stmt|;
name|pair
operator|.
name|left
operator|.
name|add
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|subSchema
argument_list|)
expr_stmt|;
block|}
comment|/** Executes a {@code DROP SCHEMA} command. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlDropSchema
name|drop
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|schema
argument_list|(
name|context
argument_list|,
literal|false
argument_list|,
name|drop
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|existed
init|=
name|pair
operator|.
name|left
operator|!=
literal|null
operator|&&
name|pair
operator|.
name|left
operator|.
name|removeSubSchema
argument_list|(
name|pair
operator|.
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existed
operator|&&
operator|!
name|drop
operator|.
name|ifExists
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|drop
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|schemaNotFound
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/** Executes a {@code CREATE TABLE} command. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlCreateTable
name|create
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|schema
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|create
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|queryRowType
decl_stmt|;
if|if
condition|(
name|create
operator|.
name|query
operator|!=
literal|null
condition|)
block|{
comment|// A bit of a hack: pretend it's a view, to get its row type
specifier|final
name|String
name|sql
init|=
name|create
operator|.
name|query
operator|.
name|toSqlString
argument_list|(
name|CalciteSqlDialect
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
specifier|final
name|ViewTableMacro
name|viewTableMacro
init|=
name|ViewTable
operator|.
name|viewMacro
argument_list|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
argument_list|,
name|sql
argument_list|,
name|pair
operator|.
name|left
operator|.
name|path
argument_list|(
literal|null
argument_list|)
argument_list|,
name|context
operator|.
name|getObjectPath
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TranslatableTable
name|x
init|=
name|viewTableMacro
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|queryRowType
operator|=
name|x
operator|.
name|getRowType
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|create
operator|.
name|columnList
operator|!=
literal|null
operator|&&
name|queryRowType
operator|.
name|getFieldCount
argument_list|()
operator|!=
name|create
operator|.
name|columnList
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|create
operator|.
name|columnList
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|columnCountMismatch
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|queryRowType
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|columnList
decl_stmt|;
if|if
condition|(
name|create
operator|.
name|columnList
operator|!=
literal|null
condition|)
block|{
name|columnList
operator|=
name|create
operator|.
name|columnList
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|queryRowType
operator|==
literal|null
condition|)
block|{
comment|// "CREATE TABLE t" is invalid; because there is no "AS query" we need
comment|// a list of column names and types, "CREATE TABLE t (INT c)".
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|create
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|createTableRequiresColumnList
argument_list|()
argument_list|)
throw|;
block|}
name|columnList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|queryRowType
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|columnList
operator|.
name|add
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|name
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ColumnDef
argument_list|>
name|b
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|builder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|storedBuilder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// REVIEW 2019-08-19 Danny Chan: Should we implement the
comment|// #validate(SqlValidator) to get the SqlValidator instance?
specifier|final
name|SqlValidator
name|validator
init|=
name|validator
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|SqlNode
argument_list|>
name|c
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|columnList
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|e
operator|instanceof
name|SqlColumnDeclaration
condition|)
block|{
specifier|final
name|SqlColumnDeclaration
name|d
init|=
operator|(
name|SqlColumnDeclaration
operator|)
name|c
operator|.
name|e
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|d
operator|.
name|dataType
operator|.
name|deriveType
argument_list|(
name|validator
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|d
operator|.
name|name
operator|.
name|getSimple
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|strategy
operator|!=
name|ColumnStrategy
operator|.
name|VIRTUAL
condition|)
block|{
name|storedBuilder
operator|.
name|add
argument_list|(
name|d
operator|.
name|name
operator|.
name|getSimple
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|add
argument_list|(
name|ColumnDef
operator|.
name|of
argument_list|(
name|d
operator|.
name|expression
argument_list|,
name|type
argument_list|,
name|d
operator|.
name|strategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|.
name|e
operator|instanceof
name|SqlIdentifier
condition|)
block|{
specifier|final
name|SqlIdentifier
name|id
init|=
operator|(
name|SqlIdentifier
operator|)
name|c
operator|.
name|e
decl_stmt|;
if|if
condition|(
name|queryRowType
operator|==
literal|null
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|id
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|createTableRequiresColumnTypes
argument_list|(
name|id
operator|.
name|getSimple
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|RelDataTypeField
name|f
init|=
name|queryRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ColumnStrategy
name|strategy
init|=
name|f
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
name|ColumnStrategy
operator|.
name|NULLABLE
else|:
name|ColumnStrategy
operator|.
name|NOT_NULLABLE
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|ColumnDef
operator|.
name|of
argument_list|(
name|c
operator|.
name|e
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|,
name|strategy
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|id
operator|.
name|getSimple
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|storedBuilder
operator|.
name|add
argument_list|(
name|id
operator|.
name|getSimple
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|c
operator|.
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|final
name|RelDataType
name|rowType
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|storedRowType
init|=
name|storedBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ColumnDef
argument_list|>
name|columns
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|InitializerExpressionFactory
name|ief
init|=
operator|new
name|NullInitializerExpressionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ColumnStrategy
name|generationStrategy
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|int
name|iColumn
parameter_list|)
block|{
return|return
name|columns
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
operator|.
name|strategy
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|newColumnDefaultValue
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|int
name|iColumn
parameter_list|,
name|InitializerContext
name|context
parameter_list|)
block|{
specifier|final
name|ColumnDef
name|c
init|=
name|columns
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|expr
operator|!=
literal|null
condition|)
block|{
comment|// REVIEW Danny 2019-10-09: Should we support validation for DDL nodes?
specifier|final
name|SqlNode
name|validated
init|=
name|context
operator|.
name|validateExpression
argument_list|(
name|storedRowType
argument_list|,
name|c
operator|.
name|expr
argument_list|)
decl_stmt|;
comment|// The explicit specified type should have the same nullability
comment|// with the column expression inferred type,
comment|// actually they should be exactly the same.
return|return
name|context
operator|.
name|convertExpression
argument_list|(
name|validated
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|newColumnDefaultValue
argument_list|(
name|table
argument_list|,
name|iColumn
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
operator|.
name|getTable
argument_list|(
name|pair
operator|.
name|right
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Table exists.
if|if
condition|(
name|create
operator|.
name|ifNotExists
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|create
operator|.
name|getReplace
argument_list|()
condition|)
block|{
comment|// They did not specify IF NOT EXISTS, so give error.
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|create
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|tableExists
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// Table does not exist. Create it.
name|pair
operator|.
name|left
operator|.
name|add
argument_list|(
name|pair
operator|.
name|right
argument_list|,
operator|new
name|MutableArrayTable
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|storedRowType
argument_list|)
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|rowType
argument_list|)
argument_list|,
name|ief
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|create
operator|.
name|query
operator|!=
literal|null
condition|)
block|{
name|populate
argument_list|(
name|create
operator|.
name|name
argument_list|,
name|create
operator|.
name|query
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Executes a {@code CREATE TYPE} command. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlCreateType
name|create
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|schema
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|create
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidator
name|validator
init|=
name|validator
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|pair
operator|.
name|left
operator|.
name|add
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|typeFactory
lambda|->
block|{
if|if
condition|(
name|create
operator|.
name|dataType
operator|!=
literal|null
condition|)
block|{
return|return
name|create
operator|.
name|dataType
operator|.
name|deriveType
argument_list|(
name|validator
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|builder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlNode
name|def
range|:
name|create
operator|.
name|attributeDefs
control|)
block|{
specifier|final
name|SqlAttributeDefinition
name|attributeDef
init|=
operator|(
name|SqlAttributeDefinition
operator|)
name|def
decl_stmt|;
specifier|final
name|SqlDataTypeSpec
name|typeSpec
init|=
name|attributeDef
operator|.
name|dataType
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|typeSpec
operator|.
name|deriveType
argument_list|(
name|validator
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|attributeDef
operator|.
name|name
operator|.
name|getSimple
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** Executes a {@code CREATE VIEW} command. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlCreateView
name|create
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|schema
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|create
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|SchemaPlus
name|schemaPlus
init|=
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
decl_stmt|;
for|for
control|(
name|Function
name|function
range|:
name|schemaPlus
operator|.
name|getFunctions
argument_list|(
name|pair
operator|.
name|right
argument_list|)
control|)
block|{
if|if
condition|(
name|function
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|create
operator|.
name|getReplace
argument_list|()
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|create
operator|.
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|viewExists
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
throw|;
block|}
name|pair
operator|.
name|left
operator|.
name|removeFunction
argument_list|(
name|pair
operator|.
name|right
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|SqlNode
name|q
init|=
name|renameColumns
argument_list|(
name|create
operator|.
name|columnList
argument_list|,
name|create
operator|.
name|query
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sql
init|=
name|q
operator|.
name|toSqlString
argument_list|(
name|CalciteSqlDialect
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
specifier|final
name|ViewTableMacro
name|viewTableMacro
init|=
name|ViewTable
operator|.
name|viewMacro
argument_list|(
name|schemaPlus
argument_list|,
name|sql
argument_list|,
name|pair
operator|.
name|left
operator|.
name|path
argument_list|(
literal|null
argument_list|)
argument_list|,
name|context
operator|.
name|getObjectPath
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TranslatableTable
name|x
init|=
name|viewTableMacro
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|schemaPlus
operator|.
name|add
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|viewTableMacro
argument_list|)
expr_stmt|;
block|}
comment|/** Column definition. */
specifier|private
specifier|static
class|class
name|ColumnDef
block|{
specifier|final
name|SqlNode
name|expr
decl_stmt|;
specifier|final
name|RelDataType
name|type
decl_stmt|;
specifier|final
name|ColumnStrategy
name|strategy
decl_stmt|;
specifier|private
name|ColumnDef
parameter_list|(
name|SqlNode
name|expr
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|ColumnStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|strategy
argument_list|,
literal|"strategy"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|strategy
operator|==
name|ColumnStrategy
operator|.
name|NULLABLE
operator|||
name|strategy
operator|==
name|ColumnStrategy
operator|.
name|NOT_NULLABLE
operator|||
name|expr
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|static
name|ColumnDef
name|of
parameter_list|(
name|SqlNode
name|expr
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|ColumnStrategy
name|strategy
parameter_list|)
block|{
return|return
operator|new
name|ColumnDef
argument_list|(
name|expr
argument_list|,
name|type
argument_list|,
name|strategy
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

