begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalcitePrepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ColumnStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDataTypeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDrop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|CalciteSqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|pretty
operator|.
name|SqlPrettyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Planner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utilities concerning {@link SqlNode} for DDL.  */
end_comment

begin_class
specifier|public
class|class
name|SqlDdlNodes
block|{
specifier|private
name|SqlDdlNodes
parameter_list|()
block|{
block|}
comment|/** Creates a CREATE SCHEMA. */
specifier|public
specifier|static
name|SqlCreateSchema
name|createSchema
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateSchema
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a CREATE FOREIGN SCHEMA. */
specifier|public
specifier|static
name|SqlCreateForeignSchema
name|createForeignSchema
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNode
name|type
parameter_list|,
name|SqlNode
name|library
parameter_list|,
name|SqlNodeList
name|optionList
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateForeignSchema
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|library
argument_list|,
name|optionList
argument_list|)
return|;
block|}
comment|/** Creates a CREATE TABLE. */
specifier|public
specifier|static
name|SqlCreateTable
name|createTable
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateTable
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|,
name|query
argument_list|)
return|;
block|}
comment|/** Creates a CREATE VIEW. */
specifier|public
specifier|static
name|SqlCreateView
name|createView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateView
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|,
name|query
argument_list|)
return|;
block|}
comment|/** Creates a CREATE MATERIALIZED VIEW. */
specifier|public
specifier|static
name|SqlCreateMaterializedView
name|createMaterializedView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateMaterializedView
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|,
name|query
argument_list|)
return|;
block|}
comment|/** Creates a DROP [ FOREIGN ] SCHEMA. */
specifier|public
specifier|static
name|SqlDropSchema
name|dropSchema
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|foreign
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropSchema
argument_list|(
name|pos
argument_list|,
name|foreign
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a DROP TABLE. */
specifier|public
specifier|static
name|SqlDropTable
name|dropTable
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropTable
argument_list|(
name|pos
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a DROP VIEW. */
specifier|public
specifier|static
name|SqlDrop
name|dropView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropView
argument_list|(
name|pos
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a DROP MATERIALIZED VIEW. */
specifier|public
specifier|static
name|SqlDrop
name|dropMaterializedView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropMaterializedView
argument_list|(
name|pos
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a column declaration. */
specifier|public
specifier|static
name|SqlNode
name|column
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlDataTypeSpec
name|dataType
parameter_list|,
name|SqlNode
name|expression
parameter_list|,
name|ColumnStrategy
name|strategy
parameter_list|)
block|{
return|return
operator|new
name|SqlColumnDeclaration
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|dataType
argument_list|,
name|expression
argument_list|,
name|strategy
argument_list|)
return|;
block|}
comment|/** Creates a CHECK constraint. */
specifier|public
specifier|static
name|SqlNode
name|check
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNode
name|expression
parameter_list|)
block|{
return|return
operator|new
name|SqlCheckConstraint
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|expression
argument_list|)
return|;
block|}
comment|/** Creates a UNIQUE constraint. */
specifier|public
specifier|static
name|SqlKeyConstraint
name|unique
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|)
block|{
return|return
operator|new
name|SqlKeyConstraint
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|)
return|;
block|}
comment|/** Creates a PRIMARY KEY constraint. */
specifier|public
specifier|static
name|SqlKeyConstraint
name|primary
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|)
block|{
return|return
operator|new
name|SqlKeyConstraint
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|PRIMARY
return|;
block|}
block|}
return|;
block|}
comment|/** Returns the schema in which to create an object. */
specifier|static
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|(
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|,
name|boolean
name|mutable
parameter_list|,
name|SqlIdentifier
name|id
parameter_list|)
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|path
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isSimple
argument_list|()
condition|)
block|{
name|path
operator|=
name|context
operator|.
name|getDefaultSchemaPath
argument_list|()
expr_stmt|;
name|name
operator|=
name|id
operator|.
name|getSimple
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|Util
operator|.
name|skipLast
argument_list|(
name|id
operator|.
name|names
argument_list|)
expr_stmt|;
name|name
operator|=
name|Util
operator|.
name|last
argument_list|(
name|id
operator|.
name|names
argument_list|)
expr_stmt|;
block|}
name|CalciteSchema
name|schema
init|=
name|mutable
condition|?
name|context
operator|.
name|getMutableRootSchema
argument_list|()
else|:
name|context
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|path
control|)
block|{
name|schema
operator|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|schema
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Wraps a query to rename its columns. Used by CREATE VIEW and CREATE    * MATERIALIZED VIEW. */
specifier|static
name|SqlNode
name|renameColumns
parameter_list|(
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
if|if
condition|(
name|columnList
operator|==
literal|null
condition|)
block|{
return|return
name|query
return|;
block|}
specifier|final
name|SqlParserPos
name|p
init|=
name|query
operator|.
name|getParserPosition
argument_list|()
decl_stmt|;
specifier|final
name|SqlNodeList
name|selectList
init|=
operator|new
name|SqlNodeList
argument_list|(
name|ImmutableList
operator|.
expr|<
name|SqlNode
operator|>
name|of
argument_list|(
name|SqlIdentifier
operator|.
name|star
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|)
decl_stmt|;
specifier|final
name|SqlCall
name|from
init|=
name|SqlStdOperatorTable
operator|.
name|AS
operator|.
name|createCall
argument_list|(
name|p
argument_list|,
name|ImmutableList
operator|.
expr|<
name|SqlNode
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|query
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
literal|"_"
argument_list|,
name|p
argument_list|)
argument_list|)
operator|.
name|addAll
argument_list|(
name|columnList
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SqlSelect
argument_list|(
name|p
argument_list|,
literal|null
argument_list|,
name|selectList
argument_list|,
name|from
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Populates the table called {@code name} by executing {@code query}. */
specifier|protected
specifier|static
name|void
name|populate
parameter_list|(
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNode
name|query
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
comment|// Generate, prepare and execute an "INSERT INTO table query" statement.
comment|// (It's a bit inefficient that we convert from SqlNode to SQL and back
comment|// again.)
specifier|final
name|FrameworkConfig
name|config
init|=
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|defaultSchema
argument_list|(
name|context
operator|.
name|getRootSchema
argument_list|()
operator|.
name|plus
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Planner
name|planner
init|=
name|Frameworks
operator|.
name|getPlanner
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
specifier|final
name|SqlPrettyWriter
name|w
init|=
operator|new
name|SqlPrettyWriter
argument_list|(
name|CalciteSqlDialect
operator|.
name|DEFAULT
argument_list|,
literal|false
argument_list|,
name|pw
argument_list|)
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"INSERT INTO "
argument_list|)
expr_stmt|;
name|name
operator|.
name|unparse
argument_list|(
name|w
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|query
operator|.
name|unparse
argument_list|(
name|w
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
specifier|final
name|String
name|sql
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|query1
init|=
name|planner
operator|.
name|parse
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|query2
init|=
name|planner
operator|.
name|validate
argument_list|(
name|query1
argument_list|)
decl_stmt|;
specifier|final
name|RelRoot
name|r
init|=
name|planner
operator|.
name|rel
argument_list|(
name|query2
argument_list|)
decl_stmt|;
specifier|final
name|PreparedStatement
name|prepare
init|=
name|context
operator|.
name|getRelRunner
argument_list|()
operator|.
name|prepare
argument_list|(
name|r
operator|.
name|rel
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
name|prepare
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
name|prepare
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
decl||
name|ValidationException
decl||
name|RelConversionException
decl||
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlDdlNodes.java
end_comment

end_unit

