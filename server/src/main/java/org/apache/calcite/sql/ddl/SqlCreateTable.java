begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalcitePrepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ColumnStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ModifiableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Wrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTableQueryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCreate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExecutableStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSpecialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|CalciteSqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|NullInitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableNullableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Parse tree for {@code CREATE TABLE} statement.  */
end_comment

begin_class
specifier|public
class|class
name|SqlCreateTable
extends|extends
name|SqlCreate
implements|implements
name|SqlExecutableStatement
block|{
specifier|private
specifier|final
name|SqlIdentifier
name|name
decl_stmt|;
specifier|private
specifier|final
name|SqlNodeList
name|columnList
decl_stmt|;
specifier|private
specifier|final
name|SqlNode
name|query
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
name|OPERATOR
init|=
operator|new
name|SqlSpecialOperator
argument_list|(
literal|"CREATE TABLE"
argument_list|,
name|SqlKind
operator|.
name|CREATE_TABLE
argument_list|)
decl_stmt|;
comment|/** Creates a SqlCreateTable. */
name|SqlCreateTable
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|OPERATOR
argument_list|,
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnList
operator|=
name|columnList
expr_stmt|;
comment|// may be null
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
comment|// for "CREATE TABLE ... AS query"; may be null
block|}
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|getOperandList
parameter_list|()
block|{
return|return
name|ImmutableNullableList
operator|.
name|of
argument_list|(
name|name
argument_list|,
name|columnList
argument_list|,
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"CREATE"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"TABLE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ifNotExists
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"IF NOT EXISTS"
argument_list|)
expr_stmt|;
block|}
name|name
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnList
operator|!=
literal|null
condition|)
block|{
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
for|for
control|(
name|SqlNode
name|c
range|:
name|columnList
control|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|c
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"AS"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newlineAndIndent
argument_list|()
expr_stmt|;
name|query
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|SqlDdlNodes
operator|.
name|schema
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|queryRowType
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
comment|// A bit of a hack: pretend it's a view, to get its row type
specifier|final
name|String
name|sql
init|=
name|query
operator|.
name|toSqlString
argument_list|(
name|CalciteSqlDialect
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
specifier|final
name|ViewTableMacro
name|viewTableMacro
init|=
name|ViewTable
operator|.
name|viewMacro
argument_list|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
argument_list|,
name|sql
argument_list|,
name|pair
operator|.
name|left
operator|.
name|path
argument_list|(
literal|null
argument_list|)
argument_list|,
name|context
operator|.
name|getObjectPath
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TranslatableTable
name|x
init|=
name|viewTableMacro
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|queryRowType
operator|=
name|x
operator|.
name|getRowType
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnList
operator|!=
literal|null
operator|&&
name|queryRowType
operator|.
name|getFieldCount
argument_list|()
operator|!=
name|columnList
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|columnList
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|columnCountMismatch
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|queryRowType
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|columnList
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|columnList
operator|!=
literal|null
condition|)
block|{
name|columnList
operator|=
name|this
operator|.
name|columnList
operator|.
name|getList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|queryRowType
operator|==
literal|null
condition|)
block|{
comment|// "CREATE TABLE t" is invalid; because there is no "AS query" we need
comment|// a list of column names and types, "CREATE TABLE t (INT c)".
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|createTableRequiresColumnList
argument_list|()
argument_list|)
throw|;
block|}
name|columnList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|queryRowType
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|columnList
operator|.
name|add
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|name
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ColumnDef
argument_list|>
name|b
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|builder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|storedBuilder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// REVIEW 2019-08-19 Danny Chan: Should we implement the
comment|// #validate(SqlValidator) to get the SqlValidator instance?
specifier|final
name|SqlValidator
name|validator
init|=
name|SqlDdlNodes
operator|.
name|validator
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|SqlNode
argument_list|>
name|c
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|columnList
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|e
operator|instanceof
name|SqlColumnDeclaration
condition|)
block|{
specifier|final
name|SqlColumnDeclaration
name|d
init|=
operator|(
name|SqlColumnDeclaration
operator|)
name|c
operator|.
name|e
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|d
operator|.
name|dataType
operator|.
name|deriveType
argument_list|(
name|validator
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|d
operator|.
name|name
operator|.
name|getSimple
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|strategy
operator|!=
name|ColumnStrategy
operator|.
name|VIRTUAL
condition|)
block|{
name|storedBuilder
operator|.
name|add
argument_list|(
name|d
operator|.
name|name
operator|.
name|getSimple
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|add
argument_list|(
name|ColumnDef
operator|.
name|of
argument_list|(
name|d
operator|.
name|expression
argument_list|,
name|type
argument_list|,
name|d
operator|.
name|strategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|.
name|e
operator|instanceof
name|SqlIdentifier
condition|)
block|{
specifier|final
name|SqlIdentifier
name|id
init|=
operator|(
name|SqlIdentifier
operator|)
name|c
operator|.
name|e
decl_stmt|;
if|if
condition|(
name|queryRowType
operator|==
literal|null
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|id
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|createTableRequiresColumnTypes
argument_list|(
name|id
operator|.
name|getSimple
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|RelDataTypeField
name|f
init|=
name|queryRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ColumnStrategy
name|strategy
init|=
name|f
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
name|ColumnStrategy
operator|.
name|NULLABLE
else|:
name|ColumnStrategy
operator|.
name|NOT_NULLABLE
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|ColumnDef
operator|.
name|of
argument_list|(
name|c
operator|.
name|e
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|,
name|strategy
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|id
operator|.
name|getSimple
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|storedBuilder
operator|.
name|add
argument_list|(
name|id
operator|.
name|getSimple
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|c
operator|.
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|final
name|RelDataType
name|rowType
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|storedRowType
init|=
name|storedBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ColumnDef
argument_list|>
name|columns
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|InitializerExpressionFactory
name|ief
init|=
operator|new
name|NullInitializerExpressionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ColumnStrategy
name|generationStrategy
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|int
name|iColumn
parameter_list|)
block|{
return|return
name|columns
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
operator|.
name|strategy
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|newColumnDefaultValue
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|int
name|iColumn
parameter_list|,
name|InitializerContext
name|context
parameter_list|)
block|{
specifier|final
name|ColumnDef
name|c
init|=
name|columns
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|expr
operator|!=
literal|null
condition|)
block|{
return|return
name|context
operator|.
name|convertExpression
argument_list|(
name|c
operator|.
name|expr
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|newColumnDefaultValue
argument_list|(
name|table
argument_list|,
name|iColumn
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
operator|.
name|getTable
argument_list|(
name|pair
operator|.
name|right
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Table exists.
if|if
condition|(
operator|!
name|ifNotExists
condition|)
block|{
comment|// They did not specify IF NOT EXISTS, so give error.
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|tableExists
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
throw|;
block|}
return|return;
block|}
comment|// Table does not exist. Create it.
name|pair
operator|.
name|left
operator|.
name|add
argument_list|(
name|pair
operator|.
name|right
argument_list|,
operator|new
name|MutableArrayTable
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|storedRowType
argument_list|)
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|rowType
argument_list|)
argument_list|,
name|ief
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|SqlDdlNodes
operator|.
name|populate
argument_list|(
name|name
argument_list|,
name|query
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Column definition. */
specifier|private
specifier|static
class|class
name|ColumnDef
block|{
specifier|final
name|SqlNode
name|expr
decl_stmt|;
specifier|final
name|RelDataType
name|type
decl_stmt|;
specifier|final
name|ColumnStrategy
name|strategy
decl_stmt|;
specifier|private
name|ColumnDef
parameter_list|(
name|SqlNode
name|expr
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|ColumnStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|strategy
operator|==
name|ColumnStrategy
operator|.
name|NULLABLE
operator|||
name|strategy
operator|==
name|ColumnStrategy
operator|.
name|NOT_NULLABLE
operator|||
name|expr
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|static
name|ColumnDef
name|of
parameter_list|(
name|SqlNode
name|expr
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|ColumnStrategy
name|strategy
parameter_list|)
block|{
return|return
operator|new
name|ColumnDef
argument_list|(
name|expr
argument_list|,
name|type
argument_list|,
name|strategy
argument_list|)
return|;
block|}
block|}
comment|/** Abstract base class for implementations of {@link ModifiableTable}. */
specifier|abstract
specifier|static
class|class
name|AbstractModifiableTable
extends|extends
name|AbstractTable
implements|implements
name|ModifiableTable
block|{
name|AbstractModifiableTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableModify
name|toModificationRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|Prepare
operator|.
name|CatalogReader
name|catalogReader
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|TableModify
operator|.
name|Operation
name|operation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|updateColumnList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|sourceExpressionList
parameter_list|,
name|boolean
name|flattened
parameter_list|)
block|{
return|return
name|LogicalTableModify
operator|.
name|create
argument_list|(
name|table
argument_list|,
name|catalogReader
argument_list|,
name|child
argument_list|,
name|operation
argument_list|,
name|updateColumnList
argument_list|,
name|sourceExpressionList
argument_list|,
name|flattened
argument_list|)
return|;
block|}
block|}
comment|/** Table backed by a Java list. */
specifier|static
class|class
name|MutableArrayTable
extends|extends
name|AbstractModifiableTable
implements|implements
name|Wrapper
block|{
specifier|final
name|List
name|rows
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RelProtoDataType
name|protoStoredRowType
decl_stmt|;
specifier|private
specifier|final
name|RelProtoDataType
name|protoRowType
decl_stmt|;
specifier|private
specifier|final
name|InitializerExpressionFactory
name|initializerExpressionFactory
decl_stmt|;
comment|/** Creates a MutableArrayTable.      *      * @param name Name of table within its schema      * @param protoStoredRowType Prototype of row type of stored columns (all      *     columns except virtual columns)      * @param protoRowType Prototype of row type (all columns)      * @param initializerExpressionFactory How columns are populated      */
name|MutableArrayTable
parameter_list|(
name|String
name|name
parameter_list|,
name|RelProtoDataType
name|protoStoredRowType
parameter_list|,
name|RelProtoDataType
name|protoRowType
parameter_list|,
name|InitializerExpressionFactory
name|initializerExpressionFactory
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|protoStoredRowType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|protoStoredRowType
argument_list|)
expr_stmt|;
name|this
operator|.
name|protoRowType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|protoRowType
argument_list|)
expr_stmt|;
name|this
operator|.
name|initializerExpressionFactory
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|initializerExpressionFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
name|getModifiableCollection
parameter_list|()
block|{
return|return
name|rows
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|AbstractTableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
block|{
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
comment|//noinspection unchecked
return|return
operator|(
name|Enumerator
argument_list|<
name|T
argument_list|>
operator|)
name|Linq4j
operator|.
name|enumerator
argument_list|(
name|rows
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|Type
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|Schemas
operator|.
name|tableExpression
argument_list|(
name|schema
argument_list|,
name|getElementType
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|clazz
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|protoRowType
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|C
parameter_list|>
name|C
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
if|if
condition|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|initializerExpressionFactory
argument_list|)
condition|)
block|{
return|return
name|aClass
operator|.
name|cast
argument_list|(
name|initializerExpressionFactory
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|aClass
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlCreateTable.java
end_comment

end_unit

