begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalcitePrepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|MaterializationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCreate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExecutableStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSpecialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|CalciteSqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|NullInitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableNullableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Parse tree for {@code CREATE MATERIALIZED VIEW} statement.  */
end_comment

begin_class
specifier|public
class|class
name|SqlCreateMaterializedView
extends|extends
name|SqlCreate
implements|implements
name|SqlExecutableStatement
block|{
specifier|private
specifier|final
name|SqlIdentifier
name|name
decl_stmt|;
specifier|private
specifier|final
name|SqlNodeList
name|columnList
decl_stmt|;
specifier|private
specifier|final
name|SqlNode
name|query
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
name|OPERATOR
init|=
operator|new
name|SqlSpecialOperator
argument_list|(
literal|"CREATE MATERIALIZED VIEW"
argument_list|,
name|SqlKind
operator|.
name|CREATE_MATERIALIZED_VIEW
argument_list|)
decl_stmt|;
comment|/** Creates a SqlCreateView. */
name|SqlCreateMaterializedView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|OPERATOR
argument_list|,
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnList
operator|=
name|columnList
expr_stmt|;
comment|// may be null
name|this
operator|.
name|query
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|getOperandList
parameter_list|()
block|{
return|return
name|ImmutableNullableList
operator|.
name|of
argument_list|(
name|name
argument_list|,
name|columnList
argument_list|,
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"CREATE"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"MATERIALIZED VIEW"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ifNotExists
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"IF NOT EXISTS"
argument_list|)
expr_stmt|;
block|}
name|name
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnList
operator|!=
literal|null
condition|)
block|{
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
for|for
control|(
name|SqlNode
name|c
range|:
name|columnList
control|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|c
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|keyword
argument_list|(
literal|"AS"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newlineAndIndent
argument_list|()
expr_stmt|;
name|query
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|CalciteSchema
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|SqlDdlNodes
operator|.
name|schema
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
operator|.
name|getTable
argument_list|(
name|pair
operator|.
name|right
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Materialized view exists.
if|if
condition|(
operator|!
name|ifNotExists
condition|)
block|{
comment|// They did not specify IF NOT EXISTS, so give error.
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|name
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RESOURCE
operator|.
name|tableExists
argument_list|(
name|pair
operator|.
name|right
argument_list|)
argument_list|)
throw|;
block|}
return|return;
block|}
specifier|final
name|SqlNode
name|q
init|=
name|SqlDdlNodes
operator|.
name|renameColumns
argument_list|(
name|columnList
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sql
init|=
name|q
operator|.
name|toSqlString
argument_list|(
name|CalciteSqlDialect
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
init|=
name|pair
operator|.
name|left
operator|.
name|path
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|ViewTableMacro
name|viewTableMacro
init|=
name|ViewTable
operator|.
name|viewMacro
argument_list|(
name|pair
operator|.
name|left
operator|.
name|plus
argument_list|()
argument_list|,
name|sql
argument_list|,
name|schemaPath
argument_list|,
name|context
operator|.
name|getObjectPath
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TranslatableTable
name|x
init|=
name|viewTableMacro
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|x
operator|.
name|getRowType
argument_list|(
name|context
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|// Table does not exist. Create it.
specifier|final
name|MaterializedViewTable
name|table
init|=
operator|new
name|MaterializedViewTable
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|rowType
argument_list|)
argument_list|)
decl_stmt|;
name|pair
operator|.
name|left
operator|.
name|add
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|SqlDdlNodes
operator|.
name|populate
argument_list|(
name|name
argument_list|,
name|query
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|table
operator|.
name|key
operator|=
name|MaterializationService
operator|.
name|instance
argument_list|()
operator|.
name|defineMaterialization
argument_list|(
name|pair
operator|.
name|left
argument_list|,
literal|null
argument_list|,
name|sql
argument_list|,
name|schemaPath
argument_list|,
name|pair
operator|.
name|right
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** A table that implements a materialized view. */
specifier|private
specifier|static
class|class
name|MaterializedViewTable
extends|extends
name|SqlCreateTable
operator|.
name|MutableArrayTable
block|{
comment|/** The key with which this was stored in the materialization service,      * or null if not (yet) materialized. */
name|MaterializationKey
name|key
decl_stmt|;
name|MaterializedViewTable
parameter_list|(
name|String
name|name
parameter_list|,
name|RelProtoDataType
name|protoRowType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|protoRowType
argument_list|,
name|protoRowType
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|MATERIALIZED_VIEW
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|C
parameter_list|>
name|C
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
if|if
condition|(
name|MaterializationKey
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|aClass
argument_list|)
operator|&&
name|aClass
operator|.
name|isInstance
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|aClass
operator|.
name|cast
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|aClass
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlCreateMaterializedView.java
end_comment

end_unit

