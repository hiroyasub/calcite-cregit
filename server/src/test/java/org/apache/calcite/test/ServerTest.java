begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|ddl
operator|.
name|SqlDdlParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit tests for server and DDL.  */
end_comment

begin_class
specifier|public
class|class
name|ServerTest
block|{
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"jdbc:calcite:"
decl_stmt|;
specifier|static
name|Connection
name|connect
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|URL
argument_list|,
name|CalciteAssert
operator|.
name|propBuilder
argument_list|()
operator|.
name|set
argument_list|(
name|CalciteConnectionProperty
operator|.
name|PARSER_FACTORY
argument_list|,
name|SqlDdlParserImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"#FACTORY"
argument_list|)
operator|.
name|set
argument_list|(
name|CalciteConnectionProperty
operator|.
name|MATERIALIZATIONS_ENABLED
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatement
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|c
init|=
name|connect
argument_list|()
init|;
name|Statement
name|s
init|=
name|c
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"values 1, 2"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSchema
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|c
init|=
name|connect
argument_list|()
init|;
name|Statement
name|s
init|=
name|c
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|boolean
name|b
init|=
name|s
operator|.
name|execute
argument_list|(
literal|"create schema s"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|s
operator|.
name|execute
argument_list|(
literal|"create table s.t (i int not null)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|b
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into s.t values 1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"select count(*) from s.t"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|c
init|=
name|connect
argument_list|()
init|;
name|Statement
name|s
init|=
name|c
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|boolean
name|b
init|=
name|s
operator|.
name|execute
argument_list|(
literal|"create table t (i int not null)"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t values 1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t values 3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"select sum(i) from t"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoredGeneratedColumn
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|c
init|=
name|connect
argument_list|()
init|;
name|Statement
name|s
init|=
name|c
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|sql0
init|=
literal|"create table t (\n"
operator|+
literal|" h int not null,\n"
operator|+
literal|" i int,\n"
operator|+
literal|" j int as (i + 1) stored)"
decl_stmt|;
name|boolean
name|b
init|=
name|s
operator|.
name|execute
argument_list|(
name|sql0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|x
decl_stmt|;
comment|// A successful row.
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, i) values (3, 4)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql1
init|=
literal|"explain plan for\n"
operator|+
literal|"insert into t (h, i) values (3, 4)"
decl_stmt|;
try|try
init|(
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
name|sql1
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|plan
init|=
literal|""
operator|+
literal|"EnumerableTableModify(table=[[T]], operation=[INSERT], flattened=[false])\n"
operator|+
literal|"  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], proj#0..1=[{exprs}], J=[$t3])\n"
operator|+
literal|"    EnumerableValues(tuples=[[{ 3, 4 }]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|plan
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"select * from t"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|"H"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|wasNull
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|"I"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|"J"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// j = i + 1
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No target column list; too few values provided
try|try
block|{
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t values (2, 3)"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Number of INSERT target columns (3) does not equal "
operator|+
literal|"number of source items (2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No target column list; too many values provided
try|try
block|{
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t values (3, 4, 5, 6)"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Number of INSERT target columns (3) does not equal "
operator|+
literal|"number of source items (4)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No target column list;
comment|// source count = target count;
comment|// but one of the target columns is virtual.
try|try
block|{
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t values (3, 4, 5)"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Cannot INSERT into generated column 'J'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Explicit target column list, omits virtual column
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, i) values (1, 2)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Explicit target column list, includes virtual column but assigns
comment|// DEFAULT.
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, i, j) values (1, 2, DEFAULT)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// As previous, re-order columns.
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, j, i) values (1, DEFAULT, 3)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Target column list exists,
comment|// target column count equals the number of non-virtual columns;
comment|// but one of the target columns is virtual.
try|try
block|{
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, j) values (1, 3)"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Cannot INSERT into generated column 'J'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Target column list exists and contains all columns,
comment|// expression for virtual column is not DEFAULT.
try|try
block|{
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, i, j) values (2, 3, 3 + 1)"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Cannot INSERT into generated column 'J'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, i) values (0, 1)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, i, j) values (0, 1, DEFAULT)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (j, i, h) values (DEFAULT, NULL, 7)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, i) values (6, 5), (7, 4)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"select sum(i), count(*) from t"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"not working yet"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testStoredGeneratedColumn2
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|c
init|=
name|connect
argument_list|()
init|;
name|Statement
name|s
init|=
name|c
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|sql
init|=
literal|"create table t (\n"
operator|+
literal|" h int not null,\n"
operator|+
literal|" i int,\n"
operator|+
literal|" j int as (i + 1) stored)"
decl_stmt|;
name|boolean
name|b
init|=
name|s
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Planner uses constraint to optimize away condition.
specifier|final
name|String
name|sql2
init|=
literal|"explain plan for\n"
operator|+
literal|"select * from t where j = i + 1"
decl_stmt|;
specifier|final
name|String
name|plan
init|=
literal|"EnumerableTableScan(table=[[T]])\n"
decl_stmt|;
try|try
init|(
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
name|sql2
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|plan
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVirtualColumn
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|c
init|=
name|connect
argument_list|()
init|;
name|Statement
name|s
init|=
name|c
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|sql0
init|=
literal|"create table t (\n"
operator|+
literal|" h int not null,\n"
operator|+
literal|" i int,\n"
operator|+
literal|" j int as (i + 1) virtual)"
decl_stmt|;
name|boolean
name|b
init|=
name|s
operator|.
name|execute
argument_list|(
name|sql0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|s
operator|.
name|executeUpdate
argument_list|(
literal|"insert into t (h, i) values (1, 2)"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|x
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// In plan, "j" is replaced by "i + 1".
specifier|final
name|String
name|sql
init|=
literal|"select * from t"
decl_stmt|;
try|try
init|(
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|plan
init|=
literal|""
operator|+
literal|"EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], proj#0..1=[{exprs}], $f2=[$t3])\n"
operator|+
literal|"  EnumerableTableScan(table=[[T]])\n"
decl_stmt|;
try|try
init|(
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"explain plan for "
operator|+
name|sql
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|r
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|plan
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End ServerTest.java
end_comment

end_unit

