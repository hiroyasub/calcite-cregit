begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jsoup
operator|.
name|select
operator|.
name|Elements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Unit tests for FileReader.  */
end_comment

begin_class
specifier|public
class|class
name|FileReaderTest
block|{
specifier|static
specifier|final
name|String
name|CITIES_URI
init|=
literal|"http://en.wikipedia.org/wiki/List_of_United_States_cities_by_population"
decl_stmt|;
specifier|static
specifier|final
name|String
name|STATES_URI
init|=
literal|"http://en.wikipedia.org/wiki/List_of_states_and_territories_of_the_United_States"
decl_stmt|;
comment|/**    * Test FileReader URL instantiation - no path    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderURLNoPath
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|FileSuite
operator|.
name|hazNetwork
argument_list|()
argument_list|)
expr_stmt|;
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
name|STATES_URI
argument_list|)
decl_stmt|;
name|t
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test FileReader URL instantiation - with path    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderURLWithPath
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|FileSuite
operator|.
name|hazNetwork
argument_list|()
argument_list|)
expr_stmt|;
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
name|CITIES_URI
argument_list|,
literal|"#mw-content-text> table.wikitable.sortable"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|t
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test FileReader URL fetch    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderURLFetch
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|FileSuite
operator|.
name|hazNetwork
argument_list|()
argument_list|)
expr_stmt|;
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
name|STATES_URI
argument_list|,
literal|"#mw-content-text> table.wikitable.sortable"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Elements
name|row
range|:
name|t
control|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|==
literal|50
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test failed FileReader instantiation - malformed URL    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileReaderException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFileReaderMalURL
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
literal|"bad"
operator|+
name|CITIES_URI
argument_list|,
literal|"table:eq(4)"
argument_list|)
decl_stmt|;
name|t
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test failed FileReader instantiation - bad URL    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileReaderException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFileReaderBadURL
parameter_list|()
throws|throws
name|FileReaderException
block|{
specifier|final
name|String
name|uri
init|=
literal|"http://ex.wikipedia.org/wiki/List_of_United_States_cities_by_population"
decl_stmt|;
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
name|uri
argument_list|,
literal|"table:eq(4)"
argument_list|)
decl_stmt|;
name|t
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test failed FileReader instantiation - bad selector    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileReaderException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFileReaderBadSelector
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
literal|"file:target/test-classes/tableOK.html"
argument_list|,
literal|"table:eq(1)"
argument_list|)
decl_stmt|;
name|t
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test FileReader with static file - headings    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderHeadings
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
literal|"file:target/test-classes/tableOK.html"
argument_list|)
decl_stmt|;
name|Elements
name|headings
init|=
name|t
operator|.
name|getHeadings
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|headings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|equals
argument_list|(
literal|"H1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test FileReader with static file - data    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderData
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
literal|"file:target/test-classes/tableOK.html"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Elements
argument_list|>
name|i
init|=
name|t
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Elements
name|row
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R0C2"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R1C0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test FileReader with bad static file - headings    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderHeadingsBadFile
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
literal|"file:target/test-classes/tableNoTheadTbody.html"
argument_list|)
decl_stmt|;
name|Elements
name|headings
init|=
name|t
operator|.
name|getHeadings
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|headings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|equals
argument_list|(
literal|"H1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test FileReader with bad static file - data    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderDataBadFile
parameter_list|()
throws|throws
name|FileReaderException
block|{
specifier|final
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
literal|"file:target/test-classes/tableNoTheadTbody.html"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Elements
argument_list|>
name|i
init|=
name|t
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Elements
name|row
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R0C2"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R1C0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test FileReader with no headings static file - data    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderDataNoTH
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
literal|"file:target/test-classes/tableNoTH.html"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Elements
argument_list|>
name|i
init|=
operator|new
name|FileReader
argument_list|(
literal|"file:target/test-classes/tableNoTH.html"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Elements
name|row
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R0C2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test FileReader iterator with static file    */
annotation|@
name|Test
specifier|public
name|void
name|testFileReaderIterator
parameter_list|()
throws|throws
name|FileReaderException
block|{
name|FileReader
name|t
init|=
operator|new
name|FileReader
argument_list|(
literal|"file:target/test-classes/tableOK.html"
argument_list|)
decl_stmt|;
name|Elements
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Elements
name|aT
range|:
name|t
control|)
block|{
name|row
operator|=
name|aT
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|row
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R2C1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End FileReaderTest.java
end_comment

end_unit

