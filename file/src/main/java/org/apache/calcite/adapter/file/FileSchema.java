begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|csv
operator|.
name|CsvFilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|csv
operator|.
name|JsonScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Sources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Schema mapped onto a set of URLs / HTML tables. Each table in the schema  * is an HTML table on a URL.  */
end_comment

begin_class
class|class
name|FileSchema
extends|extends
name|AbstractSchema
block|{
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tables
decl_stmt|;
specifier|private
specifier|final
name|File
name|baseDirectory
decl_stmt|;
comment|/**    * Creates an HTML tables schema.    *    * @param parentSchema  Parent schema    * @param name          Schema name    * @param baseDirectory Base directory to look for relative files, or null    * @param tables        List containing HTML table identifiers    */
name|FileSchema
parameter_list|(
name|SchemaPlus
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|baseDirectory
parameter_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tables
parameter_list|)
block|{
name|this
operator|.
name|tables
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|tables
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseDirectory
operator|=
name|baseDirectory
expr_stmt|;
block|}
comment|/**    * Looks for a suffix on a string and returns    * either the string with the suffix removed    * or the original string.    */
specifier|private
specifier|static
name|String
name|trim
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|String
name|trimmed
init|=
name|trimOrNull
argument_list|(
name|s
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
return|return
name|trimmed
operator|!=
literal|null
condition|?
name|trimmed
else|:
name|s
return|;
block|}
comment|/**    * Looks for a suffix on a string and returns    * either the string with the suffix removed    * or null.    */
specifier|private
specifier|static
name|String
name|trimOrNull
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
name|s
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tableDef
range|:
name|this
operator|.
name|tables
control|)
block|{
name|String
name|tableName
init|=
operator|(
name|String
operator|)
name|tableDef
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
try|try
block|{
name|addTable
argument_list|(
name|builder
argument_list|,
name|tableDef
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to instantiate table for: "
operator|+
name|tableName
argument_list|)
throw|;
block|}
block|}
comment|// Look for files in the directory ending in ".csv", ".csv.gz", ".json",
comment|// ".json.gz".
specifier|final
name|Source
name|baseSource
init|=
name|Sources
operator|.
name|of
argument_list|(
name|baseDirectory
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|baseDirectory
operator|.
name|listFiles
argument_list|(
parameter_list|(
name|dir
parameter_list|,
name|name
parameter_list|)
lambda|->
block|{
specifier|final
name|String
name|nameSansGz
init|=
name|trim
argument_list|(
name|name
argument_list|,
literal|".gz"
argument_list|)
decl_stmt|;
return|return
name|nameSansGz
operator|.
name|endsWith
argument_list|(
literal|".csv"
argument_list|)
operator|||
name|nameSansGz
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"directory "
operator|+
name|baseDirectory
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
name|files
operator|=
operator|new
name|File
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// Build a map from table name to table; each file becomes a table.
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|Source
name|source
init|=
name|Sources
operator|.
name|of
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Source
name|sourceSansGz
init|=
name|source
operator|.
name|trim
argument_list|(
literal|".gz"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|sourceSansJson
init|=
name|sourceSansGz
operator|.
name|trimOrNull
argument_list|(
literal|".json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceSansJson
operator|!=
literal|null
condition|)
block|{
name|addTable
argument_list|(
name|builder
argument_list|,
name|source
argument_list|,
name|sourceSansJson
operator|.
name|relative
argument_list|(
name|baseSource
argument_list|)
operator|.
name|path
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Source
name|sourceSansCsv
init|=
name|sourceSansGz
operator|.
name|trimOrNull
argument_list|(
literal|".csv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceSansCsv
operator|!=
literal|null
condition|)
block|{
name|addTable
argument_list|(
name|builder
argument_list|,
name|source
argument_list|,
name|sourceSansCsv
operator|.
name|relative
argument_list|(
name|baseSource
argument_list|)
operator|.
name|path
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|addTable
parameter_list|(
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tableDef
parameter_list|)
throws|throws
name|MalformedURLException
block|{
specifier|final
name|String
name|tableName
init|=
operator|(
name|String
operator|)
name|tableDef
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|url
init|=
operator|(
name|String
operator|)
name|tableDef
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|source0
init|=
name|Sources
operator|.
name|url
argument_list|(
name|url
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|source
decl_stmt|;
if|if
condition|(
name|baseDirectory
operator|==
literal|null
condition|)
block|{
name|source
operator|=
name|source0
expr_stmt|;
block|}
else|else
block|{
name|source
operator|=
name|Sources
operator|.
name|of
argument_list|(
name|baseDirectory
argument_list|)
operator|.
name|append
argument_list|(
name|source0
argument_list|)
expr_stmt|;
block|}
return|return
name|addTable
argument_list|(
name|builder
argument_list|,
name|source
argument_list|,
name|tableName
argument_list|,
name|tableDef
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|addTable
parameter_list|(
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
parameter_list|,
name|Source
name|source
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tableDef
parameter_list|)
block|{
specifier|final
name|Source
name|sourceSansGz
init|=
name|source
operator|.
name|trim
argument_list|(
literal|".gz"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|sourceSansJson
init|=
name|sourceSansGz
operator|.
name|trimOrNull
argument_list|(
literal|".json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceSansJson
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Table
name|table
init|=
operator|new
name|JsonScannableTable
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Util
operator|.
name|first
argument_list|(
name|tableName
argument_list|,
name|sourceSansJson
operator|.
name|path
argument_list|()
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|Source
name|sourceSansCsv
init|=
name|sourceSansGz
operator|.
name|trimOrNull
argument_list|(
literal|".csv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceSansCsv
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Table
name|table
init|=
operator|new
name|CsvFilterableTable
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Util
operator|.
name|first
argument_list|(
name|tableName
argument_list|,
name|sourceSansCsv
operator|.
name|path
argument_list|()
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tableDef
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|FileTable
name|table
init|=
name|FileTable
operator|.
name|create
argument_list|(
name|source
argument_list|,
name|tableDef
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Util
operator|.
name|first
argument_list|(
name|tableName
argument_list|,
name|source
operator|.
name|path
argument_list|()
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to instantiate table for: "
operator|+
name|tableName
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_comment
comment|// End FileSchema.java
end_comment

end_unit

