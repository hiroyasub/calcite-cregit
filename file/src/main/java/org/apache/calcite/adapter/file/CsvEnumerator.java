begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableNullableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|time
operator|.
name|FastDateFormat
import|;
end_import

begin_import
import|import
name|au
operator|.
name|com
operator|.
name|bytecode
operator|.
name|opencsv
operator|.
name|CSVReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_comment
comment|/** Enumerator that reads from a CSV file.  *  * @param<E> Row type  */
end_comment

begin_class
specifier|public
class|class
name|CsvEnumerator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Enumerator
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|CalciteLogger
name|LOGGER
init|=
operator|new
name|CalciteLogger
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CsvEnumerator
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CSVReader
name|reader
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|List
argument_list|<
annotation|@
name|Nullable
name|String
argument_list|>
name|filterValues
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|cancelFlag
decl_stmt|;
specifier|private
specifier|final
name|RowConverter
argument_list|<
name|E
argument_list|>
name|rowConverter
decl_stmt|;
specifier|private
annotation|@
name|Nullable
name|E
name|current
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FastDateFormat
name|TIME_FORMAT_DATE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FastDateFormat
name|TIME_FORMAT_TIME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FastDateFormat
name|TIME_FORMAT_TIMESTAMP
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|DECIMAL_TYPE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\"decimal\\(([0-9]+),([0-9]+)\\)"
argument_list|)
decl_stmt|;
static|static
block|{
specifier|final
name|TimeZone
name|gmt
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
decl_stmt|;
name|TIME_FORMAT_DATE
operator|=
name|FastDateFormat
operator|.
name|getInstance
argument_list|(
literal|"yyyy-MM-dd"
argument_list|,
name|gmt
argument_list|)
expr_stmt|;
name|TIME_FORMAT_TIME
operator|=
name|FastDateFormat
operator|.
name|getInstance
argument_list|(
literal|"HH:mm:ss"
argument_list|,
name|gmt
argument_list|)
expr_stmt|;
name|TIME_FORMAT_TIMESTAMP
operator|=
name|FastDateFormat
operator|.
name|getInstance
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|,
name|gmt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CsvEnumerator
parameter_list|(
name|Source
name|source
parameter_list|,
name|AtomicBoolean
name|cancelFlag
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldTypes
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|fields
parameter_list|)
block|{
comment|//noinspection unchecked
name|this
argument_list|(
name|source
argument_list|,
name|cancelFlag
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|(
name|RowConverter
argument_list|<
name|E
argument_list|>
operator|)
name|converter
argument_list|(
name|fieldTypes
argument_list|,
name|fields
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CsvEnumerator
argument_list|(
name|Source
name|source
argument_list|,
name|AtomicBoolean
name|cancelFlag
argument_list|,
name|boolean
name|stream
argument_list|,
annotation|@
name|Nullable
name|String
expr|@
name|Nullable
index|[]
name|filterValues
argument_list|,
name|RowConverter
argument_list|<
name|E
argument_list|>
name|rowConverter
argument_list|)
block|{
name|this
operator|.
name|cancelFlag
operator|=
name|cancelFlag
block|;
name|this
operator|.
name|rowConverter
operator|=
name|rowConverter
block|;
name|this
operator|.
name|filterValues
operator|=
name|filterValues
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|filterValues
argument_list|)
block|;
try|try
block|{
if|if
condition|(
name|stream
condition|)
block|{
name|this
operator|.
name|reader
operator|=
operator|new
name|CsvStreamReader
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|reader
operator|=
name|openCsv
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|reader
operator|.
name|readNext
parameter_list|()
constructor_decl|;
comment|// skip header row
block|}
end_class

begin_catch
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
end_catch

begin_function
unit|}    private
specifier|static
name|RowConverter
argument_list|<
name|?
argument_list|>
name|converter
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldTypes
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|int
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|SingleColumnRowConverter
argument_list|(
name|fieldTypes
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|arrayConverter
argument_list|(
name|fieldTypes
argument_list|,
name|fields
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|RowConverter
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|arrayConverter
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldTypes
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|fields
parameter_list|,
name|boolean
name|stream
parameter_list|)
block|{
return|return
operator|new
name|ArrayRowConverter
argument_list|(
name|fieldTypes
argument_list|,
name|fields
argument_list|,
name|stream
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Deduces the names and types of a table's columns by reading the first line    * of a CSV file. */
end_comment

begin_function
specifier|public
specifier|static
name|RelDataType
name|deduceRowType
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|Source
name|source
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldTypes
parameter_list|,
name|Boolean
name|stream
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|FileSchemaFactory
operator|.
name|ROWTIME_COLUMN_NAME
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|CSVReader
name|reader
init|=
name|openCsv
argument_list|(
name|source
argument_list|)
init|)
block|{
name|String
index|[]
name|strings
init|=
name|reader
operator|.
name|readNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|strings
operator|==
literal|null
condition|)
block|{
name|strings
operator|=
operator|new
name|String
index|[]
block|{
literal|"EmptyFileHasNoColumns:boolean"
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|string
range|:
name|strings
control|)
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|RelDataType
name|fieldType
decl_stmt|;
specifier|final
name|int
name|colon
init|=
name|string
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>=
literal|0
condition|)
block|{
name|name
operator|=
name|string
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
expr_stmt|;
name|String
name|typeString
init|=
name|string
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Matcher
name|decimalMatcher
init|=
name|DECIMAL_TYPE_PATTERN
operator|.
name|matcher
argument_list|(
name|typeString
argument_list|)
decl_stmt|;
if|if
condition|(
name|decimalMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|precision
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|decimalMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|scale
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|decimalMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|fieldType
operator|=
name|parseDecimalSqlType
argument_list|(
name|typeFactory
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|typeString
condition|)
block|{
case|case
literal|"string"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"boolean"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"byte"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"char"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"short"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"int"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"long"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"float"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"double"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"date"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"timestamp"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"time"
case|:
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Found unknown type: {} in file: {} for column: {}. Will assume the type of "
operator|+
literal|"column is string."
argument_list|,
name|typeString
argument_list|,
name|source
operator|.
name|path
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|fieldType
operator|=
name|toNullableRelDataType
argument_list|(
name|typeFactory
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|name
operator|=
name|string
expr_stmt|;
name|fieldType
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|fieldType
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldTypes
operator|!=
literal|null
condition|)
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|fieldType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
literal|"line"
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|names
argument_list|,
name|types
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|CSVReader
name|openCsv
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|source
argument_list|,
literal|"source"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CSVReader
argument_list|(
name|source
operator|.
name|reader
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|E
name|current
parameter_list|()
block|{
return|return
name|castNonNull
argument_list|(
name|current
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
try|try
block|{
name|outer
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|cancelFlag
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
index|[]
name|strings
init|=
name|reader
operator|.
name|readNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|strings
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|CsvStreamReader
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|CsvStreamReader
operator|.
name|DEFAULT_MONITOR_DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
continue|continue;
block|}
name|current
operator|=
literal|null
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|filterValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|filterValue
init|=
name|filterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|filterValue
operator|.
name|equals
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
condition|)
block|{
continue|continue
name|outer
continue|;
block|}
block|}
block|}
block|}
name|current
operator|=
name|rowConverter
operator|.
name|convertRow
argument_list|(
name|strings
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error closing CSV reader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/** Returns an array of integers {0, ..., n - 1}. */
end_comment

begin_function
specifier|public
specifier|static
name|int
index|[]
name|identityList
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|int
index|[]
name|integers
init|=
operator|new
name|int
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|integers
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
return|return
name|integers
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|RelDataType
name|toNullableRelDataType
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|SqlTypeName
name|sqlTypeName
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|sqlTypeName
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Row converter.    *    * @param<E> element type */
end_comment

begin_class
specifier|abstract
specifier|static
class|class
name|RowConverter
parameter_list|<
name|E
parameter_list|>
block|{
specifier|abstract
name|E
name|convertRow
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|rows
parameter_list|)
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JavaUtilDate"
argument_list|)
specifier|protected
annotation|@
name|Nullable
name|Object
name|convert
parameter_list|(
annotation|@
name|Nullable
name|RelDataType
name|fieldType
parameter_list|,
annotation|@
name|Nullable
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|fieldType
operator|==
literal|null
operator|||
name|string
operator|==
literal|null
condition|)
block|{
return|return
name|string
return|;
block|}
switch|switch
condition|(
name|fieldType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|string
argument_list|)
return|;
case|case
name|TINYINT
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Byte
operator|.
name|parseByte
argument_list|(
name|string
argument_list|)
return|;
case|case
name|SMALLINT
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Short
operator|.
name|parseShort
argument_list|(
name|string
argument_list|)
return|;
case|case
name|INTEGER
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|string
argument_list|)
return|;
case|case
name|BIGINT
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|string
argument_list|)
return|;
case|case
name|FLOAT
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|string
argument_list|)
return|;
case|case
name|DOUBLE
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|string
argument_list|)
return|;
case|case
name|DECIMAL
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|parseDecimal
argument_list|(
name|fieldType
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|fieldType
operator|.
name|getScale
argument_list|()
argument_list|,
name|string
argument_list|)
return|;
case|case
name|DATE
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Date
name|date
init|=
name|TIME_FORMAT_DATE
operator|.
name|parse
argument_list|(
name|string
argument_list|)
decl_stmt|;
return|return
operator|(
name|int
operator|)
operator|(
name|date
operator|.
name|getTime
argument_list|()
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
case|case
name|TIME
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Date
name|date
init|=
name|TIME_FORMAT_TIME
operator|.
name|parse
argument_list|(
name|string
argument_list|)
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|date
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Date
name|date
init|=
name|TIME_FORMAT_TIMESTAMP
operator|.
name|parse
argument_list|(
name|string
argument_list|)
decl_stmt|;
return|return
name|date
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
case|case
name|VARCHAR
case|:
default|default:
return|return
name|string
return|;
block|}
block|}
block|}
end_class

begin_function
specifier|private
specifier|static
name|RelDataType
name|parseDecimalSqlType
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|precision
operator|>
literal|0
argument_list|,
literal|"DECIMAL type must have precision> 0. Found %s"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|scale
operator|>=
literal|0
argument_list|,
literal|"DECIMAL type must have scale>= 0. Found %s"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|precision
operator|>=
name|scale
argument_list|,
literal|"DECIMAL type must have precision>= scale. Found precision (%s) and scale (%s)."
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
specifier|protected
specifier|static
name|BigDecimal
name|parseDecimal
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|,
name|String
name|string
parameter_list|)
block|{
name|BigDecimal
name|result
init|=
operator|new
name|BigDecimal
argument_list|(
name|string
argument_list|)
decl_stmt|;
comment|// If the parsed value has more fractional digits than the specified scale, round ties away
comment|// from 0.
if|if
condition|(
name|result
operator|.
name|scale
argument_list|()
operator|>
name|scale
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Decimal value {} exceeds declared scale ({}). Performing rounding to keep the "
operator|+
literal|"first {} fractional digits."
argument_list|,
name|result
argument_list|,
name|scale
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
expr_stmt|;
block|}
comment|// Throws an exception if the parsed value has more digits to the left of the decimal point
comment|// than the specified value.
if|if
condition|(
name|result
operator|.
name|precision
argument_list|()
operator|-
name|result
operator|.
name|scale
argument_list|()
operator|>
name|precision
operator|-
name|scale
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Decimal value %s exceeds declared precision (%d) and scale (%d)."
argument_list|,
name|result
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/** Array row converter. */
end_comment

begin_class
specifier|static
class|class
name|ArrayRowConverter
extends|extends
name|RowConverter
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
block|{
comment|/** Field types. List must not be null, but any element may be null. */
specifier|private
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldTypes
decl_stmt|;
specifier|private
specifier|final
name|ImmutableIntList
name|fields
decl_stmt|;
comment|/** Whether the row to convert is from a stream. */
specifier|private
specifier|final
name|boolean
name|stream
decl_stmt|;
name|ArrayRowConverter
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldTypes
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|fields
parameter_list|,
name|boolean
name|stream
parameter_list|)
block|{
name|this
operator|.
name|fieldTypes
operator|=
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|fieldTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|convertRow
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|strings
parameter_list|)
block|{
if|if
condition|(
name|stream
condition|)
block|{
return|return
name|convertStreamRow
argument_list|(
name|strings
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|convertNormalRow
argument_list|(
name|strings
argument_list|)
return|;
block|}
block|}
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|convertNormalRow
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|strings
parameter_list|)
block|{
specifier|final
annotation|@
name|Nullable
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|objects
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|fieldTypes
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|,
name|strings
index|[
name|field
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|objects
return|;
block|}
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|convertStreamRow
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|strings
parameter_list|)
block|{
specifier|final
annotation|@
name|Nullable
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|objects
index|[
literal|0
index|]
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|objects
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|convert
argument_list|(
name|fieldTypes
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|,
name|strings
index|[
name|field
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|objects
return|;
block|}
block|}
end_class

begin_comment
comment|/** Single column row converter. */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|SingleColumnRowConverter
extends|extends
name|RowConverter
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|RelDataType
name|fieldType
decl_stmt|;
specifier|private
specifier|final
name|int
name|fieldIndex
decl_stmt|;
specifier|private
name|SingleColumnRowConverter
parameter_list|(
name|RelDataType
name|fieldType
parameter_list|,
name|int
name|fieldIndex
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
name|this
operator|.
name|fieldIndex
operator|=
name|fieldIndex
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Object
name|convertRow
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|strings
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|fieldType
argument_list|,
name|strings
index|[
name|fieldIndex
index|]
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

