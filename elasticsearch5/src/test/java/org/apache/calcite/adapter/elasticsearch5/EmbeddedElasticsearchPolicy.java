begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch5
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Junit rule that is used to initialize a single Elasticsearch node for tests.  *  *<p>For performance reasons (node startup costs),  * the same instance is usually shared across multiple tests.  *  *<p>This rule should be used as follows:  *<pre>  *  *  public class MyTest {  *&#64;ClassRule  *    public static final ElasticSearchRule RULE = ElasticSearchRule.create();  *  *&#64;BeforeClass  *    public static void setup() {  *       // ... populate instance  *    }  *  *&#64;Test  *    public void myTest() {  *      TransportAddress address = RULE.httpAddress();  *      // .... (connect to ES)  *    }  *  }  *</pre>  *  * @see ExternalResource  */
end_comment

begin_class
class|class
name|EmbeddedElasticsearchPolicy
extends|extends
name|ExternalResource
block|{
specifier|private
specifier|final
name|EmbeddedElasticsearchNode
name|node
decl_stmt|;
specifier|private
name|EmbeddedElasticsearchPolicy
parameter_list|(
name|EmbeddedElasticsearchNode
name|resource
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|resource
argument_list|,
literal|"resource"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
name|node
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|after
parameter_list|()
block|{
try|try
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Factory method to create this rule.    *    * @return new rule instance to be used in unit tests    */
specifier|public
specifier|static
name|EmbeddedElasticsearchPolicy
name|create
parameter_list|()
block|{
return|return
operator|new
name|EmbeddedElasticsearchPolicy
argument_list|(
name|EmbeddedElasticsearchNode
operator|.
name|create
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Exposes current ES transport client.    * @return running (and initialized) instance of ES node    */
name|Client
name|client
parameter_list|()
block|{
return|return
name|node
operator|.
name|client
argument_list|()
return|;
block|}
comment|/**    * HTTP address for rest clients (can be ES native or any other).    *    * @return {@code HTTP} connection parameters    */
name|TransportAddress
name|httpAddress
parameter_list|()
block|{
return|return
name|node
operator|.
name|httpAddress
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End EmbeddedElasticsearchPolicy.java
end_comment

end_unit

