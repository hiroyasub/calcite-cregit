begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|geode
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFieldImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|pdx
operator|.
name|PdxInstance
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link JavaTypeFactory}.  *  *<p><strong>NOTE: This class is experimental and subject to  * change/removal without notice</strong>.</p>  */
end_comment

begin_class
specifier|public
class|class
name|JavaTypeFactoryExtImpl
extends|extends
name|JavaTypeFactoryImpl
block|{
comment|/**    * See<a href="http://stackoverflow.com/questions/16966629/what-is-the-difference-between-getfields-and-getdeclaredfields-in-java-reflectio">    *   the difference between fields and declared fields</a>.    */
annotation|@
name|Override
specifier|public
name|RelDataType
name|createStructType
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|type
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
comment|// FIXME: watch out for recursion
specifier|final
name|Type
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|RelDataTypeFieldImpl
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|createType
argument_list|(
name|fieldType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|canonize
argument_list|(
operator|new
name|JavaRecordType
argument_list|(
name|list
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|createPdxType
parameter_list|(
name|PdxInstance
name|pdxInstance
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|pdxInstance
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|Object
name|field
init|=
name|pdxInstance
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Type
name|fieldType
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|fieldType
operator|=
name|String
operator|.
name|class
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|instanceof
name|PdxInstance
condition|)
block|{
comment|// Map Nested PDX structures as String. This relates with
comment|// GeodeUtils.convert case when clazz is Null.
name|fieldType
operator|=
name|Map
operator|.
name|class
expr_stmt|;
comment|// RelDataType boza = createPdxType((PdxInstance) field);
block|}
else|else
block|{
name|fieldType
operator|=
name|field
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
operator|new
name|RelDataTypeFieldImpl
argument_list|(
name|fieldName
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|createType
argument_list|(
name|fieldType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|canonize
argument_list|(
operator|new
name|RelRecordType
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
comment|// Experimental flattering the nested structures.
specifier|public
name|RelDataType
name|createPdxType2
parameter_list|(
name|PdxInstance
name|pdxInstance
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|recursiveCreatePdxType
argument_list|(
name|pdxInstance
argument_list|,
name|list
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|canonize
argument_list|(
operator|new
name|RelRecordType
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|recursiveCreatePdxType
parameter_list|(
name|PdxInstance
name|pdxInstance
parameter_list|,
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|list
parameter_list|,
name|String
name|fieldNamePrefix
parameter_list|)
block|{
for|for
control|(
name|String
name|fieldName
range|:
name|pdxInstance
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|Object
name|field
init|=
name|pdxInstance
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
specifier|final
name|Type
name|fieldType
init|=
name|field
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldType
operator|instanceof
name|PdxInstance
condition|)
block|{
name|recursiveCreatePdxType
argument_list|(
operator|(
name|PdxInstance
operator|)
name|field
argument_list|,
name|list
argument_list|,
name|fieldNamePrefix
operator|+
name|fieldName
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|RelDataTypeFieldImpl
argument_list|(
name|fieldNamePrefix
operator|+
name|fieldName
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|createType
argument_list|(
name|fieldType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

