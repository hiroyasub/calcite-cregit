begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|geode
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|cache
operator|.
name|client
operator|.
name|ClientCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|cache
operator|.
name|query
operator|.
name|QueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|cache
operator|.
name|query
operator|.
name|SelectResults
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Geode Simple Enumerator.  *  * @param<E> Element type  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GeodeSimpleEnumerator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Enumerator
argument_list|<
name|E
argument_list|>
block|{
specifier|private
name|Iterator
name|results
decl_stmt|;
specifier|private
name|E
name|current
decl_stmt|;
specifier|private
name|ClientCache
name|clientCache
decl_stmt|;
specifier|public
name|GeodeSimpleEnumerator
parameter_list|(
name|ClientCache
name|clientCache
parameter_list|,
name|String
name|regionName
parameter_list|)
block|{
name|this
operator|.
name|clientCache
operator|=
name|clientCache
expr_stmt|;
name|QueryService
name|queryService
init|=
name|clientCache
operator|.
name|getQueryService
argument_list|()
decl_stmt|;
name|String
name|oql
init|=
literal|"select * from /"
operator|+
name|regionName
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
block|{
name|results
operator|=
operator|(
operator|(
name|SelectResults
operator|)
name|queryService
operator|.
name|newQuery
argument_list|(
name|oql
argument_list|)
operator|.
name|execute
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|results
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|E
name|current
parameter_list|()
block|{
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
if|if
condition|(
name|results
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|convert
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|current
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|/*clientCache.close(); */
block|}
specifier|public
specifier|abstract
name|E
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
block|}
end_class

end_unit

