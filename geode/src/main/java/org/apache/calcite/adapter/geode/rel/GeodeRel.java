begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|geode
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Relational expression that uses Geode calling convention.  */
end_comment

begin_interface
specifier|public
interface|interface
name|GeodeRel
extends|extends
name|RelNode
block|{
comment|/**    * Calling convention for relational operations that occur in Geode.    */
name|Convention
name|CONVENTION
init|=
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"GEODE"
argument_list|,
name|GeodeRel
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Callback for the implementation process that collects the context from the    * {@link GeodeRel} required to convert the relational tree into physical such.    *    * @param geodeImplementContext Context class that collects the feedback from the    *                              call back method calls    */
name|void
name|implement
parameter_list|(
name|GeodeImplementContext
name|geodeImplementContext
parameter_list|)
function_decl|;
comment|/**    * Shared context used by the {@link GeodeRel} relations.    *    *<p>Callback context class for the implementation process that converts a    * tree of {@code GeodeRel} nodes into an OQL query.    */
class|class
name|GeodeImplementContext
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|selectFields
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|whereClause
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|orderByFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupByFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oqlAggregateFunctions
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Long
name|limitValue
decl_stmt|;
name|RelOptTable
name|table
decl_stmt|;
name|GeodeTable
name|geodeTable
decl_stmt|;
comment|/**      * Adds new projected fields.      *      * @param fields New fields to be projected from a query      */
specifier|public
name|void
name|addSelectFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|selectFields
operator|.
name|putAll
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds new  restricted predicates.      *      * @param predicates New predicates to be applied to the query      */
specifier|public
name|void
name|addPredicates
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|predicates
parameter_list|)
block|{
if|if
condition|(
name|predicates
operator|!=
literal|null
condition|)
block|{
name|whereClause
operator|.
name|addAll
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addOrderByFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|orderByFieldLists
parameter_list|)
block|{
name|orderByFields
operator|.
name|addAll
argument_list|(
name|orderByFieldLists
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|long
name|limit
parameter_list|)
block|{
name|limitValue
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|void
name|addGroupBy
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groupByFields
parameter_list|)
block|{
name|this
operator|.
name|groupByFields
operator|.
name|addAll
argument_list|(
name|groupByFields
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAggregateFunctions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oqlAggregateFunctions
parameter_list|)
block|{
name|this
operator|.
name|oqlAggregateFunctions
operator|.
name|putAll
argument_list|(
name|oqlAggregateFunctions
argument_list|)
expr_stmt|;
block|}
name|void
name|visitChild
parameter_list|(
name|RelNode
name|input
parameter_list|)
block|{
operator|(
operator|(
name|GeodeRel
operator|)
name|input
operator|)
operator|.
name|implement
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GeodeImplementContext{"
operator|+
literal|"selectFields="
operator|+
name|selectFields
operator|+
literal|", whereClause="
operator|+
name|whereClause
operator|+
literal|", orderByFields="
operator|+
name|orderByFields
operator|+
literal|", limitValue='"
operator|+
name|limitValue
operator|+
literal|'\''
operator|+
literal|", groupByFields="
operator|+
name|groupByFields
operator|+
literal|", table="
operator|+
name|table
operator|+
literal|", geodeTable="
operator|+
name|geodeTable
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_interface

end_unit

