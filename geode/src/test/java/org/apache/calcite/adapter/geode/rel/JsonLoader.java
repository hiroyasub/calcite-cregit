begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|geode
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|cache
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|pdx
operator|.
name|PdxInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|pdx
operator|.
name|PdxInstanceFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Populates a geode region from a file having JSON entries (line by line).  */
end_comment

begin_class
class|class
name|JsonLoader
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_PACKATE
init|=
literal|"org.apache.calcite.adapter.geode"
decl_stmt|;
specifier|private
specifier|final
name|String
name|rootPackage
decl_stmt|;
specifier|private
specifier|final
name|Region
name|region
decl_stmt|;
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
name|JsonLoader
parameter_list|(
name|Region
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|region
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|region
argument_list|,
literal|"region"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootPackage
operator|=
name|ROOT_PACKATE
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|load
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|reader
argument_list|,
literal|"reader"
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Map
argument_list|>
name|mapList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
init|;
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|Map
name|jsonMap
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|line
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|mapList
operator|.
name|add
argument_list|(
name|jsonMap
argument_list|)
expr_stmt|;
block|}
name|loadMapList
argument_list|(
name|mapList
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|loadMapList
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|>
name|mapList
parameter_list|)
block|{
name|int
name|key
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
name|jsonMap
range|:
name|mapList
control|)
block|{
name|PdxInstance
name|pdxInstance
init|=
name|mapToPdx
argument_list|(
name|rootPackage
argument_list|,
name|jsonMap
argument_list|)
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
name|key
operator|++
argument_list|,
name|pdxInstance
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|loadClasspathResource
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|location
argument_list|,
literal|"location"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|location
operator|+
literal|" not found in the classpath"
argument_list|)
throw|;
block|}
name|load
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PdxInstance
name|mapToPdx
parameter_list|(
name|String
name|packageName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|PdxInstanceFactory
name|pdxBuilder
init|=
name|region
operator|.
name|getRegionService
argument_list|()
operator|.
name|createPdxInstanceFactory
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|pdxBuilder
operator|.
name|writeObject
argument_list|(
name|name
argument_list|,
name|mapToPdx
argument_list|(
name|packageName
operator|+
literal|"."
operator|+
name|name
argument_list|,
operator|(
name|Map
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pdxBuilder
operator|.
name|writeObject
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pdxBuilder
operator|.
name|create
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End JsonLoader.java
end_comment

end_unit

