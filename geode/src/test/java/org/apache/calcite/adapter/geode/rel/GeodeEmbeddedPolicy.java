begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|geode
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|cache
operator|.
name|CacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|distributed
operator|.
name|AbstractLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geode
operator|.
name|distributed
operator|.
name|ServerLauncher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Manages embedded Geode instance using native {@link ServerLauncher}.  */
end_comment

begin_class
specifier|public
class|class
name|GeodeEmbeddedPolicy
extends|extends
name|ExternalResource
block|{
specifier|private
specifier|final
name|ServerLauncher
name|launcher
decl_stmt|;
specifier|private
name|GeodeEmbeddedPolicy
parameter_list|(
specifier|final
name|ServerLauncher
name|launcher
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|launcher
argument_list|,
literal|"launcher"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|launcher
operator|.
name|isRunning
argument_list|()
argument_list|,
literal|"Launcher process is already running"
argument_list|)
expr_stmt|;
name|this
operator|.
name|launcher
operator|=
name|launcher
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|before
parameter_list|()
block|{
name|requireStatus
argument_list|(
name|AbstractLauncher
operator|.
name|Status
operator|.
name|NOT_RESPONDING
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|after
parameter_list|()
block|{
if|if
condition|(
name|launcher
operator|.
name|status
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|AbstractLauncher
operator|.
name|Status
operator|.
name|ONLINE
condition|)
block|{
name|CacheFactory
operator|.
name|getAnyInstance
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Path
name|pidFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|launcher
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"vf.gf.server.pid"
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|pidFile
argument_list|)
condition|)
block|{
comment|// delete PID file. Otherwise ("next") geode instance complains about existing process
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|pidFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Allows this instance to be shared by multiple test classes (in parallel). Guarantees that    * {@code before()} and {@code after()} methods will be called only once. This setup is useful    * for maven (surefire) plugin which executes tests in parallel (including {@code @ClassRule}    * methods) and may initialize (or destroy) same resource multiple times.    */
name|GeodeEmbeddedPolicy
name|share
parameter_list|()
block|{
return|return
operator|new
name|RefCountPolicy
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Returns current cache instance which was initialized for tests.    * @throws IllegalStateException if server process didn't start    */
name|Cache
name|cache
parameter_list|()
block|{
name|requireStatus
argument_list|(
name|AbstractLauncher
operator|.
name|Status
operator|.
name|ONLINE
argument_list|)
expr_stmt|;
return|return
name|CacheFactory
operator|.
name|getAnyInstance
argument_list|()
return|;
block|}
specifier|private
name|void
name|requireStatus
parameter_list|(
name|AbstractLauncher
operator|.
name|Status
name|expected
parameter_list|)
block|{
specifier|final
name|AbstractLauncher
operator|.
name|Status
name|current
init|=
name|launcher
operator|.
name|status
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|current
operator|==
name|expected
argument_list|,
literal|"Expected state %s but got %s"
argument_list|,
name|expected
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
specifier|static
name|GeodeEmbeddedPolicy
name|create
parameter_list|()
block|{
specifier|final
name|ServerLauncher
name|launcher
init|=
operator|new
name|ServerLauncher
operator|.
name|Builder
argument_list|()
operator|.
name|setMemberName
argument_list|(
literal|"fake-geode"
argument_list|)
operator|.
name|set
argument_list|(
literal|"log-file"
argument_list|,
literal|""
argument_list|)
comment|// log to stdout
operator|.
name|set
argument_list|(
literal|"log-level"
argument_list|,
literal|"severe"
argument_list|)
comment|// minimal logging
operator|.
name|set
argument_list|(
literal|"bind-address"
argument_list|,
literal|"127.0.0.1"
argument_list|)
comment|// accept internal connections only
operator|.
name|setServerPort
argument_list|(
literal|0
argument_list|)
comment|// bind to any available port
operator|.
name|setPdxPersistent
argument_list|(
literal|false
argument_list|)
operator|.
name|setPdxReadSerialized
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|GeodeEmbeddedPolicy
argument_list|(
name|launcher
argument_list|)
return|;
block|}
comment|/**    * Calls {@code before()} and {@code after()} methods only once (for first and last subscriber    * respectively). The implementation counts number of times {@link #before()} was called    * which determines number of "clients". Delegate {@link #after()} is called when that count    * reaches zero again (when last "client" called that method).    */
specifier|private
specifier|static
class|class
name|RefCountPolicy
extends|extends
name|GeodeEmbeddedPolicy
block|{
specifier|private
specifier|final
name|AtomicInteger
name|refCount
decl_stmt|;
specifier|private
specifier|final
name|GeodeEmbeddedPolicy
name|policy
decl_stmt|;
name|RefCountPolicy
parameter_list|(
specifier|final
name|GeodeEmbeddedPolicy
name|policy
parameter_list|)
block|{
name|super
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|policy
argument_list|,
literal|"policy"
argument_list|)
operator|.
name|launcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|refCount
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|GeodeEmbeddedPolicy
name|share
parameter_list|()
block|{
comment|// for cases like share().share()
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|before
parameter_list|()
block|{
if|if
condition|(
name|refCount
operator|.
name|getAndIncrement
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// initialize only once
name|policy
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|after
parameter_list|()
block|{
if|if
condition|(
name|refCount
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// destroy only once
name|policy
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

