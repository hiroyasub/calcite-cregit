begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|example
operator|.
name|maze
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Maze generator. */
end_comment

begin_class
class|class
name|Maze
block|{
specifier|private
specifier|final
name|int
name|width
decl_stmt|;
specifier|final
name|int
name|height
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|regions
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|ups
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|lefts
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|horizontal
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|spiral
init|=
literal|false
decl_stmt|;
specifier|public
name|Maze
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
name|this
operator|.
name|height
operator|=
name|height
expr_stmt|;
name|this
operator|.
name|regions
operator|=
operator|new
name|int
index|[
name|width
operator|*
name|height
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|this
operator|.
name|ups
operator|=
operator|new
name|boolean
index|[
name|width
operator|*
name|height
operator|+
name|width
index|]
expr_stmt|;
name|this
operator|.
name|lefts
operator|=
operator|new
name|boolean
index|[
name|width
operator|*
name|height
operator|+
literal|1
index|]
expr_stmt|;
block|}
specifier|private
name|int
name|region
parameter_list|(
name|int
name|cell
parameter_list|)
block|{
name|int
name|region
init|=
name|regions
index|[
name|cell
index|]
decl_stmt|;
if|if
condition|(
name|region
operator|==
name|cell
condition|)
block|{
return|return
name|region
return|;
block|}
return|return
name|regions
index|[
name|cell
index|]
operator|=
name|region
argument_list|(
name|region
argument_list|)
return|;
block|}
comment|/** Prints the maze. Results are like this:    *    *<blockquote>    * +--+--+--+--+--+    * |        |     |    * +--+  +--+--+  +    * |     |  |     |    * +  +--+  +--+  +    * |              |    * +--+--+--+--+--+    *</blockquote>    *    * @param pw Print writer    * @param space Whether to put a space in each cell; if false, prints the    *              region number of the cell    */
specifier|public
name|void
name|print
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|boolean
name|space
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|b2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|row
argument_list|(
name|space
argument_list|,
name|b
argument_list|,
name|b2
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|b2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|b2
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"+--"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/** Generates a list of lines representing the maze in text form. */
specifier|public
name|Enumerator
argument_list|<
name|String
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|b2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|public
name|String
name|current
parameter_list|()
block|{
return|return
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
name|b
operator|.
name|toString
argument_list|()
else|:
name|b2
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
if|if
condition|(
name|i
operator|>=
name|height
operator|*
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|b
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|b2
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|row
argument_list|(
literal|true
argument_list|,
name|b
argument_list|,
name|b2
argument_list|,
name|i
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|i
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
block|}
block|}
return|;
block|}
comment|/** Returns a pair of strings representing a row of the maze. */
specifier|private
name|void
name|row
parameter_list|(
name|boolean
name|space
parameter_list|,
name|StringBuilder
name|b
parameter_list|,
name|StringBuilder
name|b2
parameter_list|,
name|int
name|y
parameter_list|)
block|{
specifier|final
name|int
name|c0
init|=
name|y
operator|*
name|width
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|ups
index|[
name|c0
operator|+
name|x
index|]
condition|?
literal|"  "
else|:
literal|"--"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
if|if
condition|(
name|y
operator|==
name|height
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|b2
operator|.
name|append
argument_list|(
name|lefts
index|[
name|c0
operator|+
name|x
index|]
condition|?
literal|' '
else|:
literal|'|'
argument_list|)
expr_stmt|;
if|if
condition|(
name|space
condition|)
block|{
name|b2
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
init|=
name|region
argument_list|(
name|c0
operator|+
name|x
argument_list|)
operator|+
literal|""
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|s
operator|=
literal|" "
operator|+
name|s
expr_stmt|;
block|}
name|b2
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|b2
operator|.
name|append
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Maze
name|layout
parameter_list|(
name|Random
name|random
parameter_list|,
name|PrintWriter
name|pw
parameter_list|)
block|{
name|int
index|[]
name|candidates
init|=
operator|new
name|int
index|[
name|width
operator|*
name|height
operator|-
name|width
operator|+
name|width
operator|*
name|height
operator|-
name|height
index|]
decl_stmt|;
name|int
name|z
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|,
name|c
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|x
operator|>
literal|0
condition|)
block|{
name|candidates
index|[
name|z
operator|++
index|]
operator|=
name|c
expr_stmt|;
block|}
operator|++
name|c
expr_stmt|;
if|if
condition|(
name|y
operator|>
literal|0
condition|)
block|{
name|candidates
index|[
name|z
operator|++
index|]
operator|=
name|c
expr_stmt|;
block|}
operator|++
name|c
expr_stmt|;
block|}
block|}
assert|assert
name|z
operator|==
name|candidates
operator|.
name|length
assert|;
name|shuffle
argument_list|(
name|random
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|candidate
range|:
name|candidates
control|)
block|{
specifier|final
name|boolean
name|up
init|=
operator|(
name|candidate
operator|&
literal|1
operator|)
operator|!=
literal|0
decl_stmt|;
specifier|final
name|int
name|c
init|=
name|candidate
operator|>>
literal|1
decl_stmt|;
if|if
condition|(
name|up
condition|)
block|{
name|int
name|region
init|=
name|region
argument_list|(
name|c
operator|-
name|width
argument_list|)
decl_stmt|;
comment|// make sure we are not joining the same region, that is, making
comment|// a cycle
if|if
condition|(
name|region
argument_list|(
name|c
argument_list|)
operator|!=
name|region
condition|)
block|{
name|ups
index|[
name|c
index|]
operator|=
literal|true
expr_stmt|;
name|regions
index|[
name|regions
index|[
name|c
index|]
index|]
operator|=
name|region
expr_stmt|;
name|regions
index|[
name|c
index|]
operator|=
name|region
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"up "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"cannot remove top wall at "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|region
init|=
name|region
argument_list|(
name|c
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// make sure we are not joining the same region, that is, making
comment|// a cycle
if|if
condition|(
name|region
argument_list|(
name|c
argument_list|)
operator|!=
name|region
condition|)
block|{
name|lefts
index|[
name|c
index|]
operator|=
literal|true
expr_stmt|;
name|regions
index|[
name|regions
index|[
name|c
index|]
index|]
operator|=
name|region
expr_stmt|;
name|regions
index|[
name|c
index|]
operator|=
name|region
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"left "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"cannot remove left wall at "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|DEBUG
condition|)
block|{
name|print
argument_list|(
name|pw
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|pw
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|solve
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|solveRecurse
argument_list|(
name|y
operator|*
name|width
operator|+
name|x
argument_list|,
literal|null
argument_list|,
name|list
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SolvedException
name|e
parameter_list|)
block|{
return|return
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|e
operator|.
name|list
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|solveRecurse
parameter_list|(
name|int
name|c
parameter_list|,
name|Direction
name|direction
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
name|regions
operator|.
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolvedException
argument_list|(
name|list
argument_list|)
throw|;
block|}
comment|// try to go up
if|if
condition|(
name|direction
operator|!=
name|Direction
operator|.
name|DOWN
operator|&&
name|ups
index|[
name|c
index|]
condition|)
block|{
name|solveRecurse
argument_list|(
name|c
operator|-
name|width
argument_list|,
name|Direction
operator|.
name|UP
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|// try to go left
if|if
condition|(
name|direction
operator|!=
name|Direction
operator|.
name|RIGHT
operator|&&
name|lefts
index|[
name|c
index|]
condition|)
block|{
name|solveRecurse
argument_list|(
name|c
operator|-
literal|1
argument_list|,
name|Direction
operator|.
name|LEFT
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|// try to go down
if|if
condition|(
name|direction
operator|!=
name|Direction
operator|.
name|UP
operator|&&
name|c
operator|+
name|width
operator|<
name|regions
operator|.
name|length
operator|&&
name|ups
index|[
name|c
operator|+
name|width
index|]
condition|)
block|{
name|solveRecurse
argument_list|(
name|c
operator|+
name|width
argument_list|,
name|Direction
operator|.
name|DOWN
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|// try to go right
if|if
condition|(
name|direction
operator|!=
name|Direction
operator|.
name|LEFT
operator|&&
name|c
operator|%
name|width
operator|<
name|width
operator|-
literal|1
operator|&&
name|lefts
index|[
name|c
operator|+
literal|1
index|]
condition|)
block|{
name|solveRecurse
argument_list|(
name|c
operator|+
literal|1
argument_list|,
name|Direction
operator|.
name|RIGHT
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|remove
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** Direction. */
specifier|private
enum|enum
name|Direction
block|{
name|UP
block|,
name|LEFT
block|,
name|DOWN
block|,
name|RIGHT
block|}
comment|/** Flow-control exception thrown when the maze is solved. */
specifier|private
specifier|static
class|class
name|SolvedException
extends|extends
name|RuntimeException
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
decl_stmt|;
name|SolvedException
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
block|}
comment|/**    * Randomly permutes the members of an array. Based on the Fisher-Yates    * algorithm.    *    * @param random Random number generator    * @param ints Array of integers to shuffle    */
specifier|private
name|void
name|shuffle
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
index|[]
name|ints
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|ints
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|int
name|j
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|t
init|=
name|ints
index|[
name|j
index|]
decl_stmt|;
name|ints
index|[
name|j
index|]
operator|=
name|ints
index|[
name|i
index|]
expr_stmt|;
name|ints
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
comment|// move even walls (left) towards the start, so we end up with
comment|// long horizontal corridors
if|if
condition|(
name|horizontal
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ints
index|[
name|i
index|]
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|int
name|j
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|t
init|=
name|ints
index|[
name|j
index|]
decl_stmt|;
name|ints
index|[
name|j
index|]
operator|=
name|ints
index|[
name|i
index|]
expr_stmt|;
name|ints
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
comment|// move walls towards the edges towards the start
if|if
condition|(
name|spiral
condition|)
block|{
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
literal|5
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|x
init|=
name|ints
index|[
name|i
index|]
operator|/
literal|2
operator|%
name|width
decl_stmt|;
name|int
name|y
init|=
name|ints
index|[
name|i
index|]
operator|/
literal|2
operator|/
name|width
decl_stmt|;
name|int
name|xMin
init|=
name|Math
operator|.
name|min
argument_list|(
name|x
argument_list|,
name|width
operator|-
name|x
argument_list|)
decl_stmt|;
name|int
name|yMin
init|=
name|Math
operator|.
name|min
argument_list|(
name|y
argument_list|,
name|height
operator|-
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|ints
index|[
name|i
index|]
operator|%
literal|2
operator|==
operator|(
name|xMin
operator|<
name|yMin
condition|?
literal|1
else|:
literal|0
operator|)
condition|)
block|{
name|int
name|j
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|t
init|=
name|ints
index|[
name|j
index|]
decl_stmt|;
name|ints
index|[
name|j
index|]
operator|=
name|ints
index|[
name|i
index|]
expr_stmt|;
name|ints
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End Maze.java
end_comment

end_unit

