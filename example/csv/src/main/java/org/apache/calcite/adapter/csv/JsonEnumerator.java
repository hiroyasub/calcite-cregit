begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|exc
operator|.
name|MismatchedInputException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Enumerator that reads from a Object List.  */
end_comment

begin_class
specifier|public
class|class
name|JsonEnumerator
implements|implements
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
block|{
specifier|private
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
decl_stmt|;
specifier|public
name|JsonEnumerator
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|)
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|objs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
comment|//noinspection unchecked
name|List
argument_list|<
name|Object
argument_list|>
name|tmp
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|obj
decl_stmt|;
name|objs
operator|.
name|add
argument_list|(
name|tmp
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
name|objs
operator|.
name|add
argument_list|(
operator|(
operator|(
name|LinkedHashMap
operator|)
name|obj
operator|)
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objs
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|obj
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|enumerator
operator|=
name|Linq4j
operator|.
name|enumerator
argument_list|(
name|objs
argument_list|)
expr_stmt|;
block|}
comment|/** Deduces the names and types of a table's columns by reading the first line    * of a JSON file. */
specifier|static
name|JsonDataConverter
name|deduceRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|Source
name|source
parameter_list|)
block|{
specifier|final
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonFieldMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Object
name|jsonObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|objectMapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_UNQUOTED_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_SINGLE_QUOTES
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_COMMENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|source
operator|.
name|protocol
argument_list|()
argument_list|)
operator|&&
name|source
operator|.
name|file
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//noinspection unchecked
name|jsonObj
operator|=
name|objectMapper
operator|.
name|readValue
argument_list|(
name|source
operator|.
name|file
argument_list|()
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http"
argument_list|,
literal|"https"
argument_list|,
literal|"ftp"
argument_list|)
operator|.
name|contains
argument_list|(
name|source
operator|.
name|protocol
argument_list|()
argument_list|)
condition|)
block|{
comment|//noinspection unchecked
name|jsonObj
operator|=
name|objectMapper
operator|.
name|readValue
argument_list|(
name|source
operator|.
name|url
argument_list|()
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsonObj
operator|=
name|objectMapper
operator|.
name|readValue
argument_list|(
name|source
operator|.
name|reader
argument_list|()
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MismatchedInputException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No content"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't read "
operator|+
name|source
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't read "
operator|+
name|source
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|jsonObj
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|jsonFieldMap
operator|.
name|put
argument_list|(
literal|"EmptyFileHasNoColumns"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|jsonObj
operator|instanceof
name|Collection
condition|)
block|{
comment|//noinspection unchecked
name|list
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|jsonObj
expr_stmt|;
comment|//noinspection unchecked
name|jsonFieldMap
operator|=
operator|(
name|LinkedHashMap
operator|)
operator|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|jsonObj
operator|instanceof
name|Map
condition|)
block|{
comment|//noinspection unchecked
name|jsonFieldMap
operator|=
operator|(
name|LinkedHashMap
operator|)
name|jsonObj
expr_stmt|;
comment|//noinspection unchecked
name|list
operator|=
operator|new
name|ArrayList
argument_list|(
operator|(
operator|(
name|LinkedHashMap
operator|)
name|jsonObj
operator|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsonFieldMap
operator|.
name|put
argument_list|(
literal|"line"
argument_list|,
name|jsonObj
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|jsonObj
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|(
name|jsonFieldMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|jsonFieldMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|jsonFieldMap
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|jsonFieldMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|RelDataType
name|relDataType
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|names
argument_list|,
name|types
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|JsonDataConverter
argument_list|(
name|relDataType
argument_list|,
name|list
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|current
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|moveNext
argument_list|()
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Json data and relDataType Converter.    */
specifier|static
class|class
name|JsonDataConverter
block|{
specifier|private
specifier|final
name|RelDataType
name|relDataType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|dataList
decl_stmt|;
specifier|private
name|JsonDataConverter
parameter_list|(
name|RelDataType
name|relDataType
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|dataList
parameter_list|)
block|{
name|this
operator|.
name|relDataType
operator|=
name|relDataType
expr_stmt|;
name|this
operator|.
name|dataList
operator|=
name|dataList
expr_stmt|;
block|}
name|RelDataType
name|getRelDataType
parameter_list|()
block|{
return|return
name|relDataType
return|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|getDataList
parameter_list|()
block|{
return|return
name|dataList
return|;
block|}
block|}
block|}
end_class

end_unit

