begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Csv Streaming enumerator  * @param<E> Row type  */
end_comment

begin_class
specifier|public
class|class
name|CsvStreamEnumerator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Enumerator
argument_list|<
name|E
argument_list|>
block|{
specifier|protected
name|CsvStreamReader
name|streamReader
decl_stmt|;
specifier|protected
name|String
index|[]
name|filterValues
decl_stmt|;
specifier|protected
name|CsvEnumerator
operator|.
name|RowConverter
argument_list|<
name|E
argument_list|>
name|rowConverter
decl_stmt|;
specifier|protected
name|E
name|current
decl_stmt|;
specifier|public
name|CsvStreamEnumerator
parameter_list|(
name|File
name|file
parameter_list|,
name|String
index|[]
name|filterValues
parameter_list|,
name|CsvEnumerator
operator|.
name|RowConverter
argument_list|<
name|E
argument_list|>
name|rowConverter
parameter_list|)
block|{
name|this
operator|.
name|rowConverter
operator|=
name|rowConverter
expr_stmt|;
name|this
operator|.
name|filterValues
operator|=
name|filterValues
expr_stmt|;
try|try
block|{
name|this
operator|.
name|streamReader
operator|=
operator|new
name|CsvStreamReader
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|streamReader
operator|.
name|readNext
argument_list|()
expr_stmt|;
comment|// skip header row
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|E
name|readNext
parameter_list|()
block|{
try|try
block|{
name|outer
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|String
index|[]
name|strings
init|=
name|streamReader
operator|.
name|readNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|strings
operator|==
literal|null
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
name|streamReader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
else|else
block|{
if|if
condition|(
name|filterValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|filterValue
init|=
name|filterValues
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|filterValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|filterValue
operator|.
name|equals
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
condition|)
block|{
continue|continue
name|outer
continue|;
block|}
block|}
block|}
block|}
name|current
operator|=
name|rowConverter
operator|.
name|convertRow
argument_list|(
name|strings
argument_list|)
expr_stmt|;
return|return
name|current
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|E
name|current
parameter_list|()
block|{
return|return
name|readNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|streamReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error closing Csv Stream reader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

begin_comment
comment|// End CsvStreamEnumerator.java
end_comment

end_unit

