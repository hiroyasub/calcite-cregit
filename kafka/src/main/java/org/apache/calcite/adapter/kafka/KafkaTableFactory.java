begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|OffsetResetStrategy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link TableFactory} for Apache Kafka. Currently an Apache Kafka  * topic is mapping to a STREAM table.  */
end_comment

begin_class
specifier|public
class|class
name|KafkaTableFactory
implements|implements
name|TableFactory
argument_list|<
name|KafkaStreamTable
argument_list|>
block|{
specifier|public
name|KafkaTableFactory
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|KafkaStreamTable
name|create
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|operand
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
specifier|final
name|KafkaTableOptions
name|tableOptionBuilder
init|=
operator|new
name|KafkaTableOptions
argument_list|()
decl_stmt|;
name|tableOptionBuilder
operator|.
name|setBootstrapServers
argument_list|(
operator|(
name|String
operator|)
name|operand
operator|.
name|getOrDefault
argument_list|(
name|KafkaTableConstants
operator|.
name|SCHEMA_BOOTSTRAP_SERVERS
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|tableOptionBuilder
operator|.
name|setTopicName
argument_list|(
operator|(
name|String
operator|)
name|operand
operator|.
name|getOrDefault
argument_list|(
name|KafkaTableConstants
operator|.
name|SCHEMA_TOPIC_NAME
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|KafkaRowConverter
name|rowConverter
decl_stmt|;
if|if
condition|(
name|operand
operator|.
name|containsKey
argument_list|(
name|KafkaTableConstants
operator|.
name|SCHEMA_ROW_CONVERTER
argument_list|)
condition|)
block|{
name|String
name|rowConverterClass
init|=
operator|(
name|String
operator|)
name|operand
operator|.
name|get
argument_list|(
name|KafkaTableConstants
operator|.
name|SCHEMA_ROW_CONVERTER
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|rowConverterClass
argument_list|)
decl_stmt|;
name|rowConverter
operator|=
operator|(
name|KafkaRowConverter
operator|)
name|klass
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|InvocationTargetException
decl||
name|IllegalAccessException
decl||
name|ClassNotFoundException
decl||
name|NoSuchMethodException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|details
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Failed to create table '%s' with configuration:\n"
operator|+
literal|"'%s'\n"
operator|+
literal|"KafkaRowConverter '%s' is invalid"
argument_list|,
name|name
argument_list|,
name|operand
argument_list|,
name|rowConverterClass
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|details
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|rowConverter
operator|=
operator|new
name|KafkaRowConverterImpl
argument_list|()
expr_stmt|;
block|}
name|tableOptionBuilder
operator|.
name|setRowConverter
argument_list|(
name|rowConverter
argument_list|)
expr_stmt|;
if|if
condition|(
name|operand
operator|.
name|containsKey
argument_list|(
name|KafkaTableConstants
operator|.
name|SCHEMA_CONSUMER_PARAMS
argument_list|)
condition|)
block|{
name|tableOptionBuilder
operator|.
name|setConsumerParams
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|operand
operator|.
name|get
argument_list|(
name|KafkaTableConstants
operator|.
name|SCHEMA_CONSUMER_PARAMS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|operand
operator|.
name|containsKey
argument_list|(
name|KafkaTableConstants
operator|.
name|SCHEMA_CUST_CONSUMER
argument_list|)
condition|)
block|{
name|String
name|custConsumerClass
init|=
operator|(
name|String
operator|)
name|operand
operator|.
name|get
argument_list|(
name|KafkaTableConstants
operator|.
name|SCHEMA_CUST_CONSUMER
argument_list|)
decl_stmt|;
try|try
block|{
name|tableOptionBuilder
operator|.
name|setConsumer
argument_list|(
operator|(
name|Consumer
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|custConsumerClass
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|OffsetResetStrategy
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|OffsetResetStrategy
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InstantiationException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|details
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Fail to create table '%s' with configuration: \n"
operator|+
literal|"'%s'\n"
operator|+
literal|"KafkaCustConsumer '%s' is invalid"
argument_list|,
name|name
argument_list|,
name|operand
argument_list|,
name|custConsumerClass
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|details
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|KafkaStreamTable
argument_list|(
name|tableOptionBuilder
argument_list|)
return|;
block|}
block|}
end_class

end_unit

