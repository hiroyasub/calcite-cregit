begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|StreamableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|KafkaConsumer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A table which maps to an Apache Kafka topic, currently only {@link KafkaStreamTable} is  * implemented as a STREAM table.  */
end_comment

begin_class
specifier|public
class|class
name|KafkaStreamTable
implements|implements
name|ScannableTable
implements|,
name|StreamableTable
block|{
specifier|final
name|KafkaTableOptions
name|tableOptions
decl_stmt|;
name|KafkaStreamTable
parameter_list|(
specifier|final
name|KafkaTableOptions
name|tableOptions
parameter_list|)
block|{
name|this
operator|.
name|tableOptions
operator|=
name|tableOptions
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
specifier|final
name|DataContext
name|root
parameter_list|)
block|{
specifier|final
name|AtomicBoolean
name|cancelFlag
init|=
name|DataContext
operator|.
name|Variable
operator|.
name|CANCEL_FLAG
operator|.
name|get
argument_list|(
name|root
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
if|if
condition|(
name|tableOptions
operator|.
name|getConsumer
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|KafkaMessageEnumerator
argument_list|(
name|tableOptions
operator|.
name|getConsumer
argument_list|()
argument_list|,
name|tableOptions
operator|.
name|getRowConverter
argument_list|()
argument_list|,
name|cancelFlag
argument_list|)
return|;
block|}
name|Properties
name|consumerConfig
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|consumerConfig
operator|.
name|put
argument_list|(
name|ConsumerConfig
operator|.
name|BOOTSTRAP_SERVERS_CONFIG
argument_list|,
name|tableOptions
operator|.
name|getBootstrapServers
argument_list|()
argument_list|)
expr_stmt|;
comment|//by default it's<byte[], byte[]>
name|consumerConfig
operator|.
name|put
argument_list|(
name|ConsumerConfig
operator|.
name|VALUE_DESERIALIZER_CLASS_CONFIG
argument_list|,
literal|"org.apache.kafka.common.serialization.ByteArrayDeserializer"
argument_list|)
expr_stmt|;
name|consumerConfig
operator|.
name|put
argument_list|(
name|ConsumerConfig
operator|.
name|KEY_DESERIALIZER_CLASS_CONFIG
argument_list|,
literal|"org.apache.kafka.common.serialization.ByteArrayDeserializer"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableOptions
operator|.
name|getConsumerParams
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|consumerConfig
operator|.
name|putAll
argument_list|(
name|tableOptions
operator|.
name|getConsumerParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Consumer
name|consumer
init|=
operator|new
name|KafkaConsumer
argument_list|<>
argument_list|(
name|consumerConfig
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|subscribe
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|tableOptions
operator|.
name|getTopicName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|KafkaMessageEnumerator
argument_list|(
name|consumer
argument_list|,
name|tableOptions
operator|.
name|getRowConverter
argument_list|()
argument_list|,
name|cancelFlag
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
specifier|final
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|tableOptions
operator|.
name|getRowConverter
argument_list|()
operator|.
name|rowDataType
argument_list|(
name|tableOptions
operator|.
name|getTopicName
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a provider of statistics about this table. */
annotation|@
name|Override
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|Statistics
operator|.
name|of
argument_list|(
literal|100d
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|RelCollations
operator|.
name|createSingleton
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRolledUp
parameter_list|(
specifier|final
name|String
name|column
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rolledUpColumnValidInsideAgg
parameter_list|(
specifier|final
name|String
name|column
parameter_list|,
specifier|final
name|SqlCall
name|call
parameter_list|,
specifier|final
name|SqlNode
name|parent
parameter_list|,
specifier|final
name|CalciteConnectionConfig
name|config
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|stream
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/** Type of table. */
annotation|@
name|Override
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|STREAM
return|;
block|}
block|}
end_class

begin_comment
comment|// End KafkaStreamTable.java
end_comment

end_unit

