begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqPrepare
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|JavaRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link OptiqPrepare.SparkHandler}. Gives the core Optiq  * engine access to rules that only exist in the Spark module.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
class|class
name|SparkHandlerImpl
implements|implements
name|OptiqPrepare
operator|.
name|SparkHandler
block|{
name|Pair
argument_list|<
name|Convention
argument_list|,
name|List
argument_list|<
name|RelOptRule
argument_list|>
argument_list|>
name|pair
init|=
name|Pair
operator|.
name|of
argument_list|(
name|SparkRel
operator|.
name|CONVENTION
argument_list|,
name|SparkRules
operator|.
name|rules
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|RelNode
name|flattenTypes
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|restructure
parameter_list|)
block|{
name|RelNode
name|root2
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|rootRel
argument_list|,
name|rootRel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|plus
argument_list|(
name|SparkRel
operator|.
name|CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|planner
operator|.
name|changeTraits
argument_list|(
name|root2
argument_list|,
name|rootRel
operator|.
name|getTraitSet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|registerRules
parameter_list|(
name|VolcanoPlanner
name|planner
parameter_list|)
block|{
for|for
control|(
name|RelOptRule
name|rule
range|:
name|SparkRules
operator|.
name|rules
argument_list|()
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
name|planner
operator|.
name|removeRule
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_VALUES_RULE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SparkHandlerImpl.java
end_comment

end_unit

