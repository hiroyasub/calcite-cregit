begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaRDD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaSparkContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Runtime utilities for Optiq's Spark adapter. Generated code calls these  * methods.  */
end_comment

begin_class
specifier|public
class|class
name|SparkRuntime
block|{
specifier|private
specifier|static
name|JavaSparkContext
name|SPARK_CONTEXT
decl_stmt|;
comment|/** Converts an array into an RDD. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|JavaRDD
argument_list|<
name|T
argument_list|>
name|createRdd
parameter_list|(
name|JavaSparkContext
name|sc
parameter_list|,
name|T
index|[]
name|ts
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ts
argument_list|)
decl_stmt|;
return|return
name|sc
operator|.
name|parallelize
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/** Converts an enumerable into an RDD. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|JavaRDD
argument_list|<
name|T
argument_list|>
name|createRdd
parameter_list|(
name|JavaSparkContext
name|sc
parameter_list|,
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
name|enumerable
operator|.
name|toList
argument_list|()
decl_stmt|;
return|return
name|sc
operator|.
name|parallelize
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/** Converts an RDD into an enumerable. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Enumerable
argument_list|<
name|T
argument_list|>
name|asEnumerable
parameter_list|(
name|JavaRDD
argument_list|<
name|T
argument_list|>
name|rdd
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|rdd
operator|.
name|collect
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the Spark context for the current execution.    *    *<p>Currently a global variable; maybe later held within {@code root}.</p>    */
specifier|public
specifier|static
name|JavaSparkContext
name|getSparkContext
parameter_list|()
block|{
if|if
condition|(
name|SPARK_CONTEXT
operator|==
literal|null
condition|)
block|{
name|SPARK_CONTEXT
operator|=
operator|new
name|JavaSparkContext
argument_list|(
literal|"local[1]"
argument_list|,
literal|"optiq"
argument_list|)
expr_stmt|;
block|}
return|return
name|SPARK_CONTEXT
return|;
block|}
block|}
end_class

begin_comment
comment|// End SparkRuntime.java
end_comment

end_unit

