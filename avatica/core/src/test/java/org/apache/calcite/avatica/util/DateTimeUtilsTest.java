begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|EPOCH_JULIAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|addMonths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|dateStringToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|digitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|floorDiv
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|floorMod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|intervalDayTimeToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|intervalYearMonthToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|subtractMonths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|timeStringToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|timestampStringToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|unixDateExtract
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|unixDateToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|unixTimeToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|unixTimestamp
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|unixTimestampToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|ymdToJulian
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|ymdToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Tests for {@link DateTimeUtils}.  */
end_comment

begin_class
specifier|public
class|class
name|DateTimeUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEasyLog10
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|digitCount
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|digitCount
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|digitCount
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|digitCount
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|digitCount
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|digitCount
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|digitCount
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorDiv
parameter_list|()
block|{
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
literal|13
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
literal|12
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
literal|11
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
operator|-
literal|13
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
operator|-
literal|12
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
operator|-
literal|11
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorDiv
argument_list|(
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorMod
parameter_list|()
block|{
name|assertThat
argument_list|(
name|floorMod
argument_list|(
literal|13
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorMod
argument_list|(
literal|12
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorMod
argument_list|(
literal|11
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorMod
argument_list|(
operator|-
literal|13
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorMod
argument_list|(
operator|-
literal|12
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorMod
argument_list|(
operator|-
literal|11
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorMod
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorMod
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorMod
argument_list|(
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnixDateToString
parameter_list|()
block|{
comment|// Verify these using the "date" command. E.g.
comment|// $ date -u --date="@$(expr 10957 \* 86400)"
comment|// Sat Jan  1 00:00:00 UTC 2000
name|assertEquals
argument_list|(
literal|"2000-01-01"
argument_list|,
name|unixDateToString
argument_list|(
literal|10957
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1970-01-01"
argument_list|,
name|unixDateToString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1970-01-02"
argument_list|,
name|unixDateToString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1971-01-01"
argument_list|,
name|unixDateToString
argument_list|(
literal|365
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1972-01-01"
argument_list|,
name|unixDateToString
argument_list|(
literal|730
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1972-02-28"
argument_list|,
name|unixDateToString
argument_list|(
literal|788
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1972-02-29"
argument_list|,
name|unixDateToString
argument_list|(
literal|789
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1972-03-01"
argument_list|,
name|unixDateToString
argument_list|(
literal|790
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1969-01-01"
argument_list|,
name|unixDateToString
argument_list|(
operator|-
literal|365
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2000-01-01"
argument_list|,
name|unixDateToString
argument_list|(
literal|10957
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2000-02-28"
argument_list|,
name|unixDateToString
argument_list|(
literal|11015
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2000-02-29"
argument_list|,
name|unixDateToString
argument_list|(
literal|11016
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2000-03-01"
argument_list|,
name|unixDateToString
argument_list|(
literal|11017
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1900-01-01"
argument_list|,
name|unixDateToString
argument_list|(
operator|-
literal|25567
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1900-02-28"
argument_list|,
name|unixDateToString
argument_list|(
operator|-
literal|25509
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1900-03-01"
argument_list|,
name|unixDateToString
argument_list|(
operator|-
literal|25508
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1945-02-24"
argument_list|,
name|unixDateToString
argument_list|(
operator|-
literal|9077
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testYmdToUnixDate
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|365
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|1971
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|365
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|1969
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11015
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11016
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11017
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|2000
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|9077
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|1945
argument_list|,
literal|2
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|25509
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|1900
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|25508
argument_list|,
name|ymdToUnixDate
argument_list|(
literal|1900
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateToString
parameter_list|()
block|{
name|checkDateString
argument_list|(
literal|"1970-01-01"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//noinspection PointlessArithmeticExpression
name|checkDateString
argument_list|(
literal|"1971-02-03"
argument_list|,
literal|0
operator|+
literal|365
operator|+
literal|31
operator|+
operator|(
literal|3
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|//noinspection PointlessArithmeticExpression
name|checkDateString
argument_list|(
literal|"1971-02-28"
argument_list|,
literal|0
operator|+
literal|365
operator|+
literal|31
operator|+
operator|(
literal|28
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|//noinspection PointlessArithmeticExpression
name|checkDateString
argument_list|(
literal|"1971-03-01"
argument_list|,
literal|0
operator|+
literal|365
operator|+
literal|31
operator|+
literal|28
operator|+
operator|(
literal|1
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|//noinspection PointlessArithmeticExpression
name|checkDateString
argument_list|(
literal|"1972-02-28"
argument_list|,
literal|0
operator|+
literal|365
operator|*
literal|2
operator|+
literal|31
operator|+
operator|(
literal|28
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|//noinspection PointlessArithmeticExpression
name|checkDateString
argument_list|(
literal|"1972-02-29"
argument_list|,
literal|0
operator|+
literal|365
operator|*
literal|2
operator|+
literal|31
operator|+
operator|(
literal|29
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|//noinspection PointlessArithmeticExpression
name|checkDateString
argument_list|(
literal|"1972-03-01"
argument_list|,
literal|0
operator|+
literal|365
operator|*
literal|2
operator|+
literal|31
operator|+
literal|29
operator|+
operator|(
literal|1
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDateString
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|d
parameter_list|)
block|{
name|assertThat
argument_list|(
name|unixDateToString
argument_list|(
name|d
argument_list|)
argument_list|,
name|is
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dateStringToUnixDate
argument_list|(
name|s
argument_list|)
argument_list|,
name|is
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeToString
parameter_list|()
block|{
name|checkTimeString
argument_list|(
literal|"00:00:00"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkTimeString
argument_list|(
literal|"23:59:59"
argument_list|,
literal|86400000
operator|-
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTimeString
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|d
parameter_list|)
block|{
name|assertThat
argument_list|(
name|unixTimeToString
argument_list|(
name|d
argument_list|)
argument_list|,
name|is
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timeStringToUnixDate
argument_list|(
name|s
argument_list|)
argument_list|,
name|is
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampToString
parameter_list|()
block|{
comment|// ISO format would be "1970-01-01T00:00:00" but SQL format is different
name|checkTimestampString
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|checkTimestampString
argument_list|(
literal|"1970-02-01 23:59:59"
argument_list|,
literal|86400000L
operator|*
literal|32L
operator|-
literal|1000L
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTimestampString
parameter_list|(
name|String
name|s
parameter_list|,
name|long
name|d
parameter_list|)
block|{
name|assertThat
argument_list|(
name|unixTimestampToString
argument_list|(
name|d
argument_list|)
argument_list|,
name|is
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timestampStringToUnixDate
argument_list|(
name|s
argument_list|)
argument_list|,
name|is
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalYearMonthToString
parameter_list|()
block|{
name|TimeUnitRange
name|range
init|=
name|TimeUnitRange
operator|.
name|YEAR_TO_MONTH
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+0-00"
argument_list|,
name|intervalYearMonthToString
argument_list|(
literal|0
argument_list|,
name|range
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+1-00"
argument_list|,
name|intervalYearMonthToString
argument_list|(
literal|12
argument_list|,
name|range
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+1-01"
argument_list|,
name|intervalYearMonthToString
argument_list|(
literal|13
argument_list|,
name|range
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1-01"
argument_list|,
name|intervalYearMonthToString
argument_list|(
operator|-
literal|13
argument_list|,
name|range
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalDayTimeToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"+0"
argument_list|,
name|intervalYearMonthToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0-00"
argument_list|,
name|intervalYearMonthToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|YEAR_TO_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0"
argument_list|,
name|intervalYearMonthToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|DAY
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0 00"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|DAY_TO_HOUR
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0 00:00"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|DAY_TO_MINUTE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0 00:00:00"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|DAY_TO_SECOND
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|HOUR
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0:00"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|HOUR_TO_MINUTE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0:00:00"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|HOUR_TO_SECOND
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0:00"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|MINUTE_TO_SECOND
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+0"
argument_list|,
name|intervalDayTimeToString
argument_list|(
literal|0
argument_list|,
name|TimeUnitRange
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testYmdToJulian
parameter_list|()
block|{
comment|// All checked using http://aa.usno.navy.mil/data/docs/JulianDate.php.
comment|// We round up - if JulianDate.php gives 2451544.5, we use 2451545.
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|2014
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2456751
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2000 is a leap year
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2451545
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2451603
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2451604
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|2000
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2451605
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2440588
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|EPOCH_JULIAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1901
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2415386
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1900 is not a leap year
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1900
argument_list|,
literal|10
argument_list|,
literal|17
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2415310
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1900
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2415080
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1900
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2415079
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1900
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2415052
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2415021
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|1777
argument_list|,
literal|7
argument_list|,
literal|4
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2370281
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2016 is a leap year
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2457447
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2457448
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ymdToJulian
argument_list|(
literal|2016
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2457449
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtract
parameter_list|()
block|{
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1970L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1969L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
literal|364
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1970L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
literal|365
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1971L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
literal|364
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
literal|365
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1900
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
expr_stmt|;
comment|// no leap day
name|thereAndBack
argument_list|(
literal|1900
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1901
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1901
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
expr_stmt|;
comment|// no leap day
name|thereAndBack
argument_list|(
literal|1901
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|)
expr_stmt|;
comment|// leap day
name|thereAndBack
argument_list|(
literal|2000
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1964
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1964
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1964
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|)
expr_stmt|;
comment|// leap day
name|thereAndBack
argument_list|(
literal|1964
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1864
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1864
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1864
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|)
expr_stmt|;
comment|// leap day
name|thereAndBack
argument_list|(
literal|1864
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1900
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|1900
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|2004
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|2004
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|)
expr_stmt|;
comment|// leap day
name|thereAndBack
argument_list|(
literal|2004
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
literal|2005
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|)
expr_stmt|;
comment|// no leap day
name|thereAndBack
argument_list|(
literal|2005
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|thereAndBack
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
specifier|final
name|int
name|unixDate
init|=
name|ymdToUnixDate
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
name|unixDate
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|year
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
name|unixDate
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|month
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|DAY
argument_list|,
name|unixDate
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|day
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMonths
parameter_list|()
block|{
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2016
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2017
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2017
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2015
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|12
argument_list|)
expr_stmt|;
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2018
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|31
argument_list|,
literal|2016
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// roll up
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|4
argument_list|,
literal|30
argument_list|,
literal|2016
argument_list|,
literal|7
argument_list|,
literal|30
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// roll up
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|31
argument_list|,
literal|2016
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|3
argument_list|,
literal|31
argument_list|,
literal|2016
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|3
argument_list|,
literal|31
argument_list|,
literal|2116
argument_list|,
literal|3
argument_list|,
literal|31
argument_list|,
literal|1200
argument_list|)
expr_stmt|;
name|checkAddMonths
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|,
literal|2116
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|,
literal|1200
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkAddMonths
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|m0
parameter_list|,
name|int
name|d0
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|m1
parameter_list|,
name|int
name|d1
parameter_list|,
name|int
name|months
parameter_list|)
block|{
specifier|final
name|int
name|date0
init|=
name|ymdToUnixDate
argument_list|(
name|y0
argument_list|,
name|m0
argument_list|,
name|d0
argument_list|)
decl_stmt|;
specifier|final
name|long
name|date
init|=
name|addMonths
argument_list|(
name|date0
argument_list|,
name|months
argument_list|)
decl_stmt|;
specifier|final
name|int
name|date1
init|=
name|ymdToUnixDate
argument_list|(
name|y1
argument_list|,
name|m1
argument_list|,
name|d1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|date
argument_list|,
name|is
argument_list|(
name|date1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subtractMonths
argument_list|(
name|date1
argument_list|,
name|date0
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|is
argument_list|(
name|months
argument_list|)
argument_list|,
name|is
argument_list|(
name|months
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subtractMonths
argument_list|(
name|date1
operator|+
literal|1
argument_list|,
name|date0
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|is
argument_list|(
name|months
argument_list|)
argument_list|,
name|is
argument_list|(
name|months
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subtractMonths
argument_list|(
name|date1
argument_list|,
name|date0
operator|+
literal|1
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|is
argument_list|(
name|months
argument_list|)
argument_list|,
name|is
argument_list|(
name|months
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subtractMonths
argument_list|(
name|d2ts
argument_list|(
name|date1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|d2ts
argument_list|(
name|date0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|is
argument_list|(
name|months
argument_list|)
argument_list|,
name|is
argument_list|(
name|months
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subtractMonths
argument_list|(
name|d2ts
argument_list|(
name|date1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|d2ts
argument_list|(
name|date0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|is
argument_list|(
name|months
operator|-
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|months
argument_list|)
argument_list|,
name|is
argument_list|(
name|months
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Converts a date (days since epoch) and milliseconds (since midnight)    * into a timestamp (milliseconds since epoch). */
specifier|private
name|long
name|d2ts
parameter_list|(
name|int
name|date
parameter_list|,
name|int
name|millis
parameter_list|)
block|{
return|return
name|date
operator|*
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|+
name|millis
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnixTimestamp
parameter_list|()
block|{
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|day
init|=
literal|86400000L
decl_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|day
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|)
argument_list|,
name|is
argument_list|(
literal|86399000L
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1900 is not a leap year
specifier|final
name|long
name|y1900
init|=
operator|-
literal|2203977600000L
decl_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|1900
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|y1900
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|1900
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|y1900
operator|+
name|day
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2000 is a leap year
specifier|final
name|long
name|y2k
init|=
literal|951696000000L
decl_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|y2k
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|y2k
operator|+
name|day
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|2000
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|y2k
operator|+
name|day
operator|+
name|day
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2016 is a leap year
specifier|final
name|long
name|y2016
init|=
literal|1456617600000L
decl_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|y2016
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|y2016
operator|+
name|day
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unixTimestamp
argument_list|(
literal|2016
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|y2016
operator|+
name|day
operator|+
name|day
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End DateTimeUtilsTest.java
end_comment

end_unit

