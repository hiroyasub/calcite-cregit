begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test that {@code ResultSet} returned by {@code DatabaseMetaData} methods  * conform to JDBC specification.  */
end_comment

begin_class
specifier|public
class|class
name|MetaResultSetTest
block|{
comment|/**    * A fake test driver for test.    */
specifier|private
specifier|static
specifier|final
class|class
name|TestDriver
extends|extends
name|UnregisteredDriver
block|{
annotation|@
name|Override
specifier|protected
name|DriverVersion
name|createDriverVersion
parameter_list|()
block|{
return|return
operator|new
name|DriverVersion
argument_list|(
literal|"test"
argument_list|,
literal|"test 0.0.0"
argument_list|,
literal|"test"
argument_list|,
literal|"test 0.0.0"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getConnectStringPrefix
parameter_list|()
block|{
return|return
literal|"jdbc:test"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meta
name|createMeta
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
return|return
operator|new
name|TestMetaImpl
argument_list|(
name|connection
argument_list|)
return|;
block|}
block|}
comment|/**    * Fake meta implementation for test driver.    */
specifier|public
specifier|static
specifier|final
class|class
name|TestMetaImpl
extends|extends
name|MetaImpl
block|{
specifier|public
name|TestMetaImpl
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|StatementHandle
name|prepare
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|sql
parameter_list|,
name|long
name|maxRowCount
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|prepareAndExecute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|String
name|sql
parameter_list|,
name|long
name|maxRowCount
parameter_list|,
name|PrepareCallback
name|callback
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|prepareAndExecute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|String
name|sql
parameter_list|,
name|long
name|maxRowCount
parameter_list|,
name|int
name|maxRowsInFirstFrame
parameter_list|,
name|PrepareCallback
name|callback
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteBatchResult
name|prepareAndExecuteBatch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|sqlCommands
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteBatchResult
name|executeBatch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|TypedValue
argument_list|>
argument_list|>
name|parameterValues
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Frame
name|fetch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|fetchMaxRowCount
parameter_list|)
throws|throws
name|NoSuchStatementException
throws|,
name|MissingResultsException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|execute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|,
name|long
name|maxRowCount
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|execute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|,
name|int
name|maxRowsInFirstFrame
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeStatement
parameter_list|(
name|StatementHandle
name|h
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|syncResults
parameter_list|(
name|StatementHandle
name|sh
parameter_list|,
name|QueryState
name|state
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|Connection
name|connection
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|SQLException
block|{
name|connection
operator|=
operator|new
name|TestDriver
argument_list|()
operator|.
name|connect
argument_list|(
literal|"jdbc:test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAttributes
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getAttributes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TYPE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TYPE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"ATTR_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"ATTR_TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"ATTR_SIZE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"DECIMAL_DIGITS"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"NUM_PREC_RADIX"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"NULLABLE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"ATTR_DEF"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"SQL_DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|14
argument_list|,
literal|"SQL_DATETIME_SUB"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|15
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|16
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|17
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|18
argument_list|,
literal|"SCOPE_CATALOG"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|19
argument_list|,
literal|"SCOPE_SCHEMA"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|20
argument_list|,
literal|"SCOPE_TABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|21
argument_list|,
literal|"SOURCE_DATA_TYPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBestRowIdentifier
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getBestRowIdentifier
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DatabaseMetaData
operator|.
name|bestRowUnknown
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"SCOPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"COLUMN_SIZE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"BUFFER_LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"DECIMAL_DIGITS"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"PSEUDO_COLUMN"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCatalogs
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getCatalogs
argument_list|()
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetClientInfoProperties
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getClientInfoProperties
argument_list|()
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"MAX_LEN"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"DEFAULT_VALUE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"DESCRIPTION"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetColumnPrivileges
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getColumnPrivileges
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"GRANTOR"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"GRANTEE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"PRIVILEGE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"IS_GRANTABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetColumns
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"COLUMN_SIZE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"BUFFER_LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"DECIMAL_DIGITS"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"NUM_PREC_RADIX"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"NULLABLE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"COLUMN_DEF"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|14
argument_list|,
literal|"SQL_DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|15
argument_list|,
literal|"SQL_DATETIME_SUB"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|16
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|17
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|18
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|19
argument_list|,
literal|"SCOPE_CATALOG"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|20
argument_list|,
literal|"SCOPE_SCHEMA"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|21
argument_list|,
literal|"SCOPE_TABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|22
argument_list|,
literal|"SOURCE_DATA_TYPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|23
argument_list|,
literal|"IS_AUTOINCREMENT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|24
argument_list|,
literal|"IS_GENERATEDCOLUMN"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCrossReference
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getCrossReference
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"PKTABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"PKTABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"PKTABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"PKCOLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"FKTABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"FKTABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"FKTABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"FKCOLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"KEY_SEQ"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"UPDATE_RULE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"DELETE_RULE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"FK_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"PK_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|14
argument_list|,
literal|"DEFERABILITY"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetExportedKeys
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getExportedKeys
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"PKTABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"PKTABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"PKTABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"PKCOLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"FKTABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"FKTABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"FKTABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"FKCOLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"KEY_SEQ"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"UPDATE_RULE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"DELETE_RULE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"FK_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"PK_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|14
argument_list|,
literal|"DEFERABILITY"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFunctionColumns
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getFunctionColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"FUNCTION_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"FUNCTION_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"FUNCTION_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"COLUMN_TYPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"PRECISION"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"SCALE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"RADIX"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"NULLABLE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|14
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|15
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|16
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|17
argument_list|,
literal|"SPECIFIC_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getFunctions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"FUNCTION_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"FUNCTION_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"FUNCTION_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"FUNCTION_TYPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"SPECIFIC_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetImportedKeys
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getImportedKeys
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"PKTABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"PKTABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"PKTABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"PKCOLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"FKTABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"FKTABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"FKTABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"FKCOLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"KEY_SEQ"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"UPDATE_RULE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"DELETE_RULE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"FK_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"PK_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|14
argument_list|,
literal|"DEFERABILITY"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIndexInfo
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getIndexInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"NON_UNIQUE"
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"INDEX_QUALIFIER"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"INDEX_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"TYPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"ASC_OR_DESC"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"CARDINALITY"
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"PAGES"
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"FILTER_CONDITION"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryKeys
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getPrimaryKeys
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"KEY_SEQ"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"PK_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProcedureColumns
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getProcedureColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"PROCEDURE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"PROCEDURE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"PROCEDURE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"COLUMN_TYPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"PRECISION"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"SCALE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"RADIX"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"NULLABLE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|14
argument_list|,
literal|"COLUMN_DEF"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|15
argument_list|,
literal|"SQL_DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|16
argument_list|,
literal|"SQL_DATETIME_SUB"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|17
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|18
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|19
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|20
argument_list|,
literal|"SPECIFIC_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProcedures
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getProcedures
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"PROCEDURE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"PROCEDURE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"PROCEDURE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"PROCEDURE_TYPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"SPECIFIC_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPseudoColumns
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getPseudoColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"COLUMN_SIZE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"DECIMAL_DIGITS"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"NUM_PREC_RADIX"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"COLUMN_USAGE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSchemas
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getSchemas
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_CATALOG"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSuperTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getSuperTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"SUPERTABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSuperTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getSuperTypes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TYPE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TYPE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"SUPERTYPE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"SUPERTYPE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"SUPERTYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTablePrivileges
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getTablePrivileges
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"GRANTOR"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"GRANTEE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"PRIVILEGE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"IS_GRANTABLE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TABLE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"TABLE_TYPE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"TYPE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"TYPE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"SELF_REFERENCING_COL_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"REF_GENERATION"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getTableTypes
argument_list|()
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TABLE_TYPE"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeInfo
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getTypeInfo
argument_list|()
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"PRECISION"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"LITERAL_PREFIX"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"LITERAL_SUFFIX"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"CREATE_PARAMS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"NULLABLE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"CASE_SENSITIVE"
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|9
argument_list|,
literal|"SEARCHABLE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|10
argument_list|,
literal|"UNSIGNED_ATTRIBUTE"
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|11
argument_list|,
literal|"FIXED_PREC_SCALE"
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|12
argument_list|,
literal|"AUTO_INCREMENT"
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|13
argument_list|,
literal|"LOCAL_TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|14
argument_list|,
literal|"MINIMUM_SCALE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|15
argument_list|,
literal|"MAXIMUM_SCALE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|16
argument_list|,
literal|"SQL_DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|17
argument_list|,
literal|"SQL_DATETIME_SUB"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|18
argument_list|,
literal|"NUM_PREC_RADIX"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUDTs
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getUDTs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"TYPE_CAT"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"TYPE_SCHEM"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"CLASS_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"REMARKS"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"BASE_TYPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionColumns
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|metadata
init|=
name|getDatabaseMetadata
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|metadata
operator|.
name|getVersionColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|1
argument_list|,
literal|"SCOPE"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|2
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|3
argument_list|,
literal|"DATA_TYPE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|4
argument_list|,
literal|"TYPE_NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|5
argument_list|,
literal|"COLUMN_SIZE"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|6
argument_list|,
literal|"BUFFER_LENGTH"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|7
argument_list|,
literal|"DECIMAL_DIGITS"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
name|assertColumn
argument_list|(
name|rsMeta
argument_list|,
literal|8
argument_list|,
literal|"PSEUDO_COLUMN"
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertColumn
parameter_list|(
name|ResultSetMetaData
name|rsMeta
parameter_list|,
name|int
name|column
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|nullable
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected column %d to be named '%s', was '%s'."
argument_list|,
name|column
argument_list|,
name|name
argument_list|,
name|rsMeta
operator|.
name|getColumnName
argument_list|(
name|column
argument_list|)
argument_list|)
argument_list|,
name|name
argument_list|,
name|rsMeta
operator|.
name|getColumnName
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected column %d type to be '%d', was '%d'."
argument_list|,
name|column
argument_list|,
name|type
argument_list|,
name|rsMeta
operator|.
name|getColumnType
argument_list|(
name|column
argument_list|)
argument_list|)
argument_list|,
name|type
argument_list|,
name|rsMeta
operator|.
name|getColumnType
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected column %d nullability to be '%d', was '%d'."
argument_list|,
name|column
argument_list|,
name|nullable
argument_list|,
name|rsMeta
operator|.
name|isNullable
argument_list|(
name|column
argument_list|)
argument_list|)
argument_list|,
name|nullable
argument_list|,
name|rsMeta
operator|.
name|isNullable
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DatabaseMetaData
name|getDatabaseMetadata
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getMetaData
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End MetaResultSetTest.java
end_comment

end_unit

