begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
operator|.
name|AvaticaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLDataException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test {@code ResultSet#getXXX} conversions.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AvaticaResultSetConversionsTest
block|{
comment|/**    * A fake test driver for test.    */
specifier|private
specifier|static
specifier|final
class|class
name|TestDriver
extends|extends
name|UnregisteredDriver
block|{
annotation|@
name|Override
specifier|protected
name|DriverVersion
name|createDriverVersion
parameter_list|()
block|{
return|return
operator|new
name|DriverVersion
argument_list|(
literal|"test"
argument_list|,
literal|"test 0.0.0"
argument_list|,
literal|"test"
argument_list|,
literal|"test 0.0.0"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getConnectStringPrefix
parameter_list|()
block|{
return|return
literal|"jdbc:test"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meta
name|createMeta
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
return|return
operator|new
name|TestMetaImpl
argument_list|(
name|connection
argument_list|)
return|;
block|}
block|}
comment|/**    * Fake meta implementation for test driver.    */
specifier|public
specifier|static
specifier|final
class|class
name|TestMetaImpl
extends|extends
name|MetaImpl
block|{
specifier|public
name|TestMetaImpl
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|StatementHandle
name|prepare
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|sql
parameter_list|,
name|long
name|maxRowCount
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|prepareAndExecute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|String
name|sql
parameter_list|,
name|long
name|maxRowCount
parameter_list|,
name|PrepareCallback
name|callback
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
specifier|static
name|ColumnMetaData
name|columnMetaData
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|AvaticaType
name|type
parameter_list|,
name|int
name|columnNullable
parameter_list|)
block|{
return|return
operator|new
name|ColumnMetaData
argument_list|(
name|ordinal
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|columnNullable
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|type
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|type
operator|.
name|columnClassName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|prepareAndExecute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|String
name|sql
parameter_list|,
name|long
name|maxRowCount
parameter_list|,
name|int
name|maxRowsInFirstFrame
parameter_list|,
name|PrepareCallback
name|callback
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
name|assertEquals
argument_list|(
literal|"SELECT * FROM TABLE"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnMetaData
argument_list|(
literal|"bool"
argument_list|,
literal|0
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
literal|"BOOLEAN"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|PRIMITIVE_BOOLEAN
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"byte"
argument_list|,
literal|1
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
literal|"TINYINT"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|PRIMITIVE_BYTE
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"short"
argument_list|,
literal|2
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
literal|"SMALLINT"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|PRIMITIVE_SHORT
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"int"
argument_list|,
literal|3
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"INTEGER"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|PRIMITIVE_INT
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"long"
argument_list|,
literal|4
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
literal|"BIGINT"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|PRIMITIVE_LONG
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"float"
argument_list|,
literal|5
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|REAL
argument_list|,
literal|"REAL"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|FLOAT
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"double"
argument_list|,
literal|6
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
literal|"FLOAT"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|DOUBLE
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"string"
argument_list|,
literal|7
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|"VARCHAR"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|STRING
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"date"
argument_list|,
literal|8
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
literal|"DATE"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_DATE
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"time"
argument_list|,
literal|9
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|TIME
argument_list|,
literal|"TIME"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIME
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|,
name|columnMetaData
argument_list|(
literal|"timestamp"
argument_list|,
literal|10
argument_list|,
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|,
literal|"TIMESTAMP"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIMESTAMP
argument_list|)
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
name|Collections
operator|.
expr|<
name|Object
operator|>
name|singletonList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|true
block|,
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|short
operator|)
literal|2
block|,
literal|3
block|,
literal|4L
block|,
literal|5.0f
block|,
literal|6.0d
block|,
literal|"testvalue"
block|,
operator|new
name|Date
argument_list|(
literal|1476130718123L
argument_list|)
block|,
operator|new
name|Time
argument_list|(
literal|1476130718123L
argument_list|)
block|,
operator|new
name|Timestamp
argument_list|(
literal|1476130718123L
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|CursorFactory
name|factory
init|=
name|CursorFactory
operator|.
name|deduce
argument_list|(
name|columns
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Frame
name|frame
init|=
operator|new
name|Frame
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|Signature
name|signature
init|=
name|Signature
operator|.
name|create
argument_list|(
name|columns
argument_list|,
name|sql
argument_list|,
name|Collections
operator|.
expr|<
name|AvaticaParameter
operator|>
name|emptyList
argument_list|()
argument_list|,
name|factory
argument_list|,
name|StatementType
operator|.
name|SELECT
argument_list|)
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|callback
operator|.
name|getMonitor
argument_list|()
init|)
block|{
name|callback
operator|.
name|clear
argument_list|()
expr_stmt|;
name|callback
operator|.
name|assign
argument_list|(
name|signature
argument_list|,
name|frame
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|MetaResultSet
name|rs
init|=
name|MetaResultSet
operator|.
name|create
argument_list|(
name|h
operator|.
name|connectionId
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|signature
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecuteResult
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rs
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteBatchResult
name|prepareAndExecuteBatch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|sqlCommands
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteBatchResult
name|executeBatch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|TypedValue
argument_list|>
argument_list|>
name|parameterValues
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Frame
name|fetch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|fetchMaxRowCount
parameter_list|)
throws|throws
name|NoSuchStatementException
throws|,
name|MissingResultsException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|execute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|,
name|long
name|maxRowCount
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|execute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|,
name|int
name|maxRowsInFirstFrame
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeStatement
parameter_list|(
name|StatementHandle
name|h
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|syncResults
parameter_list|(
name|StatementHandle
name|sh
parameter_list|,
name|QueryState
name|state
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|NoSuchStatementException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Base accessor test helper    */
specifier|private
specifier|static
class|class
name|AccessorTestHelper
block|{
specifier|protected
specifier|final
name|int
name|ordinal
decl_stmt|;
specifier|protected
name|AccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
block|}
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetFloat
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getFloat
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetDouble
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getDouble
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetDecimal
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetBytes
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getBytes
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetAsciiStream
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getAsciiStream
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetBinaryStream
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getBinaryStream
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetObject
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|resultSet
operator|.
name|getObject
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetCharacterStream
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getCharacterStream
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetObject
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getObject
argument_list|(
name|ordinal
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetRef
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getRef
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetBlob
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getBlob
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetClob
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getBlob
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetArray
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getArray
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetDate
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getDate
argument_list|(
name|ordinal
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetTime
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getTime
argument_list|(
name|ordinal
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetTimestamp
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getTimestamp
argument_list|(
name|ordinal
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|getURL
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getURL
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetNClob
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getNClob
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetSQLXML
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getSQLXML
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetNString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getNString
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
specifier|public
name|void
name|testGetNCharacterStream
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|resultSet
operator|.
name|getNCharacterStream
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Was expecting to throw SQLDataException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|SQLDataException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// success
block|}
block|}
block|}
comment|/**    * accessor test helper for the boolean column    */
specifier|private
specifier|static
specifier|final
class|class
name|BooleanAccesorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|BooleanAccesorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDecimal
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|,
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetFloat
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|resultSet
operator|.
name|getFloat
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDouble
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1.0d
argument_list|,
name|resultSet
operator|.
name|getDouble
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the byte column    */
specifier|private
specifier|static
specifier|final
class|class
name|ByteAccesorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|ByteAccesorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDecimal
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|,
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetFloat
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|resultSet
operator|.
name|getFloat
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDouble
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1.0d
argument_list|,
name|resultSet
operator|.
name|getDouble
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the short column    */
specifier|private
specifier|static
specifier|final
class|class
name|ShortAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|ShortAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDecimal
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetFloat
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|2.0f
argument_list|,
name|resultSet
operator|.
name|getFloat
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDouble
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|2.0d
argument_list|,
name|resultSet
operator|.
name|getDouble
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the int column    */
specifier|private
specifier|static
specifier|final
class|class
name|IntAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|IntAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDecimal
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetFloat
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|3.0f
argument_list|,
name|resultSet
operator|.
name|getFloat
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDouble
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|3.0d
argument_list|,
name|resultSet
operator|.
name|getDouble
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the long column    */
specifier|private
specifier|static
specifier|final
class|class
name|LongAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|LongAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDecimal
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|4
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetFloat
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|4.0f
argument_list|,
name|resultSet
operator|.
name|getFloat
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDouble
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|4.0d
argument_list|,
name|resultSet
operator|.
name|getDouble
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the float column    */
specifier|private
specifier|static
specifier|final
class|class
name|FloatAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|FloatAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"5.0"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDecimal
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|5
argument_list|)
operator|.
name|setScale
argument_list|(
literal|1
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetFloat
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|5.0f
argument_list|,
name|resultSet
operator|.
name|getFloat
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDouble
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|5.0d
argument_list|,
name|resultSet
operator|.
name|getDouble
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the double column    */
specifier|private
specifier|static
specifier|final
class|class
name|DoubleAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|DoubleAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"6.0"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|6
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|6L
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDecimal
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|6
argument_list|)
operator|.
name|setScale
argument_list|(
literal|1
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetFloat
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|6.0f
argument_list|,
name|resultSet
operator|.
name|getFloat
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDouble
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|6.0d
argument_list|,
name|resultSet
operator|.
name|getDouble
argument_list|(
name|ordinal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the date column    */
specifier|private
specifier|static
specifier|final
class|class
name|DateAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|DateAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"2016-10-10"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|68
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|17084
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|17084
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|17084
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDate
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|Date
argument_list|(
literal|1476130718123L
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getDate
argument_list|(
name|ordinal
argument_list|,
name|calendar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the time column    */
specifier|private
specifier|static
specifier|final
class|class
name|TimeAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|TimeAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"20:18:38"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|85
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|20053
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|73118123
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|73118123
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetTime
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|Time
argument_list|(
literal|1476130718123L
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getTime
argument_list|(
name|ordinal
argument_list|,
name|calendar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the timestamp column    */
specifier|private
specifier|static
specifier|final
class|class
name|TimestampAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|TimestampAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"2016-10-10 20:18:38"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetBoolean
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetByte
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|85
argument_list|,
name|resultSet
operator|.
name|getByte
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetShort
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|16811
argument_list|,
name|resultSet
operator|.
name|getShort
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetInt
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|-
literal|1338031701
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetLong
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|1476130718123L
argument_list|,
name|resultSet
operator|.
name|getLong
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetDate
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|Date
argument_list|(
literal|1476130718123L
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getDate
argument_list|(
name|ordinal
argument_list|,
name|calendar
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetTime
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// how come both are different? DST...
comment|//assertEquals(new Time(1476130718123L), resultSet.getTime(ordinal, calendar));
name|assertEquals
argument_list|(
operator|new
name|Time
argument_list|(
literal|73118123L
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getTime
argument_list|(
name|ordinal
argument_list|,
name|calendar
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetTimestamp
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|1476130718123L
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getTimestamp
argument_list|(
name|ordinal
argument_list|,
name|calendar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * accessor test helper for the string column    */
specifier|private
specifier|static
specifier|final
class|class
name|StringAccessorTestHelper
extends|extends
name|AccessorTestHelper
block|{
specifier|private
name|StringAccessorTestHelper
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testGetString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertEquals
argument_list|(
literal|"testvalue"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Calendar
name|DEFAULT_CALENDAR
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ResultSet
name|resultSet
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|executeQuery
parameter_list|()
throws|throws
name|SQLException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"timeZone"
argument_list|,
literal|"GMT"
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|new
name|TestDriver
argument_list|()
operator|.
name|connect
argument_list|(
literal|"jdbc:test"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM TABLE"
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// move to the first record
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupQuery
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|resultSet
operator|!=
literal|null
condition|)
block|{
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|AccessorTestHelper
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
expr|<
name|AccessorTestHelper
operator|>
name|asList
argument_list|(
operator|new
name|BooleanAccesorTestHelper
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|ByteAccesorTestHelper
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|ShortAccessorTestHelper
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|IntAccessorTestHelper
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|LongAccessorTestHelper
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|FloatAccessorTestHelper
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|new
name|DoubleAccessorTestHelper
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|StringAccessorTestHelper
argument_list|(
literal|8
argument_list|)
argument_list|,
operator|new
name|DateAccessorTestHelper
argument_list|(
literal|9
argument_list|)
argument_list|,
operator|new
name|TimeAccessorTestHelper
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|new
name|TimestampAccessorTestHelper
argument_list|(
literal|11
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|AccessorTestHelper
name|testHelper
decl_stmt|;
specifier|public
name|AvaticaResultSetConversionsTest
parameter_list|(
name|AccessorTestHelper
name|testHelper
parameter_list|)
block|{
name|this
operator|.
name|testHelper
operator|=
name|testHelper
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetString
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetString
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBoolean
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetBoolean
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetByte
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetByte
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetShort
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetShort
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInt
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetInt
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLong
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetLong
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFloat
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetFloat
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDouble
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetDouble
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDecimal
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetDecimal
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBytes
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetBytes
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAsciiStream
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetAsciiStream
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryStream
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetBinaryStream
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetObject
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetObject
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCharacterStream
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetCharacterStream
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetObjectWithMap
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetObject
argument_list|(
name|resultSet
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRef
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetRef
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBlob
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetBlob
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetClob
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetClob
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetArray
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetArray
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDate
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetDate
argument_list|(
name|resultSet
argument_list|,
name|DEFAULT_CALENDAR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTime
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetTime
argument_list|(
name|resultSet
argument_list|,
name|DEFAULT_CALENDAR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTimestamp
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetTimestamp
argument_list|(
name|resultSet
argument_list|,
name|DEFAULT_CALENDAR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getURL
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|getURL
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNClob
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetNClob
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSQLXML
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetSQLXML
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNString
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetNString
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNCharacterStream
parameter_list|()
throws|throws
name|SQLException
block|{
name|testHelper
operator|.
name|testGetNCharacterStream
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AvaticaResultSetConversionsTest.java
end_comment

end_unit

