begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|MetaDataOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests that {@link QueryState} properly retains the necessary state to recreate  * a {@link ResultSet}.  */
end_comment

begin_class
specifier|public
class|class
name|QueryStateTest
block|{
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|DatabaseMetaData
name|metadata
decl_stmt|;
specifier|private
name|Statement
name|statement
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disabled on JDK9 due to Mockito bug; see [CALCITE-1567].
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|"9"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|conn
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DatabaseMetaData
operator|.
name|class
argument_list|)
expr_stmt|;
name|statement
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|conn
operator|.
name|getMetaData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetAttributes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|"catalog"
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|typeNamePattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|attributeNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_ATTRIBUTES
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|typeNamePattern
argument_list|,
name|attributeNamePattern
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getAttributes
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|typeNamePattern
argument_list|,
name|attributeNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetBestRowIdentifier
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|"catalog"
decl_stmt|;
specifier|final
name|String
name|schema
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|table
init|=
literal|"table"
decl_stmt|;
specifier|final
name|int
name|scope
init|=
literal|1
decl_stmt|;
specifier|final
name|boolean
name|nullable
init|=
literal|true
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_BEST_ROW_IDENTIFIER
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schema
block|,
name|table
block|,
name|scope
block|,
name|nullable
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getBestRowIdentifier
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|scope
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetCatalogs
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_CATALOGS
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getCatalogs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetColumnPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|schema
init|=
literal|"schema"
decl_stmt|;
specifier|final
name|String
name|table
init|=
literal|"table"
decl_stmt|;
specifier|final
name|String
name|columnNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_COLUMN_PRIVILEGES
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schema
block|,
name|table
block|,
name|columnNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getColumnPrivileges
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|columnNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetColumns
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|tableNamePattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|columnNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_COLUMNS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|tableNamePattern
block|,
name|columnNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getColumns
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|,
name|columnNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetCrossReference
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|parentCatalog
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|parentSchema
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|parentTable
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|foreignCatalog
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|foreignSchema
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|foreignTable
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_CROSS_REFERENCE
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parentCatalog
block|,
name|parentSchema
block|,
name|parentTable
block|,
name|foreignCatalog
block|,
name|foreignSchema
block|,
name|foreignTable
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getCrossReference
argument_list|(
name|parentCatalog
argument_list|,
name|parentSchema
argument_list|,
name|parentTable
argument_list|,
name|foreignCatalog
argument_list|,
name|foreignSchema
argument_list|,
name|foreignTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetExportedKeys
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schema
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|table
init|=
literal|"mytable"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_EXPORTED_KEYS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schema
block|,
name|table
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getExportedKeys
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetFunctionColumns
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|functionNamePattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|columnNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_FUNCTION_COLUMNS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|functionNamePattern
block|,
name|columnNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getFunctionColumns
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|functionNamePattern
argument_list|,
name|columnNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetFunctions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|functionNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_FUNCTIONS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|functionNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getFunctions
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|functionNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetImportedKeys
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schema
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|table
init|=
literal|"my_table"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_IMPORTED_KEYS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schema
block|,
name|table
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getImportedKeys
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetIndexInfo
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schema
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|table
init|=
literal|"my_table"
decl_stmt|;
specifier|final
name|boolean
name|unique
init|=
literal|true
decl_stmt|;
specifier|final
name|boolean
name|approximate
init|=
literal|true
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_INDEX_INFO
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schema
block|,
name|table
block|,
name|unique
block|,
name|approximate
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getIndexInfo
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|unique
argument_list|,
name|approximate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetPrimaryKeys
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schema
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|table
init|=
literal|"my_table"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_PRIMARY_KEYS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schema
block|,
name|table
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getPrimaryKeys
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetProcedureColumns
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|procedureNamePattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|columnNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_PROCEDURE_COLUMNS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|procedureNamePattern
block|,
name|columnNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getProcedureColumns
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|procedureNamePattern
argument_list|,
name|columnNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetProcedures
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|procedureNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_PROCEDURES
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|procedureNamePattern
block|,     }
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getProcedures
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|procedureNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetPseudoColumns
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|tableNamePattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
name|columnNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_PSEUDO_COLUMNS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|tableNamePattern
block|,
name|columnNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getPseudoColumns
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|,
name|columnNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetSchemas
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_SCHEMAS
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getSchemas
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetSchemasWithArgs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_SCHEMAS_WITH_ARGS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getSchemas
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetSuperTables
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|tableNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_SUPER_TABLES
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|tableNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getSuperTables
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetSuperTypes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|tableNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_SUPER_TYPES
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|tableNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getSuperTypes
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetTablePrivileges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|tableNamePattern
init|=
literal|"%"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_TABLE_PRIVILEGES
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|tableNamePattern
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getTablePrivileges
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetTables
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|tableNamePattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[]
block|{
literal|"VIEW"
block|,
literal|"TABLE"
block|}
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_TABLES
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|tableNamePattern
block|,
name|types
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getTables
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetTableTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_TABLE_TYPES
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getTableTypes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetTypeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_TYPE_INFO
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetUDTs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|typeNamePattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|int
index|[]
name|types
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_UDTS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|typeNamePattern
block|,
name|types
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getUDTs
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|typeNamePattern
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataGetVersionColumns
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|""
decl_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|table
init|=
literal|"my_table"
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_VERSION_COLUMNS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|table
block|}
argument_list|)
decl_stmt|;
name|state
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|metadata
argument_list|)
operator|.
name|getVersionColumns
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|catalog
init|=
literal|"catalog"
decl_stmt|;
specifier|final
name|String
name|schema
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|table
init|=
literal|"table"
decl_stmt|;
specifier|final
name|int
name|scope
init|=
literal|1
decl_stmt|;
specifier|final
name|boolean
name|nullable
init|=
literal|true
decl_stmt|;
name|QueryState
name|state
init|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_BEST_ROW_IDENTIFIER
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schema
block|,
name|table
block|,
name|scope
block|,
name|nullable
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|state
argument_list|,
name|QueryState
operator|.
name|fromProto
argument_list|(
name|state
operator|.
name|toProto
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|schemaPattern
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|typeNamePattern
init|=
literal|"%"
decl_stmt|;
specifier|final
name|int
index|[]
name|types
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|state
operator|=
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_UDTS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|catalog
block|,
name|schemaPattern
block|,
name|typeNamePattern
block|,
name|types
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|state
argument_list|,
name|QueryState
operator|.
name|fromProto
argument_list|(
name|state
operator|.
name|toProto
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|QueryState
argument_list|(
literal|"SELECT * FROM foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|state
argument_list|,
name|QueryState
operator|.
name|fromProto
argument_list|(
name|state
operator|.
name|toProto
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End QueryStateTest.java
end_comment

end_unit

