begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionConfigImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit test for Avatica utilities.  */
end_comment

begin_class
specifier|public
class|class
name|AvaticaUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testInstantiatePlugin
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|AvaticaUtils
operator|.
name|instantiatePlugin
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"java.lang.String"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// No default constructor or INSTANCE member
try|try
block|{
specifier|final
name|Integer
name|i
init|=
name|AvaticaUtils
operator|.
name|instantiatePlugin
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"java.lang.Integer"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Property 'java.lang.Integer' not valid for plugin type java.lang.Integer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BigInteger
name|b
init|=
name|AvaticaUtils
operator|.
name|instantiatePlugin
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
literal|"java.math.BigInteger#ONE"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
argument_list|,
name|is
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|BigInteger
name|b2
init|=
name|AvaticaUtils
operator|.
name|instantiatePlugin
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
literal|"java.math.BigInteger.ONE"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|b2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Property 'java.math.BigInteger.ONE' not valid for plugin type java.math.BigInteger"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Unit test for    * {@link org.apache.calcite.avatica.AvaticaUtils#unique(java.lang.String)}. */
annotation|@
name|Test
specifier|public
name|void
name|testUnique
parameter_list|()
block|{
comment|// Below, the "probably" comments indicate the strings that will be
comment|// generated the first time you run the test.
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// probably "a"
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// probably "a_1"
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// probably "b"
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"a_1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// probably "a_1_3"
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// probably "A"
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// probably "a_5"
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests connect string properties. */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionProperty
parameter_list|()
block|{
specifier|final
name|ConnectionPropertyImpl
name|n
init|=
operator|new
name|ConnectionPropertyImpl
argument_list|(
literal|"N"
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|,
name|ConnectionProperty
operator|.
name|Type
operator|.
name|NUMBER
argument_list|)
decl_stmt|;
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|ConnectionConfigImpl
operator|.
name|PropEnv
name|env
init|=
name|n
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|(
operator|-
literal|45
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|n
operator|.
name|name
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|=
name|n
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|(
operator|-
literal|45
argument_list|)
argument_list|,
name|is
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|n
operator|.
name|name
argument_list|,
literal|"10k"
argument_list|)
expr_stmt|;
name|env
operator|=
name|n
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|n
operator|.
name|name
argument_list|,
literal|"-0.5k"
argument_list|)
expr_stmt|;
name|env
operator|=
name|n
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|()
argument_list|,
name|is
argument_list|(
operator|-
literal|512
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|n
operator|.
name|name
argument_list|,
literal|"10m"
argument_list|)
expr_stmt|;
name|env
operator|=
name|n
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10L
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getDouble
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10D
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|n
operator|.
name|name
argument_list|,
literal|"-2M"
argument_list|)
expr_stmt|;
name|env
operator|=
name|n
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getInt
argument_list|()
argument_list|,
name|is
argument_list|(
operator|-
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|n
operator|.
name|name
argument_list|,
literal|"10g"
argument_list|)
expr_stmt|;
name|env
operator|=
name|n
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ConnectionPropertyImpl
name|b
init|=
operator|new
name|ConnectionPropertyImpl
argument_list|(
literal|"B"
argument_list|,
literal|true
argument_list|,
name|ConnectionProperty
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|env
operator|=
name|b
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getBoolean
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getBoolean
argument_list|(
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getBoolean
argument_list|(
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|b
operator|.
name|name
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|env
operator|=
name|b
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getBoolean
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ConnectionPropertyImpl
name|s
init|=
operator|new
name|ConnectionPropertyImpl
argument_list|(
literal|"S"
argument_list|,
literal|"foo"
argument_list|,
name|ConnectionProperty
operator|.
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|env
operator|=
name|s
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getString
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|s
operator|.
name|name
argument_list|,
literal|"  "
argument_list|)
expr_stmt|;
name|env
operator|=
name|s
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ConnectionPropertyImpl
name|t
init|=
operator|new
name|ConnectionPropertyImpl
argument_list|(
literal|"T"
argument_list|,
literal|null
argument_list|,
name|ConnectionProperty
operator|.
name|Type
operator|.
name|ENUM
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"should throw if you specify an enum property without a class, got "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"must specify value class for an ENUM"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ok
block|}
comment|// An enum with a default value
specifier|final
name|ConnectionPropertyImpl
name|t
init|=
operator|new
name|ConnectionPropertyImpl
argument_list|(
literal|"T"
argument_list|,
name|Size
operator|.
name|BIG
argument_list|,
name|ConnectionProperty
operator|.
name|Type
operator|.
name|ENUM
argument_list|,
name|Size
operator|.
name|class
argument_list|)
decl_stmt|;
name|env
operator|=
name|t
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|)
argument_list|,
name|is
argument_list|(
name|Size
operator|.
name|BIG
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|,
name|Size
operator|.
name|SMALL
argument_list|)
argument_list|,
name|is
argument_list|(
name|Size
operator|.
name|SMALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Weight
name|envEnum
init|=
name|env
operator|.
name|getEnum
argument_list|(
name|Weight
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|envEnum
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"wrong value class; expected "
operator|+
name|Size
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// An enum with a default value that is an anonymous enum,
comment|// not specifying value type.
specifier|final
name|ConnectionPropertyImpl
name|v
init|=
operator|new
name|ConnectionPropertyImpl
argument_list|(
literal|"V"
argument_list|,
name|Size
operator|.
name|SMALL
argument_list|,
name|ConnectionProperty
operator|.
name|Type
operator|.
name|ENUM
argument_list|)
decl_stmt|;
name|env
operator|=
name|v
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|)
argument_list|,
name|is
argument_list|(
name|Size
operator|.
name|SMALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|,
name|Size
operator|.
name|BIG
argument_list|)
argument_list|,
name|is
argument_list|(
name|Size
operator|.
name|BIG
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Weight
name|envEnum
init|=
name|env
operator|.
name|getEnum
argument_list|(
name|Weight
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|envEnum
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"wrong value class; expected "
operator|+
name|Size
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// An enum with no default value
specifier|final
name|ConnectionPropertyImpl
name|u
init|=
operator|new
name|ConnectionPropertyImpl
argument_list|(
literal|"U"
argument_list|,
literal|null
argument_list|,
name|ConnectionProperty
operator|.
name|Type
operator|.
name|ENUM
argument_list|,
name|Size
operator|.
name|class
argument_list|)
decl_stmt|;
name|env
operator|=
name|u
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|,
name|Size
operator|.
name|SMALL
argument_list|)
argument_list|,
name|is
argument_list|(
name|Size
operator|.
name|SMALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|getEnum
argument_list|(
name|Size
operator|.
name|class
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Weight
name|envEnum
init|=
name|env
operator|.
name|getEnum
argument_list|(
name|Weight
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|envEnum
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"wrong value class; expected "
operator|+
name|Size
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongToIntegerTranslation
parameter_list|()
block|{
name|long
index|[]
name|longValues
init|=
operator|new
name|long
index|[]
block|{
name|Integer
operator|.
name|MIN_VALUE
block|,
operator|-
literal|5
block|,
literal|0
block|,
literal|1
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|+
literal|1L
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|int
index|[]
name|convertedValues
init|=
name|AvaticaUtils
operator|.
name|toSaturatedInts
argument_list|(
name|longValues
argument_list|)
decl_stmt|;
name|int
index|[]
name|intValues
init|=
operator|new
name|int
index|[]
block|{
name|Integer
operator|.
name|MIN_VALUE
block|,
operator|-
literal|5
block|,
literal|0
block|,
literal|1
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|convertedValues
argument_list|,
name|intValues
argument_list|)
expr_stmt|;
block|}
comment|/** Dummy implementation of {@link ConnectionProperty}. */
specifier|private
specifier|static
class|class
name|ConnectionPropertyImpl
implements|implements
name|ConnectionProperty
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Object
name|defaultValue
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|valueClass
decl_stmt|;
specifier|private
name|Type
name|type
decl_stmt|;
name|ConnectionPropertyImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|defaultValue
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ConnectionPropertyImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|defaultValue
parameter_list|,
name|Type
name|type
parameter_list|,
name|Class
name|valueClass
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|valueClass
operator|=
name|type
operator|.
name|deduceValueClass
argument_list|(
name|defaultValue
argument_list|,
name|valueClass
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|valid
argument_list|(
name|defaultValue
argument_list|,
name|this
operator|.
name|valueClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
specifier|public
name|String
name|camelName
parameter_list|()
block|{
return|return
name|name
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|public
name|Object
name|defaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|Class
name|valueClass
parameter_list|()
block|{
return|return
name|valueClass
return|;
block|}
specifier|public
name|ConnectionConfigImpl
operator|.
name|PropEnv
name|wrap
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectionProperty
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConnectionConfigImpl
operator|.
name|PropEnv
argument_list|(
name|ConnectionConfigImpl
operator|.
name|parse
argument_list|(
name|properties
argument_list|,
name|map
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|required
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** How large? */
specifier|private
enum|enum
name|Size
block|{
name|BIG
block|,
name|SMALL
block|{     }
block|}
comment|/** How heavy? */
specifier|private
enum|enum
name|Weight
block|{
name|HEAVY
block|,
name|LIGHT
block|}
block|}
end_class

begin_comment
comment|// End AvaticaUtilsTest.java
end_comment

end_unit

