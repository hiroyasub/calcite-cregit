begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
operator|.
name|Rep
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|UpdateBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ExecuteBatchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class for ExecuteBatchRequest  */
end_comment

begin_class
specifier|public
class|class
name|ExecuteBatchRequestTest
block|{
specifier|private
name|ExecuteBatchRequest
name|identityRequest
init|=
operator|new
name|ExecuteBatchRequest
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypedValue
argument_list|>
name|paramValues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TypedValue
operator|.
name|create
argument_list|(
name|Rep
operator|.
name|BOOLEAN
operator|.
name|name
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|,
name|TypedValue
operator|.
name|create
argument_list|(
name|Rep
operator|.
name|STRING
operator|.
name|name
argument_list|()
argument_list|,
literal|"string"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testConversionFromProtobuf
parameter_list|()
block|{
name|ExecuteBatchRequest
name|request
init|=
operator|new
name|ExecuteBatchRequest
argument_list|(
literal|"connectionId"
argument_list|,
literal|12345
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|paramValues
argument_list|,
name|paramValues
argument_list|,
name|paramValues
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"A request with the POJO TypedValue list should return false"
argument_list|,
name|request
operator|.
name|hasProtoUpdateBatches
argument_list|()
argument_list|)
expr_stmt|;
comment|// Everything will be serialized via protobuf
name|Requests
operator|.
name|ExecuteBatchRequest
name|protoRequest
init|=
name|request
operator|.
name|serialize
argument_list|()
decl_stmt|;
name|ExecuteBatchRequest
name|copy
init|=
name|identityRequest
operator|.
name|deserialize
argument_list|(
name|protoRequest
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Parameter values (pojo) list should be null"
argument_list|,
name|copy
operator|.
name|parameterValues
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hasProtoUpdateBatches() should return true"
argument_list|,
name|copy
operator|.
name|hasProtoUpdateBatches
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateBatch
argument_list|>
name|protoParameterValues
init|=
name|copy
operator|.
name|getProtoUpdateBatches
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Protobuf serialized parameterValues should not be null"
argument_list|,
name|protoParameterValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|parameterValues
operator|.
name|size
argument_list|()
argument_list|,
name|protoParameterValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|parameterValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|TypedValue
argument_list|>
name|orig
init|=
name|request
operator|.
name|parameterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Common
operator|.
name|TypedValue
argument_list|>
name|proto
init|=
name|protoParameterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getParameterValuesList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in length of TypedValues at index "
operator|+
name|i
argument_list|,
name|orig
operator|.
name|size
argument_list|()
argument_list|,
name|proto
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't re-test TypedValue serialization
block|}
comment|// Everything else should be equivalent.
name|assertEquals
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|copy
operator|.
name|connectionId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|statementId
argument_list|,
name|copy
operator|.
name|statementId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ExecuteBatchRequestTest.java
end_comment

end_unit

