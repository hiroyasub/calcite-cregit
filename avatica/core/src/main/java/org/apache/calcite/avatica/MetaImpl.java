begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ArrayIteratorCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|IteratorCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ListIteratorCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|MapIteratorCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|RecordIteratorCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Basic implementation of {@link Meta}.  *  *<p>Each sub-class must implement the two remaining abstract methods,  * {@link #prepare} and  * {@link #prepareAndExecute}.  * It should also override metadata methods such as {@link #getCatalogs(Meta.ConnectionHandle)} and  * {@link #getTables} for the element types for which it has instances; the  * default metadata methods return empty collections.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MetaImpl
implements|implements
name|Meta
block|{
comment|/** The {@link AvaticaConnection} backing {@code this}. */
specifier|protected
specifier|final
name|AvaticaConnection
name|connection
decl_stmt|;
comment|/** Represents the various states specific to {@link #connection}.    *    *<p>Note: this instance is used recursively with {@link #connection}'s getter and setter    * methods.</p>    */
specifier|protected
specifier|final
name|ConnectionPropertiesImpl
name|connProps
decl_stmt|;
specifier|public
name|MetaImpl
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|connProps
operator|=
operator|new
name|ConnectionPropertiesImpl
argument_list|()
expr_stmt|;
block|}
comment|/** Uses a {@link org.apache.calcite.avatica.Meta.CursorFactory} to convert    * an {@link Iterable} into a    * {@link org.apache.calcite.avatica.util.Cursor}. */
specifier|public
specifier|static
name|Cursor
name|createCursor
parameter_list|(
name|CursorFactory
name|cursorFactory
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|iterable
parameter_list|)
block|{
switch|switch
condition|(
name|cursorFactory
operator|.
name|style
condition|)
block|{
case|case
name|OBJECT
case|:
return|return
operator|new
name|IteratorCursor
argument_list|<
name|Object
argument_list|>
argument_list|(
name|iterable
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
specifier|protected
name|Getter
name|createGetter
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
operator|new
name|ObjectGetter
argument_list|(
name|ordinal
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|ARRAY
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|iterable1
init|=
operator|(
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
operator|(
name|Iterable
operator|)
name|iterable
decl_stmt|;
return|return
operator|new
name|ArrayIteratorCursor
argument_list|(
name|iterable1
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
case|case
name|RECORD
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Class
argument_list|<
name|Object
argument_list|>
name|clazz
init|=
name|cursorFactory
operator|.
name|clazz
decl_stmt|;
return|return
operator|new
name|RecordIteratorCursor
argument_list|<
name|Object
argument_list|>
argument_list|(
name|iterable
operator|.
name|iterator
argument_list|()
argument_list|,
name|clazz
argument_list|)
return|;
case|case
name|RECORD_PROJECTION
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Class
argument_list|<
name|Object
argument_list|>
name|clazz2
init|=
name|cursorFactory
operator|.
name|clazz
decl_stmt|;
return|return
operator|new
name|RecordIteratorCursor
argument_list|<
name|Object
argument_list|>
argument_list|(
name|iterable
operator|.
name|iterator
argument_list|()
argument_list|,
name|clazz2
argument_list|,
name|cursorFactory
operator|.
name|fields
argument_list|)
return|;
case|case
name|LIST
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Iterable
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iterable2
init|=
operator|(
name|Iterable
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
operator|(
name|Iterable
operator|)
name|iterable
decl_stmt|;
return|return
operator|new
name|ListIteratorCursor
argument_list|(
name|iterable2
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
case|case
name|MAP
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Iterable
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterable3
init|=
operator|(
name|Iterable
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
operator|(
name|Iterable
operator|)
name|iterable
decl_stmt|;
return|return
operator|new
name|MapIteratorCursor
argument_list|(
name|iterable3
operator|.
name|iterator
argument_list|()
argument_list|,
name|cursorFactory
operator|.
name|fieldNames
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown style: "
operator|+
name|cursorFactory
operator|.
name|style
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|collect
parameter_list|(
name|CursorFactory
name|cursorFactory
parameter_list|,
specifier|final
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|Object
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|iterator
return|;
block|}
block|}
decl_stmt|;
return|return
name|collect
argument_list|(
name|cursorFactory
argument_list|,
name|iterable
argument_list|,
name|list
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|collect
parameter_list|(
name|CursorFactory
name|cursorFactory
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|iterable
parameter_list|,
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list
parameter_list|)
block|{
switch|switch
condition|(
name|cursorFactory
operator|.
name|style
condition|)
block|{
case|case
name|OBJECT
case|:
for|for
control|(
name|Object
name|o
range|:
name|iterable
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
case|case
name|ARRAY
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|iterable1
init|=
operator|(
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
operator|(
name|Iterable
operator|)
name|iterable
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|objects
range|:
name|iterable1
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|objects
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
case|case
name|RECORD
case|:
case|case
name|RECORD_PROJECTION
case|:
specifier|final
name|Field
index|[]
name|fields
decl_stmt|;
switch|switch
condition|(
name|cursorFactory
operator|.
name|style
condition|)
block|{
case|case
name|RECORD
case|:
name|fields
operator|=
name|cursorFactory
operator|.
name|clazz
operator|.
name|getFields
argument_list|()
expr_stmt|;
break|break;
default|default:
name|fields
operator|=
name|cursorFactory
operator|.
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|Field
index|[
name|cursorFactory
operator|.
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|o
range|:
name|iterable
control|)
block|{
specifier|final
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|objects
index|[
name|i
index|]
operator|=
name|field
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|objects
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
case|case
name|LIST
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Iterable
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iterable2
init|=
operator|(
name|Iterable
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
operator|(
name|Iterable
operator|)
name|iterable
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
range|:
name|iterable2
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|objects
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
case|case
name|MAP
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Iterable
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterable3
init|=
operator|(
name|Iterable
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
operator|(
name|Iterable
operator|)
name|iterable
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
range|:
name|iterable3
control|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|cursorFactory
operator|.
name|fieldNames
control|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|objects
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown style: "
operator|+
name|cursorFactory
operator|.
name|style
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|openConnection
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
comment|// dummy implementation, connection is already created at this point
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeConnection
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
comment|// TODO: implement
comment|//
comment|// lots of Calcite tests break with this simple implementation,
comment|// requires investigation
comment|//    try {
comment|//      connection.close();
comment|//    } catch (SQLException e) {
comment|//      throw new RuntimeException(e);
comment|//    }
block|}
annotation|@
name|Override
specifier|public
name|ConnectionProperties
name|connectionSync
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|ConnectionProperties
name|connProps
parameter_list|)
block|{
name|this
operator|.
name|connProps
operator|.
name|merge
argument_list|(
name|connProps
argument_list|)
expr_stmt|;
name|this
operator|.
name|connProps
operator|.
name|setDirty
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|connProps
return|;
block|}
specifier|public
name|StatementHandle
name|createStatement
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
return|return
operator|new
name|StatementHandle
argument_list|(
name|ch
operator|.
name|id
argument_list|,
name|connection
operator|.
name|statementCount
operator|++
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Creates an empty result set. Useful for JDBC metadata methods that are    * not implemented or which query entities that are not supported (e.g.    * triggers in Lingual). */
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|MetaResultSet
name|createEmptyResultSet
parameter_list|(
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|createResultSet
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|fieldMetaData
argument_list|(
name|clazz
argument_list|)
operator|.
name|columns
argument_list|,
name|CursorFactory
operator|.
name|deduce
argument_list|(
name|fieldMetaData
argument_list|(
name|clazz
argument_list|)
operator|.
name|columns
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Frame
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ColumnMetaData
name|columnMetaData
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|index
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|boolean
name|columnNullable
parameter_list|)
block|{
return|return
name|columnMetaData
argument_list|(
name|name
argument_list|,
name|index
argument_list|,
name|type
argument_list|,
name|columnNullable
condition|?
name|DatabaseMetaData
operator|.
name|columnNullable
else|:
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ColumnMetaData
name|columnMetaData
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|index
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|int
name|columnNullable
parameter_list|)
block|{
name|TypeInfo
name|pair
init|=
name|TypeInfo
operator|.
name|m
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|ColumnMetaData
operator|.
name|Rep
name|rep
init|=
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|VALUE_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|ColumnMetaData
operator|.
name|AvaticaType
name|scalarType
init|=
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|pair
operator|.
name|sqlType
argument_list|,
name|pair
operator|.
name|sqlTypeName
argument_list|,
name|rep
argument_list|)
decl_stmt|;
return|return
operator|new
name|ColumnMetaData
argument_list|(
name|index
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|columnNullable
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|scalarType
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|scalarType
operator|.
name|columnClassName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|ColumnMetaData
operator|.
name|StructType
name|fieldMetaData
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMetaData
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|columnNullable
init|=
name|getColumnNullability
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|columnMetaData
argument_list|(
name|AvaticaUtils
operator|.
name|camelToUpper
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|columnNullable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ColumnMetaData
operator|.
name|struct
argument_list|(
name|list
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|int
name|getColumnNullability
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
comment|// Check annotations first
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ColumnNoNulls
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|DatabaseMetaData
operator|.
name|columnNoNulls
return|;
block|}
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ColumnNullable
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|DatabaseMetaData
operator|.
name|columnNullable
return|;
block|}
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ColumnNullableUnknown
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|DatabaseMetaData
operator|.
name|columnNullableUnknown
return|;
block|}
comment|// check the field type to decide if annotated, as a fallback
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|DatabaseMetaData
operator|.
name|columnNoNulls
return|;
block|}
return|return
name|DatabaseMetaData
operator|.
name|columnNullable
return|;
block|}
specifier|protected
name|MetaResultSet
name|createResultSet
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|internalParameters
parameter_list|,
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
parameter_list|,
name|CursorFactory
name|cursorFactory
parameter_list|,
name|Frame
name|firstFrame
parameter_list|)
block|{
try|try
block|{
specifier|final
name|AvaticaStatement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|Signature
name|signature
init|=
operator|new
name|Signature
argument_list|(
name|columns
argument_list|,
literal|""
argument_list|,
name|Collections
operator|.
expr|<
name|AvaticaParameter
operator|>
name|emptyList
argument_list|()
argument_list|,
name|internalParameters
argument_list|,
name|cursorFactory
argument_list|,
name|Meta
operator|.
name|StatementType
operator|.
name|SELECT
argument_list|)
decl_stmt|;
return|return
name|MetaResultSet
operator|.
name|create
argument_list|(
name|connection
operator|.
name|id
argument_list|,
name|statement
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|signature
argument_list|,
name|firstFrame
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** An object that has a name. */
specifier|public
interface|interface
name|Named
block|{
annotation|@
name|JsonIgnore
name|String
name|getName
parameter_list|()
function_decl|;
block|}
comment|/** Annotation that indicates that a meta field may contain null values. */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|FIELD
argument_list|)
specifier|public
annotation_defn|@interface
name|ColumnNullable
block|{   }
comment|/** Annotation that indicates that it is unknown whether a meta field may contain    * null values. */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|FIELD
argument_list|)
specifier|public
annotation_defn|@interface
name|ColumnNullableUnknown
block|{   }
comment|/** Annotation that indicates that a meta field may not contain null    * values. */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|FIELD
argument_list|)
specifier|public
annotation_defn|@interface
name|ColumnNoNulls
block|{   }
comment|/** Metadata describing a column. */
specifier|public
specifier|static
class|class
name|MetaColumn
implements|implements
name|Named
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|columnSize
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|bufferLength
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|decimalDigits
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|numPrecRadix
decl_stmt|;
specifier|public
specifier|final
name|int
name|nullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnDef
init|=
literal|null
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|sqlDataType
init|=
literal|null
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|sqlDatetimeSub
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|charOctetLength
decl_stmt|;
specifier|public
specifier|final
name|int
name|ordinalPosition
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|isNullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|scopeCatalog
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|scopeSchema
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|scopeTable
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Short
name|sourceDataType
init|=
literal|null
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|isAutoincrement
init|=
literal|""
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|isGeneratedcolumn
init|=
literal|""
decl_stmt|;
specifier|public
name|MetaColumn
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|int
name|dataType
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Integer
name|columnSize
parameter_list|,
name|Integer
name|decimalDigits
parameter_list|,
name|Integer
name|numPrecRadix
parameter_list|,
name|int
name|nullable
parameter_list|,
name|Integer
name|charOctetLength
parameter_list|,
name|int
name|ordinalPosition
parameter_list|,
name|String
name|isNullable
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|columnSize
operator|=
name|columnSize
expr_stmt|;
name|this
operator|.
name|decimalDigits
operator|=
name|decimalDigits
expr_stmt|;
name|this
operator|.
name|numPrecRadix
operator|=
name|numPrecRadix
expr_stmt|;
name|this
operator|.
name|nullable
operator|=
name|nullable
expr_stmt|;
name|this
operator|.
name|charOctetLength
operator|=
name|charOctetLength
expr_stmt|;
name|this
operator|.
name|ordinalPosition
operator|=
name|ordinalPosition
expr_stmt|;
name|this
operator|.
name|isNullable
operator|=
name|isNullable
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|columnName
return|;
block|}
block|}
comment|/** Metadata describing a table. */
specifier|public
specifier|static
class|class
name|MetaTable
implements|implements
name|Named
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableType
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeCat
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeSchem
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeName
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|selfReferencingColName
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|refGeneration
init|=
literal|null
decl_stmt|;
specifier|public
name|MetaTable
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|tableType
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
block|}
comment|/** Metadata describing a schema. */
specifier|public
specifier|static
class|class
name|MetaSchema
implements|implements
name|Named
block|{
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableCatalog
decl_stmt|;
specifier|public
name|MetaSchema
parameter_list|(
name|String
name|tableCatalog
parameter_list|,
name|String
name|tableSchem
parameter_list|)
block|{
name|this
operator|.
name|tableCatalog
operator|=
name|tableCatalog
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|tableSchem
return|;
block|}
block|}
comment|/** Metadata describing a catalog. */
specifier|public
specifier|static
class|class
name|MetaCatalog
implements|implements
name|Named
block|{
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
name|MetaCatalog
parameter_list|(
name|String
name|tableCatalog
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCatalog
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|tableCat
return|;
block|}
block|}
comment|/** Metadata describing a table type. */
specifier|public
specifier|static
class|class
name|MetaTableType
block|{
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableType
decl_stmt|;
specifier|public
name|MetaTableType
parameter_list|(
name|String
name|tableType
parameter_list|)
block|{
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a procedure. */
specifier|public
specifier|static
class|class
name|MetaProcedure
block|{
specifier|public
specifier|final
name|String
name|procedureCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|procedureSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|procedureName
decl_stmt|;
specifier|public
specifier|final
name|String
name|futureUse1
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|futureUse2
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|futureUse3
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|short
name|procedureType
decl_stmt|;
specifier|public
specifier|final
name|String
name|specificName
decl_stmt|;
specifier|public
name|MetaProcedure
parameter_list|(
name|String
name|procedureCat
parameter_list|,
name|String
name|procedureSchem
parameter_list|,
name|String
name|procedureName
parameter_list|,
name|short
name|procedureType
parameter_list|,
name|String
name|specificName
parameter_list|)
block|{
name|this
operator|.
name|procedureCat
operator|=
name|procedureCat
expr_stmt|;
name|this
operator|.
name|procedureSchem
operator|=
name|procedureSchem
expr_stmt|;
name|this
operator|.
name|procedureName
operator|=
name|procedureName
expr_stmt|;
name|this
operator|.
name|procedureType
operator|=
name|procedureType
expr_stmt|;
name|this
operator|.
name|specificName
operator|=
name|specificName
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a procedure column. */
specifier|public
specifier|static
class|class
name|MetaProcedureColumn
block|{
specifier|public
specifier|final
name|String
name|procedureCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|procedureSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|procedureName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|short
name|columnType
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|precision
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|length
decl_stmt|;
specifier|public
specifier|final
name|Short
name|scale
decl_stmt|;
specifier|public
specifier|final
name|Short
name|radix
decl_stmt|;
specifier|public
specifier|final
name|short
name|nullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnDef
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|sqlDataType
init|=
literal|null
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|sqlDatetimeSub
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|charOctetLength
decl_stmt|;
specifier|public
specifier|final
name|int
name|ordinalPosition
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|isNullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|specificName
decl_stmt|;
specifier|public
name|MetaProcedureColumn
parameter_list|(
name|String
name|procedureCat
parameter_list|,
name|String
name|procedureSchem
parameter_list|,
name|String
name|procedureName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|short
name|columnType
parameter_list|,
name|int
name|dataType
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Integer
name|precision
parameter_list|,
name|Integer
name|length
parameter_list|,
name|Short
name|scale
parameter_list|,
name|Short
name|radix
parameter_list|,
name|short
name|nullable
parameter_list|,
name|String
name|columnDef
parameter_list|,
name|Integer
name|charOctetLength
parameter_list|,
name|int
name|ordinalPosition
parameter_list|,
name|String
name|isNullable
parameter_list|,
name|String
name|specificName
parameter_list|)
block|{
name|this
operator|.
name|procedureCat
operator|=
name|procedureCat
expr_stmt|;
name|this
operator|.
name|procedureSchem
operator|=
name|procedureSchem
expr_stmt|;
name|this
operator|.
name|procedureName
operator|=
name|procedureName
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|columnType
operator|=
name|columnType
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|radix
operator|=
name|radix
expr_stmt|;
name|this
operator|.
name|nullable
operator|=
name|nullable
expr_stmt|;
name|this
operator|.
name|columnDef
operator|=
name|columnDef
expr_stmt|;
name|this
operator|.
name|charOctetLength
operator|=
name|charOctetLength
expr_stmt|;
name|this
operator|.
name|ordinalPosition
operator|=
name|ordinalPosition
expr_stmt|;
name|this
operator|.
name|isNullable
operator|=
name|isNullable
expr_stmt|;
name|this
operator|.
name|specificName
operator|=
name|specificName
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a column privilege. */
specifier|public
specifier|static
class|class
name|MetaColumnPrivilege
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|String
name|grantor
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|grantee
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|privilege
decl_stmt|;
specifier|public
specifier|final
name|String
name|isGrantable
decl_stmt|;
specifier|public
name|MetaColumnPrivilege
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|grantor
parameter_list|,
name|String
name|grantee
parameter_list|,
name|String
name|privilege
parameter_list|,
name|String
name|isGrantable
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|grantor
operator|=
name|grantor
expr_stmt|;
name|this
operator|.
name|grantee
operator|=
name|grantee
expr_stmt|;
name|this
operator|.
name|privilege
operator|=
name|privilege
expr_stmt|;
name|this
operator|.
name|isGrantable
operator|=
name|isGrantable
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a table privilege. */
specifier|public
specifier|static
class|class
name|MetaTablePrivilege
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|String
name|grantor
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|grantee
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|privilege
decl_stmt|;
specifier|public
specifier|final
name|String
name|isGrantable
decl_stmt|;
specifier|public
name|MetaTablePrivilege
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|grantor
parameter_list|,
name|String
name|grantee
parameter_list|,
name|String
name|privilege
parameter_list|,
name|String
name|isGrantable
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|grantor
operator|=
name|grantor
expr_stmt|;
name|this
operator|.
name|grantee
operator|=
name|grantee
expr_stmt|;
name|this
operator|.
name|privilege
operator|=
name|privilege
expr_stmt|;
name|this
operator|.
name|isGrantable
operator|=
name|isGrantable
expr_stmt|;
block|}
block|}
comment|/** Metadata describing the best identifier for a row. */
specifier|public
specifier|static
class|class
name|MetaBestRowIdentifier
block|{
specifier|public
specifier|final
name|short
name|scope
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|columnSize
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|bufferLength
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Short
name|decimalDigits
decl_stmt|;
specifier|public
name|short
name|pseudoColumn
decl_stmt|;
specifier|public
name|MetaBestRowIdentifier
parameter_list|(
name|short
name|scope
parameter_list|,
name|String
name|columnName
parameter_list|,
name|int
name|dataType
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Integer
name|columnSize
parameter_list|,
name|Short
name|decimalDigits
parameter_list|,
name|short
name|pseudoColumn
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|columnSize
operator|=
name|columnSize
expr_stmt|;
name|this
operator|.
name|decimalDigits
operator|=
name|decimalDigits
expr_stmt|;
name|this
operator|.
name|pseudoColumn
operator|=
name|pseudoColumn
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a version column. */
specifier|public
specifier|static
class|class
name|MetaVersionColumn
block|{
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Short
name|scope
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|columnSize
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|bufferLength
decl_stmt|;
specifier|public
specifier|final
name|Short
name|decimalDigits
decl_stmt|;
specifier|public
specifier|final
name|short
name|pseudoColumn
decl_stmt|;
name|MetaVersionColumn
parameter_list|(
name|Short
name|scope
parameter_list|,
name|String
name|columnName
parameter_list|,
name|int
name|dataType
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Integer
name|columnSize
parameter_list|,
name|Integer
name|bufferLength
parameter_list|,
name|Short
name|decimalDigits
parameter_list|,
name|short
name|pseudoColumn
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|columnSize
operator|=
name|columnSize
expr_stmt|;
name|this
operator|.
name|bufferLength
operator|=
name|bufferLength
expr_stmt|;
name|this
operator|.
name|decimalDigits
operator|=
name|decimalDigits
expr_stmt|;
name|this
operator|.
name|pseudoColumn
operator|=
name|pseudoColumn
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a primary key. */
specifier|public
specifier|static
class|class
name|MetaPrimaryKey
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|short
name|keySeq
decl_stmt|;
specifier|public
specifier|final
name|String
name|pkName
decl_stmt|;
name|MetaPrimaryKey
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|short
name|keySeq
parameter_list|,
name|String
name|pkName
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|keySeq
operator|=
name|keySeq
expr_stmt|;
name|this
operator|.
name|pkName
operator|=
name|pkName
expr_stmt|;
block|}
block|}
comment|/** Metadata describing an imported key. */
specifier|public
specifier|static
class|class
name|MetaImportedKey
block|{
specifier|public
specifier|final
name|String
name|pktableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|pktableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|pktableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|pkcolumnName
decl_stmt|;
specifier|public
specifier|final
name|String
name|fktableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|fktableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|fktableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|fkcolumnName
decl_stmt|;
specifier|public
specifier|final
name|short
name|keySeq
decl_stmt|;
specifier|public
specifier|final
name|short
name|updateRule
decl_stmt|;
specifier|public
specifier|final
name|short
name|deleteRule
decl_stmt|;
specifier|public
specifier|final
name|String
name|fkName
decl_stmt|;
specifier|public
specifier|final
name|String
name|pkName
decl_stmt|;
specifier|public
specifier|final
name|short
name|deferability
decl_stmt|;
specifier|public
name|MetaImportedKey
parameter_list|(
name|String
name|pktableCat
parameter_list|,
name|String
name|pktableSchem
parameter_list|,
name|String
name|pktableName
parameter_list|,
name|String
name|pkcolumnName
parameter_list|,
name|String
name|fktableCat
parameter_list|,
name|String
name|fktableSchem
parameter_list|,
name|String
name|fktableName
parameter_list|,
name|String
name|fkcolumnName
parameter_list|,
name|short
name|keySeq
parameter_list|,
name|short
name|updateRule
parameter_list|,
name|short
name|deleteRule
parameter_list|,
name|String
name|fkName
parameter_list|,
name|String
name|pkName
parameter_list|,
name|short
name|deferability
parameter_list|)
block|{
name|this
operator|.
name|pktableCat
operator|=
name|pktableCat
expr_stmt|;
name|this
operator|.
name|pktableSchem
operator|=
name|pktableSchem
expr_stmt|;
name|this
operator|.
name|pktableName
operator|=
name|pktableName
expr_stmt|;
name|this
operator|.
name|pkcolumnName
operator|=
name|pkcolumnName
expr_stmt|;
name|this
operator|.
name|fktableCat
operator|=
name|fktableCat
expr_stmt|;
name|this
operator|.
name|fktableSchem
operator|=
name|fktableSchem
expr_stmt|;
name|this
operator|.
name|fktableName
operator|=
name|fktableName
expr_stmt|;
name|this
operator|.
name|fkcolumnName
operator|=
name|fkcolumnName
expr_stmt|;
name|this
operator|.
name|keySeq
operator|=
name|keySeq
expr_stmt|;
name|this
operator|.
name|updateRule
operator|=
name|updateRule
expr_stmt|;
name|this
operator|.
name|deleteRule
operator|=
name|deleteRule
expr_stmt|;
name|this
operator|.
name|fkName
operator|=
name|fkName
expr_stmt|;
name|this
operator|.
name|pkName
operator|=
name|pkName
expr_stmt|;
name|this
operator|.
name|deferability
operator|=
name|deferability
expr_stmt|;
block|}
block|}
comment|/** Metadata describing an exported key. */
specifier|public
specifier|static
class|class
name|MetaExportedKey
block|{
specifier|public
specifier|final
name|String
name|pktableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|pktableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|pktableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|pkcolumnName
decl_stmt|;
specifier|public
specifier|final
name|String
name|fktableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|fktableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|fktableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|fkcolumnName
decl_stmt|;
specifier|public
specifier|final
name|short
name|keySeq
decl_stmt|;
specifier|public
specifier|final
name|short
name|updateRule
decl_stmt|;
specifier|public
specifier|final
name|short
name|deleteRule
decl_stmt|;
specifier|public
specifier|final
name|String
name|fkName
decl_stmt|;
specifier|public
specifier|final
name|String
name|pkName
decl_stmt|;
specifier|public
specifier|final
name|short
name|deferability
decl_stmt|;
specifier|public
name|MetaExportedKey
parameter_list|(
name|String
name|pktableCat
parameter_list|,
name|String
name|pktableSchem
parameter_list|,
name|String
name|pktableName
parameter_list|,
name|String
name|pkcolumnName
parameter_list|,
name|String
name|fktableCat
parameter_list|,
name|String
name|fktableSchem
parameter_list|,
name|String
name|fktableName
parameter_list|,
name|String
name|fkcolumnName
parameter_list|,
name|short
name|keySeq
parameter_list|,
name|short
name|updateRule
parameter_list|,
name|short
name|deleteRule
parameter_list|,
name|String
name|fkName
parameter_list|,
name|String
name|pkName
parameter_list|,
name|short
name|deferability
parameter_list|)
block|{
name|this
operator|.
name|pktableCat
operator|=
name|pktableCat
expr_stmt|;
name|this
operator|.
name|pktableSchem
operator|=
name|pktableSchem
expr_stmt|;
name|this
operator|.
name|pktableName
operator|=
name|pktableName
expr_stmt|;
name|this
operator|.
name|pkcolumnName
operator|=
name|pkcolumnName
expr_stmt|;
name|this
operator|.
name|fktableCat
operator|=
name|fktableCat
expr_stmt|;
name|this
operator|.
name|fktableSchem
operator|=
name|fktableSchem
expr_stmt|;
name|this
operator|.
name|fktableName
operator|=
name|fktableName
expr_stmt|;
name|this
operator|.
name|fkcolumnName
operator|=
name|fkcolumnName
expr_stmt|;
name|this
operator|.
name|keySeq
operator|=
name|keySeq
expr_stmt|;
name|this
operator|.
name|updateRule
operator|=
name|updateRule
expr_stmt|;
name|this
operator|.
name|deleteRule
operator|=
name|deleteRule
expr_stmt|;
name|this
operator|.
name|fkName
operator|=
name|fkName
expr_stmt|;
name|this
operator|.
name|pkName
operator|=
name|pkName
expr_stmt|;
name|this
operator|.
name|deferability
operator|=
name|deferability
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a cross reference. */
specifier|public
specifier|static
class|class
name|MetaCrossReference
block|{
specifier|public
specifier|final
name|String
name|pktableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|pktableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|pktableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|pkcolumnName
decl_stmt|;
specifier|public
specifier|final
name|String
name|fktableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|fktableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|fktableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|fkcolumnName
decl_stmt|;
specifier|public
specifier|final
name|short
name|keySeq
decl_stmt|;
specifier|public
specifier|final
name|short
name|updateRule
decl_stmt|;
specifier|public
specifier|final
name|short
name|deleteRule
decl_stmt|;
specifier|public
specifier|final
name|String
name|fkName
decl_stmt|;
specifier|public
specifier|final
name|String
name|pkName
decl_stmt|;
specifier|public
specifier|final
name|short
name|deferability
decl_stmt|;
specifier|public
name|MetaCrossReference
parameter_list|(
name|String
name|pktableCat
parameter_list|,
name|String
name|pktableSchem
parameter_list|,
name|String
name|pktableName
parameter_list|,
name|String
name|pkcolumnName
parameter_list|,
name|String
name|fktableCat
parameter_list|,
name|String
name|fktableSchem
parameter_list|,
name|String
name|fktableName
parameter_list|,
name|String
name|fkcolumnName
parameter_list|,
name|short
name|keySeq
parameter_list|,
name|short
name|updateRule
parameter_list|,
name|short
name|deleteRule
parameter_list|,
name|String
name|fkName
parameter_list|,
name|String
name|pkName
parameter_list|,
name|short
name|deferability
parameter_list|)
block|{
name|this
operator|.
name|pktableCat
operator|=
name|pktableCat
expr_stmt|;
name|this
operator|.
name|pktableSchem
operator|=
name|pktableSchem
expr_stmt|;
name|this
operator|.
name|pktableName
operator|=
name|pktableName
expr_stmt|;
name|this
operator|.
name|pkcolumnName
operator|=
name|pkcolumnName
expr_stmt|;
name|this
operator|.
name|fktableCat
operator|=
name|fktableCat
expr_stmt|;
name|this
operator|.
name|fktableSchem
operator|=
name|fktableSchem
expr_stmt|;
name|this
operator|.
name|fktableName
operator|=
name|fktableName
expr_stmt|;
name|this
operator|.
name|fkcolumnName
operator|=
name|fkcolumnName
expr_stmt|;
name|this
operator|.
name|keySeq
operator|=
name|keySeq
expr_stmt|;
name|this
operator|.
name|updateRule
operator|=
name|updateRule
expr_stmt|;
name|this
operator|.
name|deleteRule
operator|=
name|deleteRule
expr_stmt|;
name|this
operator|.
name|fkName
operator|=
name|fkName
expr_stmt|;
name|this
operator|.
name|pkName
operator|=
name|pkName
expr_stmt|;
name|this
operator|.
name|deferability
operator|=
name|deferability
expr_stmt|;
block|}
block|}
comment|/** Metadata describing type info. */
specifier|public
specifier|static
class|class
name|MetaTypeInfo
implements|implements
name|Named
block|{
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|precision
decl_stmt|;
specifier|public
specifier|final
name|String
name|literalPrefix
decl_stmt|;
specifier|public
specifier|final
name|String
name|literalSuffix
decl_stmt|;
comment|//TODO: Add create parameter for type on DDL
specifier|public
specifier|final
name|String
name|createParams
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|short
name|nullable
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
specifier|public
specifier|final
name|short
name|searchable
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|unsignedAttribute
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|fixedPrecScale
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|autoIncrement
decl_stmt|;
specifier|public
specifier|final
name|String
name|localTypeName
decl_stmt|;
specifier|public
specifier|final
name|Short
name|minimumScale
decl_stmt|;
specifier|public
specifier|final
name|Short
name|maximumScale
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|sqlDataType
init|=
literal|null
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|sqlDatetimeSub
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|numPrecRadix
decl_stmt|;
comment|//nullable int
specifier|public
name|MetaTypeInfo
parameter_list|(
name|String
name|typeName
parameter_list|,
name|int
name|dataType
parameter_list|,
name|Integer
name|precision
parameter_list|,
name|String
name|literalPrefix
parameter_list|,
name|String
name|literalSuffix
parameter_list|,
name|short
name|nullable
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|,
name|short
name|searchable
parameter_list|,
name|boolean
name|unsignedAttribute
parameter_list|,
name|boolean
name|fixedPrecScale
parameter_list|,
name|boolean
name|autoIncrement
parameter_list|,
name|Short
name|minimumScale
parameter_list|,
name|Short
name|maximumScale
parameter_list|,
name|Integer
name|numPrecRadix
parameter_list|)
block|{
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|literalPrefix
operator|=
name|literalPrefix
expr_stmt|;
name|this
operator|.
name|literalSuffix
operator|=
name|literalSuffix
expr_stmt|;
name|this
operator|.
name|nullable
operator|=
name|nullable
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
name|this
operator|.
name|searchable
operator|=
name|searchable
expr_stmt|;
name|this
operator|.
name|unsignedAttribute
operator|=
name|unsignedAttribute
expr_stmt|;
name|this
operator|.
name|fixedPrecScale
operator|=
name|fixedPrecScale
expr_stmt|;
name|this
operator|.
name|autoIncrement
operator|=
name|autoIncrement
expr_stmt|;
name|this
operator|.
name|localTypeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|minimumScale
operator|=
name|minimumScale
expr_stmt|;
name|this
operator|.
name|maximumScale
operator|=
name|maximumScale
expr_stmt|;
name|this
operator|.
name|numPrecRadix
operator|=
name|numPrecRadix
operator|==
literal|0
condition|?
literal|null
else|:
name|numPrecRadix
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|typeName
return|;
block|}
block|}
comment|/** Metadata describing index info. */
specifier|public
specifier|static
class|class
name|MetaIndexInfo
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|nonUnique
decl_stmt|;
specifier|public
specifier|final
name|String
name|indexQualifier
decl_stmt|;
specifier|public
specifier|final
name|String
name|indexName
decl_stmt|;
specifier|public
specifier|final
name|short
name|type
decl_stmt|;
specifier|public
specifier|final
name|short
name|ordinalPosition
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|String
name|ascOrDesc
decl_stmt|;
specifier|public
specifier|final
name|long
name|cardinality
decl_stmt|;
specifier|public
specifier|final
name|long
name|pages
decl_stmt|;
specifier|public
specifier|final
name|String
name|filterCondition
decl_stmt|;
specifier|public
name|MetaIndexInfo
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|nonUnique
parameter_list|,
name|String
name|indexQualifier
parameter_list|,
name|String
name|indexName
parameter_list|,
name|short
name|type
parameter_list|,
name|short
name|ordinalPosition
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|ascOrDesc
parameter_list|,
name|long
name|cardinality
parameter_list|,
name|long
name|pages
parameter_list|,
name|String
name|filterCondition
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|nonUnique
operator|=
name|nonUnique
expr_stmt|;
name|this
operator|.
name|indexQualifier
operator|=
name|indexQualifier
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|ordinalPosition
operator|=
name|ordinalPosition
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|ascOrDesc
operator|=
name|ascOrDesc
expr_stmt|;
name|this
operator|.
name|cardinality
operator|=
name|cardinality
expr_stmt|;
name|this
operator|.
name|pages
operator|=
name|pages
expr_stmt|;
name|this
operator|.
name|filterCondition
operator|=
name|filterCondition
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a user-defined type. */
specifier|public
specifier|static
class|class
name|MetaUdt
block|{
specifier|public
specifier|final
name|String
name|typeCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|className
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Short
name|baseType
decl_stmt|;
specifier|public
name|MetaUdt
parameter_list|(
name|String
name|typeCat
parameter_list|,
name|String
name|typeSchem
parameter_list|,
name|String
name|typeName
parameter_list|,
name|String
name|className
parameter_list|,
name|int
name|dataType
parameter_list|,
name|Short
name|baseType
parameter_list|)
block|{
name|this
operator|.
name|typeCat
operator|=
name|typeCat
expr_stmt|;
name|this
operator|.
name|typeSchem
operator|=
name|typeSchem
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|baseType
operator|=
name|baseType
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a super-type. */
specifier|public
specifier|static
class|class
name|MetaSuperType
block|{
specifier|public
specifier|final
name|String
name|typeCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|String
name|supertypeCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|supertypeSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|supertypeName
decl_stmt|;
specifier|public
name|MetaSuperType
parameter_list|(
name|String
name|typeCat
parameter_list|,
name|String
name|typeSchem
parameter_list|,
name|String
name|typeName
parameter_list|,
name|String
name|supertypeCat
parameter_list|,
name|String
name|supertypeSchem
parameter_list|,
name|String
name|supertypeName
parameter_list|)
block|{
name|this
operator|.
name|typeCat
operator|=
name|typeCat
expr_stmt|;
name|this
operator|.
name|typeSchem
operator|=
name|typeSchem
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|supertypeCat
operator|=
name|supertypeCat
expr_stmt|;
name|this
operator|.
name|supertypeSchem
operator|=
name|supertypeSchem
expr_stmt|;
name|this
operator|.
name|supertypeName
operator|=
name|supertypeName
expr_stmt|;
block|}
block|}
comment|/** Metadata describing an attribute. */
specifier|public
specifier|static
class|class
name|MetaAttribute
block|{
specifier|public
specifier|final
name|String
name|typeCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|attrName
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
name|String
name|attrTypeName
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|attrSize
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|decimalDigits
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|numPrecRadix
decl_stmt|;
specifier|public
specifier|final
name|int
name|nullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|attrDef
init|=
literal|null
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|sqlDataType
init|=
literal|null
decl_stmt|;
annotation|@
name|ColumnNullableUnknown
specifier|public
specifier|final
name|Integer
name|sqlDatetimeSub
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|charOctetLength
decl_stmt|;
specifier|public
specifier|final
name|int
name|ordinalPosition
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|isNullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|scopeCatalog
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|scopeSchema
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|scopeTable
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Short
name|sourceDataType
init|=
literal|null
decl_stmt|;
specifier|public
name|MetaAttribute
parameter_list|(
name|String
name|typeCat
parameter_list|,
name|String
name|typeSchem
parameter_list|,
name|String
name|typeName
parameter_list|,
name|String
name|attrName
parameter_list|,
name|int
name|dataType
parameter_list|,
name|String
name|attrTypeName
parameter_list|,
name|Integer
name|attrSize
parameter_list|,
name|Integer
name|decimalDigits
parameter_list|,
name|Integer
name|numPrecRadix
parameter_list|,
name|int
name|nullable
parameter_list|,
name|Integer
name|charOctetLength
parameter_list|,
name|int
name|ordinalPosition
parameter_list|,
name|String
name|isNullable
parameter_list|)
block|{
name|this
operator|.
name|typeCat
operator|=
name|typeCat
expr_stmt|;
name|this
operator|.
name|typeSchem
operator|=
name|typeSchem
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|attrName
operator|=
name|attrName
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|attrTypeName
operator|=
name|attrTypeName
expr_stmt|;
name|this
operator|.
name|attrSize
operator|=
name|attrSize
expr_stmt|;
name|this
operator|.
name|decimalDigits
operator|=
name|decimalDigits
expr_stmt|;
name|this
operator|.
name|numPrecRadix
operator|=
name|numPrecRadix
expr_stmt|;
name|this
operator|.
name|nullable
operator|=
name|nullable
expr_stmt|;
name|this
operator|.
name|charOctetLength
operator|=
name|charOctetLength
expr_stmt|;
name|this
operator|.
name|ordinalPosition
operator|=
name|ordinalPosition
expr_stmt|;
name|this
operator|.
name|isNullable
operator|=
name|isNullable
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a client info property. */
specifier|public
specifier|static
class|class
name|MetaClientInfoProperty
block|{
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|int
name|maxLen
decl_stmt|;
specifier|public
specifier|final
name|String
name|defaultValue
decl_stmt|;
specifier|public
specifier|final
name|String
name|description
decl_stmt|;
specifier|public
name|MetaClientInfoProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|maxLen
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|maxLen
operator|=
name|maxLen
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a function. */
specifier|public
specifier|static
class|class
name|MetaFunction
block|{
specifier|public
specifier|final
name|String
name|functionCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|functionSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|functionName
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|short
name|functionType
decl_stmt|;
specifier|public
specifier|final
name|String
name|specificName
decl_stmt|;
specifier|public
name|MetaFunction
parameter_list|(
name|String
name|functionCat
parameter_list|,
name|String
name|functionSchem
parameter_list|,
name|String
name|functionName
parameter_list|,
name|short
name|functionType
parameter_list|,
name|String
name|specificName
parameter_list|)
block|{
name|this
operator|.
name|functionCat
operator|=
name|functionCat
expr_stmt|;
name|this
operator|.
name|functionSchem
operator|=
name|functionSchem
expr_stmt|;
name|this
operator|.
name|functionName
operator|=
name|functionName
expr_stmt|;
name|this
operator|.
name|functionType
operator|=
name|functionType
expr_stmt|;
name|this
operator|.
name|specificName
operator|=
name|specificName
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a function column. */
specifier|public
specifier|static
class|class
name|MetaFunctionColumn
block|{
specifier|public
specifier|final
name|String
name|functionCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|functionSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|functionName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|short
name|columnType
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|precision
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|length
decl_stmt|;
specifier|public
specifier|final
name|Short
name|scale
decl_stmt|;
specifier|public
specifier|final
name|Short
name|radix
decl_stmt|;
specifier|public
specifier|final
name|short
name|nullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|charOctetLength
decl_stmt|;
specifier|public
specifier|final
name|int
name|ordinalPosition
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|isNullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|specificName
decl_stmt|;
specifier|public
name|MetaFunctionColumn
parameter_list|(
name|String
name|functionCat
parameter_list|,
name|String
name|functionSchem
parameter_list|,
name|String
name|functionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|short
name|columnType
parameter_list|,
name|int
name|dataType
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Integer
name|precision
parameter_list|,
name|Integer
name|length
parameter_list|,
name|Short
name|scale
parameter_list|,
name|Short
name|radix
parameter_list|,
name|short
name|nullable
parameter_list|,
name|Integer
name|charOctetLength
parameter_list|,
name|int
name|ordinalPosition
parameter_list|,
name|String
name|isNullable
parameter_list|,
name|String
name|specificName
parameter_list|)
block|{
name|this
operator|.
name|functionCat
operator|=
name|functionCat
expr_stmt|;
name|this
operator|.
name|functionSchem
operator|=
name|functionSchem
expr_stmt|;
name|this
operator|.
name|functionName
operator|=
name|functionName
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|columnType
operator|=
name|columnType
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|radix
operator|=
name|radix
expr_stmt|;
name|this
operator|.
name|nullable
operator|=
name|nullable
expr_stmt|;
name|this
operator|.
name|charOctetLength
operator|=
name|charOctetLength
expr_stmt|;
name|this
operator|.
name|ordinalPosition
operator|=
name|ordinalPosition
expr_stmt|;
name|this
operator|.
name|isNullable
operator|=
name|isNullable
expr_stmt|;
name|this
operator|.
name|specificName
operator|=
name|specificName
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a pseudo column. */
specifier|public
specifier|static
class|class
name|MetaPseudoColumn
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|columnSize
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|decimalDigits
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|numPrecRadix
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|columnUsage
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|charOctetLength
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|isNullable
decl_stmt|;
specifier|public
name|MetaPseudoColumn
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|int
name|dataType
parameter_list|,
name|Integer
name|columnSize
parameter_list|,
name|Integer
name|decimalDigits
parameter_list|,
name|Integer
name|numPrecRadix
parameter_list|,
name|String
name|columnUsage
parameter_list|,
name|Integer
name|charOctetLength
parameter_list|,
name|String
name|isNullable
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|columnSize
operator|=
name|columnSize
expr_stmt|;
name|this
operator|.
name|decimalDigits
operator|=
name|decimalDigits
expr_stmt|;
name|this
operator|.
name|numPrecRadix
operator|=
name|numPrecRadix
expr_stmt|;
name|this
operator|.
name|columnUsage
operator|=
name|columnUsage
expr_stmt|;
name|this
operator|.
name|charOctetLength
operator|=
name|charOctetLength
expr_stmt|;
name|this
operator|.
name|isNullable
operator|=
name|isNullable
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a super-table. */
specifier|public
specifier|static
class|class
name|MetaSuperTable
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
annotation|@
name|ColumnNoNulls
specifier|public
specifier|final
name|String
name|supertableName
decl_stmt|;
specifier|public
name|MetaSuperTable
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|supertableName
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|supertableName
operator|=
name|supertableName
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|getDatabaseProperties
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
specifier|public
name|MetaResultSet
name|getTables
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|typeList
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaTable
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaColumn
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getSchemas
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaSchema
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getCatalogs
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaCatalog
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getTableTypes
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaTableType
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getProcedures
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|procedureNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaProcedure
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getProcedureColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|procedureNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaProcedureColumn
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getColumnPrivileges
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaColumnPrivilege
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getTablePrivileges
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaTablePrivilege
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getBestRowIdentifier
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|int
name|scope
parameter_list|,
name|boolean
name|nullable
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaBestRowIdentifier
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getVersionColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaVersionColumn
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getPrimaryKeys
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaPrimaryKey
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getImportedKeys
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaImportedKey
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getExportedKeys
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaExportedKey
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getCrossReference
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|parentCatalog
parameter_list|,
name|String
name|parentSchema
parameter_list|,
name|String
name|parentTable
parameter_list|,
name|String
name|foreignCatalog
parameter_list|,
name|String
name|foreignSchema
parameter_list|,
name|String
name|foreignTable
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaCrossReference
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getTypeInfo
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaTypeInfo
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getIndexInfo
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|unique
parameter_list|,
name|boolean
name|approximate
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaIndexInfo
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getUDTs
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|,
name|int
index|[]
name|types
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaUdt
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getSuperTypes
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaSuperType
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getSuperTables
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaSuperTable
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getAttributes
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|,
name|Pat
name|attributeNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaAttribute
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getClientInfoProperties
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaClientInfoProperty
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getFunctions
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|functionNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaFunction
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getFunctionColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|functionNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaFunctionColumn
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getPseudoColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|MetaPseudoColumn
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Object
argument_list|>
name|createIterable
parameter_list|(
name|StatementHandle
name|handle
parameter_list|,
name|QueryState
name|state
parameter_list|,
name|Signature
name|signature
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|,
name|Frame
name|firstFrame
parameter_list|)
block|{
if|if
condition|(
name|firstFrame
operator|!=
literal|null
operator|&&
name|firstFrame
operator|.
name|done
condition|)
block|{
return|return
name|firstFrame
operator|.
name|rows
return|;
block|}
name|AvaticaStatement
name|stmt
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|connection
operator|.
name|lookupStatement
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|FetchIterable
argument_list|(
name|stmt
argument_list|,
name|state
argument_list|,
name|firstFrame
argument_list|,
name|parameterValues
argument_list|)
return|;
block|}
specifier|public
name|Frame
name|fetch
parameter_list|(
name|AvaticaStatement
name|stmt
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|fetchMaxRowCount
parameter_list|)
throws|throws
name|NoSuchStatementException
throws|,
name|MissingResultsException
block|{
return|return
literal|null
return|;
block|}
comment|/** Information about a type. */
specifier|private
specifier|static
class|class
name|TypeInfo
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|,
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|,
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|Types
operator|.
name|TINYINT
argument_list|,
literal|"TINYINT"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Types
operator|.
name|TINYINT
argument_list|,
literal|"TINYINT"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
literal|"SMALLINT"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Types
operator|.
name|SMALLINT
argument_list|,
literal|"SMALLINT"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"INTEGER"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"INTEGER"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|,
literal|"BIGINT"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|,
literal|"BIGINT"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|,
literal|"FLOAT"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|,
literal|"FLOAT"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|Types
operator|.
name|DOUBLE
argument_list|,
literal|"DOUBLE"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|Types
operator|.
name|DOUBLE
argument_list|,
literal|"DOUBLE"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|"VARCHAR"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|Types
operator|.
name|DATE
argument_list|,
literal|"DATE"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Time
operator|.
name|class
argument_list|,
name|Types
operator|.
name|TIME
argument_list|,
literal|"TIME"
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
name|Types
operator|.
name|TIMESTAMP
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|int
name|sqlType
decl_stmt|;
specifier|private
specifier|final
name|String
name|sqlTypeName
decl_stmt|;
specifier|public
name|TypeInfo
parameter_list|(
name|int
name|sqlType
parameter_list|,
name|String
name|sqlTypeName
parameter_list|)
block|{
name|this
operator|.
name|sqlType
operator|=
name|sqlType
expr_stmt|;
name|this
operator|.
name|sqlTypeName
operator|=
name|sqlTypeName
expr_stmt|;
block|}
specifier|static
name|void
name|put
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|int
name|sqlType
parameter_list|,
name|String
name|sqlTypeName
parameter_list|)
block|{
name|m
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
operator|new
name|TypeInfo
argument_list|(
name|sqlType
argument_list|,
name|sqlTypeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Iterator that never returns any elements. */
specifier|private
specifier|static
class|class
name|EmptyIterator
implements|implements
name|Iterator
argument_list|<
name|Object
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|Iterator
argument_list|<
name|Object
argument_list|>
name|INSTANCE
init|=
operator|new
name|EmptyIterator
argument_list|()
decl_stmt|;
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
comment|/** Iterable that yields an iterator over rows coming from a sequence of    * {@link Meta.Frame}s. */
specifier|private
class|class
name|FetchIterable
implements|implements
name|Iterable
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|AvaticaStatement
name|stmt
decl_stmt|;
specifier|private
specifier|final
name|QueryState
name|state
decl_stmt|;
specifier|private
specifier|final
name|Frame
name|firstFrame
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
decl_stmt|;
specifier|public
name|FetchIterable
parameter_list|(
name|AvaticaStatement
name|stmt
parameter_list|,
name|QueryState
name|state
parameter_list|,
name|Frame
name|firstFrame
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|)
block|{
name|this
operator|.
name|stmt
operator|=
name|stmt
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|firstFrame
operator|=
name|firstFrame
expr_stmt|;
name|this
operator|.
name|parameterValues
operator|=
name|parameterValues
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|FetchIterator
argument_list|(
name|stmt
argument_list|,
name|state
argument_list|,
name|firstFrame
argument_list|,
name|parameterValues
argument_list|)
return|;
block|}
block|}
comment|/** Iterator over rows coming from a sequence of {@link Meta.Frame}s. */
specifier|private
class|class
name|FetchIterator
implements|implements
name|Iterator
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|AvaticaStatement
name|stmt
decl_stmt|;
specifier|private
specifier|final
name|QueryState
name|state
decl_stmt|;
specifier|private
name|Frame
name|frame
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Object
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypedValue
argument_list|>
name|originalParameterValues
decl_stmt|;
specifier|private
name|long
name|currentOffset
init|=
literal|0
decl_stmt|;
specifier|public
name|FetchIterator
parameter_list|(
name|AvaticaStatement
name|stmt
parameter_list|,
name|QueryState
name|state
parameter_list|,
name|Frame
name|firstFrame
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|)
block|{
name|this
operator|.
name|stmt
operator|=
name|stmt
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|parameterValues
operator|=
name|parameterValues
expr_stmt|;
name|this
operator|.
name|originalParameterValues
operator|=
name|parameterValues
expr_stmt|;
if|if
condition|(
name|firstFrame
operator|==
literal|null
condition|)
block|{
name|frame
operator|=
name|Frame
operator|.
name|MORE
expr_stmt|;
name|rows
operator|=
name|EmptyIterator
operator|.
name|INSTANCE
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|=
name|firstFrame
expr_stmt|;
name|rows
operator|=
name|firstFrame
operator|.
name|rows
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|moveNext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|rows
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|final
name|Object
name|o
init|=
name|rows
operator|.
name|next
argument_list|()
decl_stmt|;
name|currentOffset
operator|++
expr_stmt|;
name|moveNext
argument_list|()
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|private
name|void
name|moveNext
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|frame
operator|.
name|done
condition|)
block|{
name|rows
operator|=
literal|null
expr_stmt|;
break|break;
block|}
try|try
block|{
comment|// currentOffset updated after element is read from `rows` iterator
name|frame
operator|=
name|fetch
argument_list|(
name|stmt
operator|.
name|handle
argument_list|,
name|currentOffset
argument_list|,
name|AvaticaStatement
operator|.
name|DEFAULT_FETCH_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchStatementException
name|e
parameter_list|)
block|{
name|resetStatement
argument_list|()
expr_stmt|;
comment|// re-fetch the batch where we left off
continue|continue;
block|}
catch|catch
parameter_list|(
name|MissingResultsException
name|e
parameter_list|)
block|{
try|try
block|{
comment|// We saw the statement, but it didnt' have a resultset initialized. So, reset it.
if|if
condition|(
operator|!
name|stmt
operator|.
name|syncResults
argument_list|(
name|state
argument_list|,
name|currentOffset
argument_list|)
condition|)
block|{
comment|// This returned false, so there aren't actually any more results to iterate over
name|frame
operator|=
literal|null
expr_stmt|;
name|rows
operator|=
literal|null
expr_stmt|;
break|break;
block|}
comment|// syncResults returning true means we need to fetch those results
block|}
catch|catch
parameter_list|(
name|NoSuchStatementException
name|e1
parameter_list|)
block|{
comment|// Tried to reset the result set, but lost the statement, save a loop before retrying.
name|resetStatement
argument_list|()
expr_stmt|;
comment|// Will just loop back around to a MissingResultsException, but w/e recursion
block|}
comment|// Kick back to the top to try to fetch again (in both branches)
continue|continue;
block|}
name|parameterValues
operator|=
literal|null
expr_stmt|;
comment|// don't execute next time
if|if
condition|(
name|frame
operator|==
literal|null
condition|)
block|{
name|rows
operator|=
literal|null
expr_stmt|;
break|break;
block|}
comment|// It is valid for rows to be empty, so we go around the loop again to
comment|// check
name|rows
operator|=
name|frame
operator|.
name|rows
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|resetStatement
parameter_list|()
block|{
comment|// If we have to reset the statement, we need to reset the parameterValues too
name|parameterValues
operator|=
name|originalParameterValues
expr_stmt|;
comment|// Defer to the statement to reset itself
name|stmt
operator|.
name|resetStatement
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Returns whether a list of parameter values has any null elements. */
specifier|public
specifier|static
name|boolean
name|checkParameterValueHasNull
parameter_list|(
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|)
block|{
for|for
control|(
name|TypedValue
name|x
range|:
name|parameterValues
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_comment
comment|// End MetaImpl.java
end_comment

end_unit

