begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link AvaticaHttpClientFactory} which chooses an implementation  * from a property.  */
end_comment

begin_class
specifier|public
class|class
name|AvaticaHttpClientFactoryImpl
implements|implements
name|AvaticaHttpClientFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_CLIENT_IMPL_DEFAULT
init|=
name|AvaticaCommonsHttpClientImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SPNEGO_HTTP_CLIENT_IMPL_DEFAULT
init|=
name|AvaticaCommonsHttpClientSpnegoImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Public for Type.PLUGIN
specifier|public
specifier|static
specifier|final
name|AvaticaHttpClientFactoryImpl
name|INSTANCE
init|=
operator|new
name|AvaticaHttpClientFactoryImpl
argument_list|()
decl_stmt|;
comment|// Public for Type.PLUGIN
specifier|public
name|AvaticaHttpClientFactoryImpl
parameter_list|()
block|{
block|}
comment|/**    * Returns a singleton instance of {@link AvaticaHttpClientFactoryImpl}.    *    * @return A singleton instance.    */
specifier|public
specifier|static
name|AvaticaHttpClientFactoryImpl
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|AvaticaHttpClient
name|getClient
parameter_list|(
name|URL
name|url
parameter_list|,
name|ConnectionConfig
name|config
parameter_list|)
block|{
name|String
name|className
init|=
name|config
operator|.
name|httpClientClass
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|className
condition|)
block|{
comment|// Provide an implementation that works with SPNEGO if that's the authentication is use.
if|if
condition|(
literal|"SPNEGO"
operator|.
name|equalsIgnoreCase
argument_list|(
name|config
operator|.
name|authentication
argument_list|()
argument_list|)
condition|)
block|{
name|className
operator|=
name|SPNEGO_HTTP_CLIENT_IMPL_DEFAULT
expr_stmt|;
block|}
else|else
block|{
name|className
operator|=
name|HTTP_CLIENT_IMPL_DEFAULT
expr_stmt|;
block|}
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|clz
operator|.
name|getConstructor
argument_list|(
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|instance
init|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|AvaticaHttpClient
operator|.
name|class
operator|.
name|cast
argument_list|(
name|instance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to construct AvaticaHttpClient implementation "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End AvaticaHttpClientFactoryImpl.java
end_comment

end_unit

