begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaConnection
operator|.
name|CallableWithoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|DatabaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|MetaDataOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Casing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Quoting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|RowIdLifetime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|InternalProperty
operator|.
name|CASE_SENSITIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|InternalProperty
operator|.
name|NULL_SORTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|InternalProperty
operator|.
name|NullSorting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|InternalProperty
operator|.
name|QUOTED_CASING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|InternalProperty
operator|.
name|QUOTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|InternalProperty
operator|.
name|UNQUOTED_CASING
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link java.sql.DatabaseMetaData}  * for the Avatica engine.  *  *<p>This class has sub-classes which implement JDBC 3.0 and JDBC 4.0 APIs;  * it is instantiated using {@link AvaticaFactory#newDatabaseMetaData}.</p>  */
end_comment

begin_class
specifier|public
class|class
name|AvaticaDatabaseMetaData
implements|implements
name|AvaticaSpecificDatabaseMetaData
block|{
specifier|private
specifier|final
name|AvaticaConnection
name|connection
decl_stmt|;
specifier|protected
name|AvaticaDatabaseMetaData
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
comment|// Helper methods
specifier|private
name|NullSorting
name|nullSorting
parameter_list|()
block|{
return|return
name|NULL_SORTING
operator|.
name|getEnum
argument_list|(
name|getProperties
argument_list|()
argument_list|,
name|NullSorting
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Quoting
name|quoting
parameter_list|()
block|{
return|return
name|QUOTING
operator|.
name|getEnum
argument_list|(
name|getProperties
argument_list|()
argument_list|,
name|Quoting
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Casing
name|unquotedCasing
parameter_list|()
block|{
return|return
name|UNQUOTED_CASING
operator|.
name|getEnum
argument_list|(
name|getProperties
argument_list|()
argument_list|,
name|Casing
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Casing
name|quotedCasing
parameter_list|()
block|{
return|return
name|QUOTED_CASING
operator|.
name|getEnum
argument_list|(
name|getProperties
argument_list|()
argument_list|,
name|Casing
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|caseSensitive
parameter_list|()
block|{
return|return
name|CASE_SENSITIVE
operator|.
name|getBoolean
argument_list|(
name|getProperties
argument_list|()
argument_list|)
return|;
block|}
comment|// JDBC methods
specifier|public
name|boolean
name|allProceduresAreCallable
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|allTablesAreSelectable
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|getURL
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|url
return|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|info
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|nullsAreSortedHigh
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|nullSorting
argument_list|()
operator|==
name|NullSorting
operator|.
name|HIGH
return|;
block|}
specifier|public
name|boolean
name|nullsAreSortedLow
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|nullSorting
argument_list|()
operator|==
name|NullSorting
operator|.
name|LOW
return|;
block|}
specifier|public
name|boolean
name|nullsAreSortedAtStart
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|nullSorting
argument_list|()
operator|==
name|NullSorting
operator|.
name|START
return|;
block|}
specifier|public
name|boolean
name|nullsAreSortedAtEnd
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|nullSorting
argument_list|()
operator|==
name|NullSorting
operator|.
name|END
return|;
block|}
specifier|public
name|String
name|getDatabaseProductName
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|driver
operator|.
name|version
operator|.
name|productName
return|;
block|}
specifier|public
name|String
name|getDatabaseProductVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|driver
operator|.
name|version
operator|.
name|productVersion
return|;
block|}
specifier|public
name|String
name|getDriverName
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|driver
operator|.
name|version
operator|.
name|name
return|;
block|}
specifier|public
name|String
name|getDriverVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|driver
operator|.
name|version
operator|.
name|versionString
return|;
block|}
specifier|public
name|int
name|getDriverMajorVersion
parameter_list|()
block|{
return|return
name|connection
operator|.
name|driver
operator|.
name|getMajorVersion
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDriverMinorVersion
parameter_list|()
block|{
return|return
name|connection
operator|.
name|driver
operator|.
name|getMinorVersion
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|usesLocalFiles
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|usesLocalFilePerTable
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|storesMixedCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
operator|!
name|caseSensitive
argument_list|()
operator|&&
name|unquotedCasing
argument_list|()
operator|==
name|Casing
operator|.
name|UNCHANGED
return|;
block|}
specifier|public
name|boolean
name|supportsMixedCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|caseSensitive
argument_list|()
operator|&&
name|unquotedCasing
argument_list|()
operator|==
name|Casing
operator|.
name|UNCHANGED
return|;
block|}
specifier|public
name|boolean
name|storesUpperCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|unquotedCasing
argument_list|()
operator|==
name|Casing
operator|.
name|TO_UPPER
return|;
block|}
specifier|public
name|boolean
name|storesLowerCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|unquotedCasing
argument_list|()
operator|==
name|Casing
operator|.
name|TO_LOWER
return|;
block|}
specifier|public
name|boolean
name|storesMixedCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
operator|!
name|caseSensitive
argument_list|()
operator|&&
name|quotedCasing
argument_list|()
operator|==
name|Casing
operator|.
name|UNCHANGED
return|;
block|}
specifier|public
name|boolean
name|supportsMixedCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|caseSensitive
argument_list|()
operator|&&
name|quotedCasing
argument_list|()
operator|==
name|Casing
operator|.
name|UNCHANGED
return|;
block|}
specifier|public
name|boolean
name|storesUpperCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|quotedCasing
argument_list|()
operator|==
name|Casing
operator|.
name|TO_UPPER
return|;
block|}
specifier|public
name|boolean
name|storesLowerCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|quotedCasing
argument_list|()
operator|==
name|Casing
operator|.
name|TO_LOWER
return|;
block|}
specifier|public
name|String
name|getIdentifierQuoteString
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|quoting
argument_list|()
operator|.
name|string
return|;
block|}
specifier|private
name|Map
argument_list|<
name|InternalProperty
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|connection
operator|.
name|properties
return|;
block|}
specifier|public
name|String
name|getSQLKeywords
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|()
block|{
return|return
name|Meta
operator|.
name|DatabaseProperty
operator|.
name|GET_S_Q_L_KEYWORDS
operator|.
name|getProp
argument_list|(
name|connection
operator|.
name|meta
argument_list|,
name|connection
operator|.
name|handle
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNumericFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|()
block|{
return|return
name|Meta
operator|.
name|DatabaseProperty
operator|.
name|GET_NUMERIC_FUNCTIONS
operator|.
name|getProp
argument_list|(
name|connection
operator|.
name|meta
argument_list|,
name|connection
operator|.
name|handle
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStringFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|()
block|{
return|return
name|Meta
operator|.
name|DatabaseProperty
operator|.
name|GET_STRING_FUNCTIONS
operator|.
name|getProp
argument_list|(
name|connection
operator|.
name|meta
argument_list|,
name|connection
operator|.
name|handle
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSystemFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|()
block|{
return|return
name|Meta
operator|.
name|DatabaseProperty
operator|.
name|GET_SYSTEM_FUNCTIONS
operator|.
name|getProp
argument_list|(
name|connection
operator|.
name|meta
argument_list|,
name|connection
operator|.
name|handle
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTimeDateFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|()
block|{
return|return
name|Meta
operator|.
name|DatabaseProperty
operator|.
name|GET_TIME_DATE_FUNCTIONS
operator|.
name|getProp
argument_list|(
name|connection
operator|.
name|meta
argument_list|,
name|connection
operator|.
name|handle
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSearchStringEscape
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"\\"
return|;
block|}
specifier|public
name|String
name|getExtraNameCharacters
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|boolean
name|supportsAlterTableWithAddColumn
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsAlterTableWithDropColumn
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsColumnAliasing
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|nullPlusNonNullIsNull
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsConvert
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsConvert
parameter_list|(
name|int
name|fromType
parameter_list|,
name|int
name|toType
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
comment|// TODO: more detail
block|}
specifier|public
name|boolean
name|supportsTableCorrelationNames
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsDifferentTableCorrelationNames
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsExpressionsInOrderBy
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsOrderByUnrelated
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsGroupBy
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsGroupByUnrelated
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsGroupByBeyondSelect
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsLikeEscapeClause
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsMultipleResultSets
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsMultipleTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsNonNullableColumns
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsMinimumSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsCoreSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsExtendedSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsANSI92EntryLevelSQL
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsANSI92IntermediateSQL
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsANSI92FullSQL
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsIntegrityEnhancementFacility
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsFullOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsLimitedOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|getSchemaTerm
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"schema"
return|;
block|}
specifier|public
name|String
name|getProcedureTerm
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"procedure"
return|;
block|}
specifier|public
name|String
name|getCatalogTerm
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"catalog"
return|;
block|}
specifier|public
name|boolean
name|isCatalogAtStart
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|getCatalogSeparator
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"."
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInDataManipulation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInProcedureCalls
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInTableDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInIndexDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
comment|// except that we don't support index definitions
block|}
specifier|public
name|boolean
name|supportsSchemasInPrivilegeDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
comment|// except that we don't support privilege definitions
block|}
specifier|public
name|boolean
name|supportsCatalogsInDataManipulation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInProcedureCalls
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInTableDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInIndexDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
comment|// except that we don't support index definitions
block|}
specifier|public
name|boolean
name|supportsCatalogsInPrivilegeDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
comment|// except that we don't support privilege definitions
block|}
specifier|public
name|boolean
name|supportsPositionedDelete
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsPositionedUpdate
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSelectForUpdate
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsStoredProcedures
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInComparisons
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInExists
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInIns
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInQuantifieds
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCorrelatedSubqueries
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsUnion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsUnionAll
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsOpenCursorsAcrossCommit
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsOpenCursorsAcrossRollback
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsOpenStatementsAcrossCommit
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsOpenStatementsAcrossRollback
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getMaxBinaryLiteralLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxCharLiteralLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxColumnNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxColumnsInGroupBy
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxColumnsInIndex
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxColumnsInOrderBy
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxColumnsInSelect
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxColumnsInTable
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxConnections
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxCursorNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxIndexLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxSchemaNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxProcedureNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxCatalogNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxRowSize
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|doesMaxRowSizeIncludeBlobs
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getMaxStatementLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxStatements
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxTableNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxTablesInSelect
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxUserNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getDefaultTransactionIsolation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|call
parameter_list|()
block|{
return|return
name|Meta
operator|.
name|DatabaseProperty
operator|.
name|GET_DEFAULT_TRANSACTION_ISOLATION
operator|.
name|getProp
argument_list|(
name|connection
operator|.
name|meta
argument_list|,
name|connection
operator|.
name|handle
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|supportsTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsTransactionIsolationLevel
parameter_list|(
name|int
name|level
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|level
operator|==
name|Connection
operator|.
name|TRANSACTION_NONE
return|;
block|}
specifier|public
name|boolean
name|supportsDataDefinitionAndDataManipulationTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsDataManipulationTransactionsOnly
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|dataDefinitionCausesTransactionCommit
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|dataDefinitionIgnoredInTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|ResultSet
name|getProcedures
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|procedureNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getProcedures
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|procedureNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_PROCEDURES
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|procedureNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getProcedureColumns
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|procedureNamePattern
parameter_list|,
specifier|final
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getProcedureColumns
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|procedureNamePattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|columnNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_PROCEDURE_COLUMNS
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|procedureNamePattern
argument_list|,
name|columnNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getTables
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|tableNamePattern
parameter_list|,
specifier|final
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|typeList
init|=
name|types
operator|==
literal|null
condition|?
literal|null
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|types
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getTables
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|tableNamePattern
argument_list|)
argument_list|,
name|typeList
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_TABLES
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|,
name|types
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
specifier|static
name|Meta
operator|.
name|Pat
name|pat
parameter_list|(
name|String
name|schemaPattern
parameter_list|)
block|{
return|return
name|Meta
operator|.
name|Pat
operator|.
name|of
argument_list|(
name|schemaPattern
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getSchemas
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO: add a 'catch ... throw new SQLException' logic to this and other
comment|// getXxx methods. Right now any error will throw a RuntimeException
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getSchemas
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_SCHEMAS_WITH_ARGS
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getSchemas
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|getSchemas
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getCatalogs
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getCatalogs
argument_list|(
name|connection
operator|.
name|handle
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_CATALOGS
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getTableTypes
argument_list|(
name|connection
operator|.
name|handle
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_TABLE_TYPES
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getColumns
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|tableNamePattern
parameter_list|,
specifier|final
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getColumns
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|tableNamePattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|columnNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_COLUMNS
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|,
name|columnNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getColumnPrivileges
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schema
parameter_list|,
specifier|final
name|String
name|table
parameter_list|,
specifier|final
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getColumnPrivileges
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|pat
argument_list|(
name|columnNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_COLUMN_PRIVILEGES
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|columnNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getTablePrivileges
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|tableNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getTablePrivileges
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|tableNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_TABLE_PRIVILEGES
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getBestRowIdentifier
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schema
parameter_list|,
specifier|final
name|String
name|table
parameter_list|,
specifier|final
name|int
name|scope
parameter_list|,
specifier|final
name|boolean
name|nullable
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getBestRowIdentifier
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|scope
argument_list|,
name|nullable
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_BEST_ROW_IDENTIFIER
argument_list|,
name|catalog
argument_list|,
name|table
argument_list|,
name|scope
argument_list|,
name|nullable
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getVersionColumns
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schema
parameter_list|,
specifier|final
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getVersionColumns
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_VERSION_COLUMNS
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getPrimaryKeys
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schema
parameter_list|,
specifier|final
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getPrimaryKeys
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_PRIMARY_KEYS
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getImportedKeys
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schema
parameter_list|,
specifier|final
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getImportedKeys
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_IMPORTED_KEYS
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getExportedKeys
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schema
parameter_list|,
specifier|final
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getExportedKeys
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_EXPORTED_KEYS
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getCrossReference
parameter_list|(
specifier|final
name|String
name|parentCatalog
parameter_list|,
specifier|final
name|String
name|parentSchema
parameter_list|,
specifier|final
name|String
name|parentTable
parameter_list|,
specifier|final
name|String
name|foreignCatalog
parameter_list|,
specifier|final
name|String
name|foreignSchema
parameter_list|,
specifier|final
name|String
name|foreignTable
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getCrossReference
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|parentCatalog
argument_list|,
name|parentSchema
argument_list|,
name|parentTable
argument_list|,
name|foreignCatalog
argument_list|,
name|foreignSchema
argument_list|,
name|foreignTable
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_CROSS_REFERENCE
argument_list|,
name|parentCatalog
argument_list|,
name|parentSchema
argument_list|,
name|parentTable
argument_list|,
name|foreignCatalog
argument_list|,
name|foreignSchema
argument_list|,
name|foreignTable
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getTypeInfo
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getTypeInfo
argument_list|(
name|connection
operator|.
name|handle
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_TYPE_INFO
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getIndexInfo
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schema
parameter_list|,
specifier|final
name|String
name|table
parameter_list|,
specifier|final
name|boolean
name|unique
parameter_list|,
specifier|final
name|boolean
name|approximate
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getIndexInfo
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|unique
argument_list|,
name|approximate
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_INDEX_INFO
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|unique
argument_list|,
name|approximate
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|boolean
name|supportsResultSetType
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|type
operator|==
name|ResultSet
operator|.
name|TYPE_FORWARD_ONLY
return|;
block|}
specifier|public
name|boolean
name|supportsResultSetConcurrency
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|concurrency
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|type
operator|==
name|ResultSet
operator|.
name|TYPE_FORWARD_ONLY
operator|&&
name|concurrency
operator|==
name|ResultSet
operator|.
name|CONCUR_READ_ONLY
return|;
block|}
specifier|public
name|boolean
name|ownUpdatesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|ownDeletesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|ownInsertsAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|othersUpdatesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|othersDeletesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|othersInsertsAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|updatesAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|deletesAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|insertsAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|supportsBatchUpdates
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|ResultSet
name|getUDTs
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|typeNamePattern
parameter_list|,
specifier|final
name|int
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getUDTs
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|typeNamePattern
argument_list|)
argument_list|,
name|types
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_UDTS
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|typeNamePattern
argument_list|,
name|types
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
return|;
block|}
specifier|public
name|boolean
name|supportsSavepoints
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsNamedParameters
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsMultipleOpenResults
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsGetGeneratedKeys
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|ResultSet
name|getSuperTypes
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|typeNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getSuperTypes
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|typeNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_SUPER_TYPES
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|typeNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getSuperTables
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|tableNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getSuperTables
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|tableNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_SUPER_TABLES
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getAttributes
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|typeNamePattern
parameter_list|,
specifier|final
name|String
name|attributeNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getAttributes
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|typeNamePattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|attributeNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_ATTRIBUTES
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|typeNamePattern
argument_list|,
name|attributeNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|boolean
name|supportsResultSetHoldability
parameter_list|(
name|int
name|holdability
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|todo
argument_list|()
throw|;
block|}
specifier|public
name|int
name|getResultSetHoldability
parameter_list|()
block|{
return|return
name|ResultSet
operator|.
name|HOLD_CURSORS_OVER_COMMIT
return|;
block|}
specifier|public
name|int
name|getDatabaseMajorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|driver
operator|.
name|version
operator|.
name|databaseMajorVersion
return|;
block|}
specifier|public
name|int
name|getDatabaseMinorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|driver
operator|.
name|version
operator|.
name|databaseMinorVersion
return|;
block|}
specifier|public
name|int
name|getJDBCMajorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|factory
operator|.
name|getJdbcMajorVersion
argument_list|()
return|;
block|}
specifier|public
name|int
name|getJDBCMinorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|factory
operator|.
name|getJdbcMinorVersion
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSQLStateType
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|sqlStateSQL
return|;
block|}
specifier|public
name|boolean
name|locatorsUpdateCopy
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsStatementPooling
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|RowIdLifetime
name|getRowIdLifetime
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|RowIdLifetime
operator|.
name|ROWID_UNSUPPORTED
return|;
block|}
specifier|public
name|boolean
name|supportsStoredFunctionsUsingCallSyntax
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|autoCommitFailureClosesAllResultSets
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|ResultSet
name|getClientInfoProperties
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getClientInfoProperties
argument_list|(
name|connection
operator|.
name|handle
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_CLIENT_INFO_PROPERTIES
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getFunctions
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|functionNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getFunctions
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|functionNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_FUNCTIONS
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|functionNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getFunctionColumns
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|functionNamePattern
parameter_list|,
specifier|final
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getFunctionColumns
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|functionNamePattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|columnNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_FUNCTION_COLUMNS
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|functionNamePattern
argument_list|,
name|columnNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getPseudoColumns
parameter_list|(
specifier|final
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|tableNamePattern
parameter_list|,
specifier|final
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createResultSet
argument_list|(
name|connection
operator|.
name|meta
operator|.
name|getPseudoColumns
argument_list|(
name|connection
operator|.
name|handle
argument_list|,
name|catalog
argument_list|,
name|pat
argument_list|(
name|schemaPattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|tableNamePattern
argument_list|)
argument_list|,
name|pat
argument_list|(
name|columnNamePattern
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_PSEUDO_COLUMNS
argument_list|,
name|catalog
argument_list|,
name|schemaPattern
argument_list|,
name|tableNamePattern
argument_list|,
name|columnNamePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|cause
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|boolean
name|generatedKeyAlwaysReturned
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
comment|// implement Wrapper
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|iface
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|iface
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|Properties
operator|.
name|class
operator|.
name|equals
argument_list|(
name|iface
argument_list|)
condition|)
block|{
return|return
name|iface
operator|.
name|cast
argument_list|(
name|getRemoteAvaticaProperties
argument_list|()
argument_list|)
return|;
block|}
throw|throw
name|connection
operator|.
name|helper
operator|.
name|createException
argument_list|(
literal|"does not implement '"
operator|+
name|iface
operator|+
literal|"'"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|iface
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
operator|||
name|Properties
operator|.
name|class
operator|.
name|equals
argument_list|(
name|iface
argument_list|)
return|;
block|}
comment|// Not JDBC Methods
annotation|@
name|Override
specifier|public
name|Properties
name|getRemoteAvaticaProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|propertyMap
init|=
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|()
block|{
return|return
name|connection
operator|.
name|meta
operator|.
name|getDatabaseProperties
argument_list|(
name|connection
operator|.
name|handle
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|propertyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
comment|/**    * Fetches the Avatica version from the given server.    *    * @return The Avatica version string or null if the server did not provide the version.    */
annotation|@
name|Override
specifier|public
name|String
name|getAvaticaServerVersion
parameter_list|()
block|{
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|connection
operator|.
name|invokeWithRetries
argument_list|(
operator|new
name|CallableWithoutException
argument_list|<
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|call
parameter_list|()
block|{
return|return
name|connection
operator|.
name|meta
operator|.
name|getDatabaseProperties
argument_list|(
name|connection
operator|.
name|handle
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|properties
operator|.
name|get
argument_list|(
name|DatabaseProperty
operator|.
name|AVATICA_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|o
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|String
operator|)
name|o
return|;
block|}
block|}
end_class

begin_comment
comment|// End AvaticaDatabaseMetaData.java
end_comment

end_unit

