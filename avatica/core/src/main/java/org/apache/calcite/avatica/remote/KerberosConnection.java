begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosTicket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_comment
comment|/**  * A utility to perform Kerberos logins and renewals.  */
end_comment

begin_class
specifier|public
class|class
name|KerberosConnection
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KerberosConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IBM_KRB5_LOGIN_MODULE
init|=
literal|"com.ibm.security.auth.module.Krb5LoginModule"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUN_KRB5_LOGIN_MODULE
init|=
literal|"com.sun.security.auth.module.Krb5LoginModule"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAAS_CONF_NAME
init|=
literal|"AvaticaKeytabConf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RENEWAL_THREAD_NAME
init|=
literal|"Avatica Kerberos Renewal Thread"
decl_stmt|;
comment|/** The percentage of the Kerberos ticket's lifetime which we should start trying to renew it */
specifier|public
specifier|static
specifier|final
name|float
name|PERCENT_OF_LIFETIME_TO_RENEW
init|=
literal|0.80f
decl_stmt|;
comment|/** How long should we sleep between checks to renew the Kerberos ticket */
specifier|public
specifier|static
specifier|final
name|long
name|RENEWAL_PERIOD
init|=
literal|30L
decl_stmt|;
specifier|private
specifier|final
name|String
name|principal
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|jaasConf
decl_stmt|;
specifier|private
name|Subject
name|subject
decl_stmt|;
specifier|private
name|RenewalTask
name|renewalTask
decl_stmt|;
specifier|private
name|Thread
name|renewalThread
decl_stmt|;
comment|/**    * Constructs an instance.    *    * @param principal The Kerberos principal    * @param keytab The keytab containing keys for the Kerberos principal    */
specifier|public
name|KerberosConnection
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|this
operator|.
name|jaasConf
operator|=
operator|new
name|KeytabJaasConf
argument_list|(
name|principal
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|keytab
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Subject
name|getSubject
parameter_list|()
block|{
return|return
name|this
operator|.
name|subject
return|;
block|}
comment|/**    * Perform a Kerberos login and launch a daemon thread to periodically perfrom renewals of that    * Kerberos login. Exceptions are intentionally caught and rethrown as unchecked exceptions as    * there is nothing Avatica itself can do if the Kerberos login fails.    *    * @throws RuntimeException If the Kerberos login fails    */
specifier|public
specifier|synchronized
name|void
name|login
parameter_list|()
block|{
specifier|final
name|Entry
argument_list|<
name|LoginContext
argument_list|,
name|Subject
argument_list|>
name|securityMaterial
init|=
name|performKerberosLogin
argument_list|()
decl_stmt|;
name|subject
operator|=
name|securityMaterial
operator|.
name|getValue
argument_list|()
expr_stmt|;
comment|// Launch a thread to periodically perform renewals
specifier|final
name|Entry
argument_list|<
name|RenewalTask
argument_list|,
name|Thread
argument_list|>
name|renewalMaterial
init|=
name|createRenewalThread
argument_list|(
name|securityMaterial
operator|.
name|getKey
argument_list|()
argument_list|,
name|subject
argument_list|,
name|KerberosConnection
operator|.
name|RENEWAL_PERIOD
argument_list|)
decl_stmt|;
name|renewalTask
operator|=
name|renewalMaterial
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|renewalThread
operator|=
name|renewalMaterial
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|renewalThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Performs a Kerberos login given the {@code principal} and {@code keytab}.    *    * @return The {@code Subject} and {@code LoginContext} from the successful login.    * @throws RuntimeException if the login failed    */
name|Entry
argument_list|<
name|LoginContext
argument_list|,
name|Subject
argument_list|>
name|performKerberosLogin
parameter_list|()
block|{
comment|// Loosely based on Apache Kerby's JaasKrbUtil class
comment|// Synchronized by the caller
comment|// Create a KerberosPrincipal given the principal.
specifier|final
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|login
argument_list|(
literal|null
argument_list|,
name|jaasConf
argument_list|,
name|subject
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to perform Kerberos login"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Performs a kerberos login, possibly logging out first.    *    * @param prevContext The LoginContext from the previous login, or null    * @param conf JAAS Configuration object    * @param subject The JAAS Subject    * @return The context and subject from the login    * @throws LoginException If the login failed.    */
name|Entry
argument_list|<
name|LoginContext
argument_list|,
name|Subject
argument_list|>
name|login
parameter_list|(
name|LoginContext
name|prevContext
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Subject
name|subject
parameter_list|)
throws|throws
name|LoginException
block|{
comment|// Is synchronized by the caller
comment|// If a context was provided, perform a logout first
if|if
condition|(
literal|null
operator|!=
name|prevContext
condition|)
block|{
name|prevContext
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
comment|// Create a LoginContext given the Configuration and Subject
name|LoginContext
name|loginContext
init|=
name|createLoginContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Invoke the login
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
comment|// Get the Subject from the context and verify it's non-null (null would imply failure)
name|Subject
name|loggedInSubject
init|=
name|loginContext
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|loggedInSubject
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to perform Kerberos login"
argument_list|)
throw|;
block|}
comment|// Send it back to the caller to use with launchRenewalThread
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|loginContext
argument_list|,
name|loggedInSubject
argument_list|)
return|;
block|}
comment|// Enables mocking for unit tests
name|LoginContext
name|createLoginContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|LoginException
block|{
return|return
operator|new
name|LoginContext
argument_list|(
name|JAAS_CONF_NAME
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Launches a thread to periodically check the current ticket's lifetime and perform a relogin    * as necessary.    *    * @param originalContext The original login's context.    * @param originalSubject The original login's subject.    * @param renewalPeriod The amount of time to sleep inbetween checks to renew    */
name|Entry
argument_list|<
name|RenewalTask
argument_list|,
name|Thread
argument_list|>
name|createRenewalThread
parameter_list|(
name|LoginContext
name|originalContext
parameter_list|,
name|Subject
name|originalSubject
parameter_list|,
name|long
name|renewalPeriod
parameter_list|)
block|{
name|RenewalTask
name|task
init|=
operator|new
name|RenewalTask
argument_list|(
name|this
argument_list|,
name|originalContext
argument_list|,
name|originalSubject
argument_list|,
name|jaasConf
argument_list|,
name|renewalPeriod
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
decl_stmt|;
comment|// Don't prevent the JVM from existing
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Log an error message if this thread somehow dies
name|t
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Uncaught exception from Kerberos credential renewal thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|RENEWAL_THREAD_NAME
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|task
argument_list|,
name|t
argument_list|)
return|;
block|}
comment|/**    * Stops the Kerberos renewal thread if it is still running. If the thread was already started    * or never started, this method does nothing.    */
specifier|public
name|void
name|stopRenewalThread
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|renewalTask
operator|&&
literal|null
operator|!=
name|renewalThread
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Informing RenewalTask to gracefully stop and interrupting the renewal thread."
argument_list|)
expr_stmt|;
name|renewalTask
operator|.
name|asyncStop
argument_list|()
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|until
init|=
name|now
operator|+
literal|5000
decl_stmt|;
while|while
condition|(
name|now
operator|<
name|until
condition|)
block|{
if|if
condition|(
name|renewalThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
name|now
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|renewalThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Renewal thread failed to gracefully stop, interrupting it"
argument_list|)
expr_stmt|;
name|renewalThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|renewalThread
operator|.
name|join
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|// What more could we do?
if|if
condition|(
name|renewalThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Renewal thread failed to gracefully and ungracefully stop, proceeding."
argument_list|)
expr_stmt|;
block|}
name|renewalTask
operator|=
literal|null
expr_stmt|;
name|renewalThread
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Renewal thread was never started or already stopped."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Runnable for performing Kerberos renewals.    */
specifier|static
class|class
name|RenewalTask
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|RENEWAL_LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RenewalTask
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Mutable variables -- change as re-login occurs
specifier|private
name|LoginContext
name|context
decl_stmt|;
specifier|private
name|Subject
name|subject
decl_stmt|;
specifier|private
specifier|final
name|KerberosConnection
name|utilInstance
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|long
name|renewalPeriod
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|keepRunning
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|RenewalTask
parameter_list|(
name|KerberosConnection
name|utilInstance
parameter_list|,
name|LoginContext
name|context
parameter_list|,
name|Subject
name|subject
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|renewalPeriod
parameter_list|)
block|{
name|this
operator|.
name|utilInstance
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|utilInstance
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|subject
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|renewalPeriod
operator|=
name|renewalPeriod
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|keepRunning
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|RENEWAL_LOG
operator|.
name|debug
argument_list|(
literal|"Checking if Kerberos ticket should be renewed"
argument_list|)
expr_stmt|;
comment|// The current time
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Find the TGT in the Subject for the principal we were given.
name|Set
argument_list|<
name|KerberosTicket
argument_list|>
name|tickets
init|=
name|subject
operator|.
name|getPrivateCredentials
argument_list|(
name|KerberosTicket
operator|.
name|class
argument_list|)
decl_stmt|;
name|KerberosTicket
name|activeTicket
init|=
literal|null
decl_stmt|;
for|for
control|(
name|KerberosTicket
name|ticket
range|:
name|tickets
control|)
block|{
if|if
condition|(
name|isTGSPrincipal
argument_list|(
name|ticket
operator|.
name|getServer
argument_list|()
argument_list|)
condition|)
block|{
name|activeTicket
operator|=
name|ticket
expr_stmt|;
break|break;
block|}
block|}
comment|// If we have no active ticket, immediately renew and check again to make sure we have
comment|// a valid ticket now.
if|if
condition|(
literal|null
operator|==
name|activeTicket
condition|)
block|{
name|RENEWAL_LOG
operator|.
name|debug
argument_list|(
literal|"There is no active Kerberos ticket, renewing now"
argument_list|)
expr_stmt|;
name|renew
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// Only renew when we hit a certain threshold of the current ticket's lifetime.
comment|// We want to limit the number of renewals we have to invoke.
if|if
condition|(
name|shouldRenew
argument_list|(
name|activeTicket
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|activeTicket
operator|.
name|getEndTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|now
argument_list|)
condition|)
block|{
name|RENEWAL_LOG
operator|.
name|debug
argument_list|(
literal|"The current ticket should be renewed now"
argument_list|)
expr_stmt|;
name|renew
argument_list|()
expr_stmt|;
block|}
comment|// Sleep until we check again
name|waitForNextCheck
argument_list|(
name|renewalPeriod
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Computes whether or not the ticket should be renewed based on the lifetime of the ticket      * and the current time.      *      * @param start The start time of the ticket's validity in millis      * @param end The end time of the ticket's validity in millis      * @param now Milliseconds since the epoch      * @return True if renewal should occur, false otherwise      */
name|boolean
name|shouldRenew
parameter_list|(
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|end
parameter_list|,
name|long
name|now
parameter_list|)
block|{
specifier|final
name|long
name|lifetime
init|=
name|end
operator|-
name|start
decl_stmt|;
specifier|final
name|long
name|renewAfter
init|=
name|start
operator|+
operator|(
name|long
operator|)
operator|(
name|lifetime
operator|*
name|PERCENT_OF_LIFETIME_TO_RENEW
operator|)
decl_stmt|;
return|return
name|now
operator|>=
name|renewAfter
return|;
block|}
comment|/**      * Logout and log back in with the Kerberos identity.      */
name|void
name|renew
parameter_list|()
block|{
try|try
block|{
comment|// Lock on the instance of KerberosUtil
synchronized|synchronized
init|(
name|utilInstance
init|)
block|{
name|Entry
argument_list|<
name|LoginContext
argument_list|,
name|Subject
argument_list|>
name|pair
init|=
name|utilInstance
operator|.
name|login
argument_list|(
name|context
argument_list|,
name|conf
argument_list|,
name|subject
argument_list|)
decl_stmt|;
name|context
operator|=
name|pair
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|subject
operator|=
name|pair
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to perform kerberos login"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Wait the given amount of time.      *      * @param renewalPeriod The number of milliseconds to wait      */
name|void
name|waitForNextCheck
parameter_list|(
name|long
name|renewalPeriod
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|renewalPeriod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|void
name|asyncStop
parameter_list|()
block|{
name|keepRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Computes if the given {@code principal} is the ticket-granting system's principal ("krbtgt").    *    * @param principal A {@link KerberosPrincipal}.    * @return True if {@code principal} is the TGS principal, false otherwise.    */
specifier|static
name|boolean
name|isTGSPrincipal
parameter_list|(
name|KerberosPrincipal
name|principal
parameter_list|)
block|{
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|principal
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"krbtgt/"
operator|+
name|principal
operator|.
name|getRealm
argument_list|()
operator|+
literal|"@"
operator|+
name|principal
operator|.
name|getRealm
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Javax Configuration for performing a keytab-based Kerberos login.    */
specifier|static
class|class
name|KeytabJaasConf
extends|extends
name|Configuration
block|{
specifier|private
name|String
name|principal
decl_stmt|;
specifier|private
name|File
name|keytabFile
decl_stmt|;
name|KeytabJaasConf
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|keytabFile
operator|=
name|keytab
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"renewTGT"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"refreshKrb5Config"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"isInitiator"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|options
argument_list|)
block|}
return|;
block|}
block|}
comment|/**    * Returns the KRB5 LoginModule implementation. This is JVM-vendor dependent.    *    * @return The class name of the KRB5 LoginModule    */
specifier|static
name|String
name|getKrb5LoginModuleName
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|?
name|IBM_KRB5_LOGIN_MODULE
else|:
name|SUN_KRB5_LOGIN_MODULE
return|;
block|}
block|}
end_class

begin_comment
comment|// End KerberosConnection.java
end_comment

end_unit

