begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthSchemeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|KerberosCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|AuthSchemes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|HttpClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|RegistryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|SPNegoSchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicAuthCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingHttpClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSCredential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Implementation of an AvaticaHttpClient which uses SPNEGO.  */
end_comment

begin_class
specifier|public
class|class
name|AvaticaCommonsHttpClientSpnegoImpl
implements|implements
name|AvaticaHttpClient
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AvaticaCommonsHttpClientSpnegoImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHED_CONNECTIONS_MAX_KEY
init|=
literal|"avatica.http.spnego.max_cached"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHED_CONNECTIONS_MAX_DEFAULT
init|=
literal|"100"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHED_CONNECTIONS_MAX_PER_ROUTE_KEY
init|=
literal|"avatica.http.spnego.max_per_route"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHED_CONNECTIONS_MAX_PER_ROUTE_DEFAULT
init|=
literal|"25"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|USE_CANONICAL_HOSTNAME
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|STRIP_PORT_ON_SERVER_LOOKUP
init|=
literal|true
decl_stmt|;
specifier|final
name|URL
name|url
decl_stmt|;
specifier|final
name|HttpHost
name|host
decl_stmt|;
specifier|final
name|PoolingHttpClientConnectionManager
name|pool
decl_stmt|;
specifier|final
name|Lookup
argument_list|<
name|AuthSchemeProvider
argument_list|>
name|authRegistry
decl_stmt|;
specifier|final
name|BasicCredentialsProvider
name|credentialsProvider
decl_stmt|;
specifier|final
name|BasicAuthCache
name|authCache
decl_stmt|;
specifier|final
name|CloseableHttpClient
name|client
decl_stmt|;
comment|/**    * Constructs an http client with the expectation that the user is already logged in with their    * Kerberos identity via JAAS.    *    * @param url The URL for the Avatica server    */
specifier|public
name|AvaticaCommonsHttpClientSpnegoImpl
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|this
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an HTTP client with user specified by the given credentials.    *    * @param url The URL for the Avatica server    * @param credential The GSS credentials    */
specifier|public
name|AvaticaCommonsHttpClientSpnegoImpl
parameter_list|(
name|URL
name|url
parameter_list|,
name|GSSCredential
name|credential
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|PoolingHttpClientConnectionManager
argument_list|()
expr_stmt|;
comment|// Increase max total connection to 100
specifier|final
name|String
name|maxCnxns
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CACHED_CONNECTIONS_MAX_KEY
argument_list|,
name|CACHED_CONNECTIONS_MAX_DEFAULT
argument_list|)
decl_stmt|;
name|pool
operator|.
name|setMaxTotal
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxCnxns
argument_list|)
argument_list|)
expr_stmt|;
comment|// Increase default max connection per route to 25
specifier|final
name|String
name|maxCnxnsPerRoute
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CACHED_CONNECTIONS_MAX_PER_ROUTE_KEY
argument_list|,
name|CACHED_CONNECTIONS_MAX_PER_ROUTE_DEFAULT
argument_list|)
decl_stmt|;
name|pool
operator|.
name|setDefaultMaxPerRoute
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxCnxnsPerRoute
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|host
operator|=
operator|new
name|HttpHost
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|authRegistry
operator|=
name|RegistryBuilder
operator|.
expr|<
name|AuthSchemeProvider
operator|>
name|create
argument_list|()
operator|.
name|register
argument_list|(
name|AuthSchemes
operator|.
name|SPNEGO
argument_list|,
operator|new
name|SPNegoSchemeFactory
argument_list|(
name|STRIP_PORT_ON_SERVER_LOOKUP
argument_list|,
name|USE_CANONICAL_HOSTNAME
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|credentialsProvider
operator|=
operator|new
name|BasicCredentialsProvider
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|credential
condition|)
block|{
comment|// Non-null credential should be used directly with KerberosCredentials.
name|this
operator|.
name|credentialsProvider
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
operator|new
name|KerberosCredentials
argument_list|(
name|credential
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// A null credential implies that the user is logged in via JAAS using the
comment|// java.security.auth.login.config system property
name|this
operator|.
name|credentialsProvider
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
name|EmptyCredentials
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|authCache
operator|=
operator|new
name|BasicAuthCache
argument_list|()
expr_stmt|;
comment|// A single thread-safe HttpClient, pooling connections via the ConnectionManager
name|this
operator|.
name|client
operator|=
name|HttpClients
operator|.
name|custom
argument_list|()
operator|.
name|setDefaultAuthSchemeRegistry
argument_list|(
name|authRegistry
argument_list|)
operator|.
name|setConnectionManager
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|send
parameter_list|(
name|byte
index|[]
name|request
parameter_list|)
block|{
name|HttpClientContext
name|context
init|=
name|HttpClientContext
operator|.
name|create
argument_list|()
decl_stmt|;
name|context
operator|.
name|setTargetHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|context
operator|.
name|setCredentialsProvider
argument_list|(
name|credentialsProvider
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAuthSchemeRegistry
argument_list|(
name|authRegistry
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAuthCache
argument_list|(
name|authCache
argument_list|)
expr_stmt|;
name|ByteArrayEntity
name|entity
init|=
operator|new
name|ByteArrayEntity
argument_list|(
name|request
argument_list|,
name|ContentType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
decl_stmt|;
comment|// Create the client with the AuthSchemeRegistry and manager
name|HttpPost
name|post
init|=
operator|new
name|HttpPost
argument_list|(
name|toURI
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|post
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
try|try
init|(
name|CloseableHttpResponse
name|response
init|=
name|client
operator|.
name|execute
argument_list|(
name|post
argument_list|,
name|context
argument_list|)
init|)
block|{
specifier|final
name|int
name|statusCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_OK
operator|==
name|statusCode
operator|||
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
operator|==
name|statusCode
condition|)
block|{
return|return
name|EntityUtils
operator|.
name|toByteArray
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to execute HTTP Request, got HTTP/"
operator|+
name|statusCode
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to execute HTTP request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|URI
name|toURI
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|RuntimeException
block|{
try|try
block|{
return|return
name|url
operator|.
name|toURI
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * A credentials implementation which returns null.    */
specifier|private
specifier|static
class|class
name|EmptyCredentials
implements|implements
name|Credentials
block|{
specifier|public
specifier|static
specifier|final
name|EmptyCredentials
name|INSTANCE
init|=
operator|new
name|EmptyCredentials
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End AvaticaCommonsHttpClientSpnegoImpl.java
end_comment

end_unit

