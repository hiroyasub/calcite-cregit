begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of {@link org.apache.calcite.avatica.util.Cursor}  * that caches its current row.  *  * @param<T> Element type  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PositionedCursor
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractCursor
block|{
comment|/**    * Returns the current row.    *    * @return current row    *    * @throws java.util.NoSuchElementException if the iteration has no more    * elements    */
specifier|protected
specifier|abstract
name|T
name|current
parameter_list|()
function_decl|;
comment|/** Implementation of    * {@link org.apache.calcite.avatica.util.AbstractCursor.Getter}    * that reads from records that are arrays. */
specifier|protected
class|class
name|ArrayGetter
extends|extends
name|AbstractGetter
block|{
specifier|protected
specifier|final
name|int
name|field
decl_stmt|;
specifier|public
name|ArrayGetter
parameter_list|(
name|int
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
name|Object
name|o
init|=
operator|(
operator|(
name|Object
index|[]
operator|)
name|current
argument_list|()
operator|)
index|[
name|field
index|]
decl_stmt|;
name|wasNull
index|[
literal|0
index|]
operator|=
name|o
operator|==
literal|null
expr_stmt|;
return|return
name|o
return|;
block|}
block|}
comment|/** Implementation of    * {@link org.apache.calcite.avatica.util.AbstractCursor.Getter}    * that reads items from a list. */
specifier|protected
class|class
name|ListGetter
extends|extends
name|AbstractGetter
block|{
specifier|protected
specifier|final
name|int
name|index
decl_stmt|;
specifier|public
name|ListGetter
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
name|Object
name|o
init|=
operator|(
operator|(
name|List
operator|)
name|current
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|wasNull
index|[
literal|0
index|]
operator|=
name|o
operator|==
literal|null
expr_stmt|;
return|return
name|o
return|;
block|}
block|}
comment|/** Implementation of    * {@link org.apache.calcite.avatica.util.AbstractCursor.Getter}    * for records that consist of a single field.    *    *<p>Each record is represented as an object, and the value of the sole    * field is that object. */
specifier|protected
class|class
name|ObjectGetter
extends|extends
name|AbstractGetter
block|{
specifier|public
name|ObjectGetter
parameter_list|(
name|int
name|field
parameter_list|)
block|{
assert|assert
name|field
operator|==
literal|0
assert|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
name|Object
name|o
init|=
name|current
argument_list|()
decl_stmt|;
name|wasNull
index|[
literal|0
index|]
operator|=
name|o
operator|==
literal|null
expr_stmt|;
return|return
name|o
return|;
block|}
block|}
comment|/** Implementation of    * {@link org.apache.calcite.avatica.util.AbstractCursor.Getter}    * that reads fields via reflection. */
specifier|protected
class|class
name|FieldGetter
extends|extends
name|AbstractGetter
block|{
specifier|protected
specifier|final
name|Field
name|field
decl_stmt|;
specifier|public
name|FieldGetter
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
name|Object
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|field
operator|.
name|get
argument_list|(
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|wasNull
index|[
literal|0
index|]
operator|=
name|o
operator|==
literal|null
expr_stmt|;
return|return
name|o
return|;
block|}
block|}
comment|/** Implementation of    * {@link org.apache.calcite.avatica.util.AbstractCursor.Getter}    * that reads entries from a {@link java.util.Map}. */
specifier|protected
class|class
name|MapGetter
parameter_list|<
name|K
parameter_list|>
extends|extends
name|AbstractGetter
block|{
specifier|protected
specifier|final
name|K
name|key
decl_stmt|;
specifier|public
name|MapGetter
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|Object
argument_list|>
operator|)
name|current
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|wasNull
index|[
literal|0
index|]
operator|=
name|o
operator|==
literal|null
expr_stmt|;
return|return
name|o
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End PositionedCursor.java
end_comment

end_unit

