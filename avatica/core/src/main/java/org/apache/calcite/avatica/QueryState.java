begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Common
operator|.
name|MetaDataOperationArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Common
operator|.
name|MetaDataOperationArgument
operator|.
name|ArgumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|MetaDataOperation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A struct used to encapsulate the necessary information to reconstitute a ResultSet in the  * Avatica server.  */
end_comment

begin_class
specifier|public
class|class
name|QueryState
block|{
comment|/**    * An enumeration that represents how a ResultSet was created.    */
specifier|public
enum|enum
name|StateType
block|{
name|SQL
block|,
name|METADATA
block|;
specifier|public
name|Common
operator|.
name|StateType
name|toProto
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|SQL
case|:
return|return
name|Common
operator|.
name|StateType
operator|.
name|SQL
return|;
case|case
name|METADATA
case|:
return|return
name|Common
operator|.
name|StateType
operator|.
name|METADATA
return|;
default|default:
return|return
name|Common
operator|.
name|StateType
operator|.
name|UNRECOGNIZED
return|;
block|}
block|}
specifier|public
specifier|static
name|StateType
name|fromProto
parameter_list|(
name|Common
operator|.
name|StateType
name|protoType
parameter_list|)
block|{
switch|switch
condition|(
name|protoType
condition|)
block|{
case|case
name|SQL
case|:
return|return
name|StateType
operator|.
name|SQL
return|;
case|case
name|METADATA
case|:
return|return
name|StateType
operator|.
name|METADATA
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unhandled StateType "
operator|+
name|protoType
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"type"
argument_list|)
specifier|public
specifier|final
name|StateType
name|type
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"sql"
argument_list|)
specifier|public
specifier|final
name|String
name|sql
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"metaDataOperation"
argument_list|)
specifier|public
specifier|final
name|MetaDataOperation
name|metaDataOperation
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"operationArgs"
argument_list|)
specifier|public
specifier|final
name|Object
index|[]
name|operationArgs
decl_stmt|;
comment|/**    * Constructor encapsulating a SQL query used to create a result set.    *    * @param sql The SQL query.    */
specifier|public
name|QueryState
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
comment|// This doesn't to be non-null
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|StateType
operator|.
name|SQL
expr_stmt|;
comment|// Null out the members we don't use.
name|this
operator|.
name|metaDataOperation
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|operationArgs
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Constructor encapsulating a metadata operation's result set.    *    * @param op A pointer to the {@link DatabaseMetaData} operation being invoked.    * @param args The arguments to the method being invoked.    */
specifier|public
name|QueryState
parameter_list|(
name|MetaDataOperation
name|op
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|metaDataOperation
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationArgs
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|args
argument_list|)
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|StateType
operator|.
name|METADATA
expr_stmt|;
comment|// Null out the members we won't use
name|this
operator|.
name|sql
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Not intended for external use. For Jackson-databind only.    */
specifier|public
name|QueryState
parameter_list|(
name|StateType
name|type
parameter_list|,
name|String
name|sql
parameter_list|,
name|MetaDataOperation
name|op
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SQL
case|:
name|this
operator|.
name|sql
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|sql
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|op
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected null MetaDataOperation, but got "
operator|+
name|op
argument_list|)
throw|;
block|}
name|this
operator|.
name|metaDataOperation
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|args
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected null arguments, but got "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|operationArgs
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|METADATA
case|:
name|this
operator|.
name|metaDataOperation
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationArgs
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sql
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected null SQl but got "
operator|+
name|sql
argument_list|)
throw|;
block|}
name|this
operator|.
name|sql
operator|=
literal|null
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to handle StateType "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Not intended for external use. For Jackson-databind only.    */
specifier|public
name|QueryState
parameter_list|()
block|{
name|this
operator|.
name|sql
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|metaDataOperation
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|operationArgs
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * @return The {@link StateType} for this encapsulated state.    */
specifier|public
name|StateType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**    * @return The SQL expression to invoke.    */
specifier|public
name|String
name|getSql
parameter_list|()
block|{
assert|assert
name|type
operator|==
name|StateType
operator|.
name|SQL
assert|;
return|return
name|sql
return|;
block|}
comment|/**    * @return The metadata operation to invoke.    */
specifier|public
name|MetaDataOperation
name|getMetaDataOperation
parameter_list|()
block|{
assert|assert
name|type
operator|==
name|StateType
operator|.
name|METADATA
assert|;
return|return
name|metaDataOperation
return|;
block|}
comment|/**    * @return The Arguments for the given metadata operation.    */
specifier|public
name|Object
index|[]
name|getOperationArgs
parameter_list|()
block|{
assert|assert
name|type
operator|==
name|StateType
operator|.
name|METADATA
assert|;
return|return
name|operationArgs
return|;
block|}
specifier|public
name|ResultSet
name|invoke
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Statement
name|statement
parameter_list|)
throws|throws
name|SQLException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SQL
case|:
name|boolean
name|ret
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|statement
argument_list|)
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ResultSet
name|results
init|=
name|statement
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
comment|// Either execute(sql) returned true or the resultSet was null
assert|assert
name|ret
operator|||
literal|null
operator|==
name|results
assert|;
return|return
name|results
return|;
case|case
name|METADATA
case|:
name|DatabaseMetaData
name|metadata
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|conn
argument_list|)
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|metaDataOperation
condition|)
block|{
case|case
name|GET_ATTRIBUTES
case|:
name|verifyOpArgs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getAttributes
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|)
return|;
case|case
name|GET_BEST_ROW_IDENTIFIER
case|:
name|verifyOpArgs
argument_list|(
literal|5
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getBestRowIdentifier
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|int
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|,
operator|(
name|boolean
operator|)
name|operationArgs
index|[
literal|4
index|]
argument_list|)
return|;
case|case
name|GET_CATALOGS
case|:
name|verifyOpArgs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getCatalogs
argument_list|()
return|;
case|case
name|GET_COLUMNS
case|:
name|verifyOpArgs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getColumns
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|)
return|;
case|case
name|GET_COLUMN_PRIVILEGES
case|:
name|verifyOpArgs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getColumnPrivileges
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|)
return|;
case|case
name|GET_CROSS_REFERENCE
case|:
name|verifyOpArgs
argument_list|(
literal|6
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getCrossReference
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|4
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|5
index|]
argument_list|)
return|;
case|case
name|GET_EXPORTED_KEYS
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getExportedKeys
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|GET_FUNCTIONS
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getFunctions
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|GET_FUNCTION_COLUMNS
case|:
name|verifyOpArgs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getFunctionColumns
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|)
return|;
case|case
name|GET_IMPORTED_KEYS
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getImportedKeys
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|GET_INDEX_INFO
case|:
name|verifyOpArgs
argument_list|(
literal|5
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getIndexInfo
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|boolean
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|,
operator|(
name|boolean
operator|)
name|operationArgs
index|[
literal|4
index|]
argument_list|)
return|;
case|case
name|GET_PRIMARY_KEYS
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getPrimaryKeys
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|GET_PROCEDURES
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getProcedures
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|GET_PROCEDURE_COLUMNS
case|:
name|verifyOpArgs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getProcedureColumns
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|)
return|;
case|case
name|GET_PSEUDO_COLUMNS
case|:
name|verifyOpArgs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getPseudoColumns
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|)
return|;
case|case
name|GET_SCHEMAS
case|:
name|verifyOpArgs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getSchemas
argument_list|()
return|;
case|case
name|GET_SCHEMAS_WITH_ARGS
case|:
name|verifyOpArgs
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getSchemas
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|)
return|;
case|case
name|GET_SUPER_TABLES
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getSuperTables
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|GET_SUPER_TYPES
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getSuperTypes
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|GET_TABLES
case|:
name|verifyOpArgs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getTables
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
index|[]
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|)
return|;
case|case
name|GET_TABLE_PRIVILEGES
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getTablePrivileges
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|GET_TABLE_TYPES
case|:
name|verifyOpArgs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getTableTypes
argument_list|()
return|;
case|case
name|GET_TYPE_INFO
case|:
name|verifyOpArgs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getTypeInfo
argument_list|()
return|;
case|case
name|GET_UDTS
case|:
name|verifyOpArgs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getUDTs
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|,
operator|(
name|int
index|[]
operator|)
name|operationArgs
index|[
literal|3
index|]
argument_list|)
return|;
case|case
name|GET_VERSION_COLUMNS
case|:
name|verifyOpArgs
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|metadata
operator|.
name|getVersionColumns
argument_list|(
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|operationArgs
index|[
literal|2
index|]
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unhandled Metadata operation: "
operator|+
name|metaDataOperation
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to process QueryState of type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|verifyOpArgs
parameter_list|(
name|int
name|expectedArgs
parameter_list|)
block|{
if|if
condition|(
name|expectedArgs
operator|!=
name|operationArgs
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected "
operator|+
name|expectedArgs
operator|+
literal|" arguments, but got "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|operationArgs
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Common
operator|.
name|QueryState
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|QueryState
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|QueryState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Required
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SQL
case|:
name|builder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|StateType
operator|.
name|SQL
argument_list|)
expr_stmt|;
break|break;
case|case
name|METADATA
case|:
name|builder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|StateType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unhandled type: "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|// Optional SQL
if|if
condition|(
literal|null
operator|!=
name|sql
condition|)
block|{
name|builder
operator|.
name|setSql
argument_list|(
name|sql
argument_list|)
operator|.
name|setHasSql
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Optional metaDataOperation
if|if
condition|(
literal|null
operator|!=
name|metaDataOperation
condition|)
block|{
name|builder
operator|.
name|setOp
argument_list|(
name|metaDataOperation
operator|.
name|toProto
argument_list|()
argument_list|)
operator|.
name|setHasOp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Optional operationArgs
if|if
condition|(
literal|null
operator|!=
name|operationArgs
condition|)
block|{
name|builder
operator|.
name|setHasArgs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|arg
range|:
name|operationArgs
control|)
block|{
name|MetaDataOperationArgument
operator|.
name|Builder
name|argBuilder
init|=
name|MetaDataOperationArgument
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|arg
condition|)
block|{
name|builder
operator|.
name|addArgs
argument_list|(
name|argBuilder
operator|.
name|setType
argument_list|(
name|ArgumentType
operator|.
name|NULL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|instanceof
name|String
condition|)
block|{
name|builder
operator|.
name|addArgs
argument_list|(
name|argBuilder
operator|.
name|setType
argument_list|(
name|ArgumentType
operator|.
name|STRING
argument_list|)
operator|.
name|setStringValue
argument_list|(
operator|(
name|String
operator|)
name|arg
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|instanceof
name|Integer
condition|)
block|{
name|builder
operator|.
name|addArgs
argument_list|(
name|argBuilder
operator|.
name|setType
argument_list|(
name|ArgumentType
operator|.
name|INT
argument_list|)
operator|.
name|setIntValue
argument_list|(
operator|(
name|int
operator|)
name|arg
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|instanceof
name|Boolean
condition|)
block|{
name|builder
operator|.
name|addArgs
argument_list|(
name|argBuilder
operator|.
name|setType
argument_list|(
name|ArgumentType
operator|.
name|BOOL
argument_list|)
operator|.
name|setBoolValue
argument_list|(
operator|(
name|boolean
operator|)
name|arg
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|instanceof
name|String
index|[]
condition|)
block|{
name|argBuilder
operator|.
name|setType
argument_list|(
name|ArgumentType
operator|.
name|REPEATED_STRING
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|strArg
range|:
operator|(
name|String
index|[]
operator|)
name|arg
control|)
block|{
name|argBuilder
operator|.
name|addStringArrayValues
argument_list|(
name|strArg
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addArgs
argument_list|(
name|argBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|instanceof
name|int
index|[]
condition|)
block|{
name|argBuilder
operator|.
name|setType
argument_list|(
name|ArgumentType
operator|.
name|REPEATED_INT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|intArg
range|:
operator|(
name|int
index|[]
operator|)
name|arg
control|)
block|{
name|argBuilder
operator|.
name|addIntArrayValues
argument_list|(
name|intArg
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addArgs
argument_list|(
name|argBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected operation argument: "
operator|+
name|arg
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|builder
operator|.
name|setHasArgs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|QueryState
name|fromProto
parameter_list|(
name|Common
operator|.
name|QueryState
name|protoState
parameter_list|)
block|{
name|StateType
name|type
init|=
name|StateType
operator|.
name|fromProto
argument_list|(
name|protoState
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|protoState
operator|.
name|getHasSql
argument_list|()
condition|?
name|protoState
operator|.
name|getSql
argument_list|()
else|:
literal|null
decl_stmt|;
name|MetaDataOperation
name|op
init|=
name|protoState
operator|.
name|getHasOp
argument_list|()
condition|?
name|MetaDataOperation
operator|.
name|fromProto
argument_list|(
name|protoState
operator|.
name|getOp
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|Object
index|[]
name|opArgs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|protoState
operator|.
name|getHasArgs
argument_list|()
condition|)
block|{
name|opArgs
operator|=
operator|new
name|Object
index|[
name|protoState
operator|.
name|getArgsCount
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Common
operator|.
name|MetaDataOperationArgument
name|arg
range|:
name|protoState
operator|.
name|getArgsList
argument_list|()
control|)
block|{
switch|switch
condition|(
name|arg
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
name|opArgs
index|[
name|i
index|]
operator|=
name|arg
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BOOL
case|:
name|opArgs
index|[
name|i
index|]
operator|=
name|arg
operator|.
name|getBoolValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|opArgs
index|[
name|i
index|]
operator|=
name|arg
operator|.
name|getIntValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|REPEATED_STRING
case|:
name|opArgs
index|[
name|i
index|]
operator|=
name|arg
operator|.
name|getStringArrayValuesList
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|arg
operator|.
name|getStringArrayValuesCount
argument_list|()
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPEATED_INT
case|:
name|int
index|[]
name|arr
init|=
operator|new
name|int
index|[
name|arg
operator|.
name|getIntArrayValuesCount
argument_list|()
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|val
range|:
name|arg
operator|.
name|getIntArrayValuesList
argument_list|()
control|)
block|{
name|arr
index|[
name|offset
index|]
operator|=
name|val
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
name|opArgs
index|[
name|i
index|]
operator|=
name|arr
expr_stmt|;
break|break;
case|case
name|NULL
case|:
name|opArgs
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not interpret "
operator|+
name|arg
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QueryState
argument_list|(
name|type
argument_list|,
name|sql
argument_list|,
name|op
argument_list|,
name|opArgs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|metaDataOperation
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|operationArgs
argument_list|)
argument_list|,
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|QueryState
operator|&&
name|metaDataOperation
operator|==
operator|(
operator|(
name|QueryState
operator|)
name|o
operator|)
operator|.
name|metaDataOperation
operator|&&
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|operationArgs
argument_list|,
operator|(
operator|(
name|QueryState
operator|)
name|o
operator|)
operator|.
name|operationArgs
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sql
argument_list|,
operator|(
operator|(
name|QueryState
operator|)
name|o
operator|)
operator|.
name|sql
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End QueryState.java
end_comment

end_unit

