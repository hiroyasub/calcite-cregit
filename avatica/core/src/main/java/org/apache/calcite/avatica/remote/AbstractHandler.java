begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaSeverity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|NoSuchConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ErrorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|RpcMetadataResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Abstract base class for {@link Handler}s to extend to inherit functionality common across  * serialization strategies.  *  * @param<T> The format Requests/Responses are serialized as.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHandler
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Handler
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NULL_EXCEPTION_MESSAGE
init|=
literal|"(null exception message)"
decl_stmt|;
specifier|protected
specifier|final
name|Service
name|service
decl_stmt|;
specifier|private
name|RpcMetadataResponse
name|metadata
init|=
literal|null
decl_stmt|;
specifier|public
name|AbstractHandler
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
specifier|abstract
name|Request
name|decode
parameter_list|(
name|T
name|serializedRequest
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Serialize the given {@link Response} per the concrete {@link Handler} implementation.    *    * @param response The {@link Response} to serialize.    * @return A serialized representation of the {@link Response}.    * @throws IOException    */
specifier|abstract
name|T
name|encode
parameter_list|(
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Unwrap Avatica-specific context about a given exception.    *    * @param e A caught exception throw by Avatica implementation.    * @return An {@link ErrorResponse}.    */
name|ErrorResponse
name|unwrapException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// By default, we know nothing extra.
name|int
name|errorCode
init|=
name|ErrorResponse
operator|.
name|UNKNOWN_ERROR_CODE
decl_stmt|;
name|String
name|sqlState
init|=
name|ErrorResponse
operator|.
name|UNKNOWN_SQL_STATE
decl_stmt|;
name|AvaticaSeverity
name|severity
init|=
name|AvaticaSeverity
operator|.
name|UNKNOWN
decl_stmt|;
name|String
name|errorMsg
init|=
literal|null
decl_stmt|;
comment|// Extract the contextual information if we have it. We may not.
if|if
condition|(
name|e
operator|instanceof
name|AvaticaRuntimeException
condition|)
block|{
name|AvaticaRuntimeException
name|rte
init|=
operator|(
name|AvaticaRuntimeException
operator|)
name|e
decl_stmt|;
name|errorCode
operator|=
name|rte
operator|.
name|getErrorCode
argument_list|()
expr_stmt|;
name|sqlState
operator|=
name|rte
operator|.
name|getSqlState
argument_list|()
expr_stmt|;
name|severity
operator|=
name|rte
operator|.
name|getSeverity
argument_list|()
expr_stmt|;
name|errorMsg
operator|=
name|rte
operator|.
name|getErrorMessage
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|e
operator|instanceof
name|NoSuchConnectionException
condition|)
block|{
name|errorCode
operator|=
name|ErrorResponse
operator|.
name|MISSING_CONNECTION_ERROR_CODE
expr_stmt|;
name|severity
operator|=
name|AvaticaSeverity
operator|.
name|ERROR
expr_stmt|;
name|errorMsg
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Try to construct a meaningful error message when the server impl doesn't provide one.
name|errorMsg
operator|=
name|getCausalChain
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ErrorResponse
argument_list|(
name|e
argument_list|,
name|errorMsg
argument_list|,
name|errorCode
argument_list|,
name|sqlState
argument_list|,
name|severity
argument_list|,
name|metadata
argument_list|)
return|;
block|}
comment|/**    * Compute a response for the given request, handling errors generated by that computation.    *    * @param serializedRequest The caller's request.    * @return A {@link Response} with additional context about that response.    */
specifier|public
name|HandlerResponse
argument_list|<
name|T
argument_list|>
name|apply
parameter_list|(
name|T
name|serializedRequest
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Service
operator|.
name|Request
name|request
init|=
name|decode
argument_list|(
name|serializedRequest
argument_list|)
decl_stmt|;
specifier|final
name|Service
operator|.
name|Response
name|response
init|=
name|request
operator|.
name|accept
argument_list|(
name|service
argument_list|)
decl_stmt|;
return|return
operator|new
name|HandlerResponse
argument_list|<>
argument_list|(
name|encode
argument_list|(
name|response
argument_list|)
argument_list|,
name|HTTP_OK
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|convertToErrorResponse
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**    * Attempts to convert an Exception to an ErrorResponse. If there is an issue in serialization,    * a RuntimeException is thrown instead (wrapping the original exception if necessary).    *    * @param e The exception to convert.    * @return A HandlerResponse instance.    */
specifier|public
name|HandlerResponse
argument_list|<
name|T
argument_list|>
name|convertToErrorResponse
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ErrorResponse
name|errorResp
init|=
name|unwrapException
argument_list|(
name|e
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|HandlerResponse
argument_list|<>
argument_list|(
name|encode
argument_list|(
name|errorResp
argument_list|)
argument_list|,
name|HTTP_INTERNAL_SERVER_ERROR
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// TODO provide a canned ErrorResponse
comment|// If we can't serialize the error message, we can't give a meaningful error to caller.
comment|// Just try to not unnecessarily create more exceptions.
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Constructs a message for the summary of an Exception.    *    * @param e The Exception to summarize.    * @return A summary message for the Exception.    */
specifier|private
name|String
name|getCausalChain
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|Throwable
name|curr
init|=
name|e
decl_stmt|;
comment|// Could use Guava, but that would increase dependency set unnecessarily.
while|while
condition|(
literal|null
operator|!=
name|curr
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
name|curr
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|curr
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|null
operator|==
name|message
condition|?
name|NULL_EXCEPTION_MESSAGE
else|:
name|message
argument_list|)
expr_stmt|;
name|curr
operator|=
name|curr
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Catch the case where we have no error message.
return|return
literal|"Unknown error message"
return|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRpcMetadata
parameter_list|(
name|RpcMetadataResponse
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AbstractHandler.java
end_comment

end_unit

