begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Definition of a property that may be specified on the JDBC connect string.  * {@link BuiltInConnectionProperty} enumerates built-in properties, but  * there may be others; the list is not closed.  */
end_comment

begin_interface
specifier|public
interface|interface
name|ConnectionProperty
block|{
comment|/** The name of this property. (E.g. "MATERIALIZATIONS_ENABLED".) */
name|String
name|name
parameter_list|()
function_decl|;
comment|/** The name of this property in camel-case.    * (E.g. "materializationsEnabled".) */
name|String
name|camelName
parameter_list|()
function_decl|;
comment|/** Returns the default value of this property. The type must match its data    * type. */
name|Object
name|defaultValue
parameter_list|()
function_decl|;
comment|/** Returns the data type of this property. */
name|Type
name|type
parameter_list|()
function_decl|;
comment|/** Wraps this property with a properties object from which its value can be    * obtained when needed. */
name|ConnectionConfigImpl
operator|.
name|PropEnv
name|wrap
parameter_list|(
name|Properties
name|properties
parameter_list|)
function_decl|;
comment|/** Whether the property is mandatory. */
name|boolean
name|required
parameter_list|()
function_decl|;
comment|/** Class of values that this property can take. Most useful for    * {@link Type#ENUM} properties. */
name|Class
name|valueClass
parameter_list|()
function_decl|;
comment|/** Data type of property. */
enum|enum
name|Type
block|{
name|BOOLEAN
block|,
name|STRING
block|,
name|NUMBER
block|,
name|ENUM
block|,
name|PLUGIN
block|;
comment|/** Deduces the class of a property of this type, given the default value      * and the user-specified value class (each of which may be null, unless      * this is an enum or a plugin). */
specifier|public
name|Class
name|deduceValueClass
parameter_list|(
name|Object
name|defaultValue
parameter_list|,
name|Class
name|valueClass
parameter_list|)
block|{
if|if
condition|(
name|valueClass
operator|!=
literal|null
condition|)
block|{
return|return
name|valueClass
return|;
block|}
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|defaultValue
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isAnonymousClass
argument_list|()
condition|)
block|{
comment|// for default values that are anonymous enums
return|return
name|c
operator|.
name|getSuperclass
argument_list|()
return|;
block|}
return|return
name|c
return|;
block|}
return|return
name|defaultValueClass
argument_list|()
return|;
block|}
comment|/** Returns whether a default value and value types are valid for this      * kind of property. */
specifier|public
name|boolean
name|valid
parameter_list|(
name|Object
name|defaultValue
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|clazz
operator|==
name|Boolean
operator|.
name|class
operator|&&
operator|(
name|defaultValue
operator|==
literal|null
operator|||
name|defaultValue
operator|instanceof
name|Boolean
operator|)
return|;
case|case
name|NUMBER
case|:
return|return
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|&&
operator|(
name|defaultValue
operator|==
literal|null
operator|||
name|defaultValue
operator|instanceof
name|Number
operator|)
return|;
case|case
name|STRING
case|:
return|return
name|clazz
operator|==
name|String
operator|.
name|class
operator|&&
operator|(
name|defaultValue
operator|==
literal|null
operator|||
name|defaultValue
operator|instanceof
name|String
operator|)
return|;
case|case
name|PLUGIN
case|:
return|return
name|clazz
operator|!=
literal|null
operator|&&
operator|(
name|defaultValue
operator|==
literal|null
operator|||
name|defaultValue
operator|instanceof
name|String
operator|)
return|;
case|case
name|ENUM
case|:
return|return
name|Enum
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|&&
operator|(
name|defaultValue
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isInstance
argument_list|(
name|defaultValue
argument_list|)
operator|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
specifier|public
name|Class
name|defaultValueClass
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|Boolean
operator|.
name|class
return|;
case|case
name|NUMBER
case|:
return|return
name|Number
operator|.
name|class
return|;
case|case
name|STRING
case|:
return|return
name|String
operator|.
name|class
return|;
case|case
name|PLUGIN
case|:
return|return
name|Object
operator|.
name|class
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"must specify value class for an ENUM"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_interface

begin_comment
comment|// End ConnectionProperty.java
end_comment

end_unit

