begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Service implementation that encodes requests and responses as protocol buffers.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ProtobufService
extends|extends
name|AbstractService
block|{
comment|/**    * Derived class should implement this method to transport requests and    * responses to and from the peer service.    */
specifier|public
specifier|abstract
name|Response
name|_apply
parameter_list|(
name|Request
name|request
parameter_list|)
function_decl|;
annotation|@
name|Override
name|SerializationType
name|getSerializationType
parameter_list|()
block|{
return|return
name|SerializationType
operator|.
name|PROTOBUF
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|CatalogsRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|ResultSetResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|SchemasRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|ResultSetResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TablesRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|ResultSetResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TableTypesRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|ResultSetResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TypeInfoRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|ResultSetResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|ColumnsRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|ResultSetResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrepareResponse
name|apply
parameter_list|(
name|PrepareRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|PrepareResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResponse
name|apply
parameter_list|(
name|PrepareAndExecuteRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|ExecuteResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FetchResponse
name|apply
parameter_list|(
name|FetchRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|FetchResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CreateStatementResponse
name|apply
parameter_list|(
name|CreateStatementRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|CreateStatementResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CloseStatementResponse
name|apply
parameter_list|(
name|CloseStatementRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|CloseStatementResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OpenConnectionResponse
name|apply
parameter_list|(
name|OpenConnectionRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|OpenConnectionResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CloseConnectionResponse
name|apply
parameter_list|(
name|CloseConnectionRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|CloseConnectionResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionSyncResponse
name|apply
parameter_list|(
name|ConnectionSyncRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|ConnectionSyncResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DatabasePropertyResponse
name|apply
parameter_list|(
name|DatabasePropertyRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|DatabasePropertyResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResponse
name|apply
parameter_list|(
name|ExecuteRequest
name|request
parameter_list|)
block|{
return|return
name|finagle
argument_list|(
operator|(
name|ExecuteResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SyncResultsResponse
name|apply
parameter_list|(
name|SyncResultsRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|SyncResultsResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CommitResponse
name|apply
parameter_list|(
name|CommitRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|CommitResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RollbackResponse
name|apply
parameter_list|(
name|RollbackRequest
name|request
parameter_list|)
block|{
return|return
operator|(
name|RollbackResponse
operator|)
name|_apply
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Checks if the provided {@link Message} is an instance of the Class given by    *<code>expectedType</code>. Throws an IllegalArgumentException if the message is not of the    * expected type, otherwise, it returns the message cast as the expected type.    *    * @param msg A Protocol Buffer message.    * @param expectedType The expected type of the Protocol Buffer message.    * @return The msg cast to the concrete Message type.    * @throws IllegalArgumentException If the type of the message is not the expectedType.    */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Message
parameter_list|>
name|T
name|castProtobufMessage
parameter_list|(
name|Message
name|msg
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expectedType
operator|.
name|isInstance
argument_list|(
name|msg
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected instance of "
operator|+
name|expectedType
operator|.
name|getName
argument_list|()
operator|+
literal|", but got "
operator|+
name|msg
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|expectedType
operator|.
name|cast
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End ProtobufService.java
end_comment

end_unit

