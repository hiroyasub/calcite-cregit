begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|AvaticaHttpClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/** Implementation of {@link ConnectionConfig}. */
end_comment

begin_class
specifier|public
class|class
name|ConnectionConfigImpl
implements|implements
name|ConnectionConfig
block|{
specifier|protected
specifier|final
name|Properties
name|properties
decl_stmt|;
specifier|public
name|ConnectionConfigImpl
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|String
name|schema
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|SCHEMA
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|String
name|timeZone
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|TIME_ZONE
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|Service
operator|.
name|Factory
name|factory
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|FACTORY
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getPlugin
argument_list|(
name|Service
operator|.
name|Factory
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|url
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|URL
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|String
name|serialization
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|SERIALIZATION
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|String
name|authentication
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|AUTHENTICATION
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|String
name|avaticaUser
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|AVATICA_USER
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|String
name|avaticaPassword
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|AVATICA_PASSWORD
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|AvaticaHttpClientFactory
name|httpClientFactory
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|HTTP_CLIENT_FACTORY
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getPlugin
argument_list|(
name|AvaticaHttpClientFactory
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|httpClientClass
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|HTTP_CLIENT_IMPL
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|String
name|kerberosPrincipal
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|PRINCIPAL
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|File
name|kerberosKeytab
parameter_list|()
block|{
name|String
name|keytabPath
init|=
name|BuiltInConnectionProperty
operator|.
name|KEYTAB
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|keytabPath
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|keytabPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keytab
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|keytab
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The "
operator|+
name|BuiltInConnectionProperty
operator|.
name|KEYTAB
operator|.
name|name
argument_list|()
operator|+
literal|" does not "
operator|+
literal|" reference a normal, existent file: "
operator|+
name|keytabPath
argument_list|)
throw|;
block|}
return|return
name|keytab
return|;
block|}
specifier|public
name|File
name|truststore
parameter_list|()
block|{
name|String
name|filename
init|=
name|BuiltInConnectionProperty
operator|.
name|TRUSTSTORE
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|filename
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|filename
argument_list|)
return|;
block|}
specifier|public
name|String
name|truststorePassword
parameter_list|()
block|{
return|return
name|BuiltInConnectionProperty
operator|.
name|TRUSTSTORE_PASSWORD
operator|.
name|wrap
argument_list|(
name|properties
argument_list|)
operator|.
name|getString
argument_list|()
return|;
block|}
comment|/** Converts a {@link Properties} object containing (name, value)    * pairs into a map whose keys are    * {@link org.apache.calcite.avatica.InternalProperty} objects.    *    *<p>Matching is case-insensitive. Throws if a property is not known.    * If a property occurs more than once, takes the last occurrence.</p>    *    * @param properties Properties    * @return Map    * @throws RuntimeException if a property is not known    */
specifier|public
specifier|static
name|Map
argument_list|<
name|ConnectionProperty
argument_list|,
name|String
argument_list|>
name|parse
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|ConnectionProperty
argument_list|>
name|nameToProps
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|ConnectionProperty
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ConnectionProperty
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|properties
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
specifier|final
name|ConnectionProperty
name|connectionProperty
init|=
name|nameToProps
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionProperty
operator|==
literal|null
condition|)
block|{
comment|// For now, don't throw. It messes up sub-projects.
comment|//throw new RuntimeException("Unknown property '" + name + "'");
continue|continue;
block|}
name|map
operator|.
name|put
argument_list|(
name|connectionProperty
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/** The combination of a property definition and a map of property values. */
specifier|public
specifier|static
class|class
name|PropEnv
block|{
specifier|final
name|Map
argument_list|<
name|?
extends|extends
name|ConnectionProperty
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
specifier|private
specifier|final
name|ConnectionProperty
name|property
decl_stmt|;
specifier|public
name|PropEnv
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|ConnectionProperty
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|ConnectionProperty
name|property
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|get_
parameter_list|(
name|Converter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|map
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|converter
operator|.
name|apply
argument_list|(
name|property
argument_list|,
name|s
argument_list|)
return|;
block|}
return|return
name|converter
operator|.
name|apply
argument_list|(
name|property
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getDefaultNull
parameter_list|(
name|Converter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|map
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|converter
operator|.
name|apply
argument_list|(
name|property
argument_list|,
name|s
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Returns the string value of this property, or null if not specified and      * no default. */
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|getString
argument_list|(
operator|(
name|String
operator|)
name|property
operator|.
name|defaultValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the string value of this property, or null if not specified and      * no default. */
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|defaultValue
parameter_list|)
block|{
assert|assert
name|property
operator|.
name|type
argument_list|()
operator|==
name|ConnectionProperty
operator|.
name|Type
operator|.
name|STRING
assert|;
return|return
name|get_
argument_list|(
name|IDENTITY_CONVERTER
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/** Returns the int value of this property. Throws if not set and no      * default. */
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
name|getInt
argument_list|(
operator|(
name|Number
operator|)
name|property
operator|.
name|defaultValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the int value of this property. Throws if not set and no      * default. */
specifier|public
name|int
name|getInt
parameter_list|(
name|Number
name|defaultValue
parameter_list|)
block|{
assert|assert
name|property
operator|.
name|type
argument_list|()
operator|==
name|ConnectionProperty
operator|.
name|Type
operator|.
name|NUMBER
assert|;
return|return
name|get_
argument_list|(
name|NUMBER_CONVERTER
argument_list|,
name|defaultValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/** Returns the long value of this property. Throws if not set and no      * default. */
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getLong
argument_list|(
operator|(
name|Number
operator|)
name|property
operator|.
name|defaultValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the long value of this property. Throws if not set and no      * default. */
specifier|public
name|long
name|getLong
parameter_list|(
name|Number
name|defaultValue
parameter_list|)
block|{
assert|assert
name|property
operator|.
name|type
argument_list|()
operator|==
name|ConnectionProperty
operator|.
name|Type
operator|.
name|NUMBER
assert|;
return|return
name|get_
argument_list|(
name|NUMBER_CONVERTER
argument_list|,
name|defaultValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/** Returns the double value of this property. Throws if not set and no      * default. */
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|getDouble
argument_list|(
operator|(
name|Number
operator|)
name|property
operator|.
name|defaultValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the double value of this property. Throws if not set and no      * default. */
specifier|public
name|double
name|getDouble
parameter_list|(
name|Number
name|defaultValue
parameter_list|)
block|{
assert|assert
name|property
operator|.
name|type
argument_list|()
operator|==
name|ConnectionProperty
operator|.
name|Type
operator|.
name|NUMBER
assert|;
return|return
name|get_
argument_list|(
name|NUMBER_CONVERTER
argument_list|,
name|defaultValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|/** Returns the boolean value of this property. Throws if not set and no      * default. */
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
operator|(
name|Boolean
operator|)
name|property
operator|.
name|defaultValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the boolean value of this property. Throws if not set and no      * default. */
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|boolean
name|defaultValue
parameter_list|)
block|{
assert|assert
name|property
operator|.
name|type
argument_list|()
operator|==
name|ConnectionProperty
operator|.
name|Type
operator|.
name|BOOLEAN
assert|;
return|return
name|get_
argument_list|(
name|BOOLEAN_CONVERTER
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns the enum value of this property. Throws if not set and no      * default. */
specifier|public
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|E
name|getEnum
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|getEnum
argument_list|(
name|enumClass
argument_list|,
operator|(
name|E
operator|)
name|property
operator|.
name|defaultValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the enum value of this property. Throws if not set and no      * default. */
specifier|public
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|E
name|getEnum
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
parameter_list|,
name|E
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|property
operator|.
name|type
argument_list|()
operator|!=
name|ConnectionProperty
operator|.
name|Type
operator|.
name|ENUM
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not an enum"
argument_list|)
throw|;
block|}
if|if
condition|(
name|enumClass
operator|!=
name|property
operator|.
name|valueClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"wrong value class; expected "
operator|+
name|property
operator|.
name|valueClass
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
block|{
return|return
name|getDefaultNull
argument_list|(
name|enumConverter
argument_list|(
name|enumClass
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|get_
argument_list|(
name|enumConverter
argument_list|(
name|enumClass
argument_list|)
argument_list|,
name|defaultValue
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Returns an instance of a plugin.      *      *<p>Throws if not set and no default.      * Also throws if the class does not implement the required interface,      * or if it does not have a public default constructor or an public static      * field called {@code #INSTANCE}. */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPlugin
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|pluginClass
parameter_list|,
name|T
name|defaultInstance
parameter_list|)
block|{
return|return
name|getPlugin
argument_list|(
name|pluginClass
argument_list|,
operator|(
name|String
operator|)
name|property
operator|.
name|defaultValue
argument_list|()
argument_list|,
name|defaultInstance
argument_list|)
return|;
block|}
comment|/** Returns an instance of a plugin, using a given class name if none is      * set.      *      *<p>Throws if not set and no default.      * Also throws if the class does not implement the required interface,      * or if it does not have a public default constructor or an public static      * field called {@code #INSTANCE}. */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPlugin
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|pluginClass
parameter_list|,
name|String
name|defaultClassName
parameter_list|,
name|T
name|defaultInstance
parameter_list|)
block|{
assert|assert
name|property
operator|.
name|type
argument_list|()
operator|==
name|ConnectionProperty
operator|.
name|Type
operator|.
name|PLUGIN
assert|;
return|return
name|get_
argument_list|(
name|pluginConverter
argument_list|(
name|pluginClass
argument_list|,
name|defaultInstance
argument_list|)
argument_list|,
name|defaultClassName
argument_list|)
return|;
block|}
block|}
comment|/** Callback to parse a property from string to its native type. */
specifier|public
interface|interface
name|Converter
parameter_list|<
name|T
parameter_list|>
block|{
name|T
name|apply
parameter_list|(
name|ConnectionProperty
name|connectionProperty
parameter_list|,
name|String
name|s
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
specifier|final
name|Converter
argument_list|<
name|Boolean
argument_list|>
name|BOOLEAN_CONVERTER
init|=
operator|new
name|Converter
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|apply
parameter_list|(
name|ConnectionProperty
name|connectionProperty
parameter_list|,
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Required property '"
operator|+
name|connectionProperty
operator|.
name|camelName
argument_list|()
operator|+
literal|"' not specified"
argument_list|)
throw|;
block|}
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BigDecimal
argument_list|>
name|MULTIPLIER_MAP
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|MULTIPLIER_MAP
operator|.
name|put
argument_list|(
literal|"k"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|MULTIPLIER_MAP
operator|.
name|put
argument_list|(
literal|"K"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|MULTIPLIER_MAP
operator|.
name|put
argument_list|(
literal|"m"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|MULTIPLIER_MAP
operator|.
name|put
argument_list|(
literal|"M"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|MULTIPLIER_MAP
operator|.
name|put
argument_list|(
literal|"g"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|MULTIPLIER_MAP
operator|.
name|put
argument_list|(
literal|"G"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Converter
argument_list|<
name|Number
argument_list|>
name|NUMBER_CONVERTER
init|=
operator|new
name|Converter
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
specifier|public
name|Number
name|apply
parameter_list|(
name|ConnectionProperty
name|connectionProperty
parameter_list|,
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Required property '"
operator|+
name|connectionProperty
operator|.
name|camelName
argument_list|()
operator|+
literal|"' not specified"
argument_list|)
throw|;
block|}
name|BigDecimal
name|multiplier
init|=
name|BigDecimal
operator|.
name|ONE
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BigDecimal
argument_list|>
name|e
range|:
name|MULTIPLIER_MAP
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|endsWith
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|multiplier
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BigDecimal
argument_list|(
name|s
argument_list|)
operator|.
name|multiply
argument_list|(
name|multiplier
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Converter
argument_list|<
name|String
argument_list|>
name|IDENTITY_CONVERTER
init|=
operator|new
name|Converter
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|ConnectionProperty
name|connectionProperty
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|>
name|Converter
argument_list|<
name|E
argument_list|>
name|enumConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
parameter_list|)
block|{
return|return
operator|new
name|Converter
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|public
name|E
name|apply
parameter_list|(
name|ConnectionProperty
name|connectionProperty
parameter_list|,
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Required property '"
operator|+
name|connectionProperty
operator|.
name|camelName
argument_list|()
operator|+
literal|"' not specified"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|(
name|E
operator|)
name|Enum
operator|.
name|valueOf
argument_list|(
name|enumClass
argument_list|,
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Case insensitive match is OK too.
for|for
control|(
name|E
name|c
range|:
name|enumClass
operator|.
name|getEnumConstants
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Property '"
operator|+
name|s
operator|+
literal|"' not valid for enum "
operator|+
name|enumClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Converter
argument_list|<
name|T
argument_list|>
name|pluginConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|pluginClass
parameter_list|,
specifier|final
name|T
name|defaultInstance
parameter_list|)
block|{
return|return
operator|new
name|Converter
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|apply
parameter_list|(
name|ConnectionProperty
name|connectionProperty
parameter_list|,
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|defaultInstance
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultInstance
return|;
block|}
if|if
condition|(
operator|!
name|connectionProperty
operator|.
name|required
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Required property '"
operator|+
name|connectionProperty
operator|.
name|camelName
argument_list|()
operator|+
literal|"' not specified"
argument_list|)
throw|;
block|}
return|return
name|AvaticaUtils
operator|.
name|instantiatePlugin
argument_list|(
name|pluginClass
argument_list|,
name|s
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End ConnectionConfigImpl.java
end_comment

end_unit

