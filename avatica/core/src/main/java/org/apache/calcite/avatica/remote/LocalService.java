begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|ExecuteBatchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|MetaImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|MissingResultsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|NoSuchStatementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Timer
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|noop
operator|.
name|NoopMetricsSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|MetricsHelper
operator|.
name|concat
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Service} that talks to a local {@link Meta}.  */
end_comment

begin_class
specifier|public
class|class
name|LocalService
implements|implements
name|Service
block|{
specifier|final
name|Meta
name|meta
decl_stmt|;
specifier|final
name|MetricsSystem
name|metrics
decl_stmt|;
specifier|private
specifier|final
name|Timer
name|executeTimer
decl_stmt|;
specifier|private
specifier|final
name|Timer
name|commitTimer
decl_stmt|;
specifier|private
specifier|final
name|Timer
name|prepareTimer
decl_stmt|;
specifier|private
specifier|final
name|Timer
name|prepareAndExecuteTimer
decl_stmt|;
specifier|private
specifier|final
name|Timer
name|connectionSyncTimer
decl_stmt|;
specifier|private
name|RpcMetadataResponse
name|serverLevelRpcMetadata
decl_stmt|;
specifier|public
name|LocalService
parameter_list|(
name|Meta
name|meta
parameter_list|)
block|{
name|this
argument_list|(
name|meta
argument_list|,
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LocalService
parameter_list|(
name|Meta
name|meta
parameter_list|,
name|MetricsSystem
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|meta
operator|=
name|meta
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|this
operator|.
name|executeTimer
operator|=
name|this
operator|.
name|metrics
operator|.
name|getTimer
argument_list|(
name|name
argument_list|(
literal|"Execute"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|commitTimer
operator|=
name|this
operator|.
name|metrics
operator|.
name|getTimer
argument_list|(
name|name
argument_list|(
literal|"Commit"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|prepareTimer
operator|=
name|this
operator|.
name|metrics
operator|.
name|getTimer
argument_list|(
name|name
argument_list|(
literal|"Prepare"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|prepareAndExecuteTimer
operator|=
name|this
operator|.
name|metrics
operator|.
name|getTimer
argument_list|(
name|name
argument_list|(
literal|"PrepareAndExecute"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionSyncTimer
operator|=
name|this
operator|.
name|metrics
operator|.
name|getTimer
argument_list|(
name|name
argument_list|(
literal|"ConnectionSync"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|name
parameter_list|(
name|String
name|timer
parameter_list|)
block|{
return|return
name|concat
argument_list|(
name|LocalService
operator|.
name|class
argument_list|,
name|timer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRpcMetadata
parameter_list|(
name|RpcMetadataResponse
name|serverLevelRpcMetadata
parameter_list|)
block|{
name|this
operator|.
name|serverLevelRpcMetadata
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|serverLevelRpcMetadata
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|(
name|Iterable
argument_list|<
name|E
argument_list|>
name|iterable
parameter_list|)
block|{
if|if
condition|(
name|iterable
operator|instanceof
name|List
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|E
argument_list|>
operator|)
name|iterable
return|;
block|}
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|rowList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|row
range|:
name|iterable
control|)
block|{
name|rowList
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|rowList
return|;
block|}
comment|/** Converts a result set (not serializable) into a serializable response. */
specifier|public
name|ResultSetResponse
name|toResponse
parameter_list|(
name|Meta
operator|.
name|MetaResultSet
name|resultSet
parameter_list|)
block|{
if|if
condition|(
name|resultSet
operator|.
name|updateCount
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|ResultSetResponse
argument_list|(
name|resultSet
operator|.
name|connectionId
argument_list|,
name|resultSet
operator|.
name|statementId
argument_list|,
name|resultSet
operator|.
name|ownStatement
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|resultSet
operator|.
name|updateCount
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
name|Meta
operator|.
name|Signature
name|signature
init|=
name|resultSet
operator|.
name|signature
decl_stmt|;
name|Meta
operator|.
name|CursorFactory
name|cursorFactory
init|=
name|resultSet
operator|.
name|signature
operator|.
name|cursorFactory
decl_stmt|;
name|Meta
operator|.
name|Frame
name|frame
init|=
literal|null
decl_stmt|;
name|int
name|updateCount
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|resultSet
operator|.
name|firstFrame
operator|!=
literal|null
condition|)
block|{
name|list
operator|=
name|list
argument_list|(
name|resultSet
operator|.
name|firstFrame
operator|.
name|rows
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|cursorFactory
operator|.
name|style
condition|)
block|{
case|case
name|ARRAY
case|:
name|cursorFactory
operator|=
name|Meta
operator|.
name|CursorFactory
operator|.
name|LIST
expr_stmt|;
break|break;
case|case
name|MAP
case|:
case|case
name|LIST
case|:
break|break;
case|case
name|RECORD
case|:
name|cursorFactory
operator|=
name|Meta
operator|.
name|CursorFactory
operator|.
name|LIST
expr_stmt|;
break|break;
default|default:
name|cursorFactory
operator|=
name|Meta
operator|.
name|CursorFactory
operator|.
name|map
argument_list|(
name|cursorFactory
operator|.
name|fieldNames
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|done
init|=
name|resultSet
operator|.
name|firstFrame
operator|.
name|done
decl_stmt|;
name|frame
operator|=
operator|new
name|Meta
operator|.
name|Frame
argument_list|(
literal|0
argument_list|,
name|done
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|updateCount
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|signature
operator|.
name|statementType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|signature
operator|.
name|statementType
operator|.
name|canUpdate
argument_list|()
condition|)
block|{
name|frame
operator|=
literal|null
expr_stmt|;
name|updateCount
operator|=
operator|(
operator|(
name|Number
operator|)
operator|(
operator|(
name|List
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//noinspection unchecked
name|list
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
operator|(
name|List
operator|)
name|list2
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
name|cursorFactory
operator|=
name|Meta
operator|.
name|CursorFactory
operator|.
name|LIST
expr_stmt|;
block|}
if|if
condition|(
name|cursorFactory
operator|!=
name|resultSet
operator|.
name|signature
operator|.
name|cursorFactory
condition|)
block|{
name|signature
operator|=
name|signature
operator|.
name|setCursorFactory
argument_list|(
name|cursorFactory
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ResultSetResponse
argument_list|(
name|resultSet
operator|.
name|connectionId
argument_list|,
name|resultSet
operator|.
name|statementId
argument_list|,
name|resultSet
operator|.
name|ownStatement
argument_list|,
name|signature
argument_list|,
name|frame
argument_list|,
name|updateCount
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list2
parameter_list|(
name|Meta
operator|.
name|MetaResultSet
name|resultSet
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|StatementHandle
name|h
init|=
operator|new
name|Meta
operator|.
name|StatementHandle
argument_list|(
name|resultSet
operator|.
name|connectionId
argument_list|,
name|resultSet
operator|.
name|statementId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|Object
argument_list|>
name|iterable
init|=
name|meta
operator|.
name|createIterable
argument_list|(
name|h
argument_list|,
literal|null
argument_list|,
name|resultSet
operator|.
name|signature
argument_list|,
name|parameterValues
argument_list|,
name|resultSet
operator|.
name|firstFrame
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|MetaImpl
operator|.
name|collect
argument_list|(
name|resultSet
operator|.
name|signature
operator|.
name|cursorFactory
argument_list|,
name|iterable
argument_list|,
name|list
argument_list|)
return|;
block|}
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|CatalogsRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|MetaResultSet
name|resultSet
init|=
name|meta
operator|.
name|getCatalogs
argument_list|(
name|ch
argument_list|)
decl_stmt|;
return|return
name|toResponse
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|SchemasRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|MetaResultSet
name|resultSet
init|=
name|meta
operator|.
name|getSchemas
argument_list|(
name|ch
argument_list|,
name|request
operator|.
name|catalog
argument_list|,
name|Meta
operator|.
name|Pat
operator|.
name|of
argument_list|(
name|request
operator|.
name|schemaPattern
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|toResponse
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TablesRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|MetaResultSet
name|resultSet
init|=
name|meta
operator|.
name|getTables
argument_list|(
name|ch
argument_list|,
name|request
operator|.
name|catalog
argument_list|,
name|Meta
operator|.
name|Pat
operator|.
name|of
argument_list|(
name|request
operator|.
name|schemaPattern
argument_list|)
argument_list|,
name|Meta
operator|.
name|Pat
operator|.
name|of
argument_list|(
name|request
operator|.
name|tableNamePattern
argument_list|)
argument_list|,
name|request
operator|.
name|typeList
argument_list|)
decl_stmt|;
return|return
name|toResponse
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TableTypesRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|MetaResultSet
name|resultSet
init|=
name|meta
operator|.
name|getTableTypes
argument_list|(
name|ch
argument_list|)
decl_stmt|;
return|return
name|toResponse
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TypeInfoRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|MetaResultSet
name|resultSet
init|=
name|meta
operator|.
name|getTypeInfo
argument_list|(
name|ch
argument_list|)
decl_stmt|;
return|return
name|toResponse
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|ColumnsRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|MetaResultSet
name|resultSet
init|=
name|meta
operator|.
name|getColumns
argument_list|(
name|ch
argument_list|,
name|request
operator|.
name|catalog
argument_list|,
name|Meta
operator|.
name|Pat
operator|.
name|of
argument_list|(
name|request
operator|.
name|schemaPattern
argument_list|)
argument_list|,
name|Meta
operator|.
name|Pat
operator|.
name|of
argument_list|(
name|request
operator|.
name|tableNamePattern
argument_list|)
argument_list|,
name|Meta
operator|.
name|Pat
operator|.
name|of
argument_list|(
name|request
operator|.
name|columnNamePattern
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|toResponse
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
specifier|public
name|PrepareResponse
name|apply
parameter_list|(
name|PrepareRequest
name|request
parameter_list|)
block|{
try|try
init|(
specifier|final
name|Context
name|ctx
init|=
name|prepareTimer
operator|.
name|start
argument_list|()
init|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|StatementHandle
name|h
init|=
name|meta
operator|.
name|prepare
argument_list|(
name|ch
argument_list|,
name|request
operator|.
name|sql
argument_list|,
name|request
operator|.
name|maxRowCount
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrepareResponse
argument_list|(
name|h
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
block|}
specifier|public
name|ExecuteResponse
name|apply
parameter_list|(
name|PrepareAndExecuteRequest
name|request
parameter_list|)
block|{
try|try
init|(
specifier|final
name|Context
name|ctx
init|=
name|prepareAndExecuteTimer
operator|.
name|start
argument_list|()
init|)
block|{
specifier|final
name|Meta
operator|.
name|StatementHandle
name|sh
init|=
operator|new
name|Meta
operator|.
name|StatementHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Meta
operator|.
name|ExecuteResult
name|executeResult
init|=
name|meta
operator|.
name|prepareAndExecute
argument_list|(
name|sh
argument_list|,
name|request
operator|.
name|sql
argument_list|,
name|request
operator|.
name|maxRowCount
argument_list|,
operator|new
name|Meta
operator|.
name|PrepareCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getMonitor
parameter_list|()
block|{
return|return
name|LocalService
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|assign
parameter_list|(
name|Meta
operator|.
name|Signature
name|signature
parameter_list|,
name|Meta
operator|.
name|Frame
name|firstFrame
parameter_list|,
name|long
name|updateCount
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ResultSetResponse
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meta
operator|.
name|MetaResultSet
name|metaResultSet
range|:
name|executeResult
operator|.
name|resultSets
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|toResponse
argument_list|(
name|metaResultSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExecuteResponse
argument_list|(
name|results
argument_list|,
literal|false
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchStatementException
name|e
parameter_list|)
block|{
comment|// The Statement doesn't exist anymore, bubble up this information
return|return
operator|new
name|ExecuteResponse
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
name|FetchResponse
name|apply
parameter_list|(
name|FetchRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|StatementHandle
name|h
init|=
operator|new
name|Meta
operator|.
name|StatementHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Meta
operator|.
name|Frame
name|frame
init|=
name|meta
operator|.
name|fetch
argument_list|(
name|h
argument_list|,
name|request
operator|.
name|offset
argument_list|,
name|request
operator|.
name|fetchMaxRowCount
argument_list|)
decl_stmt|;
return|return
operator|new
name|FetchResponse
argument_list|(
name|frame
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|NoSuchStatementException
name|e
parameter_list|)
block|{
comment|// The Statement doesn't exist anymore, bubble up this information
return|return
operator|new
name|FetchResponse
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MissingResultsException
name|e
parameter_list|)
block|{
return|return
operator|new
name|FetchResponse
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
block|}
specifier|public
name|ExecuteResponse
name|apply
parameter_list|(
name|ExecuteRequest
name|request
parameter_list|)
block|{
try|try
init|(
specifier|final
name|Context
name|ctx
init|=
name|executeTimer
operator|.
name|start
argument_list|()
init|)
block|{
try|try
block|{
specifier|final
name|Meta
operator|.
name|ExecuteResult
name|executeResult
init|=
name|meta
operator|.
name|execute
argument_list|(
name|request
operator|.
name|statementHandle
argument_list|,
name|request
operator|.
name|parameterValues
argument_list|,
name|request
operator|.
name|maxRowCount
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ResultSetResponse
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|executeResult
operator|.
name|resultSets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Meta
operator|.
name|MetaResultSet
name|metaResultSet
range|:
name|executeResult
operator|.
name|resultSets
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|toResponse
argument_list|(
name|metaResultSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExecuteResponse
argument_list|(
name|results
argument_list|,
literal|false
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchStatementException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ExecuteResponse
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
name|CreateStatementResponse
name|apply
parameter_list|(
name|CreateStatementRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|StatementHandle
name|h
init|=
name|meta
operator|.
name|createStatement
argument_list|(
name|ch
argument_list|)
decl_stmt|;
return|return
operator|new
name|CreateStatementResponse
argument_list|(
name|h
operator|.
name|connectionId
argument_list|,
name|h
operator|.
name|id
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
specifier|public
name|CloseStatementResponse
name|apply
parameter_list|(
name|CloseStatementRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|StatementHandle
name|h
init|=
operator|new
name|Meta
operator|.
name|StatementHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|meta
operator|.
name|closeStatement
argument_list|(
name|h
argument_list|)
expr_stmt|;
return|return
operator|new
name|CloseStatementResponse
argument_list|(
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
specifier|public
name|OpenConnectionResponse
name|apply
parameter_list|(
name|OpenConnectionRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
name|meta
operator|.
name|openConnection
argument_list|(
name|ch
argument_list|,
name|request
operator|.
name|info
argument_list|)
expr_stmt|;
return|return
operator|new
name|OpenConnectionResponse
argument_list|(
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
specifier|public
name|CloseConnectionResponse
name|apply
parameter_list|(
name|CloseConnectionRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
name|meta
operator|.
name|closeConnection
argument_list|(
name|ch
argument_list|)
expr_stmt|;
return|return
operator|new
name|CloseConnectionResponse
argument_list|(
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
specifier|public
name|ConnectionSyncResponse
name|apply
parameter_list|(
name|ConnectionSyncRequest
name|request
parameter_list|)
block|{
try|try
init|(
specifier|final
name|Context
name|ctx
init|=
name|connectionSyncTimer
operator|.
name|start
argument_list|()
init|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|ConnectionProperties
name|connProps
init|=
name|meta
operator|.
name|connectionSync
argument_list|(
name|ch
argument_list|,
name|request
operator|.
name|connProps
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConnectionSyncResponse
argument_list|(
name|connProps
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
block|}
specifier|public
name|DatabasePropertyResponse
name|apply
parameter_list|(
name|DatabasePropertyRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|ConnectionHandle
name|ch
init|=
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
decl_stmt|;
return|return
operator|new
name|DatabasePropertyResponse
argument_list|(
name|meta
operator|.
name|getDatabaseProperties
argument_list|(
name|ch
argument_list|)
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
specifier|public
name|SyncResultsResponse
name|apply
parameter_list|(
name|SyncResultsRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|StatementHandle
name|h
init|=
operator|new
name|Meta
operator|.
name|StatementHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SyncResultsResponse
name|response
decl_stmt|;
try|try
block|{
comment|// Set success on the cached statement
name|response
operator|=
operator|new
name|SyncResultsResponse
argument_list|(
name|meta
operator|.
name|syncResults
argument_list|(
name|h
argument_list|,
name|request
operator|.
name|state
argument_list|,
name|request
operator|.
name|offset
argument_list|)
argument_list|,
literal|false
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchStatementException
name|e
parameter_list|)
block|{
comment|// Tried to sync results on a statement which wasn't cached
name|response
operator|=
operator|new
name|SyncResultsResponse
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|public
name|CommitResponse
name|apply
parameter_list|(
name|CommitRequest
name|request
parameter_list|)
block|{
try|try
init|(
specifier|final
name|Context
name|ctx
init|=
name|commitTimer
operator|.
name|start
argument_list|()
init|)
block|{
name|meta
operator|.
name|commit
argument_list|(
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
argument_list|)
expr_stmt|;
comment|// If commit() errors, let the ErrorResponse be sent back via an uncaught Exception.
return|return
operator|new
name|CommitResponse
argument_list|()
return|;
block|}
block|}
specifier|public
name|RollbackResponse
name|apply
parameter_list|(
name|RollbackRequest
name|request
parameter_list|)
block|{
name|meta
operator|.
name|rollback
argument_list|(
operator|new
name|Meta
operator|.
name|ConnectionHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|)
argument_list|)
expr_stmt|;
comment|// If rollback() errors, let the ErrorResponse be sent back via an uncaught Exception.
return|return
operator|new
name|RollbackResponse
argument_list|()
return|;
block|}
specifier|public
name|ExecuteBatchResponse
name|apply
parameter_list|(
name|PrepareAndExecuteBatchRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|StatementHandle
name|h
init|=
operator|new
name|Meta
operator|.
name|StatementHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ExecuteBatchResult
name|result
init|=
name|meta
operator|.
name|prepareAndExecuteBatch
argument_list|(
name|h
argument_list|,
name|request
operator|.
name|sqlCommands
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecuteBatchResponse
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
name|result
operator|.
name|updateCounts
argument_list|,
literal|false
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchStatementException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ExecuteBatchResponse
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
block|}
specifier|public
name|ExecuteBatchResponse
name|apply
parameter_list|(
name|ExecuteBatchRequest
name|request
parameter_list|)
block|{
specifier|final
name|Meta
operator|.
name|StatementHandle
name|h
init|=
operator|new
name|Meta
operator|.
name|StatementHandle
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ExecuteBatchResult
name|result
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasProtoUpdateBatches
argument_list|()
operator|&&
name|meta
operator|instanceof
name|ProtobufMeta
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|ProtobufMeta
operator|)
name|meta
operator|)
operator|.
name|executeBatchProtobuf
argument_list|(
name|h
argument_list|,
name|request
operator|.
name|getProtoUpdateBatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|meta
operator|.
name|executeBatch
argument_list|(
name|h
argument_list|,
name|request
operator|.
name|parameterValues
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExecuteBatchResponse
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
name|result
operator|.
name|updateCounts
argument_list|,
literal|false
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchStatementException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ExecuteBatchResponse
argument_list|(
name|request
operator|.
name|connectionId
argument_list|,
name|request
operator|.
name|statementId
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|serverLevelRpcMetadata
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End LocalService.java
end_comment

end_unit

