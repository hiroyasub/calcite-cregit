begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Common
operator|.
name|WireMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|CatalogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|CloseConnectionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|CloseStatementRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|ColumnsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|CommitRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|ConnectionSyncRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|CreateStatementRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|DatabasePropertyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|ExecuteBatchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|ExecuteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|FetchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|OpenConnectionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|PrepareAndExecuteBatchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|PrepareAndExecuteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|PrepareRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|RollbackRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|SchemasRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|SyncResultsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|TableTypesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|TablesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Requests
operator|.
name|TypeInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|CloseConnectionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|CloseStatementResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|CommitResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|ConnectionSyncResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|CreateStatementResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|DatabasePropertyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|ErrorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|ExecuteBatchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|ExecuteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|FetchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|OpenConnectionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|PrepareResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|ResultSetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|RollbackResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|RpcMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Responses
operator|.
name|SyncResultsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|RpcMetadataResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|UnsynchronizedBuffer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link ProtobufTranslationImpl} that translates  * protobuf requests to POJO requests.  */
end_comment

begin_class
specifier|public
class|class
name|ProtobufTranslationImpl
implements|implements
name|ProtobufTranslation
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProtobufTranslationImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Extremely ugly mapping of PB class name into a means to convert it to the POJO
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RequestTranslator
argument_list|>
name|REQUEST_PARSERS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ResponseTranslator
argument_list|>
name|RESPONSE_PARSERS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ByteString
argument_list|>
name|MESSAGE_CLASSES
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RequestTranslator
argument_list|>
name|reqParsers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|CatalogsRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|CatalogsRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CatalogsRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|OpenConnectionRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|OpenConnectionRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|OpenConnectionRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|CloseConnectionRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|CloseConnectionRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CloseConnectionRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|CloseStatementRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|CloseStatementRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CloseStatementRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|ColumnsRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|ColumnsRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ColumnsRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|ConnectionSyncRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|ConnectionSyncRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ConnectionSyncRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|CreateStatementRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|CreateStatementRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CreateStatementRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|DatabasePropertyRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|DatabasePropertyRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|DatabasePropertyRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|FetchRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|FetchRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|FetchRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|PrepareAndExecuteRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|PrepareAndExecuteRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|PrepareAndExecuteRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|PrepareRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|PrepareRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|PrepareRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|SchemasRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|SchemasRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|SchemasRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|TablesRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|TablesRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|TablesRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|TableTypesRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|TableTypesRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|TableTypesRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|TypeInfoRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|TypeInfoRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|TypeInfoRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|ExecuteRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|ExecuteRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ExecuteRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|SyncResultsRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|SyncResultsRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|SyncResultsRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|CommitRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|CommitRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CommitRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|RollbackRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|RollbackRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|RollbackRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|PrepareAndExecuteBatchRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|PrepareAndExecuteBatchRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|PrepareAndExecuteBatchRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqParsers
operator|.
name|put
argument_list|(
name|ExecuteBatchRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|RequestTranslator
argument_list|(
name|ExecuteBatchRequest
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ExecuteBatchRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|REQUEST_PARSERS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|reqParsers
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResponseTranslator
argument_list|>
name|respParsers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|OpenConnectionResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|OpenConnectionResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|OpenConnectionResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|CloseConnectionResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|CloseConnectionResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CloseConnectionResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|CloseStatementResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|CloseStatementResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CloseStatementResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|ConnectionSyncResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|ConnectionSyncResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ConnectionSyncResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|CreateStatementResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|CreateStatementResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CreateStatementResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|DatabasePropertyResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|DatabasePropertyResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|DatabasePropertyResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|ExecuteResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|ExecuteResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ExecuteResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|FetchResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|FetchResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|FetchResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|PrepareResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|PrepareResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|PrepareResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|ResultSetResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|ResultSetResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ResultSetResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|ErrorResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|ErrorResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ErrorResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|SyncResultsResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|SyncResultsResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|SyncResultsResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|RpcMetadata
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|RpcMetadata
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|RpcMetadataResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|CommitResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|CommitResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|CommitResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|RollbackResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|RollbackResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|RollbackResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|respParsers
operator|.
name|put
argument_list|(
name|ExecuteBatchResponse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ResponseTranslator
argument_list|(
name|ExecuteBatchResponse
operator|.
name|parser
argument_list|()
argument_list|,
operator|new
name|Service
operator|.
name|ExecuteBatchResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RESPONSE_PARSERS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|respParsers
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ByteString
argument_list|>
name|messageClassNames
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|msgClz
range|:
name|getAllMessageClasses
argument_list|()
control|)
block|{
name|messageClassNames
operator|.
name|put
argument_list|(
name|msgClz
argument_list|,
name|wrapClassName
argument_list|(
name|msgClz
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MESSAGE_CLASSES
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|messageClassNames
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getAllMessageClasses
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|messageClasses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CatalogsRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CloseConnectionRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CloseStatementRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ColumnsRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CommitRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ConnectionSyncRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CreateStatementRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|DatabasePropertyRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ExecuteRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|FetchRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|OpenConnectionRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|PrepareAndExecuteRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|PrepareRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|RollbackRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|SchemasRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|SyncResultsRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|TableTypesRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|TablesRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|TypeInfoRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|PrepareAndExecuteBatchRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ExecuteBatchRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CloseConnectionResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CloseStatementResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CommitResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ConnectionSyncResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|CreateStatementResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|DatabasePropertyResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ErrorResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ExecuteResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|FetchResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|OpenConnectionResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|PrepareResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ResultSetResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|RollbackResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|RpcMetadata
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|SyncResultsResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageClasses
operator|.
name|add
argument_list|(
name|ExecuteBatchResponse
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|messageClasses
return|;
block|}
specifier|private
specifier|static
name|ByteString
name|wrapClassName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
return|return
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|clz
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|UnsynchronizedBuffer
argument_list|>
name|threadLocalBuffer
init|=
operator|new
name|ThreadLocal
argument_list|<
name|UnsynchronizedBuffer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|UnsynchronizedBuffer
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|UnsynchronizedBuffer
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Fetches the concrete message's Parser implementation.    *    * @param className The protocol buffer class name    * @return The Parser for the class    * @throws IllegalArgumentException If the argument is null or if a Parser for the given    *     class name is not found.    */
specifier|public
specifier|static
name|RequestTranslator
name|getParserForRequest
parameter_list|(
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|className
operator|||
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot fetch parser for Request with "
operator|+
operator|(
literal|null
operator|==
name|className
condition|?
literal|"null"
else|:
literal|"missing"
operator|)
operator|+
literal|" class name"
argument_list|)
throw|;
block|}
name|RequestTranslator
name|translator
init|=
name|REQUEST_PARSERS
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|translator
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find request parser for "
operator|+
name|className
argument_list|)
throw|;
block|}
return|return
name|translator
return|;
block|}
comment|/**    * Fetches the concrete message's Parser implementation.    *    * @param className The protocol buffer class name    * @return The Parser for the class    * @throws IllegalArgumentException If the argument is null or if a Parser for the given    *     class name is not found.    */
specifier|public
specifier|static
name|ResponseTranslator
name|getParserForResponse
parameter_list|(
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|className
operator|||
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot fetch parser for Response with "
operator|+
operator|(
literal|null
operator|==
name|className
condition|?
literal|"null"
else|:
literal|"missing"
operator|)
operator|+
literal|" class name"
argument_list|)
throw|;
block|}
name|ResponseTranslator
name|translator
init|=
name|RESPONSE_PARSERS
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|translator
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find response parser for "
operator|+
name|className
argument_list|)
throw|;
block|}
return|return
name|translator
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|serializeResponse
parameter_list|(
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Avoid BAOS for its synchronized write methods, we don't need that concurrency control
name|UnsynchronizedBuffer
name|out
init|=
name|threadLocalBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Message
name|responseMsg
init|=
name|response
operator|.
name|serialize
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Serializing response '{}'"
argument_list|,
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|responseMsg
argument_list|)
argument_list|)
expr_stmt|;
name|serializeMessage
argument_list|(
name|out
argument_list|,
name|responseMsg
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|serializeRequest
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Avoid BAOS for its synchronized write methods, we don't need that concurrency control
name|UnsynchronizedBuffer
name|out
init|=
name|threadLocalBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Message
name|requestMsg
init|=
name|request
operator|.
name|serialize
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Serializing request '{}'"
argument_list|,
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|requestMsg
argument_list|)
argument_list|)
expr_stmt|;
name|serializeMessage
argument_list|(
name|out
argument_list|,
name|requestMsg
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|serializeMessage
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Message
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Serialize the protobuf message
name|UnsynchronizedBuffer
name|buffer
init|=
name|threadLocalBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|ByteString
name|serializedMsg
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|writeTo
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// Make a bytestring from it
name|serializedMsg
operator|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|buffer
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// Wrap the serialized message in a WireMessage
name|WireMessage
name|wireMsg
init|=
name|WireMessage
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNameBytes
argument_list|(
name|getClassNameBytes
argument_list|(
name|msg
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setWrappedMessage
argument_list|(
name|serializedMsg
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Write the WireMessage to the provided OutputStream
name|wireMsg
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|ByteString
name|getClassNameBytes
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
name|ByteString
name|byteString
init|=
name|MESSAGE_CLASSES
operator|.
name|get
argument_list|(
name|clz
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|byteString
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing ByteString for "
operator|+
name|clz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|byteString
return|;
block|}
annotation|@
name|Override
specifier|public
name|Request
name|parseRequest
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteString
name|byteString
init|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|CodedInputStream
name|inputStream
init|=
name|byteString
operator|.
name|newCodedInput
argument_list|()
decl_stmt|;
comment|// Enable aliasing to avoid an extra copy to get at the serialized Request inside of the
comment|// WireMessage.
name|inputStream
operator|.
name|enableAliasing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WireMessage
name|wireMsg
init|=
name|WireMessage
operator|.
name|parseFrom
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|String
name|serializedMessageClassName
init|=
name|wireMsg
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|RequestTranslator
name|translator
init|=
name|getParserForRequest
argument_list|(
name|serializedMessageClassName
argument_list|)
decl_stmt|;
comment|// The ByteString should be logical offsets into the original byte array
return|return
name|translator
operator|.
name|transform
argument_list|(
name|wireMsg
operator|.
name|getWrappedMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to parse request message '{}'"
argument_list|,
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|wireMsg
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Response
name|parseResponse
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteString
name|byteString
init|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|CodedInputStream
name|inputStream
init|=
name|byteString
operator|.
name|newCodedInput
argument_list|()
decl_stmt|;
comment|// Enable aliasing to avoid an extra copy to get at the serialized Response inside of the
comment|// WireMessage.
name|inputStream
operator|.
name|enableAliasing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WireMessage
name|wireMsg
init|=
name|WireMessage
operator|.
name|parseFrom
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|String
name|serializedMessageClassName
init|=
name|wireMsg
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|ResponseTranslator
name|translator
init|=
name|getParserForResponse
argument_list|(
name|serializedMessageClassName
argument_list|)
decl_stmt|;
return|return
name|translator
operator|.
name|transform
argument_list|(
name|wireMsg
operator|.
name|getWrappedMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to parse response message '{}'"
argument_list|,
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|wireMsg
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ProtobufTranslationImpl.java
end_comment

end_unit

