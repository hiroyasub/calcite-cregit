begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonSubTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonTypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Command handler for getting various metadata. Should be implemented by each  * driver.  *  *<p>Also holds other abstract methods that are not related to metadata  * that each provider must implement. This is not ideal.</p>  */
end_comment

begin_interface
specifier|public
interface|interface
name|Meta
block|{
comment|/**    * Returns a map of static database properties.    *    *<p>The provider can omit properties whose value is the same as the    * default.    */
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|getDatabaseProperties
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getTables(String, String, String, String[])}. */
name|MetaResultSet
name|getTables
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|typeList
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getColumns(String, String, String, String)}. */
name|MetaResultSet
name|getColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
function_decl|;
name|MetaResultSet
name|getSchemas
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getCatalogs()}. */
name|MetaResultSet
name|getCatalogs
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getTableTypes()}. */
name|MetaResultSet
name|getTableTypes
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getProcedures(String, String, String)}. */
name|MetaResultSet
name|getProcedures
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|procedureNamePattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getProcedureColumns(String, String, String, String)}. */
name|MetaResultSet
name|getProcedureColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|procedureNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getColumnPrivileges(String, String, String, String)}. */
name|MetaResultSet
name|getColumnPrivileges
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getTablePrivileges(String, String, String)}. */
name|MetaResultSet
name|getTablePrivileges
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|)
function_decl|;
comment|/** Per    * {@link DatabaseMetaData#getBestRowIdentifier(String, String, String, int, boolean)}. */
name|MetaResultSet
name|getBestRowIdentifier
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|int
name|scope
parameter_list|,
name|boolean
name|nullable
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getVersionColumns(String, String, String)}. */
name|MetaResultSet
name|getVersionColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getPrimaryKeys(String, String, String)}. */
name|MetaResultSet
name|getPrimaryKeys
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getImportedKeys(String, String, String)}. */
name|MetaResultSet
name|getImportedKeys
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getExportedKeys(String, String, String)}. */
name|MetaResultSet
name|getExportedKeys
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
function_decl|;
comment|/** Per    * {@link DatabaseMetaData#getCrossReference(String, String, String, String, String, String)}. */
name|MetaResultSet
name|getCrossReference
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|parentCatalog
parameter_list|,
name|String
name|parentSchema
parameter_list|,
name|String
name|parentTable
parameter_list|,
name|String
name|foreignCatalog
parameter_list|,
name|String
name|foreignSchema
parameter_list|,
name|String
name|foreignTable
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getTypeInfo()}. */
name|MetaResultSet
name|getTypeInfo
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getIndexInfo(String, String, String, boolean, boolean)}. */
name|MetaResultSet
name|getIndexInfo
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|unique
parameter_list|,
name|boolean
name|approximate
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getUDTs(String, String, String, int[])}. */
name|MetaResultSet
name|getUDTs
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|,
name|int
index|[]
name|types
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getSuperTypes(String, String, String)}. */
name|MetaResultSet
name|getSuperTypes
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getSuperTables(String, String, String)}. */
name|MetaResultSet
name|getSuperTables
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getAttributes(String, String, String, String)}. */
name|MetaResultSet
name|getAttributes
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|,
name|Pat
name|attributeNamePattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getClientInfoProperties()}. */
name|MetaResultSet
name|getClientInfoProperties
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getFunctions(String, String, String)}. */
name|MetaResultSet
name|getFunctions
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|functionNamePattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getFunctionColumns(String, String, String, String)}. */
name|MetaResultSet
name|getFunctionColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|functionNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
function_decl|;
comment|/** Per {@link DatabaseMetaData#getPseudoColumns(String, String, String, String)}. */
name|MetaResultSet
name|getPseudoColumns
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
function_decl|;
comment|/** Creates an iterable for a result set.    *    *<p>The default implementation just returns {@code iterable}, which it    * requires to be not null; derived classes may instead choose to execute the    * relational expression in {@code signature}. */
name|Iterable
argument_list|<
name|Object
argument_list|>
name|createIterable
parameter_list|(
name|StatementHandle
name|stmt
parameter_list|,
name|QueryState
name|state
parameter_list|,
name|Signature
name|signature
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|,
name|Frame
name|firstFrame
parameter_list|)
function_decl|;
comment|/** Prepares a statement.    *    * @param ch Connection handle    * @param sql SQL query    * @param maxRowCount Negative for no limit (different meaning than JDBC)    * @return Signature of prepared statement    */
name|StatementHandle
name|prepare
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|sql
parameter_list|,
name|long
name|maxRowCount
parameter_list|)
function_decl|;
comment|/** Prepares and executes a statement.    *    * @param h Statement handle    * @param sql SQL query    * @param maxRowCount Negative for no limit (different meaning than JDBC)    * @param callback Callback to lock, clear and assign cursor    *    * @return Result containing statement ID, and if a query, a result set and    *     first frame of data    */
name|ExecuteResult
name|prepareAndExecute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|String
name|sql
parameter_list|,
name|long
name|maxRowCount
parameter_list|,
name|PrepareCallback
name|callback
parameter_list|)
throws|throws
name|NoSuchStatementException
function_decl|;
comment|/** Prepares a statement and then executes a number of SQL commands in one pass.    *    * @param h Statement handle    * @param sqlCommands SQL commands to run    * @return An array of update counts containing one element for each command in the batch.    */
name|ExecuteBatchResult
name|prepareAndExecuteBatch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|sqlCommands
parameter_list|)
throws|throws
name|NoSuchStatementException
function_decl|;
comment|/** Executes a collection of bound parameter values on a prepared statement.    *    * @param h Statement handle    * @param parameterValues A collection of list of typed values, one list per batch    * @return An array of update counts containing one element for each command in the batch.    */
name|ExecuteBatchResult
name|executeBatch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|TypedValue
argument_list|>
argument_list|>
name|parameterValues
parameter_list|)
throws|throws
name|NoSuchStatementException
function_decl|;
comment|/** Returns a frame of rows.    *    *<p>The frame describes whether there may be another frame. If there is not    * another frame, the current iteration is done when we have finished the    * rows in the this frame.    *    *<p>The default implementation always returns null.    *    * @param h Statement handle    * @param offset Zero-based offset of first row in the requested frame    * @param fetchMaxRowCount Maximum number of rows to return; negative means    * no limit    * @return Frame, or null if there are no more    */
name|Frame
name|fetch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|fetchMaxRowCount
parameter_list|)
throws|throws
name|NoSuchStatementException
throws|,
name|MissingResultsException
function_decl|;
comment|/** Executes a prepared statement.    *    * @param h Statement handle    * @param parameterValues A list of parameter values; may be empty, not null    * @param maxRowCount Maximum number of rows to return; negative means    * no limit    * @return Execute result    */
name|ExecuteResult
name|execute
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
parameter_list|,
name|long
name|maxRowCount
parameter_list|)
throws|throws
name|NoSuchStatementException
function_decl|;
comment|/** Called during the creation of a statement to allocate a new handle.    *    * @param ch Connection handle    */
name|StatementHandle
name|createStatement
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/** Closes a statement. */
name|void
name|closeStatement
parameter_list|(
name|StatementHandle
name|h
parameter_list|)
function_decl|;
comment|/**    * Opens (creates) a connection. The client allocates its own connection ID which the server is    * then made aware of through the {@link ConnectionHandle}. The Map {@code info} argument is    * analogous to the {@link Properties} typically passed to a "normal" JDBC Driver. Avatica    * specific properties should not be included -- only properties for the underlying driver.    *    * @param ch A ConnectionHandle encapsulates information about the connection to be opened    *    as provided by the client.    * @param info A Map corresponding to the Properties typically passed to a JDBC Driver.    */
name|void
name|openConnection
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
function_decl|;
comment|/** Closes a connection */
name|void
name|closeConnection
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/**    * Re-set the {@link ResultSet} on a Statement. Not a JDBC method.    * @return True if there are results to fetch after resetting to the given offset. False otherwise    */
name|boolean
name|syncResults
parameter_list|(
name|StatementHandle
name|sh
parameter_list|,
name|QueryState
name|state
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|NoSuchStatementException
function_decl|;
comment|/**    * Makes all changes since the last commit/rollback permanent. Analogy to    * {@link Connection#commit()}.    *    * @param ch A reference to the real JDBC Connection.    */
name|void
name|commit
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/**    * Undoes all changes since the last commit/rollback. Analogy to    * {@link Connection#rollback()};    *    * @param ch A reference to the real JDBC Connection.    */
name|void
name|rollback
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
function_decl|;
comment|/** Sync client and server view of connection properties.    *    *<p>Note: this interface is considered "experimental" and may undergo further changes as this    * functionality is extended to other aspects of state management for    * {@link java.sql.Connection}, {@link java.sql.Statement}, and {@link java.sql.ResultSet}.</p>    */
name|ConnectionProperties
name|connectionSync
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|ConnectionProperties
name|connProps
parameter_list|)
function_decl|;
comment|/** Factory to create instances of {@link Meta}. */
interface|interface
name|Factory
block|{
name|Meta
name|create
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
function_decl|;
block|}
comment|/** Wrapper to remind API calls that a parameter is a pattern (allows '%' and    * '_' wildcards, per the JDBC spec) rather than a string to be matched    * exactly. */
class|class
name|Pat
block|{
specifier|public
specifier|final
name|String
name|s
decl_stmt|;
specifier|private
name|Pat
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Pat["
operator|+
name|s
operator|+
literal|"]"
return|;
block|}
annotation|@
name|JsonCreator
specifier|public
specifier|static
name|Pat
name|of
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"s"
argument_list|)
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|Pat
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/** Database property.    *    *<p>Values exist for methods, such as    * {@link DatabaseMetaData#getSQLKeywords()}, which always return the same    * value at all times and across connections.    *    * @see #getDatabaseProperties(Meta.ConnectionHandle)    */
enum|enum
name|DatabaseProperty
block|{
comment|/** Database property containing the value of      * {@link DatabaseMetaData#getNumericFunctions()}. */
name|GET_NUMERIC_FUNCTIONS
argument_list|(
literal|""
argument_list|)
block|,
comment|/** Database property containing the value of      * {@link DatabaseMetaData#getStringFunctions()}. */
name|GET_STRING_FUNCTIONS
argument_list|(
literal|""
argument_list|)
block|,
comment|/** Database property containing the value of      * {@link DatabaseMetaData#getSystemFunctions()}. */
name|GET_SYSTEM_FUNCTIONS
argument_list|(
literal|""
argument_list|)
block|,
comment|/** Database property containing the value of      * {@link DatabaseMetaData#getTimeDateFunctions()}. */
name|GET_TIME_DATE_FUNCTIONS
argument_list|(
literal|""
argument_list|)
block|,
comment|/** Database property containing the value of      * {@link DatabaseMetaData#getSQLKeywords()}. */
name|GET_S_Q_L_KEYWORDS
argument_list|(
literal|""
argument_list|)
block|,
comment|/** Database property containing the value of      * {@link DatabaseMetaData#getDefaultTransactionIsolation()}. */
name|GET_DEFAULT_TRANSACTION_ISOLATION
argument_list|(
name|Connection
operator|.
name|TRANSACTION_NONE
argument_list|)
block|;
specifier|public
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
specifier|public
specifier|final
name|Object
name|defaultValue
decl_stmt|;
specifier|public
specifier|final
name|Method
name|method
decl_stmt|;
parameter_list|<
name|T
parameter_list|>
name|DatabaseProperty
parameter_list|(
name|T
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
specifier|final
name|String
name|methodName
init|=
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|method
operator|=
name|DatabaseMetaData
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|AvaticaUtils
operator|.
name|box
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|defaultValue
operator|==
literal|null
operator|||
name|defaultValue
operator|.
name|getClass
argument_list|()
operator|==
name|type
assert|;
block|}
comment|/** Returns a value of this property, using the default value if the map      * does not contain an explicit value. */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getProp
parameter_list|(
name|Meta
name|meta
parameter_list|,
name|ConnectionHandle
name|ch
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
name|getProp
argument_list|(
name|meta
operator|.
name|getDatabaseProperties
argument_list|(
name|ch
argument_list|)
argument_list|,
name|aClass
argument_list|)
return|;
block|}
comment|/** Returns a value of this property, using the default value if the map      * does not contain an explicit value. */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getProp
parameter_list|(
name|Map
argument_list|<
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|aClass
parameter_list|)
block|{
assert|assert
name|aClass
operator|==
name|type
assert|;
name|Object
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|aClass
operator|.
name|cast
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DatabaseProperty
name|fromProto
parameter_list|(
name|Common
operator|.
name|DatabaseProperty
name|proto
parameter_list|)
block|{
return|return
name|DatabaseProperty
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Common
operator|.
name|DatabaseProperty
name|toProto
parameter_list|()
block|{
return|return
name|Common
operator|.
name|DatabaseProperty
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/** Response from execute.    *    *<p>Typically a query will have a result set and rowCount = -1;    * a DML statement will have a rowCount and no result sets.    */
class|class
name|ExecuteResult
block|{
specifier|public
specifier|final
name|List
argument_list|<
name|MetaResultSet
argument_list|>
name|resultSets
decl_stmt|;
specifier|public
name|ExecuteResult
parameter_list|(
name|List
argument_list|<
name|MetaResultSet
argument_list|>
name|resultSets
parameter_list|)
block|{
name|this
operator|.
name|resultSets
operator|=
name|resultSets
expr_stmt|;
block|}
block|}
comment|/**    * Response from a collection of SQL commands or parameter values in a single batch.    */
class|class
name|ExecuteBatchResult
block|{
specifier|public
specifier|final
name|int
index|[]
name|updateCounts
decl_stmt|;
specifier|public
name|ExecuteBatchResult
parameter_list|(
name|int
index|[]
name|updateCounts
parameter_list|)
block|{
name|this
operator|.
name|updateCounts
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|updateCounts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Meta data from which a result set can be constructed.    *    *<p>If {@code updateCount} is not -1, the result is just a count. A result    * set cannot be constructed. */
class|class
name|MetaResultSet
block|{
specifier|public
specifier|final
name|String
name|connectionId
decl_stmt|;
specifier|public
specifier|final
name|int
name|statementId
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|ownStatement
decl_stmt|;
specifier|public
specifier|final
name|Frame
name|firstFrame
decl_stmt|;
specifier|public
specifier|final
name|Signature
name|signature
decl_stmt|;
specifier|public
specifier|final
name|long
name|updateCount
decl_stmt|;
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|protected
name|MetaResultSet
parameter_list|(
name|String
name|connectionId
parameter_list|,
name|int
name|statementId
parameter_list|,
name|boolean
name|ownStatement
parameter_list|,
name|Signature
name|signature
parameter_list|,
name|Frame
name|firstFrame
parameter_list|,
name|int
name|updateCount
parameter_list|)
block|{
name|this
argument_list|(
name|connectionId
argument_list|,
name|statementId
argument_list|,
name|ownStatement
argument_list|,
name|signature
argument_list|,
name|firstFrame
argument_list|,
operator|(
name|long
operator|)
name|updateCount
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MetaResultSet
parameter_list|(
name|String
name|connectionId
parameter_list|,
name|int
name|statementId
parameter_list|,
name|boolean
name|ownStatement
parameter_list|,
name|Signature
name|signature
parameter_list|,
name|Frame
name|firstFrame
parameter_list|,
name|long
name|updateCount
parameter_list|)
block|{
name|this
operator|.
name|signature
operator|=
name|signature
expr_stmt|;
name|this
operator|.
name|connectionId
operator|=
name|connectionId
expr_stmt|;
name|this
operator|.
name|statementId
operator|=
name|statementId
expr_stmt|;
name|this
operator|.
name|ownStatement
operator|=
name|ownStatement
expr_stmt|;
name|this
operator|.
name|firstFrame
operator|=
name|firstFrame
expr_stmt|;
comment|// may be null even if signature is not null
name|this
operator|.
name|updateCount
operator|=
name|updateCount
expr_stmt|;
block|}
specifier|public
specifier|static
name|MetaResultSet
name|create
parameter_list|(
name|String
name|connectionId
parameter_list|,
name|int
name|statementId
parameter_list|,
name|boolean
name|ownStatement
parameter_list|,
name|Signature
name|signature
parameter_list|,
name|Frame
name|firstFrame
parameter_list|)
block|{
return|return
operator|new
name|MetaResultSet
argument_list|(
name|connectionId
argument_list|,
name|statementId
argument_list|,
name|ownStatement
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|signature
argument_list|)
argument_list|,
name|firstFrame
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MetaResultSet
name|count
parameter_list|(
name|String
name|connectionId
parameter_list|,
name|int
name|statementId
parameter_list|,
name|long
name|updateCount
parameter_list|)
block|{
assert|assert
name|updateCount
operator|>=
literal|0
operator|:
literal|"Meta.count("
operator|+
name|connectionId
operator|+
literal|", "
operator|+
name|statementId
operator|+
literal|", "
operator|+
name|updateCount
operator|+
literal|")"
assert|;
return|return
operator|new
name|MetaResultSet
argument_list|(
name|connectionId
argument_list|,
name|statementId
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|updateCount
argument_list|)
return|;
block|}
block|}
comment|/** Information necessary to convert an {@link Iterable} into a    * {@link org.apache.calcite.avatica.util.Cursor}. */
specifier|final
class|class
name|CursorFactory
block|{
specifier|private
specifier|static
specifier|final
name|FieldDescriptor
name|CLASS_NAME_DESCRIPTOR
init|=
name|Common
operator|.
name|CursorFactory
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|CursorFactory
operator|.
name|CLASS_NAME_FIELD_NUMBER
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|Style
name|style
decl_stmt|;
specifier|public
specifier|final
name|Class
name|clazz
decl_stmt|;
annotation|@
name|JsonIgnore
specifier|public
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
name|CursorFactory
parameter_list|(
name|Style
name|style
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
assert|assert
operator|(
name|fieldNames
operator|!=
literal|null
operator|)
operator|==
operator|(
name|style
operator|==
name|Style
operator|.
name|RECORD_PROJECTION
operator|||
name|style
operator|==
name|Style
operator|.
name|MAP
operator|)
assert|;
assert|assert
operator|(
name|fields
operator|!=
literal|null
operator|)
operator|==
operator|(
name|style
operator|==
name|Style
operator|.
name|RECORD_PROJECTION
operator|)
assert|;
name|this
operator|.
name|style
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
annotation|@
name|JsonCreator
specifier|public
specifier|static
name|CursorFactory
name|create
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"style"
argument_list|)
name|Style
name|style
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"clazz"
argument_list|)
name|Class
name|clazz
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"fieldNames"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
switch|switch
condition|(
name|style
condition|)
block|{
case|case
name|OBJECT
case|:
return|return
name|OBJECT
return|;
case|case
name|ARRAY
case|:
return|return
name|ARRAY
return|;
case|case
name|LIST
case|:
return|return
name|LIST
return|;
case|case
name|RECORD
case|:
return|return
name|record
argument_list|(
name|clazz
argument_list|)
return|;
case|case
name|RECORD_PROJECTION
case|:
return|return
name|record
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|,
name|fieldNames
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|map
argument_list|(
name|fieldNames
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown style: "
operator|+
name|style
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|CursorFactory
name|OBJECT
init|=
operator|new
name|CursorFactory
argument_list|(
name|Style
operator|.
name|OBJECT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CursorFactory
name|ARRAY
init|=
operator|new
name|CursorFactory
argument_list|(
name|Style
operator|.
name|ARRAY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CursorFactory
name|LIST
init|=
operator|new
name|CursorFactory
argument_list|(
name|Style
operator|.
name|LIST
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|CursorFactory
name|record
parameter_list|(
name|Class
name|resultClazz
parameter_list|)
block|{
return|return
operator|new
name|CursorFactory
argument_list|(
name|Style
operator|.
name|RECORD
argument_list|,
name|resultClazz
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CursorFactory
name|record
parameter_list|(
name|Class
name|resultClass
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
try|try
block|{
name|fields
operator|.
name|add
argument_list|(
name|resultClass
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
operator|new
name|CursorFactory
argument_list|(
name|Style
operator|.
name|RECORD_PROJECTION
argument_list|,
name|resultClass
argument_list|,
name|fields
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CursorFactory
name|map
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
return|return
operator|new
name|CursorFactory
argument_list|(
name|Style
operator|.
name|MAP
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CursorFactory
name|deduce
parameter_list|(
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
parameter_list|,
name|Class
name|resultClazz
parameter_list|)
block|{
if|if
condition|(
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|OBJECT
return|;
block|}
if|if
condition|(
name|resultClazz
operator|==
literal|null
condition|)
block|{
return|return
name|ARRAY
return|;
block|}
if|if
condition|(
name|resultClazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|ARRAY
return|;
block|}
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|resultClazz
argument_list|)
condition|)
block|{
return|return
name|LIST
return|;
block|}
return|return
name|record
argument_list|(
name|resultClazz
argument_list|)
return|;
block|}
specifier|public
name|Common
operator|.
name|CursorFactory
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|CursorFactory
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|CursorFactory
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|clazz
condition|)
block|{
name|builder
operator|.
name|setClassName
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setStyle
argument_list|(
name|style
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|fieldNames
condition|)
block|{
name|builder
operator|.
name|addAllFieldNames
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|CursorFactory
name|fromProto
parameter_list|(
name|Common
operator|.
name|CursorFactory
name|proto
parameter_list|)
block|{
comment|// Reconstruct CursorFactory
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasField
argument_list|(
name|CLASS_NAME_DESCRIPTOR
argument_list|)
condition|)
block|{
try|try
block|{
name|clz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|proto
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|CursorFactory
operator|.
name|create
argument_list|(
name|Style
operator|.
name|fromProto
argument_list|(
name|proto
operator|.
name|getStyle
argument_list|()
argument_list|)
argument_list|,
name|clz
argument_list|,
name|proto
operator|.
name|getFieldNamesList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|clazz
argument_list|,
name|fieldNames
argument_list|,
name|fields
argument_list|,
name|style
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|CursorFactory
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|clazz
argument_list|,
operator|(
operator|(
name|CursorFactory
operator|)
name|o
operator|)
operator|.
name|clazz
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldNames
argument_list|,
operator|(
operator|(
name|CursorFactory
operator|)
name|o
operator|)
operator|.
name|fieldNames
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fields
argument_list|,
operator|(
operator|(
name|CursorFactory
operator|)
name|o
operator|)
operator|.
name|fields
argument_list|)
operator|&&
name|style
operator|==
operator|(
operator|(
name|CursorFactory
operator|)
name|o
operator|)
operator|.
name|style
return|;
block|}
block|}
comment|/** How logical fields are represented in the objects returned by the    * iterator. */
enum|enum
name|Style
block|{
name|OBJECT
block|,
name|RECORD
block|,
name|RECORD_PROJECTION
block|,
name|ARRAY
block|,
name|LIST
block|,
name|MAP
block|;
specifier|public
name|Common
operator|.
name|CursorFactory
operator|.
name|Style
name|toProto
parameter_list|()
block|{
return|return
name|Common
operator|.
name|CursorFactory
operator|.
name|Style
operator|.
name|valueOf
argument_list|(
name|name
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Style
name|fromProto
parameter_list|(
name|Common
operator|.
name|CursorFactory
operator|.
name|Style
name|proto
parameter_list|)
block|{
return|return
name|Style
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Result of preparing a statement. */
specifier|public
class|class
name|Signature
block|{
specifier|private
specifier|static
specifier|final
name|FieldDescriptor
name|SQL_DESCRIPTOR
init|=
name|Common
operator|.
name|Signature
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|Signature
operator|.
name|SQL_FIELD_NUMBER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FieldDescriptor
name|CURSOR_FACTORY_DESCRIPTOR
init|=
name|Common
operator|.
name|Signature
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|Signature
operator|.
name|CURSOR_FACTORY_FIELD_NUMBER
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
decl_stmt|;
specifier|public
specifier|final
name|String
name|sql
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|AvaticaParameter
argument_list|>
name|parameters
decl_stmt|;
specifier|public
specifier|final
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|internalParameters
decl_stmt|;
specifier|public
specifier|final
name|CursorFactory
name|cursorFactory
decl_stmt|;
specifier|public
specifier|final
name|Meta
operator|.
name|StatementType
name|statementType
decl_stmt|;
comment|/** Creates a Signature. */
specifier|public
name|Signature
parameter_list|(
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
parameter_list|,
name|String
name|sql
parameter_list|,
name|List
argument_list|<
name|AvaticaParameter
argument_list|>
name|parameters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|internalParameters
parameter_list|,
name|CursorFactory
name|cursorFactory
parameter_list|,
name|Meta
operator|.
name|StatementType
name|statementType
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|internalParameters
operator|=
name|internalParameters
expr_stmt|;
name|this
operator|.
name|cursorFactory
operator|=
name|cursorFactory
expr_stmt|;
name|this
operator|.
name|statementType
operator|=
name|statementType
expr_stmt|;
block|}
comment|/** Used by Jackson to create a Signature by de-serializing JSON. */
annotation|@
name|JsonCreator
specifier|public
specifier|static
name|Signature
name|create
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"columns"
argument_list|)
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"sql"
argument_list|)
name|String
name|sql
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"parameters"
argument_list|)
name|List
argument_list|<
name|AvaticaParameter
argument_list|>
name|parameters
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"cursorFactory"
argument_list|)
name|CursorFactory
name|cursorFactory
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"statementType"
argument_list|)
name|Meta
operator|.
name|StatementType
name|statementType
parameter_list|)
block|{
return|return
operator|new
name|Signature
argument_list|(
name|columns
argument_list|,
name|sql
argument_list|,
name|parameters
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|cursorFactory
argument_list|,
name|statementType
argument_list|)
return|;
block|}
comment|/** Returns a copy of this Signature, substituting given CursorFactory. */
specifier|public
name|Signature
name|setCursorFactory
parameter_list|(
name|CursorFactory
name|cursorFactory
parameter_list|)
block|{
return|return
operator|new
name|Signature
argument_list|(
name|columns
argument_list|,
name|sql
argument_list|,
name|parameters
argument_list|,
name|internalParameters
argument_list|,
name|cursorFactory
argument_list|,
name|statementType
argument_list|)
return|;
block|}
comment|/** Creates a copy of this Signature with null lists and maps converted to      * empty. */
specifier|public
name|Signature
name|sanitize
parameter_list|()
block|{
if|if
condition|(
name|columns
operator|==
literal|null
operator|||
name|parameters
operator|==
literal|null
operator|||
name|internalParameters
operator|==
literal|null
operator|||
name|statementType
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Signature
argument_list|(
name|sanitize
argument_list|(
name|columns
argument_list|)
argument_list|,
name|sql
argument_list|,
name|sanitize
argument_list|(
name|parameters
argument_list|)
argument_list|,
name|sanitize
argument_list|(
name|internalParameters
argument_list|)
argument_list|,
name|cursorFactory
argument_list|,
name|Meta
operator|.
name|StatementType
operator|.
name|SELECT
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
specifier|private
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|sanitize
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|E
operator|>
name|emptyList
argument_list|()
else|:
name|list
return|;
block|}
specifier|private
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sanitize
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|map
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|K
operator|,
name|V
operator|>
name|emptyMap
argument_list|()
operator|:
name|map
return|;
block|}
specifier|public
name|Common
operator|.
name|Signature
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|Signature
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|Signature
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sql
condition|)
block|{
name|builder
operator|.
name|setSql
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|cursorFactory
condition|)
block|{
name|builder
operator|.
name|setCursorFactory
argument_list|(
name|cursorFactory
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|columns
condition|)
block|{
for|for
control|(
name|ColumnMetaData
name|column
range|:
name|columns
control|)
block|{
name|builder
operator|.
name|addColumns
argument_list|(
name|column
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|parameters
condition|)
block|{
for|for
control|(
name|AvaticaParameter
name|parameter
range|:
name|parameters
control|)
block|{
name|builder
operator|.
name|addParameters
argument_list|(
name|parameter
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Signature
name|fromProto
parameter_list|(
name|Common
operator|.
name|Signature
name|protoSignature
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|metadata
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|protoSignature
operator|.
name|getColumnsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Common
operator|.
name|ColumnMetaData
name|protoMetadata
range|:
name|protoSignature
operator|.
name|getColumnsList
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|ColumnMetaData
operator|.
name|fromProto
argument_list|(
name|protoMetadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|AvaticaParameter
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|protoSignature
operator|.
name|getParametersCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Common
operator|.
name|AvaticaParameter
name|protoParam
range|:
name|protoSignature
operator|.
name|getParametersList
argument_list|()
control|)
block|{
name|parameters
operator|.
name|add
argument_list|(
name|AvaticaParameter
operator|.
name|fromProto
argument_list|(
name|protoParam
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|sql
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|protoSignature
operator|.
name|hasField
argument_list|(
name|SQL_DESCRIPTOR
argument_list|)
condition|)
block|{
name|sql
operator|=
name|protoSignature
operator|.
name|getSql
argument_list|()
expr_stmt|;
block|}
name|CursorFactory
name|cursorFactory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|protoSignature
operator|.
name|hasField
argument_list|(
name|CURSOR_FACTORY_DESCRIPTOR
argument_list|)
condition|)
block|{
name|cursorFactory
operator|=
name|CursorFactory
operator|.
name|fromProto
argument_list|(
name|protoSignature
operator|.
name|getCursorFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Meta
operator|.
name|StatementType
name|statementType
init|=
name|Meta
operator|.
name|StatementType
operator|.
name|fromProto
argument_list|(
name|protoSignature
operator|.
name|getStatementType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Signature
operator|.
name|create
argument_list|(
name|metadata
argument_list|,
name|sql
argument_list|,
name|parameters
argument_list|,
name|cursorFactory
argument_list|,
name|statementType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|columns
argument_list|,
name|cursorFactory
argument_list|,
name|parameters
argument_list|,
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|Signature
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|columns
argument_list|,
operator|(
operator|(
name|Signature
operator|)
name|o
operator|)
operator|.
name|columns
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|cursorFactory
argument_list|,
operator|(
operator|(
name|Signature
operator|)
name|o
operator|)
operator|.
name|cursorFactory
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|parameters
argument_list|,
operator|(
operator|(
name|Signature
operator|)
name|o
operator|)
operator|.
name|parameters
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|sql
argument_list|,
operator|(
operator|(
name|Signature
operator|)
name|o
operator|)
operator|.
name|sql
argument_list|)
return|;
block|}
block|}
comment|/** A collection of rows. */
class|class
name|Frame
block|{
specifier|private
specifier|static
specifier|final
name|FieldDescriptor
name|HAS_ARRAY_VALUE_DESCRIPTOR
init|=
name|Common
operator|.
name|ColumnValue
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|ColumnValue
operator|.
name|HAS_ARRAY_VALUE_FIELD_NUMBER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FieldDescriptor
name|SCALAR_VALUE_DESCRIPTOR
init|=
name|Common
operator|.
name|ColumnValue
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|ColumnValue
operator|.
name|SCALAR_VALUE_FIELD_NUMBER
argument_list|)
decl_stmt|;
comment|/** Frame that has zero rows and is the last frame. */
specifier|public
specifier|static
specifier|final
name|Frame
name|EMPTY
init|=
operator|new
name|Frame
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Frame that has zero rows but may have another frame. */
specifier|public
specifier|static
specifier|final
name|Frame
name|MORE
init|=
operator|new
name|Frame
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Zero-based offset of first row. */
specifier|public
specifier|final
name|long
name|offset
decl_stmt|;
comment|/** Whether this is definitely the last frame of rows.      * If true, there are no more rows.      * If false, there may or may not be more rows. */
specifier|public
specifier|final
name|boolean
name|done
decl_stmt|;
comment|/** The rows. */
specifier|public
specifier|final
name|Iterable
argument_list|<
name|Object
argument_list|>
name|rows
decl_stmt|;
specifier|public
name|Frame
parameter_list|(
name|long
name|offset
parameter_list|,
name|boolean
name|done
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
block|}
annotation|@
name|JsonCreator
specifier|public
specifier|static
name|Frame
name|create
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"offset"
argument_list|)
name|int
name|offset
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"done"
argument_list|)
name|boolean
name|done
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"rows"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|rows
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|==
literal|0
operator|&&
name|done
operator|&&
name|rows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
return|return
operator|new
name|Frame
argument_list|(
name|offset
argument_list|,
name|done
argument_list|,
name|rows
argument_list|)
return|;
block|}
specifier|public
name|Common
operator|.
name|Frame
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|Frame
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|Frame
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setDone
argument_list|(
name|done
argument_list|)
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|row
range|:
name|this
operator|.
name|rows
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|row
condition|)
block|{
comment|// Does this need to be persisted for some reason?
continue|continue;
block|}
if|if
condition|(
name|row
operator|instanceof
name|Object
index|[]
condition|)
block|{
specifier|final
name|Common
operator|.
name|Row
operator|.
name|Builder
name|rowBuilder
init|=
name|Common
operator|.
name|Row
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
operator|(
name|Object
index|[]
operator|)
name|row
control|)
block|{
specifier|final
name|Common
operator|.
name|ColumnValue
operator|.
name|Builder
name|columnBuilder
init|=
name|Common
operator|.
name|ColumnValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|instanceof
name|List
condition|)
block|{
name|columnBuilder
operator|.
name|setHasArrayValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|element
decl_stmt|;
comment|// Add each element in the list/array to the column's value
for|for
control|(
name|Object
name|listItem
range|:
name|list
control|)
block|{
name|columnBuilder
operator|.
name|addArrayValue
argument_list|(
name|serializeScalar
argument_list|(
name|listItem
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The default value, but still explicit.
name|columnBuilder
operator|.
name|setHasArrayValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Only one value for this column, a scalar.
name|columnBuilder
operator|.
name|setScalarValue
argument_list|(
name|serializeScalar
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add value to row
name|rowBuilder
operator|.
name|addValue
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Collect all rows
name|builder
operator|.
name|addRows
argument_list|(
name|rowBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Can a "row" be a primitive? A struct? Only an Array?
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only arrays are supported"
argument_list|)
throw|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|static
name|Common
operator|.
name|TypedValue
name|serializeScalar
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
specifier|final
name|Common
operator|.
name|TypedValue
operator|.
name|Builder
name|valueBuilder
init|=
name|Common
operator|.
name|TypedValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Numbers
if|if
condition|(
name|element
operator|instanceof
name|Byte
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|BYTE
argument_list|)
operator|.
name|setNumberValue
argument_list|(
operator|(
operator|(
name|Byte
operator|)
name|element
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|element
operator|instanceof
name|Short
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|SHORT
argument_list|)
operator|.
name|setNumberValue
argument_list|(
operator|(
operator|(
name|Short
operator|)
name|element
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|element
operator|instanceof
name|Integer
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|INTEGER
argument_list|)
operator|.
name|setNumberValue
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|element
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|element
operator|instanceof
name|Long
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|LONG
argument_list|)
operator|.
name|setNumberValue
argument_list|(
operator|(
name|Long
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|element
operator|instanceof
name|Double
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|DOUBLE
argument_list|)
operator|.
name|setDoubleValue
argument_list|(
operator|(
name|Double
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|element
operator|instanceof
name|Float
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|FLOAT
argument_list|)
operator|.
name|setNumberValue
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|element
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|element
operator|instanceof
name|BigDecimal
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|NUMBER
argument_list|)
operator|.
name|setDoubleValue
argument_list|(
operator|(
operator|(
name|BigDecimal
operator|)
name|element
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Strings
block|}
if|else if
condition|(
name|element
operator|instanceof
name|String
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|STRING
argument_list|)
operator|.
name|setStringValue
argument_list|(
operator|(
name|String
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|element
operator|instanceof
name|Character
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|CHARACTER
argument_list|)
operator|.
name|setStringValue
argument_list|(
name|element
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Bytes
block|}
if|else if
condition|(
name|element
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|BYTE_STRING
argument_list|)
operator|.
name|setBytesValues
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|element
argument_list|)
argument_list|)
expr_stmt|;
comment|// Boolean
block|}
if|else if
condition|(
name|element
operator|instanceof
name|Boolean
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|setBoolValue
argument_list|(
operator|(
name|boolean
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|null
operator|==
name|element
condition|)
block|{
name|valueBuilder
operator|.
name|setType
argument_list|(
name|Common
operator|.
name|Rep
operator|.
name|NULL
argument_list|)
expr_stmt|;
comment|// Unhandled
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled type in Frame: "
operator|+
name|element
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|valueBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Frame
name|fromProto
parameter_list|(
name|Common
operator|.
name|Frame
name|proto
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|parsedRows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|proto
operator|.
name|getRowsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Common
operator|.
name|Row
name|protoRow
range|:
name|proto
operator|.
name|getRowsList
argument_list|()
control|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|protoRow
operator|.
name|getValueCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Common
operator|.
name|ColumnValue
name|protoColumn
range|:
name|protoRow
operator|.
name|getValueList
argument_list|()
control|)
block|{
specifier|final
name|Object
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|isNewStyleColumn
argument_list|(
name|protoColumn
argument_list|)
condition|)
block|{
comment|// Backward compatibility
name|value
operator|=
name|parseOldStyleColumn
argument_list|(
name|protoColumn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Current style parsing (separate scalar and array values)
name|value
operator|=
name|parseColumn
argument_list|(
name|protoColumn
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|parsedRows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Frame
argument_list|(
name|proto
operator|.
name|getOffset
argument_list|()
argument_list|,
name|proto
operator|.
name|getDone
argument_list|()
argument_list|,
name|parsedRows
argument_list|)
return|;
block|}
comment|/**      * Determines whether this message contains the new attributes in the      * message. We can't directly test for the negative because our      * {@code hasField} trick does not work on repeated fields.      *      * @param column The protobuf column object      * @return True if the message is the new style, false otherwise.      */
specifier|static
name|boolean
name|isNewStyleColumn
parameter_list|(
name|Common
operator|.
name|ColumnValue
name|column
parameter_list|)
block|{
return|return
name|column
operator|.
name|hasField
argument_list|(
name|HAS_ARRAY_VALUE_DESCRIPTOR
argument_list|)
operator|||
name|column
operator|.
name|hasField
argument_list|(
name|SCALAR_VALUE_DESCRIPTOR
argument_list|)
return|;
block|}
comment|/**      * For Calcite 1.5, we made the mistake of using array length to determine when the value for a      * column is a scalar or an array. This method performs the old parsing for backwards      * compatibility.      *      * @param column The protobuf ColumnValue object      * @return The parsed value for this column      */
specifier|static
name|Object
name|parseOldStyleColumn
parameter_list|(
name|Common
operator|.
name|ColumnValue
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|.
name|getValueCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|array
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|column
operator|.
name|getValueCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Common
operator|.
name|TypedValue
name|columnValue
range|:
name|column
operator|.
name|getValueList
argument_list|()
control|)
block|{
name|array
operator|.
name|add
argument_list|(
name|getScalarValue
argument_list|(
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
else|else
block|{
return|return
name|getScalarValue
argument_list|(
name|column
operator|.
name|getValue
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Parses the value for a ColumnValue using the separated array and scalar attributes.      *      * @param column The protobuf ColumnValue object      * @return The parse value for this column      */
specifier|static
name|Object
name|parseColumn
parameter_list|(
name|Common
operator|.
name|ColumnValue
name|column
parameter_list|)
block|{
comment|// Verify that we have one or the other (scalar or array)
name|validateColumnValue
argument_list|(
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|column
operator|.
name|hasField
argument_list|(
name|SCALAR_VALUE_DESCRIPTOR
argument_list|)
condition|)
block|{
comment|// Array
name|List
argument_list|<
name|Object
argument_list|>
name|array
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|column
operator|.
name|getArrayValueCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Common
operator|.
name|TypedValue
name|arrayValue
range|:
name|column
operator|.
name|getArrayValueList
argument_list|()
control|)
block|{
name|array
operator|.
name|add
argument_list|(
name|getScalarValue
argument_list|(
name|arrayValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
else|else
block|{
comment|// Scalar
return|return
name|getScalarValue
argument_list|(
name|column
operator|.
name|getScalarValue
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Verifies that a ColumnValue has only a scalar or array value, not both and not neither.      *      * @param column The protobuf ColumnValue object      * @throws IllegalArgumentException When the above condition is not met      */
specifier|static
name|void
name|validateColumnValue
parameter_list|(
name|Common
operator|.
name|ColumnValue
name|column
parameter_list|)
block|{
specifier|final
name|boolean
name|hasScalar
init|=
name|column
operator|.
name|hasField
argument_list|(
name|SCALAR_VALUE_DESCRIPTOR
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasArrayValue
init|=
name|column
operator|.
name|getHasArrayValue
argument_list|()
decl_stmt|;
comment|// These should always be different
if|if
condition|(
name|hasScalar
operator|==
name|hasArrayValue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A column must have a scalar or array value, not "
operator|+
operator|(
name|hasScalar
condition|?
literal|"both"
else|:
literal|"neither"
operator|)
argument_list|)
throw|;
block|}
block|}
specifier|static
name|Object
name|getScalarValue
parameter_list|(
name|Common
operator|.
name|TypedValue
name|protoElement
parameter_list|)
block|{
comment|// TODO Should these be primitives or Objects?
switch|switch
condition|(
name|protoElement
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|protoElement
operator|.
name|getNumberValue
argument_list|()
argument_list|)
operator|.
name|byteValue
argument_list|()
return|;
case|case
name|SHORT
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|protoElement
operator|.
name|getNumberValue
argument_list|()
argument_list|)
operator|.
name|shortValue
argument_list|()
return|;
case|case
name|INTEGER
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|protoElement
operator|.
name|getNumberValue
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
name|protoElement
operator|.
name|getNumberValue
argument_list|()
return|;
case|case
name|FLOAT
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|protoElement
operator|.
name|getNumberValue
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
name|protoElement
operator|.
name|getDoubleValue
argument_list|()
return|;
case|case
name|NUMBER
case|:
comment|// TODO more cases here to expand on? BigInteger?
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|protoElement
operator|.
name|getDoubleValue
argument_list|()
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|protoElement
operator|.
name|getStringValue
argument_list|()
return|;
case|case
name|CHARACTER
case|:
comment|// A single character in the string
return|return
name|protoElement
operator|.
name|getStringValue
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
case|case
name|BYTE_STRING
case|:
return|return
name|protoElement
operator|.
name|getBytesValues
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
case|case
name|BOOLEAN
case|:
return|return
name|protoElement
operator|.
name|getBoolValue
argument_list|()
return|;
case|case
name|NULL
case|:
return|return
literal|null
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled type: "
operator|+
name|protoElement
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|done
argument_list|,
name|offset
argument_list|,
name|rows
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|Frame
operator|&&
name|equalRows
argument_list|(
name|rows
argument_list|,
operator|(
operator|(
name|Frame
operator|)
name|o
operator|)
operator|.
name|rows
argument_list|)
operator|&&
name|offset
operator|==
operator|(
operator|(
name|Frame
operator|)
name|o
operator|)
operator|.
name|offset
operator|&&
name|done
operator|==
operator|(
operator|(
name|Frame
operator|)
name|o
operator|)
operator|.
name|done
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equalRows
parameter_list|(
name|Iterable
argument_list|<
name|Object
argument_list|>
name|rows
parameter_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
name|otherRows
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|rows
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|otherRows
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter1
init|=
name|rows
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter2
init|=
name|otherRows
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter1
operator|.
name|hasNext
argument_list|()
operator|&&
name|iter2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|obj1
init|=
name|iter1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|obj2
init|=
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Can't just call equals on an array
if|if
condition|(
name|obj1
operator|instanceof
name|Object
index|[]
condition|)
block|{
if|if
condition|(
name|obj2
operator|instanceof
name|Object
index|[]
condition|)
block|{
comment|// Compare array and array
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|obj1
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|obj2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|obj2
operator|instanceof
name|List
condition|)
block|{
comment|// compare array and list
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|obj2List
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|obj2
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|obj1
argument_list|,
name|obj2List
operator|.
name|toArray
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// compare array and something that isn't an array will always fail
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|obj1
operator|instanceof
name|List
condition|)
block|{
if|if
condition|(
name|obj2
operator|instanceof
name|Object
index|[]
condition|)
block|{
comment|// Compare list and array
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|obj1List
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|obj1
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|obj1List
operator|.
name|toArray
argument_list|()
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|obj2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|obj1
operator|.
name|equals
argument_list|(
name|obj2
argument_list|)
condition|)
block|{
comment|// compare list and something else, let it fall to equals()
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|obj1
operator|.
name|equals
argument_list|(
name|obj2
argument_list|)
condition|)
block|{
comment|// Not an array, leave it to equals()
return|return
literal|false
return|;
block|}
block|}
comment|// More elements in one of the iterables
if|if
condition|(
name|iter1
operator|.
name|hasNext
argument_list|()
operator|||
name|iter2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/** Connection handle. */
class|class
name|ConnectionHandle
block|{
specifier|public
specifier|final
name|String
name|id
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|JsonCreator
specifier|public
name|ConnectionHandle
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"id"
argument_list|)
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
block|}
comment|/** Statement handle. */
class|class
name|StatementHandle
block|{
specifier|private
specifier|static
specifier|final
name|FieldDescriptor
name|SIGNATURE_DESCRIPTOR
init|=
name|Common
operator|.
name|StatementHandle
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|StatementHandle
operator|.
name|SIGNATURE_FIELD_NUMBER
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|String
name|connectionId
decl_stmt|;
specifier|public
specifier|final
name|int
name|id
decl_stmt|;
comment|// not final because LocalService#apply(PrepareRequest)
comment|/** Only present for PreparedStatement handles, null otherwise. */
specifier|public
name|Signature
name|signature
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|connectionId
operator|+
literal|"::"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|JsonCreator
specifier|public
name|StatementHandle
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"connectionId"
argument_list|)
name|String
name|connectionId
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"id"
argument_list|)
name|int
name|id
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"signature"
argument_list|)
name|Signature
name|signature
parameter_list|)
block|{
name|this
operator|.
name|connectionId
operator|=
name|connectionId
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|signature
operator|=
name|signature
expr_stmt|;
block|}
specifier|public
name|Common
operator|.
name|StatementHandle
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|StatementHandle
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|StatementHandle
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
operator|.
name|setId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|signature
condition|)
block|{
name|builder
operator|.
name|setSignature
argument_list|(
name|signature
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|StatementHandle
name|fromProto
parameter_list|(
name|Common
operator|.
name|StatementHandle
name|protoHandle
parameter_list|)
block|{
comment|// Signature is optional in the update path for executes.
name|Signature
name|signature
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|protoHandle
operator|.
name|hasField
argument_list|(
name|SIGNATURE_DESCRIPTOR
argument_list|)
condition|)
block|{
name|signature
operator|=
name|Signature
operator|.
name|fromProto
argument_list|(
name|protoHandle
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StatementHandle
argument_list|(
name|protoHandle
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|protoHandle
operator|.
name|getId
argument_list|()
argument_list|,
name|signature
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|connectionId
argument_list|,
name|id
argument_list|,
name|signature
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|StatementHandle
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|connectionId
argument_list|,
operator|(
operator|(
name|StatementHandle
operator|)
name|o
operator|)
operator|.
name|connectionId
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|signature
argument_list|,
operator|(
operator|(
name|StatementHandle
operator|)
name|o
operator|)
operator|.
name|signature
argument_list|)
operator|&&
name|id
operator|==
operator|(
operator|(
name|StatementHandle
operator|)
name|o
operator|)
operator|.
name|id
return|;
block|}
block|}
comment|/** A pojo containing various client-settable {@link java.sql.Connection} properties.    *    *<p>{@code java.lang} types are used here so that {@code null} can be used to indicate    * a value has no been set.</p>    *    *<p>Note: this interface is considered "experimental" and may undergo further changes as this    * functionality is extended to other aspects of state management for    * {@link java.sql.Connection}, {@link java.sql.Statement}, and {@link java.sql.ResultSet}.</p>    */
annotation|@
name|JsonTypeInfo
argument_list|(
name|use
operator|=
name|JsonTypeInfo
operator|.
name|Id
operator|.
name|NAME
argument_list|,
name|property
operator|=
literal|"connProps"
argument_list|,
name|defaultImpl
operator|=
name|ConnectionPropertiesImpl
operator|.
name|class
argument_list|)
annotation|@
name|JsonSubTypes
argument_list|(
block|{
annotation|@
name|JsonSubTypes
operator|.
name|Type
argument_list|(
name|value
operator|=
name|ConnectionPropertiesImpl
operator|.
name|class
argument_list|,
name|name
operator|=
literal|"connPropsImpl"
argument_list|)
block|}
argument_list|)
interface|interface
name|ConnectionProperties
block|{
comment|/** Overwrite fields in {@code this} with any non-null fields in {@code that}      *      * @return {@code this}      */
name|ConnectionProperties
name|merge
parameter_list|(
name|ConnectionProperties
name|that
parameter_list|)
function_decl|;
comment|/** @return {@code true} when no properies have been set, {@code false} otherwise. */
annotation|@
name|JsonIgnore
name|boolean
name|isEmpty
parameter_list|()
function_decl|;
comment|/** Set {@code autoCommit} status.      *      * @return {@code this}      */
name|ConnectionProperties
name|setAutoCommit
parameter_list|(
name|boolean
name|val
parameter_list|)
function_decl|;
name|Boolean
name|isAutoCommit
parameter_list|()
function_decl|;
comment|/** Set {@code readOnly} status.      *      * @return {@code this}      */
name|ConnectionProperties
name|setReadOnly
parameter_list|(
name|boolean
name|val
parameter_list|)
function_decl|;
name|Boolean
name|isReadOnly
parameter_list|()
function_decl|;
comment|/** Set {@code transactionIsolation} status.      *      * @return {@code this}      */
name|ConnectionProperties
name|setTransactionIsolation
parameter_list|(
name|int
name|val
parameter_list|)
function_decl|;
name|Integer
name|getTransactionIsolation
parameter_list|()
function_decl|;
comment|/** Set {@code catalog}.      *      * @return {@code this}      */
name|ConnectionProperties
name|setCatalog
parameter_list|(
name|String
name|val
parameter_list|)
function_decl|;
name|String
name|getCatalog
parameter_list|()
function_decl|;
comment|/** Set {@code schema}.      *      * @return {@code this}      */
name|ConnectionProperties
name|setSchema
parameter_list|(
name|String
name|val
parameter_list|)
function_decl|;
name|String
name|getSchema
parameter_list|()
function_decl|;
name|Common
operator|.
name|ConnectionProperties
name|toProto
parameter_list|()
function_decl|;
block|}
comment|/** API to put a result set into a statement, being careful to enforce    * thread-safety and not to overwrite existing open result sets. */
interface|interface
name|PrepareCallback
block|{
name|Object
name|getMonitor
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
throws|throws
name|SQLException
function_decl|;
name|void
name|assign
parameter_list|(
name|Signature
name|signature
parameter_list|,
name|Frame
name|firstFrame
parameter_list|,
name|long
name|updateCount
parameter_list|)
throws|throws
name|SQLException
function_decl|;
name|void
name|execute
parameter_list|()
throws|throws
name|SQLException
function_decl|;
block|}
comment|/** Type of statement. */
enum|enum
name|StatementType
block|{
name|SELECT
block|,
name|INSERT
block|,
name|UPDATE
block|,
name|DELETE
block|,
name|UPSERT
block|,
name|MERGE
block|,
name|OTHER_DML
block|,
name|IS_DML
block|,
name|CREATE
block|,
name|DROP
block|,
name|ALTER
block|,
name|OTHER_DDL
block|,
name|CALL
block|;
specifier|public
name|boolean
name|canUpdate
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|INSERT
case|:
return|return
literal|true
return|;
case|case
name|IS_DML
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|Common
operator|.
name|StatementType
name|toProto
parameter_list|()
block|{
return|return
name|Common
operator|.
name|StatementType
operator|.
name|valueOf
argument_list|(
name|name
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|StatementType
name|fromProto
parameter_list|(
name|Common
operator|.
name|StatementType
name|proto
parameter_list|)
block|{
return|return
name|StatementType
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_interface

begin_comment
comment|// End Meta.java
end_comment

end_unit

