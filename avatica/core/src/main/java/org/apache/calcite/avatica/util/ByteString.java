begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Collection of bytes.  *  *<p>ByteString is to bytes what {@link String} is to chars: It is immutable,  * implements equality ({@link #hashCode} and {@link #equals}),  * comparison ({@link #compareTo}) and  * {@link Serializable serialization} correctly.</p>  */
end_comment

begin_class
specifier|public
class|class
name|ByteString
implements|implements
name|Comparable
argument_list|<
name|ByteString
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
comment|/** An empty byte string. */
specifier|public
specifier|static
specifier|final
name|ByteString
name|EMPTY
init|=
operator|new
name|ByteString
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DIGITS
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|}
decl_stmt|;
comment|/**    * Creates a ByteString.    *    * @param bytes Bytes    */
specifier|public
name|ByteString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|this
argument_list|(
name|bytes
operator|.
name|clone
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// private constructor that does not copy
specifier|private
name|ByteString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|boolean
name|dummy
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|instanceof
name|ByteString
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|bytes
argument_list|,
operator|(
operator|(
name|ByteString
operator|)
name|obj
operator|)
operator|.
name|bytes
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ByteString
name|that
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|v1
init|=
name|bytes
decl_stmt|;
specifier|final
name|byte
index|[]
name|v2
init|=
name|that
operator|.
name|bytes
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|v1
operator|.
name|length
argument_list|,
name|v2
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c1
init|=
name|v1
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|c2
init|=
name|v2
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
return|return
name|c1
operator|-
name|c2
return|;
block|}
block|}
return|return
name|v1
operator|.
name|length
operator|-
name|v2
operator|.
name|length
return|;
block|}
comment|/**    * Returns this byte string in hexadecimal format.    *    * @return Hexadecimal string    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|16
argument_list|)
return|;
block|}
comment|/**    * Returns this byte string in a given base.    *    * @return String in given base    */
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|base
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|bytes
argument_list|,
name|base
argument_list|)
return|;
block|}
comment|/**    * Returns the given byte array in hexadecimal format.    *    *<p>For example,<tt>toString(new byte[] {0xDE, 0xAD})</tt>    * returns {@code "DEAD"}.</p>    *    * @param bytes Array of bytes    * @param base Base (2 or 16)    * @return String    */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|base
parameter_list|)
block|{
name|char
index|[]
name|chars
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|base
condition|)
block|{
case|case
literal|2
case|:
name|chars
operator|=
operator|new
name|char
index|[
name|bytes
operator|.
name|length
operator|*
literal|8
index|]
expr_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|bytes
control|)
block|{
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|>>
literal|7
index|]
expr_stmt|;
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
name|b
operator|&
literal|0x40
operator|)
operator|>>
literal|6
index|]
expr_stmt|;
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
name|b
operator|&
literal|0x20
operator|)
operator|>>
literal|5
index|]
expr_stmt|;
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
name|b
operator|&
literal|0x10
operator|)
operator|>>
literal|4
index|]
expr_stmt|;
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
name|b
operator|&
literal|0x08
operator|)
operator|>>
literal|3
index|]
expr_stmt|;
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
name|b
operator|&
literal|0x04
operator|)
operator|>>
literal|2
index|]
expr_stmt|;
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
name|b
operator|&
literal|0x02
operator|)
operator|>>
literal|1
index|]
expr_stmt|;
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
name|b
operator|&
literal|0x01
index|]
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
name|chars
operator|=
operator|new
name|char
index|[
name|bytes
operator|.
name|length
operator|*
literal|2
index|]
expr_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|bytes
control|)
block|{
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
operator|(
name|b
operator|&
literal|0xF0
operator|)
operator|>>
literal|4
index|]
expr_stmt|;
name|chars
index|[
name|j
operator|++
index|]
operator|=
name|DIGITS
index|[
name|b
operator|&
literal|0x0F
index|]
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad base "
operator|+
name|base
argument_list|)
throw|;
block|}
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|j
argument_list|)
return|;
block|}
comment|/**    * Returns this byte string in Base64 format.    *    * @return Base64 string    */
specifier|public
name|String
name|toBase64String
parameter_list|()
block|{
return|return
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * Creates a byte string from a hexadecimal or binary string.    *    *<p>For example,<tt>of("DEAD", 16)</tt>    * returns the same as {@code ByteString(new byte[] {0xDE, 0xAD})}.    *    * @param string Array of bytes    * @param base Base (2 or 16)    * @return String    */
specifier|public
specifier|static
name|ByteString
name|of
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|base
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
name|parse
argument_list|(
name|string
argument_list|,
name|base
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteString
argument_list|(
name|bytes
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Parses a hexadecimal or binary string to a byte array.    *    * @param string Hexadecimal or binary string    * @param base Base (2 or 16)    * @return Byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|parse
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|base
parameter_list|)
block|{
name|char
index|[]
name|chars
init|=
name|string
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
name|byte
name|b
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|base
condition|)
block|{
case|case
literal|2
case|:
name|bytes
operator|=
operator|new
name|byte
index|[
name|chars
operator|.
name|length
operator|/
literal|8
index|]
expr_stmt|;
for|for
control|(
name|char
name|c
range|:
name|chars
control|)
block|{
name|b
operator|<<=
literal|1
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'1'
condition|)
block|{
name|b
operator||=
literal|0x1
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|%
literal|8
operator|==
literal|7
condition|)
block|{
name|bytes
index|[
name|j
operator|/
literal|8
index|]
operator|=
name|b
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
block|}
operator|++
name|j
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
if|if
condition|(
name|chars
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"hex string has odd length"
argument_list|)
throw|;
block|}
name|bytes
operator|=
operator|new
name|byte
index|[
name|chars
operator|.
name|length
operator|/
literal|2
index|]
expr_stmt|;
for|for
control|(
name|char
name|c
range|:
name|chars
control|)
block|{
name|b
operator|<<=
literal|4
expr_stmt|;
name|byte
name|i
init|=
name|decodeHex
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|b
operator||=
name|i
operator|&
literal|0x0F
expr_stmt|;
if|if
condition|(
name|j
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|bytes
index|[
name|j
operator|/
literal|2
index|]
operator|=
name|b
expr_stmt|;
name|b
operator|=
literal|0
expr_stmt|;
block|}
operator|++
name|j
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad base "
operator|+
name|base
argument_list|)
throw|;
block|}
return|return
name|bytes
return|;
block|}
specifier|private
specifier|static
name|byte
name|decodeHex
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
return|return
operator|(
name|byte
operator|)
operator|(
name|c
operator|-
literal|'0'
operator|)
return|;
block|}
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
return|return
operator|(
name|byte
operator|)
operator|(
name|c
operator|-
literal|'a'
operator|+
literal|10
operator|)
return|;
block|}
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
return|return
operator|(
name|byte
operator|)
operator|(
name|c
operator|-
literal|'A'
operator|+
literal|10
operator|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid hex character: "
operator|+
name|c
argument_list|)
throw|;
block|}
comment|/**    * Creates a byte string from a Base64 string.    *    * @param string Base64 string    * @return Byte string    */
specifier|public
specifier|static
name|ByteString
name|ofBase64
parameter_list|(
name|String
name|string
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
name|parseBase64
argument_list|(
name|string
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteString
argument_list|(
name|bytes
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Parses a Base64 to a byte array.    *    * @param string Base64 string    * @return Byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|parseBase64
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
return|return
name|Base64
operator|.
name|decode
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad base64 string"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"CloneDoesntCallSuperClone"
block|,
literal|"CloneDoesntDeclareCloneNotSupportedException"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**    * Returns the number of bytes in this byte string.    *    * @return Length of this byte string    */
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|bytes
operator|.
name|length
return|;
block|}
comment|/**    * Returns the byte at a given position in the byte string.    *    * @param i Index    * @throws  IndexOutOfBoundsException    *          if the<tt>index</tt> argument is negative or not less than    *<tt>length()</tt>    * @return Byte at given position    */
specifier|public
name|byte
name|byteAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|bytes
index|[
name|i
index|]
return|;
block|}
comment|/**    * Returns a ByteString that consists of a given range.    *    * @param start Start of range    * @param end Position after end of range    * @return Substring    */
specifier|public
name|ByteString
name|substring
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|this
operator|.
name|bytes
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteString
argument_list|(
name|bytes
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Returns a ByteString that starts at a given position.    *    * @param start Start of range    * @return Substring    */
specifier|public
name|ByteString
name|substring
parameter_list|(
name|int
name|start
parameter_list|)
block|{
return|return
name|substring
argument_list|(
name|start
argument_list|,
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a copy of the byte array.    */
annotation|@
name|JsonValue
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|bytes
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**    * Returns a ByteString consisting of the concatenation of this and another    * string.    *    * @param other Byte string to concatenate    * @return Combined byte string    */
specifier|public
name|ByteString
name|concat
parameter_list|(
name|ByteString
name|other
parameter_list|)
block|{
name|int
name|otherLen
init|=
name|other
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherLen
operator|==
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
name|int
name|len
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|buf
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|bytes
argument_list|,
name|len
operator|+
name|otherLen
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|other
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|len
argument_list|,
name|other
operator|.
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteString
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Returns the position at which {@code seek} first occurs in this byte    * string, or -1 if it does not occur. */
specifier|public
name|int
name|indexOf
parameter_list|(
name|ByteString
name|seek
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|seek
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/** Returns the position at which {@code seek} first occurs in this byte    * string, starting at the specified index, or -1 if it does not occur. */
specifier|public
name|int
name|indexOf
parameter_list|(
name|ByteString
name|seek
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|iLoop
label|:
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|bytes
operator|.
name|length
operator|-
name|seek
operator|.
name|bytes
operator|.
name|length
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|==
name|seek
operator|.
name|bytes
operator|.
name|length
condition|)
block|{
return|return
name|i
return|;
block|}
if|if
condition|(
name|bytes
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|seek
operator|.
name|bytes
index|[
name|j
index|]
condition|)
block|{
continue|continue
name|iLoop
continue|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

begin_comment
comment|// End ByteString.java
end_comment

end_unit

