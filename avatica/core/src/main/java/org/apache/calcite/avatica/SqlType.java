begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|NClob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|RowId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Extends the information in {@link java.sql.Types}.  *  *<p>The information in the following conversions tables  * (from the JDBC 4.1 specification) is held in members of this class.  *  *<p>Table B-1: JDBC Types Mapped to Java Types  *  *<pre>  * JDBC Type     Java Type  * ============= =========================  * CHAR          String  * VARCHAR       String  * LONGVARCHAR   String  * NUMERIC       java.math.BigDecimal  * DECIMAL       java.math.BigDecimal  * BIT           boolean  * BOOLEAN       boolean  * TINYINT       byte  * SMALLINT      short  * INTEGER       int  * BIGINT        long  * REAL          float  * FLOAT         double  * DOUBLE        double  * BINARY        byte[]  * VARBINARY     byte[]  * LONGVARBINARY byte[]  * DATE          java.sql.Date  * TIME          java.sql.Time  * TIMESTAMP     java.sql.Timestamp  * CLOB          java.sql.Clob  * BLOB          java.sql.Blob  * ARRAY         java.sql.Array  * DISTINCT      mapping of underlying type  * STRUCT        java.sql.Struct  * REF           java.sql.Ref  * DATALINK      java.net.URL  * JAVA_OBJECT   underlying Java class  * ROWID         java.sql.RowId  * NCHAR         String  * NVARCHAR      String  * LONGNVARCHAR  String  * NCLOB         java.sql.NClob  * SQLXML        java.sql.SQLXML  *</pre>  *  *<p>Table B-2: Standard Mapping from Java Types to JDBC Types  *  *<pre>  * Java Type            JDBC Type  * ==================== ==============================================  * String               CHAR, VARCHAR, LONGVARCHAR, NCHAR, NVARCHAR or  *                      LONGNVARCHAR  * java.math.BigDecimal NUMERIC  * boolean              BIT or BOOLEAN  * byte                 TINYINT  * short                SMALLINT  * int                  INTEGER  * long                 BIGINT  * float                REAL  * double               DOUBLE  * byte[]               BINARY, VARBINARY, or LONGVARBINARY  * java.sql.Date        DATE  * java.sql.Time        TIME  * java.sql.Timestamp   TIMESTAMP  * java.sql.Clob        CLOB  * java.sql.Blob        BLOB  * java.sql.Array       ARRAY  * java.sql.Struct      STRUCT  * java.sql.Ref         REF  * java.net.URL         DATALINK  * Java class           JAVA_OBJECT  * java.sql.RowId       ROWID  * java.sql.NClob       NCLOB  * java.sql.SQLXML      SQLXML  *</pre>  *  *<p>TABLE B-3: Mapping from JDBC Types to Java Object Types  *  *<pre>  * JDBC Type     Java Object Type  * ============= ======================  * CHAR          String  * VARCHAR       String  * LONGVARCHAR   String  * NUMERIC       java.math.BigDecimal  * DECIMAL       java.math.BigDecimal  * BIT           Boolean  * BOOLEAN       Boolean  * TINYINT       Integer  * SMALLINT      Integer  * INTEGER       Integer  * BIGINT        Long  * REAL          Float  * FLOAT         Double  * DOUBLE        Double  * BINARY        byte[]  * VARBINARY     byte[]  * LONGVARBINARY byte[]  * DATE          java.sql.Date  * TIME          java.sql.Time  * TIMESTAMP     java.sql.Timestamp  * DISTINCT      Object type of underlying type  * CLOB          java.sql.Clob  * BLOB          java.sql.Blob  * ARRAY         java.sql.Array  * STRUCT        java.sql.Struct or java.sql.SQLData  * REF           java.sql.Ref  * DATALINK      java.net.URL  * JAVA_OBJECT   underlying Java class  * ROWID         java.sql.RowId  * NCHAR         String  * NVARCHAR      String  * LONGNVARCHAR  String  * NCLOB         java.sql.NClob  * SQLXML        java.sql.SQLXML  *</pre>  *  *<p>TABLE B-4: Mapping from Java Object Types to JDBC Types  *  *<pre>  * Java Object Type     JDBC Type  * ==================== ===========================================  * String               CHAR, VARCHAR, LONGVARCHAR, NCHAR, NVARCHAR  *                      or LONGNVARCHAR  * java.math.BigDecimal NUMERIC  * Boolean              BIT or BOOLEAN  * Byte                 TINYINT  * Short                SMALLINT  * Integer              INTEGER  * Long                 BIGINT  * Float                REAL  * Double               DOUBLE  * byte[]               BINARY, VARBINARY, or LONGVARBINARY  * java.math.BigInteger BIGINT  * java.sql.Date        DATE  * java.sql.Time        TIME  * java.sql.Timestamp   TIMESTAMP  * java.sql.Clob        CLOB  * java.sql.Blob        BLOB  * java.sql.Array       ARRAY  * java.sql.Struct      STRUCT  * java.sql.Ref         REF  * java.net.URL         DATALINK  * Java class           JAVA_OBJECT  * java.sql.RowId       ROWID  * java.sql.NClob       NCLOB  * java.sql.SQLXML      SQLXML  * java.util.Calendar   TIMESTAMP  * java.util.Date       TIMESTAMP  *</pre>  *  *<p><a name="B5">TABLE B-5</a>: Conversions performed by {@code setObject} and  * {@code setNull} between Java object types and target JDBC types  *  *<!--  * CHECKSTYLE: OFF  * -->  *<pre>  *                      T S I B R F D D N B B C V L B V L D T T A B C S R D J R N N L N S  *                      I M N I E L O E U I O H A O I A O A I I R L L T E A A O C V O C Q  *                      N A T G A O U C M T O A R N N R N T M M R O O R F T V W H A N L L  *                      Y L E I L A B I E   L R C G A B G E E E A B B U   A A I A R G O X  *                      I L G N   T L M R   E   H V R I V E   S Y     C   L _ D R C N B M  *                      N I E T     E A I   A   A A Y N A     T       T   I O     H V   L  *                      T N R         L C   N   R R   A R     A           N B     A A  *                        T                       C   R B     M           K J     R R  *                                                H   Y I     P                     C  * Java type  * ==================== = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  * String               x x x x x x x x x x x x x x x x x x x x . . . . . . . . x x x . .  * java.math.BigDecimal x x x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * Boolean              x x x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * Byte                 x x x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * Short                x x x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * Integer              x x x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * Long                 x x x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * Float                x x x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * Double               x x x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * byte[]               . . . . . . . . . . . . . . x x x . . . . . . . . . . . . . . . .  * java.math.BigInteger . . . x . . . . . . . x x x . . . . . . . . . . . . . . . . . . .  * java.sql.Date        . . . . . . . . . . . x x x . . . x . x . . . . . . . . . . . . .  * java.sql.Time        . . . . . . . . . . . x x x . . . . x x . . . . . . . . . . . . .  * java.sql.Timestamp   . . . . . . . . . . . x x x . . . x x x . . . . . . . . . . . . .  * java.sql.Array       . . . . . . . . . . . . . . . . . . . . x . . . . . . . . . . . .  * java.sql.Blob        . . . . . . . . . . . . . . . . . . . . . x . . . . . . . . . . .  * java.sql.Clob        . . . . . . . . . . . . . . . . . . . . . . x . . . . . . . . . .  * java.sql.Struct      . . . . . . . . . . . . . . . . . . . . . . . x . . . . . . . . .  * java.sql.Ref         . . . . . . . . . . . . . . . . . . . . . . . . x . . . . . . . .  * java.net.URL         . . . . . . . . . . . . . . . . . . . . . . . . . x . . . . . . .  * Java class           . . . . . . . . . . . . . . . . . . . . . . . . . . x . . . . . .  * java.sql.Rowid       . . . . . . . . . . . . . . . . . . . . . . . . . . . x . . . . .  * java.sql.NClob       . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . x .  * java.sql.SQLXML      . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . x  * java.util.Calendar   . . . . . . . . . . . x x x . . . x x x . . . . . . . . . . . . .  * java.util.Date       . . . . . . . . . . . x x x . . . x x x . . . . . . . . . . . . .  *</pre>  *<!--  * CHECKSTYLE: ON  * -->  *  *<p><a name="B6">TABLE B-6</a>: Use of {@code ResultSet} getter methods to  * retrieve JDBC data types  *  *<!--  * CHECKSTYLE: OFF  * -->  *<pre>  *                      T S I B R F D D N B B C V L B V L D T T C B A R D S J R N N L N S  *                      I M N I E L O E U I O H A O I A O A I I L L R E A T A O C V O C Q  *                      N A T G A O U C M T O A R N N R N T M M O O R F T R V W H A N L L  *                      Y L E I L A B I E   L R C G A B G E E E B B A   A U A I A R G O X  *                      I L G N   T L M R   E   H V R I V E   S     Y   L C _ D R C N B M  *                      N I E T     E A I   A   A A Y N A     T         I T O     H V   L  *                      T N R         L C   N   R R   A R     A         N   B     A A  *                        T                       C   R B     M         K   J     R R  *                                                H   Y I     P                     C  * Java type  * ==================== = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  * getByte              X x x x x x x x x x x x x . . . . . . . . . . . . . . x . . . . .  * getShort             x X x x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * getInt               x x X x x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * getLong              x x x X x x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * getFloat             x x x x X x x x x x x x x . . . . . . . . . . . . . . . . . . . .  * getDouble            x x x x x X X x x x x x x . . . . . . . . . . . . . . . . . . . .  * getBigDecimal        x x x x x x x X X x x x x . . . . . . . . . . . . . . . . . . . .  * getBoolean           x x x x x x x x x X x x x . . . . . . . . . . . . . . . . . . . .  * getString            x x x x x x x x x x x X X x x x x x x x . . . . x . . . x x x . .  * getNString           x x x x x x x x x x x x x x x x x x x x . . . . x . . . X X x . .  * getBytes             . . . . . . . . . . . . . . X X x . . . . . . . . . . . . . . . .  * getDate              . . . . . . . . . . . x x x . . . X . x . . . . . . . . . . . . .  * getTime              . . . . . . . . . . . x x x . . . . X x . . . . . . . . . . . . .  * getTimestamp         . . . . . . . . . . . x x x . . . x x X . . . . . . . . . . . x .  * getAsciiStream       . . . . . . . . . . . x x X x x x . . . x . . . . . . . . . . . x  * getBinaryStream      . . . . . . . . . . . . . . x x X . . . . x . . . . . . . . . x x  * getCharacterStream   . . . . . . . . . . . x x X x x x . . . x . . . . . . . x x x x x  * getNCharacterStream  . . . . . . . . . . . x x x x x x . . . x . . . . . . . x x X x x  * getClob              . . . . . . . . . . . . . . . . . . . . X . . . . . . . . . . x .  * getNClob             . . . . . . . . . . . . . . . . . . . . x . . . . . . . . . . X .  * getBlob              . . . . . . . . . . . . . . . . . . . . . X . . . . . . . . . . .  * getArray             . . . . . . . . . . . . . . . . . . . . . . X . . . . . . . . . .  * getRef               . . . . . . . . . . . . . . . . . . . . . . . X . . . . . . . . .  * getURL               . . . . . . . . . . . . . . . . . . . . . . . . X . . . . . . . .  * getObject            x x x x x x x x x x x x x x x x x x x x x x x x x X X x x x x x x  * getRowId             . . . . . . . . . . . . . . . . . . . . . . . . . . . X . . . . .  * getSQLXML            . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . X  *</pre>  *<!--  * CHECKSTYLE: ON  * -->  */
end_comment

begin_enum
specifier|public
enum|enum
name|SqlType
block|{
name|BIT
argument_list|(
name|Types
operator|.
name|BIT
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
block|,
name|BOOLEAN
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
block|,
name|TINYINT
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
name|byte
operator|.
name|class
argument_list|)
block|,
name|SMALLINT
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
name|short
operator|.
name|class
argument_list|)
block|,
name|INTEGER
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|int
operator|.
name|class
argument_list|)
block|,
name|BIGINT
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|long
operator|.
name|class
argument_list|)
block|,
name|NUMERIC
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|)
block|,
name|DECIMAL
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|)
block|,
name|FLOAT
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
name|double
operator|.
name|class
argument_list|)
block|,
name|REAL
argument_list|(
name|Types
operator|.
name|REAL
argument_list|,
name|float
operator|.
name|class
argument_list|)
block|,
name|DOUBLE
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
name|double
operator|.
name|class
argument_list|)
block|,
name|DATE
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
block|,
name|TIME
argument_list|(
name|Types
operator|.
name|TIME
argument_list|,
name|Time
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
block|,
name|TIMESTAMP
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|,
name|Timestamp
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
block|,
name|INTERVAL_YEAR_MONTH
argument_list|(
name|Types
operator|.
name|OTHER
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
block|,
name|INTERVAL_DAY_TIME
argument_list|(
name|Types
operator|.
name|OTHER
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
block|,
name|CHAR
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|VARCHAR
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|LONGVARCHAR
argument_list|(
name|Types
operator|.
name|LONGVARCHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|BINARY
argument_list|(
name|Types
operator|.
name|BINARY
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|ByteString
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|VARBINARY
argument_list|(
name|Types
operator|.
name|VARBINARY
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|ByteString
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|LONGVARBINARY
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|ByteString
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|NULL
argument_list|(
name|Types
operator|.
name|NULL
argument_list|,
name|Void
operator|.
name|class
argument_list|)
block|,
name|ANY
argument_list|(
name|Types
operator|.
name|JAVA_OBJECT
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|,
name|SYMBOL
argument_list|(
name|Types
operator|.
name|OTHER
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|,
name|MULTISET
argument_list|(
name|Types
operator|.
name|ARRAY
argument_list|,
name|List
operator|.
name|class
argument_list|)
block|,
name|ARRAY
argument_list|(
name|Types
operator|.
name|ARRAY
argument_list|,
name|Array
operator|.
name|class
argument_list|)
block|,
name|BLOB
argument_list|(
name|Types
operator|.
name|BLOB
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
block|,
name|CLOB
argument_list|(
name|Types
operator|.
name|CLOB
argument_list|,
name|Clob
operator|.
name|class
argument_list|)
block|,
name|SQLXML
argument_list|(
name|Types
operator|.
name|SQLXML
argument_list|,
name|java
operator|.
name|sql
operator|.
name|SQLXML
operator|.
name|class
argument_list|)
block|,
name|MAP
argument_list|(
name|Types
operator|.
name|OTHER
argument_list|,
name|Map
operator|.
name|class
argument_list|)
block|,
name|DISTINCT
argument_list|(
name|Types
operator|.
name|DISTINCT
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|,
name|STRUCT
argument_list|(
name|Types
operator|.
name|STRUCT
argument_list|,
name|Struct
operator|.
name|class
argument_list|)
block|,
name|REF
argument_list|(
name|Types
operator|.
name|REF
argument_list|,
name|Ref
operator|.
name|class
argument_list|)
block|,
name|DATALINK
argument_list|(
name|Types
operator|.
name|DATALINK
argument_list|,
name|URL
operator|.
name|class
argument_list|)
block|,
name|JAVA_OBJECT
argument_list|(
name|Types
operator|.
name|JAVA_OBJECT
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|,
name|ROWID
argument_list|(
name|Types
operator|.
name|ROWID
argument_list|,
name|RowId
operator|.
name|class
argument_list|)
block|,
name|NCHAR
argument_list|(
name|Types
operator|.
name|NCHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|NVARCHAR
argument_list|(
name|Types
operator|.
name|NVARCHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|LONGNVARCHAR
argument_list|(
name|Types
operator|.
name|LONGNVARCHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
block|,
name|NCLOB
argument_list|(
name|Types
operator|.
name|NCLOB
argument_list|,
name|NClob
operator|.
name|class
argument_list|)
block|,
name|ROW
argument_list|(
name|Types
operator|.
name|STRUCT
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|,
name|OTHER
argument_list|(
name|Types
operator|.
name|OTHER
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|,
name|CURSOR
argument_list|(
literal|2012
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|,
name|COLUMN_LIST
argument_list|(
name|Types
operator|.
name|OTHER
operator|+
literal|2
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|;
comment|/** Type id as appears in {@link java.sql.Types},    * e.g. {@link java.sql.Types#INTEGER}. */
specifier|public
specifier|final
name|int
name|id
decl_stmt|;
comment|/** Default Java type for this SQL type, as described in table B-1. */
specifier|public
specifier|final
name|Class
name|clazz
decl_stmt|;
comment|/** Class used internally in Calcite to represent instances of this type. */
specifier|public
specifier|final
name|Class
name|internal
decl_stmt|;
comment|/** Class used to serialize values of this type as JSON. */
specifier|public
specifier|final
name|Class
name|serial
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|SqlType
argument_list|>
name|BY_ID
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|SqlType
name|sqlType
range|:
name|values
argument_list|()
control|)
block|{
name|BY_ID
operator|.
name|put
argument_list|(
name|sqlType
operator|.
name|id
argument_list|,
name|sqlType
argument_list|)
expr_stmt|;
block|}
block|}
name|SqlType
parameter_list|(
name|int
name|id
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|Class
name|internal
parameter_list|,
name|Class
name|serial
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|internal
operator|=
name|internal
expr_stmt|;
name|this
operator|.
name|serial
operator|=
name|serial
expr_stmt|;
block|}
name|SqlType
parameter_list|(
name|int
name|id
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|Class
name|internal
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|clazz
argument_list|,
name|internal
argument_list|,
name|internal
argument_list|)
expr_stmt|;
block|}
name|SqlType
parameter_list|(
name|int
name|id
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|clazz
argument_list|,
name|clazz
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|SqlType
name|valueOf
parameter_list|(
name|int
name|type
parameter_list|)
block|{
specifier|final
name|SqlType
name|sqlType
init|=
name|BY_ID
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqlType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown SQL type "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
name|sqlType
return|;
block|}
comment|/** Returns the boxed type. */
specifier|public
name|Class
name|boxedClass
parameter_list|()
block|{
return|return
name|AvaticaUtils
operator|.
name|box
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/** Returns the entries in JDBC table B-5. */
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|,
name|SqlType
argument_list|>
argument_list|>
name|getSetConversions
parameter_list|()
block|{
specifier|final
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|,
name|SqlType
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|,
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
argument_list|>
name|entry
range|:
name|SET_LIST
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|SqlType
name|sqlType
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|sqlType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
argument_list|>
name|SET_LIST
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Method
argument_list|,
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
argument_list|>
name|GET_LIST
decl_stmt|;
static|static
block|{
name|SET_LIST
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|GET_LIST
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
name|numericTypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|TINYINT
argument_list|,
name|SMALLINT
argument_list|,
name|INTEGER
argument_list|,
name|BIGINT
argument_list|,
name|REAL
argument_list|,
name|FLOAT
argument_list|,
name|DOUBLE
argument_list|,
name|DECIMAL
argument_list|,
name|NUMERIC
argument_list|,
name|BIT
argument_list|,
name|BOOLEAN
argument_list|)
decl_stmt|;
name|Class
index|[]
name|numericClasses
init|=
block|{
name|BigDecimal
operator|.
name|class
block|,
name|Boolean
operator|.
name|class
block|,
name|Byte
operator|.
name|class
block|,
name|Short
operator|.
name|class
block|,
name|Integer
operator|.
name|class
block|,
name|Long
operator|.
name|class
block|,
name|Float
operator|.
name|class
block|,
name|Double
operator|.
name|class
block|}
decl_stmt|;
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
name|charTypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CHAR
argument_list|,
name|VARCHAR
argument_list|,
name|LONGVARCHAR
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
name|ncharTypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|NCHAR
argument_list|,
name|NVARCHAR
argument_list|,
name|LONGNVARCHAR
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
name|binaryTypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|BINARY
argument_list|,
name|VARBINARY
argument_list|,
name|LONGVARBINARY
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
name|dateTimeTypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|DATE
argument_list|,
name|TIME
argument_list|,
name|TIMESTAMP
argument_list|)
decl_stmt|;
specifier|final
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
name|numericCharTypes
init|=
name|concat
argument_list|(
name|numericTypes
argument_list|,
name|charTypes
argument_list|)
decl_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|concat
argument_list|(
name|numericCharTypes
argument_list|,
name|binaryTypes
argument_list|,
name|dateTimeTypes
argument_list|,
name|ncharTypes
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|clazz
range|:
name|numericClasses
control|)
block|{
name|SET_LIST
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|numericCharTypes
argument_list|)
expr_stmt|;
block|}
name|SET_LIST
operator|.
name|put
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|binaryTypes
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BIGINT
argument_list|,
name|CHAR
argument_list|,
name|VARCHAR
argument_list|,
name|LONGVARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATE
argument_list|,
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Time
operator|.
name|class
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TIME
argument_list|,
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATE
argument_list|,
name|TIME
argument_list|,
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Array
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Blob
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BLOB
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Clob
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CLOB
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Struct
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|STRUCT
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Ref
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|REF
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|URL
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATALINK
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Class
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|JAVA_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|RowId
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ROWID
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|NClob
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NCLOB
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|java
operator|.
name|sql
operator|.
name|SQLXML
operator|.
name|class
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SQLXML
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|Calendar
operator|.
name|class
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATE
argument_list|,
name|TIME
argument_list|,
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SET_LIST
operator|.
name|put
argument_list|(
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATE
argument_list|,
name|TIME
argument_list|,
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|Method
argument_list|>
name|numericMethods
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Method
operator|.
name|GET_BYTE
argument_list|,
name|Method
operator|.
name|GET_SHORT
argument_list|,
name|Method
operator|.
name|GET_INT
argument_list|,
name|Method
operator|.
name|GET_LONG
argument_list|,
name|Method
operator|.
name|GET_FLOAT
argument_list|,
name|Method
operator|.
name|GET_DOUBLE
argument_list|,
name|Method
operator|.
name|GET_BIG_DECIMAL
argument_list|,
name|Method
operator|.
name|GET_BOOLEAN
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|numericMethods
control|)
block|{
name|GET_LIST
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|numericCharTypes
argument_list|)
expr_stmt|;
block|}
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_BYTE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ROWID
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|EnumSet
operator|.
name|of
argument_list|(
name|Method
operator|.
name|GET_STRING
argument_list|,
name|Method
operator|.
name|GET_N_STRING
argument_list|)
control|)
block|{
name|GET_LIST
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|concat
argument_list|(
name|numericCharTypes
argument_list|,
name|binaryTypes
argument_list|,
name|dateTimeTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATALINK
argument_list|)
argument_list|,
name|ncharTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_BYTES
argument_list|,
name|binaryTypes
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_DATE
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATE
argument_list|,
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_TIME
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|TIME
argument_list|,
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_TIMESTAMP
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATE
argument_list|,
name|TIME
argument_list|,
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_ASCII_STREAM
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|binaryTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CLOB
argument_list|,
name|NCLOB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_BINARY_STREAM
argument_list|,
name|concat
argument_list|(
name|binaryTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BLOB
argument_list|,
name|SQLXML
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_CHARACTER_STREAM
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|binaryTypes
argument_list|,
name|ncharTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CLOB
argument_list|,
name|NCLOB
argument_list|,
name|SQLXML
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_N_CHARACTER_STREAM
argument_list|,
name|concat
argument_list|(
name|charTypes
argument_list|,
name|binaryTypes
argument_list|,
name|ncharTypes
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CLOB
argument_list|,
name|NCLOB
argument_list|,
name|SQLXML
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_CLOB
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CLOB
argument_list|,
name|NCLOB
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_N_CLOB
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CLOB
argument_list|,
name|NCLOB
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_BLOB
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BLOB
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_ARRAY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_REF
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|REF
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_BLOB
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BLOB
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_URL
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DATALINK
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_OBJECT
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|SqlType
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_ROW_ID
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ROWID
argument_list|)
argument_list|)
expr_stmt|;
name|GET_LIST
operator|.
name|put
argument_list|(
name|Method
operator|.
name|GET_SQLXML
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SQLXML
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SafeVarargs
specifier|private
specifier|static
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|EnumSet
argument_list|<
name|E
argument_list|>
name|concat
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
modifier|...
name|ess
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|es
range|:
name|ess
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|es
argument_list|)
expr_stmt|;
block|}
return|return
name|EnumSet
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/** Returns whether {@link java.sql.PreparedStatement#setObject} and    * {@link PreparedStatement#setNull} can assign a value of a particular class    * to a column of a particular SQL type.    *    *<p>The JDBC standard describes the mapping in table<a href="#B5">B-5</a>.    */
specifier|public
specifier|static
name|boolean
name|canSet
parameter_list|(
name|Class
name|aClass
parameter_list|,
name|SqlType
name|sqlType
parameter_list|)
block|{
specifier|final
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
name|sqlTypes
init|=
name|SET_LIST
operator|.
name|get
argument_list|(
name|aClass
argument_list|)
decl_stmt|;
return|return
name|sqlTypes
operator|!=
literal|null
operator|&&
name|sqlTypes
operator|.
name|contains
argument_list|(
name|sqlType
argument_list|)
return|;
block|}
comment|/** Returns whether {@link java.sql.ResultSet#getInt(int)} and similar methods    * can convert a value to a particular SQL type.    *    *<p>The JDBC standard describes the mapping in table<a href="#B6">B-6</a>.    */
specifier|public
specifier|static
name|boolean
name|canGet
parameter_list|(
name|Method
name|method
parameter_list|,
name|SqlType
name|sqlType
parameter_list|)
block|{
specifier|final
name|EnumSet
argument_list|<
name|SqlType
argument_list|>
name|sqlTypes
init|=
name|GET_LIST
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
return|return
name|sqlTypes
operator|!=
literal|null
operator|&&
name|sqlTypes
operator|.
name|contains
argument_list|(
name|sqlType
argument_list|)
return|;
block|}
comment|/** Getter methods in {@link java.sql.ResultSet}. */
specifier|public
enum|enum
name|Method
block|{
name|GET_BYTE
argument_list|(
literal|"getByte"
argument_list|)
block|,
name|GET_SHORT
argument_list|(
literal|"getShort"
argument_list|)
block|,
name|GET_INT
argument_list|(
literal|"getInt"
argument_list|)
block|,
name|GET_LONG
argument_list|(
literal|"getLong"
argument_list|)
block|,
name|GET_FLOAT
argument_list|(
literal|"getFloat"
argument_list|)
block|,
name|GET_DOUBLE
argument_list|(
literal|"getDouble"
argument_list|)
block|,
name|GET_BIG_DECIMAL
argument_list|(
literal|"getBigDecimal"
argument_list|)
block|,
name|GET_BOOLEAN
argument_list|(
literal|"getBoolean"
argument_list|)
block|,
name|GET_STRING
argument_list|(
literal|"getString"
argument_list|)
block|,
name|GET_N_STRING
argument_list|(
literal|"getNString"
argument_list|)
block|,
name|GET_BYTES
argument_list|(
literal|"getBytes"
argument_list|)
block|,
name|GET_DATE
argument_list|(
literal|"getDate"
argument_list|)
block|,
name|GET_TIME
argument_list|(
literal|"getTime"
argument_list|)
block|,
name|GET_TIMESTAMP
argument_list|(
literal|"getTimestamp"
argument_list|)
block|,
name|GET_ASCII_STREAM
argument_list|(
literal|"getAsciiStream"
argument_list|)
block|,
name|GET_BINARY_STREAM
argument_list|(
literal|"getBinaryStream"
argument_list|)
block|,
name|GET_CHARACTER_STREAM
argument_list|(
literal|"getCharacterStream"
argument_list|)
block|,
name|GET_N_CHARACTER_STREAM
argument_list|(
literal|"getNCharacterStream"
argument_list|)
block|,
name|GET_CLOB
argument_list|(
literal|"getClob"
argument_list|)
block|,
name|GET_N_CLOB
argument_list|(
literal|"getNClob"
argument_list|)
block|,
name|GET_BLOB
argument_list|(
literal|"getBlob"
argument_list|)
block|,
name|GET_ARRAY
argument_list|(
literal|"getArray"
argument_list|)
block|,
name|GET_REF
argument_list|(
literal|"getRef"
argument_list|)
block|,
name|GET_URL
argument_list|(
literal|"getURL"
argument_list|)
block|,
name|GET_OBJECT
argument_list|(
literal|"getObject"
argument_list|)
block|,
name|GET_ROW_ID
argument_list|(
literal|"getRowId"
argument_list|)
block|,
name|GET_SQLXML
argument_list|(
literal|"getSQLXML"
argument_list|)
block|;
specifier|public
specifier|final
name|String
name|methodName
decl_stmt|;
name|Method
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
block|}
block|}
end_enum

begin_comment
comment|// End SqlType.java
end_comment

end_unit

