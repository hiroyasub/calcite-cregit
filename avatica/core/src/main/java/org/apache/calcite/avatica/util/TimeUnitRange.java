begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** A range of time units. The first is more significant than the  * other (e.g. year-to-day) or the same as the other (e.g. month). */
end_comment

begin_enum
specifier|public
enum|enum
name|TimeUnitRange
block|{
name|YEAR
argument_list|(
name|TimeUnit
operator|.
name|YEAR
argument_list|,
literal|null
argument_list|)
block|,
name|YEAR_TO_MONTH
argument_list|(
name|TimeUnit
operator|.
name|YEAR
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|)
block|,
name|MONTH
argument_list|(
name|TimeUnit
operator|.
name|MONTH
argument_list|,
literal|null
argument_list|)
block|,
name|DAY
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
literal|null
argument_list|)
block|,
name|DAY_TO_HOUR
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|)
block|,
name|DAY_TO_MINUTE
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
block|,
name|DAY_TO_SECOND
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
block|,
name|HOUR
argument_list|(
name|TimeUnit
operator|.
name|HOUR
argument_list|,
literal|null
argument_list|)
block|,
name|HOUR_TO_MINUTE
argument_list|(
name|TimeUnit
operator|.
name|HOUR
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
block|,
name|HOUR_TO_SECOND
argument_list|(
name|TimeUnit
operator|.
name|HOUR
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
block|,
name|MINUTE
argument_list|(
name|TimeUnit
operator|.
name|MINUTE
argument_list|,
literal|null
argument_list|)
block|,
name|MINUTE_TO_SECOND
argument_list|(
name|TimeUnit
operator|.
name|MINUTE
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
block|,
name|SECOND
argument_list|(
name|TimeUnit
operator|.
name|SECOND
argument_list|,
literal|null
argument_list|)
block|,
comment|// non-standard time units cannot participate in ranges
name|QUARTER
argument_list|(
name|TimeUnit
operator|.
name|QUARTER
argument_list|,
literal|null
argument_list|)
block|,
name|WEEK
argument_list|(
name|TimeUnit
operator|.
name|WEEK
argument_list|,
literal|null
argument_list|)
block|,
name|MILLISECOND
argument_list|(
name|TimeUnit
operator|.
name|MILLISECOND
argument_list|,
literal|null
argument_list|)
block|,
name|MICROSECOND
argument_list|(
name|TimeUnit
operator|.
name|MICROSECOND
argument_list|,
literal|null
argument_list|)
block|,
name|DOW
argument_list|(
name|TimeUnit
operator|.
name|DOW
argument_list|,
literal|null
argument_list|)
block|,
name|DOY
argument_list|(
name|TimeUnit
operator|.
name|DOY
argument_list|,
literal|null
argument_list|)
block|,
name|EPOCH
argument_list|(
name|TimeUnit
operator|.
name|EPOCH
argument_list|,
literal|null
argument_list|)
block|,
name|DECADE
argument_list|(
name|TimeUnit
operator|.
name|DECADE
argument_list|,
literal|null
argument_list|)
block|,
name|CENTURY
argument_list|(
name|TimeUnit
operator|.
name|CENTURY
argument_list|,
literal|null
argument_list|)
block|,
name|MILLENNIUM
argument_list|(
name|TimeUnit
operator|.
name|MILLENNIUM
argument_list|,
literal|null
argument_list|)
block|;
specifier|public
specifier|final
name|TimeUnit
name|startUnit
decl_stmt|;
specifier|public
specifier|final
name|TimeUnit
name|endUnit
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Pair
argument_list|<
name|TimeUnit
argument_list|>
argument_list|,
name|TimeUnitRange
argument_list|>
name|MAP
init|=
name|createMap
argument_list|()
decl_stmt|;
comment|/**    * Creates a TimeUnitRange.    *    * @param startUnit Start time unit    * @param endUnit   End time unit    */
name|TimeUnitRange
parameter_list|(
name|TimeUnit
name|startUnit
parameter_list|,
name|TimeUnit
name|endUnit
parameter_list|)
block|{
assert|assert
name|startUnit
operator|!=
literal|null
assert|;
name|this
operator|.
name|startUnit
operator|=
name|startUnit
expr_stmt|;
name|this
operator|.
name|endUnit
operator|=
name|endUnit
expr_stmt|;
block|}
comment|/**    * Returns a {@code TimeUnitRange} with a given start and end unit.    *    * @param startUnit Start unit    * @param endUnit   End unit    * @return Time unit range, or null if not valid    */
specifier|public
specifier|static
name|TimeUnitRange
name|of
parameter_list|(
name|TimeUnit
name|startUnit
parameter_list|,
name|TimeUnit
name|endUnit
parameter_list|)
block|{
return|return
name|MAP
operator|.
name|get
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|startUnit
argument_list|,
name|endUnit
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|Pair
argument_list|<
name|TimeUnit
argument_list|>
argument_list|,
name|TimeUnitRange
argument_list|>
name|createMap
parameter_list|()
block|{
name|Map
argument_list|<
name|Pair
argument_list|<
name|TimeUnit
argument_list|>
argument_list|,
name|TimeUnitRange
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimeUnitRange
name|value
range|:
name|values
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|value
operator|.
name|startUnit
argument_list|,
name|value
operator|.
name|endUnit
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/** Whether this is in the YEAR-TO-MONTH family of intervals. */
specifier|public
name|boolean
name|monthly
parameter_list|()
block|{
return|return
name|ordinal
argument_list|()
operator|<=
name|MONTH
operator|.
name|ordinal
argument_list|()
return|;
block|}
comment|/** Immutable pair of values of the same type. */
specifier|private
specifier|static
class|class
name|Pair
parameter_list|<
name|E
parameter_list|>
block|{
specifier|final
name|E
name|left
decl_stmt|;
specifier|final
name|E
name|right
decl_stmt|;
specifier|private
name|Pair
parameter_list|(
name|E
name|left
parameter_list|,
name|E
name|right
parameter_list|)
block|{
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|k
init|=
operator|(
name|left
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|left
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|int
name|k1
init|=
operator|(
name|right
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|right
operator|.
name|hashCode
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|k
operator|<<
literal|4
operator|)
operator||
name|k
operator|)
operator|^
name|k1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|Pair
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|left
argument_list|,
operator|(
operator|(
name|Pair
operator|)
name|obj
operator|)
operator|.
name|left
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|right
argument_list|,
operator|(
operator|(
name|Pair
operator|)
name|obj
operator|)
operator|.
name|right
argument_list|)
return|;
block|}
block|}
block|}
end_enum

begin_comment
comment|// End TimeUnitRange.java
end_comment

end_unit

