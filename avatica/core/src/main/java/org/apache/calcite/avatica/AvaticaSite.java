begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|NClob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|RowId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLXML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_comment
comment|/**  * A location that a value can be written to or read from.  */
end_comment

begin_class
specifier|public
class|class
name|AvaticaSite
block|{
specifier|final
name|AvaticaParameter
name|parameter
decl_stmt|;
comment|/** Calendar is not thread-safe. But calendar is only used from within one    * thread, and we have to trust that clients are not modifying calendars    * that they pass to us in a method such as    * {@link java.sql.PreparedStatement#setTime(int, Time, Calendar)}, so we do    * not need to synchronize access. */
specifier|final
name|Calendar
name|calendar
decl_stmt|;
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
specifier|final
name|TypedValue
index|[]
name|slots
decl_stmt|;
comment|/** Value that means the parameter has been set to null.    * If value is null, parameter has not been set. */
specifier|public
specifier|static
specifier|final
name|Object
name|DUMMY_VALUE
init|=
name|Dummy
operator|.
name|INSTANCE
decl_stmt|;
specifier|public
name|AvaticaSite
parameter_list|(
name|AvaticaParameter
name|parameter
parameter_list|,
name|Calendar
name|calendar
parameter_list|,
name|int
name|index
parameter_list|,
name|TypedValue
index|[]
name|slots
parameter_list|)
block|{
assert|assert
name|calendar
operator|!=
literal|null
assert|;
assert|assert
name|parameter
operator|!=
literal|null
assert|;
assert|assert
name|slots
operator|!=
literal|null
assert|;
name|this
operator|.
name|parameter
operator|=
name|parameter
expr_stmt|;
name|this
operator|.
name|calendar
operator|=
name|calendar
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|slots
operator|=
name|slots
expr_stmt|;
block|}
specifier|private
name|TypedValue
name|wrap
parameter_list|(
name|ColumnMetaData
operator|.
name|Rep
name|rep
parameter_list|,
name|Object
name|o
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
return|return
name|TypedValue
operator|.
name|ofJdbc
argument_list|(
name|rep
argument_list|,
name|o
argument_list|,
name|calendar
argument_list|)
return|;
block|}
specifier|private
name|TypedValue
name|wrap
parameter_list|(
name|ColumnMetaData
operator|.
name|Rep
name|rep
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
return|return
name|TypedValue
operator|.
name|ofJdbc
argument_list|(
name|rep
argument_list|,
name|o
argument_list|,
name|calendar
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|slots
index|[
name|index
index|]
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setByte
parameter_list|(
name|byte
name|o
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BYTE
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setChar
parameter_list|(
name|char
name|o
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|CHARACTER
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setShort
parameter_list|(
name|short
name|o
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|SHORT
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInt
parameter_list|(
name|int
name|o
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|INTEGER
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLong
parameter_list|(
name|long
name|o
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|LONG
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBoolean
parameter_list|(
name|boolean
name|o
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BOOLEAN
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRowId
parameter_list|(
name|RowId
name|x
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|OBJECT
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNString
parameter_list|(
name|String
name|o
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|STRING
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNCharacterStream
parameter_list|(
name|Reader
name|value
parameter_list|,
name|long
name|length
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setNClob
parameter_list|(
name|NClob
name|value
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|OBJECT
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClob
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|long
name|length
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setBlob
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|long
name|length
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setNClob
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|long
name|length
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setSQLXML
parameter_list|(
name|SQLXML
name|xmlObject
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|OBJECT
argument_list|,
name|xmlObject
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAsciiStream
parameter_list|(
name|InputStream
name|x
parameter_list|,
name|long
name|length
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setBinaryStream
parameter_list|(
name|InputStream
name|x
parameter_list|,
name|long
name|length
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setCharacterStream
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|long
name|length
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setAsciiStream
parameter_list|(
name|InputStream
name|x
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setBinaryStream
parameter_list|(
name|InputStream
name|x
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setCharacterStream
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setNCharacterStream
parameter_list|(
name|Reader
name|value
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setClob
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setBlob
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setNClob
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setUnicodeStream
parameter_list|(
name|InputStream
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setFloat
parameter_list|(
name|float
name|x
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|FLOAT
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDouble
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|DOUBLE
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBigDecimal
parameter_list|(
name|BigDecimal
name|x
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|NUMBER
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|x
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|STRING
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBytes
parameter_list|(
name|byte
index|[]
name|x
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BYTE_STRING
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|Timestamp
name|x
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIMESTAMP
argument_list|,
name|x
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTime
parameter_list|(
name|Time
name|x
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIME
argument_list|,
name|x
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|Date
name|x
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_DATE
argument_list|,
name|x
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|Object
name|x
parameter_list|,
name|int
name|targetSqlType
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|Types
operator|.
name|NULL
operator|==
name|targetSqlType
condition|)
block|{
name|setNull
argument_list|(
name|targetSqlType
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|targetSqlType
condition|)
block|{
case|case
name|Types
operator|.
name|CLOB
case|:
case|case
name|Types
operator|.
name|DATALINK
case|:
case|case
name|Types
operator|.
name|NCLOB
case|:
case|case
name|Types
operator|.
name|OTHER
case|:
case|case
name|Types
operator|.
name|REF
case|:
case|case
name|Types
operator|.
name|SQLXML
case|:
case|case
name|Types
operator|.
name|STRUCT
case|:
throw|throw
name|notImplemented
argument_list|()
throw|;
case|case
name|Types
operator|.
name|ARRAY
case|:
name|setArray
argument_list|(
name|toArray
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BIGINT
case|:
name|setLong
argument_list|(
name|toLong
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BINARY
case|:
case|case
name|Types
operator|.
name|LONGVARBINARY
case|:
case|case
name|Types
operator|.
name|VARBINARY
case|:
name|setBytes
argument_list|(
name|toBytes
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BIT
case|:
case|case
name|Types
operator|.
name|BOOLEAN
case|:
name|setBoolean
argument_list|(
name|toBoolean
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BLOB
case|:
if|if
condition|(
name|x
operator|instanceof
name|Blob
condition|)
block|{
name|setBlob
argument_list|(
operator|(
name|Blob
operator|)
name|x
argument_list|)
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|InputStream
condition|)
block|{
name|setBlob
argument_list|(
operator|(
name|InputStream
operator|)
name|x
argument_list|)
expr_stmt|;
block|}
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Blob
operator|.
name|class
argument_list|)
throw|;
case|case
name|Types
operator|.
name|DATE
case|:
name|setDate
argument_list|(
name|toDate
argument_list|(
name|x
argument_list|)
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|DECIMAL
case|:
case|case
name|Types
operator|.
name|NUMERIC
case|:
name|setBigDecimal
argument_list|(
name|toBigDecimal
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|DISTINCT
case|:
throw|throw
name|notImplemented
argument_list|()
throw|;
case|case
name|Types
operator|.
name|DOUBLE
case|:
case|case
name|Types
operator|.
name|FLOAT
case|:
comment|// yes really; SQL FLOAT is up to 8 bytes
name|setDouble
argument_list|(
name|toDouble
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|INTEGER
case|:
name|setInt
argument_list|(
name|toInt
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|JAVA_OBJECT
case|:
name|setObject
argument_list|(
name|x
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|LONGNVARCHAR
case|:
case|case
name|Types
operator|.
name|LONGVARCHAR
case|:
case|case
name|Types
operator|.
name|NVARCHAR
case|:
case|case
name|Types
operator|.
name|VARCHAR
case|:
case|case
name|Types
operator|.
name|CHAR
case|:
case|case
name|Types
operator|.
name|NCHAR
case|:
name|setString
argument_list|(
name|toString
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|REAL
case|:
name|setFloat
argument_list|(
name|toFloat
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|ROWID
case|:
if|if
condition|(
name|x
operator|instanceof
name|RowId
condition|)
block|{
name|setRowId
argument_list|(
operator|(
name|RowId
operator|)
name|x
argument_list|)
expr_stmt|;
break|break;
block|}
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|RowId
operator|.
name|class
argument_list|)
throw|;
case|case
name|Types
operator|.
name|SMALLINT
case|:
name|setShort
argument_list|(
name|toShort
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TIME
case|:
name|setTime
argument_list|(
name|toTime
argument_list|(
name|x
argument_list|)
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
name|setTimestamp
argument_list|(
name|toTimestamp
argument_list|(
name|x
argument_list|)
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TINYINT
case|:
name|setByte
argument_list|(
name|toByte
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|notImplemented
argument_list|()
throw|;
block|}
block|}
comment|/** Similar logic to {@link #setObject}. */
specifier|public
specifier|static
name|Object
name|get
parameter_list|(
name|Cursor
operator|.
name|Accessor
name|accessor
parameter_list|,
name|int
name|targetSqlType
parameter_list|,
name|Calendar
name|localCalendar
parameter_list|)
throws|throws
name|SQLException
block|{
switch|switch
condition|(
name|targetSqlType
condition|)
block|{
case|case
name|Types
operator|.
name|CLOB
case|:
case|case
name|Types
operator|.
name|DATALINK
case|:
case|case
name|Types
operator|.
name|NCLOB
case|:
case|case
name|Types
operator|.
name|REF
case|:
case|case
name|Types
operator|.
name|SQLXML
case|:
case|case
name|Types
operator|.
name|STRUCT
case|:
throw|throw
name|notImplemented
argument_list|()
throw|;
case|case
name|Types
operator|.
name|ARRAY
case|:
return|return
name|accessor
operator|.
name|getArray
argument_list|()
return|;
case|case
name|Types
operator|.
name|BIGINT
case|:
specifier|final
name|long
name|aLong
init|=
name|accessor
operator|.
name|getLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|aLong
operator|==
literal|0
operator|&&
name|accessor
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|aLong
return|;
case|case
name|Types
operator|.
name|BINARY
case|:
case|case
name|Types
operator|.
name|LONGVARBINARY
case|:
case|case
name|Types
operator|.
name|VARBINARY
case|:
return|return
name|accessor
operator|.
name|getBytes
argument_list|()
return|;
case|case
name|Types
operator|.
name|BIT
case|:
case|case
name|Types
operator|.
name|BOOLEAN
case|:
specifier|final
name|boolean
name|aBoolean
init|=
name|accessor
operator|.
name|getBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|aBoolean
operator|&&
name|accessor
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|aBoolean
return|;
case|case
name|Types
operator|.
name|BLOB
case|:
return|return
name|accessor
operator|.
name|getBlob
argument_list|()
return|;
case|case
name|Types
operator|.
name|DATE
case|:
return|return
name|accessor
operator|.
name|getDate
argument_list|(
name|localCalendar
argument_list|)
return|;
case|case
name|Types
operator|.
name|DECIMAL
case|:
case|case
name|Types
operator|.
name|NUMERIC
case|:
return|return
name|accessor
operator|.
name|getBigDecimal
argument_list|()
return|;
case|case
name|Types
operator|.
name|DISTINCT
case|:
throw|throw
name|notImplemented
argument_list|()
throw|;
case|case
name|Types
operator|.
name|DOUBLE
case|:
case|case
name|Types
operator|.
name|FLOAT
case|:
comment|// yes really; SQL FLOAT is up to 8 bytes
specifier|final
name|double
name|aDouble
init|=
name|accessor
operator|.
name|getDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|aDouble
operator|==
literal|0
operator|&&
name|accessor
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|aDouble
return|;
case|case
name|Types
operator|.
name|INTEGER
case|:
specifier|final
name|int
name|anInt
init|=
name|accessor
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|anInt
operator|==
literal|0
operator|&&
name|accessor
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|anInt
return|;
case|case
name|Types
operator|.
name|JAVA_OBJECT
case|:
case|case
name|Types
operator|.
name|OTHER
case|:
return|return
name|accessor
operator|.
name|getObject
argument_list|()
return|;
case|case
name|Types
operator|.
name|LONGNVARCHAR
case|:
case|case
name|Types
operator|.
name|LONGVARCHAR
case|:
case|case
name|Types
operator|.
name|NVARCHAR
case|:
case|case
name|Types
operator|.
name|VARCHAR
case|:
case|case
name|Types
operator|.
name|CHAR
case|:
case|case
name|Types
operator|.
name|NCHAR
case|:
return|return
name|accessor
operator|.
name|getString
argument_list|()
return|;
case|case
name|Types
operator|.
name|REAL
case|:
specifier|final
name|float
name|aFloat
init|=
name|accessor
operator|.
name|getFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|aFloat
operator|==
literal|0
operator|&&
name|accessor
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|aFloat
return|;
case|case
name|Types
operator|.
name|ROWID
case|:
throw|throw
name|notImplemented
argument_list|()
throw|;
case|case
name|Types
operator|.
name|SMALLINT
case|:
specifier|final
name|short
name|aShort
init|=
name|accessor
operator|.
name|getShort
argument_list|()
decl_stmt|;
if|if
condition|(
name|aShort
operator|==
literal|0
operator|&&
name|accessor
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|aShort
return|;
case|case
name|Types
operator|.
name|TIME
case|:
return|return
name|accessor
operator|.
name|getTime
argument_list|(
name|localCalendar
argument_list|)
return|;
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
return|return
name|accessor
operator|.
name|getTimestamp
argument_list|(
name|localCalendar
argument_list|)
return|;
case|case
name|Types
operator|.
name|TINYINT
case|:
specifier|final
name|byte
name|aByte
init|=
name|accessor
operator|.
name|getByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|aByte
operator|==
literal|0
operator|&&
name|accessor
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|aByte
return|;
default|default:
throw|throw
name|notImplemented
argument_list|()
throw|;
block|}
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|TypedValue
operator|.
name|ofJdbc
argument_list|(
name|x
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNull
parameter_list|(
name|int
name|sqlType
parameter_list|)
block|{
name|slots
index|[
name|index
index|]
operator|=
name|wrap
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|OBJECT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRef
parameter_list|(
name|Ref
name|x
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setBlob
parameter_list|(
name|Blob
name|x
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setClob
parameter_list|(
name|Clob
name|x
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setArray
parameter_list|(
name|Array
name|x
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setNull
parameter_list|(
name|int
name|sqlType
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setURL
parameter_list|(
name|URL
name|x
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|Object
name|x
parameter_list|,
name|int
name|targetSqlType
parameter_list|,
name|int
name|scaleOrLength
parameter_list|)
block|{
block|}
specifier|private
specifier|static
name|RuntimeException
name|unsupportedCast
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|from
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|to
parameter_list|)
block|{
return|return
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot convert from "
operator|+
name|from
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" to "
operator|+
name|to
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RuntimeException
name|notImplemented
parameter_list|()
block|{
return|return
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Array
name|toArray
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Array
condition|)
block|{
return|return
operator|(
name|Array
operator|)
name|x
return|;
block|}
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Array
operator|.
name|class
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|x
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|BigInteger
condition|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
name|BigInteger
operator|)
name|x
argument_list|)
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Number
condition|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Double
operator|||
name|x
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|x
condition|?
name|BigDecimal
operator|.
name|ONE
else|:
name|BigDecimal
operator|.
name|ZERO
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|x
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|x
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|||
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
operator|||
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|byte
name|toByte
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|x
condition|?
operator|(
name|byte
operator|)
literal|1
else|:
operator|(
name|byte
operator|)
literal|0
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Byte
operator|.
name|parseByte
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|x
return|;
block|}
if|if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|x
operator|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|Date
name|toDate
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Date
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
return|return
operator|new
name|Date
argument_list|(
name|toLong
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Time
name|toTime
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Time
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
return|return
operator|new
name|Time
argument_list|(
name|toLong
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Timestamp
name|toTimestamp
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
return|return
operator|new
name|Timestamp
argument_list|(
name|toLong
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|double
name|toDouble
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|x
condition|?
literal|1D
else|:
literal|0D
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|float
name|toFloat
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|x
condition|?
literal|1F
else|:
literal|0F
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|int
name|toInt
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|x
condition|?
literal|1
else|:
literal|0
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|long
name|toLong
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|x
condition|?
literal|1L
else|:
literal|0L
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|short
name|toShort
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|x
operator|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|x
condition|?
operator|(
name|short
operator|)
literal|1
else|:
operator|(
name|short
operator|)
literal|0
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
name|Short
operator|.
name|parseShort
argument_list|(
operator|(
name|String
operator|)
name|x
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|x
return|;
block|}
if|else if
condition|(
name|x
operator|instanceof
name|Character
operator|||
name|x
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|x
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
name|unsupportedCast
argument_list|(
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
throw|;
block|}
comment|/** Singleton value to denote parameters that have been set to null (as    * opposed to not set).    *    *<p>Not a valid value for a parameter.    *    *<p>As an enum, it is serializable by Jackson. */
specifier|private
enum|enum
name|Dummy
block|{
name|INSTANCE
block|}
block|}
end_class

begin_comment
comment|// End AvaticaSite.java
end_comment

end_unit

