begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_comment
comment|/**  * Encapsulate the logic of transforming a protobuf Request message into the Avatica POJO request.  */
end_comment

begin_class
specifier|public
class|class
name|RequestTranslator
block|{
specifier|private
specifier|final
name|Parser
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|parser
decl_stmt|;
specifier|private
specifier|final
name|Service
operator|.
name|Request
name|impl
decl_stmt|;
specifier|public
name|RequestTranslator
parameter_list|(
name|Parser
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|parser
parameter_list|,
name|Service
operator|.
name|Request
name|impl
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
block|}
specifier|public
name|Service
operator|.
name|Request
name|transform
parameter_list|(
name|ByteString
name|serializedMessage
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
comment|// This should already be an aliased CodedInputStream from the WireMessage parsing.
name|Message
name|msg
init|=
name|parser
operator|.
name|parseFrom
argument_list|(
name|serializedMessage
operator|.
name|newCodedInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|impl
operator|.
name|deserialize
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RequestTranslator.java
end_comment

end_unit

