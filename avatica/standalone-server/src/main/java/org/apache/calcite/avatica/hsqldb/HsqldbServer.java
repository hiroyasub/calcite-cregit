begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|hsqldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
operator|.
name|JdbcMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Driver
operator|.
name|Serialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|IStringConverter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|JCommander
import|;
end_import

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|scott
operator|.
name|data
operator|.
name|hsqldb
operator|.
name|ScottHsqldb
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An Avatica server for HSQLDB.  */
end_comment

begin_class
specifier|public
class|class
name|HsqldbServer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HsqldbServer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
literal|"-p"
block|,
literal|"--port"
block|}
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|description
operator|=
literal|"Port the server should bind"
argument_list|)
specifier|private
name|int
name|port
init|=
literal|0
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
literal|"-s"
block|,
literal|"--serialization"
block|}
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|description
operator|=
literal|"Serialization method to use"
argument_list|,
name|converter
operator|=
name|SerializationConverter
operator|.
name|class
argument_list|)
specifier|private
name|Serialization
name|serialization
init|=
name|Serialization
operator|.
name|PROTOBUF
decl_stmt|;
specifier|private
name|HttpServer
name|server
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|server
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The server was already started"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ExitCodes
operator|.
name|ALREADY_STARTED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
comment|// Set up Julian's ScottDB for HSQLDB
name|JdbcMeta
name|meta
init|=
operator|new
name|JdbcMeta
argument_list|(
name|ScottHsqldb
operator|.
name|URI
argument_list|,
name|ScottHsqldb
operator|.
name|USER
argument_list|,
name|ScottHsqldb
operator|.
name|PASSWORD
argument_list|)
decl_stmt|;
name|LocalService
name|service
init|=
operator|new
name|LocalService
argument_list|(
name|meta
argument_list|)
decl_stmt|;
comment|// Construct the server
name|this
operator|.
name|server
operator|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|()
operator|.
name|withHandler
argument_list|(
name|service
argument_list|,
name|serialization
argument_list|)
operator|.
name|withPort
argument_list|(
name|port
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Then start it
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started Avatica server on port {} with serialization {}"
argument_list|,
name|server
operator|.
name|getPort
argument_list|()
argument_list|,
name|serialization
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start Avatica server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ExitCodes
operator|.
name|START_FAILED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|server
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|HsqldbServer
name|server
init|=
operator|new
name|HsqldbServer
argument_list|()
decl_stmt|;
operator|new
name|JCommander
argument_list|(
name|server
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Try to clean up when the server is stopped.
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping server"
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server stopped"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Reset interruption
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// And exit now.
return|return;
block|}
block|}
comment|/**    * Converter from String to Serialization.    */
specifier|private
specifier|static
class|class
name|SerializationConverter
implements|implements
name|IStringConverter
argument_list|<
name|Serialization
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Serialization
name|convert
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|Serialization
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Codes for exit conditions    */
specifier|private
enum|enum
name|ExitCodes
block|{
name|NORMAL
block|,
name|ALREADY_STARTED
block|,
comment|// 1
name|START_FAILED
block|;
comment|// 2
block|}
block|}
end_class

begin_comment
comment|// End HsqldbServer.java
end_comment

end_unit

