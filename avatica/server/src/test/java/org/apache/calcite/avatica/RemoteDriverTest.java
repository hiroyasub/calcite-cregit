begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|DatabaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
operator|.
name|JdbcMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|JsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalJsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalProtobufService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|ProtobufTranslation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|ProtobufTranslationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ParameterMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit test for Avatica Remote JDBC driver.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|NotThreadSafe
comment|// for testConnectionIsolation
specifier|public
class|class
name|RemoteDriverTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RemoteDriverTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LJS
init|=
name|LocalJdbcServiceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QRJS
init|=
name|QuasiRemoteJdbcServiceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QRPBS
init|=
name|QuasiRemotePBJdbcServiceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConnectionSpec
name|CONNECTION_SPEC
init|=
name|ConnectionSpec
operator|.
name|HSQLDB
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|ljs
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:factory="
operator|+
name|QRJS
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Connection
name|lpbs
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:factory="
operator|+
name|QRPBS
argument_list|)
return|;
block|}
specifier|private
name|Connection
name|canon
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
return|;
block|}
comment|/**    * Interface that allows for alternate ways to access internals to the Connection for testing    * purposes.    */
interface|interface
name|ConnectionInternals
block|{
comment|/**      * Reaches into the guts of a quasi-remote connection and pull out the      * statement map from the other side.      *      *<p>TODO: refactor tests to replace reflection with package-local access      */
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|getRemoteStatementMap
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Reaches into the guts of a quasi-remote connection and pull out the      * connection map from the other side.      *      *<p>TODO: refactor tests to replace reflection with package-local access      */
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|getRemoteConnectionMap
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
comment|// Run each test with the LocalJsonService and LocalProtobufService
annotation|@
name|Parameters
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Json and Protobuf operations should be equivalent -- tests against one work on the other
comment|// Each test needs to get a fresh Connection and also access some internals on that Connection.
name|connections
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|Callable
argument_list|<
name|Connection
argument_list|>
argument_list|()
block|{
specifier|public
name|Connection
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|ljs
argument_list|()
return|;
block_content|}
block|catch (SQLException e
block_content|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block_content|}
block|}         }
operator|,
function|new QuasiRemoteJdbcServiceInternals
parameter_list|()
operator|,
function|new Callable<RequestInspection>
parameter_list|()
block|{
specifier|public
name|RequestInspection
name|call
parameter_list|()
throws|throws
name|Exception
block|{
assert|assert
literal|null
operator|!=
name|QuasiRemoteJdbcServiceFactory
operator|.
name|requestInspection
assert|;
return|return
name|QuasiRemoteJdbcServiceFactory
operator|.
name|requestInspection
return|;
block_content|}
block|} }
block_content|)
function|;
comment|// TODO write the ConnectionInternals implementation
name|connections
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|Callable
argument_list|<
name|Connection
argument_list|>
argument_list|()
block|{
specifier|public
name|Connection
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|lpbs
argument_list|()
return|;
block_content|}
block|catch (SQLException e
block_content|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block_content|}
block|}         }
operator|,
function|new QuasiRemoteProtobufJdbcServiceInternals
parameter_list|()
operator|,
function|new Callable<RequestInspection>
parameter_list|()
block|{
specifier|public
name|RequestInspection
name|call
parameter_list|()
throws|throws
name|Exception
block|{
assert|assert
literal|null
operator|!=
name|QuasiRemotePBJdbcServiceFactory
operator|.
name|requestInspection
assert|;
return|return
name|QuasiRemotePBJdbcServiceFactory
operator|.
name|requestInspection
return|;
block_content|}
block|} }
block_content|)
function|;
return|return
name|connections
return|;
block|}
specifier|private
specifier|final
name|Callable
argument_list|<
name|Connection
argument_list|>
name|localConnectionCallable
decl_stmt|;
specifier|private
name|final
name|ConnectionInternals
name|localConnectionInternals
argument_list|;
specifier|private
name|final
name|Callable
argument_list|<
name|RequestInspection
argument_list|>
name|requestInspectionCallable
argument_list|;
specifier|public
name|RemoteDriverTest
argument_list|(
name|Callable
argument_list|<
name|Connection
argument_list|>
name|localConnectionCallable
argument_list|,
name|ConnectionInternals
name|internals
argument_list|,
name|Callable
argument_list|<
name|RequestInspection
argument_list|>
name|requestInspectionCallable
argument_list|)
block|{
name|this
operator|.
name|localConnectionCallable
operator|=
name|localConnectionCallable
block|;
name|this
operator|.
name|localConnectionInternals
operator|=
name|internals
block|;
name|this
operator|.
name|requestInspectionCallable
operator|=
name|requestInspectionCallable
block|;   }
specifier|private
name|Connection
name|getLocalConnection
argument_list|()
block|{
try|try
block|{
return|return
name|localConnectionCallable
operator|.
name|call
argument_list|()
return|;
block_content|}
block|catch (Exception e
block|)
block|{
throw|throw
argument_list|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
block|;     }
argument_list|}
specifier|private
name|ConnectionInternals
name|getLocalConnectionInternals
argument_list|()
block|{
return|return
name|localConnectionInternals
return|;
block|}
specifier|private
name|RequestInspection
name|getRequestInspection
argument_list|()
block|{
try|try
block|{
return|return
name|requestInspectionCallable
operator|.
name|call
argument_list|()
return|;
block_content|}
block|catch (Exception e
block|)
block|{
throw|throw
argument_list|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
block|;     }
expr|}
comment|/** Executes a lambda for the canonical connection and the local    * connection. */
specifier|public
name|void
name|eachConnection
argument_list|(
name|ConnectionFunction
name|f
argument_list|,
name|Connection
name|localConn
argument_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|i
operator|==
literal|0
condition|?
name|canon
argument_list|()
else|:
name|localConn
init|)
block|{
name|f
operator|.
name|apply
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block_content|}
block|}   }    @Before   public void before(
block_content|)
throws|throws
name|Exception
block|{
name|QuasiRemoteJdbcServiceFactory
operator|.
name|initService
argument_list|()
empty_stmt|;
name|QuasiRemotePBJdbcServiceFactory
operator|.
name|initService
parameter_list|()
constructor_decl|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegister
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|getLocalConnection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block_content|}
block|@Test public void testDatabaseProperties(
block|)
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
argument_list|;     try
block|{
specifier|final
name|Connection
name|connection
init|=
name|getLocalConnection
argument_list|()
decl_stmt|;
for|for
control|(
name|Meta
operator|.
name|DatabaseProperty
name|p
range|:
name|Meta
operator|.
name|DatabaseProperty
operator|.
name|values
argument_list|()
control|)
block|{
switch|switch
condition|(
name|p
condition|)
block|{
case|case
name|GET_NUMERIC_FUNCTIONS
case|:
name|assertThat
argument_list|(
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getNumericFunctions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"ABS,ACOS,ASIN,ATAN,ATAN2,BITAND,BITOR,BITXOR,"
operator|+
literal|"CEILING,COS,COT,DEGREES,EXP,FLOOR,LOG,LOG10,MOD,"
operator|+
literal|"PI,POWER,RADIANS,RAND,ROUND,ROUNDMAGIC,SIGN,SIN,"
operator|+
literal|"SQRT,TAN,TRUNCATE"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_SYSTEM_FUNCTIONS
case|:
name|assertThat
argument_list|(
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSystemFunctions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"DATABASE,IFNULL,USER"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_TIME_DATE_FUNCTIONS
case|:
name|assertThat
argument_list|(
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTimeDateFunctions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"CURDATE,CURTIME,DATEDIFF,DAYNAME,DAYOFMONTH,DAYOFWEEK,"
operator|+
literal|"DAYOFYEAR,HOUR,MINUTE,MONTH,MONTHNAME,NOW,QUARTER,SECOND,"
operator|+
literal|"SECONDS_SINCE_MIDNIGHT,TIMESTAMPADD,TIMESTAMPDIFF,"
operator|+
literal|"TO_CHAR,WEEK,YEAR"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_S_Q_L_KEYWORDS
case|:
name|assertThat
argument_list|(
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSQLKeywords
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// No SQL keywords return for HSQLDB
break|break;
case|case
name|GET_STRING_FUNCTIONS
case|:
name|assertThat
argument_list|(
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getStringFunctions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"ASCII,CHAR,CONCAT,DIFFERENCE,HEXTORAW,INSERT,LCASE,"
operator|+
literal|"LEFT,LENGTH,LOCATE,LTRIM,RAWTOHEX,REPEAT,REPLACE,"
operator|+
literal|"RIGHT,RTRIM,SOUNDEX,SPACE,SUBSTR,UCASE"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Connection
name|connection
init|=
name|getLocalConnection
argument_list|()
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metaData
operator|.
name|getColumnCount
argument_list|()
operator|>=
literal|18
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TYPE_NAME"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DATA_TYPE"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PRECISION"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SQL_DATA_TYPE"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SQL_DATETIME_SUB"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NUM_PREC_RADIX"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTables
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Connection
name|connection
init|=
name|getLocalConnection
argument_list|()
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|"SCOTT"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|resultSet
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DEPT"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EMP"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BONUS"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SALGRADE"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testNoFactory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CATALOG"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatementExecuteQueryLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkStatementExecuteQuery
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareExecuteQueryLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkStatementExecuteQuery
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertDrop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|t
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"TEST_TABLE2"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|create
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table if not exists %s ("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(3) not null)"
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|String
name|insert
init|=
name|String
operator|.
name|format
argument_list|(
literal|"insert into %s values(1, 'foo')"
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|ljs
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|statement
operator|.
name|execute
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|insert
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSet
init|=
name|stmt
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultSet
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|PreparedStatement
name|pstmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|insert
argument_list|)
decl_stmt|;
name|boolean
name|status
init|=
name|pstmt
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|updateCount
init|=
name|pstmt
operator|.
name|getUpdateCount
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updateCount
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkStatementExecuteQuery
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|prepare
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (\n"
operator|+
literal|"  values (1, 'a'), (null, 'b'), (3, 'c')) as t (c1, c2)"
decl_stmt|;
specifier|final
name|Statement
name|statement
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
decl_stmt|;
specifier|final
name|ParameterMetaData
name|parameterMetaData
decl_stmt|;
if|if
condition|(
name|prepare
condition|)
block|{
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|statement
operator|=
name|ps
expr_stmt|;
name|parameterMetaData
operator|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|parameterMetaData
operator|=
literal|null
expr_stmt|;
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameterMetaData
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C1"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C2"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatementExecuteLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkStatementExecute
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatementExecuteFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Creating a> 100 rows queries to enable fetch request
name|String
name|sql
init|=
literal|"select * from emp cross join emp"
decl_stmt|;
name|checkExecuteFetch
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// PreparedStatement needed an extra fetch, as the execute will
comment|// trigger the 1st fetch. Where statement execute will execute direct
comment|// with results back.
comment|// 1 fetch, because execute did the first fetch
name|checkExecuteFetch
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|,
name|sql
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkExecuteFetch
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|sql
parameter_list|,
name|boolean
name|isPrepare
parameter_list|,
name|int
name|fetchCountMatch
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|Statement
name|exeStatement
decl_stmt|;
specifier|final
name|ResultSet
name|results
decl_stmt|;
name|getRequestInspection
argument_list|()
operator|.
name|getRequestLogger
argument_list|()
operator|.
name|enableAndClear
argument_list|()
expr_stmt|;
if|if
condition|(
name|isPrepare
condition|)
block|{
name|PreparedStatement
name|statement
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|exeStatement
operator|=
name|statement
expr_stmt|;
name|results
operator|=
name|statement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Statement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|exeStatement
operator|=
name|statement
expr_stmt|;
name|results
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|fetchCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
name|exeStatement
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|x
init|=
name|getRequestInspection
argument_list|()
operator|.
name|getRequestLogger
argument_list|()
operator|.
name|getAndDisable
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|pair
range|:
name|x
control|)
block|{
if|if
condition|(
name|pair
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
literal|"\"request\":\"fetch"
argument_list|)
condition|)
block|{
name|fetchCount
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|196
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fetchCountMatch
argument_list|,
name|fetchCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatementExecuteLocalMaxRow
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkStatementExecute
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ljs
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|statement
operator|.
name|setFetchSize
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statement
operator|.
name|getFetchSize
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|PreparedStatement
name|preparedStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"select * from (values (1, 'a')) as tbl1 (c1, c2)"
argument_list|)
decl_stmt|;
name|preparedStatement
operator|.
name|setFetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|preparedStatement
operator|.
name|getFetchSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"CALCITE-719: Refactor PreparedStatement to support setMaxRows"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testStatementPrepareExecuteLocalMaxRow
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkStatementExecute
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareExecuteLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkStatementExecute
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkStatementExecute
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|prepare
parameter_list|)
throws|throws
name|SQLException
block|{
name|checkStatementExecute
argument_list|(
name|connection
argument_list|,
name|prepare
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkStatementExecute
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|prepare
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (\n"
operator|+
literal|"  values (1, 'a'), (null, 'b'), (3, 'c')) as t (c1, c2)"
decl_stmt|;
specifier|final
name|Statement
name|statement
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
decl_stmt|;
specifier|final
name|ParameterMetaData
name|parameterMetaData
decl_stmt|;
if|if
condition|(
name|prepare
condition|)
block|{
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|statement
operator|=
name|ps
expr_stmt|;
name|ps
operator|.
name|setMaxRows
argument_list|(
name|maxRowCount
argument_list|)
expr_stmt|;
name|parameterMetaData
operator|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|getResultSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|statement
operator|.
name|setMaxRows
argument_list|(
name|maxRowCount
argument_list|)
expr_stmt|;
name|parameterMetaData
operator|=
literal|null
expr_stmt|;
name|assertTrue
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|statement
operator|.
name|getResultSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parameterMetaData
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C1"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C2"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRowCount
operator|||
operator|(
name|maxRowCount
operator|==
literal|0
operator|&&
name|i
operator|<
literal|3
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateInsertUpdateDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
specifier|final
name|String
name|t
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"TEST_TABLE"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|drop
init|=
name|String
operator|.
name|format
argument_list|(
literal|"drop table %s if exists"
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|String
name|create
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table %s("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(3) not null)"
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|String
name|insert
init|=
name|String
operator|.
name|format
argument_list|(
literal|"insert into %s values(1, 'foo')"
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|String
name|update
init|=
name|String
operator|.
name|format
argument_list|(
literal|"update %s set msg='bar' where id=1"
argument_list|,
name|t
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|getLocalConnection
argument_list|()
init|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|;
name|PreparedStatement
name|pstmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"values 1"
argument_list|)
init|)
block|{
comment|// drop
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|drop
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|drop
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Statement did not return a result set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|(
name|drop
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// create
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|create
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|drop
argument_list|)
argument_list|)
expr_stmt|;
comment|// tidy up
try|try
block|{
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|create
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Statement did not return a result set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|drop
argument_list|)
argument_list|)
expr_stmt|;
comment|// tidy up
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|(
name|create
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|insert
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|insert
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Statement did not return a result set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|(
name|insert
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// update
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|update
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Statement did not return a result set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|messages
init|=
block|{
literal|"Cannot call executeQuery(String) on prepared or callable statement"
block|,
literal|"Cannot call execute(String) on prepared or callable statement"
block|,
literal|"Cannot call executeUpdate(String) on prepared or callable statement"
block|,       }
decl_stmt|;
for|for
control|(
name|String
name|sql
range|:
operator|new
name|String
index|[]
block|{
name|drop
block|,
name|create
block|,
name|insert
block|,
name|update
block|}
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Object
name|o
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|o
operator|=
name|pstmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|o
operator|=
name|pstmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
break|break;
default|default:
name|o
operator|=
name|pstmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypeHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|query
init|=
literal|"select * from EMP"
decl_stmt|;
try|try
init|(
name|Connection
name|cannon
init|=
name|canon
argument_list|()
init|;
name|Connection
name|underTest
init|=
name|getLocalConnection
argument_list|()
init|;
name|Statement
name|s1
init|=
name|cannon
operator|.
name|createStatement
argument_list|()
init|;
name|Statement
name|s2
init|=
name|underTest
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|s1
operator|.
name|execute
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s2
operator|.
name|execute
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultSetsEqual
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertResultSetsEqual
parameter_list|(
name|Statement
name|s1
parameter_list|,
name|Statement
name|s2
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|TimeZone
name|moscowTz
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Europe/Moscow"
argument_list|)
decl_stmt|;
specifier|final
name|Calendar
name|moscowCalendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|moscowTz
argument_list|)
decl_stmt|;
specifier|final
name|TimeZone
name|alaskaTz
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Anchorage"
argument_list|)
decl_stmt|;
specifier|final
name|Calendar
name|alaskaCalendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|alaskaTz
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs1
init|=
name|s1
operator|.
name|getResultSet
argument_list|()
init|;
name|ResultSet
name|rs2
init|=
name|s2
operator|.
name|getResultSet
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
name|rs1
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|,
name|rs2
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|colCount
init|=
name|rs1
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs1
operator|.
name|next
argument_list|()
operator|&&
name|rs2
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o1
init|=
name|rs1
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Object
name|o2
init|=
name|rs2
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Integer
operator|&&
name|o2
operator|instanceof
name|Short
condition|)
block|{
comment|// Hsqldb returns Integer for short columns; we prefer Short
name|o1
operator|=
operator|(
operator|(
name|Number
operator|)
name|o1
operator|)
operator|.
name|shortValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|o1
operator|instanceof
name|Integer
operator|&&
name|o2
operator|instanceof
name|Byte
condition|)
block|{
comment|// Hsqldb returns Integer for tinyint columns; we prefer Byte
name|o1
operator|=
operator|(
operator|(
name|Number
operator|)
name|o1
operator|)
operator|.
name|byteValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|o1
operator|instanceof
name|Date
condition|)
block|{
name|Date
name|d1
init|=
name|rs1
operator|.
name|getDate
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|moscowCalendar
argument_list|)
decl_stmt|;
name|Date
name|d2
init|=
name|rs2
operator|.
name|getDate
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|moscowCalendar
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|d1
operator|=
name|rs1
operator|.
name|getDate
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|alaskaCalendar
argument_list|)
expr_stmt|;
name|d2
operator|=
name|rs2
operator|.
name|getDate
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|alaskaCalendar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|d1
operator|=
name|rs1
operator|.
name|getDate
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|d2
operator|=
name|rs2
operator|.
name|getDate
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|d1
operator|=
name|rs1
operator|.
name|getDate
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|d2
operator|=
name|rs2
operator|.
name|getDate
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o1
operator|instanceof
name|Timestamp
condition|)
block|{
name|Timestamp
name|d1
init|=
name|rs1
operator|.
name|getTimestamp
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|moscowCalendar
argument_list|)
decl_stmt|;
name|Timestamp
name|d2
init|=
name|rs2
operator|.
name|getTimestamp
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|moscowCalendar
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|d1
operator|=
name|rs1
operator|.
name|getTimestamp
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|alaskaCalendar
argument_list|)
expr_stmt|;
name|d2
operator|=
name|rs2
operator|.
name|getTimestamp
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|alaskaCalendar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|d1
operator|=
name|rs1
operator|.
name|getTimestamp
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|d2
operator|=
name|rs2
operator|.
name|getTimestamp
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|d1
operator|=
name|rs1
operator|.
name|getTimestamp
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|d2
operator|=
name|rs2
operator|.
name|getTimestamp
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|rs1
operator|.
name|next
argument_list|()
argument_list|,
name|rs2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Callback to set parameters on each prepared statement before    * each is executed and the result sets compared. */
interface|interface
name|PreparedStatementFunction
block|{
name|void
name|apply
parameter_list|(
name|PreparedStatement
name|s1
parameter_list|,
name|PreparedStatement
name|s2
parameter_list|)
throws|throws
name|SQLException
function_decl|;
block|}
comment|/** Callback to execute some code against a connection. */
interface|interface
name|ConnectionFunction
block|{
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetParameter
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkSetParameter
argument_list|(
literal|"select ? from (values 1)"
argument_list|,
operator|new
name|PreparedStatementFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|PreparedStatement
name|s1
parameter_list|,
name|PreparedStatement
name|s2
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
literal|1234567890
argument_list|)
decl_stmt|;
name|s1
operator|.
name|setDate
argument_list|(
literal|1
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|s2
operator|.
name|setDate
argument_list|(
literal|1
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|checkSetParameter
argument_list|(
literal|"select ? from (values 1)"
argument_list|,
operator|new
name|PreparedStatementFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|PreparedStatement
name|s1
parameter_list|,
name|PreparedStatement
name|s2
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
literal|123456789012L
argument_list|)
decl_stmt|;
name|s1
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|s2
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|checkSetParameter
parameter_list|(
name|String
name|query
parameter_list|,
name|PreparedStatementFunction
name|fn
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
init|(
name|Connection
name|cannon
init|=
name|canon
argument_list|()
init|;
name|Connection
name|underTest
init|=
name|ljs
argument_list|()
init|;
name|PreparedStatement
name|s1
init|=
name|cannon
operator|.
name|prepareStatement
argument_list|(
name|query
argument_list|)
init|;
name|PreparedStatement
name|s2
init|=
name|underTest
operator|.
name|prepareStatement
argument_list|(
name|query
argument_list|)
init|)
block|{
name|fn
operator|.
name|apply
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s1
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s2
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|assertResultSetsEqual
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatementLifecycle
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|connection
init|=
operator|(
name|AvaticaConnection
operator|)
name|getLocalConnection
argument_list|()
init|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|AvaticaStatement
argument_list|>
name|clientMap
init|=
name|connection
operator|.
name|statementMap
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|serverMap
init|=
name|getLocalConnectionInternals
argument_list|()
operator|.
name|getRemoteStatementMap
argument_list|(
name|connection
argument_list|)
decl_stmt|;
comment|// Other tests being run might leave statements in the cache.
comment|// The lock guards against more statements being cached during the test.
name|serverMap
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clientMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serverMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionIsolation
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|connectionMap
init|=
name|getLocalConnectionInternals
argument_list|()
operator|.
name|getRemoteConnectionMap
argument_list|(
operator|(
name|AvaticaConnection
operator|)
name|getLocalConnection
argument_list|()
argument_list|)
decl_stmt|;
comment|// Other tests being run might leave connections in the cache.
comment|// The lock guards against more connections being cached during the test.
name|connectionMap
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select * from (values (1, 'a'))"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"connection cache should start empty"
argument_list|,
literal|0
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Connection
name|conn1
init|=
name|getLocalConnection
argument_list|()
decl_stmt|;
name|Connection
name|conn2
init|=
name|getLocalConnection
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"we now have two connections open"
argument_list|,
literal|2
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PreparedStatement
name|conn1stmt1
init|=
name|conn1
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"creating a statement does not cause new connection"
argument_list|,
literal|2
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PreparedStatement
name|conn2stmt1
init|=
name|conn2
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"creating a statement does not cause new connection"
argument_list|,
literal|2
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AvaticaPreparedStatement
name|s1
init|=
operator|(
name|AvaticaPreparedStatement
operator|)
name|conn1stmt1
decl_stmt|;
name|AvaticaPreparedStatement
name|s2
init|=
operator|(
name|AvaticaPreparedStatement
operator|)
name|conn2stmt1
decl_stmt|;
name|assertFalse
argument_list|(
literal|"connection id's should be unique"
argument_list|,
name|s1
operator|.
name|handle
operator|.
name|connectionId
operator|.
name|equalsIgnoreCase
argument_list|(
name|s2
operator|.
name|handle
operator|.
name|connectionId
argument_list|)
argument_list|)
expr_stmt|;
name|conn2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"closing a connection closes the server-side connection"
argument_list|,
literal|1
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"closing a connection closes the server-side connection"
argument_list|,
literal|0
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareBindExecuteFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getRequestInspection
argument_list|()
operator|.
name|getRequestLogger
argument_list|()
operator|.
name|enableAndClear
argument_list|()
expr_stmt|;
name|checkPrepareBindExecuteFetch
argument_list|(
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|x
init|=
name|getRequestInspection
argument_list|()
operator|.
name|getRequestLogger
argument_list|()
operator|.
name|getAndDisable
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|pair
range|:
name|x
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pair
index|[
literal|0
index|]
operator|+
literal|"="
operator|+
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkPrepareBindExecuteFetch
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select cast(? as integer) * 3 as c, 'x' as x\n"
operator|+
literal|"from (values (1, 'a'))"
decl_stmt|;
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|ps
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"X"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ResultSet
name|resultSet
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|resultSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"exception while executing query: unbound parameter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ParameterMetaData
name|parameterMetaData
init|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet2
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|resultSet2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet2
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet2
operator|.
name|wasNull
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet2
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|setObject
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet3
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet3
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet3
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet3
operator|.
name|wasNull
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet3
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet3
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareBindExecuteFetchVarbinary
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Connection
name|connection
init|=
name|getLocalConnection
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select x'de' || ? as c from (values (1, 'a'))"
decl_stmt|;
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|ParameterMetaData
name|parameterMetaData
init|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setBytes
argument_list|(
literal|1
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|65
block|,
literal|0
block|,
literal|66
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xDE
block|,
literal|65
block|,
literal|0
block|,
literal|66
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareBindExecuteFetchDate
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|checkPrepareBindExecuteFetchDate
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkPrepareBindExecuteFetchDate
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql0
init|=
literal|"select cast(? as varchar(20)) as c\n"
operator|+
literal|"from (values (1, 'a'))"
decl_stmt|;
specifier|final
name|String
name|sql1
init|=
literal|"select ? + interval '2' day as c from (values (1, 'a'))"
decl_stmt|;
specifier|final
name|Date
name|date
init|=
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2015-04-08"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|time
init|=
name|date
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|PreparedStatement
name|ps
decl_stmt|;
name|ParameterMetaData
name|parameterMetaData
decl_stmt|;
name|ResultSet
name|resultSet
decl_stmt|;
name|ps
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql0
argument_list|)
expr_stmt|;
name|parameterMetaData
operator|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setDate
argument_list|(
literal|1
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"2015-04-08"
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"2015-04-08 00:00:00.0"
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setTime
argument_list|(
literal|1
argument_list|,
operator|new
name|Time
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"00:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql1
argument_list|)
expr_stmt|;
name|parameterMetaData
operator|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setDate
argument_list|(
literal|1
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getDate
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Date
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setObject
argument_list|(
literal|1
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getDate
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Date
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|checkDatabaseProperty
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkDatabaseProperty
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|DatabaseMetaData
name|metaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|getSQLKeywords
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|getStringFunctions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"ASCII,CHAR,CONCAT,DIFFERENCE,HEXTORAW,INSERT,LCASE,LEFT,"
operator|+
literal|"LENGTH,LOCATE,LTRIM,RAWTOHEX,REPEAT,REPLACE,RIGHT,RTRIM,SOUNDEX,"
operator|+
literal|"SPACE,SUBSTR,UCASE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|getDefaultTransactionIsolation
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Connection
operator|.
name|TRANSACTION_READ_COMMITTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|executeBatchUpdate
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeBatchUpdate
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"BATCH_EXECUTE"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|createCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table if not exists %s ("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(10) not null)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to create table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|createCommand
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|updatePrefix
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %s values("
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|stmt
operator|.
name|addBatch
argument_list|(
name|updatePrefix
operator|+
name|i
operator|+
literal|", '"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|updateCounts
init|=
name|stmt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of update counts returned"
argument_list|,
name|numRows
argument_list|,
name|updateCounts
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updateCounts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected update count at index "
operator|+
name|i
argument_list|,
literal|1
argument_list|,
name|updateCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY id asc"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet was null"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ResultSet should have a result"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong integer value for row "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong string value for row "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"ResultSet should have no more records"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreparedBatches
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|executePreparedBatchUpdate
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executePreparedBatchUpdate
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"PREPARED_BATCH_EXECUTE"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|createCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table if not exists %s ("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(10) not null)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to create table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|createCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|insertSql
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %s values(?, ?)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|insertSql
argument_list|)
init|)
block|{
comment|// Add batches with the prepared statement
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|pstmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|int
index|[]
name|updateCounts
init|=
name|pstmt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of update counts returned"
argument_list|,
name|numRows
argument_list|,
name|updateCounts
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updateCounts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected update count at index "
operator|+
name|i
argument_list|,
literal|1
argument_list|,
name|updateCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY id asc"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet was null"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ResultSet should have a result"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong integer value for row "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong string value for row "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"ResultSet should have no more records"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreparedInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|executePreparedInsert
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executePreparedInsert
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"PREPARED_INSERT_EXECUTE"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|createCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table if not exists %s ("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(10) not null)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to create table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|createCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|insertSql
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %s values(?, ?)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|insertSql
argument_list|)
init|)
block|{
comment|// Add batches with the prepared statement
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|pstmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY id asc"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet was null"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ResultSet should have a result"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong integer value for row "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong string value for row "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"ResultSet should have no more records"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreparedInsertWithNulls
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|executePreparedInsertWithNulls
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executePreparedInsertWithNulls
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"PREPARED_INSERT_EXECUTE_NULLS"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|createCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table if not exists %s ("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(10))"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to create table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|createCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|insertSql
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %s values(?, ?)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|insertSql
argument_list|)
init|)
block|{
comment|// Add batches with the prepared statement
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|pstmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Even inserts are non-null, odd are null
if|if
condition|(
literal|0
operator|==
name|i
operator|%
literal|2
condition|)
block|{
name|pstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pstmt
operator|.
name|setNull
argument_list|(
literal|2
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY id asc"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet was null"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ResultSet should have a result"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong integer value for row "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|i
operator|%
literal|2
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Wrong string value for row "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"Expected null value for row "
operator|+
name|i
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"ResultSet should have no more records"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchInsertWithNulls
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|executeBatchInsertWithNulls
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeBatchInsertWithNulls
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"BATCH_INSERT_EXECUTE_NULLS"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|createCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table if not exists %s ("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(10))"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to create table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|createCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|insertSql
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %s values(?, ?)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|insertSql
argument_list|)
init|)
block|{
comment|// Add batches with the prepared statement
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|pstmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Even inserts are non-null, odd are null
if|if
condition|(
literal|0
operator|==
name|i
operator|%
literal|2
condition|)
block|{
name|pstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pstmt
operator|.
name|setNull
argument_list|(
literal|2
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
name|pstmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
comment|// Verify that all updates were successful
name|int
index|[]
name|updateCounts
init|=
name|pstmt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numRows
argument_list|,
name|updateCounts
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRows
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|expectedCounts
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedCounts
argument_list|,
name|updateCounts
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY id asc"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet was null"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ResultSet should have a result"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong integer value for row "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|i
operator|%
literal|2
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Wrong string value for row "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"Expected null value for row "
operator|+
name|i
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"ResultSet should have no more records"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|preparedStatementParameterCopies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When implementing the JDBC batch APIs, it's important that we are copying the
comment|// TypedValues and caching them in the AvaticaPreparedStatement. Otherwise, when we submit
comment|// the batch, the parameter values for the last update added will be reflected in all previous
comment|// updates added to the batch.
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"PREPAREDSTATEMENT_VALUES"
argument_list|)
decl_stmt|;
specifier|final
name|Connection
name|conn
init|=
name|getLocalConnection
argument_list|()
decl_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|sql
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id varchar(1) not null, col1 varchar(1) not null)"
decl_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values(?, ?)"
argument_list|)
init|)
block|{
name|pstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|AvaticaPreparedStatement
name|apstmt
init|=
operator|(
name|AvaticaPreparedStatement
operator|)
name|pstmt
decl_stmt|;
name|TypedValue
index|[]
name|slots
init|=
name|apstmt
operator|.
name|slots
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of values"
argument_list|,
literal|2
argument_list|,
name|slots
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypedValue
argument_list|>
name|valuesReference
init|=
name|apstmt
operator|.
name|getParameterValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|valuesReference
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slots
index|[
literal|0
index|]
argument_list|,
name|valuesReference
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slots
index|[
literal|1
index|]
argument_list|,
name|valuesReference
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypedValue
argument_list|>
name|copiedValues
init|=
name|apstmt
operator|.
name|copyParameterValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|valuesReference
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slots
index|[
literal|0
index|]
argument_list|,
name|copiedValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slots
index|[
literal|1
index|]
argument_list|,
name|copiedValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|slots
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|slots
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
comment|// Modifications to the array are reflected in the List from getParameterValues()
name|assertNull
argument_list|(
name|valuesReference
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|valuesReference
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// copyParameterValues() copied the underlying array, so updates to slots is not reflected
name|assertNotNull
argument_list|(
name|copiedValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|copiedValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchInsertWithDates
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|executeBatchInsertWithDates
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeBatchInsertWithDates
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|calendar
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"BATCH_INSERT_EXECUTE_DATES"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|dropCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"drop table if exists %s"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to drop table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|dropCommand
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|createCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table %s ("
operator|+
literal|"id char(15) not null, "
operator|+
literal|"created_date date not null, "
operator|+
literal|"val_string varchar)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to create table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|createCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|insertSql
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %s values(?, ?, ?)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|insertSql
argument_list|)
init|)
block|{
comment|// Add batches with the prepared statement
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|pstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setDate
argument_list|(
literal|2
argument_list|,
operator|new
name|Date
argument_list|(
name|now
operator|+
name|i
argument_list|)
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
comment|// Verify that all updates were successful
name|int
index|[]
name|updateCounts
init|=
name|pstmt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numRows
argument_list|,
name|updateCounts
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRows
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|expectedCounts
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedCounts
argument_list|,
name|updateCounts
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY id asc"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet was null"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ResultSet should have a result"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value for row "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|actual
init|=
name|rs
operator|.
name|getDate
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|int
name|actualDay
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
name|int
name|actualMonth
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|actualYear
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|Date
name|expected
init|=
operator|new
name|Date
argument_list|(
name|now
operator|+
name|i
argument_list|)
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|int
name|expectedDay
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
name|int
name|expectedMonth
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|expectedYear
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong day for row "
operator|+
name|i
argument_list|,
name|expectedDay
argument_list|,
name|actualDay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong month for row "
operator|+
name|i
argument_list|,
name|expectedMonth
argument_list|,
name|actualMonth
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong year for row "
operator|+
name|i
argument_list|,
name|expectedYear
argument_list|,
name|actualYear
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Non-null string for row "
operator|+
name|i
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"ResultSet should have no more records"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseMetaData
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|getLocalConnection
argument_list|()
init|)
block|{
name|DatabaseMetaData
name|metadata
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metadata
operator|.
name|isWrapperFor
argument_list|(
name|AvaticaSpecificDatabaseMetaData
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata
operator|.
name|isWrapperFor
argument_list|(
name|Properties
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|metadata
operator|.
name|unwrap
argument_list|(
name|Properties
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|productName
init|=
name|props
operator|.
name|get
argument_list|(
name|DatabaseProperty
operator|.
name|GET_DATABASE_PRODUCT_NAME
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|productName
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|productName
argument_list|,
name|startsWith
argument_list|(
literal|"HSQL"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|driverName
init|=
name|props
operator|.
name|get
argument_list|(
name|DatabaseProperty
operator|.
name|GET_DRIVER_NAME
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|driverName
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|driverName
argument_list|,
name|startsWith
argument_list|(
literal|"HSQL"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|driverVersion
init|=
name|props
operator|.
name|get
argument_list|(
name|DatabaseProperty
operator|.
name|GET_DRIVER_VERSION
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|driverMinVersion
init|=
name|props
operator|.
name|get
argument_list|(
name|DatabaseProperty
operator|.
name|GET_DRIVER_MINOR_VERSION
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|driverMajVersion
init|=
name|props
operator|.
name|get
argument_list|(
name|DatabaseProperty
operator|.
name|GET_DRIVER_MAJOR_VERSION
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|driverVersion
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|driverMinVersion
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|driverMajVersion
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|driverVersion
argument_list|,
name|startsWith
argument_list|(
name|driverMajVersion
operator|+
literal|"."
operator|+
name|driverMinVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnicodeColumnNames
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"unicodeColumn"
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
literal|"ÐÐ¾Ð¼ÐµÑÐ¢ÐµÐ»ÐµÑÐ¾Ð½Ð°"
decl_stmt|;
comment|// PhoneNumber in Russian
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|getLocalConnection
argument_list|()
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"("
operator|+
name|columnName
operator|+
literal|" integer)"
decl_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|ResultSetMetaData
name|metadata
init|=
name|results
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|String
name|actualColumnName
init|=
name|metadata
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// HSQLDB is going to upper-case the column name
name|assertEquals
argument_list|(
name|columnName
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|actualColumnName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigDecimalPrecision
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"decimalPrecision"
decl_stmt|;
comment|// DECIMAL(25,5), 20 before, 5 after
name|BigDecimal
name|decimal
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"12345123451234512345.09876"
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|getLocalConnection
argument_list|()
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (col1 DECIMAL(25,5))"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert a single decimal
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values (?)"
argument_list|)
init|)
block|{
name|pstmt
operator|.
name|setBigDecimal
argument_list|(
literal|1
argument_list|,
name|decimal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|BigDecimal
name|actualDecimal
init|=
name|results
operator|.
name|getBigDecimal
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|decimal
argument_list|,
name|actualDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreparedClearBatches
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|executePreparedBatchClears
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executePreparedBatchClears
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"BATCH_CLEARS"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|createCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table if not exists %s ("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(10) not null)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to create table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|createCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|insertSql
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %s values(?, ?)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|insertSql
argument_list|)
init|)
block|{
comment|// Add batches with the prepared statement
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|pstmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
if|if
condition|(
name|numRows
operator|/
literal|2
operator|-
literal|1
operator|==
name|i
condition|)
block|{
comment|// Clear the first 5 entries in the batch
name|pstmt
operator|.
name|clearBatch
argument_list|()
expr_stmt|;
block|}
block|}
name|int
index|[]
name|updateCounts
init|=
name|pstmt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of update counts returned"
argument_list|,
name|numRows
operator|/
literal|2
argument_list|,
name|updateCounts
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updateCounts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected update count at index "
operator|+
name|i
argument_list|,
literal|1
argument_list|,
name|updateCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY id asc"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet was null"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
operator|+
operator|(
name|numRows
operator|/
literal|2
operator|)
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ResultSet should have a result"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong integer value for row "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong string value for row "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"ResultSet should have no more records"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchClear
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|eachConnection
argument_list|(
operator|new
name|ConnectionFunction
argument_list|()
block|{
specifier|public
name|void
name|apply
parameter_list|(
name|Connection
name|c1
parameter_list|)
throws|throws
name|Exception
block|{
name|executeBatchClear
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|getLocalConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeBatchClear
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|tableName
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"BATCH_EXECUTE"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|createCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create table if not exists %s ("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(10) not null)"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed to create table"
argument_list|,
name|stmt
operator|.
name|execute
argument_list|(
name|createCommand
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|updatePrefix
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INSERT INTO %s values("
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|stmt
operator|.
name|addBatch
argument_list|(
name|updatePrefix
operator|+
name|i
operator|+
literal|", '"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|+
literal|"')"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRows
operator|/
literal|2
operator|-
literal|1
operator|==
name|i
condition|)
block|{
name|stmt
operator|.
name|clearBatch
argument_list|()
expr_stmt|;
block|}
block|}
name|int
index|[]
name|updateCounts
init|=
name|stmt
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of update counts returned"
argument_list|,
name|numRows
operator|/
literal|2
argument_list|,
name|updateCounts
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updateCounts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected update count at index "
operator|+
name|i
argument_list|,
literal|1
argument_list|,
name|updateCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY id asc"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet was null"
argument_list|,
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
operator|+
operator|(
name|numRows
operator|/
literal|2
operator|)
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"ResultSet should have a result"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong integer value for row "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong string value for row "
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"ResultSet should have no more records"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalParameters
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"decimalParameters"
decl_stmt|;
name|BigDecimal
name|decimal
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"123451234512345"
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|getLocalConnection
argument_list|()
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (keycolumn VARCHAR(5), column1 DECIMAL(15,0))"
decl_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert a single decimal
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values (?, ?)"
argument_list|)
init|)
block|{
name|ParameterMetaData
name|metadata
init|=
name|pstmt
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|metadata
operator|.
name|getPrecision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metadata
operator|.
name|getScale
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|metadata
operator|.
name|getPrecision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metadata
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"asdfg"
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setBigDecimal
argument_list|(
literal|2
argument_list|,
name|decimal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|BigDecimal
name|actualDecimal
init|=
name|results
operator|.
name|getBigDecimal
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|decimal
argument_list|,
name|actualDecimal
argument_list|)
expr_stmt|;
name|ResultSetMetaData
name|resultMetadata
init|=
name|results
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|resultMetadata
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|resultMetadata
operator|.
name|getPrecision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultMetadata
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedParameters
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"signedParameters"
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|getLocalConnection
argument_list|()
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (keycolumn VARCHAR(5), column1 integer)"
decl_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert a single decimal
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values (?, ?)"
argument_list|)
init|)
block|{
name|ParameterMetaData
name|metadata
init|=
name|pstmt
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Varchar should not be signed"
argument_list|,
name|metadata
operator|.
name|isSigned
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Integer should be signed"
argument_list|,
name|metadata
operator|.
name|isSigned
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"asdfg"
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"asdfg"
argument_list|,
name|results
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSetMetaData
name|resultMetadata
init|=
name|results
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|resultMetadata
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Varchar should not be signed"
argument_list|,
name|resultMetadata
operator|.
name|isSigned
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Integer should be signed"
argument_list|,
name|resultMetadata
operator|.
name|isSigned
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateParameterWithGMT0
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"dateParameters"
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|getLocalConnection
argument_list|()
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (keycolumn VARCHAR(5), column1 date)"
decl_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|TimeZone
name|tzUtc
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
name|Calendar
name|cUtc
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|tzUtc
argument_list|)
decl_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|1970
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|inputDate
init|=
operator|new
name|Date
argument_list|(
name|cUtc
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
comment|// Insert a single date
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values (?, ?)"
argument_list|)
init|)
block|{
name|ParameterMetaData
name|metadata
init|=
name|pstmt
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"asdfg"
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setDate
argument_list|(
literal|2
argument_list|,
name|inputDate
argument_list|,
name|cUtc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"asdfg"
argument_list|,
name|results
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Date
name|outputDate
init|=
name|results
operator|.
name|getDate
argument_list|(
literal|2
argument_list|,
name|cUtc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|inputDate
operator|.
name|getTime
argument_list|()
argument_list|,
name|outputDate
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outputDate
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateParameterWithGMTN
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"dateParameters"
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|getLocalConnection
argument_list|()
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (keycolumn VARCHAR(5), column1 date)"
decl_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|TimeZone
name|tzUtc
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT+8"
argument_list|)
decl_stmt|;
name|Calendar
name|cUtc
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|tzUtc
argument_list|)
decl_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|1970
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cUtc
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|inputDate
init|=
operator|new
name|Date
argument_list|(
name|cUtc
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
comment|// Insert a single date
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values (?, ?)"
argument_list|)
init|)
block|{
name|ParameterMetaData
name|metadata
init|=
name|pstmt
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"gfdsa"
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setDate
argument_list|(
literal|2
argument_list|,
name|inputDate
argument_list|,
name|cUtc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"gfdsa"
argument_list|,
name|results
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Date
name|outputDate
init|=
name|results
operator|.
name|getDate
argument_list|(
literal|2
argument_list|,
name|cUtc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|inputDate
operator|.
name|getTime
argument_list|()
argument_list|,
name|outputDate
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|28800000
argument_list|,
name|outputDate
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Factory that creates a service based on a local JDBC connection.    */
specifier|public
specifier|static
class|class
name|LocalJdbcServiceFactory
implements|implements
name|Service
operator|.
name|Factory
block|{
annotation|@
name|Override
specifier|public
name|Service
name|create
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|LocalService
argument_list|(
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Factory that creates a fully-local Protobuf service.    */
specifier|public
specifier|static
class|class
name|QuasiRemotePBJdbcServiceFactory
implements|implements
name|Service
operator|.
name|Factory
block|{
specifier|private
specifier|static
name|Service
name|service
decl_stmt|;
specifier|private
specifier|static
name|RequestInspection
name|requestInspection
decl_stmt|;
specifier|static
name|void
name|initService
parameter_list|()
block|{
try|try
block|{
specifier|final
name|JdbcMeta
name|jdbcMeta
init|=
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
decl_stmt|;
specifier|final
name|LocalService
name|localService
init|=
operator|new
name|LocalService
argument_list|(
name|jdbcMeta
argument_list|)
decl_stmt|;
name|service
operator|=
operator|new
name|LoggingLocalProtobufService
argument_list|(
name|localService
argument_list|,
operator|new
name|ProtobufTranslationImpl
argument_list|()
argument_list|)
expr_stmt|;
name|requestInspection
operator|=
operator|(
name|RequestInspection
operator|)
name|service
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Service
name|create
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
assert|assert
literal|null
operator|!=
name|service
assert|;
return|return
name|service
return|;
block|}
block|}
comment|/**    * Proxy that logs all requests passed into the {@link LocalProtobufService}.    */
specifier|public
specifier|static
class|class
name|LoggingLocalProtobufService
extends|extends
name|LocalProtobufService
implements|implements
name|RequestInspection
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|RequestLogger
argument_list|>
name|THREAD_LOG
init|=
operator|new
name|ThreadLocal
argument_list|<
name|RequestLogger
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|RequestLogger
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|RequestLogger
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|LoggingLocalProtobufService
parameter_list|(
name|Service
name|service
parameter_list|,
name|ProtobufTranslation
name|translation
parameter_list|)
block|{
name|super
argument_list|(
name|service
argument_list|,
name|translation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RequestLogger
name|getRequestLogger
parameter_list|()
block|{
return|return
name|THREAD_LOG
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|_apply
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
specifier|final
name|RequestLogger
name|logger
init|=
name|THREAD_LOG
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|jsonRequest
init|=
name|JsonService
operator|.
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|logger
operator|.
name|requestStart
argument_list|(
name|jsonRequest
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|super
operator|.
name|_apply
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
name|jsonResponse
init|=
name|JsonService
operator|.
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|logger
operator|.
name|requestEnd
argument_list|(
name|jsonRequest
argument_list|,
name|jsonResponse
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Factory that creates a service based on a local JDBC connection.    */
specifier|public
specifier|static
class|class
name|QuasiRemoteJdbcServiceFactory
implements|implements
name|Service
operator|.
name|Factory
block|{
comment|/** a singleton instance that is recreated for each test */
specifier|private
specifier|static
name|Service
name|service
decl_stmt|;
specifier|private
specifier|static
name|RequestInspection
name|requestInspection
decl_stmt|;
specifier|static
name|void
name|initService
parameter_list|()
block|{
try|try
block|{
specifier|final
name|JdbcMeta
name|jdbcMeta
init|=
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
decl_stmt|;
specifier|final
name|LocalService
name|localService
init|=
operator|new
name|LocalService
argument_list|(
name|jdbcMeta
argument_list|)
decl_stmt|;
name|service
operator|=
operator|new
name|LoggingLocalJsonService
argument_list|(
name|localService
argument_list|)
expr_stmt|;
name|requestInspection
operator|=
operator|(
name|RequestInspection
operator|)
name|service
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Service
name|create
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
assert|assert
name|service
operator|!=
literal|null
assert|;
return|return
name|service
return|;
block|}
block|}
comment|/**    * Implementation that reaches into current connection state via reflection to extract certain    * internal information.    */
specifier|public
specifier|static
class|class
name|QuasiRemoteJdbcServiceInternals
implements|implements
name|ConnectionInternals
block|{
annotation|@
name|Override
specifier|public
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|getRemoteStatementMap
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|metaF
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|metaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Meta
name|clientMeta
init|=
operator|(
name|Meta
operator|)
name|metaF
operator|.
name|get
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceF
init|=
name|clientMeta
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalJsonService
name|remoteMetaService
init|=
operator|(
name|LocalJsonService
operator|)
name|remoteMetaServiceF
operator|.
name|get
argument_list|(
name|clientMeta
argument_list|)
decl_stmt|;
comment|// Use the explicitly class to avoid issues with LoggingLocalJsonService
name|Field
name|remoteMetaServiceServiceF
init|=
name|LocalJsonService
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalService
name|remoteMetaServiceService
init|=
operator|(
name|LocalService
operator|)
name|remoteMetaServiceServiceF
operator|.
name|get
argument_list|(
name|remoteMetaService
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceServiceMetaF
init|=
name|remoteMetaServiceService
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceMetaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JdbcMeta
name|serverMeta
init|=
operator|(
name|JdbcMeta
operator|)
name|remoteMetaServiceServiceMetaF
operator|.
name|get
argument_list|(
name|remoteMetaServiceService
argument_list|)
decl_stmt|;
name|Field
name|jdbcMetaStatementMapF
init|=
name|JdbcMeta
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"statementCache"
argument_list|)
decl_stmt|;
name|jdbcMetaStatementMapF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|(
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
operator|)
name|jdbcMetaStatementMapF
operator|.
name|get
argument_list|(
name|serverMeta
argument_list|)
decl_stmt|;
return|return
name|cache
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|getRemoteConnectionMap
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|metaF
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|metaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Meta
name|clientMeta
init|=
operator|(
name|Meta
operator|)
name|metaF
operator|.
name|get
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceF
init|=
name|clientMeta
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalJsonService
name|remoteMetaService
init|=
operator|(
name|LocalJsonService
operator|)
name|remoteMetaServiceF
operator|.
name|get
argument_list|(
name|clientMeta
argument_list|)
decl_stmt|;
comment|// Get the field explicitly off the correct class to avoid LocalLoggingJsonService.class
name|Field
name|remoteMetaServiceServiceF
init|=
name|LocalJsonService
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalService
name|remoteMetaServiceService
init|=
operator|(
name|LocalService
operator|)
name|remoteMetaServiceServiceF
operator|.
name|get
argument_list|(
name|remoteMetaService
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceServiceMetaF
init|=
name|remoteMetaServiceService
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceMetaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JdbcMeta
name|serverMeta
init|=
operator|(
name|JdbcMeta
operator|)
name|remoteMetaServiceServiceMetaF
operator|.
name|get
argument_list|(
name|remoteMetaServiceService
argument_list|)
decl_stmt|;
name|Field
name|jdbcMetaConnectionCacheF
init|=
name|JdbcMeta
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"connectionCache"
argument_list|)
decl_stmt|;
name|jdbcMetaConnectionCacheF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|cache
init|=
operator|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
operator|)
name|jdbcMetaConnectionCacheF
operator|.
name|get
argument_list|(
name|serverMeta
argument_list|)
decl_stmt|;
return|return
name|cache
return|;
block|}
block|}
comment|/**    * Implementation that reaches into current connection state via reflection to extract certain    * internal information.    */
specifier|public
specifier|static
class|class
name|QuasiRemoteProtobufJdbcServiceInternals
implements|implements
name|ConnectionInternals
block|{
annotation|@
name|Override
specifier|public
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|getRemoteStatementMap
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|metaF
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|metaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Meta
name|clientMeta
init|=
operator|(
name|Meta
operator|)
name|metaF
operator|.
name|get
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceF
init|=
name|clientMeta
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalProtobufService
name|remoteMetaService
init|=
operator|(
name|LocalProtobufService
operator|)
name|remoteMetaServiceF
operator|.
name|get
argument_list|(
name|clientMeta
argument_list|)
decl_stmt|;
comment|// Use the explicitly class to avoid issues with LoggingLocalJsonService
name|Field
name|remoteMetaServiceServiceF
init|=
name|LocalProtobufService
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalService
name|remoteMetaServiceService
init|=
operator|(
name|LocalService
operator|)
name|remoteMetaServiceServiceF
operator|.
name|get
argument_list|(
name|remoteMetaService
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceServiceMetaF
init|=
name|remoteMetaServiceService
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceMetaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JdbcMeta
name|serverMeta
init|=
operator|(
name|JdbcMeta
operator|)
name|remoteMetaServiceServiceMetaF
operator|.
name|get
argument_list|(
name|remoteMetaServiceService
argument_list|)
decl_stmt|;
name|Field
name|jdbcMetaStatementMapF
init|=
name|JdbcMeta
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"statementCache"
argument_list|)
decl_stmt|;
name|jdbcMetaStatementMapF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|(
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
operator|)
name|jdbcMetaStatementMapF
operator|.
name|get
argument_list|(
name|serverMeta
argument_list|)
decl_stmt|;
return|return
name|cache
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|getRemoteConnectionMap
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|metaF
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|metaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Meta
name|clientMeta
init|=
operator|(
name|Meta
operator|)
name|metaF
operator|.
name|get
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceF
init|=
name|clientMeta
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalProtobufService
name|remoteMetaService
init|=
operator|(
name|LocalProtobufService
operator|)
name|remoteMetaServiceF
operator|.
name|get
argument_list|(
name|clientMeta
argument_list|)
decl_stmt|;
comment|// Get the field explicitly off the correct class to avoid LocalLoggingJsonService.class
name|Field
name|remoteMetaServiceServiceF
init|=
name|LocalProtobufService
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalService
name|remoteMetaServiceService
init|=
operator|(
name|LocalService
operator|)
name|remoteMetaServiceServiceF
operator|.
name|get
argument_list|(
name|remoteMetaService
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceServiceMetaF
init|=
name|remoteMetaServiceService
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceMetaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JdbcMeta
name|serverMeta
init|=
operator|(
name|JdbcMeta
operator|)
name|remoteMetaServiceServiceMetaF
operator|.
name|get
argument_list|(
name|remoteMetaServiceService
argument_list|)
decl_stmt|;
name|Field
name|jdbcMetaConnectionCacheF
init|=
name|JdbcMeta
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"connectionCache"
argument_list|)
decl_stmt|;
name|jdbcMetaConnectionCacheF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|cache
init|=
operator|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
operator|)
name|jdbcMetaConnectionCacheF
operator|.
name|get
argument_list|(
name|serverMeta
argument_list|)
decl_stmt|;
return|return
name|cache
return|;
block|}
block|}
comment|/**    * Provides access to a log of requests.    */
interface|interface
name|RequestInspection
block|{
name|RequestLogger
name|getRequestLogger
parameter_list|()
function_decl|;
block|}
comment|/** Extension to {@link LocalJsonService} that writes requests and responses    * into a thread-local. */
specifier|private
specifier|static
class|class
name|LoggingLocalJsonService
extends|extends
name|LocalJsonService
implements|implements
name|RequestInspection
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|RequestLogger
argument_list|>
name|THREAD_LOG
init|=
operator|new
name|ThreadLocal
argument_list|<
name|RequestLogger
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|RequestLogger
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|RequestLogger
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|LoggingLocalJsonService
parameter_list|(
name|LocalService
name|localService
parameter_list|)
block|{
name|super
argument_list|(
name|localService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|request
parameter_list|)
block|{
specifier|final
name|RequestLogger
name|logger
init|=
name|THREAD_LOG
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|requestStart
argument_list|(
name|request
argument_list|)
expr_stmt|;
specifier|final
name|String
name|response
init|=
name|super
operator|.
name|apply
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|logger
operator|.
name|requestEnd
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|RequestLogger
name|getRequestLogger
parameter_list|()
block|{
return|return
name|THREAD_LOG
operator|.
name|get
argument_list|()
return|;
block|}
block|}
comment|/** Logs request and response strings if enabled. */
specifier|private
specifier|static
class|class
name|RequestLogger
block|{
specifier|final
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|requestResponses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|enabled
decl_stmt|;
name|void
name|enableAndClear
parameter_list|()
block|{
name|enabled
operator|=
literal|true
expr_stmt|;
name|requestResponses
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|requestStart
parameter_list|(
name|String
name|request
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|requestResponses
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|request
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|requestEnd
parameter_list|(
name|String
name|request
parameter_list|,
name|String
name|response
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|String
index|[]
name|last
init|=
name|requestResponses
operator|.
name|get
argument_list|(
name|requestResponses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|equals
argument_list|(
name|last
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
name|last
index|[
literal|1
index|]
operator|=
name|response
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|getAndDisable
parameter_list|()
block|{
name|enabled
operator|=
literal|false
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|requestResponses
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RemoteDriverTest.java
end_comment

end_unit

