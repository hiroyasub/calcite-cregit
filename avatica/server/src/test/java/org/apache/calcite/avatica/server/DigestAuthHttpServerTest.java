begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
operator|.
name|JdbcMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test class for HTTP Digest authentication.  */
end_comment

begin_class
specifier|public
class|class
name|DigestAuthHttpServerTest
extends|extends
name|HttpAuthBase
block|{
specifier|private
specifier|static
specifier|final
name|ConnectionSpec
name|CONNECTION_SPEC
init|=
name|ConnectionSpec
operator|.
name|HSQLDB
decl_stmt|;
specifier|private
specifier|static
name|HttpServer
name|server
decl_stmt|;
specifier|private
specifier|static
name|String
name|url
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|userPropertiesFile
init|=
name|BasicAuthHttpServerTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/auth-users.properties"
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find properties file for digest auth users"
argument_list|,
name|userPropertiesFile
argument_list|)
expr_stmt|;
comment|// Create a LocalService around HSQLDB
specifier|final
name|JdbcMeta
name|jdbcMeta
init|=
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
decl_stmt|;
name|LocalService
name|service
init|=
operator|new
name|LocalService
argument_list|(
name|jdbcMeta
argument_list|)
decl_stmt|;
name|server
operator|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|()
operator|.
name|withDigestAuthentication
argument_list|(
name|userPropertiesFile
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"users"
block|}
argument_list|)
operator|.
name|withHandler
argument_list|(
name|service
argument_list|,
name|Driver
operator|.
name|Serialization
operator|.
name|PROTOBUF
argument_list|)
operator|.
name|withPort
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|url
operator|=
literal|"jdbc:avatica:remote:url=http://localhost:"
operator|+
name|server
operator|.
name|getPort
argument_list|()
operator|+
literal|";authentication=DIGEST;serialization=PROTOBUF"
expr_stmt|;
comment|// Create and grant permissions to our users
name|createHsqldbUsers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|server
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Valid both with avatica and hsqldb
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_user"
argument_list|,
literal|"USER2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_password"
argument_list|,
literal|"password2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
literal|"USER2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"password2"
argument_list|)
expr_stmt|;
name|readWriteData
argument_list|(
name|url
argument_list|,
literal|"VALID_USER"
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidAvaticaValidDb
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Valid both with avatica and hsqldb
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_user"
argument_list|,
literal|"USER2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_password"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
literal|"USER2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"password2"
argument_list|)
expr_stmt|;
try|try
block|{
name|readWriteData
argument_list|(
name|url
argument_list|,
literal|"INVALID_AVATICA_VALID_DB"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"HTTP/401"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidAvaticaNoDb
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Valid both with avatica and hsqldb
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_user"
argument_list|,
literal|"USER2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_password"
argument_list|,
literal|"password2"
argument_list|)
expr_stmt|;
name|readWriteData
argument_list|(
name|url
argument_list|,
literal|"VALID_AVATICA_NO_DB"
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidAvaticaNoDb
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Valid both with avatica and hsqldb
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_user"
argument_list|,
literal|"USER2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_password"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
try|try
block|{
name|readWriteData
argument_list|(
name|url
argument_list|,
literal|"INVALID_AVATICA_NO_DB"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"HTTP/401"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Invalid avatica user
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_user"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_password"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|readWriteData
argument_list|(
name|url
argument_list|,
literal|"INVALID_USER"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"HTTP/401"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserWithDisallowedRole
parameter_list|()
throws|throws
name|Exception
block|{
comment|// User 4 is disallowed in avatica due to its roles
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_user"
argument_list|,
literal|"USER4"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_password"
argument_list|,
literal|"password4"
argument_list|)
expr_stmt|;
try|try
block|{
name|readWriteData
argument_list|(
name|url
argument_list|,
literal|"DISALLOWED_USER"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"HTTP/403"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowedAvaticaDisabledHsqldbUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Valid Avatica user, but an invalid database user
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_user"
argument_list|,
literal|"USER1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"avatica_password"
argument_list|,
literal|"password1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
literal|"USER1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"password1"
argument_list|)
expr_stmt|;
try|try
block|{
name|readWriteData
argument_list|(
name|url
argument_list|,
literal|"DISALLOWED_HSQLDB_USER"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Remote driver error: RuntimeException: "
operator|+
literal|"java.sql.SQLInvalidAuthorizationSpecException: invalid authorization specification"
operator|+
literal|" - not found: USER1"
operator|+
literal|" -> SQLInvalidAuthorizationSpecException: invalid authorization specification - "
operator|+
literal|"not found: USER1"
operator|+
literal|" -> HsqlException: invalid authorization specification - not found: USER1"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End DigestAuthHttpServerTest.java
end_comment

end_unit

