begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Common test logic for HTTP basic and digest auth  */
end_comment

begin_class
specifier|public
class|class
name|HttpAuthBase
block|{
specifier|static
name|boolean
name|userExists
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|SQLException
block|{
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM INFORMATION_SCHEMA.SYSTEM_USERS WHERE USER_NAME = '"
operator|+
name|user
operator|+
literal|"'"
argument_list|)
decl_stmt|;
return|return
name|results
operator|.
name|next
argument_list|()
return|;
block|}
specifier|static
name|void
name|createHsqldbUsers
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|ConnectionSpec
operator|.
name|HSQLDB
operator|.
name|url
argument_list|,
name|ConnectionSpec
operator|.
name|HSQLDB
operator|.
name|username
argument_list|,
name|ConnectionSpec
operator|.
name|HSQLDB
operator|.
name|password
argument_list|)
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// Users 2-5 exist (not user1)
specifier|final
name|String
name|username
init|=
literal|"USER"
operator|+
name|i
decl_stmt|;
specifier|final
name|String
name|password
init|=
literal|"password"
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|userExists
argument_list|(
name|stmt
argument_list|,
name|username
argument_list|)
condition|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP USER "
operator|+
name|username
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE USER "
operator|+
name|username
operator|+
literal|" PASSWORD '"
operator|+
name|password
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// Grant permission to the user we create (defined in the scottdb hsqldb impl)
name|stmt
operator|.
name|execute
argument_list|(
literal|"GRANT DBA TO "
operator|+
name|username
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|readWriteData
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|props
argument_list|)
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (pk integer, msg varchar(10))"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(1, 'abcd')"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(2, 'bcde')"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(3, 'cdef')"
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT count(1) FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End HttpAuthBase.java
end_comment

end_unit

