begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|SpnegoTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|AvaticaCommonsHttpClientSpnegoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|KrbException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|client
operator|.
name|JaasKrbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|client
operator|.
name|KrbConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|client
operator|.
name|KrbConfigKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|server
operator|.
name|SimpleKdcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSCredential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosTicket
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class for SPNEGO with Kerberos. Purely testing SPNEGO, not the Avatica "protocol" on top  * of that HTTP. This variant of the test requires that the user use JAAS configuration to  * perform server-side login.  */
end_comment

begin_class
specifier|public
class|class
name|HttpServerSpnegoWithJaasTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpServerSpnegoWithJaasTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SimpleKdcServer
name|kdc
decl_stmt|;
specifier|private
specifier|static
name|HttpServer
name|httpServer
decl_stmt|;
specifier|private
specifier|static
name|KrbConfig
name|clientConfig
decl_stmt|;
specifier|private
specifier|static
name|int
name|kdcPort
decl_stmt|;
specifier|private
specifier|static
name|File
name|clientKeytab
decl_stmt|;
specifier|private
specifier|static
name|File
name|serverKeytab
decl_stmt|;
specifier|private
specifier|static
name|File
name|serverSpnegoConfigFile
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|isKdcStarted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|isHttpServerStarted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|URL
name|httpServerUrl
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|kdc
operator|=
operator|new
name|SimpleKdcServer
argument_list|()
expr_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|kdcDir
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|HttpServerSpnegoWithJaasTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|kdcDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SpnegoTestUtil
operator|.
name|deleteRecursively
argument_list|(
name|kdcDir
argument_list|)
expr_stmt|;
block|}
name|kdcDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|setWorkDir
argument_list|(
name|kdcDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|setKdcHost
argument_list|(
name|SpnegoTestUtil
operator|.
name|KDC_HOST
argument_list|)
expr_stmt|;
name|kdcPort
operator|=
name|SpnegoTestUtil
operator|.
name|getFreePort
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|setAllowTcp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|setAllowUdp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|setKdcTcpPort
argument_list|(
name|kdcPort
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting KDC server at {}:{}"
argument_list|,
name|SpnegoTestUtil
operator|.
name|KDC_HOST
argument_list|,
name|kdcPort
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|init
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|isKdcStarted
operator|=
literal|true
expr_stmt|;
name|File
name|keytabDir
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|HttpServerSpnegoWithJaasTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_keytabs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|keytabDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SpnegoTestUtil
operator|.
name|deleteRecursively
argument_list|(
name|keytabDir
argument_list|)
expr_stmt|;
block|}
name|keytabDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|setupUsers
argument_list|(
name|keytabDir
argument_list|)
expr_stmt|;
name|clientConfig
operator|=
operator|new
name|KrbConfig
argument_list|()
expr_stmt|;
name|clientConfig
operator|.
name|setString
argument_list|(
name|KrbConfigKey
operator|.
name|KDC_HOST
argument_list|,
name|SpnegoTestUtil
operator|.
name|KDC_HOST
argument_list|)
expr_stmt|;
name|clientConfig
operator|.
name|setInt
argument_list|(
name|KrbConfigKey
operator|.
name|KDC_TCP_PORT
argument_list|,
name|kdcPort
argument_list|)
expr_stmt|;
name|clientConfig
operator|.
name|setString
argument_list|(
name|KrbConfigKey
operator|.
name|DEFAULT_REALM
argument_list|,
name|SpnegoTestUtil
operator|.
name|REALM
argument_list|)
expr_stmt|;
name|serverSpnegoConfigFile
operator|=
operator|new
name|File
argument_list|(
name|kdcDir
argument_list|,
literal|"server-spnego.conf"
argument_list|)
expr_stmt|;
name|SpnegoTestUtil
operator|.
name|writeSpnegoConf
argument_list|(
name|serverSpnegoConfigFile
argument_list|,
name|serverKeytab
argument_list|)
expr_stmt|;
comment|// Kerby sets "java.security.krb5.conf" for us!
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.auth.login.config"
argument_list|,
name|serverSpnegoConfigFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// http://docs.oracle.com/javase/7/docs/technotes/guides/security/jgss/...
comment|//    tutorials/BasicClientServer.html#useSub
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.security.auth.useSubjectCredsOnly"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|//System.setProperty("sun.security.spnego.debug", "true");
comment|//System.setProperty("sun.security.krb5.debug", "true");
comment|// Create and start an HTTP server configured only to allow SPNEGO requests
comment|// We're not using `withAutomaticLogin(File)` which means we're relying on JAAS to log the
comment|// server in.
name|httpServer
operator|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|()
operator|.
name|withPort
argument_list|(
literal|0
argument_list|)
operator|.
name|withSpnego
argument_list|(
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
argument_list|,
name|SpnegoTestUtil
operator|.
name|REALM
argument_list|)
operator|.
name|withHandler
argument_list|(
operator|new
name|SpnegoTestUtil
operator|.
name|AuthenticationRequiredAvaticaHandler
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|isHttpServerStarted
operator|=
literal|true
expr_stmt|;
name|httpServerUrl
operator|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|SpnegoTestUtil
operator|.
name|KDC_HOST
operator|+
literal|":"
operator|+
name|httpServer
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HTTP server running at {}"
argument_list|,
name|httpServerUrl
argument_list|)
expr_stmt|;
name|SpnegoTestUtil
operator|.
name|refreshJaasConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopKdc
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isHttpServerStarted
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping HTTP server at {}"
argument_list|,
name|httpServerUrl
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isKdcStarted
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping KDC on {}"
argument_list|,
name|kdcPort
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setupUsers
parameter_list|(
name|File
name|keytabDir
parameter_list|)
throws|throws
name|KrbException
block|{
name|String
name|clientPrincipal
init|=
name|SpnegoTestUtil
operator|.
name|CLIENT_PRINCIPAL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|SpnegoTestUtil
operator|.
name|CLIENT_PRINCIPAL
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
decl_stmt|;
name|clientKeytab
operator|=
operator|new
name|File
argument_list|(
name|keytabDir
argument_list|,
name|clientPrincipal
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|".keytab"
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientKeytab
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SpnegoTestUtil
operator|.
name|deleteRecursively
argument_list|(
name|clientKeytab
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating {} with keytab {}"
argument_list|,
name|clientPrincipal
argument_list|,
name|clientKeytab
argument_list|)
expr_stmt|;
name|SpnegoTestUtil
operator|.
name|setupUser
argument_list|(
name|kdc
argument_list|,
name|clientKeytab
argument_list|,
name|clientPrincipal
argument_list|)
expr_stmt|;
name|String
name|serverPrincipal
init|=
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
decl_stmt|;
name|serverKeytab
operator|=
operator|new
name|File
argument_list|(
name|keytabDir
argument_list|,
name|serverPrincipal
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|".keytab"
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverKeytab
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SpnegoTestUtil
operator|.
name|deleteRecursively
argument_list|(
name|serverKeytab
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating {} with keytab {}"
argument_list|,
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
argument_list|,
name|serverKeytab
argument_list|)
expr_stmt|;
name|SpnegoTestUtil
operator|.
name|setupUser
argument_list|(
name|kdc
argument_list|,
name|serverKeytab
argument_list|,
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNormalClientsDisallowed
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to {}"
argument_list|,
name|httpServerUrl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|httpServerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
comment|// Authentication should fail because we didn't provide anything
name|assertEquals
argument_list|(
literal|401
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthenticatedClientsAllowed
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the subject for the client
specifier|final
name|Subject
name|clientSubject
init|=
name|JaasKrbUtil
operator|.
name|loginUsingKeytab
argument_list|(
name|SpnegoTestUtil
operator|.
name|CLIENT_PRINCIPAL
argument_list|,
name|clientKeytab
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Principal
argument_list|>
name|clientPrincipals
init|=
name|clientSubject
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
comment|// Make sure the subject has a principal
name|assertFalse
argument_list|(
name|clientPrincipals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get a TGT for the subject (might have many, different encryption types). The first should
comment|// be the default encryption type.
name|Set
argument_list|<
name|KerberosTicket
argument_list|>
name|privateCredentials
init|=
name|clientSubject
operator|.
name|getPrivateCredentials
argument_list|(
name|KerberosTicket
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|privateCredentials
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|KerberosTicket
name|tgt
init|=
name|privateCredentials
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|tgt
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using TGT with etype: {}"
argument_list|,
name|tgt
operator|.
name|getSessionKey
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
comment|// The name of the principal
specifier|final
name|String
name|principalName
init|=
name|clientPrincipals
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Run this code, logged in as the subject (the client)
name|byte
index|[]
name|response
init|=
name|Subject
operator|.
name|doAs
argument_list|(
name|clientSubject
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Logs in with Kerberos via GSS
name|GSSManager
name|gssManager
init|=
name|GSSManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Oid
name|oid
init|=
operator|new
name|Oid
argument_list|(
name|SpnegoTestUtil
operator|.
name|JGSS_KERBEROS_TICKET_OID
argument_list|)
decl_stmt|;
name|GSSName
name|gssClient
init|=
name|gssManager
operator|.
name|createName
argument_list|(
name|principalName
argument_list|,
name|GSSName
operator|.
name|NT_USER_NAME
argument_list|)
decl_stmt|;
name|GSSCredential
name|credential
init|=
name|gssManager
operator|.
name|createCredential
argument_list|(
name|gssClient
argument_list|,
name|GSSCredential
operator|.
name|DEFAULT_LIFETIME
argument_list|,
name|oid
argument_list|,
name|GSSCredential
operator|.
name|INITIATE_ONLY
argument_list|)
decl_stmt|;
comment|// Passes the GSSCredential into the HTTP client implementation
specifier|final
name|AvaticaCommonsHttpClientSpnegoImpl
name|httpClient
init|=
operator|new
name|AvaticaCommonsHttpClientSpnegoImpl
argument_list|(
name|httpServerUrl
argument_list|,
name|credential
argument_list|)
decl_stmt|;
return|return
name|httpClient
operator|.
name|send
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// We should get a response which is "OK" with our client's name
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OK "
operator|+
name|SpnegoTestUtil
operator|.
name|CLIENT_PRINCIPAL
argument_list|,
operator|new
name|String
argument_list|(
name|response
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End HttpServerSpnegoWithJaasTest.java
end_comment

end_unit

