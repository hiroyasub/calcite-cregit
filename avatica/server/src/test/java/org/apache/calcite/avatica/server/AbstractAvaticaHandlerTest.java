begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|AuthenticationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|BaseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|hamcrest
operator|.
name|MockitoHamcrest
operator|.
name|argThat
import|;
end_import

begin_comment
comment|/**  * Test class for logic common to all {@link AvaticaHandler}'s.  */
end_comment

begin_class
specifier|public
class|class
name|AbstractAvaticaHandlerTest
block|{
specifier|private
name|AbstractAvaticaHandler
name|handler
decl_stmt|;
specifier|private
name|AvaticaServerConfiguration
name|config
decl_stmt|;
specifier|private
name|HttpServletRequest
name|request
decl_stmt|;
specifier|private
name|HttpServletResponse
name|response
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|handler
operator|=
name|mock
argument_list|(
name|AbstractAvaticaHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|=
name|mock
argument_list|(
name|AvaticaServerConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|response
operator|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|handler
operator|.
name|isUserPermitted
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|disallowUnauthenticatedUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|ServletOutputStream
name|os
init|=
name|mock
argument_list|(
name|ServletOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|config
operator|.
name|getAuthenticationType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AuthenticationType
operator|.
name|SPNEGO
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|isUserPermitted
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|)
expr_stmt|;
comment|// Make sure that the serialized ErrorMessage looks reasonable
name|verify
argument_list|(
name|os
argument_list|)
operator|.
name|write
argument_list|(
name|argThat
argument_list|(
operator|new
name|BaseMatcher
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|String
name|desc
init|=
literal|"A serialized ErrorMessage which contains 'User is not authenticated'"
decl_stmt|;
name|description
operator|.
name|appendText
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
name|String
name|msg
init|=
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|item
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
return|return
name|msg
operator|.
name|contains
argument_list|(
literal|"User is not authenticated"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeMismatch
parameter_list|(
name|Object
name|item
parameter_list|,
name|Description
name|mismatchDescription
parameter_list|)
block|{
name|mismatchDescription
operator|.
name|appendText
argument_list|(
literal|"The message should contain 'User is not authenticated'"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allowAuthenticatedUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|config
operator|.
name|getAuthenticationType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AuthenticationType
operator|.
name|SPNEGO
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|isUserPermitted
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allowAllUsersWhenNoAuthenticationIsNeeded
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|config
operator|.
name|getAuthenticationType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AuthenticationType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|isUserPermitted
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|isUserPermitted
argument_list|(
name|config
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AbstractAvaticaHandlerTest.java
end_comment

end_unit

