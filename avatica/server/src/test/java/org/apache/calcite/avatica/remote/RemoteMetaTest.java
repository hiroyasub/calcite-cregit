begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaSpecificDatabaseMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaSqlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionPropertiesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|DatabaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
operator|.
name|JdbcMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ErrorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|AvaticaJsonHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|AvaticaProtobufHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|Main
operator|.
name|HandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ArrayImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|FilteredConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|StringContains
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/** Tests covering {@link RemoteMeta}. */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RemoteMetaTest
block|{
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConnectionSpec
name|CONNECTION_SPEC
init|=
name|ConnectionSpec
operator|.
name|HSQLDB
decl_stmt|;
comment|// Keep a reference to the servers we start to clean them up after
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|HttpServer
argument_list|>
name|ACTIVE_SERVERS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HttpServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|Driver
operator|.
name|Serialization
name|serialization
decl_stmt|;
annotation|@
name|Parameters
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|mainArgs
init|=
block|{
name|FullyRemoteJdbcMetaFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
comment|// Bind to '0' to pluck an ephemeral port instead of expecting a certain one to be free
specifier|final
name|HttpServer
name|jsonServer
init|=
name|Main
operator|.
name|start
argument_list|(
name|mainArgs
argument_list|,
literal|0
argument_list|,
operator|new
name|HandlerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AvaticaJsonHandler
name|createHandler
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
return|return
operator|new
name|AvaticaJsonHandler
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|jsonServer
block|,
name|Driver
operator|.
name|Serialization
operator|.
name|JSON
block|}
argument_list|)
expr_stmt|;
name|ACTIVE_SERVERS
operator|.
name|add
argument_list|(
name|jsonServer
argument_list|)
expr_stmt|;
specifier|final
name|HttpServer
name|protobufServer
init|=
name|Main
operator|.
name|start
argument_list|(
name|mainArgs
argument_list|,
literal|0
argument_list|,
operator|new
name|HandlerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AvaticaProtobufHandler
name|createHandler
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
return|return
operator|new
name|AvaticaProtobufHandler
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|protobufServer
block|,
name|Driver
operator|.
name|Serialization
operator|.
name|PROTOBUF
block|}
argument_list|)
expr_stmt|;
name|ACTIVE_SERVERS
operator|.
name|add
argument_list|(
name|protobufServer
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
specifier|public
name|RemoteMetaTest
parameter_list|(
name|HttpServer
name|server
parameter_list|,
name|Driver
operator|.
name|Serialization
name|serialization
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|this
operator|.
name|server
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|serialization
operator|=
name|serialization
expr_stmt|;
name|url
operator|=
literal|"jdbc:avatica:remote:url=http://localhost:"
operator|+
name|port
operator|+
literal|";serialization="
operator|+
name|serialization
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|HttpServer
name|server
range|:
name|ACTIVE_SERVERS
control|)
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Meta
name|getMeta
parameter_list|(
name|AvaticaConnection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Meta
operator|)
name|f
operator|.
name|get
argument_list|(
name|conn
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Meta
operator|.
name|ExecuteResult
name|prepareAndExecuteInternal
parameter_list|(
name|AvaticaConnection
name|conn
parameter_list|,
specifier|final
name|AvaticaStatement
name|statement
parameter_list|,
name|String
name|sql
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"prepareAndExecuteInternal"
argument_list|,
name|AvaticaStatement
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Meta
operator|.
name|ExecuteResult
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|,
name|sql
argument_list|,
name|maxRowCount
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|JdbcMeta
name|m
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|JdbcMeta
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"connectionCache"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|connectionCache
init|=
operator|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|m
argument_list|)
decl_stmt|;
return|return
name|connectionCache
operator|.
name|getIfPresent
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteExecuteMaxRowCount
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
specifier|final
name|AvaticaStatement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|prepareAndExecuteInternal
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|,
literal|"select * from (values ('a', 1), ('b', 2))"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Check maxRowCount=0 and ResultSets is 0 row"
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check result set meta is still there"
argument_list|,
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-1301">[CALCITE-1301]    * Add cancel flag to AvaticaStatement</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testCancel
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
specifier|final
name|AvaticaStatement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select * from (values ('a', 1), ('b', 2))"
decl_stmt|;
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|loop
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
switch|switch
condition|(
name|count
operator|++
condition|)
block|{
case|case
literal|0
case|:
name|assertThat
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|rs
operator|.
name|getStatement
argument_list|()
operator|.
name|cancel
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|x
init|=
name|rs
operator|.
name|next
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Statement canceled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break
name|loop
break|;
default|default:
name|fail
argument_list|(
literal|"count: "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|count
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|statement
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|statement
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|statement
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|statement
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-780">[CALCITE-780]    * HTTP error 413 when sending a long string to the Avatica server</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testRemoteExecuteVeryLargeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Before the bug was fixed, a value over 7998 caused an HTTP 413.
comment|// 16K bytes, I guess.
name|checkLargeQuery
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|checkLargeQuery
argument_list|(
literal|240
argument_list|)
expr_stmt|;
name|checkLargeQuery
argument_list|(
literal|8000
argument_list|)
expr_stmt|;
name|checkLargeQuery
argument_list|(
literal|240000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkLargeQuery
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
specifier|final
name|AvaticaStatement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|frenchDisko
init|=
literal|"It said human existence is pointless\n"
operator|+
literal|"As acts of rebellious solidarity\n"
operator|+
literal|"Can bring sense in this world\n"
operator|+
literal|"La resistance!\n"
decl_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select '"
operator|+
name|longString
argument_list|(
name|frenchDisko
argument_list|,
name|n
argument_list|)
operator|+
literal|"' as s from (values 'x')"
decl_stmt|;
name|prepareAndExecuteInternal
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|,
name|sql
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|count
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Creates a string of exactly {@code length} characters by concatenating    * {@code fragment}. */
specifier|private
specifier|static
name|String
name|longString
parameter_list|(
name|String
name|fragment
parameter_list|,
name|int
name|length
parameter_list|)
block|{
assert|assert
name|fragment
operator|.
name|length
argument_list|()
operator|>
literal|0
assert|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|<
name|length
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteConnectionProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
name|String
name|id
init|=
name|conn
operator|.
name|id
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectionPropertiesImpl
argument_list|>
name|m
init|=
operator|(
operator|(
name|RemoteMeta
operator|)
name|getMeta
argument_list|(
name|conn
argument_list|)
operator|)
operator|.
name|propsMap
decl_stmt|;
name|assertFalse
argument_list|(
literal|"remote connection map should start ignorant"
argument_list|,
name|m
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// force creating a connection object on the remote side.
try|try
init|(
specifier|final
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
literal|"creating a statement starts a local object."
argument_list|,
name|m
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"select count(1) from EMP"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Connection
name|remoteConn
init|=
name|getConnection
argument_list|(
name|FullyRemoteJdbcMetaFactory
operator|.
name|getInstance
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|defaultRO
init|=
name|remoteConn
operator|.
name|isReadOnly
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|defaultAutoCommit
init|=
name|remoteConn
operator|.
name|getAutoCommit
argument_list|()
decl_stmt|;
specifier|final
name|String
name|defaultCatalog
init|=
name|remoteConn
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
specifier|final
name|String
name|defaultSchema
init|=
name|remoteConn
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setReadOnly
argument_list|(
operator|!
name|defaultRO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"local changes dirty local state"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|isDirty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote connection has not been touched"
argument_list|,
name|defaultRO
argument_list|,
name|remoteConn
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setAutoCommit
argument_list|(
operator|!
name|defaultAutoCommit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote connection has not been touched"
argument_list|,
name|defaultAutoCommit
argument_list|,
name|remoteConn
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
comment|// further interaction with the connection will force a sync
try|try
init|(
specifier|final
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
operator|!
name|defaultAutoCommit
argument_list|,
name|remoteConn
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"local values should be clean"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|isDirty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteStatementInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|t
init|=
name|AvaticaUtils
operator|.
name|unique
argument_list|(
literal|"TEST_TABLE2"
argument_list|)
decl_stmt|;
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|Statement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|create
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"create table if not exists %s ("
operator|+
literal|"  id int not null, msg varchar(255) not null)"
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|statement
operator|.
name|executeUpdate
argument_list|(
name|create
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|status
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|statement
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
specifier|final
name|String
name|update
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"insert into %s values ('%d', '%s')"
argument_list|,
name|t
argument_list|,
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
name|status
operator|=
name|statement
operator|.
name|executeUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigints
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|table
init|=
literal|"TESTBIGINTS"
decl_stmt|;
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|table
operator|+
literal|" (id BIGINT)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"INSERT INTO "
operator|+
name|table
operator|+
literal|" values(10)"
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|results
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|table
argument_list|,
name|results
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// ordinal position
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|results
operator|.
name|getLong
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenConnectionWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This tests that username and password are used for creating a connection on the
comment|// server. If this was not the case, it would succeed.
try|try
block|{
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
literal|"john"
argument_list|,
literal|"doe"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Remote driver error: RuntimeException: "
operator|+
literal|"java.sql.SQLInvalidAuthorizationSpecException: invalid authorization specification"
operator|+
literal|" - not found: john"
operator|+
literal|" -> SQLInvalidAuthorizationSpecException: invalid authorization specification - "
operator|+
literal|"not found: john"
operator|+
literal|" -> HsqlException: invalid authorization specification - not found: john"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteConnectionsAreDifferent
parameter_list|()
throws|throws
name|SQLException
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Connection
name|conn1
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn1
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DECLARE LOCAL TEMPORARY TABLE"
operator|+
literal|" buffer (id INTEGER PRIMARY KEY, textdata VARCHAR(100))"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into buffer(id, textdata) values(1, 'abc')"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from buffer"
argument_list|)
expr_stmt|;
comment|// The local temporary table is local to the connection above, and should
comment|// not be visible on another connection
name|Connection
name|conn2
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|Statement
name|stmt2
init|=
name|conn2
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt2
operator|.
name|executeQuery
argument_list|(
literal|"select * from buffer"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Error -1 (00000) : Error while executing SQL \"select * from buffer\": "
operator|+
literal|"Remote driver error: RuntimeException: java.sql.SQLSyntaxErrorException: "
operator|+
literal|"user lacks privilege or object not found: BUFFER -> "
operator|+
literal|"SQLSyntaxErrorException: user lacks privilege or object not found: BUFFER -> "
operator|+
literal|"HsqlException: user lacks privilege or object not found: BUFFER"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"[CALCITE-942] AvaticaConnection should fail-fast when closed."
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testRemoteConnectionClosing
parameter_list|()
throws|throws
name|Exception
block|{
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// Verify connection is usable
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// After closing the connection, it should not be usable anymore
try|try
block|{
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Connection is closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptionPropagation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
literal|"SELECT * from EMP LIMIT FOOBARBAZ"
decl_stmt|;
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|;
specifier|final
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
try|try
block|{
comment|// invalid SQL
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an AvaticaSqlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AvaticaSqlException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ErrorResponse
operator|.
name|UNKNOWN_ERROR_CODE
argument_list|,
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ErrorResponse
operator|.
name|UNKNOWN_SQL_STATE
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Message should contain original SQL, was '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getStackTraces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|stacktrace
init|=
name|e
operator|.
name|getStackTraces
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|substring
init|=
literal|"unexpected token: FOOBARBAZ"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Message should contain '"
operator|+
name|substring
operator|+
literal|"', was '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|","
argument_list|,
name|stacktrace
operator|.
name|contains
argument_list|(
name|substring
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteColumnsMeta
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Verify all columns are retrieved, thus that frame-based fetching works correctly
comment|// for columns
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
name|ResultSet
name|rs
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|rowCount
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The implicitly created statement should have been closed
name|assertTrue
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// default fetch size is 100, we are well beyond it
name|assertTrue
argument_list|(
name|rowCount
operator|>
literal|900
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrays
parameter_list|()
throws|throws
name|SQLException
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|resultSet
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from (values ('a', array['b', 'c']));"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Array
name|arr
init|=
name|resultSet
operator|.
name|getArray
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|arr
operator|instanceof
name|ArrayImpl
argument_list|)
expr_stmt|;
name|Object
index|[]
name|values
init|=
operator|(
name|Object
index|[]
operator|)
operator|(
operator|(
name|ArrayImpl
operator|)
name|arr
operator|)
operator|.
name|getArray
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryAndStrings
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"testbinaryandstrs"
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
literal|"asdf"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|;
specifier|final
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(id int, bin BINARY(4))"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|PreparedStatement
name|prepStmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values(1, ?)"
argument_list|)
init|)
block|{
name|prepStmt
operator|.
name|setBytes
argument_list|(
literal|1
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|prepStmt
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT id, bin from "
operator|+
name|tableName
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// byte comparison should work
name|assertArrayEquals
argument_list|(
literal|"Bytes were "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|results
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|data
argument_list|,
name|results
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// as should string
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|results
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalStackTraceHasServerStackTrace
parameter_list|()
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Statement
name|statement
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM BOGUS_TABLE_DEF_DOESNT_EXIST"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Verify that we got the expected exception
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|AvaticaSqlException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Attempt to verify that we got a "server-side" class in the stack.
name|assertThat
argument_list|(
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|JdbcMeta
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerAddressInResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|this
operator|.
name|port
argument_list|)
decl_stmt|;
name|AvaticaHttpClient
name|httpClient
init|=
operator|new
name|AvaticaHttpClientImpl
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|byte
index|[]
name|request
decl_stmt|;
name|Service
operator|.
name|OpenConnectionRequest
name|jsonReq
init|=
operator|new
name|Service
operator|.
name|OpenConnectionRequest
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|this
operator|.
name|serialization
condition|)
block|{
case|case
name|JSON
case|:
name|request
operator|=
name|JsonService
operator|.
name|MAPPER
operator|.
name|writeValueAsBytes
argument_list|(
name|jsonReq
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROTOBUF
case|:
name|ProtobufTranslation
name|pbTranslation
init|=
operator|new
name|ProtobufTranslationImpl
argument_list|()
decl_stmt|;
name|request
operator|=
name|pbTranslation
operator|.
name|serializeRequest
argument_list|(
name|jsonReq
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should not reach here"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|response
init|=
name|httpClient
operator|.
name|send
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Service
operator|.
name|OpenConnectionResponse
name|openCnxnResp
decl_stmt|;
switch|switch
condition|(
name|this
operator|.
name|serialization
condition|)
block|{
case|case
name|JSON
case|:
name|openCnxnResp
operator|=
name|JsonService
operator|.
name|MAPPER
operator|.
name|readValue
argument_list|(
name|response
argument_list|,
name|Service
operator|.
name|OpenConnectionResponse
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROTOBUF
case|:
name|ProtobufTranslation
name|pbTranslation
init|=
operator|new
name|ProtobufTranslationImpl
argument_list|()
decl_stmt|;
name|Response
name|genericResp
init|=
name|pbTranslation
operator|.
name|parseResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected an OpenConnnectionResponse, but got "
operator|+
name|genericResp
operator|.
name|getClass
argument_list|()
argument_list|,
name|genericResp
operator|instanceof
name|Service
operator|.
name|OpenConnectionResponse
argument_list|)
expr_stmt|;
name|openCnxnResp
operator|=
operator|(
name|Service
operator|.
name|OpenConnectionResponse
operator|)
name|genericResp
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should not reach here"
argument_list|)
throw|;
block|}
name|String
name|hostname
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|openCnxnResp
operator|.
name|rpcMetadata
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hostname
operator|+
literal|":"
operator|+
name|this
operator|.
name|port
argument_list|,
name|openCnxnResp
operator|.
name|rpcMetadata
operator|.
name|serverAddress
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitRollback
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|productTable
init|=
literal|"commitrollback_products"
decl_stmt|;
specifier|final
name|String
name|salesTable
init|=
literal|"commitrollback_sales"
decl_stmt|;
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|;
specifier|final
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|productTable
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"CREATE TABLE %s(id integer, stock integer)"
argument_list|,
name|productTable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|salesTable
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"CREATE TABLE %s(id integer, units_sold integer)"
argument_list|,
name|salesTable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|productId
init|=
literal|1
decl_stmt|;
comment|// No products and no sales
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"INSERT INTO %s VALUES(%d, 0)"
argument_list|,
name|productTable
argument_list|,
name|productId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"INSERT INTO %s VALUES(%d, 0)"
argument_list|,
name|salesTable
argument_list|,
name|productId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PreparedStatement
name|productStmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"UPDATE %s SET stock = stock + ? WHERE id = ?"
argument_list|,
name|productTable
argument_list|)
argument_list|)
decl_stmt|;
name|PreparedStatement
name|salesStmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"UPDATE %s SET units_sold = units_sold + ? WHERE id = ?"
argument_list|,
name|salesTable
argument_list|)
argument_list|)
decl_stmt|;
comment|// No stock
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getInventory
argument_list|(
name|conn
argument_list|,
name|productTable
argument_list|,
name|productId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set a stock of 10 for product 1
name|productStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|productStmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|productId
argument_list|)
expr_stmt|;
name|productStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|getInventory
argument_list|(
name|conn
argument_list|,
name|productTable
argument_list|,
name|productId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sold 5 items (5 in stock, 5 sold)
name|productStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
name|productStmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|productId
argument_list|)
expr_stmt|;
name|productStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|salesStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|salesStmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|productId
argument_list|)
expr_stmt|;
name|salesStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// We will definitely see the updated values
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getInventory
argument_list|(
name|conn
argument_list|,
name|productTable
argument_list|,
name|productId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getSales
argument_list|(
name|conn
argument_list|,
name|salesTable
argument_list|,
name|productId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update some "bad" values
name|productStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|-
literal|10
argument_list|)
expr_stmt|;
name|productStmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|productId
argument_list|)
expr_stmt|;
name|productStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|salesStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|salesStmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|productId
argument_list|)
expr_stmt|;
name|salesStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
comment|// We just went negative, nonsense. Better rollback.
name|conn
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// Should still have 5 and 5
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getInventory
argument_list|(
name|conn
argument_list|,
name|productTable
argument_list|,
name|productId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getSales
argument_list|(
name|conn
argument_list|,
name|salesTable
argument_list|,
name|productId
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getInventory
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|productTable
parameter_list|,
name|int
name|productId
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"SELECT stock FROM %s WHERE id = %d"
argument_list|,
name|productTable
argument_list|,
name|productId
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|getSales
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|salesTable
parameter_list|,
name|int
name|productId
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"SELECT units_sold FROM %s WHERE id = %d"
argument_list|,
name|salesTable
argument_list|,
name|productId
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAvaticaVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
name|DatabaseMetaData
name|metadata
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"DatabaseMetaData is not an instance of AvaticaDatabaseMetaData"
argument_list|,
name|metadata
operator|instanceof
name|AvaticaSpecificDatabaseMetaData
argument_list|)
expr_stmt|;
name|AvaticaSpecificDatabaseMetaData
name|avaticaMetadata
init|=
operator|(
name|AvaticaSpecificDatabaseMetaData
operator|)
name|metadata
decl_stmt|;
comment|// We should get the same version back from the server
name|assertEquals
argument_list|(
name|FilteredConstants
operator|.
name|VERSION
argument_list|,
name|avaticaMetadata
operator|.
name|getAvaticaServerVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|avaticaProps
init|=
name|avaticaMetadata
operator|.
name|unwrap
argument_list|(
name|Properties
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|avaticaProps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FilteredConstants
operator|.
name|VERSION
argument_list|,
name|avaticaProps
operator|.
name|get
argument_list|(
name|DatabaseProperty
operator|.
name|AVATICA_VERSION
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMalformedRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|this
operator|.
name|port
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|DataOutputStream
name|wr
init|=
operator|new
name|DataOutputStream
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
init|)
block|{
comment|// Write some garbage data
name|wr
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|}
argument_list|)
expr_stmt|;
name|wr
operator|.
name|flush
argument_list|()
expr_stmt|;
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|responseCode
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|responseCode
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|inputStream
init|=
name|conn
operator|.
name|getErrorStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|responseBytes
init|=
name|AvaticaUtils
operator|.
name|readFullyToBytes
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|ErrorResponse
name|response
decl_stmt|;
switch|switch
condition|(
name|this
operator|.
name|serialization
condition|)
block|{
case|case
name|JSON
case|:
name|response
operator|=
name|JsonService
operator|.
name|MAPPER
operator|.
name|readValue
argument_list|(
name|responseBytes
argument_list|,
name|ErrorResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected error message: "
operator|+
name|response
operator|.
name|errorMessage
argument_list|,
name|response
operator|.
name|errorMessage
operator|.
name|contains
argument_list|(
literal|"Illegal character"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROTOBUF
case|:
name|ProtobufTranslation
name|pbTranslation
init|=
operator|new
name|ProtobufTranslationImpl
argument_list|()
decl_stmt|;
name|Response
name|genericResp
init|=
name|pbTranslation
operator|.
name|parseResponse
argument_list|(
name|responseBytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Response was not an ErrorResponse, but was "
operator|+
name|genericResp
operator|.
name|getClass
argument_list|()
argument_list|,
name|genericResp
operator|instanceof
name|ErrorResponse
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
name|ErrorResponse
operator|)
name|genericResp
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected error message: "
operator|+
name|response
operator|.
name|errorMessage
argument_list|,
name|response
operator|.
name|errorMessage
operator|.
name|contains
argument_list|(
literal|"contained an invalid tag"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unhandled serialization "
operator|+
name|this
operator|.
name|serialization
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDriverProperties
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
specifier|final
name|Properties
name|originalProps
init|=
operator|(
name|Properties
operator|)
name|props
operator|.
name|clone
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|props
argument_list|)
init|)
block|{
comment|// The contents of the two properties objects should not have changed after connecting.
name|assertEquals
argument_list|(
name|props
argument_list|,
name|originalProps
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Factory that provides a {@link JdbcMeta}. */
specifier|public
specifier|static
class|class
name|FullyRemoteJdbcMetaFactory
implements|implements
name|Meta
operator|.
name|Factory
block|{
specifier|private
specifier|static
name|JdbcMeta
name|instance
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|JdbcMeta
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|instance
operator|=
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meta
name|create
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
return|return
name|getInstance
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RemoteMetaTest.java
end_comment

end_unit

