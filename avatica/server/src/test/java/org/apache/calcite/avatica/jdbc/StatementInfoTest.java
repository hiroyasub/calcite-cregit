begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests covering {@link StatementInfo}.  */
end_comment

begin_class
specifier|public
class|class
name|StatementInfoTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLargeOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResultSet
name|results
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|StatementInfo
name|info
init|=
operator|new
name|StatementInfo
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|results
operator|.
name|relative
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|results
operator|.
name|relative
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|offset
init|=
literal|1L
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|advanceResultSetToOffset
argument_list|(
name|results
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|Mockito
operator|.
name|inOrder
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|results
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|relative
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|results
argument_list|)
operator|.
name|relative
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|info
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNextUpdatesPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResultSet
name|results
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|StatementInfo
name|info
init|=
operator|new
name|StatementInfo
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
name|info
operator|.
name|setResultSet
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|i
operator|+
literal|"th call of next() should return true"
argument_list|,
name|info
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getPosition
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Expected last next() to return false"
argument_list|,
name|info
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getPosition
argument_list|()
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNoMovement
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResultSet
name|results
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|StatementInfo
name|info
init|=
operator|new
name|StatementInfo
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
name|info
operator|.
name|setPosition
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|info
operator|.
name|advanceResultSetToOffset
argument_list|(
name|results
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResultSetGetter
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResultSet
name|results
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|StatementInfo
name|info
init|=
operator|new
name|StatementInfo
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"ResultSet should not be initialized"
argument_list|,
name|info
operator|.
name|isResultSetInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"ResultSet should be null"
argument_list|,
name|info
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setResultSet
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ResultSet should be initialized"
argument_list|,
name|info
operator|.
name|isResultSetInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
argument_list|,
name|info
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckPositionAfterFailedRelative
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResultSet
name|results
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|long
name|offset
init|=
literal|500
decl_stmt|;
name|StatementInfo
name|info
init|=
operator|new
name|StatementInfo
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
name|info
operator|.
name|setResultSet
argument_list|(
name|results
argument_list|)
expr_stmt|;
comment|// relative() doesn't work
name|Mockito
operator|.
name|when
argument_list|(
name|results
operator|.
name|relative
argument_list|(
operator|(
name|int
operator|)
name|offset
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should fall back to next(), 500 calls to next, 1 false
name|Mockito
operator|.
name|when
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|then
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|private
name|long
name|invocations
init|=
literal|0
decl_stmt|;
comment|// Return true until 500, false after.
annotation|@
name|Override
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|invocations
operator|++
expr_stmt|;
if|if
condition|(
name|invocations
operator|>=
name|offset
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|info
operator|.
name|advanceResultSetToOffset
argument_list|(
name|results
argument_list|,
name|offset
argument_list|)
expr_stmt|;
comment|// Verify correct position
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|info
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that we actually advanced the result set
name|Mockito
operator|.
name|verify
argument_list|(
name|results
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|500
argument_list|)
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End StatementInfoTest.java
end_comment

end_unit

