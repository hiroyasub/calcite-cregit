begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionPropertiesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
operator|.
name|JdbcMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|AvaticaJsonHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|Main
operator|.
name|HandlerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|AbstractHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests that verify that the Driver still functions when requests are randomly bounced between  * more than one server.  */
end_comment

begin_class
specifier|public
class|class
name|AlternatingRemoteMetaTest
block|{
specifier|private
specifier|static
specifier|final
name|ConnectionSpec
name|CONNECTION_SPEC
init|=
name|ConnectionSpec
operator|.
name|HSQLDB
decl_stmt|;
specifier|private
specifier|static
name|String
name|url
decl_stmt|;
static|static
block|{
try|try
block|{
comment|// Force DriverManager initialization before we hit AlternatingDriver->Driver.<clinit>
comment|// Otherwise Driver.<clinit> -> DriverManager.registerDriver -> scan service provider files
comment|// causes a deadlock; see [CALCITE-1060]
name|DriverManager
operator|.
name|getDrivers
argument_list|()
expr_stmt|;
name|DriverManager
operator|.
name|registerDriver
argument_list|(
operator|new
name|AlternatingDriver
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Keep a reference to the servers we start to clean them up after
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|HttpServer
argument_list|>
name|ACTIVE_SERVERS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Factory that provides a {@link JdbcMeta}. */
specifier|public
specifier|static
class|class
name|FullyRemoteJdbcMetaFactory
implements|implements
name|Meta
operator|.
name|Factory
block|{
specifier|private
specifier|static
name|JdbcMeta
name|instance
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|JdbcMeta
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|instance
operator|=
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meta
name|create
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
return|return
name|getInstance
argument_list|()
return|;
block|}
block|}
comment|/**    * AvaticaHttpClient implementation that randomly chooses among the provided URLs.    */
specifier|public
specifier|static
class|class
name|AlternatingAvaticaHttpClient
implements|implements
name|AvaticaHttpClient
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|AvaticaHttpClientImpl
argument_list|>
name|clients
decl_stmt|;
specifier|private
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|AlternatingAvaticaHttpClient
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|urls
parameter_list|)
block|{
comment|//System.out.println("Constructing clients for " + urls);
name|clients
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|urls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|urls
control|)
block|{
name|clients
operator|.
name|add
argument_list|(
operator|new
name|AvaticaHttpClientImpl
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|send
parameter_list|(
name|byte
index|[]
name|request
parameter_list|)
block|{
name|AvaticaHttpClientImpl
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//System.out.println("URL: " + client.url);
return|return
name|client
operator|.
name|send
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
comment|/**    * Driver implementation {@link AlternatingAvaticaHttpClient}.    */
specifier|public
specifier|static
class|class
name|AlternatingDriver
extends|extends
name|Driver
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"jdbc:avatica:remote-alternating:"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|getConnectStringPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meta
name|createMeta
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
specifier|final
name|ConnectionConfig
name|config
init|=
name|connection
operator|.
name|config
argument_list|()
decl_stmt|;
specifier|final
name|Service
name|service
init|=
operator|new
name|RemoteService
argument_list|(
name|getHttpClient
argument_list|(
name|connection
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|connection
operator|.
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
return|return
operator|new
name|RemoteMeta
argument_list|(
name|connection
argument_list|,
name|service
argument_list|)
return|;
block|}
annotation|@
name|Override
name|AvaticaHttpClient
name|getHttpClient
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|,
name|ConnectionConfig
name|config
parameter_list|)
block|{
return|return
operator|new
name|AlternatingAvaticaHttpClient
argument_list|(
name|parseUrls
argument_list|(
name|config
operator|.
name|url
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|URL
argument_list|>
name|parseUrls
parameter_list|(
name|String
name|urlStr
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|char
name|comma
init|=
literal|','
decl_stmt|;
name|int
name|prevIndex
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
name|urlStr
operator|.
name|indexOf
argument_list|(
name|comma
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|index
condition|)
block|{
try|try
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// String split w/o regex
while|while
condition|(
operator|-
literal|1
operator|!=
name|index
condition|)
block|{
try|try
block|{
name|urls
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
operator|.
name|substring
argument_list|(
name|prevIndex
argument_list|,
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|prevIndex
operator|=
name|index
operator|+
literal|1
expr_stmt|;
name|index
operator|=
name|urlStr
operator|.
name|indexOf
argument_list|(
name|comma
argument_list|,
name|prevIndex
argument_list|)
expr_stmt|;
block|}
comment|// Get the last one
try|try
block|{
name|urls
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
operator|.
name|substring
argument_list|(
name|prevIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|urls
return|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|mainArgs
init|=
operator|new
name|String
index|[]
block|{
name|FullyRemoteJdbcMetaFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
comment|// Bind to '0' to pluck an ephemeral port instead of expecting a certain one to be free
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|HttpServer
name|jsonServer
init|=
name|Main
operator|.
name|start
argument_list|(
name|mainArgs
argument_list|,
literal|0
argument_list|,
operator|new
name|HandlerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AbstractHandler
name|createHandler
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
return|return
operator|new
name|AvaticaJsonHandler
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ACTIVE_SERVERS
operator|.
name|add
argument_list|(
name|jsonServer
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"http://localhost:"
argument_list|)
operator|.
name|append
argument_list|(
name|jsonServer
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
name|AlternatingDriver
operator|.
name|PREFIX
operator|+
literal|"url="
operator|+
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|HttpServer
name|server
range|:
name|ACTIVE_SERVERS
control|)
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Meta
name|getMeta
parameter_list|(
name|AvaticaConnection
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Meta
operator|)
name|f
operator|.
name|get
argument_list|(
name|conn
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Meta
operator|.
name|ExecuteResult
name|prepareAndExecuteInternal
parameter_list|(
name|AvaticaConnection
name|conn
parameter_list|,
specifier|final
name|AvaticaStatement
name|statement
parameter_list|,
name|String
name|sql
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"prepareAndExecuteInternal"
argument_list|,
name|AvaticaStatement
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Meta
operator|.
name|ExecuteResult
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|,
name|sql
argument_list|,
name|maxRowCount
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|JdbcMeta
name|m
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|JdbcMeta
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"connectionCache"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|connectionCache
init|=
operator|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|m
argument_list|)
decl_stmt|;
return|return
name|connectionCache
operator|.
name|getIfPresent
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteExecuteMaxRowCount
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
specifier|final
name|AvaticaStatement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|prepareAndExecuteInternal
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|,
literal|"select * from (values ('a', 1), ('b', 2))"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Check maxRowCount=0 and ResultSets is 0 row"
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check result set meta is still there"
argument_list|,
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-780">[CALCITE-780]    * HTTP error 413 when sending a long string to the Avatica server</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testRemoteExecuteVeryLargeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Before the bug was fixed, a value over 7998 caused an HTTP 413.
comment|// 16K bytes, I guess.
name|checkLargeQuery
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|checkLargeQuery
argument_list|(
literal|240
argument_list|)
expr_stmt|;
name|checkLargeQuery
argument_list|(
literal|8000
argument_list|)
expr_stmt|;
name|checkLargeQuery
argument_list|(
literal|240000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkLargeQuery
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
specifier|final
name|AvaticaStatement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|frenchDisko
init|=
literal|"It said human existence is pointless\n"
operator|+
literal|"As acts of rebellious solidarity\n"
operator|+
literal|"Can bring sense in this world\n"
operator|+
literal|"La resistance!\n"
decl_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select '"
operator|+
name|longString
argument_list|(
name|frenchDisko
argument_list|,
name|n
argument_list|)
operator|+
literal|"' as s from (values 'x')"
decl_stmt|;
name|prepareAndExecuteInternal
argument_list|(
name|conn
argument_list|,
name|statement
argument_list|,
name|sql
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|count
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Creates a string of exactly {@code length} characters by concatenating    * {@code fragment}. */
specifier|private
specifier|static
name|String
name|longString
parameter_list|(
name|String
name|fragment
parameter_list|,
name|int
name|length
parameter_list|)
block|{
assert|assert
name|fragment
operator|.
name|length
argument_list|()
operator|>
literal|0
assert|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|<
name|length
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteConnectionProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|)
block|{
name|String
name|id
init|=
name|conn
operator|.
name|id
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectionPropertiesImpl
argument_list|>
name|m
init|=
operator|(
operator|(
name|RemoteMeta
operator|)
name|getMeta
argument_list|(
name|conn
argument_list|)
operator|)
operator|.
name|propsMap
decl_stmt|;
name|assertFalse
argument_list|(
literal|"remote connection map should start ignorant"
argument_list|,
name|m
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// force creating a connection object on the remote side.
try|try
init|(
specifier|final
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
literal|"creating a statement starts a local object."
argument_list|,
name|m
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"select count(1) from EMP"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Connection
name|remoteConn
init|=
name|getConnection
argument_list|(
name|FullyRemoteJdbcMetaFactory
operator|.
name|getInstance
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|defaultRO
init|=
name|remoteConn
operator|.
name|isReadOnly
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|defaultAutoCommit
init|=
name|remoteConn
operator|.
name|getAutoCommit
argument_list|()
decl_stmt|;
specifier|final
name|String
name|defaultCatalog
init|=
name|remoteConn
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
specifier|final
name|String
name|defaultSchema
init|=
name|remoteConn
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setReadOnly
argument_list|(
operator|!
name|defaultRO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"local changes dirty local state"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|isDirty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote connection has not been touched"
argument_list|,
name|defaultRO
argument_list|,
name|remoteConn
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setAutoCommit
argument_list|(
operator|!
name|defaultAutoCommit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote connection has not been touched"
argument_list|,
name|defaultAutoCommit
argument_list|,
name|remoteConn
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
comment|// further interaction with the connection will force a sync
try|try
init|(
specifier|final
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
operator|!
name|defaultAutoCommit
argument_list|,
name|remoteConn
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"local values should be clean"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|isDirty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
init|(
name|AvaticaConnection
name|conn
init|=
operator|(
name|AvaticaConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
init|;
name|Statement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
literal|"SET SCHEMA \"SCOTT\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE \"FOO\"(\"KEY\" INTEGER NOT NULL, \"VALUE\" VARCHAR(10))"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
literal|"SET TABLE \"FOO\" READONLY FALSE"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numRecords
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRecords
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
literal|"INSERT INTO \"FOO\" VALUES("
operator|+
name|i
operator|+
literal|", '"
operator|+
name|i
operator|+
literal|"')"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure all the records are there that we expect
name|ResultSet
name|results
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT count(KEY) FROM FOO"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT KEY, VALUE FROM FOO ORDER BY KEY ASC"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRecords
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleUrlParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|AlternatingDriver
name|d
init|=
operator|new
name|AlternatingDriver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
name|d
operator|.
name|parseUrls
argument_list|(
literal|"http://localhost:1234"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost:1234"
argument_list|)
argument_list|)
argument_list|,
name|urls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleUrlParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|AlternatingDriver
name|d
init|=
operator|new
name|AlternatingDriver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
name|d
operator|.
name|parseUrls
argument_list|(
literal|"http://localhost:1234,http://localhost:2345,"
operator|+
literal|"http://localhost:3456"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|expectedUrls
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost:1234"
argument_list|)
argument_list|,
operator|new
name|URL
argument_list|(
literal|"http://localhost:2345"
argument_list|)
argument_list|,
operator|new
name|URL
argument_list|(
literal|"http://localhost:3456"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedUrls
argument_list|,
name|urls
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AlternatingRemoteMetaTest.java
end_comment

end_unit

