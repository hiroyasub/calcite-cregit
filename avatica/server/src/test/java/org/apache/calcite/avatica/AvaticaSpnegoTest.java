begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
operator|.
name|JdbcMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|KrbException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|client
operator|.
name|JaasKrbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|client
operator|.
name|KrbConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|client
operator|.
name|KrbConfigKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|server
operator|.
name|SimpleKdcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * End to end test case for SPNEGO with Avatica.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AvaticaSpnegoTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AvaticaSpnegoTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConnectionSpec
name|CONNECTION_SPEC
init|=
name|ConnectionSpec
operator|.
name|HSQLDB
decl_stmt|;
specifier|private
specifier|static
name|SimpleKdcServer
name|kdc
decl_stmt|;
specifier|private
specifier|static
name|KrbConfig
name|clientConfig
decl_stmt|;
specifier|private
specifier|static
name|File
name|keytabDir
decl_stmt|;
specifier|private
specifier|static
name|int
name|kdcPort
decl_stmt|;
specifier|private
specifier|static
name|File
name|clientKeytab
decl_stmt|;
specifier|private
specifier|static
name|File
name|serverKeytab
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|isKdcStarted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|void
name|setupKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|kdc
operator|=
operator|new
name|SimpleKdcServer
argument_list|()
expr_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|kdcDir
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|AvaticaSpnegoTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|kdcDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SpnegoTestUtil
operator|.
name|deleteRecursively
argument_list|(
name|kdcDir
argument_list|)
expr_stmt|;
block|}
name|kdcDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|setWorkDir
argument_list|(
name|kdcDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|setKdcHost
argument_list|(
name|SpnegoTestUtil
operator|.
name|KDC_HOST
argument_list|)
expr_stmt|;
name|kdcPort
operator|=
name|SpnegoTestUtil
operator|.
name|getFreePort
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|setAllowTcp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|setAllowUdp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|setKdcTcpPort
argument_list|(
name|kdcPort
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting KDC server at {}:{}"
argument_list|,
name|SpnegoTestUtil
operator|.
name|KDC_HOST
argument_list|,
name|kdcPort
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|init
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|isKdcStarted
operator|=
literal|true
expr_stmt|;
name|keytabDir
operator|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|AvaticaSpnegoTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_keytabs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|keytabDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SpnegoTestUtil
operator|.
name|deleteRecursively
argument_list|(
name|keytabDir
argument_list|)
expr_stmt|;
block|}
name|keytabDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|setupServerUser
argument_list|(
name|keytabDir
argument_list|)
expr_stmt|;
name|clientConfig
operator|=
operator|new
name|KrbConfig
argument_list|()
expr_stmt|;
name|clientConfig
operator|.
name|setString
argument_list|(
name|KrbConfigKey
operator|.
name|KDC_HOST
argument_list|,
name|SpnegoTestUtil
operator|.
name|KDC_HOST
argument_list|)
expr_stmt|;
name|clientConfig
operator|.
name|setInt
argument_list|(
name|KrbConfigKey
operator|.
name|KDC_TCP_PORT
argument_list|,
name|kdcPort
argument_list|)
expr_stmt|;
name|clientConfig
operator|.
name|setString
argument_list|(
name|KrbConfigKey
operator|.
name|DEFAULT_REALM
argument_list|,
name|SpnegoTestUtil
operator|.
name|REALM
argument_list|)
expr_stmt|;
comment|// Kerby sets "java.security.krb5.conf" for us!
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.security.auth.useSubjectCredsOnly"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// System.setProperty("sun.security.spnego.debug", "true");
comment|// System.setProperty("sun.security.krb5.debug", "true");
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopKdc
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isKdcStarted
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping KDC on {}"
argument_list|,
name|kdcPort
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setupServerUser
parameter_list|(
name|File
name|keytabDir
parameter_list|)
throws|throws
name|KrbException
block|{
comment|// Create the client user
name|String
name|clientPrincipal
init|=
name|SpnegoTestUtil
operator|.
name|CLIENT_PRINCIPAL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|SpnegoTestUtil
operator|.
name|CLIENT_PRINCIPAL
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
decl_stmt|;
name|clientKeytab
operator|=
operator|new
name|File
argument_list|(
name|keytabDir
argument_list|,
name|clientPrincipal
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|".keytab"
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientKeytab
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SpnegoTestUtil
operator|.
name|deleteRecursively
argument_list|(
name|clientKeytab
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating {} with keytab {}"
argument_list|,
name|clientPrincipal
argument_list|,
name|clientKeytab
argument_list|)
expr_stmt|;
name|SpnegoTestUtil
operator|.
name|setupUser
argument_list|(
name|kdc
argument_list|,
name|clientKeytab
argument_list|,
name|clientPrincipal
argument_list|)
expr_stmt|;
comment|// Create the server user
name|String
name|serverPrincipal
init|=
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
decl_stmt|;
name|serverKeytab
operator|=
operator|new
name|File
argument_list|(
name|keytabDir
argument_list|,
name|serverPrincipal
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|".keytab"
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverKeytab
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SpnegoTestUtil
operator|.
name|deleteRecursively
argument_list|(
name|serverKeytab
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating {} with keytab {}"
argument_list|,
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
argument_list|,
name|serverKeytab
argument_list|)
expr_stmt|;
name|SpnegoTestUtil
operator|.
name|setupUser
argument_list|(
name|kdc
argument_list|,
name|serverKeytab
argument_list|,
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Start the KDC
name|setupKdc
argument_list|()
expr_stmt|;
comment|// Create a LocalService around HSQLDB
specifier|final
name|JdbcMeta
name|jdbcMeta
init|=
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
decl_stmt|;
specifier|final
name|LocalService
name|localService
init|=
operator|new
name|LocalService
argument_list|(
name|jdbcMeta
argument_list|)
decl_stmt|;
for|for
control|(
name|Driver
operator|.
name|Serialization
name|serialization
range|:
operator|new
name|Driver
operator|.
name|Serialization
index|[]
block|{
name|Driver
operator|.
name|Serialization
operator|.
name|JSON
block|,
name|Driver
operator|.
name|Serialization
operator|.
name|PROTOBUF
block|}
control|)
block|{
comment|// Build and start the server
name|HttpServer
name|httpServer
init|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|()
operator|.
name|withPort
argument_list|(
literal|0
argument_list|)
operator|.
name|withAutomaticLogin
argument_list|(
name|serverKeytab
argument_list|)
operator|.
name|withSpnego
argument_list|(
name|SpnegoTestUtil
operator|.
name|SERVER_PRINCIPAL
argument_list|,
name|SpnegoTestUtil
operator|.
name|REALM
argument_list|)
operator|.
name|withHandler
argument_list|(
name|localService
argument_list|,
name|serialization
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|url
init|=
literal|"jdbc:avatica:remote:url=http://"
operator|+
name|SpnegoTestUtil
operator|.
name|KDC_HOST
operator|+
literal|":"
operator|+
name|httpServer
operator|.
name|getPort
argument_list|()
operator|+
literal|";authentication=SPNEGO;serialization="
operator|+
name|serialization
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JDBC URL {}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|httpServer
block|,
name|url
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
specifier|private
specifier|final
name|HttpServer
name|httpServer
decl_stmt|;
specifier|private
specifier|final
name|String
name|jdbcUrl
decl_stmt|;
specifier|public
name|AvaticaSpnegoTest
parameter_list|(
name|HttpServer
name|httpServer
parameter_list|,
name|String
name|jdbcUrl
parameter_list|)
block|{
name|this
operator|.
name|httpServer
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|httpServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|jdbcUrl
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|jdbcUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopHttpServer
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|httpServer
condition|)
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthenticatedClient
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|tableName
init|=
literal|"allowed_clients"
decl_stmt|;
comment|// Create the subject for the client
specifier|final
name|Subject
name|clientSubject
init|=
name|JaasKrbUtil
operator|.
name|loginUsingKeytab
argument_list|(
name|SpnegoTestUtil
operator|.
name|CLIENT_PRINCIPAL
argument_list|,
name|clientKeytab
argument_list|)
decl_stmt|;
comment|// The name of the principal
comment|// Run this code, logged in as the subject (the client)
name|Subject
operator|.
name|doAs
argument_list|(
name|clientSubject
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcUrl
argument_list|)
init|)
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(pk integer)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(1)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(2)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(3)"
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT count(1) FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionSpec
operator|.
name|getDatabaseLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End AvaticaSpnegoTest.java
end_comment

end_unit

