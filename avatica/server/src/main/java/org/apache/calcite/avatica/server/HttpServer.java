begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|MetricsSystemConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|AuthenticationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Driver
operator|.
name|Serialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|RpcMetadataResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|ConstraintMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|ConstraintSecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|HashLoginService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|LoginService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|authentication
operator|.
name|BasicAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|authentication
operator|.
name|DigestAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|authentication
operator|.
name|SpnegoAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|security
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_comment
comment|/**  * Avatica HTTP server.  *  *<p>If you need to change the server's configuration, override the  * {@link #configureConnector(ServerConnector, int)} method in a derived class.  */
end_comment

begin_class
specifier|public
class|class
name|HttpServer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|AvaticaHandler
name|handler
decl_stmt|;
specifier|private
specifier|final
name|AvaticaServerConfiguration
name|config
decl_stmt|;
specifier|private
specifier|final
name|Subject
name|subject
decl_stmt|;
specifier|private
specifier|final
name|SslContextFactory
name|sslFactory
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|HttpServer
parameter_list|(
name|Handler
name|handler
parameter_list|)
block|{
name|this
argument_list|(
name|wrapJettyHandler
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an {@link HttpServer} which binds to an ephemeral port.    * @param handler The Handler to run    */
specifier|public
name|HttpServer
parameter_list|(
name|AvaticaHandler
name|handler
parameter_list|)
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|HttpServer
parameter_list|(
name|int
name|port
parameter_list|,
name|Handler
name|handler
parameter_list|)
block|{
name|this
argument_list|(
name|port
argument_list|,
name|wrapJettyHandler
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an {@link HttpServer} with no additional configuration.    * @param port The listen port    * @param handler The Handler to run    */
specifier|public
name|HttpServer
parameter_list|(
name|int
name|port
parameter_list|,
name|AvaticaHandler
name|handler
parameter_list|)
block|{
name|this
argument_list|(
name|port
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an {@link HttpServer}.    * @param port The listen port    * @param handler The Handler to run    * @param config Optional configuration for the server    */
specifier|public
name|HttpServer
parameter_list|(
name|int
name|port
parameter_list|,
name|AvaticaHandler
name|handler
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|)
block|{
name|this
argument_list|(
name|port
argument_list|,
name|handler
argument_list|,
name|config
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an {@link HttpServer}.    * @param port The listen port    * @param handler The Handler to run    * @param config Optional configuration for the server    * @param subject The javax.security Subject for the server, or null    */
specifier|public
name|HttpServer
parameter_list|(
name|int
name|port
parameter_list|,
name|AvaticaHandler
name|handler
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|,
name|Subject
name|subject
parameter_list|)
block|{
name|this
argument_list|(
name|port
argument_list|,
name|handler
argument_list|,
name|config
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an {@link HttpServer}.    * @param port The listen port    * @param handler The Handler to run    * @param config Optional configuration for the server    * @param subject The javax.security Subject for the server, or null    * @param sslFactory A configured SslContextFactory, or null    */
specifier|public
name|HttpServer
parameter_list|(
name|int
name|port
parameter_list|,
name|AvaticaHandler
name|handler
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|,
name|Subject
name|subject
parameter_list|,
name|SslContextFactory
name|sslFactory
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|this
operator|.
name|sslFactory
operator|=
name|sslFactory
expr_stmt|;
block|}
specifier|private
specifier|static
name|AvaticaHandler
name|wrapJettyHandler
parameter_list|(
name|Handler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|AvaticaHandler
condition|)
block|{
return|return
operator|(
name|AvaticaHandler
operator|)
name|handler
return|;
block|}
comment|// Backwards compatibility, noop's the AvaticaHandler interface
return|return
operator|new
name|DelegatingAvaticaHandler
argument_list|(
name|handler
argument_list|)
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|subject
condition|)
block|{
comment|// Run the start in the privileged block (as the kerberos-identified user)
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|internalStart
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|internalStart
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|internalStart
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Server is already started"
argument_list|)
throw|;
block|}
specifier|final
name|QueuedThreadPool
name|threadPool
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
name|threadPool
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|server
operator|.
name|manage
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|ServerConnector
name|connector
init|=
name|configureConnector
argument_list|(
name|getConnector
argument_list|()
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|ConstraintSecurityHandler
name|securityHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|config
condition|)
block|{
switch|switch
condition|(
name|config
operator|.
name|getAuthenticationType
argument_list|()
condition|)
block|{
case|case
name|SPNEGO
case|:
comment|// Get the Handler for SPNEGO authentication
name|securityHandler
operator|=
name|configureSpnego
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|this
operator|.
name|config
argument_list|)
expr_stmt|;
break|break;
case|case
name|BASIC
case|:
name|securityHandler
operator|=
name|configureBasicAuthentication
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|config
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIGEST
case|:
name|securityHandler
operator|=
name|configureDigestAuthentication
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|config
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// Pass
break|break;
block|}
block|}
name|server
operator|.
name|setConnectors
argument_list|(
operator|new
name|Connector
index|[]
block|{
name|connector
block|}
argument_list|)
expr_stmt|;
comment|// Default to using the handler that was passed in
specifier|final
name|HandlerList
name|handlerList
init|=
operator|new
name|HandlerList
argument_list|()
decl_stmt|;
name|Handler
name|avaticaHandler
init|=
name|handler
decl_stmt|;
comment|// Wrap the provided handler for security if we made one
if|if
condition|(
literal|null
operator|!=
name|securityHandler
condition|)
block|{
name|securityHandler
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|avaticaHandler
operator|=
name|securityHandler
expr_stmt|;
block|}
name|handlerList
operator|.
name|setHandlers
argument_list|(
operator|new
name|Handler
index|[]
block|{
name|avaticaHandler
block|,
operator|new
name|DefaultHandler
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handlerList
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|port
operator|=
name|connector
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service listening on port {}."
argument_list|,
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the information about the address for this server
try|try
block|{
name|this
operator|.
name|handler
operator|.
name|setServerRpcMetadata
argument_list|(
name|createRpcServerMetadata
argument_list|(
name|connector
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// Failed to do the DNS lookup, bail out.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ServerConnector
name|getConnector
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|sslFactory
condition|)
block|{
return|return
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|)
return|;
block|}
return|return
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
name|sslFactory
argument_list|)
return|;
block|}
specifier|private
name|RpcMetadataResponse
name|createRpcServerMetadata
parameter_list|(
name|ServerConnector
name|connector
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|String
name|host
init|=
name|connector
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|host
condition|)
block|{
comment|// "null" means binding to all interfaces, we need to pick one so the client gets a real
comment|// address and not "0.0.0.0" or similar.
name|host
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|port
init|=
name|connector
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
return|return
operator|new
name|RpcMetadataResponse
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%d"
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Configures the<code>connector</code> given the<code>config</code> for using SPNEGO.    *    * @param connector The connector to configure    * @param config The configuration    */
specifier|protected
name|ConstraintSecurityHandler
name|configureSpnego
parameter_list|(
name|Server
name|server
parameter_list|,
name|ServerConnector
name|connector
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|)
block|{
specifier|final
name|String
name|realm
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|config
operator|.
name|getKerberosRealm
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|principal
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|config
operator|.
name|getKerberosPrincipal
argument_list|()
argument_list|)
decl_stmt|;
comment|// A customization of SpnegoLoginService to explicitly set the server's principal, otherwise
comment|// we would have to require a custom file to set the server's principal.
name|PropertyBasedSpnegoLoginService
name|spnegoLoginService
init|=
operator|new
name|PropertyBasedSpnegoLoginService
argument_list|(
name|realm
argument_list|,
name|principal
argument_list|)
decl_stmt|;
comment|// Roles are "realms" for Kerberos/SPNEGO
specifier|final
name|String
index|[]
name|allowedRealms
init|=
name|getAllowedRealms
argument_list|(
name|realm
argument_list|,
name|config
argument_list|)
decl_stmt|;
return|return
name|configureCommonAuthentication
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|config
argument_list|,
name|Constraint
operator|.
name|__SPNEGO_AUTH
argument_list|,
name|allowedRealms
argument_list|,
operator|new
name|SpnegoAuthenticator
argument_list|()
argument_list|,
name|realm
argument_list|,
name|spnegoLoginService
argument_list|)
return|;
block|}
specifier|protected
name|String
index|[]
name|getAllowedRealms
parameter_list|(
name|String
name|serverRealm
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|)
block|{
comment|// Roles are "realms" for Kerberos/SPNEGO
name|String
index|[]
name|allowedRealms
init|=
operator|new
name|String
index|[]
block|{
name|serverRealm
block|}
decl_stmt|;
comment|// By default, only the server's realm is allowed, but other realms can also be allowed.
if|if
condition|(
literal|null
operator|!=
name|config
operator|.
name|getAllowedRoles
argument_list|()
condition|)
block|{
name|allowedRealms
operator|=
operator|new
name|String
index|[
name|config
operator|.
name|getAllowedRoles
argument_list|()
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|allowedRealms
index|[
literal|0
index|]
operator|=
name|serverRealm
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|config
operator|.
name|getAllowedRoles
argument_list|()
argument_list|,
literal|0
argument_list|,
name|allowedRealms
argument_list|,
literal|1
argument_list|,
name|config
operator|.
name|getAllowedRoles
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|allowedRealms
return|;
block|}
specifier|protected
name|ConstraintSecurityHandler
name|configureBasicAuthentication
parameter_list|(
name|Server
name|server
parameter_list|,
name|ServerConnector
name|connector
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|allowedRoles
init|=
name|config
operator|.
name|getAllowedRoles
argument_list|()
decl_stmt|;
specifier|final
name|String
name|realm
init|=
name|config
operator|.
name|getHashLoginServiceRealm
argument_list|()
decl_stmt|;
specifier|final
name|String
name|loginServiceProperties
init|=
name|config
operator|.
name|getHashLoginServiceProperties
argument_list|()
decl_stmt|;
name|HashLoginService
name|loginService
init|=
operator|new
name|HashLoginService
argument_list|(
name|realm
argument_list|,
name|loginServiceProperties
argument_list|)
decl_stmt|;
name|server
operator|.
name|addBean
argument_list|(
name|loginService
argument_list|)
expr_stmt|;
return|return
name|configureCommonAuthentication
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|config
argument_list|,
name|Constraint
operator|.
name|__BASIC_AUTH
argument_list|,
name|allowedRoles
argument_list|,
operator|new
name|BasicAuthenticator
argument_list|()
argument_list|,
literal|null
argument_list|,
name|loginService
argument_list|)
return|;
block|}
specifier|protected
name|ConstraintSecurityHandler
name|configureDigestAuthentication
parameter_list|(
name|Server
name|server
parameter_list|,
name|ServerConnector
name|connector
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|allowedRoles
init|=
name|config
operator|.
name|getAllowedRoles
argument_list|()
decl_stmt|;
specifier|final
name|String
name|realm
init|=
name|config
operator|.
name|getHashLoginServiceRealm
argument_list|()
decl_stmt|;
specifier|final
name|String
name|loginServiceProperties
init|=
name|config
operator|.
name|getHashLoginServiceProperties
argument_list|()
decl_stmt|;
name|HashLoginService
name|loginService
init|=
operator|new
name|HashLoginService
argument_list|(
name|realm
argument_list|,
name|loginServiceProperties
argument_list|)
decl_stmt|;
name|server
operator|.
name|addBean
argument_list|(
name|loginService
argument_list|)
expr_stmt|;
return|return
name|configureCommonAuthentication
argument_list|(
name|server
argument_list|,
name|connector
argument_list|,
name|config
argument_list|,
name|Constraint
operator|.
name|__DIGEST_AUTH
argument_list|,
name|allowedRoles
argument_list|,
operator|new
name|DigestAuthenticator
argument_list|()
argument_list|,
literal|null
argument_list|,
name|loginService
argument_list|)
return|;
block|}
specifier|protected
name|ConstraintSecurityHandler
name|configureCommonAuthentication
parameter_list|(
name|Server
name|server
parameter_list|,
name|ServerConnector
name|connector
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|,
name|String
name|constraintName
parameter_list|,
name|String
index|[]
name|allowedRoles
parameter_list|,
name|Authenticator
name|authenticator
parameter_list|,
name|String
name|realm
parameter_list|,
name|LoginService
name|loginService
parameter_list|)
block|{
name|Constraint
name|constraint
init|=
operator|new
name|Constraint
argument_list|()
decl_stmt|;
name|constraint
operator|.
name|setName
argument_list|(
name|constraintName
argument_list|)
expr_stmt|;
name|constraint
operator|.
name|setRoles
argument_list|(
name|allowedRoles
argument_list|)
expr_stmt|;
comment|// This is telling Jetty to not allow unauthenticated requests through (very important!)
name|constraint
operator|.
name|setAuthenticate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ConstraintMapping
name|cm
init|=
operator|new
name|ConstraintMapping
argument_list|()
decl_stmt|;
name|cm
operator|.
name|setConstraint
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setPathSpec
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|ConstraintSecurityHandler
name|sh
init|=
operator|new
name|ConstraintSecurityHandler
argument_list|()
decl_stmt|;
name|sh
operator|.
name|setAuthenticator
argument_list|(
name|authenticator
argument_list|)
expr_stmt|;
name|sh
operator|.
name|setLoginService
argument_list|(
name|loginService
argument_list|)
expr_stmt|;
name|sh
operator|.
name|setConstraintMappings
argument_list|(
operator|new
name|ConstraintMapping
index|[]
block|{
name|cm
block|}
argument_list|)
expr_stmt|;
name|sh
operator|.
name|setRealmName
argument_list|(
name|realm
argument_list|)
expr_stmt|;
return|return
name|sh
return|;
block|}
comment|/**    * Configures the server connector.    *    *<p>The default configuration sets a timeout of 1 minute and disables    * TCP linger time.    *    *<p>To change the configuration, override this method in a derived class.    * The overriding method must call its super method.    *    * @param connector connector to be configured    * @param port port number handed over in constructor    */
specifier|protected
name|ServerConnector
name|configureConnector
parameter_list|(
name|ServerConnector
name|connector
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|connector
operator|.
name|setIdleTimeout
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setSoLingerTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
specifier|protected
name|AvaticaServerConfiguration
name|getConfig
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Server is already stopped"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Service terminating."
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Server
name|server1
init|=
name|server
decl_stmt|;
name|port
operator|=
operator|-
literal|1
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
name|server1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**    * Builder class for creating instances of {@link HttpServer}.    */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
name|Service
name|service
decl_stmt|;
specifier|private
name|Serialization
name|serialization
decl_stmt|;
specifier|private
name|AvaticaHandler
name|handler
init|=
literal|null
decl_stmt|;
specifier|private
name|MetricsSystemConfiguration
argument_list|<
name|?
argument_list|>
name|metricsConfig
decl_stmt|;
specifier|private
name|AuthenticationType
name|authenticationType
init|=
name|AuthenticationType
operator|.
name|NONE
decl_stmt|;
specifier|private
name|String
name|kerberosPrincipal
decl_stmt|;
specifier|private
name|String
name|kerberosRealm
decl_stmt|;
specifier|private
name|File
name|keytab
decl_stmt|;
specifier|private
name|DoAsRemoteUserCallback
name|remoteUserCallback
decl_stmt|;
specifier|private
name|String
name|loginServiceRealm
decl_stmt|;
specifier|private
name|String
name|loginServiceProperties
decl_stmt|;
specifier|private
name|String
index|[]
name|loginServiceAllowedRoles
decl_stmt|;
specifier|private
name|boolean
name|usingTLS
init|=
literal|false
decl_stmt|;
specifier|private
name|File
name|keystore
decl_stmt|;
specifier|private
name|String
name|keystorePassword
decl_stmt|;
specifier|private
name|File
name|truststore
decl_stmt|;
specifier|private
name|String
name|truststorePassword
decl_stmt|;
specifier|public
name|Builder
parameter_list|()
block|{
block|}
specifier|public
name|Builder
name|withPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the {@link Service} and {@link Serialization} information necessary to construct      * the appropriate {@link AvaticaHandler}.      *      * @param service The Avatica service      * @param serialization The serialization method      * @return<code>this</code>      */
specifier|public
name|Builder
name|withHandler
parameter_list|(
name|Service
name|service
parameter_list|,
name|Serialization
name|serialization
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|this
operator|.
name|serialization
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|serialization
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets an {@link AvaticaHandler} directly on the builder. Most users will not want to use      * this method and should instead use {@link #withHandler(Service, Serialization)}.      *      * @param handler The handler      * @return<code>this</code>      */
specifier|public
name|Builder
name|withHandler
parameter_list|(
name|AvaticaHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the given configuration to enable metrics collection in the server.      *      * @param metricsConfig Configuration object for metrics.      * @return<code>this</code>      */
specifier|public
name|Builder
name|withMetricsConfiguration
parameter_list|(
name|MetricsSystemConfiguration
argument_list|<
name|?
argument_list|>
name|metricsConfig
parameter_list|)
block|{
name|this
operator|.
name|metricsConfig
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|metricsConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the server to use SPNEGO authentication. This method requires that the      *<code>principal</code> contains the Kerberos realm. Invoking this method overrides any      * previous call which configures authentication.      *      * @param principal A kerberos principal with the realm required.      * @return<code>this</code>      */
specifier|public
name|Builder
name|withSpnego
parameter_list|(
name|String
name|principal
parameter_list|)
block|{
return|return
name|withSpnego
argument_list|(
name|principal
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Configures the server to use SPNEGO authentication. This method requires that the      *<code>principal</code> contains the Kerberos realm. Invoking this method overrides any      * previous call which configures authentication. Invoking this method overrides any previous      * call which configures authentication. By default, only principals from the server's realm are      * permitted, but additional realms can be allowed using<code>additionalAllowedRealms</code>.      *      * @param principal A kerberos principal with the realm required.      * @param additionalAllowedRealms Any additional realms, other than the server's realm, which      *    should be allowed to authenticate against the server. Can be null.      * @return<code>this</code>      */
specifier|public
name|Builder
name|withSpnego
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
index|[]
name|additionalAllowedRealms
parameter_list|)
block|{
name|int
name|index
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|principal
argument_list|)
operator|.
name|lastIndexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|index
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find '@' symbol in '"
operator|+
name|principal
operator|+
literal|"' to parse the Kerberos realm from the principal"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|realm
init|=
name|principal
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|withSpnego
argument_list|(
name|principal
argument_list|,
name|realm
argument_list|,
name|additionalAllowedRealms
argument_list|)
return|;
block|}
comment|/**      * Configures the server to use SPNEGO authentication. It is required that callers are logged      * in via Kerberos already or have provided the necessary configuration to automatically log      * in via JAAS (using the<code>java.security.auth.login.config</code> system property) before      * starting the {@link HttpServer}. Invoking this method overrides any previous call which      * configures authentication.      *      * @param principal The kerberos principal      * @param realm The kerberos realm      * @return<code>this</code>      */
specifier|public
name|Builder
name|withSpnego
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|realm
parameter_list|)
block|{
return|return
name|this
operator|.
name|withSpnego
argument_list|(
name|principal
argument_list|,
name|realm
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Configures the server to use SPNEGO authentication. It is required that callers are logged      * in via Kerberos already or have provided the necessary configuration to automatically log      * in via JAAS (using the<code>java.security.auth.login.config</code> system property) before      * starting the {@link HttpServer}. Invoking this method overrides any previous call which      * configures authentication. By default, only principals from the server's realm are permitted,      * but additional realms can be allowed using<code>additionalAllowedRealms</code>.      *      * @param principal The kerberos principal      * @param realm The kerberos realm      * @param additionalAllowedRealms Any additional realms, other than the server's realm, which      *    should be allowed to authenticate against the server. Can be null.      * @return<code>this</code>      */
specifier|public
name|Builder
name|withSpnego
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|realm
parameter_list|,
name|String
index|[]
name|additionalAllowedRealms
parameter_list|)
block|{
name|this
operator|.
name|authenticationType
operator|=
name|AuthenticationType
operator|.
name|SPNEGO
expr_stmt|;
name|this
operator|.
name|kerberosPrincipal
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|this
operator|.
name|kerberosRealm
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|realm
argument_list|)
expr_stmt|;
name|this
operator|.
name|loginServiceAllowedRoles
operator|=
name|additionalAllowedRealms
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a keytab to be used to perform a Kerberos login automatically (without the use of JAAS).      *      * @param keytab A KeyTab file for the server's login.      * @return<code>this</code>      */
specifier|public
name|Builder
name|withAutomaticLogin
parameter_list|(
name|File
name|keytab
parameter_list|)
block|{
name|this
operator|.
name|keytab
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|keytab
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a callback implementation to defer the logic on how to run an action as a given user and      * if the action should be permitted for that user.      *      * @param remoteUserCallback User-provided implementation of the callback      * @return<code>this</code>      */
specifier|public
name|Builder
name|withImpersonation
parameter_list|(
name|DoAsRemoteUserCallback
name|remoteUserCallback
parameter_list|)
block|{
name|this
operator|.
name|remoteUserCallback
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|remoteUserCallback
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the server to use HTTP Basic authentication. The<code>properties</code> must      * be in a form consumable by Jetty. Invoking this method overrides any previous call which      * configures authentication. This authentication is supplementary to the JDBC-provided user      * authentication interfaces and should only be used when those interfaces are not used.      *      * @param properties Location of a properties file parseable by Jetty which contains users and      *     passwords.      * @param allowedRoles An array of allowed roles in the properties file      * @return<code>this</code>      */
specifier|public
name|Builder
name|withBasicAuthentication
parameter_list|(
name|String
name|properties
parameter_list|,
name|String
index|[]
name|allowedRoles
parameter_list|)
block|{
return|return
name|withAuthentication
argument_list|(
name|AuthenticationType
operator|.
name|BASIC
argument_list|,
name|properties
argument_list|,
name|allowedRoles
argument_list|)
return|;
block|}
comment|/**      * Configures the server to use HTTP Digest authentication. The<code>properties</code> must      * be in a form consumable by Jetty. Invoking this method overrides any previous call which      * configures authentication. This authentication is supplementary to the JDBC-provided user      * authentication interfaces and should only be used when those interfaces are not used.      *      * @param properties Location of a properties file parseable by Jetty which contains users and      *     passwords.      * @param allowedRoles An array of allowed roles in the properties file      * @return<code>this</code>      */
specifier|public
name|Builder
name|withDigestAuthentication
parameter_list|(
name|String
name|properties
parameter_list|,
name|String
index|[]
name|allowedRoles
parameter_list|)
block|{
return|return
name|withAuthentication
argument_list|(
name|AuthenticationType
operator|.
name|DIGEST
argument_list|,
name|properties
argument_list|,
name|allowedRoles
argument_list|)
return|;
block|}
specifier|private
name|Builder
name|withAuthentication
parameter_list|(
name|AuthenticationType
name|authType
parameter_list|,
name|String
name|properties
parameter_list|,
name|String
index|[]
name|allowedRoles
parameter_list|)
block|{
name|this
operator|.
name|loginServiceRealm
operator|=
literal|"Avatica"
expr_stmt|;
name|this
operator|.
name|authenticationType
operator|=
name|authType
expr_stmt|;
name|this
operator|.
name|loginServiceProperties
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|this
operator|.
name|loginServiceAllowedRoles
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|allowedRoles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the server to use TLS for wire encryption.      *      * @param keystore The server's keystore      * @param keystorePassword The keystore's password      * @param truststore The truststore containing the key used to generate the server's key      * @param truststorePassword The truststore's password      * @return<code>this</code>      */
specifier|public
name|Builder
name|withTLS
parameter_list|(
name|File
name|keystore
parameter_list|,
name|String
name|keystorePassword
parameter_list|,
name|File
name|truststore
parameter_list|,
name|String
name|truststorePassword
parameter_list|)
block|{
name|this
operator|.
name|usingTLS
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|keystore
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|this
operator|.
name|keystorePassword
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|keystorePassword
argument_list|)
expr_stmt|;
name|this
operator|.
name|truststore
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|truststore
argument_list|)
expr_stmt|;
name|this
operator|.
name|truststorePassword
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|truststorePassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds the HttpServer instance from<code>this</code>.      * @return An HttpServer.      */
specifier|public
name|HttpServer
name|build
parameter_list|()
block|{
specifier|final
name|AvaticaServerConfiguration
name|serverConfig
decl_stmt|;
specifier|final
name|Subject
name|subject
decl_stmt|;
switch|switch
condition|(
name|authenticationType
condition|)
block|{
case|case
name|NONE
case|:
name|serverConfig
operator|=
literal|null
expr_stmt|;
name|subject
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|BASIC
case|:
case|case
name|DIGEST
case|:
comment|// Build the configuration for BASIC or DIGEST authentication.
name|serverConfig
operator|=
name|buildUserAuthenticationConfiguration
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|subject
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|SPNEGO
case|:
if|if
condition|(
name|usingTLS
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TLS has not been tested wtih SPNEGO"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|!=
name|keytab
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Performing Kerberos login with {} as {}"
argument_list|,
name|keytab
argument_list|,
name|kerberosPrincipal
argument_list|)
expr_stmt|;
name|subject
operator|=
name|loginViaKerberos
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not performing Kerberos login"
argument_list|)
expr_stmt|;
name|subject
operator|=
literal|null
expr_stmt|;
block|}
name|serverConfig
operator|=
name|buildSpnegoConfiguration
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unhandled AuthenticationType"
argument_list|)
throw|;
block|}
name|AvaticaHandler
name|handler
init|=
name|buildHandler
argument_list|(
name|this
argument_list|,
name|serverConfig
argument_list|)
decl_stmt|;
name|SslContextFactory
name|sslFactory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|usingTLS
condition|)
block|{
name|sslFactory
operator|=
operator|new
name|SslContextFactory
argument_list|()
expr_stmt|;
name|sslFactory
operator|.
name|setKeyStorePath
argument_list|(
name|this
operator|.
name|keystore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|setKeyStorePassword
argument_list|(
name|keystorePassword
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|setTrustStorePath
argument_list|(
name|truststore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|sslFactory
operator|.
name|setTrustStorePassword
argument_list|(
name|truststorePassword
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|HttpServer
argument_list|(
name|port
argument_list|,
name|handler
argument_list|,
name|serverConfig
argument_list|,
name|subject
argument_list|,
name|sslFactory
argument_list|)
return|;
block|}
comment|/**      * Creates the appropriate {@link AvaticaHandler}.      *      * @param b The {@link Builder}.      * @param config The Avatica server configuration      * @return An {@link AvaticaHandler}.      */
specifier|private
name|AvaticaHandler
name|buildHandler
parameter_list|(
name|Builder
name|b
parameter_list|,
name|AvaticaServerConfiguration
name|config
parameter_list|)
block|{
comment|// The user provided a handler explicitly.
if|if
condition|(
literal|null
operator|!=
name|b
operator|.
name|handler
condition|)
block|{
return|return
name|b
operator|.
name|handler
return|;
block|}
comment|// Normal case, we create the handler for the user.
name|HandlerFactory
name|factory
init|=
operator|new
name|HandlerFactory
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|getHandler
argument_list|(
name|b
operator|.
name|service
argument_list|,
name|b
operator|.
name|serialization
argument_list|,
name|b
operator|.
name|metricsConfig
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Builds an {@link AvaticaServerConfiguration} implementation for SPNEGO-based authentication.      * @param b The {@link Builder}.      * @return A configuration instance.      */
specifier|private
name|AvaticaServerConfiguration
name|buildSpnegoConfiguration
parameter_list|(
name|Builder
name|b
parameter_list|)
block|{
specifier|final
name|String
name|principal
init|=
name|b
operator|.
name|kerberosPrincipal
decl_stmt|;
specifier|final
name|String
name|realm
init|=
name|b
operator|.
name|kerberosRealm
decl_stmt|;
specifier|final
name|String
index|[]
name|additionalAllowedRealms
init|=
name|b
operator|.
name|loginServiceAllowedRoles
decl_stmt|;
specifier|final
name|DoAsRemoteUserCallback
name|callback
init|=
name|b
operator|.
name|remoteUserCallback
decl_stmt|;
return|return
operator|new
name|AvaticaServerConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AuthenticationType
name|getAuthenticationType
parameter_list|()
block|{
return|return
name|AuthenticationType
operator|.
name|SPNEGO
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKerberosRealm
parameter_list|()
block|{
return|return
name|realm
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKerberosPrincipal
parameter_list|()
block|{
return|return
name|principal
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsImpersonation
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|callback
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsRemoteUser
parameter_list|(
name|String
name|remoteUserName
parameter_list|,
name|String
name|remoteAddress
parameter_list|,
name|Callable
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|callback
operator|.
name|doAsRemoteUser
argument_list|(
name|remoteUserName
argument_list|,
name|remoteAddress
argument_list|,
name|action
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAllowedRoles
parameter_list|()
block|{
return|return
name|additionalAllowedRealms
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHashLoginServiceRealm
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHashLoginServiceProperties
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|private
name|AvaticaServerConfiguration
name|buildUserAuthenticationConfiguration
parameter_list|(
name|Builder
name|b
parameter_list|)
block|{
specifier|final
name|AuthenticationType
name|authType
init|=
name|b
operator|.
name|authenticationType
decl_stmt|;
specifier|final
name|String
index|[]
name|allowedRoles
init|=
name|b
operator|.
name|loginServiceAllowedRoles
decl_stmt|;
specifier|final
name|String
name|realm
init|=
name|b
operator|.
name|loginServiceRealm
decl_stmt|;
specifier|final
name|String
name|properties
init|=
name|b
operator|.
name|loginServiceProperties
decl_stmt|;
return|return
operator|new
name|AvaticaServerConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AuthenticationType
name|getAuthenticationType
parameter_list|()
block|{
return|return
name|authType
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAllowedRoles
parameter_list|()
block|{
return|return
name|allowedRoles
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHashLoginServiceRealm
parameter_list|()
block|{
return|return
name|realm
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHashLoginServiceProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
comment|// Unused
annotation|@
name|Override
specifier|public
name|String
name|getKerberosRealm
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKerberosPrincipal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsImpersonation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsRemoteUser
parameter_list|(
name|String
name|remoteUserName
parameter_list|,
name|String
name|remoteAddress
parameter_list|,
name|Callable
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Subject
name|loginViaKerberos
parameter_list|(
name|Builder
name|b
parameter_list|)
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
name|b
operator|.
name|kerberosPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|KeytabJaasConf
name|conf
init|=
operator|new
name|KeytabJaasConf
argument_list|(
name|b
operator|.
name|kerberosPrincipal
argument_list|,
name|b
operator|.
name|keytab
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|confName
init|=
literal|"NotUsed"
decl_stmt|;
try|try
block|{
name|LoginContext
name|loginContext
init|=
operator|new
name|LoginContext
argument_list|(
name|confName
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
return|return
name|loginContext
operator|.
name|getSubject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Javax Configuration class which always returns a configuration for our keytab-based      * login.      */
specifier|private
specifier|static
class|class
name|KeytabJaasConf
extends|extends
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
block|{
specifier|private
specifier|final
name|String
name|principal
decl_stmt|;
specifier|private
specifier|final
name|String
name|keytab
decl_stmt|;
specifier|private
name|KeytabJaasConf
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|keytab
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|keytab
operator|=
name|keytab
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"isInitiator"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.security.krb5.debug"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|options
argument_list|)
block|}
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getKrb5LoginModuleName
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|?
literal|"com.ibm.security.auth.module.Krb5LoginModule"
else|:
literal|"com.sun.security.auth.module.Krb5LoginModule"
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End HttpServer.java
end_comment

end_unit

