begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|MetricsSystemConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|MetricsSystemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|MetricsSystemLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|noop
operator|.
name|NoopMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|noop
operator|.
name|NoopMetricsSystemConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_comment
comment|/**  * Factory that instantiates the desired implementation, typically differing on the method  * used to serialize messages, for use in the Avatica server.  */
end_comment

begin_class
specifier|public
class|class
name|HandlerFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HandlerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Constructs the desired implementation for the given serialization method with metrics.    *    * @param service The underlying {@link Service}.    * @param serialization The desired message serialization.    * @return The {@link Handler}.    */
specifier|public
name|Handler
name|getHandler
parameter_list|(
name|Service
name|service
parameter_list|,
name|Driver
operator|.
name|Serialization
name|serialization
parameter_list|)
block|{
return|return
name|getHandler
argument_list|(
name|service
argument_list|,
name|serialization
argument_list|,
name|NoopMetricsSystemConfiguration
operator|.
name|getInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Constructs the desired implementation for the given serialization method with metrics.    *    * @param service The underlying {@link Service}.    * @param serialization The desired message serialization.    * @param metricsConfig Configuration for the {@link MetricsSystem}.    * @return The {@link Handler}.    */
specifier|public
name|Handler
name|getHandler
parameter_list|(
name|Service
name|service
parameter_list|,
name|Driver
operator|.
name|Serialization
name|serialization
parameter_list|,
name|MetricsSystemConfiguration
argument_list|<
name|?
argument_list|>
name|metricsConfig
parameter_list|)
block|{
name|MetricsSystem
name|metrics
init|=
name|MetricsSystemLoader
operator|.
name|load
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|metricsConfig
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|serialization
condition|)
block|{
case|case
name|JSON
case|:
return|return
operator|new
name|AvaticaJsonHandler
argument_list|(
name|service
argument_list|,
name|metrics
argument_list|)
return|;
case|case
name|PROTOBUF
case|:
return|return
operator|new
name|AvaticaProtobufHandler
argument_list|(
name|service
argument_list|,
name|metrics
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown Avatica handler for "
operator|+
name|serialization
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Load a {@link MetricsSystem} using ServiceLoader to create a {@link MetricsSystemFactory}.    *    * @param config State to pass to the factory for initialization.    * @return A {@link MetricsSystem} instance.    */
name|MetricsSystem
name|loadMetricsSystem
parameter_list|(
name|MetricsSystemConfiguration
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|ServiceLoader
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|loader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|MetricsSystemFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|availableFactories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetricsSystemFactory
name|factory
range|:
name|loader
control|)
block|{
name|availableFactories
operator|.
name|add
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|1
operator|==
name|availableFactories
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// One and only one instance -- what we want
name|MetricsSystemFactory
name|factory
init|=
name|availableFactories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded MetricsSystem {}"
argument_list|,
name|factory
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|factory
operator|.
name|create
argument_list|(
name|config
argument_list|)
return|;
block|}
if|else if
condition|(
name|availableFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// None-provided default to no metrics
name|LOG
operator|.
name|info
argument_list|(
literal|"No metrics implementation available on classpath. Using No-op implementation"
argument_list|)
expr_stmt|;
return|return
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
return|;
block|}
else|else
block|{
comment|// Tell the user they're doing something wrong, and choose the first impl.
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|MetricsSystemFactory
name|factory
range|:
name|availableFactories
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|factory
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found multiple MetricsSystemFactory implementations: {}."
operator|+
literal|" Using No-op implementation"
argument_list|,
name|sb
argument_list|)
expr_stmt|;
return|return
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End HandlerFactory.java
end_comment

end_unit

