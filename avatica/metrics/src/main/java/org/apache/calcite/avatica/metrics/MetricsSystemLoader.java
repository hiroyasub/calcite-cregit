begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|noop
operator|.
name|NoopMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_comment
comment|/**  * A utility encapsulating use of {@link ServiceLoader} to instantiate a {@link MetricsSystem}.  */
end_comment

begin_class
specifier|public
class|class
name|MetricsSystemLoader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetricsSystemLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MetricsSystemLoader
name|INSTANCE
init|=
operator|new
name|MetricsSystemLoader
argument_list|()
decl_stmt|;
specifier|private
name|MetricsSystemLoader
parameter_list|()
block|{
block|}
comment|/**    * Creates a {@link MetricsSystem} instance using the corresponding {@link MetricsSystemFactory}    * available to {@link ServiceLoader} on the classpath. If there is not exactly one instance of    * a {@link MetricsSystemFactory}, an instance of {@link NoopMetricsSystem} will be returned.    *    * @param config State to pass to the {@link MetricsSystemFactory}.    * @return A {@link MetricsSystem} implementation.    */
specifier|public
specifier|static
name|MetricsSystem
name|load
parameter_list|(
name|MetricsSystemConfiguration
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
block|{
return|return
name|INSTANCE
operator|.
name|_load
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|config
argument_list|)
argument_list|)
return|;
block|}
name|MetricsSystem
name|_load
parameter_list|(
name|MetricsSystemConfiguration
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|List
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|availableFactories
init|=
name|getFactories
argument_list|()
decl_stmt|;
if|if
condition|(
literal|1
operator|==
name|availableFactories
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// One and only one instance -- what we want/expect
name|MetricsSystemFactory
name|factory
init|=
name|availableFactories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded MetricsSystem {}"
argument_list|,
name|factory
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|factory
operator|.
name|create
argument_list|(
name|config
argument_list|)
return|;
block|}
if|else if
condition|(
name|availableFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// None-provided default to no metrics
name|LOG
operator|.
name|info
argument_list|(
literal|"No metrics implementation available on classpath. Using No-op implementation"
argument_list|)
expr_stmt|;
return|return
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
return|;
block|}
else|else
block|{
comment|// Tell the user they're doing something wrong, and choose the first impl.
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|MetricsSystemFactory
name|factory
range|:
name|availableFactories
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|factory
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found multiple MetricsSystemFactory implementations: {}."
operator|+
literal|" Using No-op implementation"
argument_list|,
name|sb
argument_list|)
expr_stmt|;
return|return
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
return|;
block|}
block|}
name|List
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|getFactories
parameter_list|()
block|{
name|ServiceLoader
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|loader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|MetricsSystemFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|availableFactories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetricsSystemFactory
name|factory
range|:
name|loader
control|)
block|{
name|availableFactories
operator|.
name|add
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|availableFactories
return|;
block|}
block|}
end_class

begin_comment
comment|// End MetricsSystemLoader.java
end_comment

end_unit

