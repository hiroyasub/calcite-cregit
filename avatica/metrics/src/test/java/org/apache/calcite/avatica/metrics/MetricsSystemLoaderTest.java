begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|noop
operator|.
name|NoopMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|noop
operator|.
name|NoopMetricsSystemConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test class for {@link MetricsSystemLoader}.  */
end_comment

begin_class
specifier|public
class|class
name|MetricsSystemLoaderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSingleInstance
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|factories
init|=
name|Collections
operator|.
expr|<
name|MetricsSystemFactory
operator|>
name|singletonList
argument_list|(
operator|new
name|MarkedNoopMetricsSystemFactory
argument_list|()
argument_list|)
decl_stmt|;
name|MetricsSystemLoader
name|loader
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MetricsSystemLoader
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|loader
operator|.
name|getFactories
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|factories
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|loader
operator|.
name|_load
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|MetricsSystemConfiguration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
comment|// One MetricsSystemFactory should return the MetricsSystem it creates
name|MetricsSystem
name|system
init|=
name|loader
operator|.
name|_load
argument_list|(
name|NoopMetricsSystemConfiguration
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MarkedMetricsSystem
operator|.
name|INSTANCE
argument_list|,
name|system
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleInstances
parameter_list|()
block|{
comment|// The type of the factories doesn't matter (we can send duplicates for testing purposes)
specifier|final
name|List
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|factories
init|=
name|Arrays
operator|.
expr|<
name|MetricsSystemFactory
operator|>
name|asList
argument_list|(
operator|new
name|MarkedNoopMetricsSystemFactory
argument_list|()
argument_list|,
operator|new
name|MarkedNoopMetricsSystemFactory
argument_list|()
argument_list|)
decl_stmt|;
name|MetricsSystemLoader
name|loader
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MetricsSystemLoader
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|loader
operator|.
name|getFactories
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|factories
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|loader
operator|.
name|_load
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|MetricsSystemConfiguration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
comment|// We had two factories loaded, therefore we'll fall back to the NoopMetricsSystem
name|MetricsSystem
name|system
init|=
name|loader
operator|.
name|_load
argument_list|(
name|NoopMetricsSystemConfiguration
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
argument_list|,
name|system
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInstances
parameter_list|()
block|{
comment|// The type of the factories doesn't matter (we can send duplicates for testing purposes)
specifier|final
name|List
argument_list|<
name|MetricsSystemFactory
argument_list|>
name|factories
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|MetricsSystemLoader
name|loader
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MetricsSystemLoader
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|loader
operator|.
name|getFactories
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|factories
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|loader
operator|.
name|_load
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|MetricsSystemConfiguration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
comment|// We had no factories loaded, therefore we'll fall back to the NoopMetricsSystem
name|MetricsSystem
name|system
init|=
name|loader
operator|.
name|_load
argument_list|(
name|NoopMetricsSystemConfiguration
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NoopMetricsSystem
operator|.
name|getInstance
argument_list|()
argument_list|,
name|system
argument_list|)
expr_stmt|;
block|}
comment|/**    * A test factory implementation which can return a recognized MetricsSystem implementation.    */
specifier|private
specifier|static
class|class
name|MarkedNoopMetricsSystemFactory
implements|implements
name|MetricsSystemFactory
block|{
specifier|public
name|MarkedMetricsSystem
name|create
parameter_list|(
name|MetricsSystemConfiguration
argument_list|<
name|?
argument_list|>
name|config
parameter_list|)
block|{
return|return
name|MarkedMetricsSystem
operator|.
name|INSTANCE
return|;
block|}
block|}
comment|/**    * A metrics system implementation that is identifiable for testing.    */
specifier|private
specifier|static
class|class
name|MarkedMetricsSystem
implements|implements
name|MetricsSystem
block|{
specifier|private
specifier|static
specifier|final
name|MarkedMetricsSystem
name|INSTANCE
init|=
operator|new
name|MarkedMetricsSystem
argument_list|()
decl_stmt|;
specifier|private
name|MarkedMetricsSystem
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Timer
name|getTimer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Histogram
name|getHistogram
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meter
name|getMeter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|Gauge
argument_list|<
name|T
argument_list|>
name|gauge
parameter_list|)
block|{
block|}
block|}
block|}
end_class

begin_comment
comment|// End MetricsSystemLoaderTest.java
end_comment

end_unit

