begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|tck
operator|.
name|tests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ParameterMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class for metadata operations (parameter, resultset).  */
end_comment

begin_class
specifier|public
class|class
name|MetadataTest
extends|extends
name|BaseTckTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|parameterMetadata
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (pk integer not null primary key, "
operator|+
literal|"col1 DECIMAL(10, 5), col2 boolean not null)"
decl_stmt|;
name|assertFalse
argument_list|(
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|insertSql
init|=
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values(?, ?, ?)"
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|pstmt
init|=
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|insertSql
argument_list|)
init|)
block|{
name|ParameterMetaData
name|params
init|=
name|pstmt
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|params
operator|.
name|getParameterCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|params
operator|.
name|getParameterType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|params
operator|.
name|isSigned
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ParameterMetaData
operator|.
name|parameterNoNulls
operator|==
name|params
operator|.
name|isNullable
argument_list|(
literal|1
argument_list|)
operator|||
name|ParameterMetaData
operator|.
name|parameterNullableUnknown
operator|==
name|params
operator|.
name|isNullable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|params
operator|.
name|getParameterType
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|params
operator|.
name|isSigned
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ParameterMetaData
operator|.
name|parameterNullable
operator|==
name|params
operator|.
name|isNullable
argument_list|(
literal|2
argument_list|)
operator|||
name|ParameterMetaData
operator|.
name|parameterNullableUnknown
operator|==
name|params
operator|.
name|isNullable
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|params
operator|.
name|getPrecision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|params
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|params
operator|.
name|getParameterType
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|params
operator|.
name|isSigned
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ParameterMetaData
operator|.
name|parameterNoNulls
operator|==
name|params
operator|.
name|isNullable
argument_list|(
literal|3
argument_list|)
operator|||
name|ParameterMetaData
operator|.
name|parameterNullableUnknown
operator|==
name|params
operator|.
name|isNullable
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// CALCITE-1103<1.8.0 server mishandled the protobuf translation from BIG_DECIMAL to NUMBER
name|pstmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setBigDecimal
argument_list|(
literal|2
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"12345.12345"
argument_list|)
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setBoolean
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setBigDecimal
argument_list|(
literal|2
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"54321.54321"
argument_list|)
argument_list|)
expr_stmt|;
name|pstmt
operator|.
name|setBoolean
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pstmt
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|results
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" ORDER BY pk"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|ResultSetMetaData
name|resultMetadata
init|=
name|results
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// Verify result metadata
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|resultMetadata
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ParameterMetaData
operator|.
name|parameterNoNulls
operator|==
name|resultMetadata
operator|.
name|isNullable
argument_list|(
literal|1
argument_list|)
operator|||
name|ParameterMetaData
operator|.
name|parameterNullableUnknown
operator|==
name|resultMetadata
operator|.
name|isNullable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|resultMetadata
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultMetadata
operator|.
name|isSigned
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ParameterMetaData
operator|.
name|parameterNullable
operator|==
name|resultMetadata
operator|.
name|isNullable
argument_list|(
literal|2
argument_list|)
operator|||
name|ParameterMetaData
operator|.
name|parameterNullableUnknown
operator|==
name|resultMetadata
operator|.
name|isNullable
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|resultMetadata
operator|.
name|getColumnType
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultMetadata
operator|.
name|isSigned
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|resultMetadata
operator|.
name|getPrecision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|resultMetadata
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ParameterMetaData
operator|.
name|parameterNoNulls
operator|==
name|resultMetadata
operator|.
name|isNullable
argument_list|(
literal|3
argument_list|)
operator|||
name|ParameterMetaData
operator|.
name|parameterNullableUnknown
operator|==
name|resultMetadata
operator|.
name|isNullable
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|resultMetadata
operator|.
name|getColumnType
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultMetadata
operator|.
name|isSigned
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the results
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// CALCITE-1103 protobuf truncated decimal value
name|BigDecimal
name|buggyDecimalValue
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"54321.00000"
argument_list|)
decl_stmt|;
name|BigDecimal
name|expectedDecimalValue
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"54321.54321"
argument_list|)
decl_stmt|;
name|BigDecimal
name|actualDecimalValue
init|=
name|results
operator|.
name|getBigDecimal
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected decimal value of "
operator|+
name|actualDecimalValue
argument_list|,
name|expectedDecimalValue
operator|.
name|equals
argument_list|(
name|actualDecimalValue
argument_list|)
operator|||
name|buggyDecimalValue
operator|.
name|equals
argument_list|(
name|actualDecimalValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|results
operator|.
name|getBoolean
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|results
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// CALCITE-1103 protobuf truncated decimal value
name|buggyDecimalValue
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"12345.00000"
argument_list|)
expr_stmt|;
name|expectedDecimalValue
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"12345.12345"
argument_list|)
expr_stmt|;
name|actualDecimalValue
operator|=
name|results
operator|.
name|getBigDecimal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected decimal value of "
operator|+
name|actualDecimalValue
argument_list|,
name|expectedDecimalValue
operator|.
name|equals
argument_list|(
name|actualDecimalValue
argument_list|)
operator|||
name|buggyDecimalValue
operator|.
name|equals
argument_list|(
name|actualDecimalValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|results
operator|.
name|getBoolean
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MetadataTest.java
end_comment

end_unit

