begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|tck
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|JCommander
import|;
end_import

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|ClassPath
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|JUnitCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Entry point for running an Avatica cross-version compatibility test.  */
end_comment

begin_class
specifier|public
class|class
name|TestRunner
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRunner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANSI_RESET
init|=
literal|"\u001B[0m"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANSI_RED
init|=
literal|"\u001B[31m"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANSI_GREEN
init|=
literal|"\u001B[32m"
decl_stmt|;
specifier|private
specifier|static
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|static
name|String
name|driverUrl
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
literal|"-u"
block|,
literal|"--jdbcUrl"
block|}
argument_list|,
name|description
operator|=
literal|"JDBC URL for Avatica Driver"
argument_list|)
specifier|private
name|String
name|jdbcUrl
decl_stmt|;
specifier|private
name|JUnitCore
name|junitCore
decl_stmt|;
comment|/**    * Returns the {@link Connection} for tests to use.    *    * @return A JDBC Connection.    */
specifier|public
specifier|static
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
literal|null
operator|==
name|driver
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"JDBC Driver is not initialized"
argument_list|)
throw|;
block|}
return|return
name|driver
operator|.
name|connect
argument_list|(
name|driverUrl
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Construct the Connection
name|initializeDriver
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|driver
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to find driver for {}"
argument_list|,
name|jdbcUrl
argument_list|)
expr_stmt|;
name|Unsafe
operator|.
name|systemExit
argument_list|(
name|TestRunnerExitCodes
operator|.
name|NO_SUCH_DRIVER
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Initialize JUnit
name|initializeJUnit
argument_list|()
expr_stmt|;
comment|// Enumerate available test cases
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|testClasses
init|=
name|getAllTestClasses
argument_list|()
decl_stmt|;
specifier|final
name|TestResults
name|globalResults
init|=
operator|new
name|TestResults
argument_list|()
decl_stmt|;
comment|// Run each test case
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
range|:
name|testClasses
control|)
block|{
name|runSingleTest
argument_list|(
name|globalResults
argument_list|,
name|testClass
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|globalResults
operator|.
name|summarize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|globalResults
operator|.
name|numFailed
operator|>
literal|0
condition|)
block|{
comment|// Tests failed, don't exit normally
name|Unsafe
operator|.
name|systemExit
argument_list|(
name|TestRunnerExitCodes
operator|.
name|FAILED_TESTS
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Exited normally
name|Unsafe
operator|.
name|systemExit
argument_list|(
name|TestRunnerExitCodes
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Finds all tests to run for the TCK.    *    * @return A list of test classes to run.    */
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getAllTestClasses
parameter_list|()
block|{
try|try
block|{
name|ClassPath
name|cp
init|=
name|ClassPath
operator|.
name|from
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|ClassInfo
argument_list|>
name|classes
init|=
name|cp
operator|.
name|getTopLevelClasses
argument_list|(
literal|"org.apache.calcite.avatica.tck.tests"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|testClasses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|classes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ClassInfo
name|classInfo
range|:
name|classes
control|)
block|{
if|if
condition|(
name|classInfo
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"package-info"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|classInfo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|clz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
comment|// Ignore abstract classes
continue|continue;
block|}
name|testClasses
operator|.
name|add
argument_list|(
name|clz
argument_list|)
expr_stmt|;
block|}
return|return
name|testClasses
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to instantiate test classes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Unsafe
operator|.
name|systemExit
argument_list|(
name|TestRunnerExitCodes
operator|.
name|TEST_CASE_INSTANTIATION
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Unreachable..
return|return
literal|null
return|;
block|}
block|}
name|void
name|initializeDriver
parameter_list|()
block|{
try|try
block|{
comment|// Make sure the Avatica Driver gets loaded
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.calcite.avatica.remote.Driver"
argument_list|)
expr_stmt|;
name|driverUrl
operator|=
name|jdbcUrl
expr_stmt|;
name|driver
operator|=
name|DriverManager
operator|.
name|getDriver
argument_list|(
name|driverUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not instantiate JDBC Driver with URL: '{}'"
argument_list|,
name|jdbcUrl
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Unsafe
operator|.
name|systemExit
argument_list|(
name|TestRunnerExitCodes
operator|.
name|BAD_JDBC_URL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not load Avatica Driver class"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Unsafe
operator|.
name|systemExit
argument_list|(
name|TestRunnerExitCodes
operator|.
name|MISSING_DRIVER_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets up JUnit to run the tests for us.    */
name|void
name|initializeJUnit
parameter_list|()
block|{
name|junitCore
operator|=
operator|new
name|JUnitCore
argument_list|()
expr_stmt|;
name|junitCore
operator|.
name|addListener
argument_list|(
operator|new
name|RunListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|testStarted
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting {}"
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testFinished
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Finished {}{}"
argument_list|,
name|ANSI_GREEN
argument_list|,
name|description
argument_list|,
name|ANSI_RESET
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testFailure
parameter_list|(
name|Failure
name|failure
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{}Failed {}{}"
argument_list|,
name|ANSI_RED
argument_list|,
name|failure
operator|.
name|getDescription
argument_list|()
argument_list|,
name|ANSI_RESET
argument_list|,
name|failure
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs a single test class, adding its results to<code>globalResults</code>.    *    * @param globalResults A global record of test results.    * @param testClass The test class to run.    */
name|void
name|runSingleTest
parameter_list|(
specifier|final
name|TestResults
name|globalResults
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
parameter_list|)
block|{
specifier|final
name|String
name|className
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|testClass
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}Running {}{}"
argument_list|,
name|ANSI_GREEN
argument_list|,
name|className
argument_list|,
name|ANSI_RESET
argument_list|)
expr_stmt|;
try|try
block|{
name|Result
name|result
init|=
name|junitCore
operator|.
name|run
argument_list|(
name|testClass
argument_list|)
decl_stmt|;
name|globalResults
operator|.
name|merge
argument_list|(
name|testClass
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// most likely JUnit issues, like no tests to run
name|LOG
operator|.
name|error
argument_list|(
literal|"{}Test failed: {}{}"
argument_list|,
name|ANSI_RED
argument_list|,
name|className
argument_list|,
name|ANSI_RESET
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
name|runner
init|=
operator|new
name|TestRunner
argument_list|()
decl_stmt|;
comment|// Parse the args, sets it on runner.
operator|new
name|JCommander
argument_list|(
name|runner
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// Run the tests.
name|runner
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * A container to track results from all tests executed.    */
specifier|private
specifier|static
class|class
name|TestResults
block|{
specifier|private
name|int
name|numRun
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|numFailed
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|numIgnored
init|=
literal|0
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Failure
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Updates the current state of<code>this</code> with the<code>result</code>.      *      * @param testClass The test class executed.      * @param result The results of the test class execution.      * @return<code>this</code>      */
specifier|public
name|TestResults
name|merge
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
parameter_list|,
name|Result
name|result
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Tests run: {}, Failures: {}, Skipped: {}, Time elapsed: {} - in {}"
argument_list|,
name|result
operator|.
name|getRunCount
argument_list|()
argument_list|,
name|result
operator|.
name|getFailureCount
argument_list|()
argument_list|,
name|result
operator|.
name|getIgnoreCount
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|result
operator|.
name|getRunTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|testClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|numRun
operator|+=
name|result
operator|.
name|getRunCount
argument_list|()
expr_stmt|;
name|numFailed
operator|+=
name|result
operator|.
name|getFailureCount
argument_list|()
expr_stmt|;
name|numIgnored
operator|+=
name|result
operator|.
name|getIgnoreCount
argument_list|()
expr_stmt|;
comment|// Collect the failures
if|if
condition|(
operator|!
name|result
operator|.
name|wasSuccessful
argument_list|()
condition|)
block|{
name|failures
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|getFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Constructs a human-readable summary of the success/failure of the tests executed.      *      * @return A summary in the form of a String.      */
specifier|public
name|String
name|summarize
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nTest Summary: Run: "
argument_list|)
operator|.
name|append
argument_list|(
name|numRun
argument_list|)
operator|.
name|append
argument_list|(
literal|", Failed: "
argument_list|)
operator|.
name|append
argument_list|(
name|numFailed
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Skipped: "
argument_list|)
operator|.
name|append
argument_list|(
name|numIgnored
argument_list|)
expr_stmt|;
if|if
condition|(
name|numFailed
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ANSI_RED
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\nFailures:"
argument_list|)
operator|.
name|append
argument_list|(
name|ANSI_RESET
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Failure
name|failure
range|:
name|failures
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|failure
operator|.
name|getTestHeader
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * ExitCodes set by {@link TestRunner}.    */
specifier|private
enum|enum
name|TestRunnerExitCodes
block|{
comment|// Position is important, ordinal() is used!
name|NORMAL
block|,
comment|// 0, all tests passed
name|BAD_JDBC_URL
block|,
comment|// 1
name|TEST_CASE_INSTANTIATION
block|,
comment|// 2
name|NO_SUCH_DRIVER
block|,
comment|// 3
name|FAILED_TESTS
block|,
comment|// 4
name|MISSING_DRIVER_CLASS
block|;
comment|// 5
block|}
block|}
end_class

begin_comment
comment|// End TestRunner.java
end_comment

end_unit

