begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaSeverity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
operator|.
name|Rep
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
operator|.
name|ScalarType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionPropertiesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|Style
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|MetaImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CatalogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CloseConnectionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CloseConnectionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CloseStatementRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CloseStatementResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ColumnsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CommitRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CommitResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ConnectionSyncRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ConnectionSyncResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CreateStatementRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|CreateStatementResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|DatabasePropertyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|DatabasePropertyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ErrorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ExecuteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|FetchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|FetchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|OpenConnectionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|OpenConnectionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|PrepareAndExecuteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|PrepareRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|PrepareResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|ResultSetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|RollbackRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|RollbackResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|RpcMetadataResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|SchemasRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|SyncResultsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|SyncResultsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|TableTypesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|TablesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|TypeInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests serialization of requests and response objects.  *  * @param<T> The object class being tested  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ProtobufTranslationImplTest
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * Simple function definition that acts as an identity.    *    * @param<A> Argument type    */
specifier|private
interface|interface
name|IdentityFunction
parameter_list|<
name|A
parameter_list|>
block|{
name|A
name|apply
parameter_list|(
name|A
name|obj
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Identity function that accepts a request, serializes it to protobuf, and converts it back.    */
specifier|private
specifier|static
class|class
name|RequestFunc
implements|implements
name|IdentityFunction
argument_list|<
name|Request
argument_list|>
block|{
specifier|private
specifier|final
name|ProtobufTranslation
name|translation
decl_stmt|;
specifier|public
name|RequestFunc
parameter_list|(
name|ProtobufTranslation
name|translation
parameter_list|)
block|{
name|this
operator|.
name|translation
operator|=
name|translation
expr_stmt|;
block|}
specifier|public
name|Request
name|apply
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Serialize and then re-parse the request
return|return
name|translation
operator|.
name|parseRequest
argument_list|(
name|translation
operator|.
name|serializeRequest
argument_list|(
name|request
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Identity function that accepts a response, serializes it to protobuf, and converts it back.    */
specifier|private
specifier|static
class|class
name|ResponseFunc
implements|implements
name|IdentityFunction
argument_list|<
name|Response
argument_list|>
block|{
specifier|private
specifier|final
name|ProtobufTranslation
name|translation
decl_stmt|;
specifier|public
name|ResponseFunc
parameter_list|(
name|ProtobufTranslation
name|translation
parameter_list|)
block|{
name|this
operator|.
name|translation
operator|=
name|translation
expr_stmt|;
block|}
specifier|public
name|Response
name|apply
parameter_list|(
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Serialize and then re-pare the response
return|return
name|translation
operator|.
name|parseResponse
argument_list|(
name|translation
operator|.
name|serializeResponse
argument_list|(
name|response
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The impl we're testing
name|ProtobufTranslationImpl
name|translation
init|=
operator|new
name|ProtobufTranslationImpl
argument_list|()
decl_stmt|;
comment|// Identity transformation for Requests
name|RequestFunc
name|requestFunc
init|=
operator|new
name|RequestFunc
argument_list|(
name|translation
argument_list|)
decl_stmt|;
comment|// Identity transformation for Responses
name|ResponseFunc
name|responseFunc
init|=
operator|new
name|ResponseFunc
argument_list|(
name|translation
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Request
argument_list|>
name|requests
init|=
name|getRequests
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Request
argument_list|>
name|requestsWithNulls
init|=
name|getRequestsWithNulls
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Response
argument_list|>
name|responses
init|=
name|getResponses
argument_list|()
decl_stmt|;
comment|// Requests
for|for
control|(
name|Request
name|request
range|:
name|requests
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|request
block|,
name|requestFunc
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Requests with nulls in parameters
for|for
control|(
name|Request
name|request
range|:
name|requestsWithNulls
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|request
block|,
name|requestFunc
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Responses
for|for
control|(
name|Response
name|response
range|:
name|responses
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|response
block|,
name|responseFunc
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
comment|/**    * Generates a collection of Requests whose serialization will be tested.    */
specifier|private
specifier|static
name|List
argument_list|<
name|Request
argument_list|>
name|getRequests
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|Request
argument_list|>
name|requests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CatalogsRequest
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|DatabasePropertyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|SchemasRequest
argument_list|(
literal|"connectionId"
argument_list|,
literal|"catalog"
argument_list|,
literal|"schemaPattern"
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|TablesRequest
argument_list|(
literal|"connectionId"
argument_list|,
literal|"catalog"
argument_list|,
literal|"schemaPattern"
argument_list|,
literal|"tableNamePattern"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"BOOLEAN"
argument_list|,
literal|"INT"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|TableTypesRequest
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|ColumnsRequest
argument_list|(
literal|"connectionId"
argument_list|,
literal|"catalog"
argument_list|,
literal|"schemaPattern"
argument_list|,
literal|"tableNamePattern"
argument_list|,
literal|"columnNamePattern"
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|TypeInfoRequest
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|PrepareAndExecuteRequest
argument_list|(
literal|"connectionId"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"sql"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|PrepareRequest
argument_list|(
literal|"connectionId"
argument_list|,
literal|"sql"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypedValue
argument_list|>
name|paramValues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TypedValue
operator|.
name|create
argument_list|(
name|Rep
operator|.
name|BOOLEAN
operator|.
name|name
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|,
name|TypedValue
operator|.
name|create
argument_list|(
name|Rep
operator|.
name|STRING
operator|.
name|name
argument_list|()
argument_list|,
literal|"string"
argument_list|)
argument_list|)
decl_stmt|;
name|FetchRequest
name|fetchRequest
init|=
operator|new
name|FetchRequest
argument_list|(
literal|"connectionId"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|fetchRequest
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CreateStatementRequest
argument_list|(
literal|"connectionId"
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CloseStatementRequest
argument_list|(
literal|"connectionId"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"param1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"param2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|OpenConnectionRequest
argument_list|(
literal|"connectionId"
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CloseConnectionRequest
argument_list|(
literal|"connectionId"
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|ConnectionSyncRequest
argument_list|(
literal|"connectionId"
argument_list|,
operator|new
name|ConnectionPropertiesImpl
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"catalog"
argument_list|,
literal|"schema"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|SyncResultsRequest
argument_list|(
literal|"connectionId"
argument_list|,
literal|12345
argument_list|,
name|getSqlQueryState
argument_list|()
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|SyncResultsRequest
argument_list|(
literal|"connectionId2"
argument_list|,
literal|54321
argument_list|,
name|getMetadataQueryState1
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|SyncResultsRequest
argument_list|(
literal|"connectionId3"
argument_list|,
literal|5
argument_list|,
name|getMetadataQueryState2
argument_list|()
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CommitRequest
argument_list|(
literal|"connectionId"
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|RollbackRequest
argument_list|(
literal|"connectionId"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|requests
return|;
block|}
specifier|private
specifier|static
name|QueryState
name|getSqlQueryState
parameter_list|()
block|{
return|return
operator|new
name|QueryState
argument_list|(
literal|"SELECT * from TABLE"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|QueryState
name|getMetadataQueryState1
parameter_list|()
block|{
return|return
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_COLUMNS
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|""
block|,
literal|null
block|,
literal|"%"
block|,
literal|"%"
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|QueryState
name|getMetadataQueryState2
parameter_list|()
block|{
return|return
operator|new
name|QueryState
argument_list|(
name|MetaDataOperation
operator|.
name|GET_CATALOGS
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Request
argument_list|>
name|getRequestsWithNulls
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|Request
argument_list|>
name|requests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// We're pretty fast and loose on what can be null.
name|requests
operator|.
name|add
argument_list|(
operator|new
name|SchemasRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Repeated fields default to an empty list
name|requests
operator|.
name|add
argument_list|(
operator|new
name|TablesRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|ColumnsRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|PrepareAndExecuteRequest
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|PrepareRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CreateStatementRequest
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CloseStatementRequest
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|OpenConnectionRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|CloseConnectionRequest
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|ConnectionSyncRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|requests
return|;
block|}
specifier|private
specifier|static
name|ColumnMetaData
name|getArrayColumnMetaData
parameter_list|(
name|ScalarType
name|componentType
parameter_list|,
name|int
name|index
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|ArrayType
name|arrayType
init|=
name|ColumnMetaData
operator|.
name|array
argument_list|(
name|componentType
argument_list|,
literal|"Array"
argument_list|,
name|Rep
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
return|return
operator|new
name|ColumnMetaData
argument_list|(
name|index
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|arrayType
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"ARRAY"
argument_list|)
return|;
block|}
comment|/**    * Generates a collection of Responses whose serialization will be tested.    */
specifier|private
specifier|static
name|List
argument_list|<
name|Response
argument_list|>
name|getResponses
parameter_list|()
block|{
specifier|final
name|RpcMetadataResponse
name|rpcMetadata
init|=
operator|new
name|RpcMetadataResponse
argument_list|(
literal|"localhost:8765"
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|Response
argument_list|>
name|responses
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Nested classes (Signature, ColumnMetaData, CursorFactory, etc) are implicitly getting tested)
comment|// Stub out the metadata for a row
name|ScalarType
name|arrayComponentType
init|=
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"integer"
argument_list|,
name|Rep
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|ColumnMetaData
name|arrayColumnMetaData
init|=
name|getArrayColumnMetaData
argument_list|(
name|arrayComponentType
argument_list|,
literal|2
argument_list|,
literal|"counts"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|MetaImpl
operator|.
name|columnMetaData
argument_list|(
literal|"str"
argument_list|,
literal|0
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|MetaImpl
operator|.
name|columnMetaData
argument_list|(
literal|"count"
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|arrayColumnMetaData
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AvaticaParameter
argument_list|>
name|params
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|AvaticaParameter
argument_list|(
literal|false
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|"VARCHAR"
argument_list|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"str"
argument_list|)
argument_list|)
decl_stmt|;
name|Meta
operator|.
name|CursorFactory
name|cursorFactory
init|=
name|Meta
operator|.
name|CursorFactory
operator|.
name|create
argument_list|(
name|Style
operator|.
name|LIST
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"str"
argument_list|,
literal|"count"
argument_list|,
literal|"counts"
argument_list|)
argument_list|)
decl_stmt|;
comment|// The row values
name|List
argument_list|<
name|Object
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"str_value1"
block|,
literal|50
block|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"str_value2"
block|,
literal|100
block|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// Create the signature and frame using the metadata and values
name|Signature
name|signature
init|=
name|Signature
operator|.
name|create
argument_list|(
name|columns
argument_list|,
literal|"sql"
argument_list|,
name|params
argument_list|,
name|cursorFactory
argument_list|,
name|Meta
operator|.
name|StatementType
operator|.
name|SELECT
argument_list|)
decl_stmt|;
name|Frame
name|frame
init|=
name|Frame
operator|.
name|create
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|,
name|rows
argument_list|)
decl_stmt|;
comment|// And then create a ResultSetResponse
name|ResultSetResponse
name|results1
init|=
operator|new
name|ResultSetResponse
argument_list|(
literal|"connectionId"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|,
name|signature
argument_list|,
name|frame
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|rpcMetadata
argument_list|)
decl_stmt|;
name|responses
operator|.
name|add
argument_list|(
name|results1
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|CloseStatementResponse
argument_list|(
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|ConnectionPropertiesImpl
name|connProps
init|=
operator|new
name|ConnectionPropertiesImpl
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"catalog"
argument_list|,
literal|"schema"
argument_list|)
decl_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|ConnectionSyncResponse
argument_list|(
name|connProps
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|OpenConnectionResponse
argument_list|(
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|CloseConnectionResponse
argument_list|(
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|CreateStatementResponse
argument_list|(
literal|"connectionId"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Meta
operator|.
name|DatabaseProperty
argument_list|,
name|Object
argument_list|>
name|propertyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meta
operator|.
name|DatabaseProperty
name|prop
range|:
name|Meta
operator|.
name|DatabaseProperty
operator|.
name|values
argument_list|()
control|)
block|{
name|propertyMap
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|prop
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
block|}
name|responses
operator|.
name|add
argument_list|(
operator|new
name|DatabasePropertyResponse
argument_list|(
name|propertyMap
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|ExecuteResponse
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|results1
argument_list|,
name|results1
argument_list|,
name|results1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|FetchResponse
argument_list|(
name|frame
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|FetchResponse
argument_list|(
name|frame
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|FetchResponse
argument_list|(
name|frame
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|PrepareResponse
argument_list|(
operator|new
name|Meta
operator|.
name|StatementHandle
argument_list|(
literal|"connectionId"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|signature
argument_list|)
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|Exception
argument_list|()
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|ErrorResponse
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"Test Error Message"
argument_list|,
name|ErrorResponse
operator|.
name|UNKNOWN_ERROR_CODE
argument_list|,
name|ErrorResponse
operator|.
name|UNKNOWN_SQL_STATE
argument_list|,
name|AvaticaSeverity
operator|.
name|WARNING
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
comment|// No more results, statement not missing
name|responses
operator|.
name|add
argument_list|(
operator|new
name|SyncResultsResponse
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
comment|// Missing statement, no results
name|responses
operator|.
name|add
argument_list|(
operator|new
name|SyncResultsResponse
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
comment|// More results, no missing statement
name|responses
operator|.
name|add
argument_list|(
operator|new
name|SyncResultsResponse
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|rpcMetadata
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some tests to make sure ErrorResponse doesn't fail.
name|responses
operator|.
name|add
argument_list|(
operator|new
name|ErrorResponse
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|ErrorResponse
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"stacktrace1"
argument_list|,
literal|"stacktrace2"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|CommitResponse
argument_list|()
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|RollbackResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|responses
return|;
block|}
specifier|private
specifier|final
name|T
name|object
decl_stmt|;
specifier|private
specifier|final
name|IdentityFunction
argument_list|<
name|T
argument_list|>
name|function
decl_stmt|;
specifier|public
name|ProtobufTranslationImplTest
parameter_list|(
name|T
name|object
parameter_list|,
name|IdentityFunction
argument_list|<
name|T
argument_list|>
name|func
parameter_list|)
block|{
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|func
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Function acts as opposite sides of the transport.
comment|// An object (a request or response) starts on one side
comment|// of the transport, serialized, "sent" over the transport
comment|// and then reconstituted. The object on either side should
comment|// be equivalent.
name|assertEquals
argument_list|(
name|object
argument_list|,
name|this
operator|.
name|function
operator|.
name|apply
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ProtobufTranslationImplTest.java
end_comment

end_unit

