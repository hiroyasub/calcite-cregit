begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
operator|.
name|Rep
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test serialization of TypedValue.  */
end_comment

begin_class
specifier|public
class|class
name|TypedValueTest
block|{
specifier|private
name|void
name|serializeAndEqualityCheck
parameter_list|(
name|TypedValue
name|value
parameter_list|)
block|{
name|TypedValue
name|copy
init|=
name|TypedValue
operator|.
name|fromProto
argument_list|(
name|value
operator|.
name|toProto
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|type
argument_list|,
name|copy
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|value
argument_list|,
name|copy
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBoolean
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|PRIMITIVE_BOOLEAN
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|BOOLEAN
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByte
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|PRIMITIVE_BYTE
argument_list|,
operator|(
name|byte
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|BYTE
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShort
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|PRIMITIVE_SHORT
argument_list|,
operator|(
name|short
operator|)
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|SHORT
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInteger
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|PRIMITIVE_INT
argument_list|,
operator|(
name|int
operator|)
literal|42000
argument_list|)
argument_list|)
expr_stmt|;
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|INTEGER
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
literal|42000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLong
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|PRIMITIVE_LONG
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|LONG
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloat
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|PRIMITIVE_FLOAT
argument_list|,
literal|3.14159f
argument_list|)
argument_list|)
expr_stmt|;
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|FLOAT
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|3.14159f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|PRIMITIVE_DOUBLE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|DOUBLE
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChar
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|PRIMITIVE_CHAR
argument_list|,
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|CHARACTER
argument_list|,
name|Character
operator|.
name|valueOf
argument_list|(
literal|'c'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testString
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|STRING
argument_list|,
literal|"qwertyasdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteString
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|BYTE_STRING
argument_list|,
operator|new
name|ByteString
argument_list|(
literal|"qwertyasdf"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSqlDate
parameter_list|()
block|{
comment|// days since epoch
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|JAVA_SQL_DATE
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUtilDate
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|JAVA_UTIL_DATE
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSqlTime
parameter_list|()
block|{
comment|// millis since epoch
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|JAVA_SQL_TIME
argument_list|,
literal|42
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSqlTimestamp
parameter_list|()
block|{
name|serializeAndEqualityCheck
argument_list|(
name|TypedValue
operator|.
name|ofLocal
argument_list|(
name|Rep
operator|.
name|JAVA_SQL_TIMESTAMP
argument_list|,
literal|42L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End TypedValueTest.java
end_comment

end_unit

