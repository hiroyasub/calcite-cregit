begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|CursorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|JsonHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|JsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalJsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Tests JSON encoding/decoding in the remote service.  */
end_comment

begin_class
specifier|public
class|class
name|JsonHandlerTest
block|{
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Implementation of {@link org.apache.calcite.avatica.remote.Service}    * that does nothing.    */
specifier|public
specifier|static
class|class
name|NoopService
implements|implements
name|Service
block|{
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|CatalogsRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|SchemasRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TablesRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TableTypesRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TypeInfoRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|ColumnsRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrepareResponse
name|apply
parameter_list|(
name|PrepareRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResponse
name|apply
parameter_list|(
name|PrepareAndExecuteRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FetchResponse
name|apply
parameter_list|(
name|FetchRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CreateStatementResponse
name|apply
parameter_list|(
name|CreateStatementRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CloseStatementResponse
name|apply
parameter_list|(
name|CloseStatementRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|OpenConnectionResponse
name|apply
parameter_list|(
name|OpenConnectionRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CloseConnectionResponse
name|apply
parameter_list|(
name|CloseConnectionRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionSyncResponse
name|apply
parameter_list|(
name|ConnectionSyncRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DatabasePropertyResponse
name|apply
parameter_list|(
name|DatabasePropertyRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SyncResultsResponse
name|apply
parameter_list|(
name|SyncResultsRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResponse
name|apply
parameter_list|(
name|ExecuteRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRpcMetadata
parameter_list|(
name|RpcMetadataResponse
name|metadata
parameter_list|)
block|{
block|}
block|}
comment|/**    * Instrumented subclass of {@link org.apache.calcite.avatica.test.JsonHandlerTest.NoopService}    * that checks the parameter values passed to the "execute" request.    *    *<p>Note: parameter values for "fetch" request deprecated.    */
specifier|public
specifier|static
class|class
name|ParameterValuesCheckingService
extends|extends
name|NoopService
block|{
specifier|final
name|List
argument_list|<
name|TypedValue
argument_list|>
name|expectedParameterValues
decl_stmt|;
specifier|public
name|ParameterValuesCheckingService
parameter_list|(
name|List
argument_list|<
name|TypedValue
argument_list|>
name|epv
parameter_list|)
block|{
name|expectedParameterValues
operator|=
name|epv
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResponse
name|apply
parameter_list|(
name|ExecuteRequest
name|request
parameter_list|)
block|{
name|expectedParameterValues
operator|.
name|addAll
argument_list|(
name|request
operator|.
name|parameterValues
argument_list|)
expr_stmt|;
specifier|final
name|Meta
operator|.
name|Signature
name|signature
init|=
operator|new
name|Meta
operator|.
name|Signature
argument_list|(
name|Collections
operator|.
expr|<
name|ColumnMetaData
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|"SELECT 1 FROM VALUE()"
argument_list|,
name|Collections
operator|.
expr|<
name|AvaticaParameter
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|CursorFactory
operator|.
name|LIST
argument_list|,
name|Meta
operator|.
name|StatementType
operator|.
name|SELECT
argument_list|)
decl_stmt|;
specifier|final
name|Service
operator|.
name|ResultSetResponse
name|resultSetResponse
init|=
operator|new
name|Service
operator|.
name|ResultSetResponse
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|RANDOM
operator|.
name|nextInt
argument_list|()
argument_list|,
literal|false
argument_list|,
name|signature
argument_list|,
name|Meta
operator|.
name|Frame
operator|.
name|EMPTY
argument_list|,
operator|-
literal|1L
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|Service
operator|.
name|ExecuteResponse
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|resultSetResponse
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecuteRequestWithNumberParameter
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|TypedValue
argument_list|>
name|expectedParameterValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Service
name|service
init|=
operator|new
name|ParameterValuesCheckingService
argument_list|(
name|expectedParameterValues
argument_list|)
decl_stmt|;
specifier|final
name|JsonService
name|jsonService
init|=
operator|new
name|LocalJsonService
argument_list|(
name|service
argument_list|)
decl_stmt|;
specifier|final
name|JsonHandler
name|jsonHandler
init|=
operator|new
name|JsonHandler
argument_list|(
name|jsonService
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypedValue
argument_list|>
name|parameterValues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TypedValue
operator|.
name|create
argument_list|(
literal|"NUMBER"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|,
name|TypedValue
operator|.
name|create
argument_list|(
literal|"STRING"
argument_list|,
literal|"calcite"
argument_list|)
argument_list|)
decl_stmt|;
name|jsonHandler
operator|.
name|apply
argument_list|(
literal|"{'request':'execute',"
operator|+
literal|"'parameterValues':[{'type':'NUMBER','value':123},"
operator|+
literal|"{'type':'STRING','value':'calcite'}]}"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedParameterValues
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedParameterValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|parameterValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedParameterValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|parameterValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End JsonHandlerTest.java
end_comment

end_unit

