begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|JsonHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|JsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalJsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests JSON encoding/decoding in the remote service.  */
end_comment

begin_class
specifier|public
class|class
name|JsonHandlerTest
block|{
comment|/**    * Implementation of {@link org.apache.calcite.avatica.remote.Service}    * that does nothing.    */
specifier|public
specifier|static
class|class
name|NoopService
implements|implements
name|Service
block|{
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|CatalogsRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|SchemasRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TablesRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TableTypesRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|TypeInfoRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultSetResponse
name|apply
parameter_list|(
name|ColumnsRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrepareResponse
name|apply
parameter_list|(
name|PrepareRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResponse
name|apply
parameter_list|(
name|PrepareAndExecuteRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FetchResponse
name|apply
parameter_list|(
name|FetchRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CreateStatementResponse
name|apply
parameter_list|(
name|CreateStatementRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CloseStatementResponse
name|apply
parameter_list|(
name|CloseStatementRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CloseConnectionResponse
name|apply
parameter_list|(
name|CloseConnectionRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionSyncResponse
name|apply
parameter_list|(
name|ConnectionSyncRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DatabasePropertyResponse
name|apply
parameter_list|(
name|DatabasePropertyRequest
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Instrumented subclass of {@link org.apache.calcite.avatica.test.JsonHandlerTest.NoopService}    * that checks the parameter values passed to the "fetch" request.    */
specifier|public
specifier|static
class|class
name|ParameterValuesCheckingService
extends|extends
name|NoopService
block|{
specifier|final
name|List
argument_list|<
name|TypedValue
argument_list|>
name|expectedParameterValues
decl_stmt|;
specifier|public
name|ParameterValuesCheckingService
parameter_list|(
name|List
argument_list|<
name|TypedValue
argument_list|>
name|epv
parameter_list|)
block|{
name|expectedParameterValues
operator|=
name|epv
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FetchResponse
name|apply
parameter_list|(
name|FetchRequest
name|request
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedParameterValues
operator|.
name|size
argument_list|()
argument_list|,
name|request
operator|.
name|parameterValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedParameterValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectedParameterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|,
name|request
operator|.
name|parameterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParameterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|,
name|request
operator|.
name|parameterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|expectedParameterValues
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchRequestWithNumberParameter
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|TypedValue
argument_list|>
name|expectedParameterValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Service
name|service
init|=
operator|new
name|ParameterValuesCheckingService
argument_list|(
name|expectedParameterValues
argument_list|)
decl_stmt|;
specifier|final
name|JsonService
name|jsonService
init|=
operator|new
name|LocalJsonService
argument_list|(
name|service
argument_list|)
decl_stmt|;
specifier|final
name|JsonHandler
name|jsonHandler
init|=
operator|new
name|JsonHandler
argument_list|(
name|jsonService
argument_list|)
decl_stmt|;
name|expectedParameterValues
operator|.
name|add
argument_list|(
name|TypedValue
operator|.
name|create
argument_list|(
literal|"NUMBER"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"333.333"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jsonHandler
operator|.
name|apply
argument_list|(
literal|"{'request':'fetch','parameterValues':[{'type':'NUMBER','value':333.333}]}"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedParameterValues
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParameterValues
operator|.
name|add
argument_list|(
name|TypedValue
operator|.
name|create
argument_list|(
literal|"NUMBER"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"333"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jsonHandler
operator|.
name|apply
argument_list|(
literal|"{'request':'fetch','parameterValues':[{'type':'NUMBER','value':333}]}"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedParameterValues
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End JsonHandlerTest.java
end_comment

end_unit

