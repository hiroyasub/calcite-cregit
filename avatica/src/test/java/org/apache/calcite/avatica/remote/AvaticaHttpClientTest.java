begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  * Tests for the HTTP transport.  */
end_comment

begin_class
specifier|public
class|class
name|AvaticaHttpClientTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST
init|=
literal|"{\"request\":\"createStatement\",\"connectionId\":\"8f3f28ee-d0bb-4cdb-a4b1-8f6e8476c534\"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESPONSE
init|=
literal|"{\"response\":\"createStatement\",\"connectionId\":"
operator|+
literal|"\"8f3f28ee-d0bb-4cdb-a4b1-8f6e8476c534\",\"statementId\":1608176856}"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testRetryOnUnavailable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// HTTP-503, try again
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://127.0.0.1:8765"
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|cnxn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|RESPONSE
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create the HTTP client
name|AvaticaHttpClientImpl
name|client
init|=
operator|new
name|AvaticaHttpClientImpl
argument_list|(
name|url
argument_list|)
block|{
annotation|@
name|Override
name|HttpURLConnection
name|openConnection
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|cnxn
return|;
block|}
block|}
decl_stmt|;
comment|// HTTP 503 then 200
name|Mockito
operator|.
name|when
argument_list|(
name|cnxn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAVAILABLE
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|cnxn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|cnxn
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|byte
index|[]
name|response
init|=
name|client
operator|.
name|send
argument_list|(
name|REQUEST
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|RESPONSE
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testServerError
parameter_list|()
throws|throws
name|Exception
block|{
comment|// HTTP 500 should error out
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://127.0.0.1:8765"
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|cnxn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// Create the HTTP client
name|AvaticaHttpClientImpl
name|client
init|=
operator|new
name|AvaticaHttpClientImpl
argument_list|(
name|url
argument_list|)
block|{
annotation|@
name|Override
name|HttpURLConnection
name|openConnection
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|cnxn
return|;
block|}
block|}
decl_stmt|;
comment|// HTTP 500
name|Mockito
operator|.
name|when
argument_list|(
name|cnxn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|cnxn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|baos
argument_list|)
expr_stmt|;
comment|// Should throw an RTE
name|client
operator|.
name|send
argument_list|(
name|REQUEST
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AvaticaHttpClientTest.java
end_comment

end_unit

