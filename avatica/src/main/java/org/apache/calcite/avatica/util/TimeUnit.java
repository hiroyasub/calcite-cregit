begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_comment
comment|/**  * Enumeration of time units used to construct an interval.  */
end_comment

begin_enum
specifier|public
enum|enum
name|TimeUnit
block|{
name|YEAR
argument_list|(
literal|true
argument_list|,
literal|' '
argument_list|,
literal|12
comment|/* months */
argument_list|,
literal|null
argument_list|)
block|,
name|MONTH
argument_list|(
literal|true
argument_list|,
literal|'-'
argument_list|,
literal|1
comment|/* months */
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|12
argument_list|)
argument_list|)
block|,
name|DAY
argument_list|(
literal|false
argument_list|,
literal|'-'
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|,
literal|null
argument_list|)
block|,
name|HOUR
argument_list|(
literal|false
argument_list|,
literal|' '
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_HOUR
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|24
argument_list|)
argument_list|)
block|,
name|MINUTE
argument_list|(
literal|false
argument_list|,
literal|':'
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_MINUTE
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|60
argument_list|)
argument_list|)
block|,
name|SECOND
argument_list|(
literal|false
argument_list|,
literal|':'
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_SECOND
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|60
argument_list|)
argument_list|)
block|,
comment|/** Unlike the other units, MILLISECOND may not be the unit of a SQL interval.    * Still, it is convenient to use it internally, when converting to and from    * UNIX timestamps. */
name|MILLISECOND
argument_list|(
literal|false
argument_list|,
literal|'.'
argument_list|,
literal|1
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
block|;
specifier|public
specifier|final
name|boolean
name|yearMonth
decl_stmt|;
specifier|public
specifier|final
name|char
name|separator
decl_stmt|;
specifier|public
specifier|final
name|long
name|multiplier
decl_stmt|;
specifier|private
specifier|final
name|BigDecimal
name|limit
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeUnit
index|[]
name|CACHED_VALUES
init|=
name|values
argument_list|()
decl_stmt|;
name|TimeUnit
parameter_list|(
name|boolean
name|yearMonth
parameter_list|,
name|char
name|separator
parameter_list|,
name|long
name|multiplier
parameter_list|,
name|BigDecimal
name|limit
parameter_list|)
block|{
name|this
operator|.
name|yearMonth
operator|=
name|yearMonth
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
name|multiplier
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
comment|/**    * Returns the TimeUnit associated with an ordinal. The value returned    * is null if the ordinal is not a member of the TimeUnit enumeration.    */
specifier|public
specifier|static
name|TimeUnit
name|getValue
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|CACHED_VALUES
operator|.
name|length
condition|?
literal|null
else|:
name|CACHED_VALUES
index|[
name|ordinal
index|]
return|;
block|}
comment|/**    * Returns whether a given value is valid for a field of this time unit.    *    * @param field Field value    * @return Whether value    */
specifier|public
name|boolean
name|isValidValue
parameter_list|(
name|BigDecimal
name|field
parameter_list|)
block|{
return|return
name|field
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|>=
literal|0
operator|&&
operator|(
name|limit
operator|==
literal|null
operator|||
name|field
operator|.
name|compareTo
argument_list|(
name|limit
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
block|}
end_enum

begin_comment
comment|// End TimeUnit.java
end_comment

end_unit

