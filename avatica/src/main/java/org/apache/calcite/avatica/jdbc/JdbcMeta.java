begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ParameterMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/** Implementation of {@link Meta} upon an existing JDBC data source. */
end_comment

begin_class
specifier|public
class|class
name|JdbcMeta
implements|implements
name|Meta
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JdbcMeta
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * JDBC Types Mapped to Java Types    *    * @see<a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jdbc/getstart/mapping.html#1051555">JDBC Types Mapped to Java Types</a>    */
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Type
argument_list|>
name|SQL_TYPE_TO_JAVA_TYPE
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|LONGNVARCHAR
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|BIT
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|REAL
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|BINARY
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|VARBINARY
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|TIME
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
argument_list|)
expr_stmt|;
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//put(Types.CLOB, Clob);
comment|//put(Types.BLOB, Blob);
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|put
argument_list|(
name|Types
operator|.
name|ARRAY
argument_list|,
name|Array
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CONN_ID
init|=
name|UUID
operator|.
name|fromString
argument_list|(
literal|"00000000-0000-0000-0000-000000000000"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|info
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
comment|// TODO: remove default connection
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|connectionMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|StatementInfo
argument_list|>
name|statementMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Convert from JDBC metadata to Avatica columns.    */
specifier|protected
specifier|static
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
parameter_list|(
name|ResultSetMetaData
name|metaData
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|metaData
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Type
name|javaType
init|=
name|SQL_TYPE_TO_JAVA_TYPE
operator|.
name|get
argument_list|(
name|metaData
operator|.
name|getColumnType
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnMetaData
operator|.
name|AvaticaType
name|t
init|=
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|metaData
operator|.
name|getColumnType
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getColumnTypeName
argument_list|(
name|i
argument_list|)
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|of
argument_list|(
name|javaType
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnMetaData
name|md
init|=
operator|new
name|ColumnMetaData
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|metaData
operator|.
name|isAutoIncrement
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|isCaseSensitive
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|isSearchable
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|isCurrency
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|isNullable
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|isSigned
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getColumnDisplaySize
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getColumnLabel
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getSchemaName
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getPrecision
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getScale
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getTableName
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getCatalogName
argument_list|(
name|i
argument_list|)
argument_list|,
name|t
argument_list|,
name|metaData
operator|.
name|isReadOnly
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|isWritable
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|isDefinitelyWritable
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getColumnClassName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
comment|/**    * Converts from JDBC metadata to AvaticaParameters    */
specifier|protected
specifier|static
name|List
argument_list|<
name|AvaticaParameter
argument_list|>
name|parameters
parameter_list|(
name|ParameterMetaData
name|metaData
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|final
name|List
argument_list|<
name|AvaticaParameter
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|metaData
operator|.
name|getParameterCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|AvaticaParameter
argument_list|(
name|metaData
operator|.
name|isSigned
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getPrecision
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getScale
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getParameterType
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getParameterTypeName
argument_list|(
name|i
argument_list|)
argument_list|,
name|metaData
operator|.
name|getParameterClassName
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"?"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
specifier|protected
specifier|static
name|Signature
name|signature
parameter_list|(
name|ResultSetMetaData
name|metaData
parameter_list|,
name|ParameterMetaData
name|parameterMetaData
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|Signature
argument_list|(
name|columns
argument_list|(
name|metaData
argument_list|)
argument_list|,
name|sql
argument_list|,
name|parameters
argument_list|(
name|parameterMetaData
argument_list|)
argument_list|,
literal|null
argument_list|,
name|CursorFactory
operator|.
name|LIST
comment|/* LIST because JdbcResultSet#frame */
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Signature
name|signature
parameter_list|(
name|ResultSetMetaData
name|metaData
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|signature
argument_list|(
name|metaData
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param url a database url of the form    *<code> jdbc:<em>subprotocol</em>:<em>subname</em></code>    */
specifier|public
name|JdbcMeta
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
argument_list|(
name|url
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param url a database url of the form    *<code>jdbc:<em>subprotocol</em>:<em>subname</em></code>    * @param user the database user on whose behalf the connection is being    *   made    * @param password the user's password    */
specifier|public
name|JdbcMeta
parameter_list|(
specifier|final
name|String
name|url
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
argument_list|(
name|url
argument_list|,
operator|new
name|Properties
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param url a database url of the form    *<code> jdbc:<em>subprotocol</em>:<em>subname</em></code>    * @param info a list of arbitrary string tag/value pairs as    * connection arguments; normally at least a "user" and    * "password" property should be included    */
specifier|public
name|JdbcMeta
parameter_list|(
name|String
name|url
parameter_list|,
name|Properties
name|info
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionMap
operator|.
name|put
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSqlKeywords
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSQLKeywords
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getNumericFunctions
parameter_list|()
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getNumericFunctions
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getStringFunctions
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getSystemFunctions
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getTimeDateFunctions
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getTables
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|typeList
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[
name|typeList
operator|==
literal|null
condition|?
literal|0
else|:
name|typeList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
operator|.
name|s
argument_list|,
name|tableNamePattern
operator|.
name|s
argument_list|,
name|typeList
operator|==
literal|null
condition|?
name|types
else|:
name|typeList
operator|.
name|toArray
argument_list|(
name|types
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
operator|.
name|s
argument_list|,
name|tableNamePattern
operator|.
name|s
argument_list|,
name|columnNamePattern
operator|.
name|s
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getSchemas
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
operator|.
name|s
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getCatalogs
parameter_list|()
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCatalogs
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getTableTypes
parameter_list|()
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTableTypes
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getProcedures
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|procedureNamePattern
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getProcedures
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
operator|.
name|s
argument_list|,
name|procedureNamePattern
operator|.
name|s
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getProcedureColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|procedureNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getProcedureColumns
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
operator|.
name|s
argument_list|,
name|procedureNamePattern
operator|.
name|s
argument_list|,
name|columnNamePattern
operator|.
name|s
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getColumnPrivileges
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnPrivileges
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|columnNamePattern
operator|.
name|s
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getTablePrivileges
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTablePrivileges
argument_list|(
name|catalog
argument_list|,
name|schemaPattern
operator|.
name|s
argument_list|,
name|tableNamePattern
operator|.
name|s
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getBestRowIdentifier
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|int
name|scope
parameter_list|,
name|boolean
name|nullable
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getBestRowIdentifier
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|scope
argument_list|,
name|nullable
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getVersionColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getVersionColumns
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getPrimaryKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
try|try
block|{
return|return
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|DEFAULT_CONN_ID
argument_list|,
operator|-
literal|1
argument_list|,
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|getImportedKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getExportedKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getCrossReference
parameter_list|(
name|String
name|parentCatalog
parameter_list|,
name|String
name|parentSchema
parameter_list|,
name|String
name|parentTable
parameter_list|,
name|String
name|foreignCatalog
parameter_list|,
name|String
name|foreignSchema
parameter_list|,
name|String
name|foreignTable
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getTypeInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getIndexInfo
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|unique
parameter_list|,
name|boolean
name|approximate
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getUDTs
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|,
name|int
index|[]
name|types
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getSuperTypes
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getSuperTables
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getAttributes
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|,
name|Pat
name|attributeNamePattern
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getClientInfoProperties
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getFunctions
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|functionNamePattern
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getFunctionColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|functionNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MetaResultSet
name|getPseudoColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|Object
argument_list|>
name|createIterable
parameter_list|(
name|StatementHandle
name|handle
parameter_list|,
name|Signature
name|signature
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|parameterValues
parameter_list|,
name|Frame
name|firstFrame
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|Connection
name|getConnection
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connectionMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
name|connectionMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|connectionMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|StatementHandle
name|createStatement
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|ch
operator|.
name|id
argument_list|)
decl_stmt|;
specifier|final
name|Statement
name|statement
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|int
name|id
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|statement
argument_list|)
decl_stmt|;
name|statementMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|StatementInfo
argument_list|(
name|statement
argument_list|)
argument_list|)
expr_stmt|;
name|StatementHandle
name|h
init|=
operator|new
name|StatementHandle
argument_list|(
name|ch
operator|.
name|id
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"created statement "
operator|+
name|h
argument_list|)
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeStatement
parameter_list|(
name|StatementHandle
name|h
parameter_list|)
block|{
name|Statement
name|stmt
init|=
name|statementMap
operator|.
name|get
argument_list|(
name|h
operator|.
name|id
argument_list|)
operator|.
name|statement
decl_stmt|;
if|if
condition|(
name|stmt
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"client requested close unknown statement "
operator|+
name|h
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"closing statement "
operator|+
name|h
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|boolean
name|isOwned
init|=
name|stmt
operator|.
name|getConnection
argument_list|()
operator|==
name|connectionMap
operator|.
name|get
argument_list|(
name|h
operator|.
name|connectionId
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
assert|assert
name|isOwned
operator|:
literal|"no connection found while closing "
operator|+
name|h
assert|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|statementMap
operator|.
name|remove
argument_list|(
name|h
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeConnection
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
name|Connection
name|conn
init|=
name|connectionMap
operator|.
name|get
argument_list|(
name|ch
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"client requested close unknown connection "
operator|+
name|ch
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"closing connection "
operator|+
name|ch
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|connectionMap
operator|.
name|remove
argument_list|(
name|ch
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|RuntimeException
name|propagate
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
if|else if
condition|(
name|e
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|StatementHandle
name|prepare
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|sql
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|ch
operator|.
name|id
argument_list|)
decl_stmt|;
specifier|final
name|PreparedStatement
name|statement
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|int
name|id
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|statement
argument_list|)
decl_stmt|;
name|statementMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|StatementInfo
argument_list|(
name|statement
argument_list|)
argument_list|)
expr_stmt|;
name|StatementHandle
name|h
init|=
operator|new
name|StatementHandle
argument_list|(
name|ch
operator|.
name|id
argument_list|,
name|id
argument_list|,
name|signature
argument_list|(
name|statement
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|statement
operator|.
name|getParameterMetaData
argument_list|()
argument_list|,
name|sql
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"prepared statement "
operator|+
name|h
argument_list|)
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaResultSet
name|prepareAndExecute
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|sql
parameter_list|,
name|int
name|maxRowCount
parameter_list|,
name|PrepareCallback
name|callback
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|ch
operator|.
name|id
argument_list|)
decl_stmt|;
specifier|final
name|PreparedStatement
name|statement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|int
name|id
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|statement
argument_list|)
decl_stmt|;
specifier|final
name|StatementInfo
name|info
init|=
operator|new
name|StatementInfo
argument_list|(
name|statement
argument_list|)
decl_stmt|;
name|statementMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|info
operator|.
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|MetaResultSet
name|mrs
init|=
name|JdbcResultSet
operator|.
name|create
argument_list|(
name|ch
operator|.
name|id
argument_list|,
name|id
argument_list|,
name|info
operator|.
name|resultSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StatementHandle
name|h
init|=
operator|new
name|StatementHandle
argument_list|(
name|ch
operator|.
name|id
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"prepAndExec statement "
operator|+
name|h
argument_list|)
expr_stmt|;
block|}
return|return
name|mrs
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Frame
name|fetch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|parameterValues
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|fetchMaxRowCount
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"fetching "
operator|+
name|h
operator|+
literal|" offset:"
operator|+
name|offset
operator|+
literal|" fetchMaxRowCount:"
operator|+
name|fetchMaxRowCount
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StatementInfo
name|statementInfo
init|=
name|statementMap
operator|.
name|get
argument_list|(
name|h
operator|.
name|id
argument_list|)
decl_stmt|;
try|try
block|{
assert|assert
name|statementInfo
operator|.
name|statement
operator|.
name|getConnection
argument_list|()
operator|==
name|connectionMap
operator|.
name|get
argument_list|(
name|h
operator|.
name|connectionId
argument_list|)
assert|;
if|if
condition|(
name|statementInfo
operator|.
name|resultSet
operator|==
literal|null
operator|||
name|parameterValues
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|statementInfo
operator|.
name|resultSet
operator|!=
literal|null
condition|)
block|{
name|statementInfo
operator|.
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|PreparedStatement
name|preparedStatement
init|=
operator|(
name|PreparedStatement
operator|)
name|statementInfo
operator|.
name|statement
decl_stmt|;
if|if
condition|(
name|parameterValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|parameterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|preparedStatement
operator|.
name|setObject
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|statementInfo
operator|.
name|resultSet
operator|=
name|preparedStatement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
block|}
return|return
name|JdbcResultSet
operator|.
name|frame
argument_list|(
name|statementInfo
operator|.
name|resultSet
argument_list|,
name|offset
argument_list|,
name|fetchMaxRowCount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** All we know about a statement. */
specifier|private
specifier|static
class|class
name|StatementInfo
block|{
specifier|final
name|Statement
name|statement
decl_stmt|;
comment|// sometimes a PreparedStatement
name|ResultSet
name|resultSet
decl_stmt|;
specifier|private
name|StatementInfo
parameter_list|(
name|Statement
name|statement
parameter_list|)
block|{
name|this
operator|.
name|statement
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|statement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JdbcMeta.java
end_comment

end_unit

