begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonSubTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonTypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Metadata for a column.  *  *<p>(Compare with {@link java.sql.ResultSetMetaData}.)  */
end_comment

begin_class
specifier|public
class|class
name|ColumnMetaData
block|{
specifier|public
specifier|final
name|int
name|ordinal
decl_stmt|;
comment|// 0-based
specifier|public
specifier|final
name|boolean
name|autoIncrement
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|searchable
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|currency
decl_stmt|;
specifier|public
specifier|final
name|int
name|nullable
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|signed
decl_stmt|;
specifier|public
specifier|final
name|int
name|displaySize
decl_stmt|;
specifier|public
specifier|final
name|String
name|label
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|String
name|schemaName
decl_stmt|;
specifier|public
specifier|final
name|int
name|precision
decl_stmt|;
specifier|public
specifier|final
name|int
name|scale
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|String
name|catalogName
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|readOnly
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|writable
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|definitelyWritable
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnClassName
decl_stmt|;
specifier|public
specifier|final
name|AvaticaType
name|type
decl_stmt|;
annotation|@
name|JsonCreator
specifier|public
name|ColumnMetaData
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"ordinal"
argument_list|)
name|int
name|ordinal
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"autoIncrement"
argument_list|)
name|boolean
name|autoIncrement
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"caseSensitive"
argument_list|)
name|boolean
name|caseSensitive
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"searchable"
argument_list|)
name|boolean
name|searchable
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"currency"
argument_list|)
name|boolean
name|currency
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"nullable"
argument_list|)
name|int
name|nullable
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"signed"
argument_list|)
name|boolean
name|signed
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"displaySize"
argument_list|)
name|int
name|displaySize
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"label"
argument_list|)
name|String
name|label
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"columnName"
argument_list|)
name|String
name|columnName
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"schemaName"
argument_list|)
name|String
name|schemaName
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"precision"
argument_list|)
name|int
name|precision
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"scale"
argument_list|)
name|int
name|scale
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"tableName"
argument_list|)
name|String
name|tableName
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"catalogName"
argument_list|)
name|String
name|catalogName
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"type"
argument_list|)
name|AvaticaType
name|type
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"readOnly"
argument_list|)
name|boolean
name|readOnly
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"writable"
argument_list|)
name|boolean
name|writable
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"definitelyWritable"
argument_list|)
name|boolean
name|definitelyWritable
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"columnClassName"
argument_list|)
name|String
name|columnClassName
parameter_list|)
block|{
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
name|this
operator|.
name|autoIncrement
operator|=
name|autoIncrement
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
name|this
operator|.
name|searchable
operator|=
name|searchable
expr_stmt|;
name|this
operator|.
name|currency
operator|=
name|currency
expr_stmt|;
name|this
operator|.
name|nullable
operator|=
name|nullable
expr_stmt|;
name|this
operator|.
name|signed
operator|=
name|signed
expr_stmt|;
name|this
operator|.
name|displaySize
operator|=
name|displaySize
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
comment|// Per the JDBC spec this should be just columnName.
comment|// For example, the query
comment|//     select 1 as x, c as y from t
comment|// should give columns
comment|//     (label=x, column=null, table=null)
comment|//     (label=y, column=c table=t)
comment|// But DbUnit requires every column to have a name. Duh.
name|this
operator|.
name|columnName
operator|=
name|first
argument_list|(
name|columnName
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|this
operator|.
name|schemaName
operator|=
name|schemaName
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|catalogName
operator|=
name|catalogName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|this
operator|.
name|writable
operator|=
name|writable
expr_stmt|;
name|this
operator|.
name|definitelyWritable
operator|=
name|definitelyWritable
expr_stmt|;
name|this
operator|.
name|columnClassName
operator|=
name|columnClassName
expr_stmt|;
block|}
specifier|public
name|Common
operator|.
name|ColumnMetaData
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|ColumnMetaData
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|ColumnMetaData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Primitive fields (can't be null)
name|builder
operator|.
name|setOrdinal
argument_list|(
name|ordinal
argument_list|)
operator|.
name|setAutoIncrement
argument_list|(
name|autoIncrement
argument_list|)
operator|.
name|setCaseSensitive
argument_list|(
name|caseSensitive
argument_list|)
operator|.
name|setSearchable
argument_list|(
name|searchable
argument_list|)
operator|.
name|setCurrency
argument_list|(
name|currency
argument_list|)
operator|.
name|setNullable
argument_list|(
name|nullable
argument_list|)
operator|.
name|setSigned
argument_list|(
name|signed
argument_list|)
operator|.
name|setDisplaySize
argument_list|(
name|displaySize
argument_list|)
operator|.
name|setPrecision
argument_list|(
name|precision
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
operator|.
name|setReadOnly
argument_list|(
name|readOnly
argument_list|)
operator|.
name|setWritable
argument_list|(
name|writable
argument_list|)
operator|.
name|setDefinitelyWritable
argument_list|(
name|definitelyWritable
argument_list|)
expr_stmt|;
comment|// Potentially null fields
if|if
condition|(
literal|null
operator|!=
name|label
condition|)
block|{
name|builder
operator|.
name|setLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|columnName
condition|)
block|{
name|builder
operator|.
name|setColumnName
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|schemaName
condition|)
block|{
name|builder
operator|.
name|setSchemaName
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|tableName
condition|)
block|{
name|builder
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|catalogName
condition|)
block|{
name|builder
operator|.
name|setCatalogName
argument_list|(
name|catalogName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|type
condition|)
block|{
name|builder
operator|.
name|setType
argument_list|(
name|type
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|columnClassName
condition|)
block|{
name|builder
operator|.
name|setColumnClassName
argument_list|(
name|columnClassName
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ColumnMetaData
name|fromProto
parameter_list|(
name|Common
operator|.
name|ColumnMetaData
name|proto
parameter_list|)
block|{
name|AvaticaType
name|nestedType
init|=
name|AvaticaType
operator|.
name|fromProto
argument_list|(
name|proto
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Descriptor
name|desc
init|=
name|proto
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
name|String
name|catalogName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasField
argument_list|(
name|desc
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|ColumnMetaData
operator|.
name|CATALOG_NAME_FIELD_NUMBER
argument_list|)
argument_list|)
condition|)
block|{
name|catalogName
operator|=
name|proto
operator|.
name|getCatalogName
argument_list|()
expr_stmt|;
block|}
name|String
name|schemaName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasField
argument_list|(
name|desc
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|ColumnMetaData
operator|.
name|SCHEMA_NAME_FIELD_NUMBER
argument_list|)
argument_list|)
condition|)
block|{
name|schemaName
operator|=
name|proto
operator|.
name|getSchemaName
argument_list|()
expr_stmt|;
block|}
name|String
name|label
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasField
argument_list|(
name|desc
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|ColumnMetaData
operator|.
name|LABEL_FIELD_NUMBER
argument_list|)
argument_list|)
condition|)
block|{
name|label
operator|=
name|proto
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|String
name|columnName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasField
argument_list|(
name|desc
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|ColumnMetaData
operator|.
name|COLUMN_NAME_FIELD_NUMBER
argument_list|)
argument_list|)
condition|)
block|{
name|columnName
operator|=
name|proto
operator|.
name|getColumnName
argument_list|()
expr_stmt|;
block|}
name|String
name|tableName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasField
argument_list|(
name|desc
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|ColumnMetaData
operator|.
name|TABLE_NAME_FIELD_NUMBER
argument_list|)
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|proto
operator|.
name|getTableName
argument_list|()
expr_stmt|;
block|}
name|String
name|columnClassName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasField
argument_list|(
name|desc
operator|.
name|findFieldByNumber
argument_list|(
name|Common
operator|.
name|ColumnMetaData
operator|.
name|COLUMN_CLASS_NAME_FIELD_NUMBER
argument_list|)
argument_list|)
condition|)
block|{
name|columnClassName
operator|=
name|proto
operator|.
name|getColumnClassName
argument_list|()
expr_stmt|;
block|}
comment|// Recreate the ColumnMetaData
return|return
operator|new
name|ColumnMetaData
argument_list|(
name|proto
operator|.
name|getOrdinal
argument_list|()
argument_list|,
name|proto
operator|.
name|getAutoIncrement
argument_list|()
argument_list|,
name|proto
operator|.
name|getCaseSensitive
argument_list|()
argument_list|,
name|proto
operator|.
name|getSearchable
argument_list|()
argument_list|,
name|proto
operator|.
name|getCurrency
argument_list|()
argument_list|,
name|proto
operator|.
name|getNullable
argument_list|()
argument_list|,
name|proto
operator|.
name|getSigned
argument_list|()
argument_list|,
name|proto
operator|.
name|getDisplaySize
argument_list|()
argument_list|,
name|label
argument_list|,
name|columnName
argument_list|,
name|schemaName
argument_list|,
name|proto
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|proto
operator|.
name|getScale
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|catalogName
argument_list|,
name|nestedType
argument_list|,
name|proto
operator|.
name|getReadOnly
argument_list|()
argument_list|,
name|proto
operator|.
name|getWritable
argument_list|()
argument_list|,
name|proto
operator|.
name|getDefinitelyWritable
argument_list|()
argument_list|,
name|columnClassName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|autoIncrement
argument_list|,
name|caseSensitive
argument_list|,
name|catalogName
argument_list|,
name|columnClassName
argument_list|,
name|columnName
argument_list|,
name|currency
argument_list|,
name|definitelyWritable
argument_list|,
name|displaySize
argument_list|,
name|label
argument_list|,
name|nullable
argument_list|,
name|ordinal
argument_list|,
name|precision
argument_list|,
name|readOnly
argument_list|,
name|scale
argument_list|,
name|schemaName
argument_list|,
name|searchable
argument_list|,
name|signed
argument_list|,
name|tableName
argument_list|,
name|type
argument_list|,
name|writable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|ColumnMetaData
operator|&&
name|autoIncrement
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|autoIncrement
operator|&&
name|caseSensitive
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|caseSensitive
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|catalogName
argument_list|,
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|catalogName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|columnClassName
argument_list|,
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|columnClassName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|columnName
argument_list|,
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|columnName
argument_list|)
operator|&&
name|currency
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|currency
operator|&&
name|definitelyWritable
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|definitelyWritable
operator|&&
name|displaySize
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|displaySize
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|label
argument_list|,
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|label
argument_list|)
operator|&&
name|nullable
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|nullable
operator|&&
name|ordinal
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|ordinal
operator|&&
name|precision
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|precision
operator|&&
name|readOnly
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|readOnly
operator|&&
name|scale
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|scale
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|schemaName
argument_list|,
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|schemaName
argument_list|)
operator|&&
name|searchable
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|searchable
operator|&&
name|signed
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|signed
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|tableName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|type
argument_list|,
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|type
argument_list|)
operator|&&
name|writable
operator|==
operator|(
operator|(
name|ColumnMetaData
operator|)
name|o
operator|)
operator|.
name|writable
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|first
parameter_list|(
name|T
name|t0
parameter_list|,
name|T
name|t1
parameter_list|)
block|{
return|return
name|t0
operator|!=
literal|null
condition|?
name|t0
else|:
name|t1
return|;
block|}
comment|/** Creates a {@link ScalarType}. */
specifier|public
specifier|static
name|ScalarType
name|scalar
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Rep
name|rep
parameter_list|)
block|{
return|return
operator|new
name|ScalarType
argument_list|(
name|type
argument_list|,
name|typeName
argument_list|,
name|rep
argument_list|)
return|;
block|}
comment|/** Creates a {@link StructType}. */
specifier|public
specifier|static
name|StructType
name|struct
parameter_list|(
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
parameter_list|)
block|{
return|return
operator|new
name|StructType
argument_list|(
name|columns
argument_list|)
return|;
block|}
comment|/** Creates an {@link ArrayType}. */
specifier|public
specifier|static
name|ArrayType
name|array
parameter_list|(
name|AvaticaType
name|componentType
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Rep
name|rep
parameter_list|)
block|{
return|return
operator|new
name|ArrayType
argument_list|(
name|Types
operator|.
name|ARRAY
argument_list|,
name|typeName
argument_list|,
name|rep
argument_list|,
name|componentType
argument_list|)
return|;
block|}
comment|/** Creates a ColumnMetaData for result sets that are not based on a struct    * but need to have a single 'field' for purposes of    * {@link java.sql.ResultSetMetaData}. */
specifier|public
specifier|static
name|ColumnMetaData
name|dummy
parameter_list|(
name|AvaticaType
name|type
parameter_list|,
name|boolean
name|nullable
parameter_list|)
block|{
return|return
operator|new
name|ColumnMetaData
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|nullable
condition|?
name|DatabaseMetaData
operator|.
name|columnNullable
else|:
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|type
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|type
operator|.
name|columnClassName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ColumnMetaData
name|setRep
parameter_list|(
name|Rep
name|rep
parameter_list|)
block|{
return|return
operator|new
name|ColumnMetaData
argument_list|(
name|ordinal
argument_list|,
name|autoIncrement
argument_list|,
name|caseSensitive
argument_list|,
name|searchable
argument_list|,
name|currency
argument_list|,
name|nullable
argument_list|,
name|signed
argument_list|,
name|displaySize
argument_list|,
name|label
argument_list|,
name|columnName
argument_list|,
name|schemaName
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|,
name|tableName
argument_list|,
name|catalogName
argument_list|,
name|type
operator|.
name|setRep
argument_list|(
name|rep
argument_list|)
argument_list|,
name|readOnly
argument_list|,
name|writable
argument_list|,
name|definitelyWritable
argument_list|,
name|columnClassName
argument_list|)
return|;
block|}
comment|/** Description of the type used to internally represent a value. For example,    * a {@link java.sql.Date} might be represented as a {@link #PRIMITIVE_INT}    * if not nullable, or a {@link #JAVA_SQL_DATE}. */
specifier|public
enum|enum
name|Rep
block|{
name|PRIMITIVE_BOOLEAN
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_BYTE
argument_list|(
name|byte
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_CHAR
argument_list|(
name|char
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_SHORT
argument_list|(
name|short
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_INT
argument_list|(
name|int
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_LONG
argument_list|(
name|long
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_FLOAT
argument_list|(
name|float
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_DOUBLE
argument_list|(
name|double
operator|.
name|class
argument_list|)
block|,
name|BOOLEAN
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
block|,
name|BYTE
argument_list|(
name|Byte
operator|.
name|class
argument_list|)
block|,
name|CHARACTER
argument_list|(
name|Character
operator|.
name|class
argument_list|)
block|,
name|SHORT
argument_list|(
name|Short
operator|.
name|class
argument_list|)
block|,
name|INTEGER
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
block|,
name|LONG
argument_list|(
name|Long
operator|.
name|class
argument_list|)
block|,
name|FLOAT
argument_list|(
name|Float
operator|.
name|class
argument_list|)
block|,
name|DOUBLE
argument_list|(
name|Double
operator|.
name|class
argument_list|)
block|,
name|JAVA_SQL_TIME
argument_list|(
name|Time
operator|.
name|class
argument_list|)
block|,
name|JAVA_SQL_TIMESTAMP
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|)
block|,
name|JAVA_SQL_DATE
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|)
block|,
name|JAVA_UTIL_DATE
argument_list|(
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
argument_list|)
block|,
name|BYTE_STRING
argument_list|(
name|ByteString
operator|.
name|class
argument_list|)
block|,
name|STRING
argument_list|(
name|String
operator|.
name|class
argument_list|)
block|,
comment|/** Values are represented as some sub-class of {@link Number}.      * The JSON encoding does this. */
name|NUMBER
argument_list|(
name|Number
operator|.
name|class
argument_list|)
block|,
name|ARRAY
argument_list|(
name|Array
operator|.
name|class
argument_list|)
block|,
name|MULTISET
argument_list|(
name|List
operator|.
name|class
argument_list|)
block|,
name|STRUCT
argument_list|(
name|Struct
operator|.
name|class
argument_list|)
block|,
name|OBJECT
argument_list|(
name|Object
operator|.
name|class
argument_list|)
block|;
specifier|public
specifier|final
name|Class
name|clazz
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Rep
argument_list|>
name|VALUE_MAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Class
argument_list|,
name|Rep
argument_list|>
name|builder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Rep
name|rep
range|:
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|rep
operator|.
name|clazz
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
name|VALUE_MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
name|Rep
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
specifier|public
specifier|static
name|Rep
name|of
parameter_list|(
name|Type
name|clazz
parameter_list|)
block|{
comment|//noinspection SuspiciousMethodCalls
specifier|final
name|Rep
name|rep
init|=
name|VALUE_MAP
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|rep
operator|!=
literal|null
condition|?
name|rep
else|:
name|OBJECT
return|;
block|}
comment|/** Returns the value of a column of this type from a result set. */
specifier|public
name|Object
name|jdbcGet
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|SQLException
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|PRIMITIVE_BOOLEAN
case|:
return|return
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|i
argument_list|)
return|;
case|case
name|PRIMITIVE_BYTE
case|:
return|return
name|resultSet
operator|.
name|getByte
argument_list|(
name|i
argument_list|)
return|;
case|case
name|PRIMITIVE_SHORT
case|:
return|return
name|resultSet
operator|.
name|getShort
argument_list|(
name|i
argument_list|)
return|;
case|case
name|PRIMITIVE_INT
case|:
return|return
name|resultSet
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
return|;
case|case
name|PRIMITIVE_LONG
case|:
return|return
name|resultSet
operator|.
name|getLong
argument_list|(
name|i
argument_list|)
return|;
case|case
name|PRIMITIVE_FLOAT
case|:
return|return
name|resultSet
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
return|;
case|case
name|PRIMITIVE_DOUBLE
case|:
return|return
name|resultSet
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
specifier|final
name|boolean
name|aBoolean
init|=
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aBoolean
return|;
case|case
name|BYTE
case|:
specifier|final
name|byte
name|aByte
init|=
name|resultSet
operator|.
name|getByte
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aByte
return|;
case|case
name|SHORT
case|:
specifier|final
name|short
name|aShort
init|=
name|resultSet
operator|.
name|getShort
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aShort
return|;
case|case
name|INTEGER
case|:
specifier|final
name|int
name|anInt
init|=
name|resultSet
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|anInt
return|;
case|case
name|LONG
case|:
specifier|final
name|long
name|aLong
init|=
name|resultSet
operator|.
name|getLong
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aLong
return|;
case|case
name|FLOAT
case|:
specifier|final
name|float
name|aFloat
init|=
name|resultSet
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aFloat
return|;
case|case
name|DOUBLE
case|:
specifier|final
name|double
name|aDouble
init|=
name|resultSet
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aDouble
return|;
case|case
name|JAVA_SQL_DATE
case|:
return|return
name|resultSet
operator|.
name|getDate
argument_list|(
name|i
argument_list|)
return|;
case|case
name|JAVA_SQL_TIME
case|:
return|return
name|resultSet
operator|.
name|getTime
argument_list|(
name|i
argument_list|)
return|;
case|case
name|JAVA_SQL_TIMESTAMP
case|:
return|return
name|resultSet
operator|.
name|getTimestamp
argument_list|(
name|i
argument_list|)
return|;
case|case
name|ARRAY
case|:
return|return
name|resultSet
operator|.
name|getArray
argument_list|(
name|i
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
name|resultSet
operator|.
name|getObject
argument_list|(
name|i
argument_list|,
name|Struct
operator|.
name|class
argument_list|)
return|;
default|default:
return|return
name|resultSet
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
specifier|public
name|Common
operator|.
name|Rep
name|toProto
parameter_list|()
block|{
return|return
name|Common
operator|.
name|Rep
operator|.
name|valueOf
argument_list|(
name|name
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Rep
name|fromProto
parameter_list|(
name|Common
operator|.
name|Rep
name|proto
parameter_list|)
block|{
return|return
name|Rep
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Base class for a column type. */
annotation|@
name|JsonTypeInfo
argument_list|(
name|use
operator|=
name|JsonTypeInfo
operator|.
name|Id
operator|.
name|NAME
argument_list|,
name|property
operator|=
literal|"type"
argument_list|,
name|defaultImpl
operator|=
name|ScalarType
operator|.
name|class
argument_list|)
annotation|@
name|JsonSubTypes
argument_list|(
block|{
annotation|@
name|JsonSubTypes
operator|.
name|Type
argument_list|(
name|value
operator|=
name|ScalarType
operator|.
name|class
argument_list|,
name|name
operator|=
literal|"scalar"
argument_list|)
block|,
annotation|@
name|JsonSubTypes
operator|.
name|Type
argument_list|(
name|value
operator|=
name|StructType
operator|.
name|class
argument_list|,
name|name
operator|=
literal|"struct"
argument_list|)
block|,
annotation|@
name|JsonSubTypes
operator|.
name|Type
argument_list|(
name|value
operator|=
name|ArrayType
operator|.
name|class
argument_list|,
name|name
operator|=
literal|"array"
argument_list|)
block|}
argument_list|)
specifier|public
specifier|static
class|class
name|AvaticaType
block|{
specifier|public
specifier|final
name|int
name|id
decl_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
comment|/** The type of the field that holds the value. Not a JDBC property. */
specifier|public
specifier|final
name|Rep
name|rep
decl_stmt|;
specifier|public
name|AvaticaType
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Rep
name|rep
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|rep
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|columnClassName
parameter_list|()
block|{
return|return
name|SqlType
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
operator|.
name|boxedClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|AvaticaType
name|setRep
parameter_list|(
name|Rep
name|rep
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Common
operator|.
name|AvaticaType
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|AvaticaType
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|AvaticaType
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRep
argument_list|(
name|rep
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AvaticaType
name|fromProto
parameter_list|(
name|Common
operator|.
name|AvaticaType
name|proto
parameter_list|)
block|{
name|Common
operator|.
name|Rep
name|repProto
init|=
name|proto
operator|.
name|getRep
argument_list|()
decl_stmt|;
name|Rep
name|rep
init|=
name|Rep
operator|.
name|valueOf
argument_list|(
name|repProto
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|AvaticaType
name|type
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasComponent
argument_list|()
condition|)
block|{
comment|// ArrayType
comment|// recurse on the type for the array elements
name|AvaticaType
name|nestedType
init|=
name|AvaticaType
operator|.
name|fromProto
argument_list|(
name|proto
operator|.
name|getComponent
argument_list|()
argument_list|)
decl_stmt|;
name|type
operator|=
name|ColumnMetaData
operator|.
name|array
argument_list|(
name|nestedType
argument_list|,
name|proto
operator|.
name|getName
argument_list|()
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|proto
operator|.
name|getColumnsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// StructType
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|proto
operator|.
name|getColumnsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Common
operator|.
name|ColumnMetaData
name|protoColumn
range|:
name|proto
operator|.
name|getColumnsList
argument_list|()
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|ColumnMetaData
operator|.
name|fromProto
argument_list|(
name|protoColumn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|ColumnMetaData
operator|.
name|struct
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ScalarType
name|type
operator|=
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|proto
operator|.
name|getId
argument_list|()
argument_list|,
name|proto
operator|.
name|getName
argument_list|()
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|rep
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|AvaticaType
operator|&&
name|id
operator|==
operator|(
operator|(
name|AvaticaType
operator|)
name|o
operator|)
operator|.
name|id
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|AvaticaType
operator|)
name|o
operator|)
operator|.
name|name
argument_list|)
operator|&&
name|rep
operator|==
operator|(
operator|(
name|AvaticaType
operator|)
name|o
operator|)
operator|.
name|rep
return|;
block|}
block|}
comment|/** Scalar type. */
specifier|public
specifier|static
class|class
name|ScalarType
extends|extends
name|AvaticaType
block|{
annotation|@
name|JsonCreator
specifier|public
name|ScalarType
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"id"
argument_list|)
name|int
name|id
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"rep"
argument_list|)
name|Rep
name|rep
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AvaticaType
name|setRep
parameter_list|(
name|Rep
name|rep
parameter_list|)
block|{
return|return
operator|new
name|ScalarType
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|rep
argument_list|)
return|;
block|}
block|}
comment|/** Record type. */
specifier|public
specifier|static
class|class
name|StructType
extends|extends
name|AvaticaType
block|{
specifier|public
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
decl_stmt|;
annotation|@
name|JsonCreator
specifier|public
name|StructType
parameter_list|(
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
parameter_list|)
block|{
name|super
argument_list|(
name|Types
operator|.
name|STRUCT
argument_list|,
literal|"STRUCT"
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Common
operator|.
name|AvaticaType
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|AvaticaType
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|AvaticaType
operator|.
name|newBuilder
argument_list|(
name|super
operator|.
name|toProto
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnMetaData
name|valueType
range|:
name|columns
control|)
block|{
name|builder
operator|.
name|addColumns
argument_list|(
name|valueType
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|rep
argument_list|,
name|columns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|StructType
operator|&&
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|columns
argument_list|,
operator|(
operator|(
name|StructType
operator|)
name|o
operator|)
operator|.
name|columns
argument_list|)
return|;
block|}
block|}
comment|/** Array type. */
specifier|public
specifier|static
class|class
name|ArrayType
extends|extends
name|AvaticaType
block|{
specifier|public
specifier|final
name|AvaticaType
name|component
decl_stmt|;
comment|/**      * Not for public use. Use {@link ColumnMetaData#array(AvaticaType, String, Rep)}.      */
annotation|@
name|JsonCreator
specifier|public
name|ArrayType
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"type"
argument_list|)
name|int
name|type
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
name|String
name|typeName
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"rep"
argument_list|)
name|Rep
name|representation
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"component"
argument_list|)
name|AvaticaType
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|typeName
argument_list|,
name|representation
argument_list|)
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Common
operator|.
name|AvaticaType
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|AvaticaType
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|AvaticaType
operator|.
name|newBuilder
argument_list|(
name|super
operator|.
name|toProto
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setComponent
argument_list|(
name|component
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|rep
argument_list|,
name|component
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|ArrayType
operator|&&
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|component
argument_list|,
operator|(
operator|(
name|ArrayType
operator|)
name|o
operator|)
operator|.
name|component
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ColumnMetaData.java
end_comment

end_unit

