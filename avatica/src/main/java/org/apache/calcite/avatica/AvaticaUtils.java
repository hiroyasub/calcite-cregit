begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Avatica utilities. */
end_comment

begin_class
specifier|public
class|class
name|AvaticaUtils
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|BOX
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MethodHandle
name|SET_LARGE_MAX_ROWS
init|=
name|method
argument_list|(
name|void
operator|.
name|class
argument_list|,
name|Statement
operator|.
name|class
argument_list|,
literal|"setLargeMaxRows"
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MethodHandle
name|GET_LARGE_MAX_ROWS
init|=
name|method
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Statement
operator|.
name|class
argument_list|,
literal|"getLargeMaxRows"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MethodHandle
name|GET_LARGE_UPDATE_COUNT
init|=
name|method
argument_list|(
name|void
operator|.
name|class
argument_list|,
name|Statement
operator|.
name|class
argument_list|,
literal|"getLargeUpdateCount"
argument_list|)
decl_stmt|;
specifier|private
name|AvaticaUtils
parameter_list|()
block|{
block|}
static|static
block|{
name|BOX
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|char
operator|.
name|class
argument_list|,
name|Character
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|MethodHandle
name|method
parameter_list|(
name|Class
name|returnType
parameter_list|,
name|Class
name|targetType
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
modifier|...
name|argTypes
parameter_list|)
block|{
specifier|final
name|MethodHandles
operator|.
name|Lookup
name|lookup
init|=
name|MethodHandles
operator|.
name|lookup
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|lookup
operator|.
name|findVirtual
argument_list|(
name|targetType
argument_list|,
name|name
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|returnType
argument_list|,
name|targetType
argument_list|,
name|argTypes
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Does nothing with its argument. Call this method when you have a value    * you are not interested in, but you don't want the compiler to warn that    * you are not using it.    */
specifier|public
specifier|static
name|void
name|discard
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
literal|false
condition|)
block|{
name|discard
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adapts a primitive array into a {@link List}. For example,    * {@code asList(new double[2])} returns a {@code List&lt;Double&gt;}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|?
argument_list|>
name|primitiveList
parameter_list|(
specifier|final
name|Object
name|array
parameter_list|)
block|{
comment|// REVIEW: A per-type list might be more efficient. (Or might not.)
return|return
operator|new
name|AbstractList
argument_list|()
block|{
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|get
argument_list|(
name|array
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|getLength
argument_list|(
name|array
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Converts a camelCase name into an upper-case underscore-separated name.    * For example, {@code camelToUpper("myJdbcDriver")} returns    * "MY_JDBC_DRIVER".    */
specifier|public
specifier|static
name|String
name|camelToUpper
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Converts an underscore-separated name into a camelCase name.    * For example, {@code uncamel("MY_JDBC_DRIVER")} returns "myJdbcDriver".    */
specifier|public
specifier|static
name|String
name|toCamelCase
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|nextUpper
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'_'
condition|)
block|{
name|nextUpper
operator|=
name|i
operator|+
literal|1
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|nextUpper
operator|==
name|i
condition|)
block|{
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Returns the boxed class. For example, {@code box(int.class)}    * returns {@code java.lang.Integer}. */
specifier|public
specifier|static
name|Class
name|box
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|BOX
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
return|return
name|clazz
return|;
block|}
comment|/** Creates an instance of a plugin class. First looks for a static    * member called INSTANCE, then calls a public default constructor.    *    *<p>If className contains a "#" instead looks for a static field.    *    * @param pluginClass Class (or interface) to instantiate    * @param className Name of implementing class    * @param<T> Class    * @return Plugin instance    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|instantiatePlugin
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|pluginClass
parameter_list|,
name|String
name|className
parameter_list|)
block|{
try|try
block|{
comment|// Given a static field, say "com.example.MyClass#FOO_INSTANCE", return
comment|// the value of that static field.
if|if
condition|(
name|className
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
try|try
block|{
name|int
name|i
init|=
name|className
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
name|String
name|left
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|right
init|=
name|className
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//noinspection unchecked
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
init|=
operator|(
name|Class
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|left
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|field
decl_stmt|;
name|field
operator|=
name|clazz
operator|.
name|getField
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
name|pluginClass
operator|.
name|cast
argument_list|(
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|//noinspection unchecked
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
init|=
operator|(
name|Class
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
assert|assert
name|pluginClass
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
assert|;
try|try
block|{
comment|// We assume that if there is an INSTANCE field it is static and
comment|// has the right type.
specifier|final
name|Field
name|field
init|=
name|clazz
operator|.
name|getField
argument_list|(
literal|"INSTANCE"
argument_list|)
decl_stmt|;
return|return
name|pluginClass
operator|.
name|cast
argument_list|(
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Property '"
operator|+
name|className
operator|+
literal|"' not valid for plugin type "
operator|+
name|pluginClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Reads the contents of an input stream and returns as a string. */
specifier|public
specifier|static
name|String
name|readFully
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|count
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|baos
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Invokes {@code Statement#setLargeMaxRows}, falling back on    * {@link Statement#setMaxRows(int)} if the method does not exist (before    * JDK 1.8) or throws {@link UnsupportedOperationException}. */
specifier|public
specifier|static
name|void
name|setLargeMaxRows
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|long
name|n
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|SET_LARGE_MAX_ROWS
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Call Statement.setLargeMaxRows
name|SET_LARGE_MAX_ROWS
operator|.
name|invokeExact
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ignore, and fall through to call Statement.setMaxRows
block|}
catch|catch
parameter_list|(
name|Error
decl||
name|RuntimeException
decl||
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|int
name|i
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|statement
operator|.
name|setMaxRows
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|/** Invokes {@code Statement#getLargeMaxRows}, falling back on    * {@link Statement#getMaxRows()} if the method does not exist (before    * JDK 1.8) or throws {@link UnsupportedOperationException}. */
specifier|public
specifier|static
name|long
name|getLargeMaxRows
parameter_list|(
name|Statement
name|statement
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|GET_LARGE_MAX_ROWS
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Call Statement.getLargeMaxRows
return|return
operator|(
name|long
operator|)
name|GET_LARGE_MAX_ROWS
operator|.
name|invokeExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ignore, and fall through to call Statement.getMaxRows
block|}
catch|catch
parameter_list|(
name|Error
decl||
name|RuntimeException
decl||
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|statement
operator|.
name|getMaxRows
argument_list|()
return|;
block|}
comment|/** Invokes {@code Statement#getLargeUpdateCount}, falling back on    * {@link Statement#getUpdateCount()} if the method does not exist (before    * JDK 1.8) or throws {@link UnsupportedOperationException}. */
specifier|public
specifier|static
name|long
name|getLargeUpdateCount
parameter_list|(
name|Statement
name|statement
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|GET_LARGE_UPDATE_COUNT
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Call Statement.getLargeUpdateCount
return|return
operator|(
name|long
operator|)
name|GET_LARGE_UPDATE_COUNT
operator|.
name|invokeExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ignore, and fall through to call Statement.getUpdateCount
block|}
catch|catch
parameter_list|(
name|Error
decl||
name|RuntimeException
decl||
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|statement
operator|.
name|getUpdateCount
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End AvaticaUtils.java
end_comment

end_unit

