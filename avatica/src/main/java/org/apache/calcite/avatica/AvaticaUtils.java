begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Avatica utilities. */
end_comment

begin_class
specifier|public
class|class
name|AvaticaUtils
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|BOX
decl_stmt|;
specifier|private
name|AvaticaUtils
parameter_list|()
block|{
block|}
static|static
block|{
name|BOX
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|char
operator|.
name|class
argument_list|,
name|Character
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|BOX
operator|.
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Does nothing with its argument. Call this method when you have a value    * you are not interested in, but you don't want the compiler to warn that    * you are not using it.    */
specifier|public
specifier|static
name|void
name|discard
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
literal|false
condition|)
block|{
name|discard
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adapts a primitive array into a {@link List}. For example,    * {@code asList(new double[2])} returns a {@code List&lt;Double&gt;}.    */
specifier|public
specifier|static
name|List
argument_list|<
name|?
argument_list|>
name|primitiveList
parameter_list|(
specifier|final
name|Object
name|array
parameter_list|)
block|{
comment|// REVIEW: A per-type list might be more efficient. (Or might not.)
return|return
operator|new
name|AbstractList
argument_list|()
block|{
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|get
argument_list|(
name|array
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|getLength
argument_list|(
name|array
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Converts a camelCase name into an upper-case underscore-separated name.    * For example, {@code camelToUpper("myJdbcDriver")} returns    * "MY_JDBC_DRIVER".    */
specifier|public
specifier|static
name|String
name|camelToUpper
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Converts an underscore-separated name into a camelCase name.    * For example, {@code uncamel("MY_JDBC_DRIVER")} returns "myJdbcDriver".    */
specifier|public
specifier|static
name|String
name|toCamelCase
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|nextUpper
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'_'
condition|)
block|{
name|nextUpper
operator|=
name|i
operator|+
literal|1
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|nextUpper
operator|==
name|i
condition|)
block|{
name|c
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Returns the boxed class. For example, {@code box(int.class)}    * returns {@code java.lang.Integer}. */
specifier|public
specifier|static
name|Class
name|box
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|BOX
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
return|return
name|clazz
return|;
block|}
block|}
end_class

begin_comment
comment|// End AvaticaUtils.java
end_comment

end_unit

