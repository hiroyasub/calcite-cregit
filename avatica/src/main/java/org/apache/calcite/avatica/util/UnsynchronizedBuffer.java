begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * A utility class for reading and writing bytes to byte buffers without synchronization. A  * reduced variant taken from Apache Accumulo. This class is<b>not</b> thread-safe by design.  * It is up to the caller to guarantee mutual exclusion as necessary.  */
end_comment

begin_class
specifier|public
class|class
name|UnsynchronizedBuffer
extends|extends
name|OutputStream
block|{
comment|// Anything larger than 64K, reap the backing buffer
specifier|private
specifier|static
specifier|final
name|int
name|LARGE_BUFFER_SIZE
init|=
literal|1024
operator|*
literal|64
decl_stmt|;
specifier|final
name|int
name|initialCapacity
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
comment|/**    * Creates a new writer.    */
specifier|public
name|UnsynchronizedBuffer
parameter_list|()
block|{
name|this
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new writer.    *    * @param initialCapacity initial byte capacity    */
specifier|public
name|UnsynchronizedBuffer
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
operator|.
name|initialCapacity
operator|=
name|initialCapacity
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|initialCapacity
index|]
expr_stmt|;
block|}
specifier|private
name|void
name|reserve
parameter_list|(
name|int
name|l
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|+
name|l
operator|>
name|data
operator|.
name|length
condition|)
block|{
name|int
name|newSize
init|=
name|UnsynchronizedBuffer
operator|.
name|nextArraySize
argument_list|(
name|offset
operator|+
name|l
argument_list|)
decl_stmt|;
name|byte
index|[]
name|newData
init|=
operator|new
name|byte
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|newData
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|data
operator|=
name|newData
expr_stmt|;
block|}
block|}
comment|/**    * Adds bytes to this writer's buffer.    *    * @param bytes byte array    * @param off offset into array to start copying bytes    * @param length number of bytes to add    * @throws IndexOutOfBoundsException if off or length are invalid    */
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|reserve
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
comment|/**    * Gets (a copy of) the contents of this writer's buffer.    *    * @return byte buffer contents    */
specifier|public
name|byte
index|[]
name|toArray
parameter_list|()
block|{
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|offset
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Resets the internal pointer into the buffer.    */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|offset
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|>=
name|LARGE_BUFFER_SIZE
condition|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
name|this
operator|.
name|initialCapacity
index|]
expr_stmt|;
block|}
block|}
comment|/**    * @return The current offset into the backing array.    */
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**    * @return The current length of the backing array.    */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
comment|/**    * Determines what next array size should be by rounding up to next power of two.    *    * @param i current array size    * @return next array size    * @throws IllegalArgumentException if i is negative    */
specifier|public
specifier|static
name|int
name|nextArraySize
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|i
operator|>
operator|(
literal|1
operator|<<
literal|30
operator|)
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
comment|// this is the next power of 2 minus one... a special case
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// round up to next power of two
name|int
name|ret
init|=
name|i
decl_stmt|;
name|ret
operator|--
expr_stmt|;
name|ret
operator||=
name|ret
operator|>>
literal|1
expr_stmt|;
name|ret
operator||=
name|ret
operator|>>
literal|2
expr_stmt|;
name|ret
operator||=
name|ret
operator|>>
literal|4
expr_stmt|;
name|ret
operator||=
name|ret
operator|>>
literal|8
expr_stmt|;
name|ret
operator||=
name|ret
operator|>>
literal|16
expr_stmt|;
name|ret
operator|++
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

begin_comment
comment|// End UnsynchronizedBuffer.java
end_comment

end_unit

