begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link org.apache.calcite.avatica.remote.Handler}  * that decodes JSON requests, sends them to a {@link Service},  * and encodes the responses into JSON.  *  * @see org.apache.calcite.avatica.remote.JsonService  */
end_comment

begin_class
specifier|public
class|class
name|JsonHandler
implements|implements
name|Handler
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|final
name|Service
name|service
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|ObjectMapper
name|MAPPER
init|=
name|JsonService
operator|.
name|MAPPER
decl_stmt|;
specifier|public
name|JsonHandler
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|jsonRequest
parameter_list|)
block|{
try|try
block|{
name|Service
operator|.
name|Request
name|request
init|=
name|decode
argument_list|(
name|jsonRequest
argument_list|,
name|Service
operator|.
name|Request
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Service
operator|.
name|Response
name|response
init|=
name|request
operator|.
name|accept
argument_list|(
name|service
argument_list|)
decl_stmt|;
return|return
name|encode
argument_list|(
name|response
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|handle
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|decode
parameter_list|(
name|String
name|request
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|valueType
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|MAPPER
operator|.
name|readValue
argument_list|(
name|request
argument_list|,
name|valueType
argument_list|)
return|;
block|}
comment|/**    * Serializes the provided object as JSON.    *    * @param response The object to serialize.    * @return A JSON string.    */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|String
name|encode
parameter_list|(
name|T
name|response
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|MAPPER
operator|.
name|writeValue
argument_list|(
name|w
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|RuntimeException
name|handle
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End JsonHandler.java
end_comment

end_unit

