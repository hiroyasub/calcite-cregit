begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|proto
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|ProtobufService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Concrete implementation of {@link Meta.ConnectionProperties}. Provides additional state  * tracking to enable {@code RemoteMeta} to lazily push changes up to a query server.  *  *<p>{@code Meta} instances should probably hold authority on the {@code isDirty}  * flag because {@code AvaticaConnection} instances have no way of knowing if they're local or  * remote.  */
end_comment

begin_class
specifier|public
class|class
name|ConnectionPropertiesImpl
implements|implements
name|Meta
operator|.
name|ConnectionProperties
block|{
specifier|private
name|boolean
name|isDirty
init|=
literal|false
decl_stmt|;
specifier|private
name|Boolean
name|autoCommit
decl_stmt|;
specifier|private
name|Boolean
name|readOnly
decl_stmt|;
specifier|private
name|Integer
name|transactionIsolation
decl_stmt|;
specifier|private
name|String
name|catalog
decl_stmt|;
specifier|private
name|String
name|schema
decl_stmt|;
comment|// TODO: replace with Meta.ConnectionProperties$EMPTY instance?
specifier|public
name|ConnectionPropertiesImpl
parameter_list|()
block|{
block|}
specifier|public
name|ConnectionPropertiesImpl
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
argument_list|(
name|conn
operator|.
name|getAutoCommit
argument_list|()
argument_list|,
name|conn
operator|.
name|isReadOnly
argument_list|()
argument_list|,
name|conn
operator|.
name|getTransactionIsolation
argument_list|()
argument_list|,
name|conn
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|conn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonCreator
specifier|public
name|ConnectionPropertiesImpl
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"autoCommit"
argument_list|)
name|Boolean
name|autoCommit
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"readOnly"
argument_list|)
name|Boolean
name|readOnly
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"transactionIsolation"
argument_list|)
name|Integer
name|transactionIsolation
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"catalog"
argument_list|)
name|String
name|catalog
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"schema"
argument_list|)
name|String
name|schema
parameter_list|)
block|{
name|this
operator|.
name|autoCommit
operator|=
name|autoCommit
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|this
operator|.
name|transactionIsolation
operator|=
name|transactionIsolation
expr_stmt|;
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
specifier|public
name|ConnectionPropertiesImpl
name|setDirty
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|isDirty
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|this
operator|.
name|isDirty
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|autoCommit
operator|==
literal|null
operator|&&
name|readOnly
operator|==
literal|null
operator|&&
name|transactionIsolation
operator|==
literal|null
operator|&&
name|catalog
operator|==
literal|null
operator|&&
name|schema
operator|==
literal|null
return|;
block|}
comment|/** Overwrites fields in {@code this} with any non-null fields in {@code that}. Sets    * {@code isDirty} if any fields are changed.    *    * @return {@code this}    */
annotation|@
name|Override
specifier|public
name|ConnectionPropertiesImpl
name|merge
parameter_list|(
name|Meta
operator|.
name|ConnectionProperties
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|that
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|that
operator|.
name|isAutoCommit
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|autoCommit
operator|!=
name|that
operator|.
name|isAutoCommit
argument_list|()
condition|)
block|{
name|this
operator|.
name|autoCommit
operator|=
name|that
operator|.
name|isAutoCommit
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|that
operator|.
name|isReadOnly
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|readOnly
operator|!=
name|that
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|this
operator|.
name|readOnly
operator|=
name|that
operator|.
name|isReadOnly
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|that
operator|.
name|getTransactionIsolation
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|that
operator|.
name|getTransactionIsolation
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|transactionIsolation
argument_list|)
condition|)
block|{
name|this
operator|.
name|transactionIsolation
operator|=
name|that
operator|.
name|getTransactionIsolation
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|that
operator|.
name|getCatalog
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|that
operator|.
name|getCatalog
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|this
operator|.
name|catalog
argument_list|)
condition|)
block|{
name|this
operator|.
name|catalog
operator|=
name|that
operator|.
name|getCatalog
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|that
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|that
operator|.
name|getSchema
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|this
operator|.
name|schema
argument_list|)
condition|)
block|{
name|this
operator|.
name|schema
operator|=
name|that
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/** Sets {@code autoCommit} status and flag as dirty.    *    * @return {@code this}    */
annotation|@
name|Override
specifier|public
name|Meta
operator|.
name|ConnectionProperties
name|setAutoCommit
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|autoCommit
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isAutoCommit
parameter_list|()
block|{
return|return
name|this
operator|.
name|autoCommit
return|;
block|}
comment|/** Sets {@code readOnly} status and flag as dirty.    *    * @return {@code this}    */
annotation|@
name|Override
specifier|public
name|Meta
operator|.
name|ConnectionProperties
name|setReadOnly
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|readOnly
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|this
operator|.
name|readOnly
return|;
block|}
comment|/** Sets {@code transactionIsolation} status and flag as dirty.    *    * @return {@code this}    */
annotation|@
name|Override
specifier|public
name|Meta
operator|.
name|ConnectionProperties
name|setTransactionIsolation
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|transactionIsolation
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Integer
name|getTransactionIsolation
parameter_list|()
block|{
return|return
name|this
operator|.
name|transactionIsolation
return|;
block|}
comment|/** Sets {@code catalog} and flag as dirty.    *    * @return {@code this}    */
annotation|@
name|Override
specifier|public
name|Meta
operator|.
name|ConnectionProperties
name|setCatalog
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|this
operator|.
name|catalog
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCatalog
parameter_list|()
block|{
return|return
name|this
operator|.
name|catalog
return|;
block|}
comment|/** Sets {@code schema} and flag as dirty.    *    * @return {@code this}    */
annotation|@
name|Override
specifier|public
name|Meta
operator|.
name|ConnectionProperties
name|setSchema
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|isDirty
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getSchema
parameter_list|()
block|{
return|return
name|this
operator|.
name|schema
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|autoCommit
argument_list|,
name|catalog
argument_list|,
name|isDirty
argument_list|,
name|readOnly
argument_list|,
name|schema
argument_list|,
name|transactionIsolation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|ConnectionPropertiesImpl
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|autoCommit
argument_list|,
operator|(
operator|(
name|ConnectionPropertiesImpl
operator|)
name|o
operator|)
operator|.
name|autoCommit
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|catalog
argument_list|,
operator|(
operator|(
name|ConnectionPropertiesImpl
operator|)
name|o
operator|)
operator|.
name|catalog
argument_list|)
operator|&&
name|isDirty
operator|==
operator|(
operator|(
name|ConnectionPropertiesImpl
operator|)
name|o
operator|)
operator|.
name|isDirty
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|readOnly
argument_list|,
operator|(
operator|(
name|ConnectionPropertiesImpl
operator|)
name|o
operator|)
operator|.
name|readOnly
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|schema
argument_list|,
operator|(
operator|(
name|ConnectionPropertiesImpl
operator|)
name|o
operator|)
operator|.
name|schema
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|transactionIsolation
argument_list|,
operator|(
operator|(
name|ConnectionPropertiesImpl
operator|)
name|o
operator|)
operator|.
name|transactionIsolation
argument_list|)
return|;
block|}
specifier|public
name|Common
operator|.
name|ConnectionProperties
name|toProto
parameter_list|()
block|{
name|Common
operator|.
name|ConnectionProperties
operator|.
name|Builder
name|builder
init|=
name|Common
operator|.
name|ConnectionProperties
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|autoCommit
condition|)
block|{
name|builder
operator|.
name|setHasAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Be explicit to avoid default value confusion
name|builder
operator|.
name|setHasAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|catalog
condition|)
block|{
name|builder
operator|.
name|setCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setIsDirty
argument_list|(
name|isDirty
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|readOnly
condition|)
block|{
name|builder
operator|.
name|setHasReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReadOnly
argument_list|(
name|readOnly
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Be explicit to avoid default value confusion
name|builder
operator|.
name|setHasReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|schema
condition|)
block|{
name|builder
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|transactionIsolation
condition|)
block|{
name|builder
operator|.
name|setTransactionIsolation
argument_list|(
name|transactionIsolation
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ConnectionPropertiesImpl
name|fromProto
parameter_list|(
name|Common
operator|.
name|ConnectionProperties
name|proto
parameter_list|)
block|{
specifier|final
name|Descriptor
name|desc
init|=
name|proto
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
name|String
name|catalog
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ProtobufService
operator|.
name|hasField
argument_list|(
name|proto
argument_list|,
name|desc
argument_list|,
name|Common
operator|.
name|ConnectionProperties
operator|.
name|CATALOG_FIELD_NUMBER
argument_list|)
condition|)
block|{
name|catalog
operator|=
name|proto
operator|.
name|getCatalog
argument_list|()
expr_stmt|;
block|}
name|String
name|schema
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ProtobufService
operator|.
name|hasField
argument_list|(
name|proto
argument_list|,
name|desc
argument_list|,
name|Common
operator|.
name|ConnectionProperties
operator|.
name|SCHEMA_FIELD_NUMBER
argument_list|)
condition|)
block|{
name|schema
operator|=
name|proto
operator|.
name|getSchema
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|autoCommit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getHasAutoCommit
argument_list|()
condition|)
block|{
name|autoCommit
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|readOnly
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getHasReadOnly
argument_list|()
condition|)
block|{
name|readOnly
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|getReadOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Integer
name|transactionIsolation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ProtobufService
operator|.
name|hasField
argument_list|(
name|proto
argument_list|,
name|desc
argument_list|,
name|Common
operator|.
name|ConnectionProperties
operator|.
name|TRANSACTION_ISOLATION_FIELD_NUMBER
argument_list|)
condition|)
block|{
name|transactionIsolation
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|getTransactionIsolation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ConnectionPropertiesImpl
name|impl
init|=
operator|new
name|ConnectionPropertiesImpl
argument_list|(
name|autoCommit
argument_list|,
name|readOnly
argument_list|,
name|transactionIsolation
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|impl
operator|.
name|setDirty
argument_list|(
name|proto
operator|.
name|getIsDirty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
block|}
end_class

begin_comment
comment|// End ConnectionPropertiesImpl.java
end_comment

end_unit

