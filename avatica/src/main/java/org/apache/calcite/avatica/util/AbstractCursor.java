begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|NClob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLXML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Base class for implementing a cursor.  *  *<p>Derived class needs to provide {@link Getter} and can override  * {@link org.apache.calcite.avatica.util.Cursor.Accessor} implementations if it  * wishes.</p>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCursor
implements|implements
name|Cursor
block|{
comment|/**    * Slot into which each accessor should write whether the    * value returned was null.    */
specifier|protected
specifier|final
name|boolean
index|[]
name|wasNull
init|=
block|{
literal|false
block|}
decl_stmt|;
specifier|protected
name|AbstractCursor
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|wasNull
parameter_list|()
block|{
return|return
name|wasNull
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|List
argument_list|<
name|Accessor
argument_list|>
name|createAccessors
parameter_list|(
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|types
parameter_list|,
name|Calendar
name|localCalendar
parameter_list|,
name|ArrayImpl
operator|.
name|Factory
name|factory
parameter_list|)
block|{
name|List
argument_list|<
name|Accessor
argument_list|>
name|accessors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnMetaData
name|type
range|:
name|types
control|)
block|{
name|accessors
operator|.
name|add
argument_list|(
name|createAccessor
argument_list|(
name|type
argument_list|,
name|accessors
operator|.
name|size
argument_list|()
argument_list|,
name|localCalendar
argument_list|,
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|accessors
return|;
block|}
specifier|protected
name|Accessor
name|createAccessor
parameter_list|(
name|ColumnMetaData
name|columnMetaData
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|Calendar
name|localCalendar
parameter_list|,
name|ArrayImpl
operator|.
name|Factory
name|factory
parameter_list|)
block|{
comment|// Create an accessor appropriate to the underlying type; the accessor
comment|// can convert to any type in the same family.
name|Getter
name|getter
init|=
name|createGetter
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
return|return
name|createAccessor
argument_list|(
name|columnMetaData
argument_list|,
name|getter
argument_list|,
name|localCalendar
argument_list|,
name|factory
argument_list|)
return|;
block|}
specifier|protected
name|Accessor
name|createAccessor
parameter_list|(
name|ColumnMetaData
name|columnMetaData
parameter_list|,
name|Getter
name|getter
parameter_list|,
name|Calendar
name|localCalendar
parameter_list|,
name|ArrayImpl
operator|.
name|Factory
name|factory
parameter_list|)
block|{
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|rep
condition|)
block|{
case|case
name|NUMBER
case|:
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|id
condition|)
block|{
case|case
name|Types
operator|.
name|TINYINT
case|:
case|case
name|Types
operator|.
name|SMALLINT
case|:
case|case
name|Types
operator|.
name|INTEGER
case|:
case|case
name|Types
operator|.
name|BIGINT
case|:
case|case
name|Types
operator|.
name|REAL
case|:
case|case
name|Types
operator|.
name|FLOAT
case|:
case|case
name|Types
operator|.
name|DOUBLE
case|:
case|case
name|Types
operator|.
name|NUMERIC
case|:
case|case
name|Types
operator|.
name|DECIMAL
case|:
return|return
operator|new
name|NumberAccessor
argument_list|(
name|getter
argument_list|,
name|columnMetaData
operator|.
name|scale
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|id
condition|)
block|{
case|case
name|Types
operator|.
name|TINYINT
case|:
return|return
operator|new
name|ByteAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|SMALLINT
case|:
return|return
operator|new
name|ShortAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|INTEGER
case|:
return|return
operator|new
name|IntAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|BIGINT
case|:
return|return
operator|new
name|LongAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|REAL
case|:
return|return
operator|new
name|FloatAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|FLOAT
case|:
case|case
name|Types
operator|.
name|DOUBLE
case|:
return|return
operator|new
name|DoubleAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|DECIMAL
case|:
return|return
operator|new
name|BigDecimalAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|CHAR
case|:
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|rep
condition|)
block|{
case|case
name|PRIMITIVE_CHAR
case|:
case|case
name|CHARACTER
case|:
return|return
operator|new
name|StringFromCharAccessor
argument_list|(
name|getter
argument_list|,
name|columnMetaData
operator|.
name|displaySize
argument_list|)
return|;
default|default:
return|return
operator|new
name|FixedStringAccessor
argument_list|(
name|getter
argument_list|,
name|columnMetaData
operator|.
name|displaySize
argument_list|)
return|;
block|}
case|case
name|Types
operator|.
name|VARCHAR
case|:
return|return
operator|new
name|StringAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|Types
operator|.
name|BINARY
case|:
case|case
name|Types
operator|.
name|VARBINARY
case|:
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|rep
condition|)
block|{
case|case
name|STRING
case|:
return|return
operator|new
name|BinaryFromStringAccessor
argument_list|(
name|getter
argument_list|)
return|;
default|default:
return|return
operator|new
name|BinaryAccessor
argument_list|(
name|getter
argument_list|)
return|;
block|}
case|case
name|Types
operator|.
name|DATE
case|:
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|rep
condition|)
block|{
case|case
name|PRIMITIVE_INT
case|:
case|case
name|INTEGER
case|:
case|case
name|NUMBER
case|:
return|return
operator|new
name|DateFromNumberAccessor
argument_list|(
name|getter
argument_list|,
name|localCalendar
argument_list|)
return|;
case|case
name|JAVA_SQL_DATE
case|:
return|return
operator|new
name|DateAccessor
argument_list|(
name|getter
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad "
operator|+
name|columnMetaData
operator|.
name|type
operator|.
name|rep
argument_list|)
throw|;
block|}
case|case
name|Types
operator|.
name|TIME
case|:
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|rep
condition|)
block|{
case|case
name|PRIMITIVE_INT
case|:
case|case
name|INTEGER
case|:
case|case
name|NUMBER
case|:
return|return
operator|new
name|TimeFromNumberAccessor
argument_list|(
name|getter
argument_list|,
name|localCalendar
argument_list|)
return|;
case|case
name|JAVA_SQL_TIME
case|:
return|return
operator|new
name|TimeAccessor
argument_list|(
name|getter
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad "
operator|+
name|columnMetaData
operator|.
name|type
operator|.
name|rep
argument_list|)
throw|;
block|}
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|rep
condition|)
block|{
case|case
name|PRIMITIVE_LONG
case|:
case|case
name|LONG
case|:
case|case
name|NUMBER
case|:
return|return
operator|new
name|TimestampFromNumberAccessor
argument_list|(
name|getter
argument_list|,
name|localCalendar
argument_list|)
return|;
case|case
name|JAVA_SQL_TIMESTAMP
case|:
return|return
operator|new
name|TimestampAccessor
argument_list|(
name|getter
argument_list|)
return|;
case|case
name|JAVA_UTIL_DATE
case|:
return|return
operator|new
name|TimestampFromUtilDateAccessor
argument_list|(
name|getter
argument_list|,
name|localCalendar
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad "
operator|+
name|columnMetaData
operator|.
name|type
operator|.
name|rep
argument_list|)
throw|;
block|}
case|case
name|Types
operator|.
name|ARRAY
case|:
specifier|final
name|ColumnMetaData
operator|.
name|ArrayType
name|arrayType
init|=
operator|(
name|ColumnMetaData
operator|.
name|ArrayType
operator|)
name|columnMetaData
operator|.
name|type
decl_stmt|;
specifier|final
name|SlotGetter
name|componentGetter
init|=
operator|new
name|SlotGetter
argument_list|()
decl_stmt|;
specifier|final
name|Accessor
name|componentAccessor
init|=
name|createAccessor
argument_list|(
name|ColumnMetaData
operator|.
name|dummy
argument_list|(
name|arrayType
operator|.
name|component
argument_list|,
literal|true
argument_list|)
argument_list|,
name|componentGetter
argument_list|,
name|localCalendar
argument_list|,
name|factory
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArrayAccessor
argument_list|(
name|getter
argument_list|,
name|arrayType
operator|.
name|component
argument_list|,
name|componentAccessor
argument_list|,
name|componentGetter
argument_list|,
name|factory
argument_list|)
return|;
case|case
name|Types
operator|.
name|STRUCT
case|:
switch|switch
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|rep
condition|)
block|{
case|case
name|OBJECT
case|:
specifier|final
name|ColumnMetaData
operator|.
name|StructType
name|structType
init|=
operator|(
name|ColumnMetaData
operator|.
name|StructType
operator|)
name|columnMetaData
operator|.
name|type
decl_stmt|;
name|List
argument_list|<
name|Accessor
argument_list|>
name|accessors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnMetaData
name|column
range|:
name|structType
operator|.
name|columns
control|)
block|{
specifier|final
name|Getter
name|fieldGetter
init|=
name|structType
operator|.
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|getter
else|:
operator|new
name|StructGetter
argument_list|(
name|getter
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|accessors
operator|.
name|add
argument_list|(
name|createAccessor
argument_list|(
name|column
argument_list|,
name|fieldGetter
argument_list|,
name|localCalendar
argument_list|,
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StructAccessor
argument_list|(
name|getter
argument_list|,
name|accessors
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad "
operator|+
name|columnMetaData
operator|.
name|type
operator|.
name|rep
argument_list|)
throw|;
block|}
case|case
name|Types
operator|.
name|JAVA_OBJECT
case|:
case|case
name|Types
operator|.
name|OTHER
case|:
comment|// e.g. map
if|if
condition|(
name|columnMetaData
operator|.
name|type
operator|.
name|name
operator|.
name|startsWith
argument_list|(
literal|"INTERVAL_"
argument_list|)
condition|)
block|{
name|int
name|end
init|=
name|columnMetaData
operator|.
name|type
operator|.
name|name
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|<
literal|0
condition|)
block|{
name|end
operator|=
name|columnMetaData
operator|.
name|type
operator|.
name|name
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|TimeUnitRange
name|range
init|=
name|TimeUnitRange
operator|.
name|valueOf
argument_list|(
name|columnMetaData
operator|.
name|type
operator|.
name|name
operator|.
name|substring
argument_list|(
literal|"INTERVAL_"
operator|.
name|length
argument_list|()
argument_list|,
name|end
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|monthly
argument_list|()
condition|)
block|{
return|return
operator|new
name|IntervalYearMonthAccessor
argument_list|(
name|getter
argument_list|,
name|range
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|IntervalDayTimeAccessor
argument_list|(
name|getter
argument_list|,
name|range
argument_list|,
name|columnMetaData
operator|.
name|scale
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|ObjectAccessor
argument_list|(
name|getter
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown type "
operator|+
name|columnMetaData
operator|.
name|type
operator|.
name|id
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|abstract
name|Getter
name|createGetter
parameter_list|(
name|int
name|ordinal
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|next
parameter_list|()
function_decl|;
comment|/** Accesses a timestamp value as a string.    * The timestamp is in SQL format (e.g. "2013-09-22 22:30:32"),    * not Java format ("2013-09-22 22:30:32.123"). */
specifier|private
specifier|static
name|String
name|timestampAsString
parameter_list|(
name|long
name|v
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|DateTimeUtils
operator|.
name|unixTimestampToString
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/** Accesses a date value as a string, e.g. "2013-09-22". */
specifier|private
specifier|static
name|String
name|dateAsString
parameter_list|(
name|int
name|v
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
name|AvaticaUtils
operator|.
name|discard
argument_list|(
name|calendar
argument_list|)
expr_stmt|;
comment|// timezone shift doesn't make sense
return|return
name|DateTimeUtils
operator|.
name|unixDateToString
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/** Accesses a time value as a string, e.g. "22:30:32". */
specifier|private
specifier|static
name|String
name|timeAsString
parameter_list|(
name|int
name|v
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|DateTimeUtils
operator|.
name|unixTimeToString
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Date
name|longToDate
parameter_list|(
name|long
name|v
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Date
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|static
name|Time
name|intToTime
parameter_list|(
name|int
name|v
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Time
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|static
name|Timestamp
name|longToTimestamp
parameter_list|(
name|long
name|v
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
block|{
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Timestamp
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/** Implementation of {@link Accessor}. */
specifier|static
class|class
name|AccessorImpl
implements|implements
name|Accessor
block|{
specifier|protected
specifier|final
name|Getter
name|getter
decl_stmt|;
specifier|public
name|AccessorImpl
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
assert|assert
name|getter
operator|!=
literal|null
assert|;
name|this
operator|.
name|getter
operator|=
name|getter
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasNull
parameter_list|()
block|{
return|return
name|getter
operator|.
name|wasNull
argument_list|()
return|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|Object
name|o
init|=
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
return|return
name|getLong
argument_list|()
operator|!=
literal|0L
return|;
block|}
specifier|public
name|byte
name|getByte
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
name|getLong
argument_list|()
return|;
block|}
specifier|public
name|short
name|getShort
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|getLong
argument_list|()
return|;
block|}
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|getLong
argument_list|()
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"long"
argument_list|)
throw|;
block|}
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
return|return
operator|(
name|float
operator|)
name|getDouble
argument_list|()
return|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"double"
argument_list|)
throw|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"BigDecimal"
argument_list|)
throw|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"BigDecimal with scale"
argument_list|)
throw|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"byte[]"
argument_list|)
throw|;
block|}
specifier|public
name|InputStream
name|getAsciiStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"InputStream (ascii)"
argument_list|)
throw|;
block|}
specifier|public
name|InputStream
name|getUnicodeStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"InputStream (unicode)"
argument_list|)
throw|;
block|}
specifier|public
name|InputStream
name|getBinaryStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"InputStream (binary)"
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|getter
operator|.
name|getObject
argument_list|()
return|;
block|}
specifier|public
name|Reader
name|getCharacterStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Reader"
argument_list|)
throw|;
block|}
specifier|private
name|RuntimeException
name|cannotConvert
parameter_list|(
name|String
name|targetType
parameter_list|)
block|{
return|return
operator|new
name|RuntimeException
argument_list|(
literal|"cannot convert to "
operator|+
name|targetType
operator|+
literal|" ("
operator|+
name|this
operator|+
literal|")"
argument_list|)
return|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Object (with map)"
argument_list|)
throw|;
block|}
specifier|public
name|Ref
name|getRef
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Ref"
argument_list|)
throw|;
block|}
specifier|public
name|Blob
name|getBlob
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Blob"
argument_list|)
throw|;
block|}
specifier|public
name|Clob
name|getClob
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Clob"
argument_list|)
throw|;
block|}
specifier|public
name|Array
name|getArray
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Array"
argument_list|)
throw|;
block|}
specifier|public
name|Struct
name|getStruct
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Struct"
argument_list|)
throw|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Date"
argument_list|)
throw|;
block|}
specifier|public
name|Time
name|getTime
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Time"
argument_list|)
throw|;
block|}
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Timestamp"
argument_list|)
throw|;
block|}
specifier|public
name|URL
name|getURL
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"URL"
argument_list|)
throw|;
block|}
specifier|public
name|NClob
name|getNClob
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"NClob"
argument_list|)
throw|;
block|}
specifier|public
name|SQLXML
name|getSQLXML
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"SQLXML"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getNString
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"NString"
argument_list|)
throw|;
block|}
specifier|public
name|Reader
name|getNCharacterStream
parameter_list|()
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"NCharacterStream"
argument_list|)
throw|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getObject
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
throw|throw
name|cannotConvert
argument_list|(
literal|"Object (with type)"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Accessor of exact numeric values. The subclass must implement the    * {@link #getLong()} method.    */
specifier|private
specifier|abstract
specifier|static
class|class
name|ExactNumericAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|ExactNumericAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
specifier|final
name|long
name|v
init|=
name|getLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|getter
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|DOWN
argument_list|)
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
specifier|final
name|long
name|val
init|=
name|getLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|0
operator|&&
name|getter
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|getLong
argument_list|()
return|;
block|}
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
return|return
name|getLong
argument_list|()
return|;
block|}
specifier|public
specifier|abstract
name|long
name|getLong
parameter_list|()
function_decl|;
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link Boolean};    * corresponds to {@link java.sql.Types#BOOLEAN}.    */
specifier|private
specifier|static
class|class
name|BooleanAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|BooleanAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
name|Boolean
name|o
init|=
operator|(
name|Boolean
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|!=
literal|null
operator|&&
name|o
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link Byte};    * corresponds to {@link java.sql.Types#TINYINT}.    */
specifier|private
specifier|static
class|class
name|ByteAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|ByteAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
name|getByte
parameter_list|()
block|{
name|Byte
name|o
init|=
operator|(
name|Byte
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getByte
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link Short};    * corresponds to {@link java.sql.Types#SMALLINT}.    */
specifier|private
specifier|static
class|class
name|ShortAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|ShortAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|short
name|getShort
parameter_list|()
block|{
name|Short
name|o
init|=
operator|(
name|Short
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getShort
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is an {@link Integer};    * corresponds to {@link java.sql.Types#INTEGER}.    */
specifier|private
specifier|static
class|class
name|IntAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|IntAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getInt
parameter_list|()
block|{
name|Integer
name|o
init|=
operator|(
name|Integer
operator|)
name|super
operator|.
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|getInt
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link Long};    * corresponds to {@link java.sql.Types#BIGINT}.    */
specifier|private
specifier|static
class|class
name|LongAccessor
extends|extends
name|ExactNumericAccessor
block|{
specifier|public
name|LongAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
name|Long
name|o
init|=
operator|(
name|Long
operator|)
name|super
operator|.
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
return|;
block|}
block|}
comment|/**    * Accessor of values that are {@link Double} or null.    */
specifier|private
specifier|abstract
specifier|static
class|class
name|ApproximateNumericAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|ApproximateNumericAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
specifier|final
name|double
name|v
init|=
name|getDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|0d
operator|&&
name|getter
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|DOWN
argument_list|)
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
specifier|final
name|double
name|v
init|=
name|getDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|getter
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|double
name|getDouble
parameter_list|()
function_decl|;
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
operator|(
name|long
operator|)
name|getDouble
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link Float};    * corresponds to {@link java.sql.Types#FLOAT}.    */
specifier|private
specifier|static
class|class
name|FloatAccessor
extends|extends
name|ApproximateNumericAccessor
block|{
specifier|public
name|FloatAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
name|Float
name|o
init|=
operator|(
name|Float
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0f
else|:
name|o
return|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|getFloat
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link Double};    * corresponds to {@link java.sql.Types#DOUBLE}.    */
specifier|private
specifier|static
class|class
name|DoubleAccessor
extends|extends
name|ApproximateNumericAccessor
block|{
specifier|public
name|DoubleAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
name|Double
name|o
init|=
operator|(
name|Double
operator|)
name|getObject
argument_list|()
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|0d
else|:
name|o
return|;
block|}
block|}
comment|/**    * Accessor of exact numeric values. The subclass must implement the    * {@link #getLong()} method.    */
specifier|private
specifier|abstract
specifier|static
class|class
name|BigNumberAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|BigNumberAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|Number
name|getNumber
parameter_list|()
function_decl|;
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
name|Number
name|number
init|=
name|getNumber
argument_list|()
decl_stmt|;
return|return
name|number
operator|==
literal|null
condition|?
literal|0d
else|:
name|number
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
name|Number
name|number
init|=
name|getNumber
argument_list|()
decl_stmt|;
return|return
name|number
operator|==
literal|null
condition|?
literal|0f
else|:
name|number
operator|.
name|floatValue
argument_list|()
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
name|Number
name|number
init|=
name|getNumber
argument_list|()
decl_stmt|;
return|return
name|number
operator|==
literal|null
condition|?
literal|0L
else|:
name|number
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|getInt
parameter_list|()
block|{
name|Number
name|number
init|=
name|getNumber
argument_list|()
decl_stmt|;
return|return
name|number
operator|==
literal|null
condition|?
literal|0
else|:
name|number
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|short
name|getShort
parameter_list|()
block|{
name|Number
name|number
init|=
name|getNumber
argument_list|()
decl_stmt|;
return|return
name|number
operator|==
literal|null
condition|?
literal|0
else|:
name|number
operator|.
name|shortValue
argument_list|()
return|;
block|}
specifier|public
name|byte
name|getByte
parameter_list|()
block|{
name|Number
name|number
init|=
name|getNumber
argument_list|()
decl_stmt|;
return|return
name|number
operator|==
literal|null
condition|?
literal|0
else|:
name|number
operator|.
name|byteValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
name|Number
name|number
init|=
name|getNumber
argument_list|()
decl_stmt|;
return|return
name|number
operator|!=
literal|null
operator|&&
name|number
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link BigDecimal};    * corresponds to {@link java.sql.Types#DECIMAL}.    */
specifier|private
specifier|static
class|class
name|BigDecimalAccessor
extends|extends
name|BigNumberAccessor
block|{
specifier|public
name|BigDecimalAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Number
name|getNumber
parameter_list|()
block|{
return|return
operator|(
name|Number
operator|)
name|getObject
argument_list|()
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|getObject
argument_list|()
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|getObject
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link Number};    * corresponds to {@link java.sql.Types#NUMERIC}.    *    *<p>This is useful when numbers have been translated over JSON. JSON    * converts a 0L (0 long) value to the string "0" and back to 0 (0 int).    * So you cannot be sure that the source and target type are the same.    */
specifier|static
class|class
name|NumberAccessor
extends|extends
name|BigNumberAccessor
block|{
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
specifier|public
name|NumberAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
specifier|protected
name|Number
name|getNumber
parameter_list|()
block|{
return|return
operator|(
name|Number
operator|)
name|super
operator|.
name|getObject
argument_list|()
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
name|Number
name|n
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BigDecimal
name|decimal
init|=
name|AvaticaSite
operator|.
name|toBigDecimal
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|scale
condition|)
block|{
return|return
name|decimal
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|BigDecimal
operator|.
name|ROUND_UNNECESSARY
argument_list|)
return|;
block|}
return|return
name|decimal
return|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
return|return
name|getBigDecimal
argument_list|(
name|scale
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link String};    * corresponds to {@link java.sql.Types#CHAR}    * and {@link java.sql.Types#VARCHAR}.    */
specifier|private
specifier|static
class|class
name|StringAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|StringAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|getObject
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|super
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link String};    * corresponds to {@link java.sql.Types#CHAR}.    */
specifier|private
specifier|static
class|class
name|FixedStringAccessor
extends|extends
name|StringAccessor
block|{
specifier|protected
specifier|final
name|Spacer
name|spacer
decl_stmt|;
specifier|public
name|FixedStringAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
name|this
operator|.
name|spacer
operator|=
operator|new
name|Spacer
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
name|String
name|s
init|=
name|super
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|spacer
operator|.
name|padRight
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link String};    * corresponds to {@link java.sql.Types#CHAR}.    */
specifier|private
specifier|static
class|class
name|StringFromCharAccessor
extends|extends
name|FixedStringAccessor
block|{
specifier|public
name|StringFromCharAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
name|Character
name|s
init|=
operator|(
name|Character
operator|)
name|super
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|spacer
operator|.
name|padRight
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is an array of    * {@link org.apache.calcite.avatica.util.ByteString} values;    * corresponds to {@link java.sql.Types#BINARY}    * and {@link java.sql.Types#VARBINARY}.    */
specifier|private
specifier|static
class|class
name|BinaryAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|BinaryAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
comment|//FIXME: Protobuf gets byte[]
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
name|Object
name|obj
init|=
name|getObject
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|ByteString
name|o
init|=
operator|(
name|ByteString
operator|)
name|obj
decl_stmt|;
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|getBytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|obj
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|byte
index|[]
operator|)
name|obj
return|;
block|}
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@link String},    * encoding {@link java.sql.Types#BINARY}    * and {@link java.sql.Types#VARBINARY} values in Base64 format.    */
specifier|private
specifier|static
class|class
name|BinaryFromStringAccessor
extends|extends
name|StringAccessor
block|{
specifier|public
name|BinaryFromStringAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|super
operator|.
name|getObject
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
comment|// JSON sends this as a base64-enc string, protobuf can do binary.
name|Object
name|obj
init|=
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
comment|// If we already have bytes, just send them back.
return|return
operator|(
name|byte
index|[]
operator|)
name|obj
return|;
block|}
specifier|final
name|String
name|string
init|=
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ByteString
operator|.
name|parseBase64
argument_list|(
name|string
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a DATE,    * in its default representation {@code int};    * corresponds to {@link java.sql.Types#DATE}.    */
specifier|private
specifier|static
class|class
name|DateFromNumberAccessor
extends|extends
name|NumberAccessor
block|{
specifier|private
specifier|final
name|Calendar
name|localCalendar
decl_stmt|;
specifier|public
name|DateFromNumberAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|Calendar
name|localCalendar
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|localCalendar
operator|=
name|localCalendar
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|getDate
argument_list|(
name|localCalendar
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getDate
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Number
name|v
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|longToDate
argument_list|(
name|v
operator|.
name|longValue
argument_list|()
operator|*
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|,
name|calendar
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Number
name|v
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|longToTimestamp
argument_list|(
name|v
operator|.
name|longValue
argument_list|()
operator|*
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|,
name|calendar
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|Number
name|v
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|dateAsString
argument_list|(
name|v
operator|.
name|intValue
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a Time,    * in its default representation {@code int};    * corresponds to {@link java.sql.Types#TIME}.    */
specifier|private
specifier|static
class|class
name|TimeFromNumberAccessor
extends|extends
name|NumberAccessor
block|{
specifier|private
specifier|final
name|Calendar
name|localCalendar
decl_stmt|;
specifier|public
name|TimeFromNumberAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|Calendar
name|localCalendar
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|localCalendar
operator|=
name|localCalendar
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|getTime
argument_list|(
name|localCalendar
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Time
name|getTime
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Number
name|v
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|intToTime
argument_list|(
name|v
operator|.
name|intValue
argument_list|()
argument_list|,
name|calendar
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Number
name|v
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|longToTimestamp
argument_list|(
name|v
operator|.
name|longValue
argument_list|()
argument_list|,
name|calendar
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|Number
name|v
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|timeAsString
argument_list|(
name|v
operator|.
name|intValue
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a TIMESTAMP,    * in its default representation {@code long};    * corresponds to {@link java.sql.Types#TIMESTAMP}.    */
specifier|private
specifier|static
class|class
name|TimestampFromNumberAccessor
extends|extends
name|NumberAccessor
block|{
specifier|private
specifier|final
name|Calendar
name|localCalendar
decl_stmt|;
specifier|public
name|TimestampFromNumberAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|Calendar
name|localCalendar
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|localCalendar
operator|=
name|localCalendar
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|getTimestamp
argument_list|(
name|localCalendar
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Number
name|v
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|longToTimestamp
argument_list|(
name|v
operator|.
name|longValue
argument_list|()
argument_list|,
name|calendar
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getDate
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Timestamp
name|timestamp
init|=
name|getTimestamp
argument_list|(
name|calendar
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Date
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Time
name|getTime
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Timestamp
name|timestamp
init|=
name|getTimestamp
argument_list|(
name|calendar
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Time
argument_list|(
name|DateTimeUtils
operator|.
name|floorMod
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|Number
name|v
init|=
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|timestampAsString
argument_list|(
name|v
operator|.
name|longValue
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a DATE,    * represented as a java.sql.Date;    * corresponds to {@link java.sql.Types#DATE}.    */
specifier|private
specifier|static
class|class
name|DateAccessor
extends|extends
name|ObjectAccessor
block|{
specifier|public
name|DateAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getDate
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
name|java
operator|.
name|sql
operator|.
name|Date
name|date
init|=
operator|(
name|Date
operator|)
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|long
name|v
init|=
name|date
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|date
operator|=
operator|new
name|Date
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|date
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|int
name|v
init|=
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|dateAsString
argument_list|(
name|v
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|()
block|{
name|Date
name|date
init|=
name|getDate
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|date
operator|==
literal|null
condition|?
literal|0L
else|:
operator|(
name|date
operator|.
name|getTime
argument_list|()
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a TIME,    * represented as a java.sql.Time;    * corresponds to {@link java.sql.Types#TIME}.    */
specifier|private
specifier|static
class|class
name|TimeAccessor
extends|extends
name|ObjectAccessor
block|{
specifier|public
name|TimeAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Time
name|getTime
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
name|Time
name|date
init|=
operator|(
name|Time
operator|)
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|long
name|v
init|=
name|date
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|date
operator|=
operator|new
name|Time
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|date
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|int
name|v
init|=
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|timeAsString
argument_list|(
name|v
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|()
block|{
name|Time
name|time
init|=
name|getTime
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|time
operator|==
literal|null
condition|?
literal|0L
else|:
operator|(
name|time
operator|.
name|getTime
argument_list|()
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a TIMESTAMP,    * represented as a java.sql.Timestamp;    * corresponds to {@link java.sql.Types#TIMESTAMP}.    */
specifier|private
specifier|static
class|class
name|TimestampAccessor
extends|extends
name|ObjectAccessor
block|{
specifier|public
name|TimestampAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
name|Timestamp
name|timestamp
init|=
operator|(
name|Timestamp
operator|)
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|long
name|v
init|=
name|timestamp
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|timestamp
operator|=
operator|new
name|Timestamp
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|timestamp
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getDate
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Timestamp
name|timestamp
init|=
name|getTimestamp
argument_list|(
name|calendar
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Date
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Time
name|getTime
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Timestamp
name|timestamp
init|=
name|getTimestamp
argument_list|(
name|calendar
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Time
argument_list|(
name|DateTimeUtils
operator|.
name|floorMod
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|long
name|v
init|=
name|getLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|timestampAsString
argument_list|(
name|v
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|()
block|{
name|Timestamp
name|timestamp
init|=
name|getTimestamp
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|timestamp
operator|==
literal|null
condition|?
literal|0
else|:
name|timestamp
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a TIMESTAMP,    * represented as a java.util.Date;    * corresponds to {@link java.sql.Types#TIMESTAMP}.    */
specifier|private
specifier|static
class|class
name|TimestampFromUtilDateAccessor
extends|extends
name|ObjectAccessor
block|{
specifier|private
specifier|final
name|Calendar
name|localCalendar
decl_stmt|;
specifier|public
name|TimestampFromUtilDateAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|Calendar
name|localCalendar
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
name|this
operator|.
name|localCalendar
operator|=
name|localCalendar
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
name|java
operator|.
name|util
operator|.
name|Date
name|date
init|=
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|v
init|=
name|date
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|v
operator|-=
name|calendar
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Timestamp
argument_list|(
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getDate
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Timestamp
name|timestamp
init|=
name|getTimestamp
argument_list|(
name|calendar
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Date
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Time
name|getTime
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
specifier|final
name|Timestamp
name|timestamp
init|=
name|getTimestamp
argument_list|(
name|calendar
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Time
argument_list|(
name|DateTimeUtils
operator|.
name|floorMod
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Date
name|date
init|=
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|timestampAsString
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|()
block|{
name|Timestamp
name|timestamp
init|=
name|getTimestamp
argument_list|(
name|localCalendar
argument_list|)
decl_stmt|;
return|return
name|timestamp
operator|==
literal|null
condition|?
literal|0
else|:
name|timestamp
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@code int};    * corresponds to {@link java.sql.Types#OTHER}.    */
specifier|private
specifier|static
class|class
name|IntervalYearMonthAccessor
extends|extends
name|IntAccessor
block|{
specifier|private
specifier|final
name|TimeUnitRange
name|range
decl_stmt|;
specifier|public
name|IntervalYearMonthAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|TimeUnitRange
name|range
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
name|this
operator|.
name|range
operator|=
name|range
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|int
name|v
init|=
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|DateTimeUtils
operator|.
name|intervalYearMonthToString
argument_list|(
name|v
argument_list|,
name|range
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a {@code long};    * corresponds to {@link java.sql.Types#OTHER}.    */
specifier|private
specifier|static
class|class
name|IntervalDayTimeAccessor
extends|extends
name|LongAccessor
block|{
specifier|private
specifier|final
name|TimeUnitRange
name|range
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
specifier|public
name|IntervalDayTimeAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|TimeUnitRange
name|range
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
name|this
operator|.
name|range
operator|=
name|range
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|long
name|v
init|=
name|getLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
operator|&&
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|DateTimeUtils
operator|.
name|intervalDayTimeToString
argument_list|(
name|v
argument_list|,
name|range
argument_list|,
name|scale
argument_list|)
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is an ARRAY;    * corresponds to {@link java.sql.Types#ARRAY}.    */
specifier|static
class|class
name|ArrayAccessor
extends|extends
name|AccessorImpl
block|{
specifier|final
name|ColumnMetaData
operator|.
name|AvaticaType
name|componentType
decl_stmt|;
specifier|final
name|Accessor
name|componentAccessor
decl_stmt|;
specifier|final
name|SlotGetter
name|componentSlotGetter
decl_stmt|;
specifier|final
name|ArrayImpl
operator|.
name|Factory
name|factory
decl_stmt|;
specifier|public
name|ArrayAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|ColumnMetaData
operator|.
name|AvaticaType
name|componentType
parameter_list|,
name|Accessor
name|componentAccessor
parameter_list|,
name|SlotGetter
name|componentSlotGetter
parameter_list|,
name|ArrayImpl
operator|.
name|Factory
name|factory
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
name|this
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
name|this
operator|.
name|componentAccessor
operator|=
name|componentAccessor
expr_stmt|;
name|this
operator|.
name|componentSlotGetter
operator|=
name|componentSlotGetter
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
specifier|final
name|Object
name|object
init|=
name|super
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
operator|||
name|object
operator|instanceof
name|List
condition|)
block|{
return|return
name|object
return|;
block|}
comment|// The object can be java array in case of user-provided class for row
comment|// storage.
return|return
name|AvaticaUtils
operator|.
name|primitiveList
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Array
name|getArray
parameter_list|()
block|{
specifier|final
name|List
name|list
init|=
operator|(
name|List
operator|)
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ArrayImpl
argument_list|(
name|list
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
specifier|final
name|Array
name|array
init|=
name|getArray
argument_list|()
decl_stmt|;
return|return
name|array
operator|==
literal|null
condition|?
literal|null
else|:
name|array
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is a STRUCT;    * corresponds to {@link java.sql.Types#STRUCT}.    */
specifier|private
specifier|static
class|class
name|StructAccessor
extends|extends
name|AccessorImpl
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Accessor
argument_list|>
name|fieldAccessors
decl_stmt|;
specifier|public
name|StructAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|List
argument_list|<
name|Accessor
argument_list|>
name|fieldAccessors
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldAccessors
operator|=
name|fieldAccessors
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|getStruct
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Struct
name|getStruct
parameter_list|()
block|{
specifier|final
name|Object
name|o
init|=
name|super
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
return|return
operator|new
name|StructImpl
argument_list|(
operator|(
name|List
operator|)
name|o
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Accessor
name|fieldAccessor
range|:
name|fieldAccessors
control|)
block|{
try|try
block|{
name|list
operator|.
name|add
argument_list|(
name|fieldAccessor
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|StructImpl
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Accessor that assumes that the underlying value is an OBJECT;    * corresponds to {@link java.sql.Types#JAVA_OBJECT}.    */
specifier|private
specifier|static
class|class
name|ObjectAccessor
extends|extends
name|AccessorImpl
block|{
specifier|public
name|ObjectAccessor
parameter_list|(
name|Getter
name|getter
parameter_list|)
block|{
name|super
argument_list|(
name|getter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Gets a value from a particular field of the current record of this    * cursor. */
specifier|protected
interface|interface
name|Getter
block|{
name|Object
name|getObject
parameter_list|()
function_decl|;
name|boolean
name|wasNull
parameter_list|()
function_decl|;
block|}
comment|/** Abstract implementation of {@link Getter}. */
specifier|protected
specifier|abstract
class|class
name|AbstractGetter
implements|implements
name|Getter
block|{
specifier|public
name|boolean
name|wasNull
parameter_list|()
block|{
return|return
name|wasNull
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/** Implementation of {@link Getter} that returns the current contents of    * a mutable slot. */
specifier|public
class|class
name|SlotGetter
implements|implements
name|Getter
block|{
specifier|public
name|Object
name|slot
decl_stmt|;
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|slot
return|;
block|}
specifier|public
name|boolean
name|wasNull
parameter_list|()
block|{
return|return
name|slot
operator|==
literal|null
return|;
block|}
block|}
comment|/** Implementation of {@link Getter} that returns the value of a given field    * of the current contents of another getter. */
specifier|public
class|class
name|StructGetter
implements|implements
name|Getter
block|{
specifier|public
specifier|final
name|Getter
name|getter
decl_stmt|;
specifier|private
specifier|final
name|ColumnMetaData
name|columnMetaData
decl_stmt|;
specifier|public
name|StructGetter
parameter_list|(
name|Getter
name|getter
parameter_list|,
name|ColumnMetaData
name|columnMetaData
parameter_list|)
block|{
name|this
operator|.
name|getter
operator|=
name|getter
expr_stmt|;
name|this
operator|.
name|columnMetaData
operator|=
name|columnMetaData
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
specifier|final
name|Object
name|o
init|=
name|getter
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|Object
index|[]
name|objects
init|=
operator|(
name|Object
index|[]
operator|)
name|o
decl_stmt|;
return|return
name|objects
index|[
name|columnMetaData
operator|.
name|ordinal
index|]
return|;
block|}
try|try
block|{
specifier|final
name|Field
name|field
init|=
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
name|columnMetaData
operator|.
name|label
argument_list|)
decl_stmt|;
return|return
name|field
operator|.
name|get
argument_list|(
name|getter
operator|.
name|getObject
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|wasNull
parameter_list|()
block|{
return|return
name|getObject
argument_list|()
operator|==
literal|null
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End AbstractCursor.java
end_comment

end_unit

