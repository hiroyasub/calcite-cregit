begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ConnectionReuseStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|RequestExpectContinue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|DefaultConnectionReuseStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|pool
operator|.
name|BasicConnFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|pool
operator|.
name|BasicConnPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|pool
operator|.
name|BasicPoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpProcessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestConnControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestTargetHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * A common class to invoke HTTP requests against the Avatica server agnostic of the data being  * sent and received across the wire.  */
end_comment

begin_class
specifier|public
class|class
name|AvaticaCommonsHttpClientImpl
implements|implements
name|AvaticaHttpClient
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AvaticaCommonsHttpClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConnectionReuseStrategy
name|REUSE
init|=
name|DefaultConnectionReuseStrategy
operator|.
name|INSTANCE
decl_stmt|;
comment|// Some basic exposed configurations
specifier|private
specifier|static
specifier|final
name|String
name|MAX_POOLED_CONNECTION_PER_ROUTE_KEY
init|=
literal|"avatica.pooled.connections.per.route"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAX_POOLED_CONNECTION_PER_ROUTE_DEFAULT
init|=
literal|"4"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAX_POOLED_CONNECTIONS_KEY
init|=
literal|"avatica.pooled.connections.max"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAX_POOLED_CONNECTIONS_DEFAULT
init|=
literal|"16"
decl_stmt|;
specifier|protected
specifier|final
name|HttpHost
name|host
decl_stmt|;
specifier|protected
specifier|final
name|HttpProcessor
name|httpProcessor
decl_stmt|;
specifier|protected
specifier|final
name|HttpRequestExecutor
name|httpExecutor
decl_stmt|;
specifier|protected
specifier|final
name|BasicConnPool
name|httpPool
decl_stmt|;
specifier|public
name|AvaticaCommonsHttpClientImpl
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
operator|new
name|HttpHost
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|,
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpProcessor
operator|=
name|HttpProcessorBuilder
operator|.
name|create
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RequestContent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestTargetHost
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestConnControl
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestExpectContinue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpExecutor
operator|=
operator|new
name|HttpRequestExecutor
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpPool
operator|=
operator|new
name|BasicConnPool
argument_list|(
operator|new
name|BasicConnFactory
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxPerRoute
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|MAX_POOLED_CONNECTION_PER_ROUTE_KEY
argument_list|,
name|MAX_POOLED_CONNECTION_PER_ROUTE_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxTotal
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|MAX_POOLED_CONNECTIONS_KEY
argument_list|,
name|MAX_POOLED_CONNECTIONS_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|httpPool
operator|.
name|setDefaultMaxPerRoute
argument_list|(
name|maxPerRoute
argument_list|)
expr_stmt|;
name|httpPool
operator|.
name|setMaxTotal
argument_list|(
name|maxTotal
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|send
parameter_list|(
name|byte
index|[]
name|request
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|reusable
init|=
literal|false
decl_stmt|;
comment|// Get a connection from the pool
name|Future
argument_list|<
name|BasicPoolEntry
argument_list|>
name|future
init|=
name|this
operator|.
name|httpPool
operator|.
name|lease
argument_list|(
name|host
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|BasicPoolEntry
name|entry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entry
operator|=
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|HttpCoreContext
name|coreContext
init|=
name|HttpCoreContext
operator|.
name|create
argument_list|()
decl_stmt|;
name|coreContext
operator|.
name|setTargetHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|HttpClientConnection
name|conn
init|=
name|entry
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|ByteArrayEntity
name|entity
init|=
operator|new
name|ByteArrayEntity
argument_list|(
name|request
argument_list|,
name|ContentType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
decl_stmt|;
name|BasicHttpEntityEnclosingRequest
name|postRequest
init|=
operator|new
name|BasicHttpEntityEnclosingRequest
argument_list|(
literal|"POST"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|postRequest
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|httpExecutor
operator|.
name|preProcess
argument_list|(
name|postRequest
argument_list|,
name|httpProcessor
argument_list|,
name|coreContext
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
name|httpExecutor
operator|.
name|execute
argument_list|(
name|postRequest
argument_list|,
name|conn
argument_list|,
name|coreContext
argument_list|)
decl_stmt|;
name|httpExecutor
operator|.
name|postProcess
argument_list|(
name|response
argument_list|,
name|httpProcessor
argument_list|,
name|coreContext
argument_list|)
expr_stmt|;
comment|// Should the connection be kept alive?
name|reusable
operator|=
name|REUSE
operator|.
name|keepAlive
argument_list|(
name|response
argument_list|,
name|coreContext
argument_list|)
expr_stmt|;
specifier|final
name|int
name|statusCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_UNAVAILABLE
operator|==
name|statusCode
condition|)
block|{
comment|// Could be sitting behind a load-balancer, try again.
continue|continue;
block|}
return|return
name|EntityUtils
operator|.
name|toByteArray
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to execute HTTP request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// Release the connection back to the pool, marking if it's good to reuse or not.
name|httpPool
operator|.
name|release
argument_list|(
name|entry
argument_list|,
name|reusable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End AvaticaCommonsHttpClientImpl.java
end_comment

end_unit

