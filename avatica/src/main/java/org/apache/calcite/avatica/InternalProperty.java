begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionProperty
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Casing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Quoting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Definitions of properties that drive the behavior of  * {@link org.apache.calcite.avatica.AvaticaDatabaseMetaData}.  */
end_comment

begin_enum
specifier|public
enum|enum
name|InternalProperty
block|{
comment|/** Whether identifiers are matched case-sensitively. */
name|CASE_SENSITIVE
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|true
argument_list|)
block|,
comment|/** Character that quotes identifiers. */
name|SQL_KEYWORDS
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|null
argument_list|)
block|,
comment|/** How identifiers are quoted. */
name|QUOTING
argument_list|(
name|Quoting
operator|.
name|class
argument_list|,
name|Quoting
operator|.
name|DOUBLE_QUOTE
argument_list|)
block|,
comment|/** How identifiers are stored if they are quoted. */
name|QUOTED_CASING
argument_list|(
name|Casing
operator|.
name|class
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|)
block|,
comment|/** How identifiers are stored if they are not quoted. */
name|UNQUOTED_CASING
argument_list|(
name|Casing
operator|.
name|class
argument_list|,
name|Casing
operator|.
name|TO_UPPER
argument_list|)
block|,
comment|/** How identifiers are stored if they are not quoted. */
name|NULL_SORTING
argument_list|(
name|NullSorting
operator|.
name|class
argument_list|,
name|NullSorting
operator|.
name|END
argument_list|)
block|;
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
specifier|private
specifier|final
name|Class
name|enumClass
decl_stmt|;
specifier|private
specifier|final
name|Object
name|defaultValue
decl_stmt|;
comment|/** Creates an InternalProperty based on an enum. */
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|>
name|InternalProperty
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
parameter_list|,
name|E
name|defaultValue
parameter_list|)
block|{
name|this
argument_list|(
name|Type
operator|.
name|ENUM
argument_list|,
name|enumClass
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
comment|/** Creates an InternalProperty based on a non-enum type. */
name|InternalProperty
parameter_list|(
name|Type
name|type
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
literal|null
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|InternalProperty
parameter_list|(
name|Type
name|type
parameter_list|,
name|Class
name|enumClass
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|enumClass
operator|=
name|enumClass
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|get_
parameter_list|(
name|Map
argument_list|<
name|InternalProperty
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
specifier|final
name|Object
name|s
init|=
name|map
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|s
return|;
block|}
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|defaultValue
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Required property '"
operator|+
name|name
argument_list|()
operator|+
literal|"' not specified"
argument_list|)
throw|;
block|}
comment|/** Returns the string value of this property, or null if not specified and    * no default. */
specifier|public
name|String
name|getString
parameter_list|(
name|Map
argument_list|<
name|InternalProperty
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
assert|assert
name|type
operator|==
name|Type
operator|.
name|STRING
assert|;
return|return
name|get_
argument_list|(
name|map
argument_list|,
operator|(
name|String
operator|)
name|defaultValue
argument_list|)
return|;
block|}
comment|/** Returns the boolean value of this property. Throws if not set and no    * default. */
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|Map
argument_list|<
name|InternalProperty
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
assert|assert
name|type
operator|==
name|Type
operator|.
name|BOOLEAN
assert|;
return|return
name|get_
argument_list|(
name|map
argument_list|,
operator|(
name|Boolean
operator|)
name|defaultValue
argument_list|)
return|;
block|}
comment|/** Returns the enum value of this property. Throws if not set and no    * default. */
specifier|public
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|>
name|E
name|getEnum
parameter_list|(
name|Map
argument_list|<
name|InternalProperty
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
parameter_list|)
block|{
assert|assert
name|type
operator|==
name|Type
operator|.
name|ENUM
assert|;
comment|//noinspection unchecked
return|return
name|get_
argument_list|(
name|map
argument_list|,
operator|(
name|E
operator|)
name|defaultValue
argument_list|)
return|;
block|}
comment|/** Where nulls appear in a sorted relation. */
enum|enum
name|NullSorting
block|{
name|START
block|,
name|END
block|,
name|LOW
block|,
name|HIGH
block|,   }
block|}
end_enum

begin_comment
comment|// End InternalProperty.java
end_comment

end_unit

