begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|TypedValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ParameterMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link java.sql.PreparedStatement}  * for the Avatica engine.  *  *<p>This class has sub-classes which implement JDBC 3.0 and JDBC 4.0 APIs;  * it is instantiated using {@link AvaticaFactory#newPreparedStatement}.</p>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AvaticaPreparedStatement
extends|extends
name|AvaticaStatement
implements|implements
name|PreparedStatement
implements|,
name|ParameterMetaData
block|{
specifier|private
specifier|final
name|ResultSetMetaData
name|resultSetMetaData
decl_stmt|;
specifier|private
name|Calendar
name|calendar
decl_stmt|;
specifier|protected
specifier|final
name|TypedValue
index|[]
name|slots
decl_stmt|;
comment|/**    * Creates an AvaticaPreparedStatement.    *    * @param connection Connection    * @param h Statement handle    * @param signature Result of preparing statement    * @param resultSetType Result set type    * @param resultSetConcurrency Result set concurrency    * @param resultSetHoldability Result set holdability    * @throws SQLException If fails due to underlying implementation reasons.    */
specifier|protected
name|AvaticaPreparedStatement
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|,
name|Meta
operator|.
name|StatementHandle
name|h
parameter_list|,
name|Meta
operator|.
name|Signature
name|signature
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|h
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|this
operator|.
name|slots
operator|=
operator|new
name|TypedValue
index|[
name|signature
operator|.
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|resultSetMetaData
operator|=
name|connection
operator|.
name|factory
operator|.
name|newResultSetMetaData
argument_list|(
name|this
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|TypedValue
argument_list|>
name|getParameterValues
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|slots
argument_list|)
return|;
block|}
comment|/** Returns a calendar in the connection's time zone, creating one the first    * time this method is called.    *    *<p>Uses the calendar to offset date-time values when calling methods such    * as {@link #setDate(int, Date)}.    *    *<p>A note on thread-safety. This method does not strictly need to be    * {@code synchronized}, because JDBC does not promise thread safety if    * different threads are accessing the same statement, or even different    * objects within a particular connection.    *    *<p>The calendar returned is to be used only within this statement, and    * JDBC only allows access to a statement from within one thread, so    * therefore does not need to be synchronized when accessed.    */
specifier|protected
specifier|synchronized
name|Calendar
name|getCalendar
parameter_list|()
block|{
if|if
condition|(
name|calendar
operator|==
literal|null
condition|)
block|{
name|calendar
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|connection
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|calendar
return|;
block|}
comment|// implement PreparedStatement
specifier|public
name|ResultSet
name|executeQuery
parameter_list|()
throws|throws
name|SQLException
block|{
name|this
operator|.
name|updateCount
operator|=
operator|-
literal|1
expr_stmt|;
specifier|final
name|Signature
name|sig
init|=
name|getSignature
argument_list|()
decl_stmt|;
return|return
name|getConnection
argument_list|()
operator|.
name|executeQueryInternal
argument_list|(
name|this
argument_list|,
name|sig
argument_list|,
literal|null
argument_list|,
operator|new
name|QueryState
argument_list|(
name|sig
operator|.
name|sql
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ParameterMetaData
name|getParameterMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|int
name|executeUpdate
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
operator|(
name|int
operator|)
name|executeLargeUpdate
argument_list|()
return|;
block|}
specifier|public
name|long
name|executeLargeUpdate
parameter_list|()
throws|throws
name|SQLException
block|{
name|getConnection
argument_list|()
operator|.
name|executeQueryInternal
argument_list|(
name|this
argument_list|,
name|getSignature
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|QueryState
argument_list|(
name|getSignature
argument_list|()
operator|.
name|sql
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|updateCount
return|;
block|}
specifier|public
name|void
name|setNull
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|int
name|sqlType
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setNull
argument_list|(
name|sqlType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBoolean
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|boolean
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setBoolean
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setByte
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|byte
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setByte
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setShort
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|short
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setShort
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInt
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|int
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setInt
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLong
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|long
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setLong
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFloat
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|float
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setFloat
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDouble
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|double
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setDouble
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBigDecimal
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|BigDecimal
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setBigDecimal
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setString
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|String
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setString
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBytes
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|byte
index|[]
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setBytes
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAsciiStream
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|InputStream
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setAsciiStream
argument_list|(
name|x
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUnicodeStream
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|InputStream
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setUnicodeStream
argument_list|(
name|x
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBinaryStream
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|InputStream
name|x
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setBinaryStream
argument_list|(
name|x
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearParameters
parameter_list|()
throws|throws
name|SQLException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slots
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|slots
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Object
name|x
parameter_list|,
name|int
name|targetSqlType
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setObject
argument_list|(
name|x
argument_list|,
name|targetSqlType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Object
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setObject
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|execute
parameter_list|()
throws|throws
name|SQLException
block|{
name|this
operator|.
name|updateCount
operator|=
operator|-
literal|1
expr_stmt|;
name|getConnection
argument_list|()
operator|.
name|executeQueryInternal
argument_list|(
name|this
argument_list|,
name|getSignature
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|QueryState
argument_list|(
name|getSignature
argument_list|()
operator|.
name|sql
argument_list|)
argument_list|)
expr_stmt|;
comment|// Result set is null for DML or DDL.
comment|// Result set is closed if user cancelled the query.
return|return
name|openResultSet
operator|!=
literal|null
operator|&&
operator|!
name|openResultSet
operator|.
name|isClosed
argument_list|()
return|;
block|}
specifier|public
name|void
name|addBatch
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
name|connection
operator|.
name|helper
operator|.
name|unsupported
argument_list|()
throw|;
block|}
specifier|public
name|void
name|setCharacterStream
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Reader
name|reader
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setCharacterStream
argument_list|(
name|reader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRef
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Ref
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setRef
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBlob
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Blob
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setBlob
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClob
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Clob
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setClob
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setArray
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Array
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setArray
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResultSetMetaData
name|getMetaData
parameter_list|()
block|{
return|return
name|resultSetMetaData
return|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Date
name|x
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setDate
argument_list|(
name|x
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Date
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|setDate
argument_list|(
name|parameterIndex
argument_list|,
name|x
argument_list|,
name|getCalendar
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTime
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Time
name|x
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setTime
argument_list|(
name|x
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTime
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Time
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|setTime
argument_list|(
name|parameterIndex
argument_list|,
name|x
argument_list|,
name|getCalendar
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Timestamp
name|x
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|x
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Timestamp
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|setTimestamp
argument_list|(
name|parameterIndex
argument_list|,
name|x
argument_list|,
name|getCalendar
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNull
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|int
name|sqlType
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setNull
argument_list|(
name|sqlType
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setURL
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|URL
name|x
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setURL
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|int
name|parameterIndex
parameter_list|,
name|Object
name|x
parameter_list|,
name|int
name|targetSqlType
parameter_list|,
name|int
name|scaleOrLength
parameter_list|)
throws|throws
name|SQLException
block|{
name|getSite
argument_list|(
name|parameterIndex
argument_list|)
operator|.
name|setObject
argument_list|(
name|x
argument_list|,
name|targetSqlType
argument_list|,
name|scaleOrLength
argument_list|)
expr_stmt|;
block|}
comment|// implement ParameterMetaData
specifier|protected
name|AvaticaParameter
name|getParameter
parameter_list|(
name|int
name|param
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|getSignature
argument_list|()
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|param
operator|-
literal|1
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|//noinspection ThrowableResultOfMethodCallIgnored
throw|throw
name|connection
operator|.
name|helper
operator|.
name|toSQLException
argument_list|(
name|connection
operator|.
name|helper
operator|.
name|createException
argument_list|(
literal|"parameter ordinal "
operator|+
name|param
operator|+
literal|" out of range"
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|AvaticaSite
name|getSite
parameter_list|(
name|int
name|param
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|AvaticaParameter
name|parameter
init|=
name|getParameter
argument_list|(
name|param
argument_list|)
decl_stmt|;
return|return
operator|new
name|AvaticaSite
argument_list|(
name|parameter
argument_list|,
name|getCalendar
argument_list|()
argument_list|,
name|param
operator|-
literal|1
argument_list|,
name|slots
argument_list|)
return|;
block|}
specifier|public
name|int
name|getParameterCount
parameter_list|()
block|{
return|return
name|getSignature
argument_list|()
operator|.
name|parameters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|isNullable
parameter_list|(
name|int
name|param
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|ParameterMetaData
operator|.
name|parameterNullableUnknown
return|;
block|}
specifier|public
name|boolean
name|isSigned
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getParameter
argument_list|(
name|index
argument_list|)
operator|.
name|signed
return|;
block|}
specifier|public
name|int
name|getPrecision
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getParameter
argument_list|(
name|index
argument_list|)
operator|.
name|precision
return|;
block|}
specifier|public
name|int
name|getScale
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getParameter
argument_list|(
name|index
argument_list|)
operator|.
name|scale
return|;
block|}
specifier|public
name|int
name|getParameterType
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getParameter
argument_list|(
name|index
argument_list|)
operator|.
name|parameterType
return|;
block|}
specifier|public
name|String
name|getParameterTypeName
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getParameter
argument_list|(
name|index
argument_list|)
operator|.
name|typeName
return|;
block|}
specifier|public
name|String
name|getParameterClassName
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|getParameter
argument_list|(
name|index
argument_list|)
operator|.
name|className
return|;
block|}
specifier|public
name|int
name|getParameterMode
parameter_list|(
name|int
name|param
parameter_list|)
throws|throws
name|SQLException
block|{
comment|//noinspection UnusedDeclaration
name|AvaticaParameter
name|paramDef
init|=
name|getParameter
argument_list|(
name|param
argument_list|)
decl_stmt|;
comment|// forces param range check
return|return
name|ParameterMetaData
operator|.
name|parameterModeIn
return|;
block|}
block|}
end_class

begin_comment
comment|// End AvaticaPreparedStatement.java
end_comment

end_unit

