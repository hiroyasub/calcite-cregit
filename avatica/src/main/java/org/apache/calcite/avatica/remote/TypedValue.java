begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Value and type. */
end_comment

begin_class
specifier|public
class|class
name|TypedValue
block|{
comment|/** Type of the value. */
specifier|public
specifier|final
name|ColumnMetaData
operator|.
name|Rep
name|type
decl_stmt|;
comment|/** Value.    *    *<p>Always in a form that can be serialized to JSON by Jackson.    * For example, byte arrays are represented as String. */
specifier|public
specifier|final
name|Object
name|value
decl_stmt|;
specifier|private
name|TypedValue
parameter_list|(
name|ColumnMetaData
operator|.
name|Rep
name|rep
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|rep
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|serialize
argument_list|(
name|rep
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|JsonCreator
specifier|public
specifier|static
name|TypedValue
name|create
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"type"
argument_list|)
name|String
name|type
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"value"
argument_list|)
name|Object
name|value
parameter_list|)
block|{
name|ColumnMetaData
operator|.
name|Rep
name|rep
init|=
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
operator|new
name|TypedValue
argument_list|(
name|rep
argument_list|,
name|deserialize
argument_list|(
name|rep
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/** Converts the value into the preferred representation.    *    *<p>For example, a byte string is represented as a {@link ByteString};    * a long is represented as a {@link Long} (not just some {@link Number}).    */
specifier|public
name|Object
name|deserialize
parameter_list|()
block|{
return|return
name|deserialize
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/** Converts a value to the exact type required for the given    * representation. */
specifier|private
specifier|static
name|Object
name|deserialize
parameter_list|(
name|ColumnMetaData
operator|.
name|Rep
name|rep
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|==
name|rep
operator|.
name|clazz
condition|)
block|{
return|return
name|value
return|;
block|}
switch|switch
condition|(
name|rep
condition|)
block|{
case|case
name|BYTE
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|byteValue
argument_list|()
return|;
case|case
name|SHORT
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|shortValue
argument_list|()
return|;
case|case
name|INTEGER
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
case|case
name|FLOAT
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
case|case
name|BYTE_STRING
case|:
return|return
name|ByteString
operator|.
name|ofBase64
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot convert "
operator|+
name|value
operator|+
literal|" ("
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|") to "
operator|+
name|rep
argument_list|)
throw|;
block|}
block|}
comment|/** Converts a value to a type that can be serialized as JSON. */
specifier|private
specifier|static
name|Object
name|serialize
parameter_list|(
name|ColumnMetaData
operator|.
name|Rep
name|rep
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|rep
condition|)
block|{
case|case
name|BYTE_STRING
case|:
return|return
operator|(
operator|(
name|ByteString
operator|)
name|value
operator|)
operator|.
name|toBase64String
argument_list|()
return|;
default|default:
return|return
name|value
return|;
block|}
block|}
comment|/** Converts a list of {@code TypedValue} to a list of values. */
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|(
name|List
argument_list|<
name|TypedValue
argument_list|>
name|typedValues
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TypedValue
name|typedValue
range|:
name|typedValues
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|typedValue
operator|.
name|deserialize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/** Converts a list of values to a list of {@code TypedValue}. */
specifier|public
specifier|static
name|List
argument_list|<
name|TypedValue
argument_list|>
name|list
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|TypedValue
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|create
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|TypedValue
name|create
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TypedValue
argument_list|(
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|OBJECT
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|final
name|ColumnMetaData
operator|.
name|Rep
name|rep
init|=
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|of
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TypedValue
argument_list|(
name|rep
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End TypedValue.java
end_comment

end_unit

