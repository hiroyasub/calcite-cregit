begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|MetaImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A mock implementation of ProtobufService for testing.  *  *<p>It performs no serialization of requests and responses.  */
end_comment

begin_class
specifier|public
class|class
name|MockProtobufService
extends|extends
name|ProtobufService
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
name|MAPPING
decl_stmt|;
static|static
block|{
name|HashMap
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
name|mappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add in mappings
name|mappings
operator|.
name|put
argument_list|(
operator|new
name|OpenConnectionRequest
argument_list|(
literal|"0"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|OpenConnectionResponse
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the schema, no.. schema..?
name|mappings
operator|.
name|put
argument_list|(
operator|new
name|SchemasRequest
argument_list|(
literal|"0"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|ResultSetResponse
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|Meta
operator|.
name|Frame
operator|.
name|EMPTY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the tables, no tables exist
name|mappings
operator|.
name|put
argument_list|(
operator|new
name|TablesRequest
argument_list|(
literal|"0"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ResultSetResponse
argument_list|(
literal|null
argument_list|,
literal|150
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|Meta
operator|.
name|Frame
operator|.
name|EMPTY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a statement, get back an id
name|mappings
operator|.
name|put
argument_list|(
operator|new
name|CreateStatementRequest
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|new
name|CreateStatementResponse
argument_list|(
literal|"0"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Prepare and execute a query. Values and schema are returned
name|mappings
operator|.
name|put
argument_list|(
operator|new
name|PrepareAndExecuteRequest
argument_list|(
literal|"0"
argument_list|,
literal|1
argument_list|,
literal|"select * from (\\n values (1, 'a'), (null, 'b'), (3, 'c')) as t (c1, c2)"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
operator|new
name|ResultSetResponse
argument_list|(
literal|"0"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Meta
operator|.
name|Signature
operator|.
name|create
argument_list|(
name|Arrays
operator|.
expr|<
name|ColumnMetaData
operator|>
name|asList
argument_list|(
name|MetaImpl
operator|.
name|columnMetaData
argument_list|(
literal|"C1"
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|MetaImpl
operator|.
name|columnMetaData
argument_list|(
literal|"C2"
argument_list|,
literal|1
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Meta
operator|.
name|CursorFactory
operator|.
name|ARRAY
argument_list|,
name|Meta
operator|.
name|StatementType
operator|.
name|SELECT
argument_list|)
argument_list|,
name|Meta
operator|.
name|Frame
operator|.
name|create
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|Arrays
operator|.
expr|<
name|Object
operator|>
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|"c"
block|}
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Prepare a query. Schema for results are returned, but no values
name|mappings
operator|.
name|put
argument_list|(
operator|new
name|PrepareRequest
argument_list|(
literal|"0"
argument_list|,
literal|"select * from (\\n values(1, 'a'), (null, 'b'), (3, 'c')), as t (c1, c2)"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
operator|new
name|ResultSetResponse
argument_list|(
literal|"0"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Meta
operator|.
name|Signature
operator|.
name|create
argument_list|(
name|Arrays
operator|.
expr|<
name|ColumnMetaData
operator|>
name|asList
argument_list|(
name|MetaImpl
operator|.
name|columnMetaData
argument_list|(
literal|"C1"
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|MetaImpl
operator|.
name|columnMetaData
argument_list|(
literal|"C2"
argument_list|,
literal|1
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|AvaticaParameter
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Meta
operator|.
name|CursorFactory
operator|.
name|ARRAY
argument_list|,
name|Meta
operator|.
name|StatementType
operator|.
name|SELECT
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
operator|new
name|ColumnsRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"my_table"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|ResultSetResponse
argument_list|(
literal|"00000000-0000-0000-0000-000000000000"
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
name|Meta
operator|.
name|Signature
operator|.
name|create
argument_list|(
name|Arrays
operator|.
expr|<
name|ColumnMetaData
operator|>
name|asList
argument_list|(
name|MetaImpl
operator|.
name|columnMetaData
argument_list|(
literal|"TABLE_NAME"
argument_list|,
literal|0
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|MetaImpl
operator|.
name|columnMetaData
argument_list|(
literal|"ORDINAL_POSITION"
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|AvaticaParameter
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Meta
operator|.
name|CursorFactory
operator|.
name|ARRAY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Meta
operator|.
name|Frame
operator|.
name|create
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|Arrays
operator|.
expr|<
name|Object
operator|>
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
index|[]
block|{
literal|"my_table"
block|,
literal|10
block|}
block|}
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPING
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|_apply
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|CloseConnectionRequest
condition|)
block|{
return|return
operator|new
name|CloseConnectionResponse
argument_list|()
return|;
block|}
return|return
name|dispatch
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Fetches the static response for the given request.    *    * @param request the client's request    * @return the appropriate response    * @throws RuntimeException if no mapping is found for the request    */
specifier|private
name|Response
name|dispatch
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
comment|// Canonicalize connectionId's to 0
if|if
condition|(
name|request
operator|instanceof
name|OpenConnectionRequest
condition|)
block|{
name|OpenConnectionRequest
name|req
init|=
operator|(
name|OpenConnectionRequest
operator|)
name|request
decl_stmt|;
name|request
operator|=
operator|new
name|OpenConnectionRequest
argument_list|(
literal|"0"
argument_list|,
name|req
operator|.
name|info
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|instanceof
name|TablesRequest
condition|)
block|{
name|TablesRequest
name|req
init|=
operator|(
name|TablesRequest
operator|)
name|request
decl_stmt|;
name|request
operator|=
operator|new
name|TablesRequest
argument_list|(
literal|"0"
argument_list|,
name|req
operator|.
name|catalog
argument_list|,
name|req
operator|.
name|schemaPattern
argument_list|,
name|req
operator|.
name|tableNamePattern
argument_list|,
name|req
operator|.
name|typeList
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|instanceof
name|SchemasRequest
condition|)
block|{
name|SchemasRequest
name|req
init|=
operator|(
name|SchemasRequest
operator|)
name|request
decl_stmt|;
name|request
operator|=
operator|new
name|SchemasRequest
argument_list|(
literal|"0"
argument_list|,
name|req
operator|.
name|catalog
argument_list|,
name|req
operator|.
name|schemaPattern
argument_list|)
expr_stmt|;
block|}
name|Response
name|response
init|=
name|MAPPING
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|response
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Had no response mapping for "
operator|+
name|request
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
comment|/**    * A factory that instantiates the mock protobuf service.    */
specifier|public
specifier|static
class|class
name|MockProtobufServiceFactory
implements|implements
name|Service
operator|.
name|Factory
block|{
annotation|@
name|Override
specifier|public
name|Service
name|create
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
return|return
operator|new
name|MockProtobufService
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MockProtobufService.java
end_comment

end_unit

