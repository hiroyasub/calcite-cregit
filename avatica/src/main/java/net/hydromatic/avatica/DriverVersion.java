begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Driver version information.  *  *<p>Each driver implementation must provide an instance of this class, in  * order to implement {@link UnregisteredDriver#createDriverVersion()}.</p>  *  *<p>There are two typical ways for a driver to instantiate its version  * information:</p>  *  *<ul>  *  *<li>A driver might create a subclass in a with a constructor that provides  * all of the arguments for the base class. The instance is held in a separate  * file, so that that version information can be generated.</li>  *  *<li>A driver might store the version information in a .properties file and  * load it using {@link #load}.</li>  *  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|DriverVersion
block|{
specifier|public
specifier|final
name|int
name|majorVersion
decl_stmt|;
specifier|public
specifier|final
name|int
name|minorVersion
decl_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|String
name|versionString
decl_stmt|;
specifier|public
specifier|final
name|String
name|productName
decl_stmt|;
specifier|public
specifier|final
name|String
name|productVersion
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|jdbcCompliant
decl_stmt|;
specifier|public
specifier|final
name|int
name|databaseMajorVersion
decl_stmt|;
specifier|public
specifier|final
name|int
name|databaseMinorVersion
decl_stmt|;
comment|/** Creates a DriverVersion. */
specifier|public
name|DriverVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|versionString
parameter_list|,
name|String
name|productName
parameter_list|,
name|String
name|productVersion
parameter_list|,
name|boolean
name|jdbcCompliant
parameter_list|,
name|int
name|majorVersion
parameter_list|,
name|int
name|minorVersion
parameter_list|,
name|int
name|databaseMajorVersion
parameter_list|,
name|int
name|databaseMinorVersion
parameter_list|)
block|{
name|this
operator|.
name|majorVersion
operator|=
name|majorVersion
expr_stmt|;
name|this
operator|.
name|minorVersion
operator|=
name|minorVersion
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|versionString
operator|=
name|versionString
expr_stmt|;
name|this
operator|.
name|productName
operator|=
name|productName
expr_stmt|;
name|this
operator|.
name|productVersion
operator|=
name|productVersion
expr_stmt|;
name|this
operator|.
name|jdbcCompliant
operator|=
name|jdbcCompliant
expr_stmt|;
name|this
operator|.
name|databaseMajorVersion
operator|=
name|databaseMajorVersion
expr_stmt|;
name|this
operator|.
name|databaseMinorVersion
operator|=
name|databaseMinorVersion
expr_stmt|;
block|}
comment|/** Loads a driver version from a properties file, read from the classpath.    * The arguments provide defaults if the properties cannot be loaded.    *    * @param driverClass Class of driver; used to find resource    * @param resourceName Name of resource file    * @param driverName Fallback name of driver    * @param driverVersion Fallback version of driver    * @param productName Fallback product name    * @param productVersion Fallback product version    * @return A populated driver version object, never null    */
specifier|public
specifier|static
name|DriverVersion
name|load
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|UnregisteredDriver
argument_list|>
name|driverClass
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|String
name|driverName
parameter_list|,
name|String
name|driverVersion
parameter_list|,
name|String
name|productName
parameter_list|,
name|String
name|productVersion
parameter_list|)
block|{
name|boolean
name|jdbcCompliant
init|=
literal|true
decl_stmt|;
name|int
name|majorVersion
init|=
literal|0
decl_stmt|;
name|int
name|minorVersion
init|=
literal|0
decl_stmt|;
name|int
name|databaseMajorVersion
init|=
literal|0
decl_stmt|;
name|int
name|databaseMinorVersion
init|=
literal|0
decl_stmt|;
try|try
block|{
specifier|final
name|InputStream
name|inStream
init|=
name|driverClass
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|inStream
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
name|driverName
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"driver.name"
argument_list|)
expr_stmt|;
name|driverVersion
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"driver.version"
argument_list|)
expr_stmt|;
name|productName
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"product.name"
argument_list|)
expr_stmt|;
name|productVersion
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"product.version"
argument_list|)
expr_stmt|;
name|jdbcCompliant
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"jdbc.compliant"
argument_list|)
argument_list|)
expr_stmt|;
name|majorVersion
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"driver.version.major"
argument_list|)
argument_list|)
expr_stmt|;
name|minorVersion
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"driver.version.minor"
argument_list|)
argument_list|)
expr_stmt|;
name|databaseMajorVersion
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"database.version.major"
argument_list|)
argument_list|)
expr_stmt|;
name|databaseMinorVersion
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"database.version.minor"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|DriverVersion
argument_list|(
name|driverName
argument_list|,
name|driverVersion
argument_list|,
name|productName
argument_list|,
name|productVersion
argument_list|,
name|jdbcCompliant
argument_list|,
name|majorVersion
argument_list|,
name|minorVersion
argument_list|,
name|databaseMajorVersion
argument_list|,
name|databaseMinorVersion
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End DriverVersion.java
end_comment

end_unit

