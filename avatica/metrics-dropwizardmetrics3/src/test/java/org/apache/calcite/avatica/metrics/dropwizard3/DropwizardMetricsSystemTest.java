begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|dropwizard3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|metrics
operator|.
name|Timer
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for {@link DropwizardMetricsSystem}.  */
end_comment

begin_class
specifier|public
class|class
name|DropwizardMetricsSystemTest
block|{
specifier|private
name|MetricRegistry
name|mockRegistry
decl_stmt|;
specifier|private
name|DropwizardMetricsSystem
name|metrics
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|mockRegistry
operator|=
name|mock
argument_list|(
name|MetricRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
name|metrics
operator|=
operator|new
name|DropwizardMetricsSystem
argument_list|(
name|mockRegistry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGauge
parameter_list|()
block|{
specifier|final
name|long
name|gaugeValue
init|=
literal|42L
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"gauge"
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
name|name
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|gaugeValue
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRegistry
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|register
argument_list|(
name|eq
argument_list|(
name|name
argument_list|)
argument_list|,
name|any
argument_list|(
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMeter
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
literal|"meter"
decl_stmt|;
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
name|mockMeter
init|=
name|mock
argument_list|(
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|meter
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockMeter
argument_list|)
expr_stmt|;
name|Meter
name|meter
init|=
name|metrics
operator|.
name|getMeter
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|long
name|count
init|=
literal|5
decl_stmt|;
name|meter
operator|.
name|mark
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMeter
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|mark
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|meter
operator|.
name|mark
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockMeter
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHistogram
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
literal|"histogram"
decl_stmt|;
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
name|mockHistogram
init|=
name|mock
argument_list|(
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|histogram
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockHistogram
argument_list|)
expr_stmt|;
name|Histogram
name|histogram
init|=
name|metrics
operator|.
name|getHistogram
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|long
index|[]
name|long_values
init|=
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|5L
block|,
literal|15L
block|,
literal|30L
block|,
literal|60L
block|}
decl_stmt|;
for|for
control|(
name|long
name|value
range|:
name|long_values
control|)
block|{
name|histogram
operator|.
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|value
range|:
name|long_values
control|)
block|{
name|verify
argument_list|(
name|mockHistogram
argument_list|)
operator|.
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|int_values
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|6
block|,
literal|16
block|,
literal|31
block|,
literal|61
block|}
decl_stmt|;
for|for
control|(
name|int
name|value
range|:
name|int_values
control|)
block|{
name|histogram
operator|.
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|value
range|:
name|int_values
control|)
block|{
name|verify
argument_list|(
name|mockHistogram
argument_list|)
operator|.
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCounter
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
literal|"counter"
decl_stmt|;
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
name|mockCounter
init|=
name|mock
argument_list|(
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|counter
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCounter
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|metrics
operator|.
name|getCounter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|long
index|[]
name|updates
init|=
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|5L
block|,
operator|-
literal|2L
block|,
literal|4L
block|,
operator|-
literal|8L
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|long
name|update
range|:
name|updates
control|)
block|{
if|if
condition|(
name|update
operator|<
literal|0
condition|)
block|{
name|counter
operator|.
name|decrement
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|counter
operator|.
name|increment
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|long
name|update
range|:
name|updates
control|)
block|{
if|if
condition|(
name|update
operator|<
literal|0
condition|)
block|{
name|verify
argument_list|(
name|mockCounter
argument_list|)
operator|.
name|dec
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verify
argument_list|(
name|mockCounter
argument_list|)
operator|.
name|inc
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numSingleUpdates
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSingleUpdates
condition|;
name|i
operator|++
control|)
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
name|counter
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
name|verify
argument_list|(
name|mockCounter
argument_list|,
name|times
argument_list|(
name|numSingleUpdates
argument_list|)
argument_list|)
operator|.
name|inc
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockCounter
argument_list|,
name|times
argument_list|(
name|numSingleUpdates
argument_list|)
argument_list|)
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimer
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
literal|"timer"
decl_stmt|;
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
name|mockTimer
init|=
name|mock
argument_list|(
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
operator|.
name|Context
name|mockContext
init|=
name|mock
argument_list|(
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
operator|.
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|timer
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTimer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockTimer
operator|.
name|time
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|Timer
name|timer
init|=
name|metrics
operator|.
name|getTimer
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Context
name|context
init|=
name|timer
operator|.
name|start
argument_list|()
decl_stmt|;
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockTimer
argument_list|)
operator|.
name|time
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockContext
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End DropwizardMetricsSystemTest.java
end_comment

end_unit

