begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|chinook
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_comment
comment|/**  * Tests against parameters in prepared statement when using underlying jdbc subschema  */
end_comment

begin_class
specifier|public
class|class
name|RemotePreparedStatementParametersTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSimpleStringParameterShouldWorkWithCalcite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given
name|ChinookAvaticaServer
name|server
init|=
operator|new
name|ChinookAvaticaServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|startWithCalcite
argument_list|()
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|server
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
comment|// when
name|PreparedStatement
name|pS
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"select * from chinook.artist where name = ?"
argument_list|)
decl_stmt|;
name|pS
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"AC/DC"
argument_list|)
expr_stmt|;
comment|// then
name|ResultSet
name|resultSet
init|=
name|pS
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSeveralParametersShouldWorkWithCalcite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given
name|ChinookAvaticaServer
name|server
init|=
operator|new
name|ChinookAvaticaServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|startWithCalcite
argument_list|()
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|server
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
comment|// when
name|PreparedStatement
name|pS
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"select * from chinook.track where name = ? or milliseconds> ?"
argument_list|)
decl_stmt|;
name|pS
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"AC/DC"
argument_list|)
expr_stmt|;
name|pS
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// then
name|ResultSet
name|resultSet
init|=
name|pS
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParametersShouldWorkWithRaw
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given
name|ChinookAvaticaServer
name|server
init|=
operator|new
name|ChinookAvaticaServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|startWithRaw
argument_list|()
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|server
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
comment|// when
name|PreparedStatement
name|pS
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"select * from artist where name = ?"
argument_list|)
decl_stmt|;
name|pS
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"AC/DC"
argument_list|)
expr_stmt|;
comment|// then
name|ResultSet
name|resultSet
init|=
name|pS
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End RemotePreparedStatementParametersTest.java
end_comment

end_unit

