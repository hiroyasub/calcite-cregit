begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|chinook
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
operator|.
name|JdbcMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|AvaticaProtobufHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|chinook
operator|.
name|data
operator|.
name|hsqldb
operator|.
name|ChinookHsqldb
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Wrapping Calcite engine with Avatica tansport for testing JDBC capabilities  * between Avatica JDBC transport and Calcite.  */
end_comment

begin_class
specifier|public
class|class
name|ChinookAvaticaServer
block|{
specifier|private
name|HttpServer
name|server
decl_stmt|;
specifier|public
name|void
name|startWithCalcite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|args
init|=
block|{
name|CalciteChinookMetaFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|Main
operator|.
name|start
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|AvaticaProtobufHandler
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startWithRaw
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|args
init|=
block|{
name|RawChinookMetaFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|Main
operator|.
name|start
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|AvaticaProtobufHandler
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getURL
parameter_list|()
block|{
return|return
literal|"jdbc:avatica:remote:url=http://localhost:"
operator|+
name|server
operator|.
name|getPort
argument_list|()
operator|+
literal|";serialization="
operator|+
name|Driver
operator|.
name|Serialization
operator|.
name|PROTOBUF
operator|.
name|name
argument_list|()
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Factory for Chinook Calcite database wrapped in meta for Avatica.    */
specifier|public
specifier|static
class|class
name|CalciteChinookMetaFactory
implements|implements
name|Meta
operator|.
name|Factory
block|{
specifier|private
specifier|static
specifier|final
name|CalciteConnectionProvider
name|CONNECTION_PROVIDER
init|=
operator|new
name|CalciteConnectionProvider
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|JdbcMeta
name|instance
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|JdbcMeta
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|instance
operator|=
operator|new
name|JdbcMeta
argument_list|(
name|CalciteConnectionProvider
operator|.
name|DRIVER_URL
argument_list|,
name|CONNECTION_PROVIDER
operator|.
name|provideConnectionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meta
name|create
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
return|return
name|getInstance
argument_list|()
return|;
block|}
block|}
comment|/**    * Factory for Chinook Calcite database wrapped in meta for Avatica.    */
specifier|public
specifier|static
class|class
name|RawChinookMetaFactory
implements|implements
name|Meta
operator|.
name|Factory
block|{
specifier|private
specifier|static
name|JdbcMeta
name|instance
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|JdbcMeta
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|instance
operator|=
operator|new
name|JdbcMeta
argument_list|(
name|ChinookHsqldb
operator|.
name|URI
argument_list|,
name|ChinookHsqldb
operator|.
name|USER
argument_list|,
name|ChinookHsqldb
operator|.
name|PASSWORD
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meta
name|create
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
return|return
name|getInstance
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

