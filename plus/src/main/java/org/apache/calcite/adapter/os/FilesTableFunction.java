begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|os
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Table function that executes the OS "find" command to find files under a  * particular path.  */
end_comment

begin_class
specifier|public
class|class
name|FilesTableFunction
block|{
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|THOUSAND
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000L
argument_list|)
decl_stmt|;
specifier|private
name|FilesTableFunction
parameter_list|()
block|{
block|}
comment|/** Evaluates the function.    *    * @param path Directory in which to start the search. Typically '.'    * @return Table that can be inspected, planned, and evaluated    */
specifier|public
specifier|static
name|ScannableTable
name|eval
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|ScannableTable
argument_list|()
block|{
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"access_time"
argument_list|,
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
comment|// %A@ sec since epoch
operator|.
name|add
argument_list|(
literal|"block_count"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// %b in 512B blocks
operator|.
name|add
argument_list|(
literal|"change_time"
argument_list|,
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
comment|// %C@ sec since epoch
operator|.
name|add
argument_list|(
literal|"depth"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// %d depth in directory tree
operator|.
name|add
argument_list|(
literal|"device"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// %D device number
operator|.
name|add
argument_list|(
literal|"file_name"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
comment|// %f file name, sans dirs
operator|.
name|add
argument_list|(
literal|"fstype"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
comment|// %F file system type
operator|.
name|add
argument_list|(
literal|"gname"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
comment|// %g group name
operator|.
name|add
argument_list|(
literal|"gid"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// %G numeric group id
operator|.
name|add
argument_list|(
literal|"dir_name"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
comment|// %h leading dirs
operator|.
name|add
argument_list|(
literal|"inode"
argument_list|,
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
comment|// %i inode number
operator|.
name|add
argument_list|(
literal|"link"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
comment|// %l object of sym link
operator|.
name|add
argument_list|(
literal|"perm"
argument_list|,
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
literal|4
argument_list|)
comment|// %#m permission octal
operator|.
name|add
argument_list|(
literal|"hard"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// %n number of hard links
operator|.
name|add
argument_list|(
literal|"path"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
comment|// %P file's name
operator|.
name|add
argument_list|(
literal|"size"
argument_list|,
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
comment|// %s file's size in bytes
operator|.
name|add
argument_list|(
literal|"sparseness"
argument_list|,
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
comment|// %S sparseness
operator|.
name|add
argument_list|(
literal|"mod_time"
argument_list|,
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
comment|// %T@ seconds since epoch
operator|.
name|add
argument_list|(
literal|"user"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
comment|// %u user name
operator|.
name|add
argument_list|(
literal|"uid"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// %U numeric user id
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
literal|1
argument_list|)
comment|// %Y file type
operator|.
name|build
argument_list|()
return|;
comment|// Fields in Linux find that are currently ignored:
comment|// %y file type (not following sym links)
comment|// %k block count in 1KB blocks
comment|// %p file name (including argument)
block|}
specifier|private
name|Enumerable
argument_list|<
name|String
argument_list|>
name|sourceLinux
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"find"
block|,
name|path
block|,
literal|"-printf"
block|,
literal|""
operator|+
literal|"%A@\\0"
comment|// access_time
operator|+
literal|"%b\\0"
comment|// block_count
operator|+
literal|"%C@\\0"
comment|// change_time
operator|+
literal|"%d\\0"
comment|// depth
operator|+
literal|"%D\\0"
comment|// device
operator|+
literal|"%f\\0"
comment|// file_name
operator|+
literal|"%F\\0"
comment|// fstype
operator|+
literal|"%g\\0"
comment|// gname
operator|+
literal|"%G\\0"
comment|// gid
operator|+
literal|"%h\\0"
comment|// dir_name
operator|+
literal|"%i\\0"
comment|// inode
operator|+
literal|"%l\\0"
comment|// link
operator|+
literal|"%#m\\0"
comment|// perm
operator|+
literal|"%n\\0"
comment|// hard
operator|+
literal|"%P\\0"
comment|// path
operator|+
literal|"%s\\0"
comment|// size
operator|+
literal|"%S\\0"
comment|// sparseness
operator|+
literal|"%T@\\0"
comment|// mod_time
operator|+
literal|"%u\\0"
comment|// user
operator|+
literal|"%U\\0"
comment|// uid
operator|+
literal|"%Y\\0"
comment|// type
block|}
decl_stmt|;
return|return
name|Processes
operator|.
name|processLines
argument_list|(
literal|'\0'
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|private
name|Enumerable
argument_list|<
name|String
argument_list|>
name|sourceMacOs
parameter_list|()
block|{
if|if
condition|(
name|path
operator|.
name|contains
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
comment|// no injection monkey business
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"/bin/sh"
block|,
literal|"-c"
block|,
literal|"find '"
operator|+
name|path
operator|+
literal|"' | xargs stat -f "
operator|+
literal|"%a%n"
comment|// access_time
operator|+
literal|"%b%n"
comment|// block_count
operator|+
literal|"%c%n"
comment|// change_time
operator|+
literal|"0%n"
comment|// depth: not supported by macOS stat
operator|+
literal|"%Hd%n"
comment|// device: we only use the high part of "H,L" device
operator|+
literal|"filename%n"
comment|// filename: not supported by macOS stat
operator|+
literal|"fstype%n"
comment|// fstype: not supported by macOS stat
operator|+
literal|"%Sg%n"
comment|// gname
operator|+
literal|"%g%n"
comment|// gid
operator|+
literal|"dir_name%n"
comment|// dir_name: not supported by macOS stat
operator|+
literal|"%i%n"
comment|// inode
operator|+
literal|"%Y%n"
comment|// link
operator|+
literal|"%Lp%n"
comment|// perm
operator|+
literal|"%l%n"
comment|// hard
operator|+
literal|"%SN%n"
comment|// path
operator|+
literal|"%z%n"
comment|// size
operator|+
literal|"0%n"
comment|// sparseness: not supported by macOS stat
operator|+
literal|"%m%n"
comment|// mod_time
operator|+
literal|"%Su%n"
comment|// user
operator|+
literal|"%u%n"
comment|// uid
operator|+
literal|"%LT%n"
comment|// type
block|}
decl_stmt|;
return|return
name|Processes
operator|.
name|processLines
argument_list|(
literal|'\n'
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|getRowType
argument_list|(
name|root
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rowType
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|osVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|osVersion
argument_list|)
expr_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|enumerable
decl_stmt|;
switch|switch
condition|(
name|osName
condition|)
block|{
case|case
literal|"Mac OS X"
case|:
comment|// tested on version 10.12.5
name|enumerable
operator|=
name|sourceMacOs
argument_list|()
expr_stmt|;
break|break;
default|default:
name|enumerable
operator|=
name|sourceLinux
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|Enumerator
argument_list|<
name|String
argument_list|>
name|e
init|=
name|enumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
name|Object
index|[]
name|current
decl_stmt|;
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
name|current
operator|=
operator|new
name|Object
index|[
name|fieldNames
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|current
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|moveNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|v
init|=
name|e
operator|.
name|current
argument_list|()
decl_stmt|;
try|try
block|{
name|current
index|[
name|i
index|]
operator|=
name|field
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while parsing value ["
operator|+
name|v
operator|+
literal|"] of field ["
operator|+
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"] in line ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|current
argument_list|)
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
switch|switch
condition|(
name|osName
condition|)
block|{
case|case
literal|"Mac OS X"
case|:
comment|// Strip leading "./"
name|String
name|path
init|=
operator|(
name|String
operator|)
name|current
index|[
literal|14
index|]
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|current
index|[
literal|14
index|]
operator|=
name|path
operator|=
literal|""
expr_stmt|;
name|current
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
comment|// depth
block|}
if|else if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
name|current
index|[
literal|14
index|]
operator|=
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|current
index|[
literal|3
index|]
operator|=
name|count
argument_list|(
name|path
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|1
expr_stmt|;
comment|// depth
block|}
else|else
block|{
name|current
index|[
literal|3
index|]
operator|=
name|count
argument_list|(
name|path
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
comment|// depth
block|}
specifier|final
name|int
name|slash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|>=
literal|0
condition|)
block|{
name|current
index|[
literal|5
index|]
operator|=
name|path
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// filename
name|current
index|[
literal|9
index|]
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
argument_list|)
expr_stmt|;
comment|// dir_name
block|}
else|else
block|{
name|current
index|[
literal|5
index|]
operator|=
name|path
expr_stmt|;
comment|// filename
name|current
index|[
literal|9
index|]
operator|=
literal|""
expr_stmt|;
comment|// dir_name
block|}
comment|// In Linux, sparseness = (BLOCKSIZE * st_blocks / st_size)
specifier|final
name|Integer
name|blocks
init|=
operator|(
name|Integer
operator|)
name|current
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|Long
name|bytes
init|=
operator|(
name|Long
operator|)
name|current
index|[
literal|15
index|]
decl_stmt|;
name|current
index|[
literal|16
index|]
operator|=
name|blocks
operator|.
name|floatValue
argument_list|()
operator|*
literal|512f
operator|/
name|bytes
operator|.
name|floatValue
argument_list|()
expr_stmt|;
comment|// Make type values more like those on Linux
specifier|final
name|String
name|type
init|=
operator|(
name|String
operator|)
name|current
index|[
literal|20
index|]
decl_stmt|;
name|current
index|[
literal|20
index|]
operator|=
name|type
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"d"
else|:
name|type
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|?
literal|"f"
else|:
name|type
operator|.
name|equals
argument_list|(
literal|"@"
argument_list|)
condition|?
literal|"l"
else|:
name|type
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|int
name|count
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|len
init|=
name|s
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
name|c
condition|)
block|{
operator|++
name|n
expr_stmt|;
block|}
block|}
return|return
name|n
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|e
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Object
name|field
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
literal|"block_count"
case|:
case|case
literal|"depth"
case|:
case|case
literal|"device"
case|:
case|case
literal|"gid"
case|:
case|case
literal|"uid"
case|:
case|case
literal|"hard"
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
case|case
literal|"inode"
case|:
case|case
literal|"size"
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
case|case
literal|"access_time"
case|:
case|case
literal|"change_time"
case|:
case|case
literal|"mod_time"
case|:
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
argument_list|)
operator|.
name|multiply
argument_list|(
name|THOUSAND
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
case|case
literal|"sparseness"
case|:
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
default|default:
return|return
name|value
return|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|Statistics
operator|.
name|of
argument_list|(
literal|1000d
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|TABLE
return|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End FilesTableFunction.java
end_comment

end_unit

