begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|tpcds
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTableQueryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Bug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|Results
import|;
end_import

begin_import
import|import
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|column
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|column
operator|.
name|ColumnType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Schema that provides TPC-DS tables, populated according to a  * particular scale factor. */
end_comment

begin_class
specifier|public
class|class
name|TpcdsSchema
extends|extends
name|AbstractSchema
block|{
specifier|private
specifier|final
name|double
name|scaleFactor
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableMap
decl_stmt|;
comment|// From TPC-DS spec, table 3-2 "Database Row Counts", for 1G sizing.
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|TABLE_ROW_COUNTS
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"CALL_CENTER"
argument_list|,
literal|8
argument_list|)
decl|.
name|put
argument_list|(
literal|"CATALOG_PAGE"
argument_list|,
literal|11718
argument_list|)
decl|.
name|put
argument_list|(
literal|"CATALOG_RETURNS"
argument_list|,
literal|144067
argument_list|)
decl|.
name|put
argument_list|(
literal|"CATALOG_SALES"
argument_list|,
literal|1441548
argument_list|)
decl|.
name|put
argument_list|(
literal|"CUSTOMER"
argument_list|,
literal|100000
argument_list|)
decl|.
name|put
argument_list|(
literal|"CUSTOMER_ADDRESS"
argument_list|,
literal|50000
argument_list|)
decl|.
name|put
argument_list|(
literal|"CUSTOMER_DEMOGRAPHICS"
argument_list|,
literal|1920800
argument_list|)
decl|.
name|put
argument_list|(
literal|"DATE_DIM"
argument_list|,
literal|73049
argument_list|)
decl|.
name|put
argument_list|(
literal|"DBGEN_VERSION"
argument_list|,
literal|1
argument_list|)
decl|.
name|put
argument_list|(
literal|"HOUSEHOLD_DEMOGRAPHICS"
argument_list|,
literal|7200
argument_list|)
decl|.
name|put
argument_list|(
literal|"INCOME_BAND"
argument_list|,
literal|20
argument_list|)
decl|.
name|put
argument_list|(
literal|"INVENTORY"
argument_list|,
literal|11745000
argument_list|)
decl|.
name|put
argument_list|(
literal|"ITEM"
argument_list|,
literal|18000
argument_list|)
decl|.
name|put
argument_list|(
literal|"PROMOTION"
argument_list|,
literal|300
argument_list|)
decl|.
name|put
argument_list|(
literal|"REASON"
argument_list|,
literal|35
argument_list|)
decl|.
name|put
argument_list|(
literal|"SHIP_MODE"
argument_list|,
literal|20
argument_list|)
decl|.
name|put
argument_list|(
literal|"STORE"
argument_list|,
literal|12
argument_list|)
decl|.
name|put
argument_list|(
literal|"STORE_RETURNS"
argument_list|,
literal|287514
argument_list|)
decl|.
name|put
argument_list|(
literal|"STORE_SALES"
argument_list|,
literal|2880404
argument_list|)
decl|.
name|put
argument_list|(
literal|"TIME_DIM"
argument_list|,
literal|86400
argument_list|)
decl|.
name|put
argument_list|(
literal|"WAREHOUSE"
argument_list|,
literal|5
argument_list|)
decl|.
name|put
argument_list|(
literal|"WEB_PAGE"
argument_list|,
literal|60
argument_list|)
decl|.
name|put
argument_list|(
literal|"WEB_RETURNS"
argument_list|,
literal|71763
argument_list|)
decl|.
name|put
argument_list|(
literal|"WEB_SALES"
argument_list|,
literal|719384
argument_list|)
decl|.
name|put
argument_list|(
literal|"WEB_SITE"
argument_list|,
literal|1
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|TpcdsSchema
parameter_list|(
name|double
name|scaleFactor
parameter_list|,
name|int
name|part
parameter_list|,
name|int
name|partCount
parameter_list|)
block|{
name|this
argument_list|(
name|scaleFactor
argument_list|)
expr_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|partCount
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a TpcdsSchema. */
specifier|public
name|TpcdsSchema
parameter_list|(
name|double
name|scaleFactor
parameter_list|)
block|{
name|this
operator|.
name|scaleFactor
operator|=
name|scaleFactor
expr_stmt|;
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|Table
name|tpcdsTable
range|:
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|Table
operator|.
name|getBaseTables
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|tpcdsTable
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
operator|new
name|TpcdsQueryableTable
argument_list|(
name|tpcdsTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|tableMap
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
return|return
name|tableMap
return|;
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
name|Object
name|convert
parameter_list|(
annotation|@
name|Nullable
name|String
name|string
parameter_list|,
name|Column
name|column
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|column
operator|.
name|getType
argument_list|()
operator|.
name|getBase
argument_list|()
condition|)
block|{
case|case
name|IDENTIFIER
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|string
argument_list|)
return|;
case|case
name|INTEGER
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|string
argument_list|)
return|;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
name|string
return|;
case|case
name|DATE
case|:
return|return
name|DateTimeUtils
operator|.
name|dateStringToUnixDate
argument_list|(
name|string
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
name|DateTimeUtils
operator|.
name|timeStringToUnixDate
argument_list|(
name|string
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|BigDecimal
argument_list|(
name|string
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|column
argument_list|)
throw|;
block|}
block|}
comment|/** Definition of a table in the TPC-DS schema.    *    * @param<E> entity type */
specifier|private
class|class
name|TpcdsQueryableTable
parameter_list|<
name|E
extends|extends
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|Table
parameter_list|>
extends|extends
name|AbstractQueryableTable
block|{
specifier|private
specifier|final
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|Table
name|tpcdsTable
decl_stmt|;
name|TpcdsQueryableTable
parameter_list|(
name|com
operator|.
name|teradata
operator|.
name|tpcds
operator|.
name|Table
name|tpcdsTable
parameter_list|)
block|{
name|super
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|tpcdsTable
operator|=
name|tpcdsTable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
name|Bug
operator|.
name|upgrade
argument_list|(
literal|"add row count estimate to TpcdsTable, and use it"
argument_list|)
expr_stmt|;
name|Integer
name|rowCount
init|=
name|TABLE_ROW_COUNTS
operator|.
name|get
argument_list|(
name|tpcdsTable
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|rowCount
operator|!=
literal|null
operator|:
name|tpcdsTable
assert|;
return|return
name|Statistics
operator|.
name|of
argument_list|(
name|rowCount
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
specifier|final
name|QueryProvider
name|queryProvider
parameter_list|,
specifier|final
name|SchemaPlus
name|schema
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|Queryable
operator|)
operator|new
name|AbstractTableQueryable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|Session
name|session
init|=
name|Session
operator|.
name|getDefaultSession
argument_list|()
operator|.
name|withTable
argument_list|(
name|tpcdsTable
argument_list|)
operator|.
name|withScale
argument_list|(
name|scaleFactor
argument_list|)
decl_stmt|;
specifier|final
name|Results
name|results
init|=
name|Results
operator|.
name|constructResults
argument_list|(
name|tpcdsTable
argument_list|,
name|session
argument_list|)
decl_stmt|;
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|results
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
annotation|@
name|Nullable
name|String
argument_list|>
argument_list|>
argument_list|,
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|final
name|Column
index|[]
name|columns
init|=
name|tpcdsTable
operator|.
name|getColumns
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
annotation|@
name|Nullable
name|String
argument_list|>
argument_list|>
name|inRows
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
annotation|@
name|Nullable
name|String
argument_list|>
name|strings
range|:
name|inRows
control|)
block|{
specifier|final
annotation|@
name|Nullable
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|columns
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|strings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|columns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|rows
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|enumerator
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|builder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Column
name|column
range|:
name|tpcdsTable
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|column
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|type
argument_list|(
name|typeFactory
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|RelDataType
name|type
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|Column
name|column
parameter_list|)
block|{
specifier|final
name|ColumnType
name|type
init|=
name|column
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|getBase
argument_list|()
condition|)
block|{
case|case
name|DATE
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
return|;
case|case
name|INTEGER
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
return|;
case|case
name|IDENTIFIER
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|type
operator|.
name|getPrecision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|type
operator|.
name|getScale
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
name|type
operator|.
name|getPrecision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
name|type
operator|.
name|getPrecision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|type
operator|.
name|getBase
argument_list|()
operator|+
literal|": "
operator|+
name|column
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

