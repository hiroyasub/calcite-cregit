begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|os
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Table function that executes the OS "ps" command  * to list processes.  */
end_comment

begin_class
specifier|public
class|class
name|PsTableFunction
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|MINUTE_SECOND_MILLIS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+):([0-9]+):([0-9]+)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|HOUR_MINUTE_SECOND_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+):([0-9]+)\\.([0-9]+)"
argument_list|)
decl_stmt|;
specifier|private
name|PsTableFunction
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|ScannableTable
name|eval
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
operator|new
name|ScannableTable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
name|JavaTypeFactory
name|typeFactory
init|=
name|root
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|getRowType
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rowType
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|args
decl_stmt|;
specifier|final
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|osVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|osVersion
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|osName
condition|)
block|{
case|case
literal|"Mac OS X"
case|:
comment|// tested on version 10.12.5
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"ps"
block|,
literal|"ax"
block|,
literal|"-o"
block|,
literal|"ppid=,pid=,pgid=,tpgid=,stat=,"
operator|+
literal|"user=,pcpu=,pmem=,vsz=,rss=,tty=,start=,time=,uid=,ruid=,"
operator|+
literal|"sess=,comm="
block|}
expr_stmt|;
break|break;
default|default:
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"ps"
block|,
literal|"--no-headers"
block|,
literal|"axo"
block|,
literal|"ppid,pid,pgrp,"
operator|+
literal|"tpgid,stat,user,pcpu,pmem,vsz,rss,tty,start_time,time,euid,"
operator|+
literal|"ruid,sess,comm"
block|}
expr_stmt|;
block|}
return|return
name|Processes
operator|.
name|processLines
argument_list|(
name|args
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|apply
parameter_list|(
name|String
name|line
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|fields
init|=
name|line
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" +"
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|fieldNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|values
index|[
name|i
index|]
operator|=
name|field
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while parsing value ["
operator|+
name|fields
index|[
name|i
index|]
operator|+
literal|"] of field ["
operator|+
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"] in line ["
operator|+
name|line
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
name|values
return|;
block|}
specifier|private
name|Object
name|field
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
literal|"pid"
case|:
case|case
literal|"ppid"
case|:
case|case
literal|"pgrp"
case|:
comment|// linux only; macOS equivalent is "pgid"
case|case
literal|"pgid"
case|:
comment|// see "pgrp"
case|case
literal|"tpgid"
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
case|case
literal|"pcpu"
case|:
case|case
literal|"pmem"
case|:
return|return
operator|(
name|int
operator|)
operator|(
name|Float
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|*
literal|10f
operator|)
return|;
case|case
literal|"time"
case|:
specifier|final
name|Matcher
name|m1
init|=
name|MINUTE_SECOND_MILLIS_PATTERN
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m1
operator|.
name|matches
argument_list|()
condition|)
block|{
specifier|final
name|long
name|h
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|m1
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|m
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|m1
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|s
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|m1
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|h
operator|*
literal|3600000L
operator|+
name|m
operator|*
literal|60000L
operator|+
name|s
operator|*
literal|1000L
return|;
block|}
specifier|final
name|Matcher
name|m2
init|=
name|HOUR_MINUTE_SECOND_PATTERN
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2
operator|.
name|matches
argument_list|()
condition|)
block|{
specifier|final
name|long
name|m
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|m2
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|s
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|m2
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|g3
init|=
name|m2
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
while|while
condition|(
name|g3
operator|.
name|length
argument_list|()
operator|<
literal|3
condition|)
block|{
name|g3
operator|=
name|g3
operator|+
literal|"0"
expr_stmt|;
block|}
specifier|final
name|long
name|millis
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|g3
argument_list|)
decl_stmt|;
return|return
name|m
operator|*
literal|60000L
operator|+
name|s
operator|*
literal|1000L
operator|+
name|millis
return|;
block|}
return|return
literal|0L
return|;
case|case
literal|"start_time"
case|:
comment|// linux only; macOS version is "lstart"
case|case
literal|"lstart"
case|:
comment|// see "start_time"
case|case
literal|"euid"
case|:
comment|// linux only; macOS equivalent is "uid"
case|case
literal|"uid"
case|:
comment|// see "euid"
default|default:
return|return
name|value
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"pid"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"ppid"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"pgrp"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"tpgid"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"stat"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"user"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"pcpu"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|.
name|add
argument_list|(
literal|"pmem"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|.
name|add
argument_list|(
literal|"vsz"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"rss"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"tty"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"start_time"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"time"
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|,
operator|-
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
operator|.
name|add
argument_list|(
literal|"euid"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"ruid"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"sess"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"command"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|Statistics
operator|.
name|of
argument_list|(
literal|1000d
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|TABLE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRolledUp
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rolledUpColumnValidInsideAgg
parameter_list|(
name|String
name|column
parameter_list|,
name|SqlCall
name|call
parameter_list|,
annotation|@
name|Nullable
name|SqlNode
name|parent
parameter_list|,
annotation|@
name|Nullable
name|CalciteConnectionConfig
name|config
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

