begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Various {@link RelOptRule}s using the Pig convention.  */
end_comment

begin_class
specifier|public
class|class
name|PigRules
block|{
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|ConverterRule
argument_list|>
name|ALL_PIG_OPT_RULES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|PigFilterRule
operator|.
name|INSTANCE
argument_list|,
name|PigTableScanRule
operator|.
name|INSTANCE
argument_list|,
name|PigProjectRule
operator|.
name|INSTANCE
argument_list|,
name|PigAggregateRule
operator|.
name|INSTANCE
argument_list|,
name|PigJoinRule
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
comment|// prevent instantiation
specifier|private
name|PigRules
parameter_list|()
block|{
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalFilter} to a    * {@link PigFilter}.    */
specifier|private
specifier|static
class|class
name|PigFilterRule
extends|extends
name|ConverterRule
block|{
specifier|private
specifier|static
specifier|final
name|PigFilterRule
name|INSTANCE
init|=
name|Config
operator|.
name|INSTANCE
operator|.
name|withConversion
argument_list|(
name|LogicalFilter
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|PigRel
operator|.
name|CONVENTION
argument_list|,
literal|"PigFilterRule"
argument_list|)
operator|.
name|withRuleFactory
argument_list|(
name|PigFilterRule
operator|::
operator|new
argument_list|)
operator|.
name|toRule
argument_list|(
name|PigFilterRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|PigFilterRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalFilter
name|filter
init|=
operator|(
name|LogicalFilter
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|filter
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PigRel
operator|.
name|CONVENTION
argument_list|)
decl_stmt|;
return|return
operator|new
name|PigFilter
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|,
name|PigRel
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalTableScan}    * to a {@link PigTableScan}.    */
specifier|private
specifier|static
class|class
name|PigTableScanRule
extends|extends
name|ConverterRule
block|{
specifier|private
specifier|static
specifier|final
name|PigTableScanRule
name|INSTANCE
init|=
name|Config
operator|.
name|INSTANCE
operator|.
name|withConversion
argument_list|(
name|LogicalTableScan
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|PigRel
operator|.
name|CONVENTION
argument_list|,
literal|"PigTableScanRule"
argument_list|)
operator|.
name|withRuleFactory
argument_list|(
name|PigTableScanRule
operator|::
operator|new
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|toRule
argument_list|(
name|PigTableScanRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|PigTableScanRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalTableScan
name|scan
init|=
operator|(
name|LogicalTableScan
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|scan
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PigRel
operator|.
name|CONVENTION
argument_list|)
decl_stmt|;
return|return
operator|new
name|PigTableScan
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|scan
operator|.
name|getTable
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalProject} to    * a {@link PigProject}.    */
specifier|private
specifier|static
class|class
name|PigProjectRule
extends|extends
name|ConverterRule
block|{
specifier|private
specifier|static
specifier|final
name|PigProjectRule
name|INSTANCE
init|=
name|Config
operator|.
name|INSTANCE
operator|.
name|withConversion
argument_list|(
name|LogicalProject
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|PigRel
operator|.
name|CONVENTION
argument_list|,
literal|"PigProjectRule"
argument_list|)
operator|.
name|withRuleFactory
argument_list|(
name|PigProjectRule
operator|::
operator|new
argument_list|)
operator|.
name|toRule
argument_list|(
name|PigProjectRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|PigProjectRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|LogicalProject
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|project
operator|.
name|getVariablesSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalProject
name|project
init|=
operator|(
name|LogicalProject
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|project
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PigRel
operator|.
name|CONVENTION
argument_list|)
decl_stmt|;
return|return
operator|new
name|PigProject
argument_list|(
name|project
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|project
operator|.
name|getInput
argument_list|()
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalAggregate} to a    * {@link PigAggregate}.    */
specifier|private
specifier|static
class|class
name|PigAggregateRule
extends|extends
name|ConverterRule
block|{
specifier|private
specifier|static
specifier|final
name|PigAggregateRule
name|INSTANCE
init|=
name|Config
operator|.
name|INSTANCE
operator|.
name|withConversion
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|PigRel
operator|.
name|CONVENTION
argument_list|,
literal|"PigAggregateRule"
argument_list|)
operator|.
name|withRuleFactory
argument_list|(
name|PigAggregateRule
operator|::
operator|new
argument_list|)
operator|.
name|toRule
argument_list|(
name|PigAggregateRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|PigAggregateRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalAggregate
name|agg
init|=
operator|(
name|LogicalAggregate
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|agg
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PigRel
operator|.
name|CONVENTION
argument_list|)
decl_stmt|;
return|return
operator|new
name|PigAggregate
argument_list|(
name|agg
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|agg
operator|.
name|getInput
argument_list|()
argument_list|,
name|agg
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|agg
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|agg
operator|.
name|getAggCallList
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalJoin} to    * a {@link PigJoin}.    */
specifier|private
specifier|static
class|class
name|PigJoinRule
extends|extends
name|ConverterRule
block|{
specifier|private
specifier|static
specifier|final
name|PigJoinRule
name|INSTANCE
init|=
name|Config
operator|.
name|INSTANCE
operator|.
name|withConversion
argument_list|(
name|LogicalJoin
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|PigRel
operator|.
name|CONVENTION
argument_list|,
literal|"PigJoinRule"
argument_list|)
operator|.
name|withRuleFactory
argument_list|(
name|PigJoinRule
operator|::
operator|new
argument_list|)
operator|.
name|toRule
argument_list|(
name|PigJoinRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|PigJoinRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalJoin
name|join
init|=
operator|(
name|LogicalJoin
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|join
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PigRel
operator|.
name|CONVENTION
argument_list|)
decl_stmt|;
return|return
operator|new
name|PigJoin
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

