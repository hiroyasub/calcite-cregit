begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Relational expression that uses the Pig calling convention.  */
end_comment

begin_interface
specifier|public
interface|interface
name|PigRel
extends|extends
name|RelNode
block|{
comment|/**    * Converts this node to a Pig Latin statement.    */
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
function_decl|;
comment|// String getPigRelationAlias();
comment|//
comment|// String getFieldName(int index);
comment|/** Calling convention for relational operations that occur in Pig. */
name|Convention
name|CONVENTION
init|=
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"PIG"
argument_list|,
name|PigRel
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Callback for the implementation process that converts a tree of    * {@link PigRel} nodes into complete Pig Latin script.    */
class|class
name|Implementor
block|{
comment|/**      * An ordered list of Pig Latin statements.      *      *<p>See      *<a href="https://pig.apache.org/docs/r0.13.0/start.html#pl-statements">      * Pig Latin reference</a>.      */
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|statements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getTableName
parameter_list|(
name|RelNode
name|input
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|qualifiedName
init|=
name|input
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
return|return
name|qualifiedName
operator|.
name|get
argument_list|(
name|qualifiedName
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPigRelationAlias
parameter_list|(
name|RelNode
name|input
parameter_list|)
block|{
return|return
name|getTableName
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|void
name|addStatement
parameter_list|(
name|String
name|statement
parameter_list|)
block|{
name|statements
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitChild
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
assert|assert
name|ordinal
operator|==
literal|0
assert|;
operator|(
operator|(
name|PigRel
operator|)
name|input
operator|)
operator|.
name|implement
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getStatements
parameter_list|()
block|{
return|return
name|statements
return|;
block|}
specifier|public
name|String
name|getScript
parameter_list|()
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|statements
argument_list|)
return|;
block|}
block|}
block|}
end_interface

begin_comment
comment|// End PigRel.java
end_comment

end_unit

