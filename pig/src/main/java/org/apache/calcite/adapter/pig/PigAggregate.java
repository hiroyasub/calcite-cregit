begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|scripting
operator|.
name|Pig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Implementation of {@link org.apache.calcite.rel.core.Aggregate} in  * {@link PigRel#CONVENTION Pig calling convention}. */
end_comment

begin_class
specifier|public
class|class
name|PigAggregate
extends|extends
name|Aggregate
implements|implements
name|PigRel
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DISTINCT_FIELD_SUFFIX
init|=
literal|"_DISTINCT"
decl_stmt|;
comment|/** Creates a PigAggregate. */
specifier|public
name|PigAggregate
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|boolean
name|indicator
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|,
name|indicator
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|PigRel
operator|.
name|CONVENTION
assert|;
block|}
annotation|@
name|Override
specifier|public
name|Aggregate
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|boolean
name|indicator
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
return|return
operator|new
name|PigAggregate
argument_list|(
name|input
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|indicator
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|implementor
operator|.
name|addStatement
argument_list|(
name|getPigAggregateStatement
argument_list|(
name|implementor
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a GROUP BY statement, followed by an optional FOREACH statement    * for all aggregate functions used. e.g.    *<pre>    * {@code    * A = GROUP A BY owner;    * A = FOREACH A GENERATE group, SUM(A.pet_num);    * }    *</pre>    */
specifier|private
name|String
name|getPigAggregateStatement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
return|return
name|getPigGroupBy
argument_list|(
name|implementor
argument_list|)
operator|+
literal|'\n'
operator|+
name|getPigForEachGenerate
argument_list|(
name|implementor
argument_list|)
return|;
block|}
comment|/**    * Override this method so it looks down the tree to find the table this node    * is acting on.    */
annotation|@
name|Override
specifier|public
name|RelOptTable
name|getTable
parameter_list|()
block|{
return|return
name|getInput
argument_list|()
operator|.
name|getTable
argument_list|()
return|;
block|}
comment|/**    * Generates the GROUP BY statement, e.g.    *<code>A = GROUP A BY (f1, f2);</code>    */
specifier|private
name|String
name|getPigGroupBy
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
specifier|final
name|String
name|relAlias
init|=
name|implementor
operator|.
name|getPigRelationAlias
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|allFields
init|=
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|groupedFieldIndexes
init|=
name|groupSet
operator|.
name|asList
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupedFieldIndexes
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
return|return
name|relAlias
operator|+
literal|" = GROUP "
operator|+
name|relAlias
operator|+
literal|" ALL;"
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupedFieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groupedFieldIndexes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fieldIndex
range|:
name|groupedFieldIndexes
control|)
block|{
name|groupedFieldNames
operator|.
name|add
argument_list|(
name|allFields
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|relAlias
operator|+
literal|" = GROUP "
operator|+
name|relAlias
operator|+
literal|" BY ("
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|groupedFieldNames
argument_list|)
operator|+
literal|");"
return|;
block|}
block|}
comment|/**    * Generates a FOREACH statement containing invocation of aggregate functions    * and projection of grouped fields. e.g.    *<code>A = FOREACH A GENERATE group, SUM(A.pet_num);</code>    * @see Pig documentation for special meaning of the "group" field after GROUP    *      BY.    */
specifier|private
name|String
name|getPigForEachGenerate
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
specifier|final
name|String
name|relAlias
init|=
name|implementor
operator|.
name|getPigRelationAlias
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|String
name|generateCall
init|=
name|getPigGenerateCall
argument_list|(
name|implementor
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|distinctCalls
init|=
name|getDistinctCalls
argument_list|(
name|implementor
argument_list|)
decl_stmt|;
return|return
name|relAlias
operator|+
literal|" = FOREACH "
operator|+
name|relAlias
operator|+
literal|" {\n"
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|";\n"
argument_list|)
operator|.
name|join
argument_list|(
name|distinctCalls
argument_list|)
operator|+
name|generateCall
operator|+
literal|"\n};"
return|;
block|}
specifier|private
name|String
name|getPigGenerateCall
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|groupedFieldIndexes
init|=
name|groupSet
operator|.
name|asList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|groupFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|groupedFieldIndexes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fieldIndex
range|:
name|groupedFieldIndexes
control|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|getInputFieldName
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
comment|// Pig appends group field name if grouping by multiple fields
specifier|final
name|String
name|groupField
init|=
operator|(
name|groupedFieldIndexes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"group"
else|:
operator|(
literal|"group."
operator|+
name|fieldName
operator|)
operator|)
operator|+
literal|" AS "
operator|+
name|fieldName
decl_stmt|;
name|groupFields
operator|.
name|add
argument_list|(
name|groupField
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|pigAggCalls
init|=
name|getPigAggregateCalls
argument_list|(
name|implementor
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groupFields
operator|.
name|size
argument_list|()
operator|+
name|pigAggCalls
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|allFields
operator|.
name|addAll
argument_list|(
name|groupFields
argument_list|)
expr_stmt|;
name|allFields
operator|.
name|addAll
argument_list|(
name|pigAggCalls
argument_list|)
expr_stmt|;
return|return
literal|"  GENERATE "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|allFields
argument_list|)
operator|+
literal|';'
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPigAggregateCalls
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
specifier|final
name|String
name|relAlias
init|=
name|implementor
operator|.
name|getPigRelationAlias
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggCalls
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AggregateCall
name|ac
range|:
name|aggCalls
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getPigAggregateCall
argument_list|(
name|relAlias
argument_list|,
name|ac
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|getPigAggregateCall
parameter_list|(
name|String
name|relAlias
parameter_list|,
name|AggregateCall
name|aggCall
parameter_list|)
block|{
specifier|final
name|PigAggFunction
name|aggFunc
init|=
name|toPigAggFunc
argument_list|(
name|aggCall
argument_list|)
decl_stmt|;
specifier|final
name|String
name|alias
init|=
name|aggCall
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fields
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|getArgNames
argument_list|(
name|relAlias
argument_list|,
name|aggCall
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|aggFunc
operator|.
name|name
argument_list|()
operator|+
literal|"("
operator|+
name|fields
operator|+
literal|") AS "
operator|+
name|alias
return|;
block|}
specifier|private
name|PigAggFunction
name|toPigAggFunc
parameter_list|(
name|AggregateCall
name|aggCall
parameter_list|)
block|{
return|return
name|PigAggFunction
operator|.
name|valueOf
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getArgNames
parameter_list|(
name|String
name|relAlias
parameter_list|,
name|AggregateCall
name|aggCall
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fieldIndex
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getInputFieldNameForAggCall
argument_list|(
name|relAlias
argument_list|,
name|aggCall
argument_list|,
name|fieldIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|getInputFieldNameForAggCall
parameter_list|(
name|String
name|relAlias
parameter_list|,
name|AggregateCall
name|aggCall
parameter_list|,
name|int
name|fieldIndex
parameter_list|)
block|{
specifier|final
name|String
name|inputField
init|=
name|getInputFieldName
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
return|return
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|?
operator|(
name|inputField
operator|+
name|DISTINCT_FIELD_SUFFIX
operator|)
else|:
operator|(
name|relAlias
operator|+
literal|'.'
operator|+
name|inputField
operator|)
return|;
block|}
comment|/**    * A agg function call like<code>COUNT(DISTINCT COL)</code> in Pig is    * achieved via two statements in a FOREACH that follows a GROUP statement:    *    *<blockquote>    *<code>    * TABLE = GROUP TABLE ALL;<br>    * TABLE = FOREACH TABLE {<br>    *&nbsp;&nbsp;<b>COL.DISTINCT = DISTINCT COL;<br>    *&nbsp;&nbsp;GENERATE COUNT(COL.DISTINCT) AS C;</b><br>    * }</code>    *</blockquote>    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getDistinctCalls
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
specifier|final
name|String
name|relAlias
init|=
name|implementor
operator|.
name|getPigRelationAlias
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|fieldIndex
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|getInputFieldName
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
literal|"  "
operator|+
name|fieldName
operator|+
name|DISTINCT_FIELD_SUFFIX
operator|+
literal|" = DISTINCT "
operator|+
name|relAlias
operator|+
literal|'.'
operator|+
name|fieldName
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|getInputFieldName
parameter_list|(
name|int
name|fieldIndex
parameter_list|)
block|{
return|return
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End PigAggregate.java
end_comment

end_unit

