begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
operator|.
name|ToRelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DataType
import|;
end_import

begin_comment
comment|/**  * Represents a Pig relation that is created by Pig Latin  *<a href="https://pig.apache.org/docs/r0.13.0/basic.html#load">  *<code>LOAD</code></a> statement.  *  *<p>Only the default load function is supported at this point (PigStorage()).  *  *<p>Only VARCHAR (CHARARRAY in Pig) type supported at this point.  *  * @see PigTableFactory  */
end_comment

begin_class
specifier|public
class|class
name|PigTable
extends|extends
name|AbstractTable
implements|implements
name|TranslatableTable
block|{
specifier|private
specifier|final
name|String
name|filePath
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|fieldNames
decl_stmt|;
comment|/** Creates a PigTable. */
specifier|public
name|PigTable
parameter_list|(
name|String
name|filePath
parameter_list|,
name|String
index|[]
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|filePath
operator|=
name|filePath
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|builder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
comment|// only supports CHARARRAY types for now
specifier|final
name|RelDataType
name|relDataType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|PigDataType
operator|.
name|valueOf
argument_list|(
name|DataType
operator|.
name|CHARARRAY
argument_list|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|nullableRelDataType
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|relDataType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|nullableRelDataType
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|String
name|getFilePath
parameter_list|()
block|{
return|return
name|filePath
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|context
operator|.
name|getCluster
argument_list|()
decl_stmt|;
return|return
operator|new
name|PigTableScan
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PigRel
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|relOptTable
argument_list|)
return|;
block|}
block|}
end_class

end_unit

