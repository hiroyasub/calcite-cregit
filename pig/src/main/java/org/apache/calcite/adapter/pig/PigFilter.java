begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|pig
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
operator|.
name|INPUT_REF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
operator|.
name|LITERAL
import|;
end_import

begin_comment
comment|/** Implementation of {@link org.apache.calcite.rel.core.Filter} in  * {@link PigRel#CONVENTION Pig calling convention}. */
end_comment

begin_class
specifier|public
class|class
name|PigFilter
extends|extends
name|Filter
implements|implements
name|PigRel
block|{
comment|/** Creates a PigFilter. */
specifier|public
name|PigFilter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|PigRel
operator|.
name|CONVENTION
assert|;
block|}
annotation|@
name|Override
specifier|public
name|Filter
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
return|return
operator|new
name|PigFilter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|implementor
operator|.
name|addStatement
argument_list|(
name|getPigFilterStatement
argument_list|(
name|implementor
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Override this method so it looks down the tree to find the table this node    * is acting on.    */
annotation|@
name|Override
specifier|public
name|RelOptTable
name|getTable
parameter_list|()
block|{
return|return
name|getInput
argument_list|()
operator|.
name|getTable
argument_list|()
return|;
block|}
comment|/**    * Generates Pig Latin filtering statements. For example    *    *<blockquote>    *<pre>table = FILTER table BY score&gt; 2.0;</pre>    *</blockquote>    */
specifier|private
name|String
name|getPigFilterStatement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|containsOnlyConjunctions
argument_list|(
name|condition
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|relationAlias
init|=
name|implementor
operator|.
name|getPigRelationAlias
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filterConditionsConjunction
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|condition
argument_list|)
control|)
block|{
name|filterConditionsConjunction
operator|.
name|add
argument_list|(
name|getSingleFilterCondition
argument_list|(
name|implementor
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|allFilterConditions
init|=
name|String
operator|.
name|join
argument_list|(
literal|" AND "
argument_list|,
name|filterConditionsConjunction
argument_list|)
decl_stmt|;
return|return
name|relationAlias
operator|+
literal|" = FILTER "
operator|+
name|relationAlias
operator|+
literal|" BY "
operator|+
name|allFilterConditions
operator|+
literal|';'
return|;
block|}
specifier|private
name|String
name|getSingleFilterCondition
parameter_list|(
name|Implementor
name|implementor
parameter_list|,
name|RexNode
name|node
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|getSingleFilterCondition
argument_list|(
name|implementor
argument_list|,
literal|"=="
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
name|getSingleFilterCondition
argument_list|(
name|implementor
argument_list|,
literal|"<"
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|getSingleFilterCondition
argument_list|(
name|implementor
argument_list|,
literal|"<="
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|getSingleFilterCondition
argument_list|(
name|implementor
argument_list|,
literal|">"
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|getSingleFilterCondition
argument_list|(
name|implementor
argument_list|,
literal|">="
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot translate node "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getSingleFilterCondition
parameter_list|(
name|Implementor
name|implementor
parameter_list|,
name|String
name|op
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|final
name|String
name|literal
decl_stmt|;
specifier|final
name|RexNode
name|left
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|right
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|left
operator|.
name|getKind
argument_list|()
operator|==
name|LITERAL
condition|)
block|{
if|if
condition|(
name|right
operator|.
name|getKind
argument_list|()
operator|!=
name|INPUT_REF
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected a RexCall with a single field and single literal"
argument_list|)
throw|;
block|}
else|else
block|{
name|fieldName
operator|=
name|implementor
operator|.
name|getFieldName
argument_list|(
name|this
argument_list|,
operator|(
operator|(
name|RexInputRef
operator|)
name|right
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|literal
operator|=
name|getLiteralAsString
argument_list|(
operator|(
name|RexLiteral
operator|)
name|left
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|right
operator|.
name|getKind
argument_list|()
operator|==
name|LITERAL
condition|)
block|{
if|if
condition|(
name|left
operator|.
name|getKind
argument_list|()
operator|!=
name|INPUT_REF
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected a RexCall with a single field and single literal"
argument_list|)
throw|;
block|}
else|else
block|{
name|fieldName
operator|=
name|implementor
operator|.
name|getFieldName
argument_list|(
name|this
argument_list|,
operator|(
operator|(
name|RexInputRef
operator|)
name|left
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|literal
operator|=
name|getLiteralAsString
argument_list|(
operator|(
name|RexLiteral
operator|)
name|right
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected a RexCall with a single field and single literal"
argument_list|)
throw|;
block|}
return|return
literal|'('
operator|+
name|fieldName
operator|+
literal|' '
operator|+
name|op
operator|+
literal|' '
operator|+
name|literal
operator|+
literal|')'
return|;
block|}
specifier|private
specifier|static
name|boolean
name|containsOnlyConjunctions
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
return|return
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|condition
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
comment|/**    * Converts a literal to a Pig Latin string literal.    *    *<p>TODO: do proper literal to string conversion + escaping    */
specifier|private
specifier|static
name|String
name|getLiteralAsString
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
return|return
literal|'\''
operator|+
name|RexLiteral
operator|.
name|stringValue
argument_list|(
name|literal
argument_list|)
operator|+
literal|'\''
return|;
block|}
block|}
end_class

end_unit

