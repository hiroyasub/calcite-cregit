begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|benchmarks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Fork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Measurement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|OutputTimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Warmup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|infra
operator|.
name|Blackhole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|RunnerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|OptionsBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A benchmark of the most common patterns that are used to construct gradually  * String objects.  *  *<p>The benchmark emphasizes on the build patterns that appear in the Calcite  * project.  */
end_comment

begin_class
annotation|@
name|Fork
argument_list|(
name|value
operator|=
literal|1
argument_list|,
name|jvmArgsPrepend
operator|=
literal|"-Xmx2048m"
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|10
argument_list|,
name|time
operator|=
literal|100
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|10
argument_list|,
name|time
operator|=
literal|100
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|Threads
argument_list|(
literal|1
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|Throughput
argument_list|)
specifier|public
class|class
name|StringConstructBenchmark
block|{
comment|/**    * A state holding a Writer object which is initialized only once at the beginning of the    * benchmark.    */
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
specifier|public
specifier|static
class|class
name|WriterState
block|{
specifier|public
name|Writer
name|writer
decl_stmt|;
annotation|@
name|Setup
argument_list|(
name|Level
operator|.
name|Trial
argument_list|)
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|this
operator|.
name|writer
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A state holding an Appendable object which is initialized after a fixed number of append    * operations.    */
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
specifier|public
specifier|static
class|class
name|AppenderState
block|{
comment|/**      * The type of the appender to be initialised.      */
annotation|@
name|Param
argument_list|(
block|{
literal|"StringBuilder"
block|,
literal|"StringWriter"
block|,
literal|"PrintWriter"
block|}
argument_list|)
specifier|public
name|String
name|appenderType
decl_stmt|;
comment|/**      * The maximum number of appends before resetting the appender.      *      *<p>If the value is small then the appender is reinitialized very often,      * making the instantiation of the appender the dominant operation of the      * benchmark.      */
annotation|@
name|Param
argument_list|(
block|{
literal|"1"
block|,
literal|"256"
block|,
literal|"512"
block|,
literal|"1024"
block|}
argument_list|)
specifier|public
name|int
name|maxAppends
decl_stmt|;
comment|/**      * The appender that is currently used.      */
specifier|private
name|Appendable
name|appender
decl_stmt|;
comment|/**      * The number of append operations performed so far.      */
specifier|private
name|int
name|nAppends
init|=
literal|0
decl_stmt|;
annotation|@
name|Setup
argument_list|(
name|Level
operator|.
name|Iteration
argument_list|)
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|nAppends
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|appenderType
operator|.
name|equals
argument_list|(
literal|"StringBuilder"
argument_list|)
condition|)
block|{
name|this
operator|.
name|appender
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|appenderType
operator|.
name|equals
argument_list|(
literal|"StringWriter"
argument_list|)
condition|)
block|{
name|this
operator|.
name|appender
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|appenderType
operator|.
name|equals
argument_list|(
literal|"PrintWriter"
argument_list|)
condition|)
block|{
name|this
operator|.
name|appender
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The specified appender type ("
operator|+
name|appenderType
operator|+
literal|") is not supported."
argument_list|)
throw|;
block|}
block|}
name|Appendable
name|getOrCreateAppender
parameter_list|()
block|{
if|if
condition|(
name|nAppends
operator|>=
name|maxAppends
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
name|nAppends
operator|++
expr_stmt|;
return|return
name|appender
return|;
block|}
block|}
annotation|@
name|Benchmark
specifier|public
name|StringBuilder
name|initStringBuilder
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
return|;
block|}
annotation|@
name|Benchmark
specifier|public
name|StringWriter
name|initStringWriter
parameter_list|()
block|{
return|return
operator|new
name|StringWriter
argument_list|()
return|;
block|}
annotation|@
name|Benchmark
specifier|public
name|PrintWriter
name|initPrintWriter
parameter_list|(
name|WriterState
name|writerState
parameter_list|)
block|{
return|return
operator|new
name|PrintWriter
argument_list|(
name|writerState
operator|.
name|writer
argument_list|)
return|;
block|}
comment|/**    * Benchmarks the performance of instantiating different {@link Appendable} objects and appending    * the same string a fixed number of times.    *    * @param bh blackhole used as an optimization fence    * @param appenderState the state holds the type of the appender and the number of appends that    * need to be performed before resetting the appender    * @throws IOException if the append operation encounters an I/O problem    */
annotation|@
name|Benchmark
specifier|public
name|void
name|appendString
parameter_list|(
name|Blackhole
name|bh
parameter_list|,
name|AppenderState
name|appenderState
parameter_list|)
throws|throws
name|IOException
block|{
name|bh
operator|.
name|consume
argument_list|(
name|appenderState
operator|.
name|getOrCreateAppender
argument_list|()
operator|.
name|append
argument_list|(
literal|"placeholder"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|RunnerException
block|{
name|Options
name|opt
init|=
operator|new
name|OptionsBuilder
argument_list|()
operator|.
name|include
argument_list|(
name|StringConstructBenchmark
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|detectJvmArgs
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|Runner
argument_list|(
name|opt
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

