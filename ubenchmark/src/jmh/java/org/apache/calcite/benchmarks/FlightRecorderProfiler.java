begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|benchmarks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|infra
operator|.
name|BenchmarkParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|infra
operator|.
name|IterationParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|profile
operator|.
name|ExternalProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|results
operator|.
name|BenchmarkResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|results
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Captures Flight Recorder log.  * Note: Flight Recorder is available in OracleJDK only.  * Usage of Flight Recorder in production requires a LICENSE FEE, however Flight Recorder is free  * for use in test systems.  * It is assumed you would not use Calcite benchmarks for running a production system, thus it is  * believed to be safe.  */
end_comment

begin_class
specifier|public
class|class
name|FlightRecorderProfiler
implements|implements
name|ExternalProfiler
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|addJVMInvokeOptions
parameter_list|(
name|BenchmarkParams
name|params
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|addJVMOptions
parameter_list|(
name|BenchmarkParams
name|params
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|params
operator|.
name|getParamsKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|param
argument_list|)
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|params
operator|.
name|getParam
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|duration
init|=
name|getDurationSeconds
argument_list|(
name|params
operator|.
name|getWarmup
argument_list|()
argument_list|)
operator|+
name|getDurationSeconds
argument_list|(
name|params
operator|.
name|getMeasurement
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-XX:+UnlockCommercialFeatures"
argument_list|,
literal|"-XX:+FlightRecorder"
argument_list|,
literal|"-XX:StartFlightRecording=settings=profile,duration="
operator|+
name|duration
operator|+
literal|"s,filename="
operator|+
name|params
operator|.
name|getBenchmark
argument_list|()
operator|+
literal|"_"
operator|+
name|sb
operator|+
literal|".jfr"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|getDurationSeconds
parameter_list|(
name|IterationParams
name|warmup
parameter_list|)
block|{
return|return
name|warmup
operator|.
name|getTime
argument_list|()
operator|.
name|convertTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|*
name|warmup
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeTrial
parameter_list|(
name|BenchmarkParams
name|benchmarkParams
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|?
extends|extends
name|Result
argument_list|>
name|afterTrial
parameter_list|(
name|BenchmarkResult
name|br
parameter_list|,
name|long
name|pid
parameter_list|,
name|File
name|stdOut
parameter_list|,
name|File
name|stdErr
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowPrintOut
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowPrintErr
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Collects Java Flight Recorder profile"
return|;
block|}
block|}
end_class

end_unit

