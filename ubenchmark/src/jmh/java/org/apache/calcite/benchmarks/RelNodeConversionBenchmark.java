begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|benchmarks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|Lex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Planner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Programs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Fork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Measurement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|OutputTimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Warmup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|profile
operator|.
name|GCProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|RunnerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|OptionsBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Benchmarks Conversion of Sql To RelNode and conversion of SqlNode to RelNode.  */
end_comment

begin_class
annotation|@
name|Fork
argument_list|(
name|value
operator|=
literal|1
argument_list|,
name|jvmArgsPrepend
operator|=
literal|"-Xmx2048m"
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|10
argument_list|,
name|time
operator|=
literal|100
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|10
argument_list|,
name|time
operator|=
literal|100
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Benchmark
argument_list|)
annotation|@
name|Threads
argument_list|(
literal|1
argument_list|)
specifier|public
class|class
name|RelNodeConversionBenchmark
block|{
comment|/**    * A common state needed for this benchmark.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|RelNodeConversionBenchmarkState
block|{
name|String
name|sql
decl_stmt|;
name|Planner
name|p
decl_stmt|;
specifier|public
name|void
name|setup
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|columnLength
parameter_list|)
block|{
comment|// Create Sql
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select 1 "
argument_list|)
expr_stmt|;
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|rnd
operator|.
name|setSeed
argument_list|(
literal|424242
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"c%s / CASE WHEN c%s> %d THEN c%s ELSE c%s END "
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|columnLength
argument_list|)
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|%
name|columnLength
argument_list|)
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
name|columnLength
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|columnLength
argument_list|)
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|columnLength
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" FROM test1"
argument_list|)
expr_stmt|;
name|sql
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// Create Schema and Table
name|AbstractTable
name|t
init|=
operator|new
name|AbstractQueryableTable
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|items
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|Integer
argument_list|>
name|enumerable
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|items
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|Queryable
argument_list|<
name|E
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|(
name|Queryable
argument_list|<
name|E
argument_list|>
operator|)
name|enumerable
operator|.
name|asQueryable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|RelDataTypeFactory
operator|.
name|Builder
name|builder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnLength
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"c%d"
argument_list|,
name|i
argument_list|)
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// Create Planner
specifier|final
name|SchemaPlus
name|schema
init|=
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"test1"
argument_list|,
name|t
argument_list|)
expr_stmt|;
specifier|final
name|FrameworkConfig
name|config
init|=
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|parserConfig
argument_list|(
name|SqlParser
operator|.
name|config
argument_list|()
operator|.
name|withLex
argument_list|(
name|Lex
operator|.
name|MYSQL
argument_list|)
argument_list|)
operator|.
name|defaultSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|programs
argument_list|(
name|Programs
operator|.
name|ofRules
argument_list|(
name|Programs
operator|.
name|RULE_SET
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|p
operator|=
name|Frameworks
operator|.
name|getPlanner
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A state holding information needed to parse.    */
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
specifier|public
specifier|static
class|class
name|SqlToRelNodeBenchmarkState
extends|extends
name|RelNodeConversionBenchmarkState
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"10000"
block|}
argument_list|)
name|int
name|length
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"100"
block|,
literal|"1000"
block|}
argument_list|)
name|int
name|columnLength
decl_stmt|;
annotation|@
name|Setup
argument_list|(
name|Level
operator|.
name|Iteration
argument_list|)
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|super
operator|.
name|setup
argument_list|(
name|length
argument_list|,
name|columnLength
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|parse
parameter_list|()
throws|throws
name|Exception
block|{
name|SqlNode
name|n
init|=
name|p
operator|.
name|parse
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|n
operator|=
name|p
operator|.
name|validate
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|RelNode
name|rel
init|=
name|p
operator|.
name|rel
argument_list|(
name|n
argument_list|)
operator|.
name|project
argument_list|()
decl_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
name|p
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|rel
return|;
block|}
block|}
annotation|@
name|Benchmark
specifier|public
name|RelNode
name|parse
parameter_list|(
name|SqlToRelNodeBenchmarkState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|state
operator|.
name|parse
argument_list|()
return|;
block|}
comment|/**    * A state holding information needed to convert To Rel.    */
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
specifier|public
specifier|static
class|class
name|SqlNodeToRelNodeBenchmarkState
extends|extends
name|RelNodeConversionBenchmarkState
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"10000"
block|}
argument_list|)
name|int
name|length
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"100"
block|,
literal|"1000"
block|}
argument_list|)
name|int
name|columnLength
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
annotation|@
name|Setup
argument_list|(
name|Level
operator|.
name|Iteration
argument_list|)
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|super
operator|.
name|setup
argument_list|(
name|length
argument_list|,
name|columnLength
argument_list|)
expr_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|p
operator|.
name|validate
argument_list|(
name|p
operator|.
name|parse
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|RelNode
name|convertToRel
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|p
operator|.
name|rel
argument_list|(
name|sqlNode
argument_list|)
operator|.
name|project
argument_list|()
return|;
block|}
block|}
annotation|@
name|Benchmark
specifier|public
name|RelNode
name|convertToRel
parameter_list|(
name|SqlNodeToRelNodeBenchmarkState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|state
operator|.
name|convertToRel
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|RunnerException
block|{
name|Options
name|opt
init|=
operator|new
name|OptionsBuilder
argument_list|()
operator|.
name|include
argument_list|(
name|RelNodeConversionBenchmark
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|addProfiler
argument_list|(
name|GCProfiler
operator|.
name|class
argument_list|)
operator|.
name|addProfiler
argument_list|(
name|FlightRecorderProfiler
operator|.
name|class
argument_list|)
operator|.
name|detectJvmArgs
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|Runner
argument_list|(
name|opt
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

