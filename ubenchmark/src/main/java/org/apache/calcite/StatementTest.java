begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|ReflectiveSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|GenerateMicroBenchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Compares {@link java.sql.Statement} vs {@link java.sql.PreparedStatement}.  *  *<p>This package contains micro-benchmarks to test calcite performance.  *  *<p>To run this and other benchmarks:  *  *<blockquote>  *<code>mvn package&amp;&amp;  *   java -jar ./target/ubenchmarks.jar -wi 5 -i 5 -f 1</code>  *</blockquote>  *  *<p>To run with profiling:  *  *<blockquote>  *<code>java -Djmh.stack.lines=10 -jar ./target/ubenchmarks.jar  *     -prof hs_comp,hs_gc,stack -f 1 -wi 5</code>  *</blockquote>  */
end_comment

begin_class
specifier|public
class|class
name|StatementTest
block|{
comment|/**    * Connection to be used during tests.    */
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
specifier|public
specifier|static
class|class
name|HrConnection
block|{
name|Connection
name|con
decl_stmt|;
name|int
name|id
decl_stmt|;
name|HrSchema
name|hr
init|=
operator|new
name|HrSchema
argument_list|()
decl_stmt|;
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.calcite.jdbc.Driver"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Connection
name|connection
decl_stmt|;
try|try
block|{
name|Properties
name|info
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"lex"
argument_list|,
literal|"JAVA"
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"quoting"
argument_list|,
literal|"DOUBLE_QUOTE"
argument_list|)
expr_stmt|;
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|CalciteConnection
name|calciteConnection
decl_stmt|;
try|try
block|{
name|calciteConnection
operator|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|calciteConnection
operator|.
name|setSchema
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|con
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Setup
argument_list|(
name|Level
operator|.
name|Iteration
argument_list|)
specifier|public
name|void
name|pickEmployee
parameter_list|()
block|{
name|id
operator|=
name|hr
operator|.
name|emps
index|[
name|rnd
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
index|]
operator|.
name|empid
expr_stmt|;
block|}
block|}
comment|/**    * Tests performance of reused execution of prepared statement.    */
specifier|public
specifier|static
class|class
name|HrPreparedStatement
extends|extends
name|HrConnection
block|{
name|PreparedStatement
name|ps
decl_stmt|;
block|{
try|try
block|{
name|ps
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select name from emps where empid = ?"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|GenerateMicroBenchmark
specifier|public
name|String
name|prepareBindExecute
parameter_list|(
name|HrConnection
name|state
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|con
init|=
name|state
operator|.
name|con
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|String
name|ename
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select name from emps where empid = ?"
argument_list|)
decl_stmt|;
name|st
operator|=
name|ps
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|id
argument_list|)
expr_stmt|;
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|ename
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|,
name|st
argument_list|)
expr_stmt|;
block|}
return|return
name|ename
return|;
block|}
annotation|@
name|GenerateMicroBenchmark
specifier|public
name|String
name|bindExecute
parameter_list|(
name|HrPreparedStatement
name|state
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|st
init|=
name|state
operator|.
name|ps
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|String
name|ename
init|=
literal|null
decl_stmt|;
try|try
block|{
name|st
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|id
argument_list|)
expr_stmt|;
name|rs
operator|=
name|st
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|ename
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Statement is not closed
block|}
return|return
name|ename
return|;
block|}
annotation|@
name|GenerateMicroBenchmark
specifier|public
name|String
name|executeQuery
parameter_list|(
name|HrConnection
name|state
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|con
init|=
name|state
operator|.
name|con
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|String
name|ename
init|=
literal|null
decl_stmt|;
try|try
block|{
name|st
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|rs
operator|=
name|st
operator|.
name|executeQuery
argument_list|(
literal|"select name from emps where empid = "
operator|+
name|state
operator|.
name|id
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|ename
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|,
name|st
argument_list|)
expr_stmt|;
block|}
return|return
name|ename
return|;
block|}
annotation|@
name|GenerateMicroBenchmark
specifier|public
name|String
name|forEach
parameter_list|(
name|HrConnection
name|state
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|Employee
index|[]
name|emps
init|=
name|state
operator|.
name|hr
operator|.
name|emps
decl_stmt|;
for|for
control|(
name|Employee
name|emp
range|:
name|emps
control|)
block|{
if|if
condition|(
name|emp
operator|.
name|empid
operator|==
name|state
operator|.
name|id
condition|)
block|{
return|return
name|emp
operator|.
name|name
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|Statement
name|st
parameter_list|)
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|/**/
block|}
block|}
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|/**/
block|}
block|}
block|}
comment|/** Pojo schema containing "emps" and "depts" tables. */
specifier|public
specifier|static
class|class
name|HrSchema
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HrSchema"
return|;
block|}
specifier|public
specifier|final
name|Employee
index|[]
name|emps
init|=
block|{
operator|new
name|Employee
argument_list|(
literal|100
argument_list|,
literal|10
argument_list|,
literal|"Bill"
argument_list|,
literal|10000
argument_list|,
literal|1000
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|200
argument_list|,
literal|20
argument_list|,
literal|"Eric"
argument_list|,
literal|8000
argument_list|,
literal|500
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|150
argument_list|,
literal|10
argument_list|,
literal|"Sebastian"
argument_list|,
literal|7000
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Employee
argument_list|(
literal|110
argument_list|,
literal|10
argument_list|,
literal|"Theodore"
argument_list|,
literal|11500
argument_list|,
literal|250
argument_list|)
block|,     }
decl_stmt|;
specifier|public
specifier|final
name|Department
index|[]
name|depts
init|=
block|{
operator|new
name|Department
argument_list|(
literal|10
argument_list|,
literal|"Sales"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|emps
index|[
literal|0
index|]
argument_list|,
name|emps
index|[
literal|2
index|]
argument_list|)
argument_list|)
block|,
operator|new
name|Department
argument_list|(
literal|30
argument_list|,
literal|"Marketing"
argument_list|,
name|Collections
operator|.
expr|<
name|Employee
operator|>
name|emptyList
argument_list|()
argument_list|)
block|,
operator|new
name|Department
argument_list|(
literal|40
argument_list|,
literal|"HR"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|emps
index|[
literal|1
index|]
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
block|}
comment|/** Employee record. */
specifier|public
specifier|static
class|class
name|Employee
block|{
specifier|public
specifier|final
name|int
name|empid
decl_stmt|;
specifier|public
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|float
name|salary
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|commission
decl_stmt|;
specifier|public
name|Employee
parameter_list|(
name|int
name|empid
parameter_list|,
name|int
name|deptno
parameter_list|,
name|String
name|name
parameter_list|,
name|float
name|salary
parameter_list|,
name|Integer
name|commission
parameter_list|)
block|{
name|this
operator|.
name|empid
operator|=
name|empid
expr_stmt|;
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|salary
operator|=
name|salary
expr_stmt|;
name|this
operator|.
name|commission
operator|=
name|commission
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Employee [empid: "
operator|+
name|empid
operator|+
literal|", deptno: "
operator|+
name|deptno
operator|+
literal|", name: "
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
block|}
comment|/** Department record. */
specifier|public
specifier|static
class|class
name|Department
block|{
specifier|public
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
decl_stmt|;
specifier|public
name|Department
parameter_list|(
name|int
name|deptno
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Employee
argument_list|>
name|employees
parameter_list|)
block|{
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|employees
operator|=
name|employees
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Department [deptno: "
operator|+
name|deptno
operator|+
literal|", name: "
operator|+
name|name
operator|+
literal|", employees: "
operator|+
name|employees
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End StatementTest.java
end_comment

end_unit

