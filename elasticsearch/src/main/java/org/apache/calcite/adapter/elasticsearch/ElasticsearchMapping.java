begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|JsonNodeFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Stores Elasticsearch  *<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">  * mapping</a> information for particular index. This information is  * extracted from {@code /$index/_mapping} endpoint.  *  *<p>Instances of this class are immutable.  */
end_comment

begin_class
class|class
name|ElasticsearchMapping
block|{
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Datatype
argument_list|>
name|mapping
decl_stmt|;
name|ElasticsearchMapping
parameter_list|(
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|index
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|mapping
argument_list|,
literal|"mapping"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Datatype
argument_list|>
name|transformed
init|=
name|mapping
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|,
name|e
lambda|->
operator|new
name|Datatype
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|mapping
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|transformed
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns ES schema for each field. Mapping is represented as field name    * {@code foo.bar.qux} and type ({@code keyword}, {@code boolean},    * {@code long}).    *    * @return immutable mapping between field and ES type    *    * @see<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html">Mapping Types</a>    */
name|Map
argument_list|<
name|String
argument_list|,
name|Datatype
argument_list|>
name|mapping
parameter_list|()
block|{
return|return
name|this
operator|.
name|mapping
return|;
block|}
comment|/**    * Used as special aggregation key for missing values (documents that are    * missing a field).    *    *<p>Buckets with that value are then converted to {@code null}s in flat    * tabular format.    *    * @see<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-sum-aggregation.html">Missing Value</a>    */
name|Optional
argument_list|<
name|JsonNode
argument_list|>
name|missingValueFor
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mapping
argument_list|()
operator|.
name|containsKey
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Field %s not defined for %s"
argument_list|,
name|fieldName
argument_list|,
name|index
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|mapping
argument_list|()
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|.
name|missingValue
argument_list|()
return|;
block|}
name|String
name|index
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
comment|/**    * Represents elastic data-type, like {@code long}, {@code keyword},    * {@code date} etc.    *    * @see<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html">Mapping Types</a>    */
specifier|static
class|class
name|Datatype
block|{
specifier|private
specifier|static
specifier|final
name|JsonNodeFactory
name|FACTORY
init|=
name|JsonNodeFactory
operator|.
name|instance
decl_stmt|;
comment|// pre-cache missing values
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|JsonNode
argument_list|>
name|MISSING_VALUES
init|=
name|Stream
operator|.
name|of
argument_list|(
literal|"string"
argument_list|,
comment|// for ES2
literal|"text"
argument_list|,
literal|"keyword"
argument_list|,
literal|"date"
argument_list|,
literal|"long"
argument_list|,
literal|"integer"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|map
argument_list|(
name|Datatype
operator|::
name|missingValueForType
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|JsonNode
name|missingValue
decl_stmt|;
specifier|private
name|Datatype
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|missingValueForType
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Mapping between ES type and json value that represents      * {@code missing value} during aggregations. This value can't be      * {@code null} and should match type or the field (for ES long type it      * also has to be json integer, for date it has to match date format or be      * integer (millis epoch) etc.      *      *<p>It is used for terms aggregations to represent SQL {@code null}.      *      * @param name name of the type ({@code long}, {@code keyword} ...)      *      * @return json that will be used in elastic search terms aggregation for      * missing value      *      * @see<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#_missing_value_13">Missing Value</a>      */
specifier|private
specifier|static
annotation|@
name|Nullable
name|JsonNode
name|missingValueForType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|name
condition|)
block|{
case|case
literal|"string"
case|:
comment|// for ES2
case|case
literal|"text"
case|:
case|case
literal|"keyword"
case|:
return|return
name|FACTORY
operator|.
name|textNode
argument_list|(
literal|"__MISSING__"
argument_list|)
return|;
case|case
literal|"long"
case|:
return|return
name|FACTORY
operator|.
name|numberNode
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
return|;
case|case
literal|"integer"
case|:
return|return
name|FACTORY
operator|.
name|numberNode
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
return|;
case|case
literal|"short"
case|:
return|return
name|FACTORY
operator|.
name|numberNode
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
return|;
case|case
literal|"double"
case|:
return|return
name|FACTORY
operator|.
name|numberNode
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
return|;
case|case
literal|"float"
case|:
return|return
name|FACTORY
operator|.
name|numberNode
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
return|;
case|case
literal|"date"
case|:
comment|// sentinel for missing dates: 9999-12-31
specifier|final
name|long
name|millisEpoch
init|=
name|LocalDate
operator|.
name|of
argument_list|(
literal|9999
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
operator|.
name|atStartOfDay
argument_list|()
operator|.
name|toInstant
argument_list|(
name|ZoneOffset
operator|.
name|UTC
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
decl_stmt|;
comment|// by default elastic returns dates as longs
return|return
name|FACTORY
operator|.
name|numberNode
argument_list|(
name|millisEpoch
argument_list|)
return|;
block|}
comment|// this is unknown type
return|return
literal|null
return|;
block|}
comment|/**      * Name of the type: {@code text}, {@code integer}, {@code float} etc.      */
name|String
name|name
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
name|Optional
argument_list|<
name|JsonNode
argument_list|>
name|missingValue
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|missingValue
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isMissingValue
parameter_list|(
name|JsonNode
name|node
parameter_list|)
block|{
return|return
name|MISSING_VALUES
operator|.
name|contains
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

