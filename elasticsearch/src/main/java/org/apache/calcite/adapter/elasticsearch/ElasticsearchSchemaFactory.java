begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Factory that creates an {@link ElasticsearchSchema}.  *  *<p>Allows a custom schema to be included in a model.json file.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
class|class
name|ElasticsearchSchemaFactory
implements|implements
name|SchemaFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ElasticsearchSchemaFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|REST_CLIENT_CACHE_SIZE
init|=
literal|100
decl_stmt|;
comment|// RestClient objects allocate system resources and are thread safe. Here, we cache
comment|// them using a key derived from the parameters that define a RestClient. The primary
comment|// reason to do this is to limit the resource leak that results from Calcite's
comment|// current inability to close clients that it creates.  Amongst the OS resources
comment|// leaked are file descriptors which are limited to 1024 per process by default on
comment|// Linux at the time of writing.
specifier|private
specifier|static
specifier|final
name|Cache
argument_list|<
name|List
argument_list|,
name|RestClient
argument_list|>
name|REST_CLIENTS
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|REST_CLIENT_CACHE_SIZE
argument_list|)
operator|.
name|removalListener
argument_list|(
operator|new
name|RemovalListener
argument_list|<
name|List
argument_list|,
name|RestClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|List
argument_list|,
name|RestClient
argument_list|>
name|notice
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Will close an ES REST client to keep the number of open clients under {}. "
operator|+
literal|"Any schema objects that might still have been relying on this client are now "
operator|+
literal|"broken! Do not try to access more than {} distinct ES REST APIs through this "
operator|+
literal|"adapter."
argument_list|,
name|REST_CLIENT_CACHE_SIZE
argument_list|,
name|REST_CLIENT_CACHE_SIZE
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Free resources allocated by this RestClient
name|notice
operator|.
name|getValue
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not close RestClient {}"
argument_list|,
name|notice
operator|.
name|getValue
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|public
name|ElasticsearchSchemaFactory
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Schema
name|create
parameter_list|(
name|SchemaPlus
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|operand
parameter_list|)
block|{
specifier|final
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|operand
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_SINGLE_QUOTES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|HttpHost
argument_list|>
name|hosts
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"hosts"
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|configHosts
init|=
name|mapper
operator|.
name|readValue
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"hosts"
argument_list|)
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{ }
argument_list|)
decl_stmt|;
name|hosts
operator|=
name|configHosts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|host
lambda|->
name|HttpHost
operator|.
name|create
argument_list|(
name|host
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"coordinates"
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|coordinates
init|=
name|mapper
operator|.
name|readValue
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"coordinates"
argument_list|)
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{ }
argument_list|)
decl_stmt|;
name|hosts
operator|=
name|coordinates
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
operator|new
name|HttpHost
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Prefer using hosts, coordinates is deprecated."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Both 'coordinates' and 'hosts' is missing in configuration. Provide one of them."
argument_list|)
throw|;
block|}
specifier|final
name|String
name|pathPrefix
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"pathPrefix"
argument_list|)
decl_stmt|;
comment|// create client
name|String
name|username
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
specifier|final
name|RestClient
name|client
init|=
name|connect
argument_list|(
name|hosts
argument_list|,
name|pathPrefix
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
specifier|final
name|String
name|index
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ElasticsearchSchema
argument_list|(
name|client
argument_list|,
operator|new
name|ObjectMapper
argument_list|()
argument_list|,
name|index
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot parse values from json"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Builds Elastic rest client from user configuration.    *    * @param hosts list of ES HTTP Hosts to connect to    * @param username the username of ES    * @param password the password of ES    * @return new or cached low-level rest http client for ES    */
specifier|private
specifier|static
name|RestClient
name|connect
parameter_list|(
name|List
argument_list|<
name|HttpHost
argument_list|>
name|hosts
parameter_list|,
name|String
name|pathPrefix
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hosts
argument_list|,
literal|"hosts or coordinates"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|hosts
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"no ES hosts specified"
argument_list|)
expr_stmt|;
comment|// Two lists are considered equal when all of their corresponding elements are equal
comment|// making a list of RestClient parms a suitable cache key.
name|List
name|cacheKey
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|hosts
argument_list|,
name|pathPrefix
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|REST_CLIENTS
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|Callable
argument_list|<
name|RestClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RestClient
name|call
parameter_list|()
block|{
name|RestClientBuilder
name|builder
init|=
name|RestClient
operator|.
name|builder
argument_list|(
name|hosts
operator|.
name|toArray
argument_list|(
operator|new
name|HttpHost
index|[
name|hosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|username
argument_list|)
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|CredentialsProvider
name|credentialsProvider
init|=
operator|new
name|BasicCredentialsProvider
argument_list|()
decl_stmt|;
name|credentialsProvider
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
operator|new
name|UsernamePasswordCredentials
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHttpClientConfigCallback
argument_list|(
name|httpClientBuilder
lambda|->
name|httpClientBuilder
operator|.
name|setDefaultCredentialsProvider
argument_list|(
name|credentialsProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pathPrefix
operator|!=
literal|null
operator|&&
operator|!
name|pathPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setPathPrefix
argument_list|(
name|pathPrefix
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot return a cached RestClient"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

