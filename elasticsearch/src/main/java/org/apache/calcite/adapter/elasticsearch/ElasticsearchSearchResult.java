begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Internal object used to parse elastic search result. Similar to {@code SearchHit}.  * Since we're using row-level rest client the response has to be processed manually.  */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|ElasticsearchSearchResult
block|{
specifier|private
specifier|final
name|SearchHits
name|hits
decl_stmt|;
specifier|private
specifier|final
name|long
name|took
decl_stmt|;
comment|/**    * Constructor for this instance.    * @param hits list of matched documents    * @param took time taken (in took) for this query to execute    */
annotation|@
name|JsonCreator
name|ElasticsearchSearchResult
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"hits"
argument_list|)
name|SearchHits
name|hits
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"took"
argument_list|)
name|long
name|took
parameter_list|)
block|{
name|this
operator|.
name|hits
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hits
argument_list|,
literal|"hits"
argument_list|)
expr_stmt|;
name|this
operator|.
name|took
operator|=
name|took
expr_stmt|;
block|}
specifier|public
name|SearchHits
name|searchHits
parameter_list|()
block|{
return|return
name|hits
return|;
block|}
specifier|public
name|Duration
name|took
parameter_list|()
block|{
return|return
name|Duration
operator|.
name|ofMillis
argument_list|(
name|took
argument_list|)
return|;
block|}
comment|/**    * Similar to {@code SearchHits} in ES. Container for {@link SearchHit}    */
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
class|class
name|SearchHits
block|{
specifier|private
specifier|final
name|long
name|total
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|SearchHit
argument_list|>
name|hits
decl_stmt|;
annotation|@
name|JsonCreator
name|SearchHits
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"total"
argument_list|)
specifier|final
name|long
name|total
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"hits"
argument_list|)
specifier|final
name|List
argument_list|<
name|SearchHit
argument_list|>
name|hits
parameter_list|)
block|{
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|hits
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hits
argument_list|,
literal|"hits"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SearchHit
argument_list|>
name|hits
parameter_list|()
block|{
return|return
name|this
operator|.
name|hits
return|;
block|}
specifier|public
name|long
name|total
parameter_list|()
block|{
return|return
name|total
return|;
block|}
block|}
comment|/**    * Concrete result record which matched the query. Similar to {@code SearchHit} in ES.    */
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
class|class
name|SearchHit
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
decl_stmt|;
annotation|@
name|JsonCreator
specifier|private
name|SearchHit
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"_id"
argument_list|)
specifier|final
name|String
name|id
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"_source"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"fields"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|id
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
comment|// both can't be null
if|if
condition|(
name|source
operator|==
literal|null
operator|&&
name|fields
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Both '_source' and 'fields' are missing for %s"
argument_list|,
name|id
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// both can't be non-null
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
name|fields
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Both '_source' and 'fields' are populated (non-null) for %s"
argument_list|,
name|id
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
comment|/**      * Returns id of this hit (usually document id)      * @return unique id      */
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Finds specific attribute from ES search result      * @param name attribute name      * @return value from result (_source or fields)      */
name|Object
name|value
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sourceOrFields
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Attribute %s not found in search result %s"
argument_list|,
name|name
argument_list|,
name|id
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
return|return
name|source
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
if|else if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|Object
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|instanceof
name|Iterable
condition|)
block|{
comment|// return first element (or null)
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
operator|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|field
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|iter
operator|.
name|hasNext
argument_list|()
condition|?
name|iter
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
return|return
name|field
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Shouldn't get here: "
operator|+
name|id
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|()
block|{
return|return
name|source
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceOrFields
parameter_list|()
block|{
return|return
name|source
operator|!=
literal|null
condition|?
name|source
else|:
name|fields
return|;
block|}
block|}
block|}
end_class

end_unit

