begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Identifies current ES version at runtime. Some queries have different syntax  * depending on version (eg. 2 vs 5).  */
end_comment

begin_enum
enum|enum
name|ElasticsearchVersion
block|{
name|ES2
argument_list|(
literal|2
argument_list|)
block|,
name|ES5
argument_list|(
literal|5
argument_list|)
block|,
name|ES6
argument_list|(
literal|6
argument_list|)
block|,
name|ES7
argument_list|(
literal|7
argument_list|)
block|,
name|UNKNOWN
argument_list|(
literal|0
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|elasticVersionMajor
decl_stmt|;
name|ElasticsearchVersion
parameter_list|(
specifier|final
name|int
name|elasticVersionMajor
parameter_list|)
block|{
name|this
operator|.
name|elasticVersionMajor
operator|=
name|elasticVersionMajor
expr_stmt|;
block|}
specifier|public
name|int
name|elasticVersionMajor
parameter_list|()
block|{
return|return
name|elasticVersionMajor
return|;
block|}
specifier|static
name|ElasticsearchVersion
name|fromString
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|version
argument_list|,
literal|"version"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|version
operator|.
name|matches
argument_list|(
literal|"\\d+\\.\\d+\\.\\d+"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Wrong version format. "
operator|+
literal|"Expected ${digit}.${digit}.${digit} but got %s"
argument_list|,
name|version
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// version format is: major.minor.revision
specifier|final
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|version
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|version
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|2
condition|)
block|{
return|return
name|ES2
return|;
block|}
if|else if
condition|(
name|major
operator|==
literal|5
condition|)
block|{
return|return
name|ES5
return|;
block|}
if|else if
condition|(
name|major
operator|==
literal|6
condition|)
block|{
return|return
name|ES6
return|;
block|}
if|else if
condition|(
name|major
operator|==
literal|7
condition|)
block|{
return|return
name|ES7
return|;
block|}
else|else
block|{
return|return
name|UNKNOWN
return|;
block|}
block|}
block|}
end_enum

begin_comment
comment|// End ElasticsearchVersion.java
end_comment

end_unit

