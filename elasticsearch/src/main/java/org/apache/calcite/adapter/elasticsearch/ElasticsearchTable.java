begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Table based on an Elasticsearch type.  */
end_comment

begin_class
specifier|public
class|class
name|ElasticsearchTable
extends|extends
name|AbstractElasticsearchTable
block|{
specifier|private
specifier|final
name|RestClient
name|restClient
decl_stmt|;
specifier|private
specifier|final
name|ElasticsearchVersion
name|version
decl_stmt|;
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
comment|/**    * Creates an ElasticsearchTable.    * @param client low-level ES rest client    * @param indexName elastic search index    * @param typeName elastic searh index type    */
name|ElasticsearchTable
parameter_list|(
name|RestClient
name|client
parameter_list|,
name|String
name|indexName
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|super
argument_list|(
name|indexName
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|restClient
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|client
argument_list|,
literal|"client"
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|version
operator|=
name|detectVersion
argument_list|(
name|client
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Couldn't detect ES version "
operator|+
literal|"for %s/%s"
argument_list|,
name|indexName
argument_list|,
name|typeName
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Detects current Elastic Search version by connecting to a existing instance.    * It is a {@code GET} request to {@code /}. Returned JSON has server information    * (including version).    *    * @param client low-level rest client connected to ES instance    * @param mapper Jackson mapper instance used to parse responses    * @return parsed version from ES, or {@link ElasticsearchVersion#UNKNOWN}    * @throws IOException if couldn't connect to ES    */
specifier|private
specifier|static
name|ElasticsearchVersion
name|detectVersion
parameter_list|(
name|RestClient
name|client
parameter_list|,
name|ObjectMapper
name|mapper
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpEntity
name|entity
init|=
name|client
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ElasticsearchVersion
operator|.
name|fromString
argument_list|(
name|node
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
operator|.
name|get
argument_list|(
literal|"number"
argument_list|)
operator|.
name|asText
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|scriptedFieldPrefix
parameter_list|()
block|{
comment|// ES2 vs ES5 scripted field difference
return|return
name|version
operator|==
name|ElasticsearchVersion
operator|.
name|ES2
condition|?
literal|"_source"
else|:
literal|"params._source"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|find
parameter_list|(
name|String
name|index
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ops
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|)
block|{
specifier|final
name|String
name|query
decl_stmt|;
if|if
condition|(
operator|!
name|ops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|=
literal|"{"
operator|+
name|Util
operator|.
name|toString
argument_list|(
name|ops
argument_list|,
literal|""
argument_list|,
literal|", "
argument_list|,
literal|""
argument_list|)
operator|+
literal|"}"
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
literal|"{}"
expr_stmt|;
block|}
try|try
block|{
name|ElasticsearchSearchResult
name|result
init|=
name|httpRequest
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Function1
argument_list|<
name|ElasticsearchSearchResult
operator|.
name|SearchHit
argument_list|,
name|Object
argument_list|>
name|getter
init|=
name|ElasticsearchEnumerators
operator|.
name|getter
argument_list|(
name|fields
argument_list|)
decl_stmt|;
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|result
operator|.
name|searchHits
argument_list|()
operator|.
name|hits
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|getter
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ElasticsearchSearchResult
name|httpRequest
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|query
argument_list|,
literal|"query"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"/%s/%s/_search"
argument_list|,
name|indexName
argument_list|,
name|typeName
argument_list|)
decl_stmt|;
name|HttpEntity
name|entity
init|=
operator|new
name|StringEntity
argument_list|(
name|query
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|restClient
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|uri
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
specifier|final
name|String
name|error
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Error while querying Elastic (on %s/%s) status: %s\nQuery:\n%s\nError:\n%s\n"
argument_list|,
name|response
operator|.
name|getHost
argument_list|()
argument_list|,
name|response
operator|.
name|getRequestLine
argument_list|()
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
argument_list|,
name|query
argument_list|,
name|error
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
try|try
init|(
name|InputStream
name|is
init|=
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
init|)
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|is
argument_list|,
name|ElasticsearchSearchResult
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ElasticsearchTable.java
end_comment

end_unit

