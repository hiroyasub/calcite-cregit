begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|annotation
operator|.
name|JsonDeserialize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|deser
operator|.
name|std
operator|.
name|StdDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ArrayNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  * Internal objects (and deserializers) used to parse Elasticsearch results  * (which are in JSON format).  *  *<p>Since we're using basic row-level rest client http response has to be  * processed manually using JSON (jackson) library.  */
end_comment

begin_class
specifier|final
class|class
name|ElasticsearchJson
block|{
specifier|private
name|ElasticsearchJson
parameter_list|()
block|{
block|}
comment|/**    * Visits leaves of the aggregation where all values are stored.    */
specifier|static
name|void
name|visitValueNodes
parameter_list|(
name|Aggregations
name|aggregations
parameter_list|,
name|Consumer
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|consumer
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|aggregations
argument_list|,
literal|"aggregations"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|consumer
argument_list|,
literal|"consumer"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|RowKey
argument_list|,
name|List
argument_list|<
name|MultiValue
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|BiConsumer
argument_list|<
name|RowKey
argument_list|,
name|MultiValue
argument_list|>
name|cons
init|=
parameter_list|(
name|r
parameter_list|,
name|v
parameter_list|)
lambda|->
name|rows
operator|.
name|computeIfAbsent
argument_list|(
name|r
argument_list|,
name|ignore
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|aggregations
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|visitValueNodes
argument_list|(
name|a
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|cons
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|val
lambda|->
name|val
operator|instanceof
name|GroupValue
argument_list|)
condition|)
block|{
name|v
operator|.
name|forEach
argument_list|(
name|tuple
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|groupRow
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|k
operator|.
name|keys
argument_list|)
argument_list|;
name|groupRow
operator|.
name|put
argument_list|(
name|tuple
operator|.
name|getName
argument_list|()
argument_list|,
name|tuple
operator|.
name|value
argument_list|()
argument_list|)
empty_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|groupRow
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|k
operator|.
name|keys
argument_list|)
decl_stmt|;
name|v
operator|.
name|forEach
argument_list|(
name|val
lambda|->
name|row
operator|.
name|put
argument_list|(
name|val
operator|.
name|getName
argument_list|()
argument_list|,
name|val
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**    * Visits Elasticsearch    *<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">mapping    * properties</a> and calls consumer for each {@code field / type} pair.    * Nested fields are represented as {@code foo.bar.qux}.    */
end_comment

begin_function
unit|static
name|void
name|visitMappingProperties
parameter_list|(
name|ObjectNode
name|mapping
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|consumer
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|mapping
argument_list|,
literal|"mapping"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|consumer
argument_list|,
literal|"consumer"
argument_list|)
expr_stmt|;
name|visitMappingProperties
argument_list|(
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
argument_list|,
name|mapping
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|visitMappingProperties
parameter_list|(
name|Deque
argument_list|<
name|String
argument_list|>
name|path
parameter_list|,
name|ObjectNode
name|mapping
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|consumer
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|mapping
argument_list|,
literal|"mapping"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapping
operator|.
name|isMissingNode
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|mapping
operator|.
name|has
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
comment|// recurse
name|visitMappingProperties
argument_list|(
name|path
argument_list|,
operator|(
name|ObjectNode
operator|)
name|mapping
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mapping
operator|.
name|has
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
comment|// this is leaf (register field / type mapping)
name|consumer
operator|.
name|accept
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|"."
argument_list|,
name|path
argument_list|)
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
operator|.
name|asText
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// otherwise continue visiting mapping(s)
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|iter
init|=
name|mapping
operator|::
name|fields
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
range|:
name|iter
control|)
block|{
specifier|final
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|ObjectNode
name|node
init|=
operator|(
name|ObjectNode
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|visitMappingProperties
argument_list|(
name|path
argument_list|,
name|node
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|path
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Identifies a calcite row (as in relational algebra)    */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|RowKey
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|keys
decl_stmt|;
specifier|private
specifier|final
name|int
name|hashCode
decl_stmt|;
specifier|private
name|RowKey
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|keys
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|keys
argument_list|,
literal|"keys"
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|Objects
operator|.
name|hashCode
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RowKey
parameter_list|(
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|)
block|{
name|this
argument_list|(
name|toMap
argument_list|(
name|buckets
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|(
name|Iterable
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|)
block|{
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|buckets
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|collect
argument_list|(
name|LinkedHashMap
operator|::
operator|new
argument_list|,
parameter_list|(
name|m
parameter_list|,
name|v
parameter_list|)
lambda|->
name|m
operator|.
name|put
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|,
name|v
operator|.
name|key
argument_list|()
argument_list|)
argument_list|,
name|LinkedHashMap
operator|::
name|putAll
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RowKey
name|rowKey
init|=
operator|(
name|RowKey
operator|)
name|o
decl_stmt|;
return|return
name|hashCode
operator|==
name|rowKey
operator|.
name|hashCode
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|keys
argument_list|,
name|rowKey
operator|.
name|keys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|hashCode
return|;
block|}
block|}
end_class

begin_function
specifier|private
specifier|static
name|void
name|visitValueNodes
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|,
name|List
argument_list|<
name|Bucket
argument_list|>
name|parents
parameter_list|,
name|BiConsumer
argument_list|<
name|RowKey
argument_list|,
name|MultiValue
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|aggregation
operator|instanceof
name|MultiValue
condition|)
block|{
comment|// this is a leaf. publish value of the row.
name|RowKey
name|key
init|=
operator|new
name|RowKey
argument_list|(
name|parents
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|key
argument_list|,
operator|(
name|MultiValue
operator|)
name|aggregation
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|aggregation
operator|instanceof
name|Bucket
condition|)
block|{
name|Bucket
name|bucket
init|=
operator|(
name|Bucket
operator|)
name|aggregation
decl_stmt|;
if|if
condition|(
name|bucket
operator|.
name|hasNoAggregations
argument_list|()
condition|)
block|{
comment|// bucket with no aggregations is also considered a leaf node
name|visitValueNodes
argument_list|(
name|GroupValue
operator|.
name|of
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|bucket
operator|.
name|key
argument_list|()
argument_list|)
argument_list|,
name|parents
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
return|return;
block|}
name|parents
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|visitValueNodes
argument_list|(
name|a
argument_list|,
name|parents
argument_list|,
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
name|parents
operator|.
name|remove
argument_list|(
name|parents
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|aggregation
operator|instanceof
name|HasAggregations
condition|)
block|{
name|HasAggregations
name|children
init|=
operator|(
name|HasAggregations
operator|)
name|aggregation
decl_stmt|;
name|children
operator|.
name|getAggregations
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|visitValueNodes
argument_list|(
name|a
argument_list|,
name|parents
argument_list|,
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|aggregation
operator|instanceof
name|MultiBucketsAggregation
condition|)
block|{
name|MultiBucketsAggregation
name|multi
init|=
operator|(
name|MultiBucketsAggregation
operator|)
name|aggregation
decl_stmt|;
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|forEach
argument_list|(
name|b
lambda|->
name|visitValueNodes
argument_list|(
name|b
argument_list|,
name|parents
argument_list|,
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Response from Elastic    */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
specifier|static
class|class
name|Result
block|{
specifier|private
specifier|final
name|SearchHits
name|hits
decl_stmt|;
specifier|private
specifier|final
name|Aggregations
name|aggregations
decl_stmt|;
specifier|private
specifier|final
name|String
name|scrollId
decl_stmt|;
specifier|private
specifier|final
name|long
name|took
decl_stmt|;
comment|/**      * Constructor for this instance.      * @param hits list of matched documents      * @param took time taken (in took) for this query to execute      */
annotation|@
name|JsonCreator
name|Result
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"hits"
argument_list|)
name|SearchHits
name|hits
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"aggregations"
argument_list|)
name|Aggregations
name|aggregations
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"_scroll_id"
argument_list|)
name|String
name|scrollId
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"took"
argument_list|)
name|long
name|took
parameter_list|)
block|{
name|this
operator|.
name|hits
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hits
argument_list|,
literal|"hits"
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
name|this
operator|.
name|scrollId
operator|=
name|scrollId
expr_stmt|;
name|this
operator|.
name|took
operator|=
name|took
expr_stmt|;
block|}
name|SearchHits
name|searchHits
parameter_list|()
block|{
return|return
name|hits
return|;
block|}
name|Aggregations
name|aggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
name|Duration
name|took
parameter_list|()
block|{
return|return
name|Duration
operator|.
name|ofMillis
argument_list|(
name|took
argument_list|)
return|;
block|}
name|Optional
argument_list|<
name|String
argument_list|>
name|scrollId
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|scrollId
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Similar to {@code SearchHits} in ES. Container for {@link SearchHit}    */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
specifier|static
class|class
name|SearchHits
block|{
specifier|private
specifier|final
name|long
name|total
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|SearchHit
argument_list|>
name|hits
decl_stmt|;
annotation|@
name|JsonCreator
name|SearchHits
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"total"
argument_list|)
specifier|final
name|long
name|total
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"hits"
argument_list|)
specifier|final
name|List
argument_list|<
name|SearchHit
argument_list|>
name|hits
parameter_list|)
block|{
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|hits
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hits
argument_list|,
literal|"hits"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SearchHit
argument_list|>
name|hits
parameter_list|()
block|{
return|return
name|this
operator|.
name|hits
return|;
block|}
specifier|public
name|long
name|total
parameter_list|()
block|{
return|return
name|total
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Concrete result record which matched the query. Similar to {@code SearchHit} in ES.    */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
specifier|static
class|class
name|SearchHit
block|{
comment|/**      * ID of the document (not available in aggregations)      */
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
decl_stmt|;
annotation|@
name|JsonCreator
name|SearchHit
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
name|ElasticsearchConstants
operator|.
name|ID
argument_list|)
specifier|final
name|String
name|id
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"_source"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"fields"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|id
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
comment|// both can't be null
if|if
condition|(
name|source
operator|==
literal|null
operator|&&
name|fields
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Both '_source' and 'fields' are missing for %s"
argument_list|,
name|id
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// both can't be non-null
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
name|fields
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Both '_source' and 'fields' are populated (non-null) for %s"
argument_list|,
name|id
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
comment|/**      * Returns id of this hit (usually document id)      * @return unique id      */
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
name|Object
name|valueOrNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Object
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|instanceof
name|Iterable
condition|)
block|{
comment|// return first element (or null)
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
operator|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|field
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|iter
operator|.
name|hasNext
argument_list|()
condition|?
name|iter
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
return|return
name|field
return|;
block|}
return|return
name|valueFromPath
argument_list|(
name|source
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns property from nested maps given a path like {@code a.b.c}.      * @param map current map      * @param path field path(s), optionally with dots ({@code a.b.c}).      * @return value located at path {@code path} or {@code null} if not found.      */
specifier|private
specifier|static
name|Object
name|valueFromPath
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|// maybe pattern of type a.b.c
specifier|final
name|int
name|index
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|prefix
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
specifier|final
name|String
name|suffix
init|=
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Object
name|maybeMap
init|=
name|map
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeMap
operator|instanceof
name|Map
condition|)
block|{
return|return
name|valueFromPath
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|maybeMap
argument_list|,
name|suffix
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|()
block|{
return|return
name|source
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceOrFields
parameter_list|()
block|{
return|return
name|source
operator|!=
literal|null
condition|?
name|source
else|:
name|fields
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * {@link Aggregation} container.    */
end_comment

begin_class
annotation|@
name|JsonDeserialize
argument_list|(
name|using
operator|=
name|AggregationsDeserializer
operator|.
name|class
argument_list|)
specifier|static
class|class
name|Aggregations
implements|implements
name|Iterable
argument_list|<
name|Aggregation
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Aggregation
argument_list|>
name|aggregations
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|aggregationsAsMap
decl_stmt|;
name|Aggregations
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Aggregation
argument_list|>
name|aggregations
parameter_list|)
block|{
name|this
operator|.
name|aggregations
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|aggregations
argument_list|,
literal|"aggregations"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Iterates over the {@link Aggregation}s.      */
annotation|@
name|Override
specifier|public
specifier|final
name|Iterator
argument_list|<
name|Aggregation
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|asList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * The list of {@link Aggregation}s.      */
specifier|final
name|List
argument_list|<
name|Aggregation
argument_list|>
name|asList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|aggregations
argument_list|)
return|;
block|}
comment|/**      * Returns the {@link Aggregation}s keyed by aggregation name. Lazy init.      */
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|asMap
parameter_list|()
block|{
if|if
condition|(
name|aggregationsAsMap
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Aggregation
name|aggregation
range|:
name|aggregations
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|aggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|aggregation
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|aggregationsAsMap
operator|=
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregationsAsMap
return|;
block|}
comment|/**      * Returns the aggregation that is associated with the specified name.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|final
parameter_list|<
name|A
extends|extends
name|Aggregation
parameter_list|>
name|A
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|A
operator|)
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|aggregations
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Aggregations
operator|)
name|obj
operator|)
operator|.
name|aggregations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|aggregations
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Identifies all aggregations    */
end_comment

begin_interface
interface|interface
name|Aggregation
block|{
comment|/**      * @return The name of this aggregation.      */
name|String
name|getName
parameter_list|()
function_decl|;
block|}
end_interface

begin_comment
comment|/**    * Allows traversing aggregations tree    */
end_comment

begin_interface
interface|interface
name|HasAggregations
block|{
name|Aggregations
name|getAggregations
parameter_list|()
function_decl|;
block|}
end_interface

begin_comment
comment|/**    * An aggregation that returns multiple buckets    */
end_comment

begin_class
specifier|static
class|class
name|MultiBucketsAggregation
implements|implements
name|Aggregation
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
decl_stmt|;
name|MultiBucketsAggregation
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|buckets
operator|=
name|buckets
expr_stmt|;
block|}
comment|/**      * @return  The buckets of this aggregation.      */
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|()
block|{
return|return
name|buckets
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * A bucket represents a criteria to which all documents that fall in it adhere to.    * It is also uniquely identified    * by a key, and can potentially hold sub-aggregations computed over all documents in it.    */
end_comment

begin_class
specifier|static
class|class
name|Bucket
implements|implements
name|HasAggregations
implements|,
name|Aggregation
block|{
specifier|private
specifier|final
name|Object
name|key
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Aggregations
name|aggregations
decl_stmt|;
name|Bucket
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Aggregations
name|aggregations
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
comment|// key can be set after construction
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregations
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|aggregations
argument_list|,
literal|"aggregations"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return The key associated with the bucket      */
name|Object
name|key
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * @return The key associated with the bucket as a string      */
name|String
name|keyAsString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toString
argument_list|(
name|key
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Means current bucket has no aggregations.      */
name|boolean
name|hasNoAggregations
parameter_list|()
block|{
return|return
name|aggregations
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * @return  The sub-aggregations of this bucket      */
annotation|@
name|Override
specifier|public
name|Aggregations
name|getAggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Multi value aggregatoin like    *<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-stats-aggregation.html">Stats</a>    */
end_comment

begin_class
specifier|static
class|class
name|MultiValue
implements|implements
name|Aggregation
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
decl_stmt|;
name|MultiValue
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|values
argument_list|,
literal|"values"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|values
return|;
block|}
comment|/**      * For single value. Returns single value represented by this leaf aggregation.      * @return value corresponding to {@code value}      */
name|Object
name|value
parameter_list|()
block|{
if|if
condition|(
operator|!
name|values
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"'value' field not present in "
operator|+
literal|"%s aggregation"
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|values
argument_list|()
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Distinguishes from {@link MultiValue}.    * In order that rows which have the same key can be put into result map.    */
end_comment

begin_class
specifier|static
class|class
name|GroupValue
extends|extends
name|MultiValue
block|{
name|GroupValue
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a {@link GroupValue} instance with a single value.      */
specifier|static
name|GroupValue
name|of
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|GroupValue
argument_list|(
name|name
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Allows to de-serialize nested aggregation structures.    */
end_comment

begin_class
specifier|static
class|class
name|AggregationsDeserializer
extends|extends
name|StdDeserializer
argument_list|<
name|Aggregations
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|IGNORE_TOKENS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"meta"
argument_list|,
literal|"buckets"
argument_list|,
literal|"value"
argument_list|,
literal|"values"
argument_list|,
literal|"value_as_string"
argument_list|,
literal|"doc_count"
argument_list|,
literal|"key"
argument_list|,
literal|"key_as_string"
argument_list|)
decl_stmt|;
name|AggregationsDeserializer
parameter_list|()
block|{
name|super
argument_list|(
name|Aggregations
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Aggregations
name|deserialize
parameter_list|(
specifier|final
name|JsonParser
name|parser
parameter_list|,
specifier|final
name|DeserializationContext
name|ctxt
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectNode
name|node
init|=
name|parser
operator|.
name|getCodec
argument_list|()
operator|.
name|readTree
argument_list|(
name|parser
argument_list|)
decl_stmt|;
return|return
name|parseAggregations
argument_list|(
name|parser
argument_list|,
name|node
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Aggregations
name|parseAggregations
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|ObjectNode
name|node
parameter_list|)
throws|throws
name|JsonProcessingException
block|{
name|List
argument_list|<
name|Aggregation
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|iter
init|=
name|node
operator|::
name|fields
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|entry
range|:
name|iter
control|)
block|{
specifier|final
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|JsonNode
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Aggregation
name|agg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|has
argument_list|(
literal|"buckets"
argument_list|)
condition|)
block|{
name|agg
operator|=
name|parseBuckets
argument_list|(
name|parser
argument_list|,
name|name
argument_list|,
operator|(
name|ArrayNode
operator|)
name|value
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|.
name|isObject
argument_list|()
operator|&&
operator|!
name|IGNORE_TOKENS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// leaf
name|agg
operator|=
name|parseValue
argument_list|(
name|parser
argument_list|,
name|name
argument_list|,
operator|(
name|ObjectNode
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|agg
operator|!=
literal|null
condition|)
block|{
name|aggregations
operator|.
name|add
argument_list|(
name|agg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Aggregations
argument_list|(
name|aggregations
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|MultiValue
name|parseValue
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|String
name|name
parameter_list|,
name|ObjectNode
name|node
parameter_list|)
throws|throws
name|JsonProcessingException
block|{
return|return
operator|new
name|MultiValue
argument_list|(
name|name
argument_list|,
name|parser
operator|.
name|getCodec
argument_list|()
operator|.
name|treeToValue
argument_list|(
name|node
argument_list|,
name|Map
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Aggregation
name|parseBuckets
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|String
name|name
parameter_list|,
name|ArrayNode
name|nodes
parameter_list|)
throws|throws
name|JsonProcessingException
block|{
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|JsonNode
name|b
range|:
name|nodes
control|)
block|{
name|buckets
operator|.
name|add
argument_list|(
name|parseBucket
argument_list|(
name|parser
argument_list|,
name|name
argument_list|,
operator|(
name|ObjectNode
operator|)
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MultiBucketsAggregation
argument_list|(
name|name
argument_list|,
name|buckets
argument_list|)
return|;
block|}
comment|/**      * Determines if current key is a missing field key. Missing key is returned when document      * does not have pivoting attribute (example {@code GROUP BY _MAP['a.b.missing']}). It helps      * grouping documents which don't have a field. In relational algebra this      * would normally be {@code null}.      *      *<p>Please note that missing value is different for each type.      *      * @param key current {@code key} (usually string) as returned by ES      * @return {@code true} if this value      */
specifier|private
specifier|static
name|boolean
name|isMissingBucket
parameter_list|(
name|JsonNode
name|key
parameter_list|)
block|{
return|return
name|ElasticsearchMapping
operator|.
name|Datatype
operator|.
name|isMissingValue
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Bucket
name|parseBucket
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|String
name|name
parameter_list|,
name|ObjectNode
name|node
parameter_list|)
throws|throws
name|JsonProcessingException
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|has
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No 'key' attribute for "
operator|+
name|node
argument_list|)
throw|;
block|}
specifier|final
name|JsonNode
name|keyNode
init|=
name|node
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
decl_stmt|;
if|if
condition|(
name|isMissingBucket
argument_list|(
name|keyNode
argument_list|)
operator|||
name|keyNode
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|key
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|keyNode
operator|.
name|isTextual
argument_list|()
condition|)
block|{
name|key
operator|=
name|keyNode
operator|.
name|textValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|keyNode
operator|.
name|isNumber
argument_list|()
condition|)
block|{
name|key
operator|=
name|keyNode
operator|.
name|numberValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|keyNode
operator|.
name|isBoolean
argument_list|()
condition|)
block|{
name|key
operator|=
name|keyNode
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// don't usually expect keys to be Objects
name|key
operator|=
name|parser
operator|.
name|getCodec
argument_list|()
operator|.
name|treeToValue
argument_list|(
name|node
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Bucket
argument_list|(
name|key
argument_list|,
name|name
argument_list|,
name|parseAggregations
argument_list|(
name|parser
argument_list|,
name|node
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
unit|}
comment|// End ElasticsearchJson.java
end_comment

end_unit

