begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItems
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsCollectionContaining
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Testing correct parsing of JSON (elasticsearch) response.  */
end_comment

begin_class
specifier|public
class|class
name|ElasticsearchJsonTest
block|{
specifier|private
name|ObjectMapper
name|mapper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_UNQUOTED_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_SINGLE_QUOTES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{}"
decl_stmt|;
name|ElasticsearchJson
operator|.
name|Aggregations
name|a
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|ElasticsearchJson
operator|.
name|Aggregations
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggSingle1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{agg1: {value: '111'}}"
decl_stmt|;
name|ElasticsearchJson
operator|.
name|Aggregations
name|a
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|ElasticsearchJson
operator|.
name|Aggregations
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"agg1"
argument_list|,
name|a
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"agg1"
argument_list|,
name|a
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"111"
argument_list|,
operator|(
operator|(
name|ElasticsearchJson
operator|.
name|MultiValue
operator|)
name|a
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ElasticsearchJson
operator|.
name|visitValueNodes
argument_list|(
name|a
argument_list|,
name|rows
operator|::
name|add
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"agg1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"111"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggMultiValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{ agg1: {min: 0, max: 2, avg: 2.33}}"
decl_stmt|;
name|ElasticsearchJson
operator|.
name|Aggregations
name|a
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|ElasticsearchJson
operator|.
name|Aggregations
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"agg1"
argument_list|,
name|a
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
operator|(
operator|(
name|ElasticsearchJson
operator|.
name|MultiValue
operator|)
name|a
operator|.
name|get
argument_list|(
literal|"agg1"
argument_list|)
operator|)
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"min"
argument_list|,
literal|"max"
argument_list|,
literal|"avg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggSingle2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{ agg1: {value: 'foo'}, agg2: {value: 42}}"
decl_stmt|;
name|ElasticsearchJson
operator|.
name|Aggregations
name|a
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|ElasticsearchJson
operator|.
name|Aggregations
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|a
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|a
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"agg1"
argument_list|,
literal|"agg2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggBuckets1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{ groupby: {buckets: [{key:'k1', doc_count:0, myagg:{value: 1.1}},"
operator|+
literal|" {key:'k2', myagg:{value: 2.2}}] }}"
decl_stmt|;
name|ElasticsearchJson
operator|.
name|Aggregations
name|a
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|ElasticsearchJson
operator|.
name|Aggregations
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItem
argument_list|(
literal|"groupby"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|get
argument_list|(
literal|"groupby"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchJson
operator|.
name|MultiBucketsAggregation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchJson
operator|.
name|MultiBucketsAggregation
name|multi
init|=
name|a
operator|.
name|get
argument_list|(
literal|"groupby"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"groupby"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|keyAsString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|keyAsString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggManyAggregations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{groupby:{buckets:["
operator|+
literal|"{key:'k1', a1:{value:1}, a2:{value:2}},"
operator|+
literal|"{key:'k2', a1:{value:3}, a2:{value:4}}"
operator|+
literal|"]}}"
decl_stmt|;
name|ElasticsearchJson
operator|.
name|Aggregations
name|a
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|ElasticsearchJson
operator|.
name|Aggregations
operator|.
name|class
argument_list|)
decl_stmt|;
name|ElasticsearchJson
operator|.
name|MultiBucketsAggregation
name|multi
init|=
name|a
operator|.
name|get
argument_list|(
literal|"groupby"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"groupby"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"groupby"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multi
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ElasticsearchJson
operator|.
name|visitValueNodes
argument_list|(
name|a
argument_list|,
name|rows
operator|::
name|add
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"groupby"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|aggMultiBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{col1: {buckets: ["
operator|+
literal|"{col2: {doc_count:1, buckets:[{key:'k3', max:{value:41}}]}, key:'k1'},"
operator|+
literal|"{col2: {buckets:[{key:'k4', max:{value:42}}], doc_count:1}, key:'k2'}"
operator|+
literal|"]}}"
decl_stmt|;
name|ElasticsearchJson
operator|.
name|Aggregations
name|a
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|ElasticsearchJson
operator|.
name|Aggregations
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItem
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|get
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchJson
operator|.
name|MultiBucketsAggregation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchJson
operator|.
name|MultiBucketsAggregation
name|m
init|=
name|a
operator|.
name|get
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|buckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItem
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ElasticsearchJson
operator|.
name|visitValueNodes
argument_list|(
name|a
argument_list|,
name|rows
operator|::
name|add
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"max"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"col2"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"k3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|41
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"max"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"col2"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"k4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ElasticsearchJsonTest.java
end_comment

end_unit

