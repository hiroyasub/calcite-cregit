begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Check that internal queries are correctly converted to ES search query (as JSON)  */
end_comment

begin_class
specifier|public
class|class
name|QueryBuildersTest
block|{
specifier|private
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
comment|/**    * Test for simple scalar terms (boolean, int etc.)    * @throws Exception not expected    */
annotation|@
name|Test
specifier|public
name|void
name|term
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":\"bar\"}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"bar\":\"foo\"}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":\"A\"}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|'A'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":true}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":false}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":0}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":123}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|long
operator|)
literal|123
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":41}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|short
operator|)
literal|41
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":42.42}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|42.42D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":1.1}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|1.1F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":1}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":121}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BigInteger
argument_list|(
literal|"121"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":111}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|111
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":222}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|222
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"term\":{\"foo\":true}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|terms
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"foo\":[]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"bar\":[]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"bar"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"singleton\":[0]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"singleton"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"foo\":[true]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"foo\":[\"bar\"]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"foo\":[\"bar\"]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"foo\":[true,false]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"foo\":[1,2,3]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"terms\":{\"foo\":[1.1,2.2,3.3]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.1
argument_list|,
literal|2.2
argument_list|,
literal|3.3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|boolQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryBuilders
operator|.
name|QueryBuilder
name|q1
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"bool\":{\"must\":{\"term\":{\"foo\":\"bar\"}}}}"
argument_list|,
name|toJson
argument_list|(
name|q1
argument_list|)
argument_list|)
expr_stmt|;
name|QueryBuilders
operator|.
name|QueryBuilder
name|q2
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"f2"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"bool\":{\"must\":[{\"term\":{\"f1\":\"v1\"}},{\"term\":{\"f2\":\"v2\"}}]}}"
argument_list|,
name|toJson
argument_list|(
name|q2
argument_list|)
argument_list|)
expr_stmt|;
name|QueryBuilders
operator|.
name|QueryBuilder
name|q3
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|mustNot
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"bool\":{\"must_not\":{\"term\":{\"f1\":\"v1\"}}}}"
argument_list|,
name|toJson
argument_list|(
name|q3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|exists
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"{\"exists\":{\"field\":\"foo\"}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|existsQuery
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|range
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"lt\":0}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|lt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gt\":0}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gte\":0}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gte
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"lte\":0}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|lte
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gt\":1,\"lt\":2}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gt
argument_list|(
literal|1
argument_list|)
operator|.
name|lt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gt\":11,\"lt\":0}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|lt
argument_list|(
literal|0
argument_list|)
operator|.
name|gt
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gt\":1,\"lte\":2}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gt
argument_list|(
literal|1
argument_list|)
operator|.
name|lte
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gte\":1,\"lte\":\"zz\"}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gte
argument_list|(
literal|1
argument_list|)
operator|.
name|lte
argument_list|(
literal|"zz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gte\":1}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gte
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gte\":\"zz\"}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gte
argument_list|(
literal|"zz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gt\":\"a\",\"lt\":\"z\"}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gt
argument_list|(
literal|"a"
argument_list|)
operator|.
name|lt
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"gte\":3}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|gt
argument_list|(
literal|1
argument_list|)
operator|.
name|gt
argument_list|(
literal|2
argument_list|)
operator|.
name|gte
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"range\":{\"f\":{\"lte\":3}}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"f"
argument_list|)
operator|.
name|lt
argument_list|(
literal|1
argument_list|)
operator|.
name|lt
argument_list|(
literal|2
argument_list|)
operator|.
name|lte
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchAll
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"{\"match_all\":{}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|matchAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|match
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"{\"match\":{\"foo\":[\"bar\"]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|matchesQuery
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"match\":{\"foo\":[true]}}"
argument_list|,
name|toJson
argument_list|(
name|QueryBuilders
operator|.
name|matchesQuery
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|toJson
parameter_list|(
name|QueryBuilders
operator|.
name|QueryBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JsonGenerator
name|gen
init|=
name|mapper
operator|.
name|getFactory
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|builder
operator|.
name|writeJson
argument_list|(
name|gen
argument_list|)
expr_stmt|;
name|gen
operator|.
name|flush
argument_list|()
expr_stmt|;
name|gen
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End QueryBuildersTest.java
end_comment

end_unit

