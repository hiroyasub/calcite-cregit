begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|splunk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utilities for connecting to Splunk via HTTP.  */
end_comment

begin_class
specifier|public
class|class
name|HttpUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|StringUtils
operator|.
name|getClassTracer
argument_list|(
name|HttpUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|HttpURLConnection
name|getURLConnection
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|URLConnection
name|conn
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
specifier|final
name|HttpURLConnection
name|httpConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|conn
decl_stmt|;
comment|// take care of https stuff - most of the time it's only needed to
comment|// secure client/server comm
comment|// not to establish the identity of the server
if|if
condition|(
name|httpConn
operator|instanceof
name|HttpsURLConnection
condition|)
block|{
name|HttpsURLConnection
name|httpsConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|httpConn
decl_stmt|;
name|httpsConn
operator|.
name|setSSLSocketFactory
argument_list|(
name|TrustAllSslSocketFactory
operator|.
name|createSSLSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
name|httpsConn
operator|.
name|setHostnameVerifier
argument_list|(
operator|new
name|HostnameVerifier
argument_list|()
block|{
specifier|public
name|boolean
name|verify
parameter_list|(
name|String
name|arg0
parameter_list|,
name|SSLSession
name|arg1
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|httpConn
return|;
block|}
specifier|public
specifier|static
name|void
name|appendURLEncodedArgs
parameter_list|(
name|StringBuilder
name|out
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|me
range|:
name|args
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|me
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|me
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|public
specifier|static
name|void
name|appendURLEncodedArgs
parameter_list|(
name|StringBuilder
name|out
parameter_list|,
name|CharSequence
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"args should contain an even number of items"
argument_list|)
throw|;
block|}
try|try
block|{
name|int
name|appended
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|appended
operator|++
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|args
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|Closeable
name|c
parameter_list|)
block|{
try|try
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|public
specifier|static
name|InputStream
name|post
parameter_list|(
name|String
name|url
parameter_list|,
name|CharSequence
name|data
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|post
argument_list|(
name|url
argument_list|,
name|data
argument_list|,
name|headers
argument_list|,
literal|10000
argument_list|,
literal|60000
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|post
parameter_list|(
name|String
name|url
parameter_list|,
name|CharSequence
name|data
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|int
name|cTimeout
parameter_list|,
name|int
name|rTimeout
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeMethod
argument_list|(
literal|"POST"
argument_list|,
name|url
argument_list|,
name|data
argument_list|,
name|headers
argument_list|,
name|cTimeout
argument_list|,
name|rTimeout
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|executeMethod
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|url
parameter_list|,
name|CharSequence
name|data
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|int
name|ctimeout
parameter_list|,
name|int
name|rtimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|conn
decl_stmt|;
name|OutputStreamWriter
name|wr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getURLConnection
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setReadTimeout
argument_list|(
name|rtimeout
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setConnectTimeout
argument_list|(
name|ctimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|me
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|me
operator|.
name|getKey
argument_list|()
argument_list|,
name|me
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wr
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|wr
operator|.
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|wr
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Get the response
block|}
name|InputStream
name|in
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
literal|"url: "
operator|+
name|url
operator|+
literal|", data: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|wr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End HttpUtils.java
end_comment

end_unit

