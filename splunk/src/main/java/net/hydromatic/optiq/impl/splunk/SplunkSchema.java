begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|splunk
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|TableInSchemaImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|splunk
operator|.
name|search
operator|.
name|SplunkConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Splunk schema.  */
end_comment

begin_class
specifier|public
class|class
name|SplunkSchema
implements|implements
name|Schema
block|{
comment|/** The name of the one and only table. */
specifier|public
specifier|static
specifier|final
name|String
name|SPLUNK_TABLE_NAME
init|=
literal|"splunk"
decl_stmt|;
specifier|public
specifier|final
name|QueryProvider
name|queryProvider
decl_stmt|;
specifier|private
specifier|final
name|Schema
name|parentSchema
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|SplunkConnection
name|splunkConnection
decl_stmt|;
specifier|private
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|private
specifier|final
name|SplunkTable
name|table
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TableInSchema
argument_list|>
name|tableMap
decl_stmt|;
comment|/** Creates a SplunkSchema. */
specifier|public
name|SplunkSchema
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|Schema
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|,
name|SplunkConnection
name|splunkConnection
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|parentSchema
operator|=
name|parentSchema
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|splunkConnection
operator|=
name|splunkConnection
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|RelDataType
name|stringType
init|=
name|typeFactory
operator|.
name|createType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"source"
argument_list|,
name|stringType
argument_list|)
operator|.
name|add
argument_list|(
literal|"sourcetype"
argument_list|,
name|stringType
argument_list|)
operator|.
name|add
argument_list|(
literal|"_extra"
argument_list|,
name|stringType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|elementType
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|rowType
argument_list|)
decl_stmt|;
name|this
operator|.
name|table
operator|=
operator|new
name|SplunkTable
argument_list|(
name|elementType
argument_list|,
name|rowType
argument_list|,
name|this
argument_list|,
name|SPLUNK_TABLE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableMap
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|TableInSchema
operator|>
name|of
argument_list|(
name|SPLUNK_TABLE_NAME
argument_list|,
operator|new
name|TableInSchemaImpl
argument_list|(
name|this
argument_list|,
name|SPLUNK_TABLE_NAME
argument_list|,
name|TableType
operator|.
name|TABLE
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Schema
name|getParentSchema
parameter_list|()
block|{
return|return
name|parentSchema
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|TableInSchema
argument_list|>
name|getTables
parameter_list|()
block|{
return|return
name|tableMap
return|;
block|}
specifier|public
name|JavaTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|TableFunctionInSchema
argument_list|>
name|getTableFunctions
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|SPLUNK_TABLE_NAME
argument_list|)
condition|?
name|table
else|:
literal|null
return|;
block|}
specifier|public
name|QueryProvider
name|getQueryProvider
parameter_list|()
block|{
return|return
name|queryProvider
return|;
block|}
specifier|public
name|Multimap
argument_list|<
name|String
argument_list|,
name|TableFunctionInSchema
argument_list|>
name|getTableFunctions
parameter_list|()
block|{
return|return
name|ImmutableMultimap
operator|.
name|of
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Table
argument_list|<
name|T
argument_list|>
name|getTable
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|elementType
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|getTable
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Schema
name|getSubSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getSubSchemaNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End SplunkSchema.java
end_comment

end_unit

