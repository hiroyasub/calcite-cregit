begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|splunk
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|splunk
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|HttpUtils
import|;
end_import

begin_import
import|import
name|au
operator|.
name|com
operator|.
name|bytecode
operator|.
name|opencsv
operator|.
name|CSVReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|HttpUtils
operator|.
name|appendURLEncodedArgs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|HttpUtils
operator|.
name|post
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link SplunkConnection} based on Splunk's REST API.  */
end_comment

begin_class
specifier|public
class|class
name|SplunkConnectionImpl
implements|implements
name|SplunkConnection
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplunkConnectionImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|SESSION_KEY
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<response>\\s*<sessionKey>([0-9a-f]+)</sessionKey>\\s*</response>"
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|url
decl_stmt|;
specifier|final
name|String
name|username
decl_stmt|;
specifier|final
name|String
name|password
decl_stmt|;
name|String
name|sessionKey
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SplunkConnectionImpl
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SplunkConnectionImpl
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|connect
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|Closeable
name|c
parameter_list|)
block|{
try|try
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|private
name|void
name|connect
parameter_list|()
block|{
name|BufferedReader
name|rd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|loginUrl
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s://%s:%d/services/auth/login"
argument_list|,
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|data
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendURLEncodedArgs
argument_list|(
name|data
argument_list|,
literal|"username"
argument_list|,
name|username
argument_list|,
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|rd
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|post
argument_list|(
name|loginUrl
argument_list|,
name|data
argument_list|,
name|requestHeaders
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|StringBuilder
name|reply
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|rd
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|reply
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|reply
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|m
init|=
name|SESSION_KEY
operator|.
name|matcher
argument_list|(
name|reply
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|sessionKey
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|requestHeaders
operator|.
name|put
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Splunk "
operator|+
name|sessionKey
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|getSearchResults
parameter_list|(
name|String
name|search
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherArgs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
parameter_list|,
name|SearchResultListener
name|srl
parameter_list|)
block|{
assert|assert
name|srl
operator|!=
literal|null
assert|;
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|x
init|=
name|getSearchResults_
argument_list|(
name|search
argument_list|,
name|otherArgs
argument_list|,
name|fieldList
argument_list|,
name|srl
argument_list|)
decl_stmt|;
assert|assert
name|x
operator|==
literal|null
assert|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|getSearchResultEnumerator
parameter_list|(
name|String
name|search
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherArgs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
parameter_list|)
block|{
return|return
name|getSearchResults_
argument_list|(
name|search
argument_list|,
name|otherArgs
argument_list|,
name|fieldList
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|getSearchResults_
parameter_list|(
name|String
name|search
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherArgs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|wantedFields
parameter_list|,
name|SearchResultListener
name|srl
parameter_list|)
block|{
name|String
name|searchUrl
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s://%s:%d/services/search/jobs/export"
argument_list|,
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|data
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherArgs
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|putAll
argument_list|(
name|otherArgs
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|put
argument_list|(
literal|"search"
argument_list|,
name|search
argument_list|)
expr_stmt|;
comment|// override these args
name|args
operator|.
name|put
argument_list|(
literal|"output_mode"
argument_list|,
literal|"csv"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"preview"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// TODO: remove this once the csv parser can handle leading spaces
name|args
operator|.
name|put
argument_list|(
literal|"check_connection"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|appendURLEncodedArgs
argument_list|(
name|data
argument_list|,
name|args
argument_list|)
expr_stmt|;
try|try
block|{
comment|// wait at most 30 minutes for first result
name|InputStream
name|in
init|=
name|post
argument_list|(
name|searchUrl
argument_list|,
name|data
argument_list|,
name|requestHeaders
argument_list|,
literal|10000
argument_list|,
literal|1800000
argument_list|)
decl_stmt|;
if|if
condition|(
name|srl
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|SplunkResultEnumerator
argument_list|(
name|in
argument_list|,
name|wantedFields
argument_list|)
return|;
block|}
else|else
block|{
name|parseResults
argument_list|(
name|in
argument_list|,
name|srl
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"{}\n{}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|srl
operator|==
literal|null
condition|?
name|Linq4j
operator|.
name|emptyEnumerator
argument_list|()
else|:
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|parseResults
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|SearchResultListener
name|srl
parameter_list|)
throws|throws
name|IOException
block|{
name|CSVReader
name|csvr
init|=
operator|new
name|CSVReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
index|[]
name|header
init|=
name|csvr
operator|.
name|readNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
name|header
operator|.
name|length
operator|>
literal|0
operator|&&
operator|!
operator|(
name|header
operator|.
name|length
operator|==
literal|1
operator|&&
name|header
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|srl
operator|.
name|setFieldNames
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|String
index|[]
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|csvr
operator|.
name|readNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|length
operator|==
name|header
operator|.
name|length
condition|)
block|{
name|srl
operator|.
name|processSearchResult
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ignore
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"{}\n{}"
argument_list|,
name|ignore
operator|.
name|getMessage
argument_list|()
argument_list|,
name|sw
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HttpUtils
operator|.
name|close
argument_list|(
name|csvr
argument_list|)
expr_stmt|;
comment|// CSVReader closes the input stream too
block|}
block|}
specifier|public
specifier|static
name|void
name|parseArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|argName
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
name|argValue
init|=
name|i
operator|<
name|args
operator|.
name|length
condition|?
name|args
index|[
name|i
index|]
else|:
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|argName
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid argument name: "
operator|+
name|argName
operator|+
literal|". Argument names must start with -"
argument_list|)
throw|;
block|}
name|map
operator|.
name|put
argument_list|(
name|argName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|argValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|printUsage
parameter_list|(
name|String
name|errorMsg
parameter_list|)
block|{
name|String
index|[]
name|strings
init|=
block|{
literal|"Usage: java Connection -<arg-name><arg-value>"
block|,
literal|"The following<arg-name> are valid"
block|,
literal|"search        - required, search string to execute"
block|,
literal|"field_list    - "
operator|+
literal|"required, list of fields to request, comma delimited"
block|,
literal|"uri           - "
operator|+
literal|"uri to splunk's mgmt port, default: https://localhost:8089"
block|,
literal|"username      - "
operator|+
literal|"username to use for authentication, default: admin"
block|,
literal|"password      - "
operator|+
literal|"password to use for authentication, default: changeme"
block|,
literal|"earliest_time - earliest time for the search, default: -24h"
block|,
literal|"latest_time   - latest time for the search, default: now"
block|,
literal|"-print        - whether to print results or just the summary"
block|}
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|argsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|argsMap
operator|.
name|put
argument_list|(
literal|"uri"
argument_list|,
literal|"https://localhost:8089"
argument_list|)
expr_stmt|;
name|argsMap
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|argsMap
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"changeme"
argument_list|)
expr_stmt|;
name|argsMap
operator|.
name|put
argument_list|(
literal|"earliest_time"
argument_list|,
literal|"-24h"
argument_list|)
expr_stmt|;
name|argsMap
operator|.
name|put
argument_list|(
literal|"latest_time"
argument_list|,
literal|"now"
argument_list|)
expr_stmt|;
name|argsMap
operator|.
name|put
argument_list|(
literal|"-print"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|parseArgs
argument_list|(
name|args
argument_list|,
name|argsMap
argument_list|)
expr_stmt|;
name|String
name|search
init|=
name|argsMap
operator|.
name|get
argument_list|(
literal|"search"
argument_list|)
decl_stmt|;
name|String
name|field_list
init|=
name|argsMap
operator|.
name|get
argument_list|(
literal|"field_list"
argument_list|)
decl_stmt|;
if|if
condition|(
name|search
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|(
literal|"Missing required argument: search"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field_list
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|(
literal|"Missing required argument: field_list"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
init|=
name|StringUtils
operator|.
name|decodeList
argument_list|(
name|field_list
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|SplunkConnection
name|c
init|=
operator|new
name|SplunkConnectionImpl
argument_list|(
name|argsMap
operator|.
name|get
argument_list|(
literal|"uri"
argument_list|)
argument_list|,
name|argsMap
operator|.
name|get
argument_list|(
literal|"username"
argument_list|)
argument_list|,
name|argsMap
operator|.
name|get
argument_list|(
literal|"password"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|searchArgs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|searchArgs
operator|.
name|put
argument_list|(
literal|"earliest_time"
argument_list|,
name|argsMap
operator|.
name|get
argument_list|(
literal|"earliest_time"
argument_list|)
argument_list|)
expr_stmt|;
name|searchArgs
operator|.
name|put
argument_list|(
literal|"latest_time"
argument_list|,
name|argsMap
operator|.
name|get
argument_list|(
literal|"latest_time"
argument_list|)
argument_list|)
expr_stmt|;
name|searchArgs
operator|.
name|put
argument_list|(
literal|"field_list"
argument_list|,
name|StringUtils
operator|.
name|encodeList
argument_list|(
name|fieldList
argument_list|,
literal|','
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|CountingSearchResultListener
name|dummy
init|=
operator|new
name|CountingSearchResultListener
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|argsMap
operator|.
name|get
argument_list|(
literal|"-print"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|c
operator|.
name|getSearchResults
argument_list|(
name|search
argument_list|,
name|searchArgs
argument_list|,
literal|null
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"received %d results in %dms\n"
argument_list|,
name|dummy
operator|.
name|getResultCount
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
comment|/** Implementation of    * {@link SearchResultListener}    * interface that just counts the results. */
specifier|public
specifier|static
class|class
name|CountingSearchResultListener
implements|implements
name|SearchResultListener
block|{
name|String
index|[]
name|fieldNames
init|=
literal|null
decl_stmt|;
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
specifier|final
name|boolean
name|print
decl_stmt|;
specifier|public
name|CountingSearchResultListener
parameter_list|(
name|boolean
name|print
parameter_list|)
block|{
name|this
operator|.
name|print
operator|=
name|print
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldNames
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
specifier|public
name|boolean
name|processSearchResult
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
block|{
name|resultCount
operator|++
expr_stmt|;
if|if
condition|(
name|print
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|fieldNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%s=%s\n"
argument_list|,
name|this
operator|.
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getResultCount
parameter_list|()
block|{
return|return
name|resultCount
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.linq4j.Enumerator} that parses    * results from a Splunk REST call.    *    *<p>The element type is either {@code String} or {@code String[]}, depending    * on the value of {@code source}.</p> */
specifier|public
specifier|static
class|class
name|SplunkResultEnumerator
implements|implements
name|Enumerator
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|CSVReader
name|csvReader
decl_stmt|;
specifier|private
name|String
index|[]
name|fieldNames
decl_stmt|;
specifier|private
name|int
index|[]
name|sources
decl_stmt|;
specifier|private
name|Object
name|current
decl_stmt|;
comment|/**      * Where to find the singleton field, or whether to map. Values:      *      *<ul>      *<li>Non-negative The index of the sole field</li>      *<li>-1 Generate a singleton null field for every record</li>      *<li>-2 Return line intact</li>      *<li>-3 Use sources to re-map</li>      *</ul>      */
specifier|private
name|int
name|source
decl_stmt|;
specifier|public
name|SplunkResultEnumerator
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|wantedFields
parameter_list|)
block|{
name|csvReader
operator|=
operator|new
name|CSVReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fieldNames
operator|=
name|csvReader
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|fieldNames
operator|==
literal|null
operator|||
name|fieldNames
operator|.
name|length
operator|==
literal|0
operator|||
name|fieldNames
operator|.
name|length
operator|==
literal|1
operator|&&
name|fieldNames
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// do nothing
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|headerList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|wantedFields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Yields 0 or higher if wanted field exists.
comment|// Yields -1 if wanted field does not exist.
name|source
operator|=
name|headerList
operator|.
name|indexOf
argument_list|(
name|wantedFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|source
operator|>=
operator|-
literal|1
assert|;
name|sources
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|wantedFields
operator|.
name|equals
argument_list|(
name|headerList
argument_list|)
condition|)
block|{
name|source
operator|=
operator|-
literal|2
expr_stmt|;
block|}
else|else
block|{
name|source
operator|=
operator|-
literal|3
expr_stmt|;
name|sources
operator|=
operator|new
name|int
index|[
name|wantedFields
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|wantedField
range|:
name|wantedFields
control|)
block|{
name|sources
index|[
name|i
operator|++
index|]
operator|=
name|headerList
operator|.
name|indexOf
argument_list|(
name|wantedField
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ignore
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"{}\n{}"
argument_list|,
name|ignore
operator|.
name|getMessage
argument_list|()
argument_list|,
name|sw
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|current
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
try|try
block|{
name|String
index|[]
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|csvReader
operator|.
name|readNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|length
operator|==
name|fieldNames
operator|.
name|length
condition|)
block|{
switch|switch
condition|(
name|source
condition|)
block|{
case|case
operator|-
literal|3
case|:
comment|// Re-map using sources
name|String
index|[]
name|mapped
init|=
operator|new
name|String
index|[
name|sources
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|source1
init|=
name|sources
index|[
name|i
index|]
decl_stmt|;
name|mapped
index|[
name|i
index|]
operator|=
name|source1
operator|<
literal|0
condition|?
literal|null
else|:
name|line
index|[
name|source1
index|]
expr_stmt|;
block|}
name|this
operator|.
name|current
operator|=
name|mapped
expr_stmt|;
break|break;
case|case
operator|-
literal|2
case|:
comment|// Return line as is. No need to re-map.
name|current
operator|=
name|line
expr_stmt|;
break|break;
case|case
operator|-
literal|1
case|:
comment|// Singleton null
name|this
operator|.
name|current
operator|=
literal|null
expr_stmt|;
break|break;
default|default:
name|this
operator|.
name|current
operator|=
name|line
index|[
name|source
index|]
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ignore
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"{}\n{}"
argument_list|,
name|ignore
operator|.
name|getMessage
argument_list|()
argument_list|,
name|sw
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|csvReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End SplunkConnectionImpl.java
end_comment

end_unit

