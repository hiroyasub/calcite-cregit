begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|splunk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|splunk
operator|.
name|search
operator|.
name|SearchResultListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|splunk
operator|.
name|search
operator|.
name|SplunkConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|splunk
operator|.
name|search
operator|.
name|SplunkConnectionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|DriverVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * JDBC driver for Splunk.  *  *<p>It accepts connect strings that start with "jdbc:splunk:".</p>  */
end_comment

begin_class
specifier|public
class|class
name|SplunkDriver
extends|extends
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|Driver
block|{
specifier|protected
name|SplunkDriver
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
static|static
block|{
operator|new
name|SplunkDriver
argument_list|()
operator|.
name|register
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getConnectStringPrefix
parameter_list|()
block|{
return|return
literal|"jdbc:splunk:"
return|;
block|}
specifier|protected
name|DriverVersion
name|createDriverVersion
parameter_list|()
block|{
return|return
operator|new
name|SplunkDriverVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|connect
parameter_list|(
name|String
name|url
parameter_list|,
name|Properties
name|info
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|connection
init|=
name|super
operator|.
name|connect
argument_list|(
name|url
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
operator|(
name|CalciteConnection
operator|)
name|connection
decl_stmt|;
name|SplunkConnection
name|splunkConnection
decl_stmt|;
try|try
block|{
name|String
name|url1
init|=
name|info
operator|.
name|getProperty
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must specify 'url' property"
argument_list|)
throw|;
block|}
if|if
condition|(
name|url1
operator|.
name|equals
argument_list|(
literal|"mock"
argument_list|)
condition|)
block|{
name|splunkConnection
operator|=
operator|new
name|MockSplunkConnection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|user
init|=
name|info
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must specify 'user' property"
argument_list|)
throw|;
block|}
name|String
name|password
init|=
name|info
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must specify 'password' property"
argument_list|)
throw|;
block|}
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
name|url1
argument_list|)
decl_stmt|;
name|splunkConnection
operator|=
operator|new
name|SplunkConnectionImpl
argument_list|(
name|url2
argument_list|,
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Cannot connect"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|rootSchema
operator|.
name|add
argument_list|(
literal|"splunk"
argument_list|,
operator|new
name|SplunkSchema
argument_list|(
name|splunkConnection
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
comment|/** Connection that looks up responses from a static map. */
specifier|private
specifier|static
class|class
name|MockSplunkConnection
implements|implements
name|SplunkConnection
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|getSearchResultEnumerator
parameter_list|(
name|String
name|search
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherArgs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
parameter_list|)
block|{
throw|throw
literal|null
throw|;
block|}
specifier|public
name|void
name|getSearchResults
parameter_list|(
name|String
name|search
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherArgs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
parameter_list|,
name|SearchResultListener
name|srl
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/** Connection that records requests and responses. */
specifier|private
specifier|static
class|class
name|WrappingSplunkConnection
implements|implements
name|SplunkConnection
block|{
specifier|private
specifier|final
name|SplunkConnection
name|connection
decl_stmt|;
name|WrappingSplunkConnection
parameter_list|(
name|SplunkConnection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
specifier|public
name|void
name|getSearchResults
parameter_list|(
name|String
name|search
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherArgs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
parameter_list|,
name|SearchResultListener
name|srl
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"search='"
operator|+
name|search
operator|+
literal|"', otherArgs="
operator|+
name|otherArgs
operator|+
literal|", fieldList='"
operator|+
name|fieldList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|getSearchResultEnumerator
parameter_list|(
name|String
name|search
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherArgs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SplunkDriver.java
end_comment

end_unit

