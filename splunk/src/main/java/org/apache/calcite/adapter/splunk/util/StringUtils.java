begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|splunk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utility methods for encoding and decoding strings for Splunk REST calls.  */
end_comment

begin_class
specifier|public
class|class
name|StringUtils
block|{
specifier|private
name|StringUtils
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|StringBuilder
name|encodeList
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|list
parameter_list|,
name|char
name|delim
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|CharSequence
name|cs
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
block|}
name|int
name|len
init|=
name|cs
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|cs
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|delim
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|decodeList
parameter_list|(
name|CharSequence
name|encoded
parameter_list|,
name|char
name|delim
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|encoded
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
literal|0
decl_stmt|;
name|boolean
name|hasEscapedDelim
init|=
literal|false
decl_stmt|;
name|char
name|p
init|=
literal|'\0'
decl_stmt|;
name|char
name|c
init|=
literal|'\0'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
operator|,
operator|++
name|end
control|)
block|{
name|p
operator|=
name|c
expr_stmt|;
name|c
operator|=
name|encoded
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
name|delim
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|'\\'
condition|)
block|{
name|hasEscapedDelim
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|hasEscapedDelim
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|encoded
operator|.
name|subSequence
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|char
name|a
init|=
literal|'\0'
decl_stmt|;
name|char
name|b
init|=
literal|'\0'
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|start
init|;
name|j
operator|<
name|end
condition|;
operator|++
name|j
control|)
block|{
name|b
operator|=
name|a
expr_stmt|;
name|a
operator|=
name|encoded
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|'\\'
operator|&&
name|a
operator|!=
name|delim
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|'\\'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|end
operator|+
literal|1
expr_stmt|;
name|hasEscapedDelim
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasEscapedDelim
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|encoded
operator|.
name|subSequence
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|char
name|a
init|=
literal|'\0'
decl_stmt|;
name|char
name|b
init|=
literal|'\0'
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|start
init|;
name|j
operator|<
name|end
condition|;
operator|++
name|j
control|)
block|{
name|b
operator|=
name|a
expr_stmt|;
name|a
operator|=
name|encoded
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|'\\'
operator|&&
name|a
operator|!=
name|delim
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|'\\'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
specifier|static
name|boolean
name|parseBoolean
parameter_list|(
name|String
name|str
parameter_list|,
name|boolean
name|defaultVal
parameter_list|,
name|boolean
name|missingVal
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|missingVal
return|;
block|}
if|if
condition|(
name|str
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"t"
argument_list|)
operator|||
name|str
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|||
name|str
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|||
name|str
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|str
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"f"
argument_list|)
operator|||
name|str
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
operator|||
name|str
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
operator|||
name|str
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|defaultVal
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"test,with,comma"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============="
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
name|encodeList
argument_list|(
name|list
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list
operator|=
name|decodeList
argument_list|(
name|sb
argument_list|,
literal|','
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============="
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Logger
name|getClassTracer
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

