begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|splunk
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|splunk
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|splunk
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Query against Splunk.  *  * @param<T> Element type  */
end_comment

begin_class
specifier|public
class|class
name|SplunkQuery
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractEnumerable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|SplunkConnection
name|splunkConnection
decl_stmt|;
specifier|private
specifier|final
name|String
name|search
decl_stmt|;
specifier|private
specifier|final
name|String
name|earliest
decl_stmt|;
specifier|private
specifier|final
name|String
name|latest
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
decl_stmt|;
comment|/** Creates a SplunkQuery. */
specifier|public
name|SplunkQuery
parameter_list|(
name|SplunkConnection
name|splunkConnection
parameter_list|,
name|String
name|search
parameter_list|,
name|String
name|earliest
parameter_list|,
name|String
name|latest
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldList
parameter_list|)
block|{
name|this
operator|.
name|splunkConnection
operator|=
name|splunkConnection
expr_stmt|;
name|this
operator|.
name|search
operator|=
name|search
expr_stmt|;
name|this
operator|.
name|earliest
operator|=
name|earliest
expr_stmt|;
name|this
operator|.
name|latest
operator|=
name|latest
expr_stmt|;
name|this
operator|.
name|fieldList
operator|=
name|fieldList
expr_stmt|;
assert|assert
name|splunkConnection
operator|!=
literal|null
assert|;
assert|assert
name|search
operator|!=
literal|null
assert|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SplunkQuery {"
operator|+
name|search
operator|+
literal|"}"
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|enumeratorIterator
argument_list|(
name|enumerator
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
comment|//noinspection unchecked
return|return
operator|(
name|Enumerator
argument_list|<
name|T
argument_list|>
operator|)
name|splunkConnection
operator|.
name|getSearchResultEnumerator
argument_list|(
name|search
argument_list|,
name|getArgs
argument_list|()
argument_list|,
name|fieldList
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getArgs
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldList
operator|!=
literal|null
condition|)
block|{
name|String
name|fields
init|=
name|StringUtils
operator|.
name|encodeList
argument_list|(
name|fieldList
argument_list|,
literal|','
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"field_list"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|earliest
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|put
argument_list|(
literal|"earliest_time"
argument_list|,
name|earliest
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|latest
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|put
argument_list|(
literal|"latest_time"
argument_list|,
name|latest
argument_list|)
expr_stmt|;
block|}
return|return
name|args
return|;
block|}
block|}
end_class

begin_comment
comment|// End SplunkQuery.java
end_comment

end_unit

