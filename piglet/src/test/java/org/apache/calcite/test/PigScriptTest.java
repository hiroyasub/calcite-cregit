begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|hasTree
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Test for converting a Pig script file.  */
end_comment

begin_class
specifier|public
class|class
name|PigScriptTest
extends|extends
name|PigRelTestBase
block|{
specifier|private
specifier|static
name|String
name|projectRootDir
decl_stmt|;
specifier|private
specifier|static
name|String
name|dataFile
decl_stmt|;
annotation|@
name|BeforeAll
specifier|public
specifier|static
name|void
name|setUpOnce
parameter_list|()
throws|throws
name|IOException
block|{
name|projectRootDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
name|dataFile
operator|=
name|projectRootDir
operator|+
literal|"/src/test/resources/input.data"
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yahoo 10"
argument_list|,
literal|"twitter 3"
argument_list|,
literal|"facebook 10"
argument_list|,
literal|"yahoo 15"
argument_list|,
literal|"facebook 5"
argument_list|,
literal|"twitter 2"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dataFile
argument_list|)
argument_list|,
name|lines
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterAll
specifier|public
specifier|static
name|void
name|testClean
parameter_list|()
throws|throws
name|IOException
block|{
name|Files
operator|.
name|delete
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadScript
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"input"
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"output"
argument_list|,
literal|"outputFile"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pigFile
init|=
name|projectRootDir
operator|+
literal|"/src/test/resources/testPig.pig"
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|converter
operator|.
name|pigScript2Rel
argument_list|(
name|pigFile
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dataFile
init|=
name|projectRootDir
operator|+
literal|"/src/test/resources/input.data"
decl_stmt|;
name|String
name|expectedPlan
init|=
literal|""
operator|+
literal|"LogicalSort(sort0=[$1], dir0=[DESC], fetch=[5])\n"
operator|+
literal|"  LogicalProject(query=[$0], count=[CAST($1):BIGINT])\n"
operator|+
literal|"    LogicalAggregate(group=[{0}], agg#0=[SUM($1)])\n"
operator|+
literal|"      LogicalTableScan(table=[["
operator|+
name|dataFile
operator|+
literal|"]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|rel
argument_list|,
name|hasTree
argument_list|(
name|expectedPlan
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End PigScriptTest.java
end_comment

end_unit

