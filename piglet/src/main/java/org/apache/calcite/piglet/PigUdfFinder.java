begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|piglet
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utility class to find the implementation method object for a given Pig UDF  * class.  */
end_comment

begin_class
class|class
name|PigUdfFinder
block|{
comment|/**    * For Pig UDF classes where the "exec" method is declared in parent class,    * the Calcite enumerable engine will generate incorrect Java code that    * instantiates an object of the parent class, not object of the actual UDF    * class. If the parent class is an abstract class, the auto-generated code    * failed to compile (we can not instantiate an object of an abstract class).    *    *<p>Workaround is to write a wrapper for such UDFs to instantiate the    * correct UDF object. See method {@link PigUdfs#bigdecimalsum} as an example    * and add others if needed.    */
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|udfWrapper
decl_stmt|;
name|PigUdfFinder
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|PigUdfs
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Method
operator|.
name|class
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|udfWrapper
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**    * Finds the implementation method object for a given Pig UDF class.    *    * @param clazz The Pig UDF class    *    * @throws IllegalArgumentException if not found    */
name|Method
name|findPigUdfImplementationMethod
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
comment|// Find implementation method in the wrapper map
name|Method
name|returnedMethod
init|=
name|udfWrapper
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnedMethod
operator|!=
literal|null
condition|)
block|{
return|return
name|returnedMethod
return|;
block|}
comment|// Find exec method in the declaring class
name|returnedMethod
operator|=
name|findExecMethod
argument_list|(
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnedMethod
operator|!=
literal|null
condition|)
block|{
return|return
name|returnedMethod
return|;
block|}
comment|// Find exec method in all parent classes.
name|returnedMethod
operator|=
name|findExecMethod
argument_list|(
name|clazz
operator|.
name|getMethods
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnedMethod
operator|!=
literal|null
condition|)
block|{
return|return
name|returnedMethod
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find 'exec' method for PigUDF class of "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Finds "exec" method from a given array of methods.    */
specifier|private
specifier|static
name|Method
name|findExecMethod
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|)
block|{
if|if
condition|(
name|methods
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Method
name|returnedMethod
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"exec"
argument_list|)
condition|)
block|{
comment|// There may be two methods named "exec", one of them just returns a
comment|// Java object. We will need to look for the other one if existing.
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
return|return
name|method
return|;
block|}
else|else
block|{
name|returnedMethod
operator|=
name|method
expr_stmt|;
block|}
block|}
block|}
return|return
name|returnedMethod
return|;
block|}
block|}
end_class

end_unit

