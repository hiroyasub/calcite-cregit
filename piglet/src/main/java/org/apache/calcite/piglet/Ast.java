begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|piglet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Spacer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Abstract syntax tree.  *  *<p>Contains inner classes for various kinds of parse tree node.  */
end_comment

begin_class
specifier|public
class|class
name|Ast
block|{
specifier|private
name|Ast
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Node
name|x
parameter_list|)
block|{
return|return
operator|new
name|UnParser
argument_list|()
operator|.
name|append
argument_list|(
name|x
argument_list|)
operator|.
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Formats a node and its children as a string. */
specifier|public
specifier|static
name|UnParser
name|unParse
parameter_list|(
name|UnParser
name|u
parameter_list|,
name|Node
name|n
parameter_list|)
block|{
switch|switch
condition|(
name|n
operator|.
name|op
condition|)
block|{
case|case
name|PROGRAM
case|:
specifier|final
name|Program
name|program
init|=
operator|(
name|Program
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: PROGRAM, stmts: "
argument_list|)
operator|.
name|appendList
argument_list|(
name|program
operator|.
name|stmtList
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
return|;
case|case
name|LOAD
case|:
specifier|final
name|LoadStmt
name|load
init|=
operator|(
name|LoadStmt
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: LOAD, target: "
operator|+
name|load
operator|.
name|target
operator|.
name|value
operator|+
literal|", name: "
operator|+
name|load
operator|.
name|name
operator|.
name|value
operator|+
literal|"}"
argument_list|)
return|;
case|case
name|DUMP
case|:
specifier|final
name|DumpStmt
name|dump
init|=
operator|(
name|DumpStmt
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: DUMP, relation: "
operator|+
name|dump
operator|.
name|relation
operator|.
name|value
operator|+
literal|"}"
argument_list|)
return|;
case|case
name|DESCRIBE
case|:
specifier|final
name|DescribeStmt
name|describe
init|=
operator|(
name|DescribeStmt
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: DESCRIBE, relation: "
operator|+
name|describe
operator|.
name|relation
operator|.
name|value
operator|+
literal|"}"
argument_list|)
return|;
case|case
name|FOREACH
case|:
specifier|final
name|ForeachStmt
name|foreach
init|=
operator|(
name|ForeachStmt
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: FOREACH, target: "
operator|+
name|foreach
operator|.
name|target
operator|.
name|value
operator|+
literal|", source: "
operator|+
name|foreach
operator|.
name|source
operator|.
name|value
operator|+
literal|", expList: "
argument_list|)
operator|.
name|appendList
argument_list|(
name|foreach
operator|.
name|expList
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
return|;
case|case
name|FOREACH_NESTED
case|:
specifier|final
name|ForeachNestedStmt
name|foreachNested
init|=
operator|(
name|ForeachNestedStmt
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: FOREACH, target: "
operator|+
name|foreachNested
operator|.
name|target
operator|.
name|value
operator|+
literal|", source: "
operator|+
name|foreachNested
operator|.
name|source
operator|.
name|value
operator|+
literal|", nestedOps: "
argument_list|)
operator|.
name|appendList
argument_list|(
name|foreachNested
operator|.
name|nestedStmtList
argument_list|)
operator|.
name|append
argument_list|(
literal|", expList: "
argument_list|)
operator|.
name|appendList
argument_list|(
name|foreachNested
operator|.
name|expList
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
return|;
case|case
name|FILTER
case|:
specifier|final
name|FilterStmt
name|filter
init|=
operator|(
name|FilterStmt
operator|)
name|n
decl_stmt|;
name|u
operator|.
name|append
argument_list|(
literal|"{op: FILTER, target: "
operator|+
name|filter
operator|.
name|target
operator|.
name|value
operator|+
literal|", source: "
operator|+
name|filter
operator|.
name|source
operator|.
name|value
operator|+
literal|", condition: "
argument_list|)
expr_stmt|;
name|u
operator|.
name|in
argument_list|()
operator|.
name|append
argument_list|(
name|filter
operator|.
name|condition
argument_list|)
operator|.
name|out
argument_list|()
expr_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
return|;
case|case
name|DISTINCT
case|:
specifier|final
name|DistinctStmt
name|distinct
init|=
operator|(
name|DistinctStmt
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: DISTINCT, target: "
operator|+
name|distinct
operator|.
name|target
operator|.
name|value
operator|+
literal|", source: "
operator|+
name|distinct
operator|.
name|source
operator|.
name|value
operator|+
literal|"}"
argument_list|)
return|;
case|case
name|LIMIT
case|:
specifier|final
name|LimitStmt
name|limit
init|=
operator|(
name|LimitStmt
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: LIMIT, target: "
argument_list|)
operator|.
name|append
argument_list|(
name|limit
operator|.
name|target
operator|.
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|", source: "
argument_list|)
operator|.
name|append
argument_list|(
name|limit
operator|.
name|source
operator|.
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|", count: "
argument_list|)
operator|.
name|append
argument_list|(
name|limit
operator|.
name|count
operator|.
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
return|;
case|case
name|ORDER
case|:
specifier|final
name|OrderStmt
name|order
init|=
operator|(
name|OrderStmt
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
literal|"{op: ORDER, target: "
operator|+
name|order
operator|.
name|target
operator|.
name|value
operator|+
literal|", source: "
operator|+
name|order
operator|.
name|source
operator|.
name|value
operator|+
literal|"}"
argument_list|)
return|;
case|case
name|GROUP
case|:
specifier|final
name|GroupStmt
name|group
init|=
operator|(
name|GroupStmt
operator|)
name|n
decl_stmt|;
name|u
operator|.
name|append
argument_list|(
literal|"{op: GROUP, target: "
operator|+
name|group
operator|.
name|target
operator|.
name|value
operator|+
literal|", source: "
operator|+
name|group
operator|.
name|source
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|keys
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|append
argument_list|(
literal|", keys: "
argument_list|)
operator|.
name|appendList
argument_list|(
name|group
operator|.
name|keys
argument_list|)
expr_stmt|;
block|}
return|return
name|u
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
return|;
case|case
name|LITERAL
case|:
specifier|final
name|Literal
name|literal
init|=
operator|(
name|Literal
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|literal
operator|.
name|value
argument_list|)
argument_list|)
return|;
case|case
name|IDENTIFIER
case|:
specifier|final
name|Identifier
name|id
init|=
operator|(
name|Identifier
operator|)
name|n
decl_stmt|;
return|return
name|u
operator|.
name|append
argument_list|(
name|id
operator|.
name|value
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown op "
operator|+
name|n
operator|.
name|op
argument_list|)
throw|;
block|}
block|}
comment|/** Parse tree node type. */
specifier|public
enum|enum
name|Op
block|{
name|PROGRAM
block|,
comment|// atoms
name|LITERAL
block|,
name|IDENTIFIER
block|,
name|BAG
block|,
name|TUPLE
block|,
comment|// statements
name|DESCRIBE
block|,
name|DISTINCT
block|,
name|DUMP
block|,
name|LOAD
block|,
name|FOREACH
block|,
name|FILTER
block|,
name|FOREACH_NESTED
block|,
name|LIMIT
block|,
name|ORDER
block|,
name|GROUP
block|,
name|VALUES
block|,
comment|// types
name|SCHEMA
block|,
name|SCALAR_TYPE
block|,
name|BAG_TYPE
block|,
name|TUPLE_TYPE
block|,
name|MAP_TYPE
block|,
name|FIELD_SCHEMA
block|,
comment|// operators
name|DOT
block|,
name|EQ
block|,
name|NE
block|,
name|GT
block|,
name|LT
block|,
name|GTE
block|,
name|LTE
block|,
name|PLUS
block|,
name|MINUS
block|,
name|AND
block|,
name|OR
block|,
name|NOT
block|}
comment|/** Abstract base class for parse tree node. */
specifier|public
specifier|abstract
specifier|static
class|class
name|Node
block|{
specifier|public
specifier|final
name|Op
name|op
decl_stmt|;
specifier|public
specifier|final
name|SqlParserPos
name|pos
decl_stmt|;
specifier|protected
name|Node
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Op
name|op
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|op
argument_list|,
literal|"op"
argument_list|)
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pos
argument_list|,
literal|"pos"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Abstract base class for parse tree node representing a statement. */
specifier|public
specifier|abstract
specifier|static
class|class
name|Stmt
extends|extends
name|Node
block|{
specifier|protected
name|Stmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Op
name|op
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Abstract base class for statements that assign to a named relation. */
specifier|public
specifier|abstract
specifier|static
class|class
name|Assignment
extends|extends
name|Stmt
block|{
specifier|final
name|Identifier
name|target
decl_stmt|;
specifier|protected
name|Assignment
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Op
name|op
parameter_list|,
name|Identifier
name|target
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for LOAD statement. */
specifier|public
specifier|static
class|class
name|LoadStmt
extends|extends
name|Assignment
block|{
specifier|final
name|Literal
name|name
decl_stmt|;
specifier|public
name|LoadStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Literal
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|LOAD
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for VALUES statement.    *    *<p>VALUES is an extension to Pig, inspired by SQL's VALUES clause.    */
specifier|public
specifier|static
class|class
name|ValuesStmt
extends|extends
name|Assignment
block|{
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Node
argument_list|>
argument_list|>
name|tupleList
decl_stmt|;
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|public
name|ValuesStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Node
argument_list|>
argument_list|>
name|tupleList
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|VALUES
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|tupleList
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|tupleList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Abstract base class for an assignment with one source relation. */
specifier|public
specifier|static
class|class
name|Assignment1
extends|extends
name|Assignment
block|{
specifier|final
name|Identifier
name|source
decl_stmt|;
specifier|protected
name|Assignment1
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Op
name|op
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Identifier
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|op
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for FOREACH statement (non-nested).    *    *<p>Syntax:    *<blockquote><code>    * alias = FOREACH alias GENERATE expression [, expression]...    * [ AS schema ];</code>    *</blockquote>    *    * @see org.apache.calcite.piglet.Ast.ForeachNestedStmt    */
specifier|public
specifier|static
class|class
name|ForeachStmt
extends|extends
name|Assignment1
block|{
specifier|final
name|List
argument_list|<
name|Node
argument_list|>
name|expList
decl_stmt|;
specifier|public
name|ForeachStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Identifier
name|source
parameter_list|,
name|List
argument_list|<
name|Node
argument_list|>
name|expList
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|FOREACH
argument_list|,
name|target
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|expList
operator|=
name|expList
expr_stmt|;
assert|assert
name|schema
operator|==
literal|null
assert|;
comment|// not supported yet
block|}
block|}
comment|/** Parse tree node for FOREACH statement (nested).    *    *<p>Syntax:    *    *<blockquote><code>    * alias = FOREACH nested_alias {    *   alias = nested_op; [alias = nested_op; ]...    *   GENERATE expression [, expression]...    * };<br>    *&nbsp;    * nested_op ::= DISTINCT, FILTER, LIMIT, ORDER, SAMPLE    *</code>    *</blockquote>    *    * @see org.apache.calcite.piglet.Ast.ForeachStmt    */
specifier|public
specifier|static
class|class
name|ForeachNestedStmt
extends|extends
name|Assignment1
block|{
specifier|final
name|List
argument_list|<
name|Stmt
argument_list|>
name|nestedStmtList
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Node
argument_list|>
name|expList
decl_stmt|;
specifier|public
name|ForeachNestedStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Identifier
name|source
parameter_list|,
name|List
argument_list|<
name|Stmt
argument_list|>
name|nestedStmtList
parameter_list|,
name|List
argument_list|<
name|Node
argument_list|>
name|expList
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|FOREACH_NESTED
argument_list|,
name|target
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|nestedStmtList
operator|=
name|nestedStmtList
expr_stmt|;
name|this
operator|.
name|expList
operator|=
name|expList
expr_stmt|;
assert|assert
name|schema
operator|==
literal|null
assert|;
comment|// not supported yet
block|}
block|}
comment|/** Parse tree node for FILTER statement.    *    *<p>Syntax:    *<blockquote><pre>alias = FILTER alias BY expression;</pre></blockquote>    */
specifier|public
specifier|static
class|class
name|FilterStmt
extends|extends
name|Assignment1
block|{
specifier|final
name|Node
name|condition
decl_stmt|;
specifier|public
name|FilterStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Identifier
name|source
parameter_list|,
name|Node
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|FILTER
argument_list|,
name|target
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for DISTINCT statement.    *    *<p>Syntax:    *<blockquote><pre>alias = DISTINCT alias;</pre></blockquote>    */
specifier|public
specifier|static
class|class
name|DistinctStmt
extends|extends
name|Assignment1
block|{
specifier|public
name|DistinctStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Identifier
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|DISTINCT
argument_list|,
name|target
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for LIMIT statement.    *    *<p>Syntax:    *<blockquote><pre>alias = LIMIT alias n;</pre></blockquote>    */
specifier|public
specifier|static
class|class
name|LimitStmt
extends|extends
name|Assignment1
block|{
specifier|final
name|Literal
name|count
decl_stmt|;
specifier|public
name|LimitStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Identifier
name|source
parameter_list|,
name|Literal
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|LIMIT
argument_list|,
name|target
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for ORDER statement.    *    *<p>Syntax:    *<blockquote>    *<code>alias = ORDER alias BY (* | field) [ASC | DESC]    *     [, field [ASC | DESC] ]...;</code>    *</blockquote>    */
specifier|public
specifier|static
class|class
name|OrderStmt
extends|extends
name|Assignment1
block|{
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Identifier
argument_list|,
name|Direction
argument_list|>
argument_list|>
name|fields
decl_stmt|;
specifier|public
name|OrderStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Identifier
name|source
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Identifier
argument_list|,
name|Direction
argument_list|>
argument_list|>
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|ORDER
argument_list|,
name|target
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for GROUP statement.    *    *<p>Syntax:    *<blockquote>    *<code>alias = GROUP alias    *   ( ALL | BY ( exp | '(' exp [, exp]... ')' ) )</code>    *</blockquote>    */
specifier|public
specifier|static
class|class
name|GroupStmt
extends|extends
name|Assignment1
block|{
comment|/** Grouping keys. May be null (for ALL), or a list of one or more      * expressions. */
specifier|final
name|List
argument_list|<
name|Node
argument_list|>
name|keys
decl_stmt|;
specifier|public
name|GroupStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|target
parameter_list|,
name|Identifier
name|source
parameter_list|,
name|List
argument_list|<
name|Node
argument_list|>
name|keys
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|GROUP
argument_list|,
name|target
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
assert|assert
name|keys
operator|==
literal|null
operator|||
name|keys
operator|.
name|size
argument_list|()
operator|>=
literal|1
assert|;
block|}
block|}
comment|/** Parse tree node for DUMP statement. */
specifier|public
specifier|static
class|class
name|DumpStmt
extends|extends
name|Stmt
block|{
specifier|final
name|Identifier
name|relation
decl_stmt|;
specifier|public
name|DumpStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|relation
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|DUMP
argument_list|)
expr_stmt|;
name|this
operator|.
name|relation
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|relation
argument_list|,
literal|"relation"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for DESCRIBE statement. */
specifier|public
specifier|static
class|class
name|DescribeStmt
extends|extends
name|Stmt
block|{
specifier|final
name|Identifier
name|relation
decl_stmt|;
specifier|public
name|DescribeStmt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|relation
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|DESCRIBE
argument_list|)
expr_stmt|;
name|this
operator|.
name|relation
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|relation
argument_list|,
literal|"relation"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for Literal. */
specifier|public
specifier|static
class|class
name|Literal
extends|extends
name|Node
block|{
specifier|final
name|Object
name|value
decl_stmt|;
specifier|public
name|Literal
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|LITERAL
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|value
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|NumericLiteral
name|createExactNumeric
parameter_list|(
name|String
name|s
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|value
decl_stmt|;
name|int
name|prec
decl_stmt|;
name|int
name|scale
decl_stmt|;
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|>=
literal|0
operator|)
operator|&&
operator|(
operator|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|!=
name|i
operator|)
condition|)
block|{
name|value
operator|=
name|SqlParserUtil
operator|.
name|parseDecimal
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|scale
operator|=
name|s
operator|.
name|length
argument_list|()
operator|-
name|i
operator|-
literal|1
expr_stmt|;
assert|assert
name|scale
operator|==
name|value
operator|.
name|scale
argument_list|()
operator|:
name|s
assert|;
name|prec
operator|=
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|i
operator|>=
literal|0
operator|)
operator|&&
operator|(
operator|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|==
name|i
operator|)
condition|)
block|{
name|value
operator|=
name|SqlParserUtil
operator|.
name|parseInteger
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|scale
operator|=
literal|0
expr_stmt|;
name|prec
operator|=
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|SqlParserUtil
operator|.
name|parseInteger
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|scale
operator|=
literal|0
expr_stmt|;
name|prec
operator|=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|NumericLiteral
argument_list|(
name|pos
argument_list|,
name|value
argument_list|,
name|prec
argument_list|,
name|scale
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
comment|/** Parse tree node for NumericLiteral. */
specifier|public
specifier|static
class|class
name|NumericLiteral
extends|extends
name|Literal
block|{
specifier|final
name|int
name|prec
decl_stmt|;
specifier|final
name|int
name|scale
decl_stmt|;
specifier|final
name|boolean
name|exact
decl_stmt|;
name|NumericLiteral
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|BigDecimal
name|value
parameter_list|,
name|int
name|prec
parameter_list|,
name|int
name|scale
parameter_list|,
name|boolean
name|exact
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|prec
operator|=
name|prec
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|exact
operator|=
name|exact
expr_stmt|;
block|}
specifier|public
name|NumericLiteral
name|negate
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|value
init|=
operator|(
name|BigDecimal
operator|)
name|this
operator|.
name|value
decl_stmt|;
return|return
operator|new
name|NumericLiteral
argument_list|(
name|pos
argument_list|,
name|value
operator|.
name|negate
argument_list|()
argument_list|,
name|prec
argument_list|,
name|scale
argument_list|,
name|exact
argument_list|)
return|;
block|}
block|}
comment|/** Parse tree node for Identifier. */
specifier|public
specifier|static
class|class
name|Identifier
extends|extends
name|Node
block|{
specifier|final
name|String
name|value
decl_stmt|;
specifier|public
name|Identifier
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|value
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStar
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** Parse tree node for "*", a special kind of identifier. */
specifier|public
specifier|static
class|class
name|SpecialIdentifier
extends|extends
name|Identifier
block|{
specifier|public
name|SpecialIdentifier
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStar
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Parse tree node for a call to a function or operator. */
specifier|public
specifier|static
class|class
name|Call
extends|extends
name|Node
block|{
specifier|final
name|ImmutableList
argument_list|<
name|Node
argument_list|>
name|operands
decl_stmt|;
specifier|private
name|Call
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Op
name|op
parameter_list|,
name|ImmutableList
argument_list|<
name|Node
argument_list|>
name|operands
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|this
operator|.
name|operands
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|operands
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Call
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Op
name|op
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|operands
parameter_list|)
block|{
name|this
argument_list|(
name|pos
argument_list|,
name|op
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|operands
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Call
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Op
name|op
parameter_list|,
name|Node
modifier|...
name|operands
parameter_list|)
block|{
name|this
argument_list|(
name|pos
argument_list|,
name|op
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|operands
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree node for a program. */
specifier|public
specifier|static
class|class
name|Program
extends|extends
name|Node
block|{
specifier|public
specifier|final
name|List
argument_list|<
name|Stmt
argument_list|>
name|stmtList
decl_stmt|;
specifier|public
name|Program
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|List
argument_list|<
name|Stmt
argument_list|>
name|stmtList
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|PROGRAM
argument_list|)
expr_stmt|;
name|this
operator|.
name|stmtList
operator|=
name|stmtList
expr_stmt|;
block|}
block|}
comment|/** Parse tree for field schema.    *    *<p>Syntax:    *<blockquote><pre>identifier:type</pre></blockquote>    */
specifier|public
specifier|static
class|class
name|FieldSchema
extends|extends
name|Node
block|{
specifier|final
name|Identifier
name|id
decl_stmt|;
specifier|final
name|Type
name|type
decl_stmt|;
specifier|public
name|FieldSchema
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Identifier
name|id
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|FIELD_SCHEMA
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|id
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree for schema.    *    *<p>Syntax:    *<blockquote>    *<pre>AS ( identifier:type [, identifier:type]... )</pre>    *</blockquote>    */
specifier|public
specifier|static
class|class
name|Schema
extends|extends
name|Node
block|{
specifier|final
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemaList
decl_stmt|;
specifier|public
name|Schema
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemaList
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|SCHEMA
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldSchemaList
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fieldSchemaList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree for type. */
specifier|public
specifier|abstract
specifier|static
class|class
name|Type
extends|extends
name|Node
block|{
specifier|protected
name|Type
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Op
name|op
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree for scalar type such as {@code int}. */
specifier|public
specifier|static
class|class
name|ScalarType
extends|extends
name|Type
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|ScalarType
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|SCALAR_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
comment|/** Parse tree for a bag type. */
specifier|public
specifier|static
class|class
name|BagType
extends|extends
name|Type
block|{
specifier|final
name|Type
name|componentType
decl_stmt|;
specifier|public
name|BagType
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|Type
name|componentType
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|BAG_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
block|}
block|}
comment|/** Parse tree for a tuple type. */
specifier|public
specifier|static
class|class
name|TupleType
extends|extends
name|Type
block|{
specifier|final
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemaList
decl_stmt|;
specifier|public
name|TupleType
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemaList
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|TUPLE_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldSchemaList
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fieldSchemaList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse tree for a map type. */
specifier|public
specifier|static
class|class
name|MapType
extends|extends
name|Type
block|{
specifier|final
name|Type
name|keyType
decl_stmt|;
specifier|final
name|Type
name|valueType
decl_stmt|;
specifier|public
name|MapType
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|,
name|Op
operator|.
name|MAP_TYPE
argument_list|)
expr_stmt|;
comment|// REVIEW: Why does Pig's "map" type not have key and value types?
name|this
operator|.
name|keyType
operator|=
operator|new
name|ScalarType
argument_list|(
name|pos
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
operator|new
name|ScalarType
argument_list|(
name|pos
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Contains output and indentation level while a tree of nodes is    * being converted to text. */
specifier|static
class|class
name|UnParser
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Spacer
name|spacer
init|=
operator|new
name|Spacer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|UnParser
name|in
parameter_list|()
block|{
name|spacer
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|UnParser
name|out
parameter_list|()
block|{
name|spacer
operator|.
name|subtract
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|UnParser
name|newline
parameter_list|()
block|{
name|buf
operator|.
name|append
argument_list|(
name|Util
operator|.
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|spacer
operator|.
name|spaces
argument_list|(
name|buf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|UnParser
name|append
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|UnParser
name|append
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
return|return
name|unParse
argument_list|(
name|this
argument_list|,
name|n
argument_list|)
return|;
block|}
specifier|public
name|UnParser
name|appendList
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|list
parameter_list|)
block|{
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|in
argument_list|()
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Node
argument_list|>
name|n
range|:
name|Ord
operator|.
expr|<
name|Node
operator|>
name|zip
argument_list|(
name|list
argument_list|)
control|)
block|{
name|newline
argument_list|()
operator|.
name|append
argument_list|(
name|n
operator|.
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
argument_list|()
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
return|;
block|}
block|}
comment|/** Sort direction. */
specifier|public
enum|enum
name|Direction
block|{
name|ASC
block|,
name|DESC
block|,
name|NOT_SPECIFIED
block|}
block|}
end_class

end_unit

