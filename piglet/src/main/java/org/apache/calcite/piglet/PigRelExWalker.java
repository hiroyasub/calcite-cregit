begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|piglet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|FrontendException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|OperatorPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|PlanVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|PlanWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|logical
operator|.
name|expression
operator|.
name|LogicalExpressionPlan
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Post-order walker for Pig expression plans. Walk the plan from  * source to sinks.  */
end_comment

begin_class
class|class
name|PigRelExWalker
extends|extends
name|PlanWalker
block|{
name|PigRelExWalker
parameter_list|(
name|OperatorPlan
name|plan
parameter_list|)
block|{
name|super
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|walk
parameter_list|(
name|PlanVisitor
name|planVisitor
parameter_list|)
throws|throws
name|FrontendException
block|{
if|if
condition|(
operator|!
operator|(
name|planVisitor
operator|instanceof
name|PigRelExVisitor
operator|)
condition|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
literal|"Expected PigRelOpVisitor"
argument_list|,
literal|2223
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|getPlan
argument_list|()
operator|instanceof
name|LogicalExpressionPlan
operator|)
condition|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
literal|"Expected LogicalExpressionPlan"
argument_list|,
literal|2223
argument_list|)
throw|;
block|}
specifier|final
name|PigRelExVisitor
name|pigRelVistor
init|=
operator|(
name|PigRelExVisitor
operator|)
name|planVisitor
decl_stmt|;
specifier|final
name|LogicalExpressionPlan
name|plan
init|=
operator|(
name|LogicalExpressionPlan
operator|)
name|getPlan
argument_list|()
decl_stmt|;
if|if
condition|(
name|plan
operator|.
name|getSources
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|plan
operator|.
name|getSources
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
literal|"Found LogicalExpressionPlan with more than one root.  Unexpected."
argument_list|,
literal|2224
argument_list|)
throw|;
block|}
name|postOrderWalk
argument_list|(
name|plan
operator|.
name|getSources
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|pigRelVistor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Does post-order walk on the Pig expression plan from source to sinks.    *    * @param root The root expression operator    * @param visitor The visitor of each Pig expression node.    * @throws FrontendException Exception during processing Pig operator    */
specifier|private
name|void
name|postOrderWalk
parameter_list|(
name|Operator
name|root
parameter_list|,
name|PlanVisitor
name|visitor
parameter_list|)
throws|throws
name|FrontendException
block|{
specifier|final
name|Collection
argument_list|<
name|Operator
argument_list|>
name|nexts
init|=
name|Utils
operator|.
name|mergeCollection
argument_list|(
name|plan
operator|.
name|getSuccessors
argument_list|(
name|root
argument_list|)
argument_list|,
name|plan
operator|.
name|getSuccessors
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nexts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
name|op
range|:
name|nexts
control|)
block|{
name|postOrderWalk
argument_list|(
name|op
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PlanWalker
name|spawnChildWalker
parameter_list|(
name|OperatorPlan
name|operatorPlan
parameter_list|)
block|{
return|return
operator|new
name|PigRelExWalker
argument_list|(
name|operatorPlan
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End PigRelExWalker.java
end_comment

end_unit

