begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|piglet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScalarFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ScalarFunctionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperandCountRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|MultisetSqlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandCountRanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandTypeChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlReturnTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlUserDefinedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|FuncSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|BagFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DataBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|TupleFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|piglet
operator|.
name|PigTypes
operator|.
name|TYPE_FACTORY
import|;
end_import

begin_comment
comment|/**  * User-defined functions ({@link SqlUserDefinedFunction UDFs})  * needed for Pig-to-{@link RelNode} translation.  */
end_comment

begin_class
specifier|public
class|class
name|PigRelSqlUdfs
block|{
specifier|private
name|PigRelSqlUdfs
parameter_list|()
block|{
block|}
comment|// Defines ScalarFunc from their implementations
specifier|private
specifier|static
specifier|final
name|ScalarFunction
name|PIG_TUPLE_FUNC
init|=
name|ScalarFunctionImpl
operator|.
name|create
argument_list|(
name|PigRelSqlUdfs
operator|.
name|class
argument_list|,
literal|"buildTuple"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ScalarFunction
name|PIG_BAG_FUNC
init|=
name|ScalarFunctionImpl
operator|.
name|create
argument_list|(
name|PigRelSqlUdfs
operator|.
name|class
argument_list|,
literal|"buildBag"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ScalarFunction
name|MULTISET_PROJECTION_FUNC
init|=
name|ScalarFunctionImpl
operator|.
name|create
argument_list|(
name|PigRelSqlUdfs
operator|.
name|class
argument_list|,
literal|"projectMultiset"
argument_list|)
decl_stmt|;
comment|/**    * Multiset projection projects a subset of columns from the component type    * of a multiset type. The result is still a multiset but the component    * type only has a subset of columns of the original component type    *    *<p>For example, given a multiset type    * {@code M = [(A: int, B: double, C: varchar)]},    * a projection    * {@code MULTISET_PROJECTION(M, A, C)}    * gives a new multiset    * {@code N = [(A: int, C: varchar)]}.    */
specifier|static
specifier|final
name|SqlUserDefinedFunction
name|MULTISET_PROJECTION
init|=
operator|new
name|PigUserDefinedFunction
argument_list|(
literal|"MULTISET_PROJECTION"
argument_list|,
name|multisetProjectionInfer
argument_list|()
argument_list|,
name|multisetProjectionCheck
argument_list|()
argument_list|,
literal|null
argument_list|,
name|MULTISET_PROJECTION_FUNC
argument_list|)
decl_stmt|;
comment|/**    * Creates a Pig Tuple from a list of relational operands.    *    * @param operands Relational operands    * @return Pig Tuple SqlUDF    */
specifier|static
name|SqlUserDefinedFunction
name|createPigTupleUDF
parameter_list|(
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
return|return
operator|new
name|PigUserDefinedFunction
argument_list|(
literal|"PIG_TUPLE"
argument_list|,
name|infer
argument_list|(
name|PigRelSqlUdfs
operator|.
name|PIG_TUPLE_FUNC
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|getFamilitTypes
argument_list|(
name|operands
argument_list|)
argument_list|)
argument_list|,
name|getRelDataTypes
argument_list|(
name|operands
argument_list|)
argument_list|,
name|PigRelSqlUdfs
operator|.
name|PIG_TUPLE_FUNC
argument_list|)
return|;
block|}
comment|/**    * Creates a Pig DataBag from a list of relational operands.    *    * @param operands Relational operands    * @return Pig DataBag SqlUDF    */
specifier|static
name|SqlUserDefinedFunction
name|createPigBagUDF
parameter_list|(
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
return|return
operator|new
name|PigUserDefinedFunction
argument_list|(
literal|"PIG_BAG"
argument_list|,
name|infer
argument_list|(
name|PigRelSqlUdfs
operator|.
name|PIG_BAG_FUNC
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|getFamilitTypes
argument_list|(
name|operands
argument_list|)
argument_list|)
argument_list|,
name|getRelDataTypes
argument_list|(
name|operands
argument_list|)
argument_list|,
name|PigRelSqlUdfs
operator|.
name|PIG_BAG_FUNC
argument_list|)
return|;
block|}
comment|/**    * Creates a generic SqlUDF operator from a Pig UDF.    *    * @param udfName Name of the UDF    * @param method Method "exec" for implementing the UDF    * @param funcSpec Pig Funcspec    * @param inputType Argument type for the input    * @param returnType Function return data type    */
specifier|static
name|SqlUserDefinedFunction
name|createGeneralPigUdf
parameter_list|(
name|String
name|udfName
parameter_list|,
name|Method
name|method
parameter_list|,
name|FuncSpec
name|funcSpec
parameter_list|,
name|RelDataType
name|inputType
parameter_list|,
name|RelDataType
name|returnType
parameter_list|)
block|{
return|return
operator|new
name|PigUserDefinedFunction
argument_list|(
name|udfName
argument_list|,
name|opBinding
lambda|->
name|returnType
argument_list|,
name|OperandTypes
operator|.
name|ANY
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|inputType
argument_list|)
argument_list|,
name|ScalarFunctionImpl
operator|.
name|createUnsafe
argument_list|(
name|method
argument_list|)
argument_list|,
name|funcSpec
argument_list|)
return|;
block|}
comment|/**    * Returns a {@link SqlReturnTypeInference} for multiset projection operator.    */
specifier|private
specifier|static
name|SqlReturnTypeInference
name|multisetProjectionInfer
parameter_list|()
block|{
return|return
name|opBinding
lambda|->
block|{
specifier|final
name|MultisetSqlType
name|source
init|=
operator|(
name|MultisetSqlType
operator|)
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|source
operator|.
name|getComponentType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
comment|// Project a multiset of single column
if|if
condition|(
name|opBinding
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|2
condition|)
block|{
specifier|final
name|int
name|fieldNo
init|=
name|opBinding
operator|.
name|getOperandLiteralValue
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Corner case: source with only single column, nothing to do.
assert|assert
name|fieldNo
operator|==
literal|0
assert|;
return|return
name|source
return|;
block|}
else|else
block|{
return|return
name|TYPE_FACTORY
operator|.
name|createMultisetType
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|fieldNo
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
comment|// Construct a multiset of records of the input argument types
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|destNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|destTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|opBinding
operator|.
name|getOperandCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|fieldNo
init|=
name|opBinding
operator|.
name|getOperandLiteralValue
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|destNames
operator|.
name|add
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|fieldNo
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|destTypes
operator|.
name|add
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|fieldNo
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|TYPE_FACTORY
operator|.
name|createMultisetType
argument_list|(
name|TYPE_FACTORY
operator|.
name|createStructType
argument_list|(
name|destTypes
argument_list|,
name|destNames
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
return|;
block|}
comment|/**    * Returns a {@link SqlOperandTypeChecker} for multiset projection operator.    */
specifier|private
specifier|static
name|SqlOperandTypeChecker
name|multisetProjectionCheck
parameter_list|()
block|{
return|return
operator|new
name|SqlOperandTypeChecker
argument_list|()
block|{
specifier|public
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
comment|// Need at least two arguments
if|if
condition|(
name|callBinding
operator|.
name|getOperandCount
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// The first argument should be a multiset
if|if
condition|(
operator|!
operator|(
name|callBinding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|MultisetSqlType
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// All the subsequent arguments should be appropriate integers
specifier|final
name|MultisetSqlType
name|source
init|=
operator|(
name|MultisetSqlType
operator|)
name|callBinding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxFieldNo
init|=
name|source
operator|.
name|getComponentType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|callBinding
operator|.
name|getOperandCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|callBinding
operator|.
name|getOperandLiteralValue
argument_list|(
name|i
argument_list|,
name|Comparable
operator|.
name|class
argument_list|)
operator|instanceof
name|BigDecimal
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|fieldNo
init|=
name|callBinding
operator|.
name|getOperandLiteralValue
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Field number should between 0 and maxFieldNo
if|if
condition|(
name|fieldNo
operator|<
literal|0
operator|||
name|fieldNo
operator|>
name|maxFieldNo
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
return|return
name|SqlOperandCountRanges
operator|.
name|from
argument_list|(
literal|2
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
return|return
name|opName
operator|+
literal|"(...)"
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Consistency
name|getConsistency
parameter_list|()
block|{
return|return
name|Consistency
operator|.
name|NONE
return|;
block|}
block|}
return|;
block|}
comment|/**    * Helper method to return a list of SqlTypeFamily for a given list of relational operands    *    * @param operands List of relational operands    * @return List of SqlTypeFamilies    */
specifier|private
specifier|static
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|getFamilitTypes
parameter_list|(
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|SqlTypeFamily
name|family
init|=
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|family
operator|!=
literal|null
condition|?
name|family
else|:
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Helper method to return a list of RelDataType for a given list of relational operands    *    * @param operands List of relational operands    * @return List of RelDataTypes    */
specifier|private
specifier|static
name|List
argument_list|<
name|RelDataType
argument_list|>
name|getRelDataTypes
parameter_list|(
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
name|List
argument_list|<
name|RelDataType
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|operand
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Gets the SqlReturnTypeInference that can infer the return type from a    * function.    *    * @param function ScalarFunction    * @return SqlReturnTypeInference    */
specifier|private
specifier|static
name|SqlReturnTypeInference
name|infer
parameter_list|(
specifier|final
name|ScalarFunction
name|function
parameter_list|)
block|{
return|return
name|opBinding
lambda|->
name|getRelDataType
argument_list|(
name|function
argument_list|)
return|;
block|}
comment|/**    * Gets the return data type for a given function.    *    * @param function ScalarFunction    * @return returned data type    */
specifier|private
specifier|static
name|RelDataType
name|getRelDataType
parameter_list|(
name|ScalarFunction
name|function
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|TYPE_FACTORY
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|function
operator|.
name|getReturnType
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
operator|&&
operator|(
operator|(
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
operator|)
name|type
operator|)
operator|.
name|getJavaClass
argument_list|()
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
name|typeFactory
operator|.
name|toSql
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Implementation for PIG_TUPLE functions. Builds a Pig Tuple from    * an array of objects    *    * @param elements Array of element objects    * @return Pig Tuple    */
specifier|public
specifier|static
name|Tuple
name|buildTuple
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|TupleFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|newTuple
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Implementation for PIG_BAG functions. Builds a Pig DataBag from    * the corresponding input    *    * @param elements Input that contains a bag    * @return Pig Tuple    */
specifier|public
specifier|static
name|Tuple
name|buildBag
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
specifier|final
name|TupleFactory
name|tupleFactory
init|=
name|TupleFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|BagFactory
name|bagFactory
init|=
name|BagFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// Convert each row into a Tuple
name|List
argument_list|<
name|Tuple
argument_list|>
name|tupleList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|elements
operator|!=
literal|null
condition|)
block|{
comment|// The first input contains a list of rows for the bag
specifier|final
name|List
name|bag
init|=
operator|(
name|elements
index|[
literal|0
index|]
operator|instanceof
name|List
operator|)
condition|?
operator|(
name|List
operator|)
name|elements
index|[
literal|0
index|]
else|:
name|Collections
operator|.
name|singletonList
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|row
range|:
name|bag
control|)
block|{
name|tupleList
operator|.
name|add
argument_list|(
name|tupleFactory
operator|.
name|newTuple
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Then build a bag from the tuple list
name|DataBag
name|resultBag
init|=
name|bagFactory
operator|.
name|newDefaultBag
argument_list|(
name|tupleList
argument_list|)
decl_stmt|;
comment|// The returned result is a new Tuple with the newly constructed DataBag
comment|// as the first item.
name|List
argument_list|<
name|Object
argument_list|>
name|finalTuple
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|finalTuple
operator|.
name|add
argument_list|(
name|resultBag
argument_list|)
expr_stmt|;
if|if
condition|(
name|elements
operator|!=
literal|null
condition|)
block|{
comment|// Add the remaining elements from the input
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|finalTuple
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tupleFactory
operator|.
name|newTuple
argument_list|(
name|finalTuple
argument_list|)
return|;
block|}
comment|/**    * Implementation for BAG_PROJECTION functions. Builds a new multiset by    * projecting certain columns from another multiset.    *    * @param objects Input argument, the first one is a multiset, the remaining    *                are indexes of column to project.    * @return The projected multiset    */
specifier|public
specifier|static
name|List
name|projectMultiset
parameter_list|(
name|Object
modifier|...
name|objects
parameter_list|)
block|{
comment|// The first input is a multiset
specifier|final
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|inputMultiset
init|=
operator|(
name|List
operator|)
name|objects
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|List
name|projectedMultiset
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|row
range|:
name|inputMultiset
control|)
block|{
if|if
condition|(
name|objects
operator|.
name|length
operator|>
literal|2
condition|)
block|{
comment|// Projecting more than one column, the projected multiset should have
comment|// the component type of a row
name|Object
index|[]
name|newRow
init|=
operator|new
name|Object
index|[
name|objects
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|objects
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|newRow
index|[
name|j
operator|-
literal|1
index|]
operator|=
name|row
index|[
operator|(
name|Integer
operator|)
name|objects
index|[
name|j
index|]
index|]
expr_stmt|;
block|}
name|projectedMultiset
operator|.
name|add
argument_list|(
name|newRow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Projecting a single column
name|projectedMultiset
operator|.
name|add
argument_list|(
name|row
index|[
operator|(
name|Integer
operator|)
name|objects
index|[
literal|1
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|projectedMultiset
return|;
block|}
block|}
end_class

begin_comment
comment|// End PigRelSqlUdfs.java
end_comment

end_unit

