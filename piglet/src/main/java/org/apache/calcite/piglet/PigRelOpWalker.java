begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|piglet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|FrontendException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|OperatorPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|PlanVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|PlanWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|logical
operator|.
name|relational
operator|.
name|LogicalRelationalNodesVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|newplan
operator|.
name|logical
operator|.
name|relational
operator|.
name|LogicalRelationalOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Post-order walker for Pig logical relational plans. Walks the plan  * from sinks to sources.  */
end_comment

begin_class
class|class
name|PigRelOpWalker
extends|extends
name|PlanWalker
block|{
comment|/**    * Visitor that allow doing pre-visit.    */
specifier|abstract
specifier|static
class|class
name|PlanPreVisitor
extends|extends
name|LogicalRelationalNodesVisitor
block|{
name|PlanPreVisitor
parameter_list|(
name|OperatorPlan
name|plan
parameter_list|,
name|PlanWalker
name|walker
parameter_list|)
throws|throws
name|FrontendException
block|{
name|super
argument_list|(
name|plan
argument_list|,
name|walker
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called before a node.      *      * @param root Pig logical operator to check      * @return Returns whether the node has been visited before      */
specifier|public
specifier|abstract
name|boolean
name|preVisit
parameter_list|(
name|LogicalRelationalOperator
name|root
parameter_list|)
function_decl|;
block|}
name|PigRelOpWalker
parameter_list|(
name|OperatorPlan
name|plan
parameter_list|)
block|{
name|super
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|walk
parameter_list|(
name|PlanVisitor
name|planVisitor
parameter_list|)
throws|throws
name|FrontendException
block|{
if|if
condition|(
operator|!
operator|(
name|planVisitor
operator|instanceof
name|PigRelOpVisitor
operator|)
condition|)
block|{
throw|throw
operator|new
name|FrontendException
argument_list|(
literal|"Expected PigRelOpVisitor"
argument_list|,
literal|2223
argument_list|)
throw|;
block|}
specifier|final
name|PigRelOpVisitor
name|pigRelVistor
init|=
operator|(
name|PigRelOpVisitor
operator|)
name|planVisitor
decl_stmt|;
name|postOrderWalk
argument_list|(
name|pigRelVistor
operator|.
name|getCurrentRoot
argument_list|()
argument_list|,
name|pigRelVistor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Does post-order walk on the Pig logical relational plans from sinks to sources.    *    * @param root The root Pig logical relational operator    * @param visitor The visitor of each Pig logical operator node    * @throws FrontendException Exception during processing Pig operator    */
specifier|private
name|void
name|postOrderWalk
parameter_list|(
name|Operator
name|root
parameter_list|,
name|PlanPreVisitor
name|visitor
parameter_list|)
throws|throws
name|FrontendException
block|{
if|if
condition|(
name|root
operator|==
literal|null
operator|||
name|visitor
operator|.
name|preVisit
argument_list|(
operator|(
name|LogicalRelationalOperator
operator|)
name|root
argument_list|)
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|Operator
argument_list|>
name|nexts
init|=
name|Utils
operator|.
name|mergeCollection
argument_list|(
name|plan
operator|.
name|getPredecessors
argument_list|(
name|root
argument_list|)
argument_list|,
name|plan
operator|.
name|getSoftLinkPredecessors
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nexts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
name|op
range|:
name|nexts
control|)
block|{
name|postOrderWalk
argument_list|(
name|op
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PlanWalker
name|spawnChildWalker
parameter_list|(
name|OperatorPlan
name|operatorPlan
parameter_list|)
block|{
return|return
operator|new
name|PigRelOpWalker
argument_list|(
name|operatorPlan
argument_list|)
return|;
block|}
block|}
end_class

end_unit

