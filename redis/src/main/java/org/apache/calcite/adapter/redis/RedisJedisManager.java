begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool2
operator|.
name|impl
operator|.
name|GenericObjectPoolConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|Jedis
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|JedisPool
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|JedisPoolConfig
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|Protocol
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Manages connections to the Redis nodes.  */
end_comment

begin_class
specifier|public
class|class
name|RedisJedisManager
implements|implements
name|AutoCloseable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|JedisPool
argument_list|>
name|jedisPoolCache
decl_stmt|;
specifier|private
specifier|final
name|JedisPoolConfig
name|jedisPoolConfig
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxTotal
init|=
name|GenericObjectPoolConfig
operator|.
name|DEFAULT_MAX_TOTAL
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxIdle
init|=
name|GenericObjectPoolConfig
operator|.
name|DEFAULT_MAX_IDLE
decl_stmt|;
specifier|private
specifier|final
name|int
name|minIdle
init|=
name|GenericObjectPoolConfig
operator|.
name|DEFAULT_MIN_IDLE
decl_stmt|;
specifier|private
specifier|final
name|int
name|timeout
init|=
name|Protocol
operator|.
name|DEFAULT_TIMEOUT
decl_stmt|;
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|int
name|database
decl_stmt|;
specifier|public
name|RedisJedisManager
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|database
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|JedisPoolConfig
name|jedisPoolConfig
init|=
operator|new
name|JedisPoolConfig
argument_list|()
decl_stmt|;
name|jedisPoolConfig
operator|.
name|setMaxTotal
argument_list|(
name|maxTotal
argument_list|)
expr_stmt|;
name|jedisPoolConfig
operator|.
name|setMaxIdle
argument_list|(
name|maxIdle
argument_list|)
expr_stmt|;
name|jedisPoolConfig
operator|.
name|setMinIdle
argument_list|(
name|minIdle
argument_list|)
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|jedisPoolConfig
operator|=
name|jedisPoolConfig
expr_stmt|;
name|this
operator|.
name|jedisPoolCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
operator|new
name|JedisPoolRemovalListener
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|this
operator|::
name|createConsumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JedisPool
name|getJedisPool
parameter_list|()
block|{
name|requireNonNull
argument_list|(
name|host
argument_list|,
literal|"host is null"
argument_list|)
expr_stmt|;
return|return
name|jedisPoolCache
operator|.
name|getUnchecked
argument_list|(
name|host
argument_list|)
return|;
block|}
specifier|public
name|Jedis
name|getResource
parameter_list|()
block|{
return|return
name|getJedisPool
argument_list|()
operator|.
name|getResource
argument_list|()
return|;
block|}
specifier|private
name|JedisPool
name|createConsumer
parameter_list|()
block|{
name|String
name|pwd
init|=
name|password
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pwd
argument_list|)
condition|)
block|{
name|pwd
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|JedisPool
argument_list|(
name|jedisPoolConfig
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|timeout
argument_list|,
name|pwd
argument_list|,
name|database
argument_list|)
return|;
block|}
comment|/**    * JedisPoolRemovalListener for remove elements from cache.    */
specifier|private
specifier|static
class|class
name|JedisPoolRemovalListener
implements|implements
name|RemovalListener
argument_list|<
name|String
argument_list|,
name|JedisPool
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|String
argument_list|,
name|JedisPool
argument_list|>
name|notification
parameter_list|)
block|{
assert|assert
name|notification
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
assert|;
try|try
block|{
name|notification
operator|.
name|getValue
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"While destroying JedisPool {}"
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|jedisPoolCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

