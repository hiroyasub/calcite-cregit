begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|model
operator|.
name|JsonCustomTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Schema mapped onto a set of URLs / HTML tables. Each table in the schema  * is an HTML table on a URL.  */
end_comment

begin_class
class|class
name|RedisSchema
extends|extends
name|AbstractSchema
block|{
specifier|public
specifier|final
name|String
name|host
decl_stmt|;
specifier|public
specifier|final
name|int
name|port
decl_stmt|;
specifier|public
specifier|final
name|int
name|database
decl_stmt|;
specifier|public
specifier|final
name|String
name|password
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tables
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableMap
init|=
literal|null
decl_stmt|;
name|RedisSchema
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|database
parameter_list|,
name|String
name|password
parameter_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tables
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|tables
operator|=
name|tables
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
name|JsonCustomTable
index|[]
name|jsonCustomTables
init|=
operator|new
name|JsonCustomTable
index|[
name|tables
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|tables
operator|.
name|toArray
argument_list|(
name|jsonCustomTables
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|tableMap
operator|=
name|Maps
operator|.
name|asMap
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|tableNames
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|this
operator|::
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableMap
return|;
block|}
specifier|private
name|Table
name|table
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|RedisConfig
name|redisConfig
init|=
operator|new
name|RedisConfig
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|database
argument_list|,
name|password
argument_list|)
decl_stmt|;
return|return
name|RedisTable
operator|.
name|create
argument_list|(
name|RedisSchema
operator|.
name|this
argument_list|,
name|tableName
argument_list|,
name|redisConfig
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|RedisTableFieldInfo
name|getTableFieldInfo
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|RedisTableFieldInfo
name|tableFieldInfo
init|=
operator|new
name|RedisTableFieldInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
name|String
name|dataFormat
init|=
literal|""
decl_stmt|;
name|String
name|keyDelimiter
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|tables
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JsonCustomTable
name|jsonCustomTable
init|=
operator|(
name|JsonCustomTable
operator|)
name|this
operator|.
name|tables
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonCustomTable
operator|.
name|name
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|map
operator|=
name|jsonCustomTable
operator|.
name|operand
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
literal|"dataFormat"
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dataFormat is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fields is null"
argument_list|)
throw|;
block|}
name|dataFormat
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"dataFormat"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|fields
operator|=
operator|(
name|List
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
literal|"keyDelimiter"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|keyDelimiter
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"keyDelimiter"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
name|tableFieldInfo
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|tableFieldInfo
operator|.
name|setDataFormat
argument_list|(
name|dataFormat
argument_list|)
expr_stmt|;
name|tableFieldInfo
operator|.
name|setFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|keyDelimiter
argument_list|)
condition|)
block|{
name|tableFieldInfo
operator|.
name|setKeyDelimiter
argument_list|(
name|keyDelimiter
argument_list|)
expr_stmt|;
block|}
return|return
name|tableFieldInfo
return|;
block|}
block|}
end_class

end_unit

