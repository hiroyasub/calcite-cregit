begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Factory that creates a {@link RedisSchema}.  *  *<p>Allows a custom schema to be included in a redis-test-model.json file.  * See<a href="http://calcite.apache.org/docs/file_adapter.html">File adapter</a>.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
class|class
name|RedisSchemaFactory
implements|implements
name|SchemaFactory
block|{
comment|// public constructor, per factory contract
specifier|public
name|RedisSchemaFactory
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Schema
name|create
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|operand
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|operand
operator|.
name|get
argument_list|(
literal|"tables"
argument_list|)
operator|!=
literal|null
argument_list|,
literal|"tables must be specified"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|operand
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
operator|!=
literal|null
argument_list|,
literal|"host must be specified"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|operand
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
operator|!=
literal|null
argument_list|,
literal|"port must be specified"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|operand
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
operator|!=
literal|null
argument_list|,
literal|"database must be specified"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tables
init|=
operator|(
name|List
operator|)
name|operand
operator|.
name|get
argument_list|(
literal|"tables"
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|operand
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|port
init|=
operator|(
name|int
operator|)
name|operand
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
name|int
name|database
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|operand
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|operand
operator|.
name|get
argument_list|(
literal|"password"
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|operand
operator|.
name|get
argument_list|(
literal|"password"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|RedisSchema
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|database
argument_list|,
name|password
argument_list|,
name|tables
argument_list|)
return|;
block|}
block|}
end_class

end_unit

