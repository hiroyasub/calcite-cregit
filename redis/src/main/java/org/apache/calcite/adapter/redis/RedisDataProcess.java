begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|Jedis
import|;
end_import

begin_comment
comment|/**  * The class with RedisDataProcess.  */
end_comment

begin_class
specifier|public
class|class
name|RedisDataProcess
block|{
name|String
name|tableName
decl_stmt|;
name|String
name|dataFormat
decl_stmt|;
name|String
name|keyDelimiter
decl_stmt|;
name|RedisDataType
name|dataType
init|=
literal|null
decl_stmt|;
name|RedisDataFormat
name|redisDataFormat
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|fields
decl_stmt|;
specifier|private
name|Jedis
name|jedis
decl_stmt|;
specifier|private
specifier|final
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
specifier|public
name|RedisDataProcess
parameter_list|(
name|Jedis
name|jedis
parameter_list|,
name|RedisTableFieldInfo
name|tableFieldInfo
parameter_list|)
block|{
name|this
operator|.
name|jedis
operator|=
name|jedis
expr_stmt|;
name|String
name|type
init|=
name|jedis
operator|.
name|type
argument_list|(
name|tableFieldInfo
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|fields
operator|=
name|tableFieldInfo
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|dataFormat
operator|=
name|tableFieldInfo
operator|.
name|getDataFormat
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableFieldInfo
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|keyDelimiter
operator|=
name|tableFieldInfo
operator|.
name|getKeyDelimiter
argument_list|()
expr_stmt|;
name|dataType
operator|=
name|RedisDataType
operator|.
name|fromTypeName
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|redisDataFormat
operator|=
name|RedisDataFormat
operator|.
name|fromTypeName
argument_list|(
name|tableFieldInfo
operator|.
name|getDataFormat
argument_list|()
argument_list|)
expr_stmt|;
name|objectMapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_UNQUOTED_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_SINGLE_QUOTES
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_COMMENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
assert|assert
name|redisDataFormat
operator|!=
literal|null
assert|;
assert|assert
name|dataType
operator|!=
literal|null
assert|;
block|}
specifier|public
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|read
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|objs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
name|STRING
case|:
return|return
name|parse
argument_list|(
name|jedis
operator|.
name|keys
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
name|parse
argument_list|(
name|jedis
operator|.
name|lrange
argument_list|(
name|tableName
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
name|SET
case|:
return|return
name|parse
argument_list|(
name|jedis
operator|.
name|smembers
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
case|case
name|SORTED_SET
case|:
return|return
name|parse
argument_list|(
name|jedis
operator|.
name|zrange
argument_list|(
name|tableName
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
name|HASH
case|:
return|return
name|parse
argument_list|(
name|jedis
operator|.
name|hvals
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
default|default:
return|return
name|objs
return|;
block|}
block|}
specifier|private
name|Object
index|[]
name|parseJson
parameter_list|(
name|String
name|value
parameter_list|)
block|{
assert|assert
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
assert|;
name|Object
index|[]
name|arr
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|JsonNode
name|jsonNode
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Object
name|obj
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|"mapping"
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|arr
index|[
name|i
index|]
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|arr
index|[
name|i
index|]
operator|=
name|jsonNode
operator|.
name|findValue
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|"mapping"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Parsing json failed: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|arr
return|;
block|}
specifier|private
name|Object
index|[]
name|parseCsv
parameter_list|(
name|String
name|value
parameter_list|)
block|{
assert|assert
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
assert|;
name|String
index|[]
name|values
init|=
name|value
operator|.
name|split
argument_list|(
name|keyDelimiter
argument_list|)
decl_stmt|;
name|Object
index|[]
name|arr
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
assert|assert
name|values
operator|.
name|length
operator|==
name|arr
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|values
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|values
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|parse
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|objs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|dataType
operator|==
name|RedisDataType
operator|.
name|STRING
condition|)
block|{
name|key
operator|=
name|jedis
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|redisDataFormat
condition|)
block|{
case|case
name|RAW
case|:
name|objs
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|key
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|JSON
case|:
name|objs
operator|.
name|add
argument_list|(
name|parseJson
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CSV
case|:
name|objs
operator|.
name|add
argument_list|(
name|parseCsv
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|objs
return|;
block|}
specifier|public
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|parse
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|objs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|dataType
operator|==
name|RedisDataType
operator|.
name|STRING
condition|)
block|{
name|key
operator|=
name|jedis
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|redisDataFormat
condition|)
block|{
case|case
name|RAW
case|:
name|objs
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|key
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|JSON
case|:
name|objs
operator|.
name|add
argument_list|(
name|parseJson
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CSV
case|:
name|objs
operator|.
name|add
argument_list|(
name|parseCsv
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|objs
return|;
block|}
block|}
end_class

end_unit

