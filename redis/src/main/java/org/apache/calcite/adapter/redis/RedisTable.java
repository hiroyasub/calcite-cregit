begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Table mapped onto a redis table.  */
end_comment

begin_class
specifier|public
class|class
name|RedisTable
extends|extends
name|AbstractTable
implements|implements
name|ScannableTable
block|{
specifier|final
name|RedisSchema
name|schema
decl_stmt|;
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|final
name|RelProtoDataType
name|protoRowType
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|allFields
decl_stmt|;
specifier|final
name|String
name|dataFormat
decl_stmt|;
specifier|final
name|RedisConfig
name|redisConfig
decl_stmt|;
name|RedisEnumerator
name|redisEnumerator
decl_stmt|;
specifier|public
name|RedisTable
parameter_list|(
name|RedisSchema
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|,
name|RelProtoDataType
name|protoRowType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|allFields
parameter_list|,
name|String
name|dataFormat
parameter_list|,
name|RedisConfig
name|redisConfig
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|protoRowType
operator|=
name|protoRowType
expr_stmt|;
name|this
operator|.
name|allFields
operator|=
name|allFields
operator|==
literal|null
condition|?
name|ImmutableMap
operator|.
name|of
argument_list|()
else|:
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|allFields
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataFormat
operator|=
name|dataFormat
expr_stmt|;
name|this
operator|.
name|redisConfig
operator|=
name|redisConfig
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
if|if
condition|(
name|protoRowType
operator|!=
literal|null
condition|)
block|{
return|return
name|protoRowType
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
return|;
block|}
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|(
name|allFields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|allFields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|allFields
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|allFields
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|names
argument_list|,
name|types
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|Table
name|create
parameter_list|(
name|RedisSchema
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|,
name|RedisConfig
name|redisConfig
parameter_list|,
name|RelProtoDataType
name|protoRowType
parameter_list|)
block|{
specifier|final
name|RedisEnumerator
name|redisEnumerator
init|=
operator|new
name|RedisEnumerator
argument_list|(
name|redisConfig
argument_list|,
name|schema
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|RedisTableFieldInfo
name|tableFieldInfo
init|=
name|schema
operator|.
name|getTableFieldInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|allFields
init|=
name|redisEnumerator
operator|.
name|deduceRowType
argument_list|(
name|tableFieldInfo
argument_list|)
decl_stmt|;
return|return
operator|new
name|RedisTable
argument_list|(
name|schema
argument_list|,
name|tableName
argument_list|,
name|protoRowType
argument_list|,
name|allFields
argument_list|,
name|tableFieldInfo
operator|.
name|getDataFormat
argument_list|()
argument_list|,
name|redisConfig
argument_list|)
return|;
block|}
specifier|static
name|Table
name|create
parameter_list|(
name|RedisSchema
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
name|operand
parameter_list|,
name|RelProtoDataType
name|protoRowType
parameter_list|)
block|{
name|RedisConfig
name|redisConfig
init|=
operator|new
name|RedisConfig
argument_list|(
name|schema
operator|.
name|host
argument_list|,
name|schema
operator|.
name|port
argument_list|,
name|schema
operator|.
name|database
argument_list|,
name|schema
operator|.
name|password
argument_list|)
decl_stmt|;
return|return
name|create
argument_list|(
name|schema
argument_list|,
name|tableName
argument_list|,
name|redisConfig
argument_list|,
name|protoRowType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|RedisEnumerator
argument_list|(
name|redisConfig
argument_list|,
name|schema
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

