begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteSystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|parallel
operator|.
name|Execution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|parallel
operator|.
name|ExecutionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testcontainers
operator|.
name|DockerClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testcontainers
operator|.
name|containers
operator|.
name|GenericContainer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|embedded
operator|.
name|RedisServer
import|;
end_import

begin_comment
comment|/**  * RedisITCaseBase.  */
end_comment

begin_class
annotation|@
name|Execution
argument_list|(
name|ExecutionMode
operator|.
name|SAME_THREAD
argument_list|)
specifier|public
specifier|abstract
class|class
name|RedisCaseBase
block|{
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
name|getAvailablePort
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST
init|=
literal|"127.0.0.1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAX_HEAP
init|=
literal|"maxheap 51200000"
decl_stmt|;
comment|/**    * The Redis Docker container.    *    * Uses the Redis 2.8.19 version to be aligned with the embedded server.    */
specifier|private
specifier|static
specifier|final
name|GenericContainer
argument_list|<
name|?
argument_list|>
name|REDIS_CONTAINER
init|=
operator|new
name|GenericContainer
argument_list|<>
argument_list|(
literal|"redis:2.8.19"
argument_list|)
operator|.
name|withExposedPorts
argument_list|(
literal|6379
argument_list|)
decl_stmt|;
comment|/**    * The embedded Redis server.    *    * With the existing dependencies (com.github.kstyrc:embedded-redis:0.6) it uses by default    * Redis 2.8.19 version.    */
specifier|private
specifier|static
name|RedisServer
name|redisServer
decl_stmt|;
annotation|@
name|BeforeAll
specifier|public
specifier|static
name|void
name|startRedisContainer
parameter_list|()
block|{
comment|// Check if docker is running, and start container if possible
if|if
condition|(
name|CalciteSystemProperty
operator|.
name|TEST_WITH_DOCKER_CONTAINER
operator|.
name|value
argument_list|()
operator|&&
name|DockerClientFactory
operator|.
name|instance
argument_list|()
operator|.
name|isDockerAvailable
argument_list|()
condition|)
block|{
name|REDIS_CONTAINER
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeEach
specifier|public
name|void
name|createRedisServer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|REDIS_CONTAINER
operator|.
name|isRunning
argument_list|()
condition|)
block|{
if|if
condition|(
name|isWindows
argument_list|()
condition|)
block|{
name|redisServer
operator|=
name|RedisServer
operator|.
name|builder
argument_list|()
operator|.
name|port
argument_list|(
name|PORT
argument_list|)
operator|.
name|setting
argument_list|(
name|MAX_HEAP
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|redisServer
operator|=
operator|new
name|RedisServer
argument_list|(
name|PORT
argument_list|)
expr_stmt|;
block|}
name|Logger
operator|.
name|getAnonymousLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Not using Docker, starting RedisMiniServer"
argument_list|)
expr_stmt|;
name|redisServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isWindows
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
return|;
block|}
annotation|@
name|AfterEach
specifier|public
name|void
name|stopRedisServer
parameter_list|()
block|{
if|if
condition|(
operator|!
name|REDIS_CONTAINER
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|redisServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Find a non-occupied port.    *    * @return A non-occupied port.    */
specifier|public
specifier|static
name|int
name|getAvailablePort
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|ServerSocket
name|serverSocket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|int
name|port
init|=
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|0
condition|)
block|{
return|return
name|port
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find an available port on the host."
argument_list|)
throw|;
block|}
annotation|@
name|AfterAll
specifier|public
specifier|static
name|void
name|stopRedisContainer
parameter_list|()
block|{
if|if
condition|(
name|REDIS_CONTAINER
operator|!=
literal|null
operator|&&
name|REDIS_CONTAINER
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|REDIS_CONTAINER
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|int
name|getRedisServerPort
parameter_list|()
block|{
return|return
name|REDIS_CONTAINER
operator|.
name|isRunning
argument_list|()
condition|?
name|REDIS_CONTAINER
operator|.
name|getMappedPort
argument_list|(
literal|6379
argument_list|)
else|:
name|PORT
return|;
block|}
specifier|static
name|String
name|getRedisServerHost
parameter_list|()
block|{
return|return
name|REDIS_CONTAINER
operator|.
name|isRunning
argument_list|()
condition|?
name|REDIS_CONTAINER
operator|.
name|getContainerIpAddress
argument_list|()
else|:
name|HOST
return|;
block|}
block|}
end_class

end_unit

