begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteSystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Sources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|Protocol
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Tests for the {@code org.apache.calcite.adapter.redis} package.  */
end_comment

begin_class
specifier|public
class|class
name|RedisAdapterCaseBase
extends|extends
name|RedisDataCaseBase
block|{
comment|/**    * URL of the "redis-zips" model.    */
specifier|private
name|String
name|filePath
init|=
name|Sources
operator|.
name|of
argument_list|(
name|RedisAdapterCaseBase
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/redis-mix-model.json"
argument_list|)
argument_list|)
operator|.
name|file
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|private
name|String
name|model
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|TABLE_MAPS
init|=
operator|new
name|HashMap
argument_list|(
literal|15
argument_list|)
decl_stmt|;
static|static
block|{
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"raw_01"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"raw_02"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"raw_03"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"raw_04"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"raw_05"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"csv_01"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"csv_02"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"csv_03"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"csv_04"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"csv_05"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"json_01"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"json_02"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"json_03"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"json_04"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TABLE_MAPS
operator|.
name|put
argument_list|(
literal|"json_05"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeEach
annotation|@
name|Override
specifier|public
name|void
name|makeData
parameter_list|()
block|{
name|super
operator|.
name|makeData
argument_list|()
expr_stmt|;
name|readModelByJson
argument_list|()
expr_stmt|;
block|}
comment|/**    * Whether to run this test.    */
specifier|private
name|boolean
name|enabled
parameter_list|()
block|{
return|return
name|CalciteSystemProperty
operator|.
name|TEST_REDIS
operator|.
name|value
argument_list|()
return|;
block|}
comment|/**    * Creates a query against a data set given by a map.    */
specifier|private
name|CalciteAssert
operator|.
name|AssertQuery
name|sql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|model
argument_list|,
literal|"model cannot be null!"
argument_list|)
expr_stmt|;
return|return
name|CalciteAssert
operator|.
name|model
argument_list|(
name|model
argument_list|)
operator|.
name|enable
argument_list|(
name|enabled
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|private
name|void
name|readModelByJson
parameter_list|()
block|{
name|String
name|strResult
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ObjectMapper
name|objMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|objMapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_UNQUOTED_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_SINGLE_QUOTES
argument_list|,
literal|true
argument_list|)
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_COMMENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|JsonNode
name|rootNode
init|=
name|objMapper
operator|.
name|readTree
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|strResult
operator|=
name|rootNode
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Protocol
operator|.
name|DEFAULT_PORT
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|PORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
block|}
name|model
operator|=
name|strResult
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testRedisBySql
parameter_list|()
block|{
name|TABLE_MAPS
operator|.
name|forEach
argument_list|(
parameter_list|(
name|table
parameter_list|,
name|count
parameter_list|)
lambda|->
block|{
name|String
name|sql
init|=
literal|"Select count(*) as c from \""
operator|+
name|table
operator|+
literal|"\" where true"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"C="
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlWithJoin
parameter_list|()
block|{
name|String
name|sql
init|=
literal|"Select a.DEPTNO, b.NAME "
operator|+
literal|"from \"csv_01\" a left join \"json_02\" b "
operator|+
literal|"on a.DEPTNO=b.DEPTNO where true"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"DEPTNO=10; NAME=\"Sales1\""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

