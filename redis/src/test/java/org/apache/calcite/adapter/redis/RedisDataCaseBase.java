begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|Jedis
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|JedisPool
import|;
end_import

begin_import
import|import
name|redis
operator|.
name|clients
operator|.
name|jedis
operator|.
name|JedisPoolConfig
import|;
end_import

begin_comment
comment|/**  * RedisDataTypeTest.  */
end_comment

begin_class
specifier|public
class|class
name|RedisDataCaseBase
extends|extends
name|RedisCaseBase
block|{
specifier|private
name|JedisPool
name|pool
decl_stmt|;
specifier|final
name|String
index|[]
name|tableNames
init|=
block|{
literal|"raw_01"
block|,
literal|"raw_02"
block|,
literal|"raw_03"
block|,
literal|"raw_04"
block|,
literal|"raw_05"
block|,
literal|"csv_01"
block|,
literal|"csv_02"
block|,
literal|"csv_03"
block|,
literal|"csv_04"
block|,
literal|"csv_05"
block|,
literal|"json_01"
block|,
literal|"json_02"
block|,
literal|"json_03"
block|,
literal|"json_04"
block|,
literal|"json_05"
block|}
decl_stmt|;
annotation|@
name|BeforeEach
specifier|public
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
name|JedisPoolConfig
name|jedisPoolConfig
init|=
operator|new
name|JedisPoolConfig
argument_list|()
decl_stmt|;
name|jedisPoolConfig
operator|.
name|setMaxTotal
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|JedisPool
argument_list|(
name|jedisPoolConfig
argument_list|,
name|getRedisServerHost
argument_list|()
argument_list|,
name|getRedisServerPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flush all data
try|try
init|(
name|Jedis
name|jedis
init|=
name|pool
operator|.
name|getResource
argument_list|()
init|)
block|{
name|jedis
operator|.
name|flushAll
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|makeData
parameter_list|()
block|{
try|try
init|(
name|Jedis
name|jedis
init|=
name|pool
operator|.
name|getResource
argument_list|()
init|)
block|{
name|jedis
operator|.
name|del
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
comment|//set string
name|jedis
operator|.
name|set
argument_list|(
literal|"raw_01"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|set
argument_list|(
literal|"json_01"
argument_list|,
literal|"{\"DEPTNO\":10,\"NAME\":\"Sales\"}"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|set
argument_list|(
literal|"csv_01"
argument_list|,
literal|"10:Sales"
argument_list|)
expr_stmt|;
comment|//set list
name|jedis
operator|.
name|lpush
argument_list|(
literal|"raw_02"
argument_list|,
literal|"book1"
argument_list|,
literal|"book2"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|lpush
argument_list|(
literal|"json_02"
argument_list|,
literal|"{\"DEPTNO\":10,\"NAME\":\"Sales1\"}"
argument_list|,
literal|"{\"DEPTNO\":20,"
operator|+
literal|"\"NAME\":\"Sales2\"}"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|lpush
argument_list|(
literal|"csv_02"
argument_list|,
literal|"10:Sales"
argument_list|,
literal|"20:Sales"
argument_list|)
expr_stmt|;
comment|//set Set
name|jedis
operator|.
name|sadd
argument_list|(
literal|"raw_03"
argument_list|,
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|sadd
argument_list|(
literal|"json_03"
argument_list|,
literal|"{\"DEPTNO\":10,\"NAME\":\"Sales1\"}"
argument_list|,
literal|"{\"DEPTNO\":20,"
operator|+
literal|"\"NAME\":\"Sales1\"}"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|sadd
argument_list|(
literal|"csv_03"
argument_list|,
literal|"10:Sales"
argument_list|,
literal|"20:Sales"
argument_list|)
expr_stmt|;
comment|// set sortSet
name|jedis
operator|.
name|zadd
argument_list|(
literal|"raw_04"
argument_list|,
literal|22
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|zadd
argument_list|(
literal|"raw_04"
argument_list|,
literal|24
argument_list|,
literal|"user4"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|zadd
argument_list|(
literal|"json_04"
argument_list|,
literal|1
argument_list|,
literal|"{\"DEPTNO\":10,\"NAME\":\"Sales1\"}"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|zadd
argument_list|(
literal|"json_04"
argument_list|,
literal|2
argument_list|,
literal|"{\"DEPTNO\":11,\"NAME\":\"Sales2\"}"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|zadd
argument_list|(
literal|"csv_04"
argument_list|,
literal|1
argument_list|,
literal|"10:Sales"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|zadd
argument_list|(
literal|"csv_04"
argument_list|,
literal|2
argument_list|,
literal|"20:Sales"
argument_list|)
expr_stmt|;
comment|//set map
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|raw_05
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|raw_05
operator|.
name|put
argument_list|(
literal|"stuA"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|raw_05
operator|.
name|put
argument_list|(
literal|"stuB"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|hmset
argument_list|(
literal|"raw_05"
argument_list|,
name|raw_05
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|json_05
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|json_05
operator|.
name|put
argument_list|(
literal|"stuA"
argument_list|,
literal|"{\"DEPTNO\":10,\"NAME\":\"stuA\"}"
argument_list|)
expr_stmt|;
name|json_05
operator|.
name|put
argument_list|(
literal|"stuB"
argument_list|,
literal|"{\"DEPTNO\":10,\"NAME\":\"stuB\"}"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|hmset
argument_list|(
literal|"json_05"
argument_list|,
name|json_05
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|csv_05
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|csv_05
operator|.
name|put
argument_list|(
literal|"stuA"
argument_list|,
literal|"10:Sales"
argument_list|)
expr_stmt|;
name|csv_05
operator|.
name|put
argument_list|(
literal|"stuB"
argument_list|,
literal|"20:Sales"
argument_list|)
expr_stmt|;
name|jedis
operator|.
name|hmset
argument_list|(
literal|"csv_05"
argument_list|,
name|csv_05
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterEach
specifier|public
name|void
name|shutDown
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|pool
condition|)
block|{
name|pool
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

