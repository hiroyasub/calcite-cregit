begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Implementation of {@link org.apache.calcite.avatica.Meta.MetaResultSet}  *  upon a JDBC {@link java.sql.ResultSet}.  *  *  @see org.apache.calcite.avatica.jdbc.JdbcMeta */
end_comment

begin_class
class|class
name|JdbcResultSet
extends|extends
name|Meta
operator|.
name|MetaResultSet
block|{
specifier|protected
name|JdbcResultSet
parameter_list|(
name|String
name|connectionId
parameter_list|,
name|int
name|statementId
parameter_list|,
name|boolean
name|ownStatement
parameter_list|,
name|Meta
operator|.
name|Signature
name|signature
parameter_list|,
name|Meta
operator|.
name|Frame
name|firstFrame
parameter_list|)
block|{
name|super
argument_list|(
name|connectionId
argument_list|,
name|statementId
argument_list|,
name|ownStatement
argument_list|,
name|signature
argument_list|,
name|firstFrame
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a result set. */
specifier|public
specifier|static
name|JdbcResultSet
name|create
parameter_list|(
name|String
name|connectionId
parameter_list|,
name|int
name|statementId
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|connectionId
argument_list|,
name|statementId
argument_list|,
name|resultSet
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** Creates a result set with maxRowCount. */
specifier|public
specifier|static
name|JdbcResultSet
name|create
parameter_list|(
name|String
name|connectionId
parameter_list|,
name|int
name|statementId
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
block|{
try|try
block|{
name|Meta
operator|.
name|Signature
name|sig
init|=
name|JdbcMeta
operator|.
name|signature
argument_list|(
name|resultSet
operator|.
name|getMetaData
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|DateTimeUtils
operator|.
name|GMT_ZONE
argument_list|)
decl_stmt|;
specifier|final
name|Meta
operator|.
name|Frame
name|firstFrame
init|=
name|frame
argument_list|(
name|resultSet
argument_list|,
literal|0
argument_list|,
name|maxRowCount
argument_list|,
name|calendar
argument_list|)
decl_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|JdbcResultSet
argument_list|(
name|connectionId
argument_list|,
name|statementId
argument_list|,
literal|true
argument_list|,
name|sig
argument_list|,
name|firstFrame
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Creates a frame containing a given number or unlimited number of rows    * from a result set. */
specifier|static
name|Meta
operator|.
name|Frame
name|frame
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|fetchMaxRowCount
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
specifier|final
name|int
name|columnCount
init|=
name|metaData
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|types
init|=
operator|new
name|int
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|metaData
operator|.
name|getColumnType
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|fetchMaxRowCount
operator|<
literal|0
operator|||
name|i
operator|<
name|fetchMaxRowCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|Object
index|[]
name|columns
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnCount
condition|;
name|j
operator|++
control|)
block|{
name|columns
index|[
name|j
index|]
operator|=
name|getValue
argument_list|(
name|resultSet
argument_list|,
name|types
index|[
name|j
index|]
argument_list|,
name|j
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Meta
operator|.
name|Frame
argument_list|(
name|offset
argument_list|,
name|done
argument_list|,
name|rows
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|getValue
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|j
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|SQLException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Types
operator|.
name|BIGINT
case|:
specifier|final
name|long
name|aLong
init|=
name|resultSet
operator|.
name|getLong
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|aLong
operator|==
literal|0
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aLong
return|;
case|case
name|Types
operator|.
name|INTEGER
case|:
specifier|final
name|int
name|anInt
init|=
name|resultSet
operator|.
name|getInt
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|anInt
operator|==
literal|0
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|anInt
return|;
case|case
name|Types
operator|.
name|SMALLINT
case|:
specifier|final
name|short
name|aShort
init|=
name|resultSet
operator|.
name|getShort
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|aShort
operator|==
literal|0
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aShort
return|;
case|case
name|Types
operator|.
name|TINYINT
case|:
specifier|final
name|byte
name|aByte
init|=
name|resultSet
operator|.
name|getByte
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|aByte
operator|==
literal|0
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aByte
return|;
case|case
name|Types
operator|.
name|DOUBLE
case|:
case|case
name|Types
operator|.
name|FLOAT
case|:
specifier|final
name|double
name|aDouble
init|=
name|resultSet
operator|.
name|getDouble
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|aDouble
operator|==
literal|0D
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aDouble
return|;
case|case
name|Types
operator|.
name|REAL
case|:
specifier|final
name|float
name|aFloat
init|=
name|resultSet
operator|.
name|getFloat
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|aFloat
operator|==
literal|0D
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|aFloat
return|;
case|case
name|Types
operator|.
name|DATE
case|:
specifier|final
name|Date
name|aDate
init|=
name|resultSet
operator|.
name|getDate
argument_list|(
name|j
operator|+
literal|1
argument_list|,
name|calendar
argument_list|)
decl_stmt|;
return|return
name|aDate
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|int
operator|)
operator|(
name|aDate
operator|.
name|getTime
argument_list|()
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
case|case
name|Types
operator|.
name|TIME
case|:
specifier|final
name|Time
name|aTime
init|=
name|resultSet
operator|.
name|getTime
argument_list|(
name|j
operator|+
literal|1
argument_list|,
name|calendar
argument_list|)
decl_stmt|;
return|return
name|aTime
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|int
operator|)
operator|(
name|aTime
operator|.
name|getTime
argument_list|()
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
specifier|final
name|Timestamp
name|aTimestamp
init|=
name|resultSet
operator|.
name|getTimestamp
argument_list|(
name|j
operator|+
literal|1
argument_list|,
name|calendar
argument_list|)
decl_stmt|;
return|return
name|aTimestamp
operator|==
literal|null
condition|?
literal|null
else|:
name|aTimestamp
operator|.
name|getTime
argument_list|()
return|;
default|default:
return|return
name|resultSet
operator|.
name|getObject
argument_list|(
name|j
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JdbcResultSet.java
end_comment

end_unit

