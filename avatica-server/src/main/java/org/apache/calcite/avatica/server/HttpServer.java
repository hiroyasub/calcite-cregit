begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
operator|.
name|RpcMetadataResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_comment
comment|/**  * Avatica HTTP server.  *  *<p>If you need to change the server's configuration, override the  * {@link #configureConnector(ServerConnector, int)} method in a derived class.  */
end_comment

begin_class
specifier|public
class|class
name|HttpServer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HttpServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|AvaticaHandler
name|handler
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|HttpServer
parameter_list|(
name|Handler
name|handler
parameter_list|)
block|{
name|this
argument_list|(
name|wrapJettyHandler
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HttpServer
parameter_list|(
name|AvaticaHandler
name|handler
parameter_list|)
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|HttpServer
parameter_list|(
name|int
name|port
parameter_list|,
name|Handler
name|handler
parameter_list|)
block|{
name|this
argument_list|(
name|port
argument_list|,
name|wrapJettyHandler
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HttpServer
parameter_list|(
name|int
name|port
parameter_list|,
name|AvaticaHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
specifier|private
specifier|static
name|AvaticaHandler
name|wrapJettyHandler
parameter_list|(
name|Handler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|AvaticaHandler
condition|)
block|{
return|return
operator|(
name|AvaticaHandler
operator|)
name|handler
return|;
block|}
comment|// Backwards compatibility, noop's the AvaticaHandler interface
return|return
operator|new
name|DelegatingAvaticaHandler
argument_list|(
name|handler
argument_list|)
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Server is already started"
argument_list|)
throw|;
block|}
specifier|final
name|QueuedThreadPool
name|threadPool
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
name|threadPool
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|server
operator|.
name|manage
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|ServerConnector
name|connector
init|=
name|configureConnector
argument_list|(
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|)
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|server
operator|.
name|setConnectors
argument_list|(
operator|new
name|Connector
index|[]
block|{
name|connector
block|}
argument_list|)
expr_stmt|;
specifier|final
name|HandlerList
name|handlerList
init|=
operator|new
name|HandlerList
argument_list|()
decl_stmt|;
name|handlerList
operator|.
name|setHandlers
argument_list|(
operator|new
name|Handler
index|[]
block|{
name|handler
block|,
operator|new
name|DefaultHandler
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|handlerList
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|port
operator|=
name|connector
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service listening on port "
operator|+
name|getPort
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
comment|// Set the information about the address for this server
try|try
block|{
name|this
operator|.
name|handler
operator|.
name|setServerRpcMetadata
argument_list|(
name|createRpcServerMetadata
argument_list|(
name|connector
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// Failed to do the DNS lookup, bail out.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RpcMetadataResponse
name|createRpcServerMetadata
parameter_list|(
name|ServerConnector
name|connector
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|String
name|host
init|=
name|connector
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|host
condition|)
block|{
comment|// "null" means binding to all interfaces, we need to pick one so the client gets a real
comment|// address and not "0.0.0.0" or similar.
name|host
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|port
init|=
name|connector
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
return|return
operator|new
name|RpcMetadataResponse
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%d"
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Configures the server connector.    *    *<p>The default configuration sets a timeout of 1 minute and disables    * TCP linger time.    *    *<p>To change the configuration, override this method in a derived class.    * The overriding method must call its super method.    *    * @param connector connector to be configured    * @param port port number handed over in constructor    */
specifier|protected
name|ServerConnector
name|configureConnector
parameter_list|(
name|ServerConnector
name|connector
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|connector
operator|.
name|setIdleTimeout
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setSoLingerTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Server is already stopped"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Service terminating."
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Server
name|server1
init|=
name|server
decl_stmt|;
name|port
operator|=
operator|-
literal|1
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
name|server1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
block|}
end_class

begin_comment
comment|// End HttpServer.java
end_comment

end_unit

