begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Jetty handler that executes Avatica JSON request-responses.  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
specifier|private
name|Main
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ClassNotFoundException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
name|HttpServer
name|server
init|=
name|start
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates and starts an {@link HttpServer}.    *    *<p>Arguments are as follows:    *<ul>    *<li>args[0]: the {@link Meta.Factory} class name    *<li>args[1+]: arguments passed along to    *   {@link Meta.Factory#create(java.util.List)}    *</ul>    *    * @param args Command-line arguments    */
specifier|public
specifier|static
name|HttpServer
name|start
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|String
name|factoryClassName
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|Class
name|factoryClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|factoryClassName
argument_list|)
decl_stmt|;
name|Meta
operator|.
name|Factory
name|factory
init|=
operator|(
name|Meta
operator|.
name|Factory
operator|)
name|factoryClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Meta
name|meta
init|=
name|factory
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
operator|new
name|LocalService
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|HttpServer
name|server
init|=
operator|new
name|HttpServer
argument_list|(
literal|8765
argument_list|,
operator|new
name|AvaticaHandler
argument_list|(
name|service
argument_list|)
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|server
return|;
block|}
block|}
end_class

begin_comment
comment|// End Main.java
end_comment

end_unit

