begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|jdbc
operator|.
name|JdbcMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalJsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|MockJsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|scott
operator|.
name|data
operator|.
name|hsqldb
operator|.
name|ScottHsqldb
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ParameterMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit test for Avatica Remote JDBC driver.  */
end_comment

begin_class
specifier|public
class|class
name|RemoteDriverTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MJS
init|=
name|MockJsonService
operator|.
name|Factory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LJS
init|=
name|LocalJdbcServiceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QRJS
init|=
name|QuasiRemoteJdbcServiceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConnectionSpec
name|CONNECTION_SPEC
init|=
name|ConnectionSpec
operator|.
name|HSQLDB
decl_stmt|;
specifier|private
name|Connection
name|mjs
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:factory="
operator|+
name|MJS
argument_list|)
return|;
block|}
specifier|private
name|Connection
name|ljs
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:factory="
operator|+
name|QRJS
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|QuasiRemoteJdbcServiceFactory
operator|.
name|initService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegister
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchemas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|mjs
argument_list|()
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metaData
operator|.
name|getColumnCount
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CATALOG"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTables
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|mjs
argument_list|()
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metaData
operator|.
name|getColumnCount
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_NAME"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testNoFactory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CATALOG"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testCatalogsMock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|mjs
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CATALOG"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatementExecuteQueryLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|checkStatementExecuteQuery
argument_list|(
name|ljs
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testStatementExecuteQueryMock
parameter_list|()
throws|throws
name|Exception
block|{
name|checkStatementExecuteQuery
argument_list|(
name|mjs
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareExecuteQueryLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|checkStatementExecuteQuery
argument_list|(
name|ljs
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPrepareExecuteQueryMock
parameter_list|()
throws|throws
name|Exception
block|{
name|checkStatementExecuteQuery
argument_list|(
name|mjs
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkStatementExecuteQuery
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|prepare
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (\n"
operator|+
literal|"  values (1, 'a'), (null, 'b'), (3, 'c')) as t (c1, c2)"
decl_stmt|;
specifier|final
name|Statement
name|statement
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
decl_stmt|;
specifier|final
name|ParameterMetaData
name|parameterMetaData
decl_stmt|;
if|if
condition|(
name|prepare
condition|)
block|{
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|statement
operator|=
name|ps
expr_stmt|;
name|parameterMetaData
operator|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|parameterMetaData
operator|=
literal|null
expr_stmt|;
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameterMetaData
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C1"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C2"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatementExecuteLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|checkStatementExecute
argument_list|(
name|ljs
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareExecuteLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|checkStatementExecute
argument_list|(
name|ljs
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkStatementExecute
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|prepare
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (\n"
operator|+
literal|"  values (1, 'a'), (null, 'b'), (3, 'c')) as t (c1, c2)"
decl_stmt|;
specifier|final
name|Statement
name|statement
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
decl_stmt|;
specifier|final
name|ParameterMetaData
name|parameterMetaData
decl_stmt|;
if|if
condition|(
name|prepare
condition|)
block|{
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|statement
operator|=
name|ps
expr_stmt|;
name|parameterMetaData
operator|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|getResultSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|parameterMetaData
operator|=
literal|null
expr_stmt|;
name|assertTrue
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|statement
operator|.
name|getResultSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parameterMetaData
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C1"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C2"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateInsertUpdateDrop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|drop
init|=
literal|"drop table TEST_TABLE if exists"
decl_stmt|;
specifier|final
name|String
name|create
init|=
literal|"create table TEST_TABLE("
operator|+
literal|"id int not null, "
operator|+
literal|"msg varchar(3) not null)"
decl_stmt|;
specifier|final
name|String
name|insert
init|=
literal|"insert into TEST_TABLE values(1, 'foo')"
decl_stmt|;
specifier|final
name|String
name|update
init|=
literal|"update TEST_TABLE set msg='bar' where id=1"
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ljs
argument_list|()
init|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|;
name|PreparedStatement
name|pstmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"values 1"
argument_list|)
init|)
block|{
comment|// drop
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|drop
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|drop
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Statement did not return a result set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|(
name|drop
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// create
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|create
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|drop
argument_list|)
argument_list|)
expr_stmt|;
comment|// tidy up
try|try
block|{
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|create
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Statement did not return a result set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|drop
argument_list|)
argument_list|)
expr_stmt|;
comment|// tidy up
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|(
name|create
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|insert
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|insert
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Statement did not return a result set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|(
name|insert
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// update
name|assertFalse
argument_list|(
name|statement
operator|.
name|execute
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|update
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Statement did not return a result set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|statement
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statement
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|messages
init|=
block|{
literal|"Cannot call executeQuery(String) on prepared or callable statement"
block|,
literal|"Cannot call execute(String) on prepared or callable statement"
block|,
literal|"Cannot call executeUpdate(String) on prepared or callable statement"
block|,       }
decl_stmt|;
for|for
control|(
name|String
name|sql
range|:
operator|new
name|String
index|[]
block|{
name|drop
block|,
name|create
block|,
name|insert
block|,
name|update
block|}
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Object
name|o
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|o
operator|=
name|pstmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|o
operator|=
name|pstmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
break|break;
default|default:
name|o
operator|=
name|pstmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypeHandling
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|query
init|=
literal|"select * from EMP"
decl_stmt|;
try|try
init|(
name|Connection
name|cannon
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
init|;
name|Connection
name|underTest
init|=
name|ljs
argument_list|()
init|;
name|Statement
name|s1
init|=
name|cannon
operator|.
name|createStatement
argument_list|()
init|;
name|Statement
name|s2
init|=
name|underTest
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|s1
operator|.
name|execute
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s2
operator|.
name|execute
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|rs1
init|=
name|s1
operator|.
name|getResultSet
argument_list|()
init|;
name|ResultSet
name|rs2
init|=
name|s2
operator|.
name|getResultSet
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
name|rs1
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|,
name|rs2
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|colCount
init|=
name|rs1
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs1
operator|.
name|next
argument_list|()
operator|&&
name|rs2
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o1
init|=
name|rs1
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Object
name|o2
init|=
name|rs2
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Integer
operator|&&
name|o2
operator|instanceof
name|Short
condition|)
block|{
comment|// Hsqldb returns Integer for short columns; we prefer Short
name|o1
operator|=
operator|(
operator|(
name|Number
operator|)
name|o1
operator|)
operator|.
name|shortValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|o1
operator|instanceof
name|Integer
operator|&&
name|o2
operator|instanceof
name|Byte
condition|)
block|{
comment|// Hsqldb returns Integer for tinyint columns; we prefer Byte
name|o1
operator|=
operator|(
operator|(
name|Number
operator|)
name|o1
operator|)
operator|.
name|byteValue
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|rs1
operator|.
name|next
argument_list|()
argument_list|,
name|rs2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"[CALCITE-687] Make RemoteDriverTest.testStatementLifecycle thread-safe"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testStatementLifecycle
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|AvaticaConnection
name|connection
init|=
operator|(
name|AvaticaConnection
operator|)
name|ljs
argument_list|()
init|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|AvaticaStatement
argument_list|>
name|clientMap
init|=
name|connection
operator|.
name|statementMap
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|serverMap
init|=
name|QuasiRemoteJdbcServiceFactory
operator|.
name|getRemoteStatementMap
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clientMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serverMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionIsolation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Wait 5s for all other tests to finish. (Sorry! Hack!)
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select * from (values (1, 'a'))"
decl_stmt|;
name|Connection
name|conn1
init|=
name|ljs
argument_list|()
decl_stmt|;
name|Connection
name|conn2
init|=
name|ljs
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|connectionMap
init|=
name|QuasiRemoteJdbcServiceFactory
operator|.
name|getRemoteConnectionMap
argument_list|(
operator|(
name|AvaticaConnection
operator|)
name|conn1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"connection cache should start empty"
argument_list|,
literal|0
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PreparedStatement
name|conn1stmt1
init|=
name|conn1
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"statement creation implicitly creates a connection server-side"
argument_list|,
literal|1
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PreparedStatement
name|conn2stmt1
init|=
name|conn2
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"statement creation implicitly creates a connection server-side"
argument_list|,
literal|2
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AvaticaPreparedStatement
name|s1
init|=
operator|(
name|AvaticaPreparedStatement
operator|)
name|conn1stmt1
decl_stmt|;
name|AvaticaPreparedStatement
name|s2
init|=
operator|(
name|AvaticaPreparedStatement
operator|)
name|conn2stmt1
decl_stmt|;
name|assertFalse
argument_list|(
literal|"connection id's should be unique"
argument_list|,
name|s1
operator|.
name|handle
operator|.
name|connectionId
operator|.
name|equalsIgnoreCase
argument_list|(
name|s2
operator|.
name|handle
operator|.
name|connectionId
argument_list|)
argument_list|)
expr_stmt|;
name|conn2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"closing a connection closes the server-side connection"
argument_list|,
literal|1
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"closing a connection closes the server-side connection"
argument_list|,
literal|0
argument_list|,
name|connectionMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareBindExecuteFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|checkPrepareBindExecuteFetch
argument_list|(
name|ljs
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPrepareBindExecuteFetch
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select cast(? as integer) * 3 as c, 'x' as x\n"
operator|+
literal|"from (values (1, 'a'))"
decl_stmt|;
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|ps
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"X"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ResultSet
name|resultSet
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|resultSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"exception while executing query: unbound parameter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ParameterMetaData
name|parameterMetaData
init|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet2
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|resultSet2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet2
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet2
operator|.
name|wasNull
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet2
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|setObject
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet3
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet3
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet3
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet3
operator|.
name|wasNull
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet3
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet3
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareBindExecuteFetchVarbinary
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|ljs
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select x'de' || ? as c from (values (1, 'a'))"
decl_stmt|;
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|ParameterMetaData
name|parameterMetaData
init|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setBytes
argument_list|(
literal|1
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|65
block|,
literal|0
block|,
literal|66
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xDE
block|,
literal|65
block|,
literal|0
block|,
literal|66
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareBindExecuteFetchDate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|ljs
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select ? + interval '2' day as c from (values (1, 'a'))"
decl_stmt|;
specifier|final
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|ParameterMetaData
name|parameterMetaData
init|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parameterMetaData
operator|.
name|getParameterCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|2015
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|long
name|time
init|=
name|calendar
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
decl_stmt|;
name|ps
operator|.
name|setDate
argument_list|(
literal|1
argument_list|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|time
argument_list|)
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|calendar
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Date
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|,
name|calendar
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|time
argument_list|)
argument_list|,
name|calendar
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|,
name|calendar
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|,
name|calendar
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setObject
argument_list|(
literal|1
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|calendar
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Date
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|,
name|calendar
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|time
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Factory that creates a service based on a local JDBC connection.    */
specifier|public
specifier|static
class|class
name|LocalJdbcServiceFactory
implements|implements
name|Service
operator|.
name|Factory
block|{
annotation|@
name|Override
specifier|public
name|Service
name|create
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|LocalService
argument_list|(
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Factory that creates a service based on a local JDBC connection.    */
specifier|public
specifier|static
class|class
name|QuasiRemoteJdbcServiceFactory
implements|implements
name|Service
operator|.
name|Factory
block|{
comment|/** a singleton instance that is recreated for each test */
specifier|private
specifier|static
name|Service
name|service
decl_stmt|;
specifier|static
name|void
name|initService
parameter_list|()
block|{
try|try
block|{
specifier|final
name|JdbcMeta
name|jdbcMeta
init|=
operator|new
name|JdbcMeta
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
decl_stmt|;
specifier|final
name|LocalService
name|localService
init|=
operator|new
name|LocalService
argument_list|(
name|jdbcMeta
argument_list|)
decl_stmt|;
name|service
operator|=
operator|new
name|LocalJsonService
argument_list|(
name|localService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Service
name|create
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
assert|assert
name|service
operator|!=
literal|null
assert|;
return|return
name|service
return|;
block|}
comment|/**      * Reach into the guts of a quasi-remote connection and pull out the      * statement map from the other side.      * TODO: refactor tests to replace reflection with package-local access      */
specifier|static
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|getRemoteStatementMap
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|metaF
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|metaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Meta
name|clientMeta
init|=
operator|(
name|Meta
operator|)
name|metaF
operator|.
name|get
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceF
init|=
name|clientMeta
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalJsonService
name|remoteMetaService
init|=
operator|(
name|LocalJsonService
operator|)
name|remoteMetaServiceF
operator|.
name|get
argument_list|(
name|clientMeta
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceServiceF
init|=
name|remoteMetaService
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalService
name|remoteMetaServiceService
init|=
operator|(
name|LocalService
operator|)
name|remoteMetaServiceServiceF
operator|.
name|get
argument_list|(
name|remoteMetaService
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceServiceMetaF
init|=
name|remoteMetaServiceService
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceMetaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JdbcMeta
name|serverMeta
init|=
operator|(
name|JdbcMeta
operator|)
name|remoteMetaServiceServiceMetaF
operator|.
name|get
argument_list|(
name|remoteMetaServiceService
argument_list|)
decl_stmt|;
name|Field
name|jdbcMetaStatementMapF
init|=
name|JdbcMeta
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"statementCache"
argument_list|)
decl_stmt|;
name|jdbcMetaStatementMapF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
return|return
operator|(
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
operator|)
name|jdbcMetaStatementMapF
operator|.
name|get
argument_list|(
name|serverMeta
argument_list|)
return|;
block|}
comment|/**      * Reach into the guts of a quasi-remote connection and pull out the      * connection map from the other side.      * TODO: refactor tests to replace reflection with package-local access      */
specifier|static
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|getRemoteConnectionMap
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|metaF
init|=
name|AvaticaConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|metaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Meta
name|clientMeta
init|=
operator|(
name|Meta
operator|)
name|metaF
operator|.
name|get
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceF
init|=
name|clientMeta
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalJsonService
name|remoteMetaService
init|=
operator|(
name|LocalJsonService
operator|)
name|remoteMetaServiceF
operator|.
name|get
argument_list|(
name|clientMeta
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceServiceF
init|=
name|remoteMetaService
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocalService
name|remoteMetaServiceService
init|=
operator|(
name|LocalService
operator|)
name|remoteMetaServiceServiceF
operator|.
name|get
argument_list|(
name|remoteMetaService
argument_list|)
decl_stmt|;
name|Field
name|remoteMetaServiceServiceMetaF
init|=
name|remoteMetaServiceService
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"meta"
argument_list|)
decl_stmt|;
name|remoteMetaServiceServiceMetaF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JdbcMeta
name|serverMeta
init|=
operator|(
name|JdbcMeta
operator|)
name|remoteMetaServiceServiceMetaF
operator|.
name|get
argument_list|(
name|remoteMetaServiceService
argument_list|)
decl_stmt|;
name|Field
name|jdbcMetaConnectionCacheF
init|=
name|JdbcMeta
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"connectionCache"
argument_list|)
decl_stmt|;
name|jdbcMetaConnectionCacheF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
return|return
operator|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
operator|)
name|jdbcMetaConnectionCacheF
operator|.
name|get
argument_list|(
name|serverMeta
argument_list|)
return|;
block|}
block|}
comment|/** Information necessary to create a JDBC connection. Specify one to run    * tests against a different database. (hsqldb is the default.) */
specifier|public
specifier|static
class|class
name|ConnectionSpec
block|{
specifier|public
specifier|final
name|String
name|url
decl_stmt|;
specifier|public
specifier|final
name|String
name|username
decl_stmt|;
specifier|public
specifier|final
name|String
name|password
decl_stmt|;
specifier|public
specifier|final
name|String
name|driver
decl_stmt|;
specifier|public
name|ConnectionSpec
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|driver
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|ConnectionSpec
name|HSQLDB
init|=
operator|new
name|ConnectionSpec
argument_list|(
name|ScottHsqldb
operator|.
name|URI
argument_list|,
name|ScottHsqldb
operator|.
name|USER
argument_list|,
name|ScottHsqldb
operator|.
name|PASSWORD
argument_list|,
literal|"org.hsqldb.jdbcDriver"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End RemoteDriverTest.java
end_comment

end_unit

