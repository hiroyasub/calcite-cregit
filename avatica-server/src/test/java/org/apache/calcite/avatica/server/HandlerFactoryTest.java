begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Driver
operator|.
name|Serialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests the {@link HandlerFactory} implementation.  */
end_comment

begin_class
specifier|public
class|class
name|HandlerFactoryTest
block|{
specifier|private
name|HandlerFactory
name|factory
decl_stmt|;
specifier|private
name|Service
name|service
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|this
operator|.
name|factory
operator|=
operator|new
name|HandlerFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJson
parameter_list|()
block|{
name|Handler
name|handler
init|=
name|factory
operator|.
name|getHandler
argument_list|(
name|service
argument_list|,
name|Serialization
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected an implementation of the AvaticaHandler, "
operator|+
literal|"but got "
operator|+
name|handler
operator|.
name|getClass
argument_list|()
argument_list|,
name|handler
operator|instanceof
name|AvaticaHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProtobuf
parameter_list|()
block|{
name|Handler
name|handler
init|=
name|factory
operator|.
name|getHandler
argument_list|(
name|service
argument_list|,
name|Serialization
operator|.
name|PROTOBUF
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected an implementation of the AvaticaProtobufHandler, "
operator|+
literal|"but got "
operator|+
name|handler
operator|.
name|getClass
argument_list|()
argument_list|,
name|handler
operator|instanceof
name|AvaticaProtobufHandler
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End HandlerFactoryTest.java
end_comment

end_unit

