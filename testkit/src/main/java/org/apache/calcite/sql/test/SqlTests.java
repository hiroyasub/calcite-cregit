begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|CalciteContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|StringAndPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTester
operator|.
name|ParameterChecker
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTester
operator|.
name|ResultChecker
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTester
operator|.
name|TypeChecker
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Utility methods.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SqlTests
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|TypeChecker
name|INTEGER_TYPE_CHECKER
init|=
operator|new
name|SqlTypeChecker
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TypeChecker
name|BOOLEAN_TYPE_CHECKER
init|=
operator|new
name|SqlTypeChecker
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
comment|/**    * Checker which allows any type.    */
specifier|public
specifier|static
specifier|final
name|TypeChecker
name|ANY_TYPE_CHECKER
init|=
name|type
lambda|->
block|{
block|}
decl_stmt|;
comment|/**    * Checker that allows any number or type of parameters.    */
specifier|public
specifier|static
specifier|final
name|ParameterChecker
name|ANY_PARAMETER_CHECKER
init|=
name|parameterRowType
lambda|->
block|{
block|}
decl_stmt|;
comment|/**    * Checker that allows any result.    */
specifier|public
specifier|static
specifier|final
name|ResultChecker
name|ANY_RESULT_CHECKER
init|=
name|result
lambda|->
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|next
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|LINE_COL_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"At line ([0-9]+), column ([0-9]+)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|LINE_COL_TWICE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?s)From line ([0-9]+), column ([0-9]+) to line ([0-9]+), column ([0-9]+): (.*)"
argument_list|)
decl_stmt|;
comment|/**    * Helper function to get the string representation of a RelDataType    * (include precision/scale but no charset or collation).    *    * @param sqlType Type    * @return String representation of type    */
specifier|public
specifier|static
name|String
name|getTypeString
parameter_list|(
name|RelDataType
name|sqlType
parameter_list|)
block|{
switch|switch
condition|(
name|sqlType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
name|String
name|actual
init|=
name|sqlType
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|sqlType
operator|.
name|getPrecision
argument_list|()
operator|!=
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
condition|)
block|{
name|actual
operator|=
name|actual
operator|+
literal|"("
operator|+
name|sqlType
operator|.
name|getPrecision
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sqlType
operator|.
name|isNullable
argument_list|()
condition|)
block|{
name|actual
operator|+=
name|RelDataTypeImpl
operator|.
name|NON_NULLABLE_SUFFIX
expr_stmt|;
block|}
return|return
name|actual
return|;
default|default:
return|return
name|sqlType
operator|.
name|getFullTypeString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|generateAggQuery
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
index|[]
name|inputValues
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
operator|.
name|append
argument_list|(
name|expr
argument_list|)
operator|.
name|append
argument_list|(
literal|" FROM "
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputValues
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"(VALUES 1) AS t(x) WHERE false"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" UNION ALL "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
name|String
name|inputValue
init|=
name|inputValues
index|[
name|i
index|]
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|inputValue
argument_list|)
operator|.
name|append
argument_list|(
literal|" AS x FROM (VALUES (1))"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|generateAggQueryWithMultipleArgs
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
index|[]
index|[]
name|inputValues
parameter_list|)
block|{
name|int
name|argCount
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|String
index|[]
name|row
range|:
name|inputValues
control|)
block|{
if|if
condition|(
name|argCount
operator|==
operator|-
literal|1
condition|)
block|{
name|argCount
operator|=
name|row
operator|.
name|length
expr_stmt|;
block|}
if|else if
condition|(
name|argCount
operator|!=
name|row
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid test input: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
operator|.
name|append
argument_list|(
name|expr
argument_list|)
operator|.
name|append
argument_list|(
literal|" FROM "
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputValues
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"(VALUES 1) AS t(x) WHERE false"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" UNION ALL "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|argCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|String
name|inputValue
init|=
name|inputValues
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|inputValue
argument_list|)
operator|.
name|append
argument_list|(
literal|" AS x"
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|" FROM (VALUES (1))"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|generateWinAggQuery
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
name|windowSpec
parameter_list|,
name|String
index|[]
name|inputValues
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
operator|.
name|append
argument_list|(
name|expr
argument_list|)
operator|.
name|append
argument_list|(
literal|" OVER ("
argument_list|)
operator|.
name|append
argument_list|(
name|windowSpec
argument_list|)
operator|.
name|append
argument_list|(
literal|") FROM ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" UNION ALL "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
name|String
name|inputValue
init|=
name|inputValues
index|[
name|i
index|]
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|inputValue
argument_list|)
operator|.
name|append
argument_list|(
literal|" AS x FROM (VALUES (1))"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Compares the first column of a result set against a String-valued    * reference set, disregarding order entirely.    *    * @param resultSet Result set    * @param refSet    Expected results    * @throws Exception .    */
specifier|public
specifier|static
name|void
name|compareResultSet
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|refSet
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|actualSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|columnType
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ColumnMetaData
operator|.
name|Rep
name|rep
init|=
name|rep
argument_list|(
name|columnType
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|s0
init|=
name|s
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s
decl_stmt|;
specifier|final
name|boolean
name|wasNull0
init|=
name|resultSet
operator|.
name|wasNull
argument_list|()
decl_stmt|;
name|actualSet
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|rep
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|PRIMITIVE_BOOLEAN
case|:
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
case|case
name|PRIMITIVE_BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|PRIMITIVE_SHORT
case|:
case|case
name|INTEGER
case|:
case|case
name|PRIMITIVE_INT
case|:
case|case
name|LONG
case|:
case|case
name|PRIMITIVE_LONG
case|:
name|long
name|l
decl_stmt|;
try|try
block|{
name|l
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// Large integers come out in scientific format, say "5E+06"
name|l
operator|=
operator|(
name|long
operator|)
name|Double
operator|.
name|parseDouble
argument_list|(
name|s0
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getByte
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getShort
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|short
operator|)
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
case|case
name|PRIMITIVE_FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|PRIMITIVE_DOUBLE
case|:
specifier|final
name|double
name|d
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|s0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getFloat
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|float
operator|)
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getDouble
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// TODO: verify value
block|}
specifier|final
name|boolean
name|wasNull1
init|=
name|resultSet
operator|.
name|wasNull
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|object
init|=
name|resultSet
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|wasNull2
init|=
name|resultSet
operator|.
name|wasNull
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|object
operator|==
literal|null
argument_list|,
name|equalTo
argument_list|(
name|wasNull0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|wasNull1
argument_list|,
name|equalTo
argument_list|(
name|wasNull0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|wasNull2
argument_list|,
name|equalTo
argument_list|(
name|wasNull0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|refSet
argument_list|,
name|actualSet
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ColumnMetaData
operator|.
name|Rep
name|rep
parameter_list|(
name|int
name|columnType
parameter_list|)
block|{
switch|switch
condition|(
name|columnType
condition|)
block|{
case|case
name|Types
operator|.
name|BOOLEAN
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BOOLEAN
return|;
case|case
name|Types
operator|.
name|TINYINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BYTE
return|;
case|case
name|Types
operator|.
name|SMALLINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|SHORT
return|;
case|case
name|Types
operator|.
name|INTEGER
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|INTEGER
return|;
case|case
name|Types
operator|.
name|BIGINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|LONG
return|;
case|case
name|Types
operator|.
name|REAL
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|FLOAT
return|;
case|case
name|Types
operator|.
name|DOUBLE
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|DOUBLE
return|;
case|case
name|Types
operator|.
name|TIME
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIME
return|;
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIMESTAMP
return|;
case|case
name|Types
operator|.
name|DATE
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_DATE
return|;
default|default:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|OBJECT
return|;
block|}
block|}
comment|/**    * Compares the first column of a result set against a pattern. The result    * set must return exactly one row.    *    * @param resultSet Result set    * @param pattern   Expected pattern    */
specifier|public
specifier|static
name|void
name|compareResultSetWithPattern
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned 0 rows, expected 1"
argument_list|)
expr_stmt|;
block|}
name|String
name|actual
init|=
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned 2 or more rows, expected 1"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pattern
operator|.
name|matcher
argument_list|(
name|actual
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned '"
operator|+
name|actual
operator|+
literal|"', expected '"
operator|+
name|pattern
operator|.
name|pattern
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compares the first column of a result set against a numeric result,    * within a given tolerance. The result set must return exactly one row.    *    * @param resultSet Result set    * @param expected  Expected result    * @param delta     Tolerance    */
specifier|public
specifier|static
name|void
name|compareResultSetWithDelta
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|double
name|expected
parameter_list|,
name|double
name|delta
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned 0 rows, expected 1"
argument_list|)
expr_stmt|;
block|}
name|double
name|actual
init|=
name|resultSet
operator|.
name|getDouble
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned 2 or more rows, expected 1"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|actual
operator|<
operator|(
name|expected
operator|-
name|delta
operator|)
operator|)
operator|||
operator|(
name|actual
operator|>
operator|(
name|expected
operator|+
name|delta
operator|)
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned "
operator|+
name|actual
operator|+
literal|", expected "
operator|+
name|expected
operator|+
operator|(
operator|(
name|delta
operator|==
literal|0
operator|)
condition|?
literal|""
else|:
operator|(
literal|"+/-"
operator|+
name|delta
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks whether an exception matches the expected pattern. If    *<code>sap</code> contains an error location, checks this too.    *    * @param ex                 Exception thrown    * @param expectedMsgPattern Expected pattern    * @param sap                Query and (optional) position in query    * @param stage              Query processing stage    */
specifier|public
specifier|static
name|void
name|checkEx
parameter_list|(
name|Throwable
name|ex
parameter_list|,
name|String
name|expectedMsgPattern
parameter_list|,
name|StringAndPos
name|sap
parameter_list|,
name|Stage
name|stage
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|ex
condition|)
block|{
if|if
condition|(
name|expectedMsgPattern
operator|==
literal|null
condition|)
block|{
comment|// No error expected, and no error happened.
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected query to throw exception, "
operator|+
literal|"but it did not; query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"]; expected ["
operator|+
name|expectedMsgPattern
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|Throwable
name|actualException
init|=
name|ex
decl_stmt|;
name|String
name|actualMessage
init|=
name|actualException
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|int
name|actualLine
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|actualColumn
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|actualEndLine
init|=
literal|100
decl_stmt|;
name|int
name|actualEndColumn
init|=
literal|99
decl_stmt|;
comment|// Search for an CalciteContextException somewhere in the stack.
name|CalciteContextException
name|ece
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Throwable
name|x
init|=
name|ex
init|;
name|x
operator|!=
literal|null
condition|;
name|x
operator|=
name|x
operator|.
name|getCause
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|instanceof
name|CalciteContextException
condition|)
block|{
name|ece
operator|=
operator|(
name|CalciteContextException
operator|)
name|x
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|x
operator|.
name|getCause
argument_list|()
operator|==
name|x
condition|)
block|{
break|break;
block|}
block|}
comment|// Search for a SqlParseException -- with its position set -- somewhere
comment|// in the stack.
name|SqlParseException
name|spe
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Throwable
name|x
init|=
name|ex
init|;
name|x
operator|!=
literal|null
condition|;
name|x
operator|=
name|x
operator|.
name|getCause
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|x
operator|instanceof
name|SqlParseException
operator|)
operator|&&
operator|(
operator|(
operator|(
name|SqlParseException
operator|)
name|x
operator|)
operator|.
name|getPos
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|spe
operator|=
operator|(
name|SqlParseException
operator|)
name|x
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|x
operator|.
name|getCause
argument_list|()
operator|==
name|x
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|ece
operator|!=
literal|null
condition|)
block|{
name|actualLine
operator|=
name|ece
operator|.
name|getPosLine
argument_list|()
expr_stmt|;
name|actualColumn
operator|=
name|ece
operator|.
name|getPosColumn
argument_list|()
expr_stmt|;
name|actualEndLine
operator|=
name|ece
operator|.
name|getEndPosLine
argument_list|()
expr_stmt|;
name|actualEndColumn
operator|=
name|ece
operator|.
name|getEndPosColumn
argument_list|()
expr_stmt|;
if|if
condition|(
name|ece
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actualException
operator|=
name|ece
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|actualMessage
operator|=
name|actualException
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|spe
operator|!=
literal|null
condition|)
block|{
name|actualLine
operator|=
name|spe
operator|.
name|getPos
argument_list|()
operator|.
name|getLineNum
argument_list|()
expr_stmt|;
name|actualColumn
operator|=
name|spe
operator|.
name|getPos
argument_list|()
operator|.
name|getColumnNum
argument_list|()
expr_stmt|;
name|actualEndLine
operator|=
name|spe
operator|.
name|getPos
argument_list|()
operator|.
name|getEndLineNum
argument_list|()
expr_stmt|;
name|actualEndColumn
operator|=
name|spe
operator|.
name|getPos
argument_list|()
operator|.
name|getEndColumnNum
argument_list|()
expr_stmt|;
if|if
condition|(
name|spe
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actualException
operator|=
name|spe
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|actualMessage
operator|=
name|actualException
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|String
name|message
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|matcher
init|=
name|LINE_COL_TWICE_PATTERN
operator|.
name|matcher
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|actualLine
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|actualColumn
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|actualEndLine
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|actualEndColumn
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|actualMessage
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matcher
operator|=
name|LINE_COL_PATTERN
operator|.
name|matcher
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|actualLine
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|actualColumn
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|expectedMsgPattern
operator|!=
literal|null
operator|&&
name|actualMessage
operator|.
name|matches
argument_list|(
name|expectedMsgPattern
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|expectedMsgPattern
condition|)
block|{
name|actualException
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|stage
operator|.
name|componentName
operator|+
literal|" threw unexpected exception"
operator|+
literal|"; query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"]; exception ["
operator|+
name|actualMessage
operator|+
literal|"]; class ["
operator|+
name|actualException
operator|.
name|getClass
argument_list|()
operator|+
literal|"]; pos [line "
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|" thru line "
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|sqlWithCarets
decl_stmt|;
if|if
condition|(
name|actualColumn
operator|<=
literal|0
operator|||
name|actualLine
operator|<=
literal|0
operator|||
name|actualEndColumn
operator|<=
literal|0
operator|||
name|actualEndLine
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|sap
operator|.
name|pos
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected error to have position,"
operator|+
literal|" but actual error did not: "
operator|+
literal|" actual pos [line "
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|" thru line "
operator|+
name|actualEndLine
operator|+
literal|" col "
operator|+
name|actualEndColumn
operator|+
literal|"]"
argument_list|,
name|actualException
argument_list|)
throw|;
block|}
name|sqlWithCarets
operator|=
name|sap
operator|.
name|sql
expr_stmt|;
block|}
else|else
block|{
name|sqlWithCarets
operator|=
name|SqlParserUtil
operator|.
name|addCarets
argument_list|(
name|sap
operator|.
name|sql
argument_list|,
name|actualLine
argument_list|,
name|actualColumn
argument_list|,
name|actualEndLine
argument_list|,
name|actualEndColumn
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|sap
operator|.
name|pos
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Actual error had a position, but expected "
operator|+
literal|"error did not. Add error position carets to sql:\n"
operator|+
name|sqlWithCarets
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|actualMessage
operator|!=
literal|null
condition|)
block|{
name|actualMessage
operator|=
name|Util
operator|.
name|toLinux
argument_list|(
name|actualMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actualMessage
operator|==
literal|null
operator|||
operator|!
name|actualMessage
operator|.
name|matches
argument_list|(
name|expectedMsgPattern
argument_list|)
condition|)
block|{
name|actualException
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
specifier|final
name|String
name|actualJavaRegexp
init|=
operator|(
name|actualMessage
operator|==
literal|null
operator|)
condition|?
literal|"null"
else|:
name|TestUtil
operator|.
name|quoteForJava
argument_list|(
name|TestUtil
operator|.
name|quotePattern
argument_list|(
name|actualMessage
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|(
name|stage
operator|.
name|componentName
operator|+
literal|" threw different "
operator|+
literal|"exception than expected; query ["
operator|+
name|sap
operator|.
name|sql
operator|+
literal|"];\n"
operator|+
literal|" expected pattern ["
operator|+
name|expectedMsgPattern
operator|+
literal|"];\n"
operator|+
literal|" actual ["
operator|+
name|actualMessage
operator|+
literal|"];\n"
operator|+
literal|" actual as java regexp ["
operator|+
name|actualJavaRegexp
operator|+
literal|"]; pos ["
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|" thru line "
operator|+
name|actualEndLine
operator|+
literal|" col "
operator|+
name|actualEndColumn
operator|+
literal|"]; sql ["
operator|+
name|sqlWithCarets
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|sap
operator|.
name|pos
operator|!=
literal|null
operator|&&
operator|(
name|actualLine
operator|!=
name|sap
operator|.
name|pos
operator|.
name|getLineNum
argument_list|()
operator|||
name|actualColumn
operator|!=
name|sap
operator|.
name|pos
operator|.
name|getColumnNum
argument_list|()
operator|||
name|actualEndLine
operator|!=
name|sap
operator|.
name|pos
operator|.
name|getEndLineNum
argument_list|()
operator|||
name|actualEndColumn
operator|!=
name|sap
operator|.
name|pos
operator|.
name|getEndColumnNum
argument_list|()
operator|)
condition|)
block|{
name|fail
argument_list|(
name|stage
operator|.
name|componentName
operator|+
literal|" threw expected "
operator|+
literal|"exception ["
operator|+
name|actualMessage
operator|+
literal|"];\nbut at pos [line "
operator|+
name|actualLine
operator|+
literal|" col "
operator|+
name|actualColumn
operator|+
literal|" thru line "
operator|+
name|actualEndLine
operator|+
literal|" col "
operator|+
name|actualEndColumn
operator|+
literal|"];\nsql ["
operator|+
name|sqlWithCarets
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Stage of query processing. */
specifier|public
enum|enum
name|Stage
block|{
name|PARSE
argument_list|(
literal|"Parser"
argument_list|)
block|,
name|VALIDATE
argument_list|(
literal|"Validator"
argument_list|)
block|,
name|RUNTIME
argument_list|(
literal|"Executor"
argument_list|)
block|;
specifier|public
specifier|final
name|String
name|componentName
decl_stmt|;
name|Stage
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**    * Checks that a type matches a given SQL type. Does not care about    * nullability.    */
specifier|private
specifier|static
class|class
name|SqlTypeChecker
implements|implements
name|TypeChecker
block|{
specifier|private
specifier|final
name|SqlTypeName
name|typeName
decl_stmt|;
name|SqlTypeChecker
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkType
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
name|assertThat
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|typeName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Type checker which compares types to a specified string.    *    *<p>The string contains "NOT NULL" constraints, but does not contain    * collations and charsets. For example,    *    *<ul>    *<li><code>INTEGER NOT NULL</code></li>    *<li><code>BOOLEAN</code></li>    *<li><code>DOUBLE NOT NULL MULTISET NOT NULL</code></li>    *<li><code>CHAR(3) NOT NULL</code></li>    *<li><code>RecordType(INTEGER X, VARCHAR(10) Y)</code></li>    *</ul>    */
specifier|public
specifier|static
class|class
name|StringTypeChecker
implements|implements
name|TypeChecker
block|{
specifier|private
specifier|final
name|String
name|expected
decl_stmt|;
specifier|public
name|StringTypeChecker
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkType
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
name|String
name|actual
init|=
name|getTypeString
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ResultChecker
name|createChecker
parameter_list|(
name|Object
name|result
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|Pattern
condition|)
block|{
return|return
operator|new
name|PatternResultChecker
argument_list|(
operator|(
name|Pattern
operator|)
name|result
argument_list|)
return|;
block|}
if|else if
condition|(
name|delta
operator|!=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
return|return
operator|new
name|ApproximateResultChecker
argument_list|(
operator|(
name|Number
operator|)
name|result
argument_list|,
name|delta
argument_list|)
return|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|refSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|refSet
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|result
operator|instanceof
name|Collection
condition|)
block|{
comment|//noinspection unchecked
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|result
decl_stmt|;
name|refSet
operator|.
name|addAll
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refSet
operator|.
name|add
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RefSetResultChecker
argument_list|(
name|refSet
argument_list|)
return|;
block|}
block|}
comment|/**    * Result checker that checks a result against a regular expression.    */
specifier|public
specifier|static
class|class
name|PatternResultChecker
implements|implements
name|ResultChecker
block|{
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
specifier|public
name|PatternResultChecker
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkResult
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|Exception
block|{
name|compareResultSetWithPattern
argument_list|(
name|resultSet
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Result checker that checks a result against an expected value. A delta    * value is used for approximate values (double and float).    */
specifier|public
specifier|static
class|class
name|ApproximateResultChecker
implements|implements
name|ResultChecker
block|{
specifier|private
specifier|final
name|Number
name|expected
decl_stmt|;
specifier|private
specifier|final
name|double
name|delta
decl_stmt|;
specifier|public
name|ApproximateResultChecker
parameter_list|(
name|Number
name|expected
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|this
operator|.
name|delta
operator|=
name|delta
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkResult
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|Exception
block|{
name|compareResultSetWithDelta
argument_list|(
name|resultSet
argument_list|,
name|expected
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Result checker that checks a result against a list of expected strings.    */
specifier|public
specifier|static
class|class
name|RefSetResultChecker
implements|implements
name|ResultChecker
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|expected
decl_stmt|;
specifier|private
name|RefSetResultChecker
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkResult
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|Exception
block|{
name|compareResultSet
argument_list|(
name|resultSet
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

