begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableNullableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|JdbcType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/** Utilities for {@link SqlTester.ResultChecker}. */
end_comment

begin_class
specifier|public
class|class
name|ResultCheckers
block|{
specifier|private
name|ResultCheckers
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isExactly
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|MatcherResultChecker
argument_list|<>
argument_list|(
name|is
argument_list|(
name|value
argument_list|)
argument_list|,
name|JdbcType
operator|.
name|DOUBLE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isExactly
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|MatcherResultChecker
argument_list|<>
argument_list|(
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
name|JdbcType
operator|.
name|BIG_DECIMAL
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isWithin
parameter_list|(
name|double
name|value
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
return|return
operator|new
name|MatcherResultChecker
argument_list|<>
argument_list|(
name|Matchers
operator|.
name|within
argument_list|(
name|value
argument_list|,
name|delta
argument_list|)
argument_list|,
name|JdbcType
operator|.
name|DOUBLE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isSingle
parameter_list|(
name|double
name|delta
parameter_list|,
name|String
name|value
parameter_list|)
block|{
assert|assert
name|delta
operator|==
literal|0d
assert|;
comment|// if not zero, call a different method
return|return
name|isSingle
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isSingle
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|MatcherResultChecker
argument_list|<>
argument_list|(
name|is
argument_list|(
name|value
argument_list|)
argument_list|,
name|JdbcType
operator|.
name|STRING_NULLABLE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isSingle
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
operator|new
name|MatcherResultChecker
argument_list|<>
argument_list|(
name|is
argument_list|(
name|value
argument_list|)
argument_list|,
name|JdbcType
operator|.
name|BOOLEAN
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isSingle
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|MatcherResultChecker
argument_list|<>
argument_list|(
name|is
argument_list|(
name|value
argument_list|)
argument_list|,
name|JdbcType
operator|.
name|INTEGER
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isDecimal
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|MatcherResultChecker
argument_list|<>
argument_list|(
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
name|JdbcType
operator|.
name|BIG_DECIMAL
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isSet
parameter_list|(
name|String
modifier|...
name|values
parameter_list|)
block|{
return|return
operator|new
name|RefSetResultChecker
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|isNullValue
parameter_list|()
block|{
return|return
operator|new
name|RefSetResultChecker
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compares the first column of a result set against a String-valued    * reference set, disregarding order entirely.    *    * @param resultSet Result set    * @param refSet    Expected results    * @throws Exception .    */
specifier|static
name|void
name|compareResultSet
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|refSet
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|actualSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|columnType
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ColumnMetaData
operator|.
name|Rep
name|rep
init|=
name|rep
argument_list|(
name|columnType
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|s0
init|=
name|s
operator|==
literal|null
condition|?
literal|"0"
else|:
name|s
decl_stmt|;
specifier|final
name|boolean
name|wasNull0
init|=
name|resultSet
operator|.
name|wasNull
argument_list|()
decl_stmt|;
name|actualSet
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|rep
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|PRIMITIVE_BOOLEAN
case|:
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
case|case
name|PRIMITIVE_BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|PRIMITIVE_SHORT
case|:
case|case
name|INTEGER
case|:
case|case
name|PRIMITIVE_INT
case|:
case|case
name|LONG
case|:
case|case
name|PRIMITIVE_LONG
case|:
name|long
name|l
decl_stmt|;
try|try
block|{
name|l
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// Large integers come out in scientific format, say "5E+06"
name|l
operator|=
operator|(
name|long
operator|)
name|Double
operator|.
name|parseDouble
argument_list|(
name|s0
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getByte
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getShort
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|short
operator|)
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
case|case
name|PRIMITIVE_FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|PRIMITIVE_DOUBLE
case|:
specifier|final
name|double
name|d
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|s0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getFloat
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|float
operator|)
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getDouble
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// fall through; no type-specific validation is necessary
block|}
specifier|final
name|boolean
name|wasNull1
init|=
name|resultSet
operator|.
name|wasNull
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|object
init|=
name|resultSet
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|wasNull2
init|=
name|resultSet
operator|.
name|wasNull
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|object
operator|==
literal|null
argument_list|,
name|equalTo
argument_list|(
name|wasNull0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|wasNull1
argument_list|,
name|equalTo
argument_list|(
name|wasNull0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|wasNull2
argument_list|,
name|equalTo
argument_list|(
name|wasNull0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|refSet
argument_list|,
name|actualSet
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ColumnMetaData
operator|.
name|Rep
name|rep
parameter_list|(
name|int
name|columnType
parameter_list|)
block|{
switch|switch
condition|(
name|columnType
condition|)
block|{
case|case
name|Types
operator|.
name|BOOLEAN
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BOOLEAN
return|;
case|case
name|Types
operator|.
name|TINYINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|BYTE
return|;
case|case
name|Types
operator|.
name|SMALLINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|SHORT
return|;
case|case
name|Types
operator|.
name|INTEGER
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|INTEGER
return|;
case|case
name|Types
operator|.
name|BIGINT
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|LONG
return|;
case|case
name|Types
operator|.
name|REAL
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|FLOAT
return|;
case|case
name|Types
operator|.
name|DOUBLE
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|DOUBLE
return|;
case|case
name|Types
operator|.
name|TIME
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIME
return|;
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_TIMESTAMP
return|;
case|case
name|Types
operator|.
name|DATE
case|:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|JAVA_SQL_DATE
return|;
default|default:
return|return
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|OBJECT
return|;
block|}
block|}
comment|/**    * Compares the first column of a result set against a pattern. The result    * set must return exactly one row.    *    * @param resultSet Result set    * @param pattern   Expected pattern    */
specifier|static
name|void
name|compareResultSetWithPattern
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned 0 rows, expected 1"
argument_list|)
expr_stmt|;
block|}
name|String
name|actual
init|=
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned 2 or more rows, expected 1"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pattern
operator|.
name|matcher
argument_list|(
name|actual
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned '"
operator|+
name|actual
operator|+
literal|"', expected '"
operator|+
name|pattern
operator|.
name|pattern
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compares the first column of a result set against a {@link Matcher}.    * The result set must return exactly one row.    *    * @param resultSet Result set    * @param matcher   Matcher    *    * @param<T> Value type    */
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|compareResultSetWithMatcher
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|JdbcType
argument_list|<
name|T
argument_list|>
name|jdbcType
parameter_list|,
name|Matcher
argument_list|<
name|T
argument_list|>
name|matcher
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned 0 rows, expected 1"
argument_list|)
expr_stmt|;
block|}
name|T
name|actual
init|=
name|jdbcType
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|resultSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Query returned 2 or more rows, expected 1"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|actual
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a ResultChecker that accesses a column of a given type    * and then uses a Hamcrest matcher to check the value. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SqlTester
operator|.
name|ResultChecker
name|createChecker
parameter_list|(
name|Matcher
argument_list|<
name|T
argument_list|>
name|matcher
parameter_list|,
name|JdbcType
argument_list|<
name|T
argument_list|>
name|jdbcType
parameter_list|)
block|{
return|return
operator|new
name|MatcherResultChecker
argument_list|<>
argument_list|(
name|matcher
argument_list|,
name|jdbcType
argument_list|)
return|;
block|}
comment|/** Creates a ResultChecker from an expected result.    *    *<p>The result may be a {@link SqlTester.ResultChecker},    * a regular expression ({@link Pattern}),    * a Hamcrest {@link Matcher},    * a {@link Collection} of strings (representing the values of one column).    *    *<p>If none of the above, the value is converted to a string and compared    * with the value of a single column, single row result set that is converted    * to a string.    */
specifier|public
specifier|static
name|SqlTester
operator|.
name|ResultChecker
name|createChecker
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|result
argument_list|,
literal|"to check for a null result, use isNullValue()"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|Pattern
condition|)
block|{
return|return
operator|new
name|PatternResultChecker
argument_list|(
operator|(
name|Pattern
operator|)
name|result
argument_list|)
return|;
block|}
if|else if
condition|(
name|result
operator|instanceof
name|SqlTester
operator|.
name|ResultChecker
condition|)
block|{
return|return
operator|(
name|SqlTester
operator|.
name|ResultChecker
operator|)
name|result
return|;
block|}
if|else if
condition|(
name|result
operator|instanceof
name|Matcher
condition|)
block|{
comment|//noinspection unchecked,rawtypes
return|return
name|createChecker
argument_list|(
operator|(
name|Matcher
operator|)
name|result
argument_list|,
name|JdbcType
operator|.
name|DOUBLE
argument_list|)
return|;
block|}
if|else if
condition|(
name|result
operator|instanceof
name|Collection
condition|)
block|{
comment|//noinspection unchecked
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|result
decl_stmt|;
return|return
operator|new
name|RefSetResultChecker
argument_list|(
name|ImmutableNullableSet
operator|.
name|copyOf
argument_list|(
name|collection
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|isSingle
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Result checker that checks a result against a regular expression.    */
specifier|static
class|class
name|PatternResultChecker
implements|implements
name|SqlTester
operator|.
name|ResultChecker
block|{
specifier|final
name|Pattern
name|pattern
decl_stmt|;
name|PatternResultChecker
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|requireNonNull
argument_list|(
name|pattern
argument_list|,
literal|"pattern"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkResult
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|Exception
block|{
name|compareResultSetWithPattern
argument_list|(
name|resultSet
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Result checker that checks a result using a {@link org.hamcrest.Matcher}.    *    * @param<T> Result type    */
specifier|static
class|class
name|MatcherResultChecker
parameter_list|<
name|T
parameter_list|>
implements|implements
name|SqlTester
operator|.
name|ResultChecker
block|{
specifier|private
specifier|final
name|Matcher
argument_list|<
name|T
argument_list|>
name|matcher
decl_stmt|;
specifier|private
specifier|final
name|JdbcType
argument_list|<
name|T
argument_list|>
name|jdbcType
decl_stmt|;
name|MatcherResultChecker
parameter_list|(
name|Matcher
argument_list|<
name|T
argument_list|>
name|matcher
parameter_list|,
name|JdbcType
argument_list|<
name|T
argument_list|>
name|jdbcType
parameter_list|)
block|{
name|this
operator|.
name|matcher
operator|=
name|requireNonNull
argument_list|(
name|matcher
argument_list|,
literal|"matcher"
argument_list|)
expr_stmt|;
name|this
operator|.
name|jdbcType
operator|=
name|requireNonNull
argument_list|(
name|jdbcType
argument_list|,
literal|"jdbcType"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkResult
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|Exception
block|{
name|compareResultSetWithMatcher
argument_list|(
name|resultSet
argument_list|,
name|jdbcType
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Result checker that checks a result against a list of expected strings.    */
specifier|static
class|class
name|RefSetResultChecker
implements|implements
name|SqlTester
operator|.
name|ResultChecker
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|expected
decl_stmt|;
name|RefSetResultChecker
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|ImmutableNullableSet
operator|.
name|copyOf
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkResult
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|Exception
block|{
name|compareResultSet
argument_list|(
name|resultSet
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

