begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTestFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_comment
comment|/**  * Helper class for building fluent code,  * similar to {@link SqlParserFixture}, but used to manipulate  * a list of statements, such as  * {@code sqlList("select * from a;").ok();}.  */
end_comment

begin_class
class|class
name|SqlParserListFixture
block|{
specifier|final
name|SqlTestFactory
name|factory
decl_stmt|;
specifier|final
name|SqlParserTest
operator|.
name|Tester
name|tester
decl_stmt|;
specifier|final
annotation|@
name|Nullable
name|SqlDialect
name|dialect
decl_stmt|;
specifier|final
name|boolean
name|convertToLinux
decl_stmt|;
specifier|final
name|StringAndPos
name|sap
decl_stmt|;
name|SqlParserListFixture
parameter_list|(
name|SqlTestFactory
name|factory
parameter_list|,
name|SqlParserTest
operator|.
name|Tester
name|tester
parameter_list|,
annotation|@
name|Nullable
name|SqlDialect
name|dialect
parameter_list|,
name|boolean
name|convertToLinux
parameter_list|,
name|StringAndPos
name|sap
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|tester
operator|=
name|tester
expr_stmt|;
name|this
operator|.
name|dialect
operator|=
name|dialect
expr_stmt|;
name|this
operator|.
name|convertToLinux
operator|=
name|convertToLinux
expr_stmt|;
name|this
operator|.
name|sap
operator|=
name|sap
expr_stmt|;
block|}
specifier|public
name|SqlParserListFixture
name|ok
parameter_list|(
name|String
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|UnaryOperator
argument_list|<
name|String
argument_list|>
name|converter
init|=
name|SqlParserTest
operator|.
name|linux
argument_list|(
name|convertToLinux
argument_list|)
decl_stmt|;
name|tester
operator|.
name|checkList
argument_list|(
name|factory
argument_list|,
name|sap
argument_list|,
name|dialect
argument_list|,
name|converter
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SqlParserListFixture
name|fails
parameter_list|(
name|String
name|expectedMsgPattern
parameter_list|)
block|{
name|tester
operator|.
name|checkFails
argument_list|(
name|factory
argument_list|,
name|sap
argument_list|,
literal|true
argument_list|,
name|expectedMsgPattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

