begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTestFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlValidatorTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlOperatorTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlConformance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|SqlToRelConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
operator|.
name|MockCatalogReaderDynamic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
operator|.
name|MockCatalogReaderExtended
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Parameters for a SQL-to-RelNode test.  */
end_comment

begin_class
specifier|public
class|class
name|SqlToRelFixture
block|{
specifier|public
specifier|static
specifier|final
name|SqlTester
name|TESTER
init|=
name|SqlValidatorTester
operator|.
name|DEFAULT
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlToRelFixture
name|DEFAULT
init|=
operator|new
name|SqlToRelFixture
argument_list|(
literal|"?"
argument_list|,
literal|true
argument_list|,
name|TESTER
argument_list|,
name|SqlTestFactory
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
operator|.
name|withFactory
argument_list|(
name|f
lambda|->
name|f
operator|.
name|withValidator
argument_list|(
parameter_list|(
name|opTab
parameter_list|,
name|catalogReader
parameter_list|,
name|typeFactory
parameter_list|,
name|config
parameter_list|)
lambda|->
block|{
block_content|if (config.conformance(
argument_list|)
operator|.
name|allowGeometry
argument_list|()
init|)
block|{
name|opTab
operator|=
name|SqlOperatorTables
operator|.
name|chain
argument_list|(
name|opTab
argument_list|,
name|SqlOperatorTables
operator|.
name|spatialInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|SqlValidatorUtil
operator|.
name|newValidator
argument_list|(
name|opTab
argument_list|,
name|catalogReader
argument_list|,
name|typeFactory
argument_list|,
name|config
operator|.
name|withIdentifierExpansion
argument_list|(
literal|true
argument_list|)
argument_list|)
return|;
block|}
end_class

begin_expr_stmt
unit|)
operator|.
name|withSqlToRelConfig
argument_list|(
name|c
lambda|->
name|c
operator|.
name|withTrimUnusedFields
argument_list|(
literal|true
argument_list|)
operator|.
name|withExpand
argument_list|(
literal|true
argument_list|)
operator|.
name|addRelBuilderConfigTransform
argument_list|(
name|b
lambda|->
name|b
operator|.
name|withAggregateUnique
argument_list|(
literal|true
argument_list|)
operator|.
name|withPruneInputOfAggregate
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
annotation|@
name|Nullable
name|DiffRepository
name|diffRepos
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|boolean
name|decorrelate
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|SqlTester
name|tester
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|SqlTestFactory
name|factory
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|boolean
name|trim
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|boolean
name|expression
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|SqlToRelFixture
argument_list|(
name|String
name|sql
argument_list|,
name|boolean
name|decorrelate
argument_list|,
name|SqlTester
name|tester
argument_list|,
name|SqlTestFactory
name|factory
argument_list|,
name|boolean
name|trim
argument_list|,
name|boolean
name|expression
argument_list|,
annotation|@
name|Nullable
name|DiffRepository
name|diffRepos
argument_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|requireNonNull
argument_list|(
name|sql
argument_list|,
literal|"sql"
argument_list|)
block|;
name|this
operator|.
name|tester
operator|=
name|requireNonNull
argument_list|(
name|tester
argument_list|,
literal|"tester"
argument_list|)
block|;
name|this
operator|.
name|factory
operator|=
name|requireNonNull
argument_list|(
name|factory
argument_list|,
literal|"factory"
argument_list|)
block|;
name|this
operator|.
name|diffRepos
operator|=
name|diffRepos
block|;
if|if
condition|(
name|sql
operator|.
name|contains
argument_list|(
literal|" \n"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"trailing whitespace"
argument_list|)
throw|;
block|}
name|this
operator|.
name|decorrelate
operator|=
name|decorrelate
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|this
operator|.
name|trim
operator|=
name|trim
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
name|void
name|ok
parameter_list|()
block|{
name|convertsTo
argument_list|(
literal|"${plan}"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|throws_
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|assertThat
argument_list|(
name|TestUtil
operator|.
name|printStackTrace
argument_list|(
name|throwable
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|convertsTo
parameter_list|(
name|String
name|plan
parameter_list|)
block|{
name|tester
operator|.
name|assertConvertsTo
argument_list|(
name|factory
argument_list|,
name|diffRepos
argument_list|()
argument_list|,
name|sql
argument_list|,
name|plan
argument_list|,
name|trim
argument_list|,
name|expression
argument_list|,
name|decorrelate
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|DiffRepository
name|diffRepos
parameter_list|()
block|{
return|return
name|DiffRepository
operator|.
name|castNonNull
argument_list|(
name|diffRepos
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withSql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|sql
operator|.
name|equals
argument_list|(
name|this
operator|.
name|sql
argument_list|)
condition|?
name|this
else|:
operator|new
name|SqlToRelFixture
argument_list|(
name|sql
argument_list|,
name|decorrelate
argument_list|,
name|tester
argument_list|,
name|factory
argument_list|,
name|trim
argument_list|,
name|expression
argument_list|,
name|diffRepos
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Sets whether this is an expression (as opposed to a whole query).    */
end_comment

begin_function
specifier|public
name|SqlToRelFixture
name|expression
parameter_list|(
name|boolean
name|expression
parameter_list|)
block|{
return|return
name|this
operator|.
name|expression
operator|==
name|expression
condition|?
name|this
else|:
operator|new
name|SqlToRelFixture
argument_list|(
name|sql
argument_list|,
name|decorrelate
argument_list|,
name|tester
argument_list|,
name|factory
argument_list|,
name|trim
argument_list|,
name|expression
argument_list|,
name|diffRepos
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withConfig
parameter_list|(
name|UnaryOperator
argument_list|<
name|SqlToRelConverter
operator|.
name|Config
argument_list|>
name|transform
parameter_list|)
block|{
return|return
name|withFactory
argument_list|(
name|f
lambda|->
name|f
operator|.
name|withSqlToRelConfig
argument_list|(
name|transform
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withExpand
parameter_list|(
name|boolean
name|expand
parameter_list|)
block|{
return|return
name|withConfig
argument_list|(
name|b
lambda|->
name|b
operator|.
name|withExpand
argument_list|(
name|expand
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withDecorrelate
parameter_list|(
name|boolean
name|decorrelate
parameter_list|)
block|{
return|return
operator|new
name|SqlToRelFixture
argument_list|(
name|sql
argument_list|,
name|decorrelate
argument_list|,
name|tester
argument_list|,
name|factory
argument_list|,
name|trim
argument_list|,
name|expression
argument_list|,
name|diffRepos
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withFactory
parameter_list|(
name|UnaryOperator
argument_list|<
name|SqlTestFactory
argument_list|>
name|transform
parameter_list|)
block|{
specifier|final
name|SqlTestFactory
name|factory
init|=
name|transform
operator|.
name|apply
argument_list|(
name|this
operator|.
name|factory
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
name|this
operator|.
name|factory
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|SqlToRelFixture
argument_list|(
name|sql
argument_list|,
name|decorrelate
argument_list|,
name|tester
argument_list|,
name|factory
argument_list|,
name|trim
argument_list|,
name|expression
argument_list|,
name|diffRepos
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withCatalogReader
parameter_list|(
name|SqlTestFactory
operator|.
name|CatalogReaderFactory
name|catalogReaderFactory
parameter_list|)
block|{
return|return
name|withFactory
argument_list|(
name|f
lambda|->
name|f
operator|.
name|withCatalogReader
argument_list|(
name|catalogReaderFactory
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withExtendedTester
parameter_list|()
block|{
return|return
name|withCatalogReader
argument_list|(
name|MockCatalogReaderExtended
operator|::
name|create
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withDynamicTable
parameter_list|()
block|{
return|return
name|withCatalogReader
argument_list|(
name|MockCatalogReaderDynamic
operator|::
name|create
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withTrim
parameter_list|(
name|boolean
name|trim
parameter_list|)
block|{
return|return
operator|new
name|SqlToRelFixture
argument_list|(
name|sql
argument_list|,
name|decorrelate
argument_list|,
name|tester
argument_list|,
name|factory
argument_list|,
name|trim
argument_list|,
name|expression
argument_list|,
name|diffRepos
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlConformance
name|getConformance
parameter_list|()
block|{
return|return
name|factory
operator|.
name|parserConfig
argument_list|()
operator|.
name|conformance
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withConformance
parameter_list|(
name|SqlConformance
name|conformance
parameter_list|)
block|{
return|return
name|withFactory
argument_list|(
name|f
lambda|->
name|f
operator|.
name|withParserConfig
argument_list|(
name|c
lambda|->
name|c
operator|.
name|withConformance
argument_list|(
name|conformance
argument_list|)
argument_list|)
operator|.
name|withValidatorConfig
argument_list|(
name|c
lambda|->
name|c
operator|.
name|withConformance
argument_list|(
name|conformance
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|SqlToRelFixture
name|withDiffRepos
parameter_list|(
name|DiffRepository
name|diffRepos
parameter_list|)
block|{
return|return
operator|new
name|SqlToRelFixture
argument_list|(
name|sql
argument_list|,
name|decorrelate
argument_list|,
name|tester
argument_list|,
name|factory
argument_list|,
name|trim
argument_list|,
name|expression
argument_list|,
name|diffRepos
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|RelRoot
name|toRoot
parameter_list|()
block|{
return|return
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|factory
argument_list|,
name|sql
argument_list|,
name|decorrelate
argument_list|,
name|trim
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|RelNode
name|toRel
parameter_list|()
block|{
return|return
name|toRoot
argument_list|()
operator|.
name|rel
return|;
block|}
end_function

begin_comment
comment|/** Returns a fixture that meets a given condition, applying a remedy if it    * does not already. */
end_comment

begin_function
specifier|public
name|SqlToRelFixture
name|ensuring
parameter_list|(
name|Predicate
argument_list|<
name|SqlToRelFixture
argument_list|>
name|predicate
parameter_list|,
name|UnaryOperator
argument_list|<
name|SqlToRelFixture
argument_list|>
name|remedy
parameter_list|)
block|{
name|SqlToRelFixture
name|f
init|=
name|this
decl_stmt|;
if|if
condition|(
operator|!
name|predicate
operator|.
name|test
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|f
operator|=
name|remedy
operator|.
name|apply
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"remedy failed"
argument_list|,
name|predicate
operator|.
name|test
argument_list|(
name|f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
end_function

unit|}
end_unit

