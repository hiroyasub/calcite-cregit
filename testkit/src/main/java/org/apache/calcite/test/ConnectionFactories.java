begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|FlatLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp2
operator|.
name|PoolableConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp2
operator|.
name|PoolableConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp2
operator|.
name|PoolingDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool2
operator|.
name|impl
operator|.
name|GenericObjectPool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/** Utilities for {@link ConnectionFactory} and  * {@link org.apache.calcite.test.CalciteAssert.ConnectionPostProcessor}. */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ConnectionFactories
block|{
comment|/** The empty connection factory. */
specifier|private
specifier|static
specifier|final
name|ConnectionFactory
name|EMPTY
init|=
operator|new
name|MapConnectionFactory
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Prevent instantiation of utility class. */
specifier|private
name|ConnectionFactories
parameter_list|()
block|{
block|}
comment|/** Returns an empty connection factory. */
specifier|public
specifier|static
name|ConnectionFactory
name|empty
parameter_list|()
block|{
return|return
name|EMPTY
return|;
block|}
comment|/** Creates a connection factory that uses a single pooled connection,    * as opposed to creating a new connection on each invocation. */
specifier|public
specifier|static
name|ConnectionFactory
name|pool
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
return|return
name|connectionFactory
operator|instanceof
name|PoolingConnectionFactory
condition|?
name|connectionFactory
else|:
operator|new
name|PoolingConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
return|;
block|}
comment|/** Returns a post-processor that adds a {@link CalciteAssert.SchemaSpec}    * (set of schemes) to a connection. */
specifier|public
specifier|static
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
name|add
parameter_list|(
name|CalciteAssert
operator|.
name|SchemaSpec
name|schemaSpec
parameter_list|)
block|{
return|return
operator|new
name|AddSchemaSpecPostProcessor
argument_list|(
name|schemaSpec
argument_list|)
return|;
block|}
comment|/** Returns a post-processor that adds {@link Schema} and sets it as    * default. */
specifier|public
specifier|static
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
return|return
operator|new
name|AddSchemaPostProcessor
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
return|;
block|}
comment|/** Returns a post-processor that sets a default schema name. */
specifier|public
specifier|static
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
name|setDefault
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
return|return
operator|new
name|DefaultSchemaPostProcessor
argument_list|(
name|schema
argument_list|)
return|;
block|}
comment|/** Connection factory that uses a given map of (name, value) pairs and    * optionally an initial schema. */
specifier|private
specifier|static
class|class
name|MapConnectionFactory
implements|implements
name|ConnectionFactory
block|{
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
argument_list|>
name|postProcessors
decl_stmt|;
name|MapConnectionFactory
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|ImmutableList
argument_list|<
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
argument_list|>
name|postProcessors
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|requireNonNull
argument_list|(
name|map
argument_list|,
literal|"map"
argument_list|)
expr_stmt|;
name|this
operator|.
name|postProcessors
operator|=
name|requireNonNull
argument_list|(
name|postProcessors
argument_list|,
literal|"postProcessors"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|==
name|MapConnectionFactory
operator|.
name|class
operator|&&
operator|(
operator|(
name|MapConnectionFactory
operator|)
name|obj
operator|)
operator|.
name|map
operator|.
name|equals
argument_list|(
name|map
argument_list|)
operator|&&
operator|(
operator|(
name|MapConnectionFactory
operator|)
name|obj
operator|)
operator|.
name|postProcessors
operator|.
name|equals
argument_list|(
name|postProcessors
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|map
argument_list|,
name|postProcessors
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|SQLException
block|{
specifier|final
name|Properties
name|info
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|info
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|,
name|info
argument_list|)
decl_stmt|;
for|for
control|(
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
name|postProcessor
range|:
name|postProcessors
control|)
block|{
name|connection
operator|=
name|postProcessor
operator|.
name|apply
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionFactory
name|with
parameter_list|(
name|String
name|property
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|MapConnectionFactory
argument_list|(
name|FlatLists
operator|.
name|append
argument_list|(
name|this
operator|.
name|map
argument_list|,
name|property
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|postProcessors
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionFactory
name|with
parameter_list|(
name|ConnectionProperty
name|property
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|property
operator|.
name|type
argument_list|()
operator|.
name|valid
argument_list|(
name|value
argument_list|,
name|property
operator|.
name|valueClass
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
return|return
name|with
argument_list|(
name|property
operator|.
name|camelName
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionFactory
name|with
parameter_list|(
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
name|postProcessor
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|postProcessors
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|postProcessor
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapConnectionFactory
argument_list|(
name|map
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Post-processor that adds a {@link Schema} and sets it as default. */
specifier|private
specifier|static
class|class
name|AddSchemaPostProcessor
implements|implements
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
name|AddSchemaPostProcessor
parameter_list|(
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|requireNonNull
argument_list|(
name|schema
argument_list|,
literal|"schema"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|apply
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
name|CalciteConnection
name|con
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|con
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|rootSchema
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setSchema
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
comment|/** Post-processor that sets a default schema name. */
specifier|private
specifier|static
class|class
name|DefaultSchemaPostProcessor
implements|implements
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
name|DefaultSchemaPostProcessor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|apply
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|setSchema
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
comment|/** Post-processor that adds a {@link CalciteAssert.SchemaSpec}    * (set of schemes) to a connection. */
specifier|private
specifier|static
class|class
name|AddSchemaSpecPostProcessor
implements|implements
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
block|{
specifier|private
specifier|final
name|CalciteAssert
operator|.
name|SchemaSpec
name|schemaSpec
decl_stmt|;
name|AddSchemaSpecPostProcessor
parameter_list|(
name|CalciteAssert
operator|.
name|SchemaSpec
name|schemaSpec
parameter_list|)
block|{
name|this
operator|.
name|schemaSpec
operator|=
name|schemaSpec
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|apply
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
name|CalciteConnection
name|con
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|con
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|schemaSpec
condition|)
block|{
case|case
name|CLONE_FOODMART
case|:
case|case
name|JDBC_FOODMART_WITH_LATTICE
case|:
name|CalciteAssert
operator|.
name|addSchema
argument_list|(
name|rootSchema
argument_list|,
name|CalciteAssert
operator|.
name|SchemaSpec
operator|.
name|JDBC_FOODMART
argument_list|)
expr_stmt|;
comment|// fall through
default|default:
name|CalciteAssert
operator|.
name|addSchema
argument_list|(
name|rootSchema
argument_list|,
name|schemaSpec
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|setSchema
argument_list|(
name|schemaSpec
operator|.
name|schemaName
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
comment|/** Connection factory that uses the same instance of connections. */
specifier|private
specifier|static
class|class
name|PoolingConnectionFactory
implements|implements
name|ConnectionFactory
block|{
specifier|private
specifier|final
name|PoolingDataSource
argument_list|<
name|PoolableConnection
argument_list|>
name|dataSource
decl_stmt|;
name|PoolingConnectionFactory
parameter_list|(
specifier|final
name|ConnectionFactory
name|factory
parameter_list|)
block|{
specifier|final
name|PoolableConnectionFactory
name|connectionFactory
init|=
operator|new
name|PoolableConnectionFactory
argument_list|(
name|factory
operator|::
name|createConnection
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setRollbackOnReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
operator|new
name|PoolingDataSource
argument_list|<>
argument_list|(
operator|new
name|GenericObjectPool
argument_list|<>
argument_list|(
name|connectionFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|dataSource
operator|.
name|getConnection
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

