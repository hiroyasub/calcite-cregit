begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalCalc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|DefaultRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|JaninoRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|MetadataHandlerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ProxyingMetadataHandlerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelColumnOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTestFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Parameters for a Metadata test.  */
end_comment

begin_class
specifier|public
class|class
name|RelMetadataFixture
block|{
comment|/** Default fixture.    *    *<p>Use this, or call the {@code withXxx} methods to make one with the    * properties you need. Fixtures are immutable, so whatever your test does    * to this fixture, it won't break other tests. */
specifier|public
specifier|static
specifier|final
name|RelMetadataFixture
name|DEFAULT
init|=
operator|new
name|RelMetadataFixture
argument_list|(
name|SqlToRelFixture
operator|.
name|TESTER
argument_list|,
name|SqlTestFactory
operator|.
name|INSTANCE
argument_list|,
name|MetadataConfig
operator|.
name|JANINO
argument_list|,
name|RelSupplier
operator|.
name|NONE
argument_list|,
literal|false
argument_list|,
name|r
lambda|->
name|r
argument_list|)
operator|.
name|withFactory
argument_list|(
name|f
lambda|->
name|f
operator|.
name|withValidatorConfig
argument_list|(
name|c
lambda|->
name|c
operator|.
name|withIdentifierExpansion
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|withSqlToRelConfig
argument_list|(
name|c
lambda|->
name|c
operator|.
name|withRelBuilderConfigTransform
argument_list|(
name|b
lambda|->
name|b
operator|.
name|withAggregateUnique
argument_list|(
literal|true
argument_list|)
operator|.
name|withPruneInputOfAggregate
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|SqlTester
name|tester
decl_stmt|;
specifier|public
specifier|final
name|SqlTestFactory
name|factory
decl_stmt|;
specifier|public
specifier|final
name|MetadataConfig
name|metadataConfig
decl_stmt|;
specifier|public
specifier|final
name|RelSupplier
name|relSupplier
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|convertAsCalc
decl_stmt|;
specifier|public
specifier|final
name|UnaryOperator
argument_list|<
name|RelNode
argument_list|>
name|relTransform
decl_stmt|;
specifier|private
name|RelMetadataFixture
parameter_list|(
name|SqlTester
name|tester
parameter_list|,
name|SqlTestFactory
name|factory
parameter_list|,
name|MetadataConfig
name|metadataConfig
parameter_list|,
name|RelSupplier
name|relSupplier
parameter_list|,
name|boolean
name|convertAsCalc
parameter_list|,
name|UnaryOperator
argument_list|<
name|RelNode
argument_list|>
name|relTransform
parameter_list|)
block|{
name|this
operator|.
name|tester
operator|=
name|tester
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|metadataConfig
operator|=
name|metadataConfig
expr_stmt|;
name|this
operator|.
name|relSupplier
operator|=
name|relSupplier
expr_stmt|;
name|this
operator|.
name|convertAsCalc
operator|=
name|convertAsCalc
expr_stmt|;
name|this
operator|.
name|relTransform
operator|=
name|relTransform
expr_stmt|;
block|}
comment|//~ 'With' methods ---------------------------------------------------------
comment|// Each method returns a copy of this fixture, changing the value of one
comment|// property.
comment|/** Creates a copy of this fixture that uses a given SQL query. */
specifier|public
name|RelMetadataFixture
name|withSql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|RelSupplier
name|relSupplier
init|=
name|RelSupplier
operator|.
name|of
argument_list|(
name|sql
argument_list|)
decl_stmt|;
if|if
condition|(
name|relSupplier
operator|.
name|equals
argument_list|(
name|this
operator|.
name|relSupplier
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|RelMetadataFixture
argument_list|(
name|tester
argument_list|,
name|factory
argument_list|,
name|metadataConfig
argument_list|,
name|relSupplier
argument_list|,
name|convertAsCalc
argument_list|,
name|relTransform
argument_list|)
return|;
block|}
comment|/** Creates a copy of this fixture that uses a given function to create a    * {@link RelNode}. */
specifier|public
name|RelMetadataFixture
name|withRelFn
parameter_list|(
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
parameter_list|)
block|{
specifier|final
name|RelSupplier
name|relSupplier
init|=
name|RelSupplier
operator|.
name|of
argument_list|(
name|builder
lambda|->
block|{
name|metadataConfig
operator|.
name|applyMetadata
argument_list|(
name|builder
operator|.
name|getCluster
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|relFn
operator|.
name|apply
argument_list|(
name|builder
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|relSupplier
operator|.
name|equals
argument_list|(
name|this
operator|.
name|relSupplier
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|RelMetadataFixture
argument_list|(
name|tester
argument_list|,
name|factory
argument_list|,
name|metadataConfig
argument_list|,
name|relSupplier
argument_list|,
name|convertAsCalc
argument_list|,
name|relTransform
argument_list|)
return|;
block|}
specifier|public
name|RelMetadataFixture
name|withFactory
parameter_list|(
name|UnaryOperator
argument_list|<
name|SqlTestFactory
argument_list|>
name|transform
parameter_list|)
block|{
specifier|final
name|SqlTestFactory
name|factory
init|=
name|transform
operator|.
name|apply
argument_list|(
name|this
operator|.
name|factory
argument_list|)
decl_stmt|;
return|return
operator|new
name|RelMetadataFixture
argument_list|(
name|tester
argument_list|,
name|factory
argument_list|,
name|metadataConfig
argument_list|,
name|relSupplier
argument_list|,
name|convertAsCalc
argument_list|,
name|relTransform
argument_list|)
return|;
block|}
specifier|public
name|RelMetadataFixture
name|withTester
parameter_list|(
name|UnaryOperator
argument_list|<
name|SqlTester
argument_list|>
name|transform
parameter_list|)
block|{
specifier|final
name|SqlTester
name|tester
init|=
name|transform
operator|.
name|apply
argument_list|(
name|this
operator|.
name|tester
argument_list|)
decl_stmt|;
return|return
operator|new
name|RelMetadataFixture
argument_list|(
name|tester
argument_list|,
name|factory
argument_list|,
name|metadataConfig
argument_list|,
name|relSupplier
argument_list|,
name|convertAsCalc
argument_list|,
name|relTransform
argument_list|)
return|;
block|}
specifier|public
name|RelMetadataFixture
name|withMetadataConfig
parameter_list|(
name|MetadataConfig
name|metadataConfig
parameter_list|)
block|{
if|if
condition|(
name|metadataConfig
operator|.
name|equals
argument_list|(
name|this
operator|.
name|metadataConfig
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|RelMetadataFixture
argument_list|(
name|tester
argument_list|,
name|factory
argument_list|,
name|metadataConfig
argument_list|,
name|relSupplier
argument_list|,
name|convertAsCalc
argument_list|,
name|relTransform
argument_list|)
return|;
block|}
specifier|public
name|RelMetadataFixture
name|convertingProjectAsCalc
parameter_list|()
block|{
if|if
condition|(
name|convertAsCalc
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|RelMetadataFixture
argument_list|(
name|tester
argument_list|,
name|factory
argument_list|,
name|metadataConfig
argument_list|,
name|relSupplier
argument_list|,
literal|true
argument_list|,
name|relTransform
argument_list|)
return|;
block|}
specifier|public
name|RelMetadataFixture
name|withCatalogReaderFactory
parameter_list|(
name|SqlTestFactory
operator|.
name|CatalogReaderFactory
name|catalogReaderFactory
parameter_list|)
block|{
return|return
name|withFactory
argument_list|(
name|t
lambda|->
name|t
operator|.
name|withCatalogReader
argument_list|(
name|catalogReaderFactory
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelMetadataFixture
name|withCluster
parameter_list|(
name|UnaryOperator
argument_list|<
name|RelOptCluster
argument_list|>
name|factory
parameter_list|)
block|{
return|return
name|withFactory
argument_list|(
name|f
lambda|->
name|f
operator|.
name|withCluster
argument_list|(
name|factory
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelMetadataFixture
name|withRelTransform
parameter_list|(
name|UnaryOperator
argument_list|<
name|RelNode
argument_list|>
name|relTransform
parameter_list|)
block|{
specifier|final
name|UnaryOperator
argument_list|<
name|RelNode
argument_list|>
name|relTransform1
init|=
name|this
operator|.
name|relTransform
operator|.
name|andThen
argument_list|(
name|relTransform
argument_list|)
operator|::
name|apply
decl_stmt|;
return|return
operator|new
name|RelMetadataFixture
argument_list|(
name|tester
argument_list|,
name|factory
argument_list|,
name|metadataConfig
argument_list|,
name|relSupplier
argument_list|,
name|convertAsCalc
argument_list|,
name|relTransform1
argument_list|)
return|;
block|}
comment|//~ Helper methods ---------------------------------------------------------
comment|// Don't use them too much. Write an assertXxx method if possible.
comment|/** Only for use by RelSupplier. Must be package-private. */
name|RelNode
name|sqlToRel
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|factory
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|rel
return|;
block|}
comment|/** Creates a {@link RelNode} from this fixture's supplier    * (see {@link #withSql(String)} and {@link #withRelFn(Function)}). */
specifier|public
name|RelNode
name|toRel
parameter_list|()
block|{
specifier|final
name|RelNode
name|rel
init|=
name|relSupplier
operator|.
name|apply2
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|metadataConfig
operator|.
name|applyMetadata
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|convertAsCalc
condition|)
block|{
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|rel
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|project
operator|.
name|getVariablesSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Calc does not allow variables"
argument_list|)
expr_stmt|;
name|RexProgram
name|program
init|=
name|RexProgram
operator|.
name|create
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
literal|null
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|LogicalCalc
operator|.
name|create
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
argument_list|,
name|program
argument_list|)
return|;
block|}
return|return
name|relTransform
operator|.
name|apply
argument_list|(
name|rel
argument_list|)
return|;
block|}
comment|//~ Methods that execute tests ---------------------------------------------
comment|/** Checks the CPU component of    * {@link RelNode#computeSelfCost(RelOptPlanner, RelMetadataQuery)}. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertCpuCost
parameter_list|(
name|Matcher
argument_list|<
name|Double
argument_list|>
name|matcher
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
name|RelOptCost
name|cost
init|=
name|computeRelSelfCost
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reason
operator|+
literal|"\n"
operator|+
literal|"sql:"
operator|+
name|relSupplier
operator|+
literal|"\n"
operator|+
literal|"plan:"
operator|+
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|rel
argument_list|,
name|SqlExplainLevel
operator|.
name|ALL_ATTRIBUTES
argument_list|)
argument_list|,
name|cost
operator|.
name|getCpu
argument_list|()
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
specifier|static
name|RelOptCost
name|computeRelSelfCost
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|RelOptPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
return|return
name|rel
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#areRowsUnique(RelNode)} for all    * values of {@code ignoreNulls}. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertRowsUnique
parameter_list|(
name|Matcher
argument_list|<
name|Boolean
argument_list|>
name|matcher
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|assertRowsUnique
argument_list|(
literal|false
argument_list|,
name|matcher
argument_list|,
name|reason
argument_list|)
operator|.
name|assertRowsUnique
argument_list|(
literal|true
argument_list|,
name|matcher
argument_list|,
name|reason
argument_list|)
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#areRowsUnique(RelNode)}. */
specifier|public
name|RelMetadataFixture
name|assertRowsUnique
parameter_list|(
name|boolean
name|ignoreNulls
parameter_list|,
name|Matcher
argument_list|<
name|Boolean
argument_list|>
name|matcher
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|Boolean
name|rowsUnique
init|=
name|mq
operator|.
name|areRowsUnique
argument_list|(
name|rel
argument_list|,
name|ignoreNulls
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reason
operator|+
literal|"\n"
operator|+
literal|"sql:"
operator|+
name|relSupplier
operator|+
literal|"\n"
operator|+
literal|"plan:"
operator|+
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|rel
argument_list|,
name|SqlExplainLevel
operator|.
name|ALL_ATTRIBUTES
argument_list|)
argument_list|,
name|rowsUnique
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#getPercentageOriginalRows(RelNode)}. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertPercentageOriginalRows
parameter_list|(
name|Matcher
argument_list|<
name|Double
argument_list|>
name|matcher
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|Double
name|result
init|=
name|mq
operator|.
name|getPercentageOriginalRows
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|RelMetadataFixture
name|checkColumnOrigin
parameter_list|(
name|Consumer
argument_list|<
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
argument_list|>
name|action
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|columnOrigins
init|=
name|mq
operator|.
name|getColumnOrigins
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|action
operator|.
name|accept
argument_list|(
name|columnOrigins
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks that {@link RelMetadataQuery#getColumnOrigins(RelNode, int)}    * for column 0 returns no origins. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertColumnOriginIsEmpty
parameter_list|()
block|{
return|return
name|checkColumnOrigin
argument_list|(
name|result
lambda|->
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|checkColumnOrigin
parameter_list|(
name|RelColumnOrigin
name|rco
parameter_list|,
name|String
name|expectedTableName
parameter_list|,
name|String
name|expectedColumnName
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
name|RelOptTable
name|actualTable
init|=
name|rco
operator|.
name|getOriginTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualTableName
init|=
name|actualTable
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|actualTableName
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualTable
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|rco
operator|.
name|getOriginColumnOrdinal
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedColumnName
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rco
operator|.
name|isDerived
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedDerived
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Checks that {@link RelMetadataQuery#getColumnOrigins(RelNode, int)}    * for column 0 returns one origin. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertColumnOriginSingle
parameter_list|(
name|String
name|expectedTableName
parameter_list|,
name|String
name|expectedColumnName
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
return|return
name|checkColumnOrigin
argument_list|(
name|result
lambda|->
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RelColumnOrigin
name|rco
init|=
name|result
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName
argument_list|,
name|expectedColumnName
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/** Checks that {@link RelMetadataQuery#getColumnOrigins(RelNode, int)}    * for column 0 returns two origins. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertColumnOriginDouble
parameter_list|(
name|String
name|expectedTableName1
parameter_list|,
name|String
name|expectedColumnName1
parameter_list|,
name|String
name|expectedTableName2
parameter_list|,
name|String
name|expectedColumnName2
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"required so that the test mechanism works"
argument_list|,
name|expectedTableName1
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
name|expectedTableName2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|checkColumnOrigin
argument_list|(
name|result
lambda|->
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RelColumnOrigin
name|rco
range|:
name|result
control|)
block|{
name|RelOptTable
name|actualTable
init|=
name|rco
operator|.
name|getOriginTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualTableName
init|=
name|actualTable
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|String
name|actualUnqualifiedName
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|actualTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualUnqualifiedName
operator|.
name|equals
argument_list|(
name|expectedTableName1
argument_list|)
condition|)
block|{
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName1
argument_list|,
name|expectedColumnName1
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName2
argument_list|,
name|expectedColumnName2
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Checks result of getting unique keys for SQL. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertThatUniqueKeysAre
parameter_list|(
name|ImmutableBitSet
modifier|...
name|expectedUniqueKeys
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|result
init|=
name|mq
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|expectedUniqueKeys
argument_list|)
argument_list|,
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"unique keys, sql: "
operator|+
name|relSupplier
operator|+
literal|", rel: "
operator|+
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
name|checkUniqueConsistent
argument_list|(
name|rel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Asserts that {@link RelMetadataQuery#getUniqueKeys(RelNode)}    * and {@link RelMetadataQuery#areColumnsUnique(RelNode, ImmutableBitSet)}    * return consistent results.    */
specifier|private
specifier|static
name|void
name|checkUniqueConsistent
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|uniqueKeys
init|=
name|mq
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|uniqueKeys
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|allCols
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|key
range|:
name|allCols
operator|.
name|powerSet
argument_list|()
control|)
block|{
name|Boolean
name|result2
init|=
name|mq
operator|.
name|areColumnsUnique
argument_list|(
name|rel
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|isUnique
argument_list|(
name|uniqueKeys
argument_list|,
name|key
argument_list|)
argument_list|,
name|SqlFunctions
operator|.
name|isTrue
argument_list|(
name|result2
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"areColumnsUnique. key: "
operator|+
name|key
operator|+
literal|", uniqueKeys: "
operator|+
name|uniqueKeys
operator|+
literal|", rel: "
operator|+
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns whether {@code key} is unique, that is, whether it or a subset    * is in {@code uniqueKeys}.    */
specifier|private
specifier|static
name|boolean
name|isUnique
parameter_list|(
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|uniqueKeys
parameter_list|,
name|ImmutableBitSet
name|key
parameter_list|)
block|{
for|for
control|(
name|ImmutableBitSet
name|uniqueKey
range|:
name|uniqueKeys
control|)
block|{
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
name|uniqueKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#getRowCount(RelNode)},    * {@link RelMetadataQuery#getMaxRowCount(RelNode)},    * and {@link RelMetadataQuery#getMinRowCount(RelNode)}. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertThatRowCount
parameter_list|(
name|Matcher
argument_list|<
name|Number
argument_list|>
name|rowCountMatcher
parameter_list|,
name|Matcher
argument_list|<
name|Number
argument_list|>
name|minRowCountMatcher
parameter_list|,
name|Matcher
argument_list|<
name|Number
argument_list|>
name|maxRowCountMatcher
parameter_list|)
block|{
specifier|final
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|Double
name|rowCount
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rowCount
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowCount
argument_list|,
name|rowCountMatcher
argument_list|)
expr_stmt|;
specifier|final
name|Double
name|min
init|=
name|mq
operator|.
name|getMinRowCount
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|min
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|min
argument_list|,
name|minRowCountMatcher
argument_list|)
expr_stmt|;
specifier|final
name|Double
name|max
init|=
name|mq
operator|.
name|getMaxRowCount
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|max
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|max
argument_list|,
name|maxRowCountMatcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#getSelectivity(RelNode, RexNode)}. */
specifier|public
name|RelMetadataFixture
name|assertThatSelectivity
parameter_list|(
name|Matcher
argument_list|<
name|Double
argument_list|>
name|matcher
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|Double
name|result
init|=
name|mq
operator|.
name|getSelectivity
argument_list|(
name|rel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks    * {@link RelMetadataQuery#getDistinctRowCount(RelNode, ImmutableBitSet, RexNode)}    * with a null predicate. */
specifier|public
name|RelMetadataFixture
name|assertThatDistinctRowCount
parameter_list|(
name|ImmutableBitSet
name|groupKey
parameter_list|,
name|Matcher
argument_list|<
name|Double
argument_list|>
name|matcher
parameter_list|)
block|{
return|return
name|assertThatDistinctRowCount
argument_list|(
name|r
lambda|->
name|groupKey
argument_list|,
name|matcher
argument_list|)
return|;
block|}
comment|/** Checks    * {@link RelMetadataQuery#getDistinctRowCount(RelNode, ImmutableBitSet, RexNode)}    * with a null predicate, deriving the group key from the {@link RelNode}. */
specifier|public
name|RelMetadataFixture
name|assertThatDistinctRowCount
parameter_list|(
name|Function
argument_list|<
name|RelNode
argument_list|,
name|ImmutableBitSet
argument_list|>
name|groupKeyFn
parameter_list|,
name|Matcher
argument_list|<
name|Double
argument_list|>
name|matcher
parameter_list|)
block|{
specifier|final
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|groupKey
init|=
name|groupKeyFn
operator|.
name|apply
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|mq
operator|.
name|getDistinctRowCount
argument_list|(
name|rel
argument_list|,
name|groupKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks the {@link RelNode} produced by {@link #toRel}. */
specifier|public
name|RelMetadataFixture
name|assertThatRel
parameter_list|(
name|Matcher
argument_list|<
name|RelNode
argument_list|>
name|matcher
parameter_list|)
block|{
specifier|final
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rel
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Shorthand for a call to {@link #assertThatNodeTypeCount(Matcher)}    * with a constant map. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|,
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertThatNodeTypeCountIs
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|k0
parameter_list|,
name|Integer
name|v0
parameter_list|,
name|Object
modifier|...
name|rest
parameter_list|)
block|{
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|b
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|k0
argument_list|,
name|v0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rest
operator|.
name|length
condition|;
control|)
block|{
name|b
operator|.
name|put
argument_list|(
operator|(
name|Class
operator|)
name|rest
index|[
name|i
operator|++
index|]
argument_list|,
operator|(
name|Integer
operator|)
name|rest
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|assertThatNodeTypeCount
argument_list|(
name|is
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Checks the number of each sub-class of {@link RelNode},    * calling {@link RelMetadataQuery#getNodeTypes(RelNode)}. */
specifier|public
name|RelMetadataFixture
name|assertThatNodeTypeCount
parameter_list|(
name|Matcher
argument_list|<
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|matcher
parameter_list|)
block|{
specifier|final
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|Multimap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|,
name|RelNode
argument_list|>
name|result
init|=
name|mq
operator|.
name|getNodeTypes
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|resultCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|,
name|Collection
argument_list|<
name|RelNode
argument_list|>
argument_list|>
name|e
range|:
name|result
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|resultCount
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|resultCount
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#getUniqueKeys(RelNode)}. */
specifier|public
name|RelMetadataFixture
name|assertThatUniqueKeys
parameter_list|(
name|Matcher
argument_list|<
name|Iterable
argument_list|<
name|ImmutableBitSet
argument_list|>
argument_list|>
name|matcher
parameter_list|)
block|{
specifier|final
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|result
init|=
name|mq
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#areColumnsUnique(RelNode, ImmutableBitSet)}. */
specifier|public
name|RelMetadataFixture
name|assertThatAreColumnsUnique
parameter_list|(
name|ImmutableBitSet
name|columns
parameter_list|,
name|Matcher
argument_list|<
name|Boolean
argument_list|>
name|matcher
parameter_list|)
block|{
return|return
name|assertThatAreColumnsUnique
argument_list|(
name|r
lambda|->
name|columns
argument_list|,
name|r
lambda|->
name|r
argument_list|,
name|matcher
argument_list|)
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#areColumnsUnique(RelNode, ImmutableBitSet)},    * deriving parameters via functions. */
specifier|public
name|RelMetadataFixture
name|assertThatAreColumnsUnique
parameter_list|(
name|Function
argument_list|<
name|RelNode
argument_list|,
name|ImmutableBitSet
argument_list|>
name|columnsFn
parameter_list|,
name|UnaryOperator
argument_list|<
name|RelNode
argument_list|>
name|relFn
parameter_list|,
name|Matcher
argument_list|<
name|Boolean
argument_list|>
name|matcher
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|columns
init|=
name|columnsFn
operator|.
name|apply
argument_list|(
name|rel
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel2
init|=
name|relFn
operator|.
name|apply
argument_list|(
name|rel
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|areColumnsUnique
init|=
name|mq
operator|.
name|areColumnsUnique
argument_list|(
name|rel2
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|areColumnsUnique
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks {@link RelMetadataQuery#areRowsUnique(RelNode)}. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnusedReturnValue"
block|}
argument_list|)
specifier|public
name|RelMetadataFixture
name|assertThatAreRowsUnique
parameter_list|(
name|Matcher
argument_list|<
name|Boolean
argument_list|>
name|matcher
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|toRel
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|Boolean
name|areRowsUnique
init|=
name|mq
operator|.
name|areRowsUnique
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|areRowsUnique
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * A configuration that describes how metadata should be configured.    */
specifier|public
specifier|static
class|class
name|MetadataConfig
block|{
specifier|static
specifier|final
name|MetadataConfig
name|JANINO
init|=
operator|new
name|MetadataConfig
argument_list|(
literal|"Janino"
argument_list|,
name|JaninoRelMetadataProvider
operator|::
name|of
argument_list|,
name|RelMetadataQuery
operator|.
name|THREAD_PROVIDERS
operator|::
name|get
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MetadataConfig
name|PROXYING
init|=
operator|new
name|MetadataConfig
argument_list|(
literal|"Proxying"
argument_list|,
name|ProxyingMetadataHandlerProvider
operator|::
operator|new
argument_list|,
parameter_list|()
lambda|->
name|DefaultRelMetadataProvider
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MetadataConfig
name|NOP
init|=
operator|new
name|MetadataConfig
argument_list|(
literal|"Nop"
argument_list|,
name|ProxyingMetadataHandlerProvider
operator|::
operator|new
argument_list|,
parameter_list|()
lambda|->
name|DefaultRelMetadataProvider
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|)
block|{           @
name|Override
name|void
name|applyMetadata
argument_list|(
name|RelOptCluster
name|cluster
argument_list|,
name|RelMetadataProvider
name|provider
argument_list|,
name|Function
argument_list|<
name|MetadataHandlerProvider
argument_list|,
name|RelMetadataQuery
argument_list|>
name|supplierFactory
argument_list|)
block|{
comment|// do nothing
block|}
block|}
empty_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|Function
argument_list|<
name|RelMetadataProvider
argument_list|,
name|MetadataHandlerProvider
argument_list|>
name|converter
decl_stmt|;
specifier|public
specifier|final
name|Supplier
argument_list|<
name|RelMetadataProvider
argument_list|>
name|defaultProviderSupplier
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isCaching
decl_stmt|;
specifier|public
name|MetadataConfig
parameter_list|(
name|String
name|name
parameter_list|,
name|Function
argument_list|<
name|RelMetadataProvider
argument_list|,
name|MetadataHandlerProvider
argument_list|>
name|converter
parameter_list|,
name|Supplier
argument_list|<
name|RelMetadataProvider
argument_list|>
name|defaultProviderSupplier
parameter_list|,
name|boolean
name|isCaching
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
name|this
operator|.
name|defaultProviderSupplier
operator|=
name|defaultProviderSupplier
expr_stmt|;
name|this
operator|.
name|isCaching
operator|=
name|isCaching
expr_stmt|;
block|}
specifier|public
name|MetadataHandlerProvider
name|getDefaultHandlerProvider
parameter_list|()
block|{
return|return
name|converter
operator|.
name|apply
argument_list|(
name|defaultProviderSupplier
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
name|void
name|applyMetadata
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|)
block|{
name|applyMetadata
argument_list|(
name|cluster
argument_list|,
name|defaultProviderSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|applyMetadata
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelMetadataProvider
name|provider
parameter_list|)
block|{
name|applyMetadata
argument_list|(
name|cluster
argument_list|,
name|provider
argument_list|,
name|RelMetadataQuery
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
name|void
name|applyMetadata
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelMetadataProvider
name|provider
parameter_list|,
name|Function
argument_list|<
name|MetadataHandlerProvider
argument_list|,
name|RelMetadataQuery
argument_list|>
name|supplierFactory
parameter_list|)
block|{
name|cluster
operator|.
name|setMetadataProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setMetadataQuerySupplier
argument_list|(
parameter_list|()
lambda|->
name|supplierFactory
operator|.
name|apply
argument_list|(
name|converter
operator|.
name|apply
argument_list|(
name|provider
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|invalidateMetadataQuery
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCaching
parameter_list|()
block|{
return|return
name|isCaching
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

