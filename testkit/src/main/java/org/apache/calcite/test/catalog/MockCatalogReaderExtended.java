begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|BuiltInMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|MetadataDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlOperatorTables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|NonNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Adds some extra tables to the mock catalog. These increase the time and  * complexity of initializing the catalog (because they contain views whose  * SQL needs to be parsed) and so are not used for all tests. */
end_comment

begin_class
specifier|public
class|class
name|MockCatalogReaderExtended
extends|extends
name|MockCatalogReaderSimple
block|{
comment|/**    * Creates a MockCatalogReader.    *    *<p>Caller must then call {@link #init} to populate with data;    * constructor is protected to encourage you to call {@link #create}.    *    * @param typeFactory   Type factory    * @param caseSensitive case sensitivity    */
specifier|protected
name|MockCatalogReaderExtended
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|super
argument_list|(
name|typeFactory
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
block|}
comment|/** Creates and initializes a MockCatalogReaderExtended. */
specifier|public
specifier|static
annotation|@
name|NonNull
name|MockCatalogReaderExtended
name|create
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
return|return
operator|new
name|MockCatalogReaderExtended
argument_list|(
name|typeFactory
argument_list|,
name|caseSensitive
argument_list|)
operator|.
name|init
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MockCatalogReaderExtended
name|init
parameter_list|()
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|MockSchema
name|salesSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"SALES"
argument_list|)
decl_stmt|;
comment|// Same as "EMP_20" except it uses ModifiableViewTable which populates
comment|// constrained columns with default values on INSERT and has a single constraint on DEPTNO.
name|List
argument_list|<
name|String
argument_list|>
name|empModifiableViewNames
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|salesSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|salesSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"EMP_MODIFIABLEVIEW"
argument_list|)
decl_stmt|;
name|TableMacro
name|empModifiableViewMacro
init|=
name|MockModifiableViewRelOptTable
operator|.
name|viewMacro
argument_list|(
name|rootSchema
argument_list|,
literal|"select EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, SLACKER\n"
operator|+
literal|"from EMPDEFAULTS\n"
operator|+
literal|"where DEPTNO = 20"
argument_list|,
name|empModifiableViewNames
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|empModifiableViewNames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TranslatableTable
name|empModifiableView
init|=
name|empModifiableViewMacro
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|MockModifiableViewRelOptTable
name|mockEmpViewTable
init|=
name|MockModifiableViewRelOptTable
operator|.
name|create
argument_list|(
operator|(
name|MockModifiableViewRelOptTable
operator|.
name|MockModifiableViewTable
operator|)
name|empModifiableView
argument_list|,
name|this
argument_list|,
name|empModifiableViewNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|empModifiableViewNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|empModifiableViewNames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|20
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|registerTable
argument_list|(
name|mockEmpViewTable
argument_list|)
expr_stmt|;
comment|// Same as "EMP_MODIFIABLEVIEW" except that all columns are in the view, columns are reordered,
comment|// and there is an `extra` extended column.
name|List
argument_list|<
name|String
argument_list|>
name|empModifiableViewNames2
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|salesSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|salesSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"EMP_MODIFIABLEVIEW2"
argument_list|)
decl_stmt|;
name|TableMacro
name|empModifiableViewMacro2
init|=
name|MockModifiableViewRelOptTable
operator|.
name|viewMacro
argument_list|(
name|rootSchema
argument_list|,
literal|"select ENAME, EMPNO, JOB, DEPTNO, SLACKER, SAL, EXTRA, HIREDATE,"
operator|+
literal|" MGR, COMM\n"
operator|+
literal|"from EMPDEFAULTS extend (EXTRA boolean)\n"
operator|+
literal|"where DEPTNO = 20"
argument_list|,
name|empModifiableViewNames2
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|empModifiableViewNames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TranslatableTable
name|empModifiableView2
init|=
name|empModifiableViewMacro2
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|MockModifiableViewRelOptTable
name|mockEmpViewTable2
init|=
name|MockModifiableViewRelOptTable
operator|.
name|create
argument_list|(
operator|(
name|MockModifiableViewRelOptTable
operator|.
name|MockModifiableViewTable
operator|)
name|empModifiableView2
argument_list|,
name|this
argument_list|,
name|empModifiableViewNames2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|empModifiableViewNames2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|empModifiableViewNames2
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|20
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|registerTable
argument_list|(
name|mockEmpViewTable2
argument_list|)
expr_stmt|;
comment|// Same as "EMP_MODIFIABLEVIEW" except that comm is not in the view.
name|List
argument_list|<
name|String
argument_list|>
name|empModifiableViewNames3
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|salesSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|salesSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"EMP_MODIFIABLEVIEW3"
argument_list|)
decl_stmt|;
name|TableMacro
name|empModifiableViewMacro3
init|=
name|MockModifiableViewRelOptTable
operator|.
name|viewMacro
argument_list|(
name|rootSchema
argument_list|,
literal|"select EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, SLACKER\n"
operator|+
literal|"from EMPDEFAULTS\n"
operator|+
literal|"where DEPTNO = 20"
argument_list|,
name|empModifiableViewNames3
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|empModifiableViewNames3
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TranslatableTable
name|empModifiableView3
init|=
name|empModifiableViewMacro3
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|MockModifiableViewRelOptTable
name|mockEmpViewTable3
init|=
name|MockModifiableViewRelOptTable
operator|.
name|create
argument_list|(
operator|(
name|MockModifiableViewRelOptTable
operator|.
name|MockModifiableViewTable
operator|)
name|empModifiableView3
argument_list|,
name|this
argument_list|,
name|empModifiableViewNames3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|empModifiableViewNames3
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|empModifiableViewNames3
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|20
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|registerTable
argument_list|(
name|mockEmpViewTable3
argument_list|)
expr_stmt|;
comment|// Register "EMPM" table.
comment|// Same as "EMP" but with a "COUNT_PLUS_100" measure column.
specifier|final
name|MockTable
name|empmTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMPM"
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|f
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|f
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|f
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|f
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|f
operator|.
name|timestampType
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|f
operator|.
name|booleanType
argument_list|)
expr_stmt|;
name|empmTable
operator|.
name|addColumn
argument_list|(
literal|"COUNT_PLUS_100"
argument_list|,
name|f
operator|.
name|typeFactory
operator|.
name|createMeasureType
argument_list|(
name|f
operator|.
name|intType
argument_list|)
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empmTable
argument_list|)
expr_stmt|;
name|MockSchema
name|structTypeSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"STRUCT"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|structTypeSchema
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CompoundNameColumn
argument_list|>
name|columnsExtended
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CompoundNameColumn
argument_list|(
literal|""
argument_list|,
literal|"K0"
argument_list|,
name|f
operator|.
name|varchar20TypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|""
argument_list|,
literal|"C1"
argument_list|,
name|f
operator|.
name|varchar20TypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F0"
argument_list|,
literal|"C0"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"C1"
argument_list|,
name|f
operator|.
name|intTypeNull
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|CompoundNameColumn
argument_list|>
name|extendedColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columnsExtended
argument_list|)
decl_stmt|;
name|extendedColumns
operator|.
name|add
argument_list|(
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F2"
argument_list|,
literal|"C2"
argument_list|,
name|f
operator|.
name|varchar20Type
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CompoundNameColumnResolver
name|structExtendedTableResolver
init|=
operator|new
name|CompoundNameColumnResolver
argument_list|(
name|extendedColumns
argument_list|,
literal|"F0"
argument_list|)
decl_stmt|;
specifier|final
name|MockTable
name|structExtendedTypeTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|structTypeSchema
argument_list|,
literal|"T_EXTEND"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|,
name|structExtendedTableResolver
argument_list|)
decl_stmt|;
for|for
control|(
name|CompoundNameColumn
name|column
range|:
name|columnsExtended
control|)
block|{
name|structExtendedTypeTable
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|registerTable
argument_list|(
name|structExtendedTypeTable
argument_list|)
expr_stmt|;
comment|// Defines a table with
comment|// schema(A int, B bigint, C varchar(10), D as a + 1 stored, E as b * 3 virtual).
name|MockSchema
name|virtualColumnsSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"VIRTUALCOLUMNS"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|virtualColumnsSchema
argument_list|)
expr_stmt|;
specifier|final
name|MockTable
name|virtualColumnsTable1
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|virtualColumnsSchema
argument_list|,
literal|"VC_T1"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|,
operator|new
name|VirtualColumnsExpressionFactory
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|virtualColumnsTable1
operator|.
name|addColumn
argument_list|(
literal|"A"
argument_list|,
name|f
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|virtualColumnsTable1
operator|.
name|addColumn
argument_list|(
literal|"B"
argument_list|,
name|f
operator|.
name|bigintType
argument_list|)
expr_stmt|;
name|virtualColumnsTable1
operator|.
name|addColumn
argument_list|(
literal|"C"
argument_list|,
name|f
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|virtualColumnsTable1
operator|.
name|addColumn
argument_list|(
literal|"D"
argument_list|,
name|f
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
comment|// Column E has the same type as column A because it's a virtual column
comment|// with expression that references column A.
name|virtualColumnsTable1
operator|.
name|addColumn
argument_list|(
literal|"E"
argument_list|,
name|f
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
comment|// Same schema with VC_T1 but with different table name.
specifier|final
name|MockTable
name|virtualColumnsTable2
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|virtualColumnsSchema
argument_list|,
literal|"VC_T2"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|,
operator|new
name|VirtualColumnsExpressionFactory
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|virtualColumnsTable2
operator|.
name|addColumn
argument_list|(
literal|"A"
argument_list|,
name|f
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|virtualColumnsTable2
operator|.
name|addColumn
argument_list|(
literal|"B"
argument_list|,
name|f
operator|.
name|bigintType
argument_list|)
expr_stmt|;
name|virtualColumnsTable2
operator|.
name|addColumn
argument_list|(
literal|"C"
argument_list|,
name|f
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|virtualColumnsTable2
operator|.
name|addColumn
argument_list|(
literal|"D"
argument_list|,
name|f
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|virtualColumnsTable2
operator|.
name|addColumn
argument_list|(
literal|"E"
argument_list|,
name|f
operator|.
name|bigintType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|virtualColumnsTable1
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|virtualColumnsTable2
argument_list|)
expr_stmt|;
comment|// Register table with complex data type rows.
name|MockSchema
name|complexTypeColumnsSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"COMPLEXTYPES"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|complexTypeColumnsSchema
argument_list|)
expr_stmt|;
specifier|final
name|MockTable
name|complexTypeColumnsTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|complexTypeColumnsSchema
argument_list|,
literal|"CTC_T1"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"A"
argument_list|,
name|f
operator|.
name|recordType1
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"B"
argument_list|,
name|f
operator|.
name|recordType2
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"C"
argument_list|,
name|f
operator|.
name|recordType3
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"D"
argument_list|,
name|f
operator|.
name|recordType4
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"E"
argument_list|,
name|f
operator|.
name|recordType5
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"intArrayType"
argument_list|,
name|f
operator|.
name|intArrayType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"varchar5ArrayType"
argument_list|,
name|f
operator|.
name|varchar5ArrayType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"intArrayArrayType"
argument_list|,
name|f
operator|.
name|intArrayArrayType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"varchar5ArrayArrayType"
argument_list|,
name|f
operator|.
name|varchar5ArrayArrayType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"intMultisetType"
argument_list|,
name|f
operator|.
name|intMultisetType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"varchar5MultisetType"
argument_list|,
name|f
operator|.
name|varchar5MultisetType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"intMultisetArrayType"
argument_list|,
name|f
operator|.
name|intMultisetArrayType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"varchar5MultisetArrayType"
argument_list|,
name|f
operator|.
name|varchar5MultisetArrayType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"intArrayMultisetType"
argument_list|,
name|f
operator|.
name|intArrayMultisetType
argument_list|)
expr_stmt|;
name|complexTypeColumnsTable
operator|.
name|addColumn
argument_list|(
literal|"rowArrayMultisetType"
argument_list|,
name|f
operator|.
name|rowArrayMultisetType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|complexTypeColumnsTable
argument_list|)
expr_stmt|;
name|MockSchema
name|nullableRowsSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"NULLABLEROWS"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|nullableRowsSchema
argument_list|)
expr_stmt|;
specifier|final
name|MockTable
name|nullableRowsTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|nullableRowsSchema
argument_list|,
literal|"NR_T1"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|RelDataType
name|bigIntNotNull
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl_stmt|;
name|RelDataType
name|nullableRecordType
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|nullableRecord
argument_list|(
literal|true
argument_list|)
operator|.
name|add
argument_list|(
literal|"NOT_NULL_FIELD"
argument_list|,
name|bigIntNotNull
argument_list|)
operator|.
name|add
argument_list|(
literal|"NULLABLE_FIELD"
argument_list|,
name|bigIntNotNull
argument_list|)
operator|.
name|nullable
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|nullableRowsTable
operator|.
name|addColumn
argument_list|(
literal|"ROW_COLUMN"
argument_list|,
name|nullableRecordType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nullableRowsTable
operator|.
name|addColumn
argument_list|(
literal|"ROW_COLUMN_ARRAY"
argument_list|,
name|typeFactory
operator|.
name|createArrayType
argument_list|(
name|nullableRecordType
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|nullableRowsTable
argument_list|)
expr_stmt|;
name|MockSchema
name|geoSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"GEO"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|geoSchema
argument_list|)
expr_stmt|;
specifier|final
name|MockTable
name|restaurantTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|geoSchema
argument_list|,
literal|"RESTAURANTS"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|restaurantTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|f
operator|.
name|varchar20Type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restaurantTable
operator|.
name|addColumn
argument_list|(
literal|"LATITUDE"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|restaurantTable
operator|.
name|addColumn
argument_list|(
literal|"LONGITUDE"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|restaurantTable
operator|.
name|addColumn
argument_list|(
literal|"CUISINE"
argument_list|,
name|f
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|restaurantTable
operator|.
name|addColumn
argument_list|(
literal|"HILBERT"
argument_list|,
name|f
operator|.
name|bigintType
argument_list|)
expr_stmt|;
name|restaurantTable
operator|.
name|addMonotonic
argument_list|(
literal|"HILBERT"
argument_list|)
expr_stmt|;
name|restaurantTable
operator|.
name|addWrap
argument_list|(
operator|new
name|BuiltInMetadata
operator|.
name|AllPredicates
operator|.
name|Handler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RelOptPredicateList
name|getAllPredicates
parameter_list|(
name|RelNode
name|r
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
comment|// Return the predicate:
comment|//  r.hilbert = hilbert(r.longitude, r.latitude)
comment|//
comment|// (Yes, x = longitude, y = latitude. Same as ST_MakePoint.)
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|r
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexInputRef
name|refLatitude
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RexInputRef
name|refLongitude
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RexInputRef
name|refHilbert
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|r
argument_list|,
literal|4
argument_list|)
decl_stmt|;
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|refHilbert
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|hilbertOp
argument_list|()
argument_list|,
name|refLongitude
argument_list|,
name|refLatitude
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|SqlOperator
name|hilbertOp
parameter_list|()
block|{
for|for
control|(
name|SqlOperator
name|op
range|:
name|SqlOperatorTables
operator|.
name|spatialInstance
argument_list|()
operator|.
name|getOperatorList
argument_list|()
control|)
block|{
if|if
condition|(
name|op
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|HILBERT
operator|&&
name|op
operator|.
name|getOperandCountRange
argument_list|()
operator|.
name|isValidCount
argument_list|(
literal|2
argument_list|)
condition|)
block|{
return|return
name|op
return|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetadataDef
argument_list|<
name|BuiltInMetadata
operator|.
name|AllPredicates
argument_list|>
name|getDef
parameter_list|()
block|{
return|return
name|BuiltInMetadata
operator|.
name|AllPredicates
operator|.
name|DEF
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|restaurantTable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

