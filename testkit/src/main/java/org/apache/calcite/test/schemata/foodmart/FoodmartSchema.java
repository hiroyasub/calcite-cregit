begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|schemata
operator|.
name|foodmart
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Foodmart schema.  */
end_comment

begin_class
specifier|public
class|class
name|FoodmartSchema
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FOODMART_SCHEMA
init|=
literal|"     {\n"
operator|+
literal|"       type: 'jdbc',\n"
operator|+
literal|"       name: 'foodmart',\n"
operator|+
literal|"       jdbcDriver: "
operator|+
name|q
argument_list|(
name|CalciteAssert
operator|.
name|DB
operator|.
name|foodmart
operator|.
name|driver
argument_list|)
operator|+
literal|",\n"
operator|+
literal|"       jdbcUser: "
operator|+
name|q
argument_list|(
name|CalciteAssert
operator|.
name|DB
operator|.
name|foodmart
operator|.
name|username
argument_list|)
operator|+
literal|",\n"
operator|+
literal|"       jdbcPassword: "
operator|+
name|q
argument_list|(
name|CalciteAssert
operator|.
name|DB
operator|.
name|foodmart
operator|.
name|password
argument_list|)
operator|+
literal|",\n"
operator|+
literal|"       jdbcUrl: "
operator|+
name|q
argument_list|(
name|CalciteAssert
operator|.
name|DB
operator|.
name|foodmart
operator|.
name|url
argument_list|)
operator|+
literal|",\n"
operator|+
literal|"       jdbcCatalog: "
operator|+
name|q
argument_list|(
name|CalciteAssert
operator|.
name|DB
operator|.
name|foodmart
operator|.
name|catalog
argument_list|)
operator|+
literal|",\n"
operator|+
literal|"       jdbcSchema: "
operator|+
name|q
argument_list|(
name|CalciteAssert
operator|.
name|DB
operator|.
name|foodmart
operator|.
name|schema
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"     }\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FOODMART_MODEL
init|=
literal|"{\n"
operator|+
literal|"  version: '1.0',\n"
operator|+
literal|"  defaultSchema: 'foodmart',\n"
operator|+
literal|"   schemas: [\n"
operator|+
name|FOODMART_SCHEMA
operator|+
literal|"   ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
name|String
name|q
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
literal|"null"
else|:
literal|"'"
operator|+
name|s
operator|+
literal|"'"
return|;
block|}
specifier|public
specifier|final
name|SalesFact
index|[]
name|sales_fact_1997
init|=
block|{
operator|new
name|SalesFact
argument_list|(
literal|100
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|SalesFact
argument_list|(
literal|150
argument_list|,
literal|20
argument_list|)
block|,   }
decl_stmt|;
comment|/**    * Sales fact model.    */
specifier|public
specifier|static
class|class
name|SalesFact
block|{
specifier|public
specifier|final
name|int
name|cust_id
decl_stmt|;
specifier|public
specifier|final
name|int
name|prod_id
decl_stmt|;
specifier|public
name|SalesFact
parameter_list|(
name|int
name|cust_id
parameter_list|,
name|int
name|prod_id
parameter_list|)
block|{
name|this
operator|.
name|cust_id
operator|=
name|cust_id
expr_stmt|;
name|this
operator|.
name|prod_id
operator|=
name|prod_id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|SalesFact
operator|&&
name|cust_id
operator|==
operator|(
operator|(
name|SalesFact
operator|)
name|obj
operator|)
operator|.
name|cust_id
operator|&&
name|prod_id
operator|==
operator|(
operator|(
name|SalesFact
operator|)
name|obj
operator|)
operator|.
name|prod_id
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|cust_id
argument_list|,
name|prod_id
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

