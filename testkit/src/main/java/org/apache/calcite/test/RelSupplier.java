begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Programs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * The source of a {@link RelNode} for running a test.  */
end_comment

begin_interface
interface|interface
name|RelSupplier
block|{
name|RelNode
name|apply
parameter_list|(
name|RelOptFixture
name|fixture
parameter_list|)
function_decl|;
name|RelNode
name|apply2
parameter_list|(
name|RelMetadataFixture
name|metadataFixture
parameter_list|)
function_decl|;
name|RelSupplier
name|NONE
init|=
operator|new
name|RelSupplier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|apply
parameter_list|(
name|RelOptFixture
name|fixture
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|apply2
parameter_list|(
name|RelMetadataFixture
name|metadataFixture
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
specifier|static
name|RelSupplier
name|of
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
if|if
condition|(
name|sql
operator|.
name|contains
argument_list|(
literal|" \n"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"trailing whitespace"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SqlRelSupplier
argument_list|(
name|sql
argument_list|)
return|;
block|}
comment|/**    * RelBuilder config based on the "scott" schema.    */
name|FrameworkConfig
name|FRAMEWORK_CONFIG
init|=
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|parserConfig
argument_list|(
name|SqlParser
operator|.
name|Config
operator|.
name|DEFAULT
argument_list|)
operator|.
name|defaultSchema
argument_list|(
name|CalciteAssert
operator|.
name|addSchema
argument_list|(
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
argument_list|,
name|CalciteAssert
operator|.
name|SchemaSpec
operator|.
name|SCOTT_WITH_TEMPORAL
argument_list|)
argument_list|)
operator|.
name|traitDefs
argument_list|(
operator|(
name|List
argument_list|<
name|RelTraitDef
argument_list|>
operator|)
literal|null
argument_list|)
operator|.
name|programs
argument_list|(
name|Programs
operator|.
name|heuristicJoinOrder
argument_list|(
name|Programs
operator|.
name|RULE_SET
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|static
name|RelSupplier
name|of
parameter_list|(
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
parameter_list|)
block|{
return|return
operator|new
name|FnRelSupplier
argument_list|(
name|relFn
argument_list|)
return|;
block|}
comment|/** Creates a RelNode by parsing SQL. */
class|class
name|SqlRelSupplier
implements|implements
name|RelSupplier
block|{
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
specifier|private
name|SqlRelSupplier
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sql
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|SqlRelSupplier
operator|&&
operator|(
operator|(
name|SqlRelSupplier
operator|)
name|o
operator|)
operator|.
name|sql
operator|.
name|equals
argument_list|(
name|this
operator|.
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|3709
operator|+
name|sql
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|apply
parameter_list|(
name|RelOptFixture
name|fixture
parameter_list|)
block|{
name|String
name|sql2
init|=
name|fixture
operator|.
name|diffRepos
argument_list|()
operator|.
name|expand
argument_list|(
literal|"sql"
argument_list|,
name|sql
argument_list|)
decl_stmt|;
return|return
name|fixture
operator|.
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|fixture
operator|.
name|factory
argument_list|,
name|sql2
argument_list|,
name|fixture
operator|.
name|decorrelate
argument_list|,
name|fixture
operator|.
name|factory
operator|.
name|sqlToRelConfig
operator|.
name|isTrimUnusedFields
argument_list|()
argument_list|)
operator|.
name|rel
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|apply2
parameter_list|(
name|RelMetadataFixture
name|metadataFixture
parameter_list|)
block|{
return|return
name|metadataFixture
operator|.
name|sqlToRel
argument_list|(
name|sql
argument_list|)
return|;
block|}
block|}
comment|/** Creates a RelNode by passing a lambda to a {@link RelBuilder}. */
class|class
name|FnRelSupplier
implements|implements
name|RelSupplier
block|{
specifier|private
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
decl_stmt|;
specifier|private
name|FnRelSupplier
parameter_list|(
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
parameter_list|)
block|{
name|this
operator|.
name|relFn
operator|=
name|relFn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<relFn>"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|relFn
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|FnRelSupplier
operator|&&
operator|(
operator|(
name|FnRelSupplier
operator|)
name|o
operator|)
operator|.
name|relFn
operator|==
name|relFn
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|apply
parameter_list|(
name|RelOptFixture
name|fixture
parameter_list|)
block|{
return|return
name|relFn
operator|.
name|apply
argument_list|(
name|RelBuilder
operator|.
name|create
argument_list|(
name|FRAMEWORK_CONFIG
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|apply2
parameter_list|(
name|RelMetadataFixture
name|metadataFixture
parameter_list|)
block|{
return|return
name|relFn
operator|.
name|apply
argument_list|(
name|RelBuilder
operator|.
name|create
argument_list|(
name|FRAMEWORK_CONFIG
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_interface

end_unit

