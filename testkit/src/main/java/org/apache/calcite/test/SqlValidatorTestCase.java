begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|StringAndPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTestFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlValidatorTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_comment
comment|/**  * An abstract base class for implementing tests against {@link SqlValidator}.  *  *<p>A derived class can refine this test in two ways. First, it can add  * {@code testXxx()} methods, to test more functionality.  *  *<p>Second, it can override the {@link #fixture()} method to return a  * different implementation of the {@link SqlValidatorFixture} object. This  * encapsulates the differences between test environments, for example, which  * SQL parser or validator to use.  */
end_comment

begin_class
specifier|public
class|class
name|SqlValidatorTestCase
block|{
specifier|public
specifier|static
specifier|final
name|SqlValidatorFixture
name|FIXTURE
init|=
operator|new
name|SqlValidatorFixture
argument_list|(
name|SqlValidatorTester
operator|.
name|DEFAULT
argument_list|,
name|SqlTestFactory
operator|.
name|INSTANCE
argument_list|,
name|StringAndPos
operator|.
name|of
argument_list|(
literal|"?"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/** Creates a test case. */
specifier|public
name|SqlValidatorTestCase
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/** Creates a test fixture. Derived classes can override this method to    * run the same set of tests in a different testing environment. */
specifier|public
name|SqlValidatorFixture
name|fixture
parameter_list|()
block|{
return|return
name|FIXTURE
return|;
block|}
comment|/** Creates a test context with a SQL query. */
specifier|public
specifier|final
name|SqlValidatorFixture
name|sql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|fixture
argument_list|()
operator|.
name|withSql
argument_list|(
name|sql
argument_list|)
return|;
block|}
comment|/** Creates a test context with a SQL expression. */
specifier|public
specifier|final
name|SqlValidatorFixture
name|expr
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|fixture
argument_list|()
operator|.
name|withExpr
argument_list|(
name|sql
argument_list|)
return|;
block|}
comment|/** Creates a test context with a SQL expression.    * If an error occurs, the error is expected to span the entire expression. */
specifier|public
specifier|final
name|SqlValidatorFixture
name|wholeExpr
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|expr
argument_list|(
name|sql
argument_list|)
operator|.
name|withWhole
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|SqlValidatorFixture
name|winSql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|sql
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|SqlValidatorFixture
name|win
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|sql
argument_list|(
literal|"select * from emp "
operator|+
name|sql
argument_list|)
return|;
block|}
specifier|public
name|SqlValidatorFixture
name|winExp
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|winSql
argument_list|(
literal|"select "
operator|+
name|sql
operator|+
literal|" from emp window w as (order by deptno)"
argument_list|)
return|;
block|}
specifier|public
name|SqlValidatorFixture
name|winExp2
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|winSql
argument_list|(
literal|"select "
operator|+
name|sql
operator|+
literal|" from emp"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

