begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|NonNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Registers dynamic tables.  *  *<p>Not thread-safe.  */
end_comment

begin_class
specifier|public
class|class
name|MockCatalogReaderDynamic
extends|extends
name|MockCatalogReader
block|{
comment|/**    * Creates a MockCatalogReader.    *    *<p>Caller must then call {@link #init} to populate with data;    * constructor is protected to encourage you to call {@link #create}.    *    * @param typeFactory   Type factory    * @param caseSensitive case sensitivity    */
specifier|protected
name|MockCatalogReaderDynamic
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|super
argument_list|(
name|typeFactory
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
block|}
comment|/** Creates and initializes a MockCatalogReaderDynamic. */
specifier|public
specifier|static
annotation|@
name|NonNull
name|MockCatalogReaderDynamic
name|create
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
return|return
operator|new
name|MockCatalogReaderDynamic
argument_list|(
name|typeFactory
argument_list|,
name|caseSensitive
argument_list|)
operator|.
name|init
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MockCatalogReaderDynamic
name|init
parameter_list|()
block|{
comment|// Register "DYNAMIC" schema.
name|MockSchema
name|schema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"SALES"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|MockDynamicTable
name|nationTable
init|=
operator|new
name|MockDynamicTable
argument_list|(
name|schema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"NATION"
argument_list|)
decl_stmt|;
name|registerTable
argument_list|(
name|nationTable
argument_list|)
expr_stmt|;
name|Supplier
argument_list|<
name|MockDynamicTable
argument_list|>
name|customerTableSupplier
init|=
parameter_list|()
lambda|->
operator|new
name|MockDynamicTable
argument_list|(
name|schema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"CUSTOMER"
argument_list|)
decl_stmt|;
name|MockDynamicTable
name|customerTable
init|=
name|customerTableSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|registerTable
argument_list|(
name|customerTable
argument_list|)
expr_stmt|;
comment|// CREATE TABLE "REGION" - static table with known schema.
specifier|final
name|RelDataType
name|intType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|varcharType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl_stmt|;
name|MockTable
name|regionTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|schema
argument_list|,
literal|"REGION"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|regionTable
operator|.
name|addColumn
argument_list|(
literal|"R_REGIONKEY"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|regionTable
operator|.
name|addColumn
argument_list|(
literal|"R_NAME"
argument_list|,
name|varcharType
argument_list|)
expr_stmt|;
name|regionTable
operator|.
name|addColumn
argument_list|(
literal|"R_COMMENT"
argument_list|,
name|varcharType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|regionTable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|custModifiableViewNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|schema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"CUSTOMER_MODIFIABLEVIEW"
argument_list|)
decl_stmt|;
name|TableMacro
name|custModifiableViewMacro
init|=
name|MockModifiableViewRelOptTable
operator|.
name|viewMacro
argument_list|(
name|rootSchema
argument_list|,
literal|"select n_name from SALES.CUSTOMER"
argument_list|,
name|custModifiableViewNames
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|custModifiableViewNames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TranslatableTable
name|empModifiableView
init|=
name|custModifiableViewMacro
operator|.
name|apply
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|MockTable
name|mockCustViewTable
init|=
name|MockRelViewTable
operator|.
name|create
argument_list|(
operator|(
name|ViewTable
operator|)
name|empModifiableView
argument_list|,
name|this
argument_list|,
name|custModifiableViewNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|custModifiableViewNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|custModifiableViewNames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|20
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|registerTable
argument_list|(
name|mockCustViewTable
argument_list|)
expr_stmt|;
comment|// re-registers customer table to clear its row type after view registration
name|reregisterTable
argument_list|(
name|customerTableSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

