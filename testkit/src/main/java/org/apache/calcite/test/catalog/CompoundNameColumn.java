begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_comment
comment|/** Column having names with multiple parts. */
end_comment

begin_class
specifier|final
class|class
name|CompoundNameColumn
block|{
specifier|final
name|String
name|first
decl_stmt|;
specifier|final
name|String
name|second
decl_stmt|;
specifier|final
name|RelDataType
name|type
decl_stmt|;
name|CompoundNameColumn
parameter_list|(
name|String
name|first
parameter_list|,
name|String
name|second
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|first
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
operator|(
literal|"\""
operator|+
name|first
operator|+
literal|"\"."
operator|)
operator|)
operator|+
operator|(
literal|"\""
operator|+
name|second
operator|+
literal|"\""
operator|)
return|;
block|}
block|}
end_class

end_unit

