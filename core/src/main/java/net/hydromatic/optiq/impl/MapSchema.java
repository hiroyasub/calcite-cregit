begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Schema} backed by a {@link HashMap}.  */
end_comment

begin_class
specifier|public
class|class
name|MapSchema
extends|extends
name|AbstractSchema
block|{
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableMap
decl_stmt|;
specifier|protected
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Function
argument_list|>
name|membersMap
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
name|subSchemaMap
decl_stmt|;
comment|/**    * Creates a MapSchema.    *    * @param parentSchema Parent schema (may be null)    * @param name Name of schema    */
specifier|public
name|MapSchema
parameter_list|(
name|SchemaPlus
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|parentSchema
argument_list|,
name|name
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|()
argument_list|,
name|LinkedListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Function
operator|>
name|create
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a MapSchema, with explicit map objects for tables, members and    * sub-schemas.    *    * @param parentSchema Parent schema (may be null)    * @param name Name of schema    * @param tableMap Table map    * @param membersMap Members map    * @param subSchemaMap Sub-schema map    */
specifier|public
name|MapSchema
parameter_list|(
name|SchemaPlus
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableMap
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Function
argument_list|>
name|membersMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
name|subSchemaMap
parameter_list|)
block|{
name|super
argument_list|(
name|parentSchema
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableMap
operator|=
name|tableMap
expr_stmt|;
name|this
operator|.
name|membersMap
operator|=
name|membersMap
expr_stmt|;
name|this
operator|.
name|subSchemaMap
operator|=
name|subSchemaMap
expr_stmt|;
assert|assert
name|name
operator|!=
literal|null
assert|;
assert|assert
name|tableMap
operator|!=
literal|null
assert|;
assert|assert
name|membersMap
operator|!=
literal|null
assert|;
assert|assert
name|subSchemaMap
operator|!=
literal|null
assert|;
block|}
comment|/** Called by Optiq after creation, before loading tables explicitly defined    * in a JSON model. */
specifier|public
name|void
name|initialize
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|entry
range|:
name|initialTables
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tableMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
return|return
name|tableMap
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Multimap
argument_list|<
name|String
argument_list|,
name|Function
argument_list|>
name|getFunctionMultimap
parameter_list|()
block|{
return|return
name|membersMap
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
name|getSubSchemaMap
parameter_list|()
block|{
return|return
name|subSchemaMap
return|;
block|}
comment|/** Returns the initial set of tables.    *    *<p>The default implementation returns an empty list. Derived classes    * may override this method to create tables based on their schema type. For    * example, a CSV provider might scan for all ".csv" files in a particular    * directory and return a table for each.</p>    */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|initialTables
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End MapSchema.java
end_comment

end_unit

