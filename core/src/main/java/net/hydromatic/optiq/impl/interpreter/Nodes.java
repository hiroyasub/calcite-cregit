begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Helper methods for {@link Node} and implementations for core relational  * expressions.  */
end_comment

begin_class
specifier|public
class|class
name|Nodes
block|{
comment|/** Extension to    * {@link net.hydromatic.optiq.impl.interpreter.Interpreter.Compiler}    * that knows how to handle the core logical    * {@link org.eigenbase.rel.RelNode}s. */
specifier|public
specifier|static
class|class
name|CoreCompiler
extends|extends
name|Interpreter
operator|.
name|Compiler
block|{
name|CoreCompiler
parameter_list|(
name|Interpreter
name|interpreter
parameter_list|)
block|{
name|super
argument_list|(
name|interpreter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|FilterRelBase
name|filter
parameter_list|)
block|{
name|node
operator|=
operator|new
name|FilterNode
argument_list|(
name|interpreter
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|ProjectRelBase
name|project
parameter_list|)
block|{
name|node
operator|=
operator|new
name|ProjectNode
argument_list|(
name|interpreter
argument_list|,
name|project
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|ValuesRelBase
name|value
parameter_list|)
block|{
name|node
operator|=
operator|new
name|ValuesNode
argument_list|(
name|interpreter
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|TableAccessRelBase
name|scan
parameter_list|)
block|{
name|node
operator|=
operator|new
name|ScanNode
argument_list|(
name|interpreter
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|SortRel
name|sort
parameter_list|)
block|{
name|node
operator|=
operator|new
name|SortNode
argument_list|(
name|interpreter
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Node.java
end_comment

end_unit

