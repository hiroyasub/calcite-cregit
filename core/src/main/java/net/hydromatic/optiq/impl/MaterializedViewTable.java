begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqConnection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqPrepare
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationKey
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Table that is a materialized view.  *  *<p>It can exist in two states: materialized and not materialized. Over time,  * a given materialized view may switch states. How it is expanded depends upon  * its current state. State is managed by  * {@link net.hydromatic.optiq.materialize.MaterializationService}.</p>  */
end_comment

begin_class
specifier|public
class|class
name|MaterializedViewTable
extends|extends
name|ViewTable
block|{
specifier|private
specifier|final
name|MaterializationKey
name|key
decl_stmt|;
comment|/**    * Internal connection, used to execute queries to materialize views.    * To be used only by Calcite internals. And sparingly.    */
specifier|public
specifier|static
specifier|final
name|OptiqConnection
name|MATERIALIZATION_CONNECTION
decl_stmt|;
static|static
block|{
try|try
block|{
name|MATERIALIZATION_CONNECTION
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
operator|.
name|unwrap
argument_list|(
name|OptiqConnection
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MaterializedViewTable
parameter_list|(
name|Type
name|elementType
parameter_list|,
name|RelProtoDataType
name|relDataType
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewSchemaPath
parameter_list|,
name|MaterializationKey
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|elementType
argument_list|,
name|relDataType
argument_list|,
name|viewSql
argument_list|,
name|viewSchemaPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/** Table macro that returns a materialized view. */
specifier|public
specifier|static
name|MaterializedViewTableMacro
name|create
parameter_list|(
specifier|final
name|OptiqSchema
name|schema
parameter_list|,
specifier|final
name|String
name|viewSql
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|viewSchemaPath
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|MaterializedViewTableMacro
argument_list|(
name|schema
argument_list|,
name|viewSql
argument_list|,
name|viewSchemaPath
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
specifier|final
name|OptiqSchema
operator|.
name|TableEntry
name|tableEntry
init|=
name|MaterializationService
operator|.
name|instance
argument_list|()
operator|.
name|checkValid
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableEntry
operator|!=
literal|null
condition|)
block|{
name|Table
name|materializeTable
init|=
name|tableEntry
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|materializeTable
operator|instanceof
name|TranslatableTable
condition|)
block|{
name|TranslatableTable
name|table
init|=
operator|(
name|TranslatableTable
operator|)
name|materializeTable
decl_stmt|;
return|return
name|table
operator|.
name|toRel
argument_list|(
name|context
argument_list|,
name|relOptTable
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|toRel
argument_list|(
name|context
argument_list|,
name|relOptTable
argument_list|)
return|;
block|}
comment|/** Table function that returns the table that materializes a view. */
specifier|public
specifier|static
class|class
name|MaterializedViewTableMacro
extends|extends
name|ViewTableMacro
block|{
specifier|private
specifier|final
name|MaterializationKey
name|key
decl_stmt|;
specifier|private
name|MaterializedViewTableMacro
parameter_list|(
name|OptiqSchema
name|schema
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewSchemaPath
parameter_list|,
name|String
name|suggestedTableName
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|viewSql
argument_list|,
name|viewSchemaPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|MaterializationService
operator|.
name|instance
argument_list|()
operator|.
name|defineMaterialization
argument_list|(
name|schema
argument_list|,
literal|null
argument_list|,
name|viewSql
argument_list|,
name|schemaPath
argument_list|,
name|suggestedTableName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TranslatableTable
name|apply
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
block|{
assert|assert
name|arguments
operator|.
name|isEmpty
argument_list|()
assert|;
name|OptiqPrepare
operator|.
name|ParseResult
name|parsed
init|=
name|Schemas
operator|.
name|parse
argument_list|(
name|MATERIALIZATION_CONNECTION
argument_list|,
name|schema
argument_list|,
name|schemaPath
argument_list|,
name|viewSql
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath1
init|=
name|schemaPath
operator|!=
literal|null
condition|?
name|schemaPath
else|:
name|schema
operator|.
name|path
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|MATERIALIZATION_CONNECTION
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
return|return
operator|new
name|MaterializedViewTable
argument_list|(
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|parsed
operator|.
name|rowType
argument_list|)
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|parsed
operator|.
name|rowType
argument_list|)
argument_list|,
name|viewSql
argument_list|,
name|schemaPath1
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MaterializedViewTable.java
end_comment

end_unit

