begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|clone
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|MaterializedViewTable
operator|.
name|MATERIALIZATION_CONNECTION
import|;
end_import

begin_comment
comment|/**  * Schema that contains in-memory copies of tables from a JDBC schema.  */
end_comment

begin_class
specifier|public
class|class
name|CloneSchema
extends|extends
name|AbstractSchema
block|{
comment|// TODO: implement 'driver' property
comment|// TODO: implement 'source' property
comment|// TODO: test Factory
specifier|private
specifier|final
name|SchemaPlus
name|sourceSchema
decl_stmt|;
comment|/**    * Creates a CloneSchema.    *    * @param sourceSchema JDBC data source    */
specifier|public
name|CloneSchema
parameter_list|(
name|SchemaPlus
name|sourceSchema
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|sourceSchema
operator|=
name|sourceSchema
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|sourceSchema
operator|.
name|getTableNames
argument_list|()
control|)
block|{
specifier|final
name|QueryableTable
name|sourceTable
init|=
operator|(
name|QueryableTable
operator|)
name|sourceSchema
operator|.
name|getTable
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|createCloneTable
argument_list|(
name|MATERIALIZATION_CONNECTION
argument_list|,
name|sourceTable
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
name|Table
name|createCloneTable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|QueryableTable
name|sourceTable
parameter_list|,
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Queryable
argument_list|<
name|Object
argument_list|>
name|queryable
init|=
name|sourceTable
operator|.
name|asQueryable
argument_list|(
name|queryProvider
argument_list|,
name|sourceSchema
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
operator|(
operator|(
name|OptiqConnection
operator|)
name|queryProvider
operator|)
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
return|return
name|createCloneTable
argument_list|(
name|typeFactory
argument_list|,
name|Schemas
operator|.
name|proto
argument_list|(
name|sourceTable
argument_list|)
argument_list|,
literal|null
argument_list|,
name|queryable
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Table
name|createCloneTable
parameter_list|(
specifier|final
name|JavaTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|RelProtoDataType
name|protoRowType
parameter_list|,
specifier|final
name|List
argument_list|<
name|ColumnMetaData
operator|.
name|Rep
argument_list|>
name|repList
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|source
parameter_list|)
block|{
specifier|final
name|Type
name|elementType
init|=
name|source
operator|instanceof
name|QueryableTable
condition|?
operator|(
operator|(
name|QueryableTable
operator|)
name|source
operator|)
operator|.
name|getElementType
argument_list|()
else|:
name|Object
index|[]
operator|.
name|class
decl_stmt|;
return|return
operator|new
name|ArrayTable
argument_list|(
name|elementType
argument_list|,
name|protoRowType
argument_list|,
name|Suppliers
operator|.
name|memoize
argument_list|(
operator|new
name|Supplier
argument_list|<
name|ArrayTable
operator|.
name|Content
argument_list|>
argument_list|()
block|{
specifier|public
name|ArrayTable
operator|.
name|Content
name|get
parameter_list|()
block|{
specifier|final
name|ColumnLoader
name|loader
init|=
operator|new
name|ColumnLoader
argument_list|<
name|T
argument_list|>
argument_list|(
name|typeFactory
argument_list|,
name|source
argument_list|,
name|protoRowType
argument_list|,
name|repList
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArrayTable
operator|.
name|Content
argument_list|(
name|loader
operator|.
name|representationValues
argument_list|,
name|loader
operator|.
name|size
argument_list|()
argument_list|,
name|loader
operator|.
name|sortField
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
comment|/** Schema factory that creates a    * {@link net.hydromatic.optiq.impl.clone.CloneSchema}.    * This allows you to create a clone schema inside a model.json file.    *    *<pre>{@code    * {    *   version: '1.0',    *   defaultSchema: 'FOODMART_CLONE',    *   schemas: [    *     {    *       name: 'FOODMART_CLONE',    *       type: 'custom',    *       factory: 'net.hydromatic.optiq.impl.clone.CloneSchema$Factory',    *       operand: {    *         jdbcDriver: 'com.mysql.jdbc.Driver',    *         jdbcUrl: 'jdbc:mysql://localhost/foodmart',    *         jdbcUser: 'foodmart',    *         jdbcPassword: 'foodmart'    *       }    *     }    *   ]    * }    * }</pre>    */
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|SchemaFactory
block|{
specifier|public
name|Schema
name|create
parameter_list|(
name|SchemaPlus
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|operand
parameter_list|)
block|{
name|SchemaPlus
name|schema
init|=
name|parentSchema
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|JdbcSchema
operator|.
name|create
argument_list|(
name|parentSchema
argument_list|,
name|name
operator|+
literal|"$source"
argument_list|,
name|operand
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|CloneSchema
argument_list|(
name|schema
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End CloneSchema.java
end_comment

end_unit

