begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|FilterableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|QueryableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|Enumerables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|TableAccessRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Interpreter node that implements a  * {@link org.eigenbase.rel.TableAccessRelBase}.  */
end_comment

begin_class
specifier|public
class|class
name|ScanNode
implements|implements
name|Node
block|{
specifier|private
specifier|final
name|Sink
name|sink
decl_stmt|;
specifier|private
specifier|final
name|TableAccessRelBase
name|rel
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
decl_stmt|;
specifier|private
specifier|final
name|DataContext
name|root
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|projects
decl_stmt|;
specifier|public
name|ScanNode
parameter_list|(
name|Interpreter
name|interpreter
parameter_list|,
name|TableAccessRelBase
name|rel
parameter_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
name|ImmutableIntList
name|projects
parameter_list|)
block|{
name|this
operator|.
name|rel
operator|=
name|rel
expr_stmt|;
name|this
operator|.
name|filters
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|this
operator|.
name|projects
operator|=
name|projects
operator|==
literal|null
condition|?
literal|null
else|:
name|projects
operator|.
name|toIntArray
argument_list|()
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|interpreter
operator|.
name|sink
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|interpreter
operator|.
name|getDataContext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|iterable
init|=
name|iterable
argument_list|()
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Row
argument_list|>
name|enumerator
init|=
name|iterable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
while|while
condition|(
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|sink
operator|.
name|send
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
name|sink
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|iterable
parameter_list|()
block|{
specifier|final
name|RelOptTable
name|table
init|=
name|rel
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|ProjectableFilterableTable
name|pfTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pfTable
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filters
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
init|=
name|pfTable
operator|.
name|scan
argument_list|(
name|root
argument_list|,
name|filters1
argument_list|,
name|projects
argument_list|)
decl_stmt|;
assert|assert
name|filters1
operator|.
name|isEmpty
argument_list|()
operator|:
literal|"table could not handle a filter it earlier said it could"
assert|;
return|return
name|Enumerables
operator|.
name|toRow
argument_list|(
name|enumerator
argument_list|)
return|;
block|}
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"have projects, but table cannot handle them"
argument_list|)
throw|;
block|}
specifier|final
name|FilterableTable
name|filterableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|FilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterableTable
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filters
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
init|=
name|filterableTable
operator|.
name|scan
argument_list|(
name|root
argument_list|,
name|filters1
argument_list|)
decl_stmt|;
assert|assert
name|filters1
operator|.
name|isEmpty
argument_list|()
operator|:
literal|"table could not handle a filter it earlier said it could"
assert|;
return|return
name|Enumerables
operator|.
name|toRow
argument_list|(
name|enumerator
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"have filters, but table cannot handle them"
argument_list|)
throw|;
block|}
comment|//noinspection unchecked
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|iterable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|Enumerable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|iterable
operator|!=
literal|null
condition|)
block|{
return|return
name|iterable
return|;
block|}
specifier|final
name|QueryableTable
name|queryableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|QueryableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryableTable
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Type
name|elementType
init|=
name|queryableTable
operator|.
name|getElementType
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|root
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Util
operator|.
name|skipLast
argument_list|(
name|table
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
control|)
block|{
name|schema
operator|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elementType
operator|instanceof
name|Class
condition|)
block|{
comment|//noinspection unchecked
specifier|final
name|Queryable
argument_list|<
name|Object
argument_list|>
name|queryable
init|=
name|Schemas
operator|.
name|queryable
argument_list|(
name|root
argument_list|,
operator|(
name|Class
operator|)
name|elementType
argument_list|,
name|table
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Field
argument_list|>
name|fieldBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Class
name|type
init|=
operator|(
name|Class
operator|)
name|elementType
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|type
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|fieldBuilder
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
name|fieldBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|queryable
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Object
argument_list|,
name|Row
argument_list|>
argument_list|()
block|{
specifier|public
name|Row
name|apply
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|values
index|[
name|i
index|]
operator|=
name|field
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Row
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Schemas
operator|.
name|queryable
argument_list|(
name|root
argument_list|,
name|Row
operator|.
name|class
argument_list|,
name|table
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|final
name|ScannableTable
name|scannableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ScannableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|scannableTable
operator|!=
literal|null
condition|)
block|{
return|return
name|Enumerables
operator|.
name|toRow
argument_list|(
name|scannableTable
operator|.
name|scan
argument_list|(
name|root
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot convert table "
operator|+
name|table
operator|+
literal|" to iterable"
argument_list|)
throw|;
block|}
block|}
end_class

begin_comment
comment|// End ScanNode.java
end_comment

end_unit

