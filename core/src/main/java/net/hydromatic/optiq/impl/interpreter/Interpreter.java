begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|OptiqPrepareImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|ReflectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|ReflectiveVisitDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|ReflectiveVisitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Interpreter.  *  *<p>Contains the context for interpreting relational expressions. In  * particular it holds working state while the data flow graph is being  * assembled.</p>  */
end_comment

begin_class
specifier|public
class|class
name|Interpreter
extends|extends
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
block|{
specifier|final
name|Map
argument_list|<
name|RelNode
argument_list|,
name|NodeInfo
argument_list|>
name|nodes
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|DataContext
name|dataContext
decl_stmt|;
specifier|private
specifier|final
name|RelNode
name|rootRel
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|RelNode
argument_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
argument_list|>
name|relInputs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|public
name|Interpreter
parameter_list|(
name|DataContext
name|dataContext
parameter_list|,
name|RelNode
name|rootRel
parameter_list|)
block|{
name|this
operator|.
name|dataContext
operator|=
name|dataContext
expr_stmt|;
name|Compiler
name|compiler
init|=
operator|new
name|Nodes
operator|.
name|CoreCompiler
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|this
operator|.
name|rootRel
operator|=
name|compiler
operator|.
name|visitRoot
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ArrayDeque
argument_list|<
name|Row
argument_list|>
name|queue
init|=
name|nodes
operator|.
name|get
argument_list|(
name|rootRel
argument_list|)
operator|.
name|sink
operator|.
name|list
decl_stmt|;
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
name|Row
name|row
decl_stmt|;
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
return|return
name|row
operator|.
name|getValues
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
try|try
block|{
name|row
operator|=
name|queue
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|row
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|Interpreter
operator|.
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|start
parameter_list|()
block|{
comment|// We rely on the nodes being ordered leaves first.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RelNode
argument_list|,
name|NodeInfo
argument_list|>
name|entry
range|:
name|nodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|NodeInfo
name|nodeInfo
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|nodeInfo
operator|.
name|node
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|close
parameter_list|()
block|{
comment|// TODO:
block|}
comment|/** Compiles an expression to an executable form. */
specifier|public
name|Scalar
name|compile
parameter_list|(
specifier|final
name|RexNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|RexCall
condition|)
block|{
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Scalar
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|compile
argument_list|(
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableList
argument_list|<
name|Scalar
argument_list|>
name|scalars
init|=
name|list
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|Scalar
argument_list|()
block|{
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|args
decl_stmt|;
name|Comparable
name|o0
decl_stmt|;
name|Comparable
name|o1
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
name|args
operator|=
name|lazyArgs
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|o0
operator|=
operator|(
name|Comparable
operator|)
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|o0
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|o1
operator|=
operator|(
name|Comparable
operator|)
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|o0
operator|instanceof
name|BigDecimal
condition|)
block|{
if|if
condition|(
name|o1
operator|instanceof
name|Double
operator|||
name|o1
operator|instanceof
name|Float
condition|)
block|{
name|o1
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o1
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o1
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o1
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|o1
operator|instanceof
name|BigDecimal
condition|)
block|{
if|if
condition|(
name|o0
operator|instanceof
name|Double
operator|||
name|o0
operator|instanceof
name|Float
condition|)
block|{
name|o0
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o0
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o0
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o0
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|c
init|=
name|o0
operator|.
name|compareTo
argument_list|(
name|o1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|c
operator|<
literal|0
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|c
operator|<=
literal|0
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|c
operator|>
literal|0
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|c
operator|>=
literal|0
return|;
case|case
name|EQUALS
case|:
return|return
name|c
operator|==
literal|0
return|;
case|case
name|NOT_EQUALS
case|:
return|return
name|c
operator|!=
literal|0
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown expression "
operator|+
name|call
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown expression "
operator|+
name|call
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|lazyArgs
parameter_list|(
specifier|final
name|Context
name|context
parameter_list|)
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|scalars
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|execute
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|scalars
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
return|return
operator|new
name|Scalar
argument_list|()
block|{
specifier|public
name|Object
name|execute
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
return|return
operator|(
operator|(
name|RexLiteral
operator|)
name|node
operator|)
operator|.
name|getValue
argument_list|()
return|;
case|case
name|INPUT_REF
case|:
return|return
name|context
operator|.
name|values
index|[
operator|(
operator|(
name|RexInputRef
operator|)
name|node
operator|)
operator|.
name|getIndex
argument_list|()
index|]
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown expression type "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|public
name|Source
name|source
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
specifier|final
name|RelNode
name|input
init|=
name|getInput
argument_list|(
name|rel
argument_list|,
name|ordinal
argument_list|)
decl_stmt|;
specifier|final
name|NodeInfo
name|x
init|=
name|nodes
operator|.
name|get
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should be registered: "
operator|+
name|rel
argument_list|)
throw|;
block|}
return|return
operator|new
name|ListSource
argument_list|(
name|x
operator|.
name|sink
argument_list|)
return|;
block|}
specifier|private
name|RelNode
name|getInput
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|relInputs
operator|.
name|get
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputs
operator|!=
literal|null
condition|)
block|{
return|return
name|inputs
operator|.
name|get
argument_list|(
name|ordinal
argument_list|)
return|;
block|}
return|return
name|rel
operator|.
name|getInput
argument_list|(
name|ordinal
argument_list|)
return|;
block|}
specifier|public
name|Sink
name|sink
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|ArrayDeque
argument_list|<
name|Row
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<
name|Row
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ListSink
name|sink
init|=
operator|new
name|ListSink
argument_list|(
name|queue
argument_list|)
decl_stmt|;
specifier|final
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|rel
argument_list|,
name|sink
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|rel
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
return|return
name|sink
return|;
block|}
specifier|public
name|Context
name|createContext
parameter_list|()
block|{
return|return
operator|new
name|Context
argument_list|()
return|;
block|}
specifier|public
name|DataContext
name|getDataContext
parameter_list|()
block|{
return|return
name|dataContext
return|;
block|}
comment|/** Information about a node registered in the data flow graph. */
specifier|private
specifier|static
class|class
name|NodeInfo
block|{
specifier|final
name|RelNode
name|rel
decl_stmt|;
specifier|final
name|ListSink
name|sink
decl_stmt|;
name|Node
name|node
decl_stmt|;
specifier|public
name|NodeInfo
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|ListSink
name|sink
parameter_list|)
block|{
name|this
operator|.
name|rel
operator|=
name|rel
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|sink
expr_stmt|;
block|}
block|}
comment|/** Implementation of {@link Sink} using a {@link java.util.ArrayDeque}. */
specifier|private
specifier|static
class|class
name|ListSink
implements|implements
name|Sink
block|{
specifier|final
name|ArrayDeque
argument_list|<
name|Row
argument_list|>
name|list
decl_stmt|;
specifier|private
name|ListSink
parameter_list|(
name|ArrayDeque
argument_list|<
name|Row
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|Row
name|row
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|list
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|InterruptedException
block|{
block|}
block|}
comment|/** Implementation of {@link Source} using a {@link java.util.ArrayDeque}. */
specifier|private
specifier|static
class|class
name|ListSource
implements|implements
name|Source
block|{
specifier|private
specifier|final
name|ArrayDeque
argument_list|<
name|Row
argument_list|>
name|list
decl_stmt|;
specifier|public
name|ListSource
parameter_list|(
name|ListSink
name|sink
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|sink
operator|.
name|list
expr_stmt|;
block|}
specifier|public
name|Row
name|receive
parameter_list|()
block|{
try|try
block|{
return|return
name|list
operator|.
name|remove
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/**    * Walks over a tree of {@link org.eigenbase.rel.RelNode} and, for each,    * creates a {@link net.hydromatic.optiq.impl.interpreter.Node} that can be    * executed in the interpreter.    *    *<p>The compiler looks for methods of the form "visit(XxxRel)".    * A "visit" method must create an appropriate {@link Node} and put it into    * the {@link #node} field.    *    *<p>If you wish to handle more kinds of relational expressions, add extra    * "visit" methods in this or a sub-class, and they will be found and called    * via reflection.    */
specifier|public
specifier|static
class|class
name|Compiler
extends|extends
name|RelVisitor
implements|implements
name|ReflectiveVisitor
block|{
specifier|private
specifier|final
name|ReflectiveVisitDispatcher
argument_list|<
name|Compiler
argument_list|,
name|RelNode
argument_list|>
name|dispatcher
init|=
name|ReflectUtil
operator|.
name|createDispatcher
argument_list|(
name|Compiler
operator|.
name|class
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Interpreter
name|interpreter
decl_stmt|;
specifier|protected
name|RelNode
name|rootRel
decl_stmt|;
specifier|protected
name|RelNode
name|rel
decl_stmt|;
specifier|protected
name|Node
name|node
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REWRITE_METHOD_NAME
init|=
literal|"rewrite"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VISIT_METHOD_NAME
init|=
literal|"visit"
decl_stmt|;
name|Compiler
parameter_list|(
name|Interpreter
name|interpreter
parameter_list|)
block|{
name|this
operator|.
name|interpreter
operator|=
name|interpreter
expr_stmt|;
block|}
specifier|public
name|RelNode
name|visitRoot
parameter_list|(
name|RelNode
name|p
parameter_list|)
block|{
name|rootRel
operator|=
name|p
expr_stmt|;
name|visit
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|rootRel
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|p
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|rel
operator|=
literal|null
expr_stmt|;
name|boolean
name|found
init|=
name|dispatcher
operator|.
name|invokeVisitor
argument_list|(
name|this
argument_list|,
name|p
argument_list|,
name|REWRITE_METHOD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"interpreter: no implementation for rewrite"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rel
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|OptiqPrepareImpl
operator|.
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Interpreter: rewrite "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|rel
argument_list|)
expr_stmt|;
block|}
name|p
operator|=
name|rel
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|interpreter
operator|.
name|relInputs
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputs
operator|==
literal|null
condition|)
block|{
name|inputs
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|parent
operator|.
name|getInputs
argument_list|()
argument_list|)
expr_stmt|;
name|interpreter
operator|.
name|relInputs
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
block|}
name|inputs
operator|.
name|set
argument_list|(
name|ordinal
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rootRel
operator|=
name|p
expr_stmt|;
block|}
block|}
comment|// rewrite children first (from left to right)
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|interpreter
operator|.
name|relInputs
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|input
argument_list|,
name|i
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|p
operator|.
name|childrenAccept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
literal|null
expr_stmt|;
name|boolean
name|found
init|=
name|dispatcher
operator|.
name|invokeVisitor
argument_list|(
name|this
argument_list|,
name|p
argument_list|,
name|VISIT_METHOD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
block|{
comment|// Probably need to add a visit(XxxRel) method to CoreCompiler.
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"interpreter: no implementation for "
operator|+
name|p
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|NodeInfo
name|nodeInfo
init|=
name|interpreter
operator|.
name|nodes
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
assert|assert
name|nodeInfo
operator|!=
literal|null
assert|;
name|nodeInfo
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
comment|/** Fallback rewrite method.      *      *<p>Overriding methods (each with a different sub-class of {@link RelNode}      * as its argument type) sets the {@link #rel} field if intends to      * rewrite. */
specifier|public
name|void
name|rewrite
parameter_list|(
name|RelNode
name|r
parameter_list|)
block|{
block|}
block|}
block|}
end_class

begin_comment
comment|// End Interpreter.java
end_comment

end_unit

