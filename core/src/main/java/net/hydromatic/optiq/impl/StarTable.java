begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Virtual table that is composed of two or more tables joined together.  *  *<p>Star tables do not occur in end-user queries. They are introduced by the  * optimizer to help matching queries to materializations, and used only  * during the planning process.</p>  *  *<p>When a materialization is defined, if it involves a join, it is converted  * to a query on top of a star table. Queries that are candidates to map onto  * the materialization are mapped onto the same star table.</p>  */
end_comment

begin_class
specifier|public
class|class
name|StarTable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractTable
argument_list|<
name|T
argument_list|>
block|{
comment|// TODO: we'll also need a list of join conditions between tables. For now
comment|//  we assume that join conditions match
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|Table
argument_list|>
name|tables
decl_stmt|;
comment|/** Creates a StarTable. */
specifier|public
name|StarTable
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|tables
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|elementType
argument_list|,
name|rowType
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|tables
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|tables
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a StarTable and registers it in a schema. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|StarTable
argument_list|<
name|T
argument_list|>
name|of
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|tables
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|typeList
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
block|{
name|typeList
operator|.
name|addAll
argument_list|(
name|RelOptUtil
operator|.
name|getFieldTypeList
argument_list|(
name|table
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nameList
operator|.
name|addAll
argument_list|(
name|table
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|rowType
init|=
name|schema
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|typeList
argument_list|,
name|SqlValidatorUtil
operator|.
name|uniquify
argument_list|(
name|nameList
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|StarTable
argument_list|<
name|T
argument_list|>
argument_list|(
name|schema
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|rowType
argument_list|,
name|tableName
argument_list|,
name|tables
argument_list|)
return|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|StarTable
name|add
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Table
argument_list|>
name|tables1
init|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|(
name|tables
argument_list|)
decl_stmt|;
name|tables1
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|of
argument_list|(
name|schema
argument_list|,
name|tableName
operator|+
name|tables
operator|.
name|size
argument_list|()
argument_list|,
name|tables1
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPath
parameter_list|()
block|{
return|return
name|Schemas
operator|.
name|path
argument_list|(
name|schema
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/** Returns the column offset of the first column of {@code table} in this    * star table's output row type.    *    * @param table Table    * @return Column offset    * @throws IllegalArgumentException if table is not in this star    */
specifier|public
name|int
name|columnOffset
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Table
name|table1
range|:
name|tables
control|)
block|{
if|if
condition|(
name|table1
operator|==
name|table
condition|)
block|{
return|return
name|n
return|;
block|}
name|n
operator|+=
name|table1
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"star table "
operator|+
name|this
operator|+
literal|" does not contain table "
operator|+
name|table
argument_list|)
throw|;
block|}
block|}
end_class

begin_comment
comment|// End StarTable.java
end_comment

end_unit

