begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|config
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|Casing
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|Quoting
import|;
end_import

begin_comment
comment|/** Named, built-in lexical policy. A lexical policy describes how  * identifiers are quoted, whether they are converted to upper- or  * lower-case when they are read, and whether they are matched  * case-sensitively. */
end_comment

begin_enum
specifier|public
enum|enum
name|Lex
block|{
comment|/** Lexical policy similar to Oracle. The case of identifiers enclosed in    * double-quotes is preserved; unquoted identifiers are converted to    * upper-case; after which, identifiers are matched case-sensitively. */
name|ORACLE
argument_list|(
name|Quoting
operator|.
name|DOUBLE_QUOTE
argument_list|,
name|Casing
operator|.
name|TO_UPPER
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|,
literal|true
argument_list|)
block|,
comment|/** Lexical policy similar to MySQL. (To be precise: MySQL on Windows;    * MySQL on Linux uses case-sensitive matching, like the Linux file system.)    * The case of identifiers is preserved whether or not they quoted;    * after which, identifiers are matched case-insensitively.    * Back-ticks allow identifiers to contain non-alphanumeric characters. */
name|MYSQL
argument_list|(
name|Quoting
operator|.
name|BACK_TICK
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|,
literal|false
argument_list|)
block|,
comment|/** Lexical policy similar to Microsoft SQL Server.    * The case of identifiers is preserved whether or not they are quoted;    * after which, identifiers are matched case-insensitively.    * Brackets allow identifiers to contain non-alphanumeric characters. */
name|SQL_SERVER
argument_list|(
name|Quoting
operator|.
name|BRACKET
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|,
literal|false
argument_list|)
block|,
comment|/** Lexical policy similar to Java.    * The case of identifiers is preserved whether or not they are quoted;    * after which, identifiers are matched case-sensitively.    * Unlike Java, back-ticks allow identifiers to contain non-alphanumeric    * characters. */
name|JAVA
argument_list|(
name|Quoting
operator|.
name|BACK_TICK
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|,
literal|true
argument_list|)
block|;
specifier|public
specifier|final
name|Quoting
name|quoting
decl_stmt|;
specifier|public
specifier|final
name|Casing
name|unquotedCasing
decl_stmt|;
specifier|public
specifier|final
name|Casing
name|quotedCasing
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
name|Lex
parameter_list|(
name|Quoting
name|quoting
parameter_list|,
name|Casing
name|unquotedCasing
parameter_list|,
name|Casing
name|quotedCasing
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
operator|.
name|quoting
operator|=
name|quoting
expr_stmt|;
name|this
operator|.
name|unquotedCasing
operator|=
name|unquotedCasing
expr_stmt|;
name|this
operator|.
name|quotedCasing
operator|=
name|quotedCasing
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
block|}
end_enum

begin_comment
comment|// End Lex.java
end_comment

end_unit

