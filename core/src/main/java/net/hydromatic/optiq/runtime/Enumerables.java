begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|EqualityComparer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Bug
import|;
end_import

begin_comment
comment|/**  * Utilities for processing {@link net.hydromatic.linq4j.Enumerable}  * collections.  *  *<p>This class is a place to put things not yet added to linq4j.  * Methods are subject to removal without notice.</p>  */
end_comment

begin_class
specifier|public
class|class
name|Enumerables
block|{
specifier|private
name|Enumerables
parameter_list|()
block|{
block|}
comment|/**    * Returns elements of {@code outer} for which there is a member of    * {@code inner} with a matching key.    */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|,
name|TInner
parameter_list|,
name|TKey
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|semiJoin
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|outer
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|)
block|{
name|Bug
operator|.
name|upgrade
argument_list|(
literal|"move into linq4j"
argument_list|)
expr_stmt|;
return|return
name|semiJoin
argument_list|(
name|outer
argument_list|,
name|inner
argument_list|,
name|outerKeySelector
argument_list|,
name|innerKeySelector
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns elements of {@code outer} for which there is a member of    * {@code inner} with a matching key. A specified    * {@code EqualityComparer<TSource>} is used to compare keys.    */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|,
name|TInner
parameter_list|,
name|TKey
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|semiJoin
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|outer
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|TSource
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|TKey
argument_list|>
name|innerLookup
init|=
name|comparer
operator|==
literal|null
condition|?
name|inner
operator|.
name|select
argument_list|(
name|innerKeySelector
argument_list|)
operator|.
name|distinct
argument_list|()
else|:
name|inner
operator|.
name|select
argument_list|(
name|innerKeySelector
argument_list|)
operator|.
name|distinct
argument_list|(
name|comparer
argument_list|)
decl_stmt|;
return|return
name|Enumerables
operator|.
name|where
argument_list|(
name|outer
operator|.
name|enumerator
argument_list|()
argument_list|,
operator|new
name|Predicate1
argument_list|<
name|TSource
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|TSource
name|v0
parameter_list|)
block|{
specifier|final
name|TKey
name|key
init|=
name|outerKeySelector
operator|.
name|apply
argument_list|(
name|v0
argument_list|)
decl_stmt|;
return|return
name|innerLookup
operator|.
name|contains
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Filters a sequence of values based on a    * predicate.    */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|where
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|source
parameter_list|,
specifier|final
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
block|{
assert|assert
name|predicate
operator|!=
literal|null
assert|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|TSource
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
init|=
name|source
operator|.
name|enumerator
argument_list|()
decl_stmt|;
return|return
name|Enumerables
operator|.
name|where
argument_list|(
name|enumerator
argument_list|,
name|predicate
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|TSource
parameter_list|>
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|where
parameter_list|(
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
parameter_list|,
specifier|final
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|TSource
argument_list|>
argument_list|()
block|{
specifier|public
name|TSource
name|current
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|current
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
while|while
condition|(
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End Enumerables.java
end_comment

end_unit

