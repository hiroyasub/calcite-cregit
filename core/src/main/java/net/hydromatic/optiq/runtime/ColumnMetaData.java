begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Metadata for a column.  * (Compare with {@link java.sql.ResultSetMetaData}.)  */
end_comment

begin_class
specifier|public
class|class
name|ColumnMetaData
block|{
specifier|public
specifier|final
name|int
name|ordinal
decl_stmt|;
comment|// 0-based
specifier|public
specifier|final
name|boolean
name|autoIncrement
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|searchable
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|currency
decl_stmt|;
specifier|public
specifier|final
name|int
name|nullable
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|signed
decl_stmt|;
specifier|public
specifier|final
name|int
name|displaySize
decl_stmt|;
specifier|public
specifier|final
name|String
name|label
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|String
name|schemaName
decl_stmt|;
specifier|public
specifier|final
name|int
name|precision
decl_stmt|;
specifier|public
specifier|final
name|int
name|scale
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|String
name|catalogName
decl_stmt|;
specifier|public
specifier|final
name|int
name|type
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|readOnly
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|writable
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|definitelyWritable
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnClassName
decl_stmt|;
comment|/** The type of the field that holds the value. Not a JDBC property. */
specifier|public
specifier|final
name|Rep
name|representation
decl_stmt|;
specifier|public
name|ColumnMetaData
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|boolean
name|autoIncrement
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|,
name|boolean
name|searchable
parameter_list|,
name|boolean
name|currency
parameter_list|,
name|int
name|nullable
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|int
name|displaySize
parameter_list|,
name|String
name|label
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|int
name|type
parameter_list|,
name|String
name|typeName
parameter_list|,
name|boolean
name|readOnly
parameter_list|,
name|boolean
name|writable
parameter_list|,
name|boolean
name|definitelyWritable
parameter_list|,
name|String
name|columnClassName
parameter_list|,
name|Rep
name|representation
parameter_list|)
block|{
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
name|this
operator|.
name|autoIncrement
operator|=
name|autoIncrement
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
name|this
operator|.
name|searchable
operator|=
name|searchable
expr_stmt|;
name|this
operator|.
name|currency
operator|=
name|currency
expr_stmt|;
name|this
operator|.
name|nullable
operator|=
name|nullable
expr_stmt|;
name|this
operator|.
name|signed
operator|=
name|signed
expr_stmt|;
name|this
operator|.
name|displaySize
operator|=
name|displaySize
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
comment|// Per the JDBC spec this should be just columnName.
comment|// For example, the query
comment|//     select 1 as x, c as y from t
comment|// should give columns
comment|//     (label=x, column=null, table=null)
comment|//     (label=y, column=c table=t)
comment|// But DbUnit requires every column to have a name. Duh.
name|this
operator|.
name|columnName
operator|=
name|first
argument_list|(
name|columnName
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|this
operator|.
name|schemaName
operator|=
name|schemaName
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|catalogName
operator|=
name|catalogName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|this
operator|.
name|writable
operator|=
name|writable
expr_stmt|;
name|this
operator|.
name|definitelyWritable
operator|=
name|definitelyWritable
expr_stmt|;
name|this
operator|.
name|columnClassName
operator|=
name|columnClassName
expr_stmt|;
name|this
operator|.
name|representation
operator|=
name|representation
expr_stmt|;
assert|assert
name|representation
operator|!=
literal|null
assert|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|first
parameter_list|(
name|T
name|t0
parameter_list|,
name|T
name|t1
parameter_list|)
block|{
return|return
name|t0
operator|!=
literal|null
condition|?
name|t0
else|:
name|t1
return|;
block|}
comment|/** Description of the type used to internally represent a value. For example,    * a {@link java.sql.Date} might be represented as a {@link #PRIMITIVE_INT}    * if not nullable, or a {@link #JAVA_SQL_DATE}. */
specifier|public
enum|enum
name|Rep
block|{
name|PRIMITIVE_BOOLEAN
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_BYTE
argument_list|(
name|byte
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_CHAR
argument_list|(
name|char
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_SHORT
argument_list|(
name|short
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_INT
argument_list|(
name|int
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_LONG
argument_list|(
name|long
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_FLOAT
argument_list|(
name|float
operator|.
name|class
argument_list|)
block|,
name|PRIMITIVE_DOUBLE
argument_list|(
name|double
operator|.
name|class
argument_list|)
block|,
name|BOOLEAN
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
block|,
name|BYTE
argument_list|(
name|Byte
operator|.
name|class
argument_list|)
block|,
name|CHARACTER
argument_list|(
name|Character
operator|.
name|class
argument_list|)
block|,
name|SHORT
argument_list|(
name|Short
operator|.
name|class
argument_list|)
block|,
name|INTEGER
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
block|,
name|LONG
argument_list|(
name|Long
operator|.
name|class
argument_list|)
block|,
name|FLOAT
argument_list|(
name|Float
operator|.
name|class
argument_list|)
block|,
name|DOUBLE
argument_list|(
name|Double
operator|.
name|class
argument_list|)
block|,
name|JAVA_SQL_TIME
argument_list|(
name|Time
operator|.
name|class
argument_list|)
block|,
name|JAVA_SQL_TIMESTAMP
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|)
block|,
name|JAVA_SQL_DATE
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|)
block|,
name|JAVA_UTIL_DATE
argument_list|(
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
argument_list|)
block|,
name|STRING
argument_list|(
name|String
operator|.
name|class
argument_list|)
block|,
name|OBJECT
argument_list|(
name|Object
operator|.
name|class
argument_list|)
block|;
specifier|private
specifier|final
name|Class
name|clazz
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Rep
argument_list|>
name|VALUE_MAP
decl_stmt|;
static|static
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Class
argument_list|,
name|Rep
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Rep
name|rep
range|:
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|rep
operator|.
name|clazz
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
name|VALUE_MAP
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|Rep
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ColumnMetaData.java
end_comment

end_unit

