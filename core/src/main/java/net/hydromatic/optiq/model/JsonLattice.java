begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|model
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Element that describes a star schema and provides a framework for defining,  * recognizing, and recommending materialized views at various levels of  * aggregation.  *  * @see JsonRoot Description of schema elements  */
end_comment

begin_class
specifier|public
class|class
name|JsonLattice
block|{
specifier|public
name|String
name|name
decl_stmt|;
comment|/** SQL query that defines the lattice.    *    *<p>Must be a string or a list of strings (which are concatenated separated    * by newlines).    */
specifier|public
name|Object
name|sql
decl_stmt|;
comment|/** Whether to create in-memory materialized aggregates on demand.    *    *<p>Default is true. */
specifier|public
name|boolean
name|auto
init|=
literal|true
decl_stmt|;
comment|/** Whether to use an algorithm to suggest aggregates.    *    *<p>Default is false. */
specifier|public
name|boolean
name|algorithm
init|=
literal|false
decl_stmt|;
comment|/** Maximum time to run the algorithm. Default is -1, meaning no timeout. */
specifier|public
name|long
name|algorithmMaxMillis
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Estimated number of rows.    *    *<p>If null, Calcite will a query to find the real value. */
specifier|public
name|Double
name|rowCountEstimate
decl_stmt|;
comment|/** List of materialized aggregates to create up front. */
specifier|public
specifier|final
name|List
argument_list|<
name|JsonTile
argument_list|>
name|tiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/** List of measures that a tile should have by default.    *    *<p>A tile can define its own measures, including measures not in this list.    *    *<p>The default list is just count. */
specifier|public
name|List
argument_list|<
name|JsonMeasure
argument_list|>
name|defaultMeasures
decl_stmt|;
specifier|public
name|void
name|accept
parameter_list|(
name|ModelHandler
name|handler
parameter_list|)
block|{
name|handler
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JsonLattice(name="
operator|+
name|name
operator|+
literal|", sql="
operator|+
name|getSql
argument_list|()
operator|+
literal|")"
return|;
block|}
comment|/** Returns the SQL query as a string, concatenating a list of lines if    * necessary. */
specifier|public
name|String
name|getSql
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|sql
argument_list|)
return|;
block|}
comment|/** Converts a string or a list of strings to a string. The list notation    * is a convenient way of writing long multi-line strings in JSON. */
specifier|static
name|String
name|toString
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|instanceof
name|String
condition|?
operator|(
name|String
operator|)
name|o
else|:
name|concatenate
argument_list|(
operator|(
name|List
operator|)
name|o
argument_list|)
return|;
block|}
comment|/** Converts a list of strings into a multi-line string. */
specifier|private
specifier|static
name|String
name|concatenate
parameter_list|(
name|List
name|list
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"each element of a string list must be a string; found: "
operator|+
name|o
argument_list|)
throw|;
block|}
name|buf
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|visitChildren
parameter_list|(
name|ModelHandler
name|modelHandler
parameter_list|)
block|{
for|for
control|(
name|JsonMeasure
name|jsonMeasure
range|:
name|defaultMeasures
control|)
block|{
name|jsonMeasure
operator|.
name|accept
argument_list|(
name|modelHandler
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JsonTile
name|jsonTile
range|:
name|tiles
control|)
block|{
name|jsonTile
operator|.
name|accept
argument_list|(
name|modelHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JsonLattice.java
end_comment

end_unit

