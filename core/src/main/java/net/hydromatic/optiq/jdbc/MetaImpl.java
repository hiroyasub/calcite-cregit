begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|AbstractTableQueryable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlJdbcFunctionCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Helper for implementing the {@code getXxx} methods such as  * {@link net.hydromatic.avatica.AvaticaDatabaseMetaData#getTables}.  */
end_comment

begin_class
specifier|public
class|class
name|MetaImpl
implements|implements
name|Meta
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|MAP
init|=
name|ImmutableMap
operator|.
expr|<
name|Class
decl_stmt|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
literal|"BOOLEAN"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
literal|"BOOLEAN"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
literal|"TINYINT"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
literal|"TINYINT"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
literal|"SMALLINT"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
literal|"SMALLINT"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"INTEGER"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"INTEGER"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
literal|"BIGINT"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
literal|"BIGINT"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
literal|"FLOAT"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
literal|"FLOAT"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
literal|"DOUBLE"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
literal|"DOUBLE"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|"VARCHAR"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
literal|"DATE"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Time
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|TIME
argument_list|,
literal|"TIME"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|,
literal|"TIMESTAMP"
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Driver
name|DRIVER
init|=
operator|new
name|Driver
argument_list|()
decl_stmt|;
specifier|final
name|OptiqConnectionImpl
name|connection
decl_stmt|;
specifier|public
name|MetaImpl
parameter_list|(
name|OptiqConnectionImpl
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
specifier|static
parameter_list|<
name|T
extends|extends
name|Named
parameter_list|>
name|Predicate1
argument_list|<
name|T
argument_list|>
name|namedMatcher
parameter_list|(
specifier|final
name|Pat
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|.
name|s
operator|==
literal|null
operator|||
name|pattern
operator|.
name|s
operator|.
name|equals
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
return|return
name|Functions
operator|.
name|truePredicate1
argument_list|()
return|;
block|}
specifier|final
name|Pattern
name|regex
init|=
name|likeToRegex
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
operator|new
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|T
name|v1
parameter_list|)
block|{
return|return
name|regex
operator|.
name|matcher
argument_list|(
name|v1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|static
name|Predicate1
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|(
specifier|final
name|Pat
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|.
name|s
operator|==
literal|null
operator|||
name|pattern
operator|.
name|s
operator|.
name|equals
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
return|return
name|Functions
operator|.
name|truePredicate1
argument_list|()
return|;
block|}
specifier|final
name|Pattern
name|regex
init|=
name|likeToRegex
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|v1
parameter_list|)
block|{
return|return
name|regex
operator|.
name|matcher
argument_list|(
name|v1
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/** Converts a LIKE-style pattern (where '%' represents a wild-card, escaped    * using '\') to a Java regex. */
specifier|public
specifier|static
name|Pattern
name|likeToRegex
parameter_list|(
name|Pat
name|pattern
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"^"
argument_list|)
decl_stmt|;
name|char
index|[]
name|charArray
init|=
name|pattern
operator|.
name|s
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|slash
init|=
operator|-
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|charArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|slash
operator|==
name|i
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\\'
case|:
name|slash
operator|=
name|i
expr_stmt|;
break|break;
case|case
literal|'%'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'['
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\["
argument_list|)
expr_stmt|;
break|break;
case|case
literal|']'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\]"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"$"
argument_list|)
expr_stmt|;
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|ColumnMetaData
name|columnMetaData
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|index
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|ColumnMetaData
operator|.
name|Rep
name|rep
init|=
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|VALUE_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
operator|new
name|ColumnMetaData
argument_list|(
name|index
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Primitive
operator|.
name|is
argument_list|(
name|type
argument_list|)
condition|?
name|DatabaseMetaData
operator|.
name|columnNullable
else|:
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pair
operator|.
name|left
argument_list|,
name|pair
operator|.
name|right
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|rep
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|fieldMetaData
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMetaData
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|columnMetaData
argument_list|(
name|Util
operator|.
name|camelToUpper
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|list
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/** Creates an empty result set. Useful for JDBC metadata methods that are    * not implemented or which query entities that are not supported (e.g.    * triggers in Lingual). */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ResultSet
name|createEmptyResultSet
parameter_list|(
name|OptiqConnectionImpl
name|connection
parameter_list|,
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|createResultSet
argument_list|(
name|connection
argument_list|,
name|fieldMetaData
argument_list|(
name|clazz
argument_list|)
argument_list|,
operator|new
name|RecordEnumeratorCursor
argument_list|<
name|E
argument_list|>
argument_list|(
name|Linq4j
operator|.
expr|<
name|E
operator|>
name|emptyEnumerator
argument_list|()
argument_list|,
name|clazz
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ResultSet
name|createResultSet
parameter_list|(
name|OptiqConnectionImpl
name|connection
parameter_list|,
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columnList
parameter_list|,
specifier|final
name|Cursor
name|cursor
parameter_list|)
block|{
try|try
block|{
specifier|final
name|AvaticaResultSet
name|resultSet
init|=
name|connection
operator|.
name|getFactory
argument_list|()
operator|.
name|newResultSet
argument_list|(
name|connection
operator|.
name|createStatement
argument_list|()
argument_list|,
operator|new
name|OptiqPrepare
operator|.
name|PrepareResult
argument_list|<
name|E
argument_list|>
argument_list|(
literal|""
argument_list|,
name|ImmutableList
operator|.
expr|<
name|AvaticaParameter
operator|>
name|of
argument_list|()
argument_list|,
literal|null
argument_list|,
name|columnList
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|Object
operator|.
name|class
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Cursor
name|createCursor
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|cursor
return|;
block|}
block|}
argument_list|,
name|connection
operator|.
name|getTimeZone
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|OptiqConnectionImpl
operator|.
name|TROJAN
operator|.
name|execute
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|ResultSet
name|createResultSet
parameter_list|(
name|OptiqConnectionImpl
name|connection
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|?
argument_list|>
name|enumerable
parameter_list|,
specifier|final
name|NamedFieldGetter
name|columnGetter
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|createResultSet
argument_list|(
name|connection
argument_list|,
name|columnGetter
operator|.
name|columnNames
argument_list|,
name|columnGetter
operator|.
name|cursor
argument_list|(
operator|(
operator|(
name|Enumerable
operator|)
name|enumerable
operator|)
operator|.
name|enumerator
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSqlKeywords
parameter_list|()
block|{
return|return
operator|new
name|SqlParser
argument_list|(
literal|""
argument_list|)
operator|.
name|getParserImpl
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|getJdbcKeywords
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNumericFunctions
parameter_list|()
block|{
return|return
name|SqlJdbcFunctionCall
operator|.
name|getNumericFunctions
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStringFunctions
parameter_list|()
block|{
return|return
name|SqlJdbcFunctionCall
operator|.
name|getStringFunctions
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSystemFunctions
parameter_list|()
block|{
return|return
name|SqlJdbcFunctionCall
operator|.
name|getSystemFunctions
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTimeDateFunctions
parameter_list|()
block|{
return|return
name|SqlJdbcFunctionCall
operator|.
name|getTimeDateFunctions
argument_list|()
return|;
block|}
specifier|public
name|ResultSet
name|getTables
parameter_list|(
name|String
name|catalog
parameter_list|,
specifier|final
name|Pat
name|schemaPattern
parameter_list|,
specifier|final
name|Pat
name|tableNamePattern
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|typeList
parameter_list|)
block|{
specifier|final
name|Predicate1
argument_list|<
name|MetaTable
argument_list|>
name|typeFilter
decl_stmt|;
if|if
condition|(
name|typeList
operator|==
literal|null
condition|)
block|{
name|typeFilter
operator|=
name|Functions
operator|.
name|truePredicate1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|typeFilter
operator|=
operator|new
name|Predicate1
argument_list|<
name|MetaTable
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|MetaTable
name|v1
parameter_list|)
block|{
return|return
name|typeList
operator|.
name|contains
argument_list|(
name|v1
operator|.
name|tableType
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|final
name|Predicate1
argument_list|<
name|MetaSchema
argument_list|>
name|schemaMatcher
init|=
name|namedMatcher
argument_list|(
name|schemaPattern
argument_list|)
decl_stmt|;
return|return
name|createResultSet
argument_list|(
name|connection
argument_list|,
name|schemas
argument_list|(
name|catalog
argument_list|)
operator|.
name|where
argument_list|(
name|schemaMatcher
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaSchema
argument_list|,
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|apply
parameter_list|(
name|MetaSchema
name|schema
parameter_list|)
block|{
return|return
name|tables
argument_list|(
name|schema
argument_list|,
name|matcher
argument_list|(
name|tableNamePattern
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|where
argument_list|(
name|typeFilter
argument_list|)
argument_list|,
operator|new
name|NamedFieldGetter
argument_list|(
name|MetaTable
operator|.
name|class
argument_list|,
literal|"TABLE_CAT"
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_NAME"
argument_list|,
literal|"TABLE_TYPE"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"TYPE_CAT"
argument_list|,
literal|"TYPE_SCHEM"
argument_list|,
literal|"TYPE_NAME"
argument_list|,
literal|"SELF_REFERENCING_COL_NAME"
argument_list|,
literal|"REF_GENERATION"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
specifier|final
name|Predicate1
argument_list|<
name|String
argument_list|>
name|tableNameMatcher
init|=
name|matcher
argument_list|(
name|tableNamePattern
argument_list|)
decl_stmt|;
specifier|final
name|Predicate1
argument_list|<
name|MetaSchema
argument_list|>
name|schemaMatcher
init|=
name|namedMatcher
argument_list|(
name|schemaPattern
argument_list|)
decl_stmt|;
specifier|final
name|Predicate1
argument_list|<
name|MetaColumn
argument_list|>
name|columnMatcher
init|=
name|namedMatcher
argument_list|(
name|columnNamePattern
argument_list|)
decl_stmt|;
return|return
name|createResultSet
argument_list|(
name|connection
argument_list|,
name|schemas
argument_list|(
name|catalog
argument_list|)
operator|.
name|where
argument_list|(
name|schemaMatcher
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaSchema
argument_list|,
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|apply
parameter_list|(
name|MetaSchema
name|schema
parameter_list|)
block|{
return|return
name|tables
argument_list|(
name|schema
argument_list|,
name|tableNameMatcher
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaTable
argument_list|,
name|Enumerable
argument_list|<
name|MetaColumn
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|MetaColumn
argument_list|>
name|apply
parameter_list|(
name|MetaTable
name|schema
parameter_list|)
block|{
return|return
name|columns
argument_list|(
name|schema
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|where
argument_list|(
name|columnMatcher
argument_list|)
argument_list|,
operator|new
name|NamedFieldGetter
argument_list|(
name|MetaColumn
operator|.
name|class
argument_list|,
literal|"TABLE_CAT"
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_NAME"
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
literal|"DATA_TYPE"
argument_list|,
literal|"TYPE_NAME"
argument_list|,
literal|"COLUMN_SIZE"
argument_list|,
literal|"BUFFER_LENGTH"
argument_list|,
literal|"DECIMAL_DIGITS"
argument_list|,
literal|"NUM_PREC_RADIX"
argument_list|,
literal|"NULLABLE"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"COLUMN_DEF"
argument_list|,
literal|"SQL_DATA_TYPE"
argument_list|,
literal|"SQL_DATETIME_SUB"
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
literal|"SCOPE_CATALOG"
argument_list|,
literal|"SCOPE_TABLE"
argument_list|,
literal|"SOURCE_DATA_TYPE"
argument_list|,
literal|"IS_AUTOINCREMENT"
argument_list|,
literal|"IS_GENERATEDCOLUMN"
argument_list|)
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaCatalog
argument_list|>
name|catalogs
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MetaCatalog
argument_list|(
name|connection
operator|.
name|getCatalog
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaTableType
argument_list|>
name|tableTypes
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MetaTableType
argument_list|(
literal|"TABLE"
argument_list|)
argument_list|,
operator|new
name|MetaTableType
argument_list|(
literal|"VIEW"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaSchema
argument_list|>
name|schemas
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|connection
operator|.
name|rootSchema
operator|.
name|compositeSubSchemaMap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|OptiqSchema
argument_list|,
name|MetaSchema
argument_list|>
argument_list|()
block|{
specifier|public
name|MetaSchema
name|apply
parameter_list|(
name|OptiqSchema
name|optiqSchema
parameter_list|)
block|{
return|return
operator|new
name|MetaSchema
argument_list|(
name|optiqSchema
argument_list|,
name|connection
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|optiqSchema
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|orderBy
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaSchema
argument_list|,
name|Comparable
argument_list|>
argument_list|()
block|{
specifier|public
name|Comparable
name|apply
parameter_list|(
name|MetaSchema
name|metaSchema
parameter_list|)
block|{
return|return
operator|(
name|Comparable
operator|)
name|FlatLists
operator|.
name|of
argument_list|(
name|Util
operator|.
name|first
argument_list|(
name|metaSchema
operator|.
name|tableCatalog
argument_list|,
literal|""
argument_list|)
argument_list|,
name|metaSchema
operator|.
name|tableSchem
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|tables
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
return|return
name|schemas
argument_list|(
name|catalog
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaSchema
argument_list|,
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|apply
parameter_list|(
name|MetaSchema
name|schema
parameter_list|)
block|{
return|return
name|tables
argument_list|(
name|schema
argument_list|,
name|Functions
operator|.
expr|<
name|String
operator|>
name|truePredicate1
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|tables
parameter_list|(
specifier|final
name|MetaSchema
name|schema
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|schema
operator|.
name|optiqSchema
operator|.
name|compositeTableMap
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|,
name|MetaTable
argument_list|>
argument_list|()
block|{
specifier|public
name|MetaTable
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|new
name|MetaTable
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|schema
operator|.
name|tableCatalog
argument_list|,
name|schema
operator|.
name|tableSchem
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|tables
parameter_list|(
specifier|final
name|MetaSchema
name|schema
parameter_list|,
specifier|final
name|Predicate1
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
return|return
name|tables
argument_list|(
name|schema
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|MetaTable
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|MetaTable
name|v1
parameter_list|)
block|{
return|return
name|matcher
operator|.
name|apply
argument_list|(
name|v1
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|MetaColumn
argument_list|>
name|columns
parameter_list|(
specifier|final
name|MetaTable
name|table
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|table
operator|.
name|optiqTable
operator|.
name|getRowType
argument_list|(
name|connection
operator|.
name|typeFactory
argument_list|)
decl_stmt|;
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|RelDataTypeField
argument_list|,
name|MetaColumn
argument_list|>
argument_list|()
block|{
specifier|public
name|MetaColumn
name|apply
parameter_list|(
name|RelDataTypeField
name|field
parameter_list|)
block|{
specifier|final
name|int
name|precision
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|allowsPrec
argument_list|()
operator|&&
operator|!
operator|(
name|field
operator|.
name|getType
argument_list|()
operator|instanceof
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
operator|)
condition|?
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getPrecision
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
return|return
operator|new
name|MetaColumn
argument_list|(
name|table
operator|.
name|tableCat
argument_list|,
name|table
operator|.
name|tableSchem
argument_list|,
name|table
operator|.
name|tableName
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getJdbcOrdinal
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getFullTypeString
argument_list|()
argument_list|,
name|precision
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|allowsScale
argument_list|()
condition|?
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getScale
argument_list|()
else|:
literal|null
argument_list|,
literal|10
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
name|DatabaseMetaData
operator|.
name|columnNullable
else|:
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|,
name|precision
argument_list|,
name|field
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
literal|"YES"
else|:
literal|"NO"
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getSchemas
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|)
block|{
specifier|final
name|Predicate1
argument_list|<
name|MetaSchema
argument_list|>
name|schemaMatcher
init|=
name|namedMatcher
argument_list|(
name|schemaPattern
argument_list|)
decl_stmt|;
return|return
name|createResultSet
argument_list|(
name|connection
argument_list|,
name|schemas
argument_list|(
name|catalog
argument_list|)
operator|.
name|where
argument_list|(
name|schemaMatcher
argument_list|)
argument_list|,
operator|new
name|NamedFieldGetter
argument_list|(
name|MetaSchema
operator|.
name|class
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_CATALOG"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getCatalogs
parameter_list|()
block|{
return|return
name|createResultSet
argument_list|(
name|connection
argument_list|,
name|catalogs
argument_list|()
argument_list|,
operator|new
name|NamedFieldGetter
argument_list|(
name|MetaCatalog
operator|.
name|class
argument_list|,
literal|"TABLE_CATALOG"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getTableTypes
parameter_list|()
block|{
return|return
name|createResultSet
argument_list|(
name|connection
argument_list|,
name|tableTypes
argument_list|()
argument_list|,
operator|new
name|NamedFieldGetter
argument_list|(
name|MetaTableType
operator|.
name|class
argument_list|,
literal|"TABLE_TYPE"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getProcedures
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|procedureNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaProcedure
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getProcedureColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|procedureNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaProcedureColumn
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getColumnPrivileges
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaColumnPrivilege
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getTablePrivileges
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaTablePrivilege
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getBestRowIdentifier
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|int
name|scope
parameter_list|,
name|boolean
name|nullable
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaBestRowIdentifier
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getVersionColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaVersionColumn
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getPrimaryKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaPrimaryKey
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getImportedKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaImportedKey
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getExportedKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaExportedKey
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getCrossReference
parameter_list|(
name|String
name|parentCatalog
parameter_list|,
name|String
name|parentSchema
parameter_list|,
name|String
name|parentTable
parameter_list|,
name|String
name|foreignCatalog
parameter_list|,
name|String
name|foreignSchema
parameter_list|,
name|String
name|foreignTable
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaCrossReference
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getTypeInfo
parameter_list|()
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaTypeInfo
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getIndexInfo
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|unique
parameter_list|,
name|boolean
name|approximate
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaIndexInfo
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getUDTs
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|,
name|int
index|[]
name|types
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaUdt
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getSuperTypes
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaSuperType
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getSuperTables
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaSuperTable
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getAttributes
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|typeNamePattern
parameter_list|,
name|Pat
name|attributeNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaAttribute
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getClientInfoProperties
parameter_list|()
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaClientInfoProperty
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getFunctions
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|functionNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaFunction
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getFunctionColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|functionNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaFunctionColumn
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getPseudoColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
return|return
name|createEmptyResultSet
argument_list|(
name|connection
argument_list|,
name|MetaPseudoColumn
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|Cursor
name|createCursor
parameter_list|(
name|AvaticaResultSet
name|resultSet_
parameter_list|)
block|{
name|OptiqResultSet
name|resultSet
init|=
operator|(
name|OptiqResultSet
operator|)
name|resultSet_
decl_stmt|;
specifier|final
name|DataContext
name|dataContext
init|=
name|connection
operator|.
name|createDataContext
argument_list|(
name|OptiqConnectionImpl
operator|.
name|TROJAN
operator|.
name|getParameterValues
argument_list|(
name|resultSet
operator|.
name|getStatement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|OptiqPrepare
operator|.
name|PrepareResult
name|prepareResult
init|=
name|resultSet
operator|.
name|getPrepareResult
argument_list|()
decl_stmt|;
return|return
name|prepareResult
operator|.
name|createCursor
argument_list|(
name|dataContext
argument_list|)
return|;
block|}
specifier|public
name|AvaticaPrepareResult
name|prepare
parameter_list|(
name|AvaticaStatement
name|statement_
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|OptiqStatement
name|statement
init|=
operator|(
name|OptiqStatement
operator|)
name|statement_
decl_stmt|;
name|int
name|maxRowCount
init|=
name|statement
operator|.
name|getMaxRows
argument_list|()
decl_stmt|;
return|return
name|connection
operator|.
name|parseQuery
argument_list|(
name|sql
argument_list|,
name|statement
operator|.
name|createPrepareContext
argument_list|()
argument_list|,
name|maxRowCount
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
name|maxRowCount
argument_list|)
return|;
block|}
comment|/** A trojan-horse method, subject to change without notice. */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|DataContext
name|createDataContext
parameter_list|(
name|OptiqConnection
name|connection
parameter_list|)
block|{
return|return
operator|(
operator|(
name|OptiqConnectionImpl
operator|)
name|connection
operator|)
operator|.
name|createDataContext
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/** A trojan-horse method, subject to change without notice. */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|OptiqConnection
name|connect
parameter_list|(
name|OptiqRootSchema
name|schema
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|DRIVER
operator|.
name|connect
argument_list|(
name|schema
argument_list|,
name|typeFactory
argument_list|)
return|;
block|}
interface|interface
name|Named
block|{
name|String
name|getName
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|MetaColumn
implements|implements
name|Named
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|int
name|columnSize
decl_stmt|;
specifier|public
specifier|final
name|String
name|bufferLength
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|decimalDigits
decl_stmt|;
specifier|public
specifier|final
name|int
name|numPrecRadix
decl_stmt|;
specifier|public
specifier|final
name|int
name|nullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnDef
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|sqlDataType
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|sqlDatetimeSub
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|int
name|charOctetLength
decl_stmt|;
specifier|public
specifier|final
name|int
name|ordinalPosition
decl_stmt|;
specifier|public
specifier|final
name|String
name|isNullable
decl_stmt|;
specifier|public
specifier|final
name|String
name|scopeCatalog
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|scopeTable
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|sourceDataType
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|isAutoincrement
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|isGeneratedcolumn
init|=
literal|null
decl_stmt|;
name|MetaColumn
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|int
name|dataType
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|columnSize
parameter_list|,
name|Integer
name|decimalDigits
parameter_list|,
name|int
name|numPrecRadix
parameter_list|,
name|int
name|nullable
parameter_list|,
name|int
name|charOctetLength
parameter_list|,
name|int
name|ordinalPosition
parameter_list|,
name|String
name|isNullable
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|columnSize
operator|=
name|columnSize
expr_stmt|;
name|this
operator|.
name|decimalDigits
operator|=
name|decimalDigits
expr_stmt|;
name|this
operator|.
name|numPrecRadix
operator|=
name|numPrecRadix
expr_stmt|;
name|this
operator|.
name|nullable
operator|=
name|nullable
expr_stmt|;
name|this
operator|.
name|charOctetLength
operator|=
name|charOctetLength
expr_stmt|;
name|this
operator|.
name|ordinalPosition
operator|=
name|ordinalPosition
expr_stmt|;
name|this
operator|.
name|isNullable
operator|=
name|isNullable
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|columnName
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MetaTable
implements|implements
name|Named
block|{
specifier|private
specifier|final
name|Table
name|optiqTable
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableType
decl_stmt|;
specifier|public
specifier|final
name|String
name|remarks
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeCat
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeSchem
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeName
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|selfReferencingColName
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
name|String
name|refGeneration
init|=
literal|null
decl_stmt|;
specifier|public
name|MetaTable
parameter_list|(
name|Table
name|optiqTable
parameter_list|,
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|optiqTable
operator|=
name|optiqTable
expr_stmt|;
assert|assert
name|optiqTable
operator|!=
literal|null
assert|;
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|tableType
operator|=
name|optiqTable
operator|.
name|getJdbcTableType
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MetaSchema
implements|implements
name|Named
block|{
specifier|private
specifier|final
name|OptiqSchema
name|optiqSchema
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableCatalog
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
specifier|public
name|MetaSchema
parameter_list|(
name|OptiqSchema
name|optiqSchema
parameter_list|,
name|String
name|tableCatalog
parameter_list|,
name|String
name|tableSchem
parameter_list|)
block|{
name|this
operator|.
name|optiqSchema
operator|=
name|optiqSchema
expr_stmt|;
name|this
operator|.
name|tableCatalog
operator|=
name|tableCatalog
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|tableSchem
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MetaCatalog
implements|implements
name|Named
block|{
specifier|public
specifier|final
name|String
name|tableCatalog
decl_stmt|;
specifier|public
name|MetaCatalog
parameter_list|(
name|String
name|tableCatalog
parameter_list|)
block|{
name|this
operator|.
name|tableCatalog
operator|=
name|tableCatalog
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|tableCatalog
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MetaTableType
block|{
specifier|public
specifier|final
name|String
name|tableType
decl_stmt|;
specifier|public
name|MetaTableType
parameter_list|(
name|String
name|tableType
parameter_list|)
block|{
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MetaProcedure
block|{   }
specifier|public
specifier|static
class|class
name|MetaProcedureColumn
block|{   }
specifier|public
specifier|static
class|class
name|MetaColumnPrivilege
block|{   }
specifier|public
specifier|static
class|class
name|MetaTablePrivilege
block|{   }
specifier|public
specifier|static
class|class
name|MetaBestRowIdentifier
block|{   }
specifier|public
specifier|static
class|class
name|MetaVersionColumn
block|{
specifier|public
specifier|final
name|short
name|scope
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|int
name|dataType
decl_stmt|;
specifier|public
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|public
specifier|final
name|int
name|columnSize
decl_stmt|;
specifier|public
specifier|final
name|int
name|bufferLength
decl_stmt|;
specifier|public
specifier|final
name|short
name|decimalDigits
decl_stmt|;
specifier|public
specifier|final
name|short
name|pseudoColumn
decl_stmt|;
name|MetaVersionColumn
parameter_list|(
name|short
name|scope
parameter_list|,
name|String
name|columnName
parameter_list|,
name|int
name|dataType
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|columnSize
parameter_list|,
name|int
name|bufferLength
parameter_list|,
name|short
name|decimalDigits
parameter_list|,
name|short
name|pseudoColumn
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|columnSize
operator|=
name|columnSize
expr_stmt|;
name|this
operator|.
name|bufferLength
operator|=
name|bufferLength
expr_stmt|;
name|this
operator|.
name|decimalDigits
operator|=
name|decimalDigits
expr_stmt|;
name|this
operator|.
name|pseudoColumn
operator|=
name|pseudoColumn
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MetaPrimaryKey
block|{
specifier|public
specifier|final
name|String
name|tableCat
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableSchem
decl_stmt|;
specifier|public
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|public
specifier|final
name|short
name|keySeq
decl_stmt|;
specifier|public
specifier|final
name|String
name|pkName
decl_stmt|;
name|MetaPrimaryKey
parameter_list|(
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|short
name|keySeq
parameter_list|,
name|String
name|pkName
parameter_list|)
block|{
name|this
operator|.
name|tableCat
operator|=
name|tableCat
expr_stmt|;
name|this
operator|.
name|tableSchem
operator|=
name|tableSchem
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|keySeq
operator|=
name|keySeq
expr_stmt|;
name|this
operator|.
name|pkName
operator|=
name|pkName
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MetaImportedKey
block|{   }
specifier|public
specifier|static
class|class
name|MetaExportedKey
block|{   }
specifier|public
specifier|static
class|class
name|MetaCrossReference
block|{   }
specifier|public
specifier|static
class|class
name|MetaTypeInfo
block|{   }
specifier|public
specifier|static
class|class
name|MetaIndexInfo
block|{   }
specifier|public
specifier|static
class|class
name|MetaUdt
block|{   }
specifier|public
specifier|static
class|class
name|MetaSuperType
block|{   }
specifier|public
specifier|static
class|class
name|MetaAttribute
block|{   }
specifier|public
specifier|static
class|class
name|MetaClientInfoProperty
block|{   }
specifier|public
specifier|static
class|class
name|MetaFunction
block|{   }
specifier|public
specifier|static
class|class
name|MetaFunctionColumn
block|{   }
specifier|public
specifier|static
class|class
name|MetaPseudoColumn
block|{   }
specifier|public
specifier|static
class|class
name|MetaSuperTable
block|{   }
specifier|private
specifier|static
class|class
name|NamedFieldGetter
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMetaData
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|NamedFieldGetter
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|int
name|index
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|Util
operator|.
name|toCamelCase
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|field
decl_stmt|;
try|try
block|{
name|field
operator|=
name|clazz
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|columnNames
operator|.
name|add
argument_list|(
name|columnMetaData
argument_list|(
name|name
argument_list|,
name|index
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|get
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
try|try
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Cursor
name|cursor
parameter_list|(
specifier|final
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|enumerator
parameter_list|)
block|{
return|return
operator|new
name|AbstractCursor
argument_list|()
block|{
specifier|protected
name|Getter
name|createGetter
parameter_list|(
specifier|final
name|int
name|ordinal
parameter_list|)
block|{
return|return
operator|new
name|Getter
argument_list|()
block|{
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|,
name|ordinal
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|wasNull
parameter_list|()
block|{
return|return
name|getObject
argument_list|()
operator|==
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|public
name|boolean
name|next
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|moveNext
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|MetadataTable
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractQueryableTable
block|{
specifier|public
name|MetadataTable
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
operator|(
operator|(
name|JavaTypeFactory
operator|)
name|typeFactory
operator|)
operator|.
name|createType
argument_list|(
name|elementType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|SYSTEM_TABLE
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|E
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
operator|(
name|Class
argument_list|<
name|E
argument_list|>
operator|)
name|elementType
return|;
block|}
specifier|protected
specifier|abstract
name|Enumerator
argument_list|<
name|E
argument_list|>
name|enumerator
parameter_list|(
name|MetaImpl
name|connection
parameter_list|)
function_decl|;
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|AbstractTableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|(
name|Enumerator
argument_list|<
name|T
argument_list|>
operator|)
name|MetadataTable
operator|.
name|this
operator|.
name|enumerator
argument_list|(
operator|(
operator|(
name|OptiqConnectionImpl
operator|)
name|queryProvider
operator|)
operator|.
name|meta
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MetaImpl.java
end_comment

end_unit

