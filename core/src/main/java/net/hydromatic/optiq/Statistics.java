begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility functions regarding {@link Statistic}.  */
end_comment

begin_class
specifier|public
class|class
name|Statistics
block|{
specifier|private
name|Statistics
parameter_list|()
block|{
block|}
comment|/** Returns a {@link Statistic} that knows nothing about a table. */
specifier|public
specifier|static
specifier|final
name|Statistic
name|UNKNOWN
init|=
operator|new
name|Statistic
argument_list|()
block|{
specifier|public
name|Double
name|getRowCount
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isKey
parameter_list|(
name|BitSet
name|columns
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
comment|/** Returns a statistic with a given row count and set of unique keys. */
specifier|public
specifier|static
name|Statistic
name|of
parameter_list|(
specifier|final
name|double
name|rowCount
parameter_list|,
specifier|final
name|List
argument_list|<
name|BitSet
argument_list|>
name|keys
parameter_list|)
block|{
return|return
operator|new
name|Statistic
argument_list|()
block|{
specifier|public
name|Double
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
specifier|public
name|boolean
name|isKey
parameter_list|(
name|BitSet
name|columns
parameter_list|)
block|{
for|for
control|(
name|BitSet
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|BitSets
operator|.
name|contains
argument_list|(
name|columns
argument_list|,
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End Statistics.java
end_comment

end_unit

