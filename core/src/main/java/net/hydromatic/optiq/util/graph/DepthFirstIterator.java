begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Iterates over the vertices in a directed graph in depth-first order.  *  * @param<V> Vertex type  * @param<E> Edge type  */
end_comment

begin_class
specifier|public
class|class
name|DepthFirstIterator
parameter_list|<
name|V
parameter_list|,
name|E
extends|extends
name|DefaultEdge
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
decl_stmt|;
specifier|public
name|DepthFirstIterator
parameter_list|(
name|DirectedGraph
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|,
name|V
name|start
parameter_list|)
block|{
comment|// Dumb implementation that builds the list first.
name|List
argument_list|<
name|V
argument_list|>
name|list
init|=
name|buildList
argument_list|(
name|graph
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|iterator
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|E
extends|extends
name|DefaultEdge
parameter_list|>
name|Iterable
argument_list|<
name|V
argument_list|>
name|of
parameter_list|(
specifier|final
name|DirectedGraph
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|,
specifier|final
name|V
name|start
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|DepthFirstIterator
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
argument_list|(
name|graph
argument_list|,
name|start
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|List
argument_list|<
name|V
argument_list|>
name|buildList
parameter_list|(
name|DirectedGraph
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|,
name|V
name|start
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|V
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
name|buildListRecurse
argument_list|(
name|list
argument_list|,
operator|new
name|HashSet
argument_list|<
name|V
argument_list|>
argument_list|()
argument_list|,
name|graph
argument_list|,
name|start
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|private
name|void
name|buildListRecurse
parameter_list|(
name|List
argument_list|<
name|V
argument_list|>
name|list
parameter_list|,
name|Set
argument_list|<
name|V
argument_list|>
name|activeVertices
parameter_list|,
name|DirectedGraph
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|,
name|V
name|start
parameter_list|)
block|{
if|if
condition|(
operator|!
name|activeVertices
operator|.
name|add
argument_list|(
name|start
argument_list|)
condition|)
block|{
return|return;
block|}
name|list
operator|.
name|add
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|edges
init|=
name|graph
operator|.
name|getOutwardEdges
argument_list|(
name|start
argument_list|)
decl_stmt|;
for|for
control|(
name|E
name|edge
range|:
name|edges
control|)
block|{
comment|//noinspection unchecked
name|buildListRecurse
argument_list|(
name|list
argument_list|,
name|activeVertices
argument_list|,
name|graph
argument_list|,
operator|(
name|V
operator|)
name|edge
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
name|activeVertices
operator|.
name|remove
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|V
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

begin_comment
comment|// End DepthFirstIterator.java
end_comment

end_unit

