begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|IntList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility functions for {@link BitSet}.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BitSets
block|{
specifier|private
name|BitSets
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"no instances!"
argument_list|)
throw|;
block|}
comment|/**    * Returns true if all bits set in the second parameter are also set in the    * first. In other words, whether x is a super-set of y.    *    * @param set0 Containing bitmap    * @param set1 Bitmap to be checked    *    * @return Whether all bits in set1 are set in set0    */
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|BitSet
name|set0
parameter_list|,
name|BitSet
name|set1
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|set1
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|set1
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|set0
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns an iterable over the bits in a bitmap that are set to '1'.    *    *<p>This allows you to iterate over a bit set using a 'foreach' construct.    * For instance:    *    *<blockquote><code>    * BitSet bitSet;<br/>    * for (int i : Util.toIter(bitSet)) {<br/>    *&nbsp;&nbsp;print(i);<br/>    * }<br/></code></blockquote>    *    * @param bitSet Bit set    * @return Iterable    */
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|toIter
parameter_list|(
specifier|final
name|BitSet
name|bitSet
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
name|int
name|i
init|=
name|bitSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|>=
literal|0
return|;
block|}
specifier|public
name|Integer
name|next
parameter_list|()
block|{
name|int
name|prev
init|=
name|i
decl_stmt|;
name|i
operator|=
name|bitSet
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|prev
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**    * Converts a bitset to a list.    *    *<p>The list is mutable, and future changes to the list do not affect the    * contents of the bit set.    *    * @param bitSet Bit set    * @return List of set bits    */
specifier|public
specifier|static
name|IntList
name|toList
parameter_list|(
specifier|final
name|BitSet
name|bitSet
parameter_list|)
block|{
specifier|final
name|IntList
name|list
init|=
operator|new
name|IntList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|bitSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|bitSet
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Converts a bitset to an array.    *    * @param bitSet Bit set    * @return List of set bits    */
specifier|public
specifier|static
name|Integer
index|[]
name|toArray
parameter_list|(
specifier|final
name|BitSet
name|bitSet
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|toList
argument_list|(
name|bitSet
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Creates a bitset with given bits set.    *    *<p>For example, {@code of(0, 3)} returns a bit set with bits {0, 3}    * set.    *    * @param bits Array of bits to set    * @return Bit set    */
specifier|public
specifier|static
name|BitSet
name|of
parameter_list|(
name|int
modifier|...
name|bits
parameter_list|)
block|{
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bit
range|:
name|bits
control|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|bit
argument_list|)
expr_stmt|;
block|}
return|return
name|bitSet
return|;
block|}
comment|/**    * Creates a bitset with given bits set.    *    *<p>For example, {@code of(new Integer[] {0, 3})} returns a bit set    * with bits {0, 3} set.    *    * @param bits Array of bits to set    * @return Bit set    */
specifier|public
specifier|static
name|BitSet
name|of
parameter_list|(
name|Integer
index|[]
name|bits
parameter_list|)
block|{
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bit
range|:
name|bits
control|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|bit
argument_list|)
expr_stmt|;
block|}
return|return
name|bitSet
return|;
block|}
comment|/**    * Creates a bitset with given bits set.    *    *<p>For example, {@code of(Arrays.asList(0, 3)) } returns a bit set    * with bits {0, 3} set.    *    * @param bits Collection of bits to set    * @return Bit set    */
specifier|public
specifier|static
name|BitSet
name|of
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
name|bits
parameter_list|)
block|{
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Number
name|bit
range|:
name|bits
control|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|bit
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bitSet
return|;
block|}
comment|/**    * Creates a bitset with bits from {@code fromIndex} (inclusive) to    * specified {@code toIndex} (exclusive) set to {@code true}.    *    *<p>For example, {@code range(0, 3)} returns a bit set with bits    * {0, 1, 2} set.    *    * @param fromIndex Index of the first bit to be set.    * @param toIndex   Index after the last bit to be set.    * @return Bit set    */
specifier|public
specifier|static
name|BitSet
name|range
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|toIndex
operator|>
name|fromIndex
condition|)
block|{
comment|// Avoid http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6222207
comment|// "BitSet internal invariants may be violated"
name|bitSet
operator|.
name|set
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|bitSet
return|;
block|}
specifier|public
specifier|static
name|BitSet
name|range
parameter_list|(
name|int
name|toIndex
parameter_list|)
block|{
return|return
name|range
argument_list|(
literal|0
argument_list|,
name|toIndex
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End BitSets.java
end_comment

end_unit

