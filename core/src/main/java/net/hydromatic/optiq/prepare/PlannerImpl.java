begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|MutableSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|tools
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|SqlToRelConverter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/** Implementation of {@link net.hydromatic.optiq.tools.Planner}. */
end_comment

begin_class
specifier|public
class|class
name|PlannerImpl
implements|implements
name|Planner
block|{
specifier|private
specifier|final
name|Function1
argument_list|<
name|MutableSchema
argument_list|,
name|Schema
argument_list|>
name|schemaFactory
decl_stmt|;
specifier|private
specifier|final
name|SqlOperatorTable
name|operatorTable
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|RuleSet
argument_list|>
name|ruleSets
decl_stmt|;
specifier|private
name|State
name|state
decl_stmt|;
comment|// set in STATE_1_RESET
specifier|private
name|boolean
name|open
decl_stmt|;
comment|// set in STATE_2_READY
specifier|private
name|MutableSchema
name|rootSchema
decl_stmt|;
specifier|private
name|Schema
name|defaultSchema
decl_stmt|;
specifier|private
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
name|RelOptPlanner
name|planner
decl_stmt|;
comment|// set in STATE_4_VALIDATE
specifier|private
name|OptiqSqlValidator
name|validator
decl_stmt|;
specifier|private
name|SqlNode
name|validatedSqlNode
decl_stmt|;
comment|// set in STATE_5_CONVERT
specifier|private
name|SqlToRelConverter
name|sqlToRelConverter
decl_stmt|;
specifier|private
name|RelNode
name|rel
decl_stmt|;
specifier|public
name|PlannerImpl
parameter_list|(
name|Function1
argument_list|<
name|MutableSchema
argument_list|,
name|Schema
argument_list|>
name|schemaFactory
parameter_list|,
name|SqlOperatorTable
name|operatorTable
parameter_list|,
name|ImmutableList
argument_list|<
name|RuleSet
argument_list|>
name|ruleSets
parameter_list|)
block|{
name|this
operator|.
name|schemaFactory
operator|=
name|schemaFactory
expr_stmt|;
name|this
operator|.
name|operatorTable
operator|=
name|operatorTable
expr_stmt|;
name|this
operator|.
name|ruleSets
operator|=
name|ruleSets
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|STATE_0_CLOSED
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/** Makes sure that the state is at least the given state. */
specifier|private
name|void
name|ensure
parameter_list|(
name|State
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|this
operator|.
name|state
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|state
operator|.
name|ordinal
argument_list|()
operator|<
name|this
operator|.
name|state
operator|.
name|ordinal
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot move to "
operator|+
name|state
operator|+
literal|" from "
operator|+
name|this
operator|.
name|state
argument_list|)
throw|;
block|}
name|state
operator|.
name|from
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelTraitSet
name|getEmptyTraitSet
parameter_list|()
block|{
return|return
name|planner
operator|.
name|emptyTraitSet
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|open
operator|=
literal|false
expr_stmt|;
name|rootSchema
operator|=
literal|null
expr_stmt|;
name|defaultSchema
operator|=
literal|null
expr_stmt|;
name|typeFactory
operator|=
literal|null
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|STATE_0_CLOSED
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|ensure
argument_list|(
name|State
operator|.
name|STATE_0_CLOSED
argument_list|)
expr_stmt|;
name|open
operator|=
literal|true
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|STATE_1_RESET
expr_stmt|;
block|}
specifier|private
name|void
name|ready
parameter_list|()
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|STATE_0_CLOSED
case|:
name|reset
argument_list|()
expr_stmt|;
block|}
name|ensure
argument_list|(
name|State
operator|.
name|STATE_1_RESET
argument_list|)
expr_stmt|;
name|Frameworks
operator|.
name|withPlanner
argument_list|(
operator|new
name|Frameworks
operator|.
name|PlannerAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptSchema
name|relOptSchema
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|rootSchema
operator|=
operator|(
name|MutableSchema
operator|)
name|schema
expr_stmt|;
name|defaultSchema
operator|=
name|schemaFactory
operator|.
name|apply
argument_list|(
name|rootSchema
argument_list|)
expr_stmt|;
name|typeFactory
operator|=
operator|(
name|JavaTypeFactory
operator|)
name|cluster
operator|.
name|getTypeFactory
argument_list|()
expr_stmt|;
name|planner
operator|=
name|cluster
operator|.
name|getPlanner
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|STATE_2_READY
expr_stmt|;
block|}
specifier|public
name|SqlNode
name|parse
parameter_list|(
specifier|final
name|String
name|sql
parameter_list|)
throws|throws
name|SqlParseException
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|STATE_0_CLOSED
case|:
case|case
name|STATE_1_RESET
case|:
name|ready
argument_list|()
expr_stmt|;
block|}
name|ensure
argument_list|(
name|State
operator|.
name|STATE_2_READY
argument_list|)
expr_stmt|;
name|SqlParser
name|parser
init|=
operator|new
name|SqlParser
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode
init|=
name|parser
operator|.
name|parseStmt
argument_list|()
decl_stmt|;
name|state
operator|=
name|State
operator|.
name|STATE_3_PARSED
expr_stmt|;
return|return
name|sqlNode
return|;
block|}
specifier|public
name|SqlNode
name|validate
parameter_list|(
name|SqlNode
name|sqlNode
parameter_list|)
throws|throws
name|ValidationException
block|{
name|ensure
argument_list|(
name|State
operator|.
name|STATE_3_PARSED
argument_list|)
expr_stmt|;
name|this
operator|.
name|validator
operator|=
operator|new
name|OptiqSqlValidator
argument_list|(
name|operatorTable
argument_list|,
name|createCatalogReader
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
try|try
block|{
name|validatedSqlNode
operator|=
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|state
operator|=
name|State
operator|.
name|STATE_4_VALIDATED
expr_stmt|;
return|return
name|validatedSqlNode
return|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|SqlNode
name|sql
parameter_list|)
throws|throws
name|RelConversionException
block|{
name|ensure
argument_list|(
name|State
operator|.
name|STATE_4_VALIDATED
argument_list|)
expr_stmt|;
assert|assert
name|validatedSqlNode
operator|!=
literal|null
assert|;
name|this
operator|.
name|sqlToRelConverter
operator|=
operator|new
name|SqlToRelConverter
argument_list|(
literal|null
argument_list|,
name|validator
argument_list|,
name|createCatalogReader
argument_list|()
argument_list|,
name|planner
argument_list|,
name|createRexBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlToRelConverter
operator|.
name|setTrimUnusedFields
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rel
operator|=
name|sqlToRelConverter
operator|.
name|convertQuery
argument_list|(
name|validatedSqlNode
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|STATE_5_CONVERTED
expr_stmt|;
return|return
name|rel
return|;
block|}
comment|// OptiqCatalogReader is stateless; no need to store one
specifier|private
name|OptiqCatalogReader
name|createCatalogReader
parameter_list|()
block|{
return|return
operator|new
name|OptiqCatalogReader
argument_list|(
name|rootSchema
argument_list|,
name|Schemas
operator|.
name|path
argument_list|(
name|defaultSchema
argument_list|,
literal|null
argument_list|)
argument_list|,
name|typeFactory
argument_list|)
return|;
block|}
comment|// RexBuilder is stateless; no need to store one
specifier|private
name|RexBuilder
name|createRexBuilder
parameter_list|()
block|{
return|return
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|transform
parameter_list|(
name|int
name|ruleSetIndex
parameter_list|,
name|RelTraitSet
name|requiredOutputTraits
parameter_list|,
name|RelNode
name|rel
parameter_list|)
throws|throws
name|RelConversionException
block|{
name|ensure
argument_list|(
name|State
operator|.
name|STATE_5_CONVERTED
argument_list|)
expr_stmt|;
name|RuleSet
name|ruleSet
init|=
name|ruleSets
operator|.
name|get
argument_list|(
name|ruleSetIndex
argument_list|)
decl_stmt|;
name|planner
operator|.
name|clearRules
argument_list|()
expr_stmt|;
for|for
control|(
name|RelOptRule
name|rule
range|:
name|ruleSet
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|equals
argument_list|(
name|requiredOutputTraits
argument_list|)
condition|)
block|{
name|rel
operator|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|rel
argument_list|,
name|requiredOutputTraits
argument_list|)
expr_stmt|;
block|}
name|planner
operator|.
name|setRoot
argument_list|(
name|rel
argument_list|)
expr_stmt|;
return|return
name|planner
operator|.
name|findBestExp
argument_list|()
return|;
block|}
specifier|private
enum|enum
name|State
block|{
name|STATE_0_CLOSED
block|{
annotation|@
name|Override
name|void
name|from
parameter_list|(
name|PlannerImpl
name|planner
parameter_list|)
block|{
name|planner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|,
name|STATE_1_RESET
block|{
annotation|@
name|Override
name|void
name|from
parameter_list|(
name|PlannerImpl
name|planner
parameter_list|)
block|{
name|planner
operator|.
name|ensure
argument_list|(
name|STATE_0_CLOSED
argument_list|)
expr_stmt|;
name|planner
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|,
name|STATE_2_READY
block|{
annotation|@
name|Override
name|void
name|from
parameter_list|(
name|PlannerImpl
name|planner
parameter_list|)
block|{
name|STATE_1_RESET
operator|.
name|from
argument_list|(
name|planner
argument_list|)
expr_stmt|;
name|planner
operator|.
name|ready
argument_list|()
expr_stmt|;
block|}
block|}
block|,
name|STATE_3_PARSED
block|,
name|STATE_4_VALIDATED
block|,
name|STATE_5_CONVERTED
block|;
comment|/** Moves planner's state to this state. This must be a higher state. */
name|void
name|from
parameter_list|(
name|PlannerImpl
name|planner
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot move from "
operator|+
name|planner
operator|.
name|state
operator|+
literal|" to "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End PlannerImpl.java
end_comment

end_unit

