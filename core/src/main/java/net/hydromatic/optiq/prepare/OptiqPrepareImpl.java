begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|AvaticaParameter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|Helper
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|config
operator|.
name|OptiqConnectionConfig
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqPrepare
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|server
operator|.
name|OptiqServerStatement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|impl
operator|.
name|SqlParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|ChainedSqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|SqlToRelConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|StandardConvertletTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|CompileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|CompilerFactoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|IClassBodyEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|ICompilerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Shit just got real.  *  *<p>This class is public so that projects that create their own JDBC driver  * and server can fine-tune preferences. However, this class and its methods are  * subject to change without notice.</p>  */
end_comment

begin_class
specifier|public
class|class
name|OptiqPrepareImpl
implements|implements
name|OptiqPrepare
block|{
specifier|public
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"optiq.debug"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|COMMUTE
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"optiq.enable.join.commute"
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Whether to enable the collation trait. Some extra optimizations are    * possible if enabled, but queries should work either way. At some point    * this will become a preference, or we will run multiple phases: first    * disabled, then enabled. */
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLE_COLLATION_TRAIT
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SIMPLE_SQLS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"SELECT 1"
argument_list|,
literal|"select 1"
argument_list|,
literal|"SELECT 1 FROM DUAL"
argument_list|,
literal|"select 1 from dual"
argument_list|,
literal|"values 1"
argument_list|,
literal|"VALUES 1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|RelOptRule
argument_list|>
name|DEFAULT_RULES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_JOIN_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_FILTER_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_AGGREGATE_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_LIMIT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_COLLECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_UNCOLLECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_UNION_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_INTERSECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_MINUS_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_TABLE_MODIFICATION_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_VALUES_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_WINDOW_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_ONE_ROW_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_EMPTY_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_TABLE_FUNCTION_RULE
argument_list|,
name|TableAccessRule
operator|.
name|INSTANCE
argument_list|,
name|COMMUTE
condition|?
name|CommutativeJoinRule
operator|.
name|INSTANCE
else|:
name|MergeProjectRule
operator|.
name|INSTANCE
argument_list|,
name|PushFilterPastProjectRule
operator|.
name|INSTANCE
argument_list|,
name|PushFilterPastJoinRule
operator|.
name|FILTER_ON_JOIN
argument_list|,
name|RemoveDistinctAggregateRule
operator|.
name|INSTANCE
argument_list|,
name|ReduceAggregatesRule
operator|.
name|INSTANCE
argument_list|,
name|SwapJoinRule
operator|.
name|INSTANCE
argument_list|,
name|PushJoinThroughJoinRule
operator|.
name|RIGHT
argument_list|,
name|PushJoinThroughJoinRule
operator|.
name|LEFT
argument_list|,
name|PushSortPastProjectRule
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|RelOptRule
argument_list|>
name|CONSTANT_REDUCTION_RULES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|ReduceExpressionsRule
operator|.
name|PROJECT_INSTANCE
argument_list|,
name|ReduceExpressionsRule
operator|.
name|FILTER_INSTANCE
argument_list|,
name|ReduceExpressionsRule
operator|.
name|CALC_INSTANCE
argument_list|,
name|ReduceExpressionsRule
operator|.
name|JOIN_INSTANCE
argument_list|,
name|ReduceValuesRule
operator|.
name|FILTER_INSTANCE
argument_list|,
name|ReduceValuesRule
operator|.
name|PROJECT_FILTER_INSTANCE
argument_list|,
name|ReduceValuesRule
operator|.
name|PROJECT_INSTANCE
argument_list|)
decl_stmt|;
specifier|public
name|OptiqPrepareImpl
parameter_list|()
block|{
block|}
specifier|public
name|ParseResult
name|parse
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|OptiqCatalogReader
name|catalogReader
init|=
operator|new
name|OptiqCatalogReader
argument_list|(
name|context
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|context
operator|.
name|config
argument_list|()
operator|.
name|caseSensitive
argument_list|()
argument_list|,
name|context
operator|.
name|getDefaultSchemaPath
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
name|SqlParser
name|parser
init|=
name|SqlParser
operator|.
name|create
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parser
operator|.
name|parseStmt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parse failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|SqlValidator
name|validator
init|=
operator|new
name|OptiqSqlValidator
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|catalogReader
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode1
init|=
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
decl_stmt|;
return|return
operator|new
name|ParseResult
argument_list|(
name|this
argument_list|,
name|validator
argument_list|,
name|sql
argument_list|,
name|sqlNode1
argument_list|,
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|sqlNode1
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a collection of planner factories.    *    *<p>The collection must have at least one factory, and each factory must    * create a planner. If the collection has more than one planner, Optiq will    * try each planner in turn.</p>    *    *<p>One of the things you can do with this mechanism is to try a simpler,    * faster, planner with a smaller rule set first, then fall back to a more    * complex planner for complex and costly queries.</p>    *    *<p>The default implementation returns a factory that calls    * {@link #createPlanner(net.hydromatic.optiq.jdbc.OptiqPrepare.Context)}.</p>    */
specifier|protected
name|List
argument_list|<
name|Function1
argument_list|<
name|Context
argument_list|,
name|RelOptPlanner
argument_list|>
argument_list|>
name|createPlannerFactories
parameter_list|()
block|{
return|return
name|Collections
operator|.
expr|<
name|Function1
argument_list|<
name|Context
argument_list|,
name|RelOptPlanner
argument_list|>
operator|>
name|singletonList
argument_list|(
operator|new
name|Function1
argument_list|<
name|Context
argument_list|,
name|RelOptPlanner
argument_list|>
argument_list|()
block|{
specifier|public
name|RelOptPlanner
name|apply
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|createPlanner
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Creates a query planner and initializes it with a default set of    * rules. */
specifier|protected
name|RelOptPlanner
name|createPlanner
parameter_list|(
name|OptiqPrepare
operator|.
name|Context
name|prepareContext
parameter_list|)
block|{
return|return
name|createPlanner
argument_list|(
name|prepareContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Creates a query planner and initializes it with a default set of    * rules. */
specifier|protected
name|RelOptPlanner
name|createPlanner
parameter_list|(
name|OptiqPrepare
operator|.
name|Context
name|prepareContext
parameter_list|,
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|Context
name|externalContext
parameter_list|,
name|RelOptCostFactory
name|costFactory
parameter_list|)
block|{
specifier|final
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|(
name|costFactory
argument_list|,
name|externalContext
argument_list|)
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|ENABLE_COLLATION_TRAIT
condition|)
block|{
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|registerAbstractRelationalRules
argument_list|()
expr_stmt|;
block|}
name|RelOptUtil
operator|.
name|registerAbstractRels
argument_list|(
name|planner
argument_list|)
expr_stmt|;
for|for
control|(
name|RelOptRule
name|rule
range|:
name|DEFAULT_RULES
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
comment|// Change the below to enable constant-reduction.
if|if
condition|(
literal|false
condition|)
block|{
for|for
control|(
name|RelOptRule
name|rule
range|:
name|CONSTANT_REDUCTION_RULES
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|SparkHandler
name|spark
init|=
name|prepareContext
operator|.
name|spark
argument_list|()
decl_stmt|;
if|if
condition|(
name|spark
operator|.
name|enabled
argument_list|()
condition|)
block|{
name|spark
operator|.
name|registerRules
argument_list|(
operator|new
name|SparkHandler
operator|.
name|RuleSetBuilder
argument_list|()
block|{
specifier|public
name|void
name|addRule
parameter_list|(
name|RelOptRule
name|rule
parameter_list|)
block|{
comment|// TODO:
block|}
specifier|public
name|void
name|removeRule
parameter_list|(
name|RelOptRule
name|rule
parameter_list|)
block|{
comment|// TODO:
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|planner
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|prepareQueryable
parameter_list|(
name|Context
name|context
parameter_list|,
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|)
block|{
return|return
name|prepare_
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|queryable
argument_list|,
name|queryable
operator|.
name|getElementType
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|prepareSql
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|,
name|Queryable
argument_list|<
name|T
argument_list|>
name|expression
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
block|{
return|return
name|prepare_
argument_list|(
name|context
argument_list|,
name|sql
argument_list|,
name|expression
argument_list|,
name|elementType
argument_list|,
name|maxRowCount
argument_list|)
return|;
block|}
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|prepare_
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|,
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
block|{
if|if
condition|(
name|SIMPLE_SQLS
operator|.
name|contains
argument_list|(
name|sql
argument_list|)
condition|)
block|{
return|return
name|simplePrepare
argument_list|(
name|context
argument_list|,
name|sql
argument_list|)
return|;
block|}
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|OptiqCatalogReader
name|catalogReader
init|=
operator|new
name|OptiqCatalogReader
argument_list|(
name|context
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|context
operator|.
name|config
argument_list|()
operator|.
name|caseSensitive
argument_list|()
argument_list|,
name|context
operator|.
name|getDefaultSchemaPath
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Function1
argument_list|<
name|Context
argument_list|,
name|RelOptPlanner
argument_list|>
argument_list|>
name|plannerFactories
init|=
name|createPlannerFactories
argument_list|()
decl_stmt|;
if|if
condition|(
name|plannerFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"no planner factories"
argument_list|)
throw|;
block|}
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
for|for
control|(
name|Function1
argument_list|<
name|Context
argument_list|,
name|RelOptPlanner
argument_list|>
name|plannerFactory
range|:
name|plannerFactories
control|)
block|{
specifier|final
name|RelOptPlanner
name|planner
init|=
name|plannerFactory
operator|.
name|apply
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|planner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"factory returned null planner"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|prepare2_
argument_list|(
name|context
argument_list|,
name|sql
argument_list|,
name|queryable
argument_list|,
name|elementType
argument_list|,
name|maxRowCount
argument_list|,
name|catalogReader
argument_list|,
name|planner
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RelOptPlanner
operator|.
name|CannotPlanException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
throw|throw
name|exception
throw|;
block|}
comment|/** Quickly prepares a simple SQL statement, circumventing the usual    * preparation process. */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|simplePrepare
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|x
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"EXPR$0"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|(
name|List
operator|)
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|origin
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|origins
init|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|x
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|origin
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrepareResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|sql
argument_list|,
name|ImmutableList
operator|.
expr|<
name|AvaticaParameter
operator|>
name|of
argument_list|()
argument_list|,
name|x
argument_list|,
name|getColumnMetaDataList
argument_list|(
name|typeFactory
argument_list|,
name|x
argument_list|,
name|x
argument_list|,
name|origins
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|Bindable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|T
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
parameter_list|<
name|T
parameter_list|>
name|PrepareResult
argument_list|<
name|T
argument_list|>
name|prepare2_
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|sql
parameter_list|,
name|Queryable
argument_list|<
name|T
argument_list|>
name|queryable
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|int
name|maxRowCount
parameter_list|,
name|OptiqCatalogReader
name|catalogReader
parameter_list|,
name|RelOptPlanner
name|planner
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|context
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
operator|.
name|Prefer
name|prefer
decl_stmt|;
if|if
condition|(
name|elementType
operator|==
name|Object
index|[]
operator|.
name|class
condition|)
block|{
name|prefer
operator|=
name|EnumerableRel
operator|.
name|Prefer
operator|.
name|ARRAY
expr_stmt|;
block|}
else|else
block|{
name|prefer
operator|=
name|EnumerableRel
operator|.
name|Prefer
operator|.
name|CUSTOM
expr_stmt|;
block|}
specifier|final
name|OptiqPreparingStmt
name|preparingStmt
init|=
operator|new
name|OptiqPreparingStmt
argument_list|(
name|context
argument_list|,
name|catalogReader
argument_list|,
name|typeFactory
argument_list|,
name|context
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|prefer
argument_list|,
name|planner
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|x
decl_stmt|;
specifier|final
name|Prepare
operator|.
name|PreparedResult
name|preparedResult
decl_stmt|;
if|if
condition|(
name|sql
operator|!=
literal|null
condition|)
block|{
assert|assert
name|queryable
operator|==
literal|null
assert|;
specifier|final
name|OptiqConnectionConfig
name|config
init|=
name|context
operator|.
name|config
argument_list|()
decl_stmt|;
name|SqlParser
name|parser
init|=
name|SqlParser
operator|.
name|create
argument_list|(
name|SqlParserImpl
operator|.
name|FACTORY
argument_list|,
name|sql
argument_list|,
name|config
operator|.
name|quoting
argument_list|()
argument_list|,
name|config
operator|.
name|unquotedCasing
argument_list|()
argument_list|,
name|config
operator|.
name|quotedCasing
argument_list|()
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parser
operator|.
name|parseStmt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parse failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Hook
operator|.
name|PARSE_TREE
operator|.
name|run
argument_list|(
operator|new
name|Object
index|[]
block|{
name|sql
block|,
name|sqlNode
block|}
argument_list|)
expr_stmt|;
specifier|final
name|OptiqSchema
name|rootSchema
init|=
name|context
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
specifier|final
name|ChainedSqlOperatorTable
name|opTab
init|=
operator|new
name|ChainedSqlOperatorTable
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|catalogReader
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidator
name|validator
init|=
operator|new
name|OptiqSqlValidator
argument_list|(
name|opTab
argument_list|,
name|catalogReader
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
name|validator
operator|.
name|setIdentifierExpansion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Prepare
operator|.
name|Materialization
argument_list|>
name|materializations
init|=
name|config
operator|.
name|materializationsEnabled
argument_list|()
condition|?
name|MaterializationService
operator|.
name|instance
argument_list|()
operator|.
name|query
argument_list|(
name|rootSchema
argument_list|)
else|:
name|ImmutableList
operator|.
expr|<
name|Prepare
operator|.
name|Materialization
operator|>
name|of
argument_list|()
decl_stmt|;
for|for
control|(
name|Prepare
operator|.
name|Materialization
name|materialization
range|:
name|materializations
control|)
block|{
name|populateMaterializations
argument_list|(
name|context
argument_list|,
name|planner
argument_list|,
name|materialization
argument_list|)
expr_stmt|;
block|}
name|preparedResult
operator|=
name|preparingStmt
operator|.
name|prepareSql
argument_list|(
name|sqlNode
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|validator
argument_list|,
literal|true
argument_list|,
name|materializations
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|sqlNode
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INSERT
case|:
case|case
name|EXPLAIN
case|:
comment|// FIXME: getValidatedNodeType is wrong for DML
name|x
operator|=
name|RelOptUtil
operator|.
name|createDmlRowType
argument_list|(
name|sqlNode
operator|.
name|getKind
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
break|break;
default|default:
name|x
operator|=
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|sqlNode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|queryable
operator|!=
literal|null
assert|;
name|x
operator|=
name|context
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createType
argument_list|(
name|elementType
argument_list|)
expr_stmt|;
name|preparedResult
operator|=
name|preparingStmt
operator|.
name|prepareQueryable
argument_list|(
name|queryable
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|AvaticaParameter
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|AvaticaParameter
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|parameterRowType
init|=
name|preparedResult
operator|.
name|getParameterRowType
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|parameterRowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|RelDataType
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
operator|new
name|AvaticaParameter
argument_list|(
literal|false
argument_list|,
name|getPrecision
argument_list|(
name|type
argument_list|)
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|,
name|getTypeOrdinal
argument_list|(
name|type
argument_list|)
argument_list|,
name|getTypeName
argument_list|(
name|type
argument_list|)
argument_list|,
name|getClassName
argument_list|(
name|type
argument_list|)
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RelDataType
name|jdbcType
init|=
name|makeStruct
argument_list|(
name|typeFactory
argument_list|,
name|x
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|originList
init|=
name|preparedResult
operator|.
name|getFieldOrigins
argument_list|()
decl_stmt|;
specifier|final
name|ColumnMetaData
operator|.
name|StructType
name|structType
init|=
name|getColumnMetaDataList
argument_list|(
name|typeFactory
argument_list|,
name|x
argument_list|,
name|jdbcType
argument_list|,
name|originList
argument_list|)
decl_stmt|;
name|Class
name|resultClazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|preparedResult
operator|instanceof
name|Typed
condition|)
block|{
name|resultClazz
operator|=
operator|(
name|Class
operator|)
operator|(
operator|(
name|Typed
operator|)
name|preparedResult
operator|)
operator|.
name|getElementType
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|PrepareResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|sql
argument_list|,
name|parameters
argument_list|,
name|jdbcType
argument_list|,
name|structType
argument_list|,
name|maxRowCount
argument_list|,
name|preparedResult
operator|.
name|getBindable
argument_list|()
argument_list|,
name|resultClazz
argument_list|)
return|;
block|}
specifier|private
name|ColumnMetaData
operator|.
name|StructType
name|getColumnMetaDataList
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|x
parameter_list|,
name|RelDataType
name|jdbcType
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|originList
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMetaData
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelDataTypeField
argument_list|>
name|pair
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|jdbcType
operator|.
name|getFieldList
argument_list|()
argument_list|)
control|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|pair
operator|.
name|e
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|fieldType
init|=
name|x
operator|.
name|isStruct
argument_list|()
condition|?
name|x
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|pair
operator|.
name|i
argument_list|)
operator|.
name|getType
argument_list|()
else|:
name|type
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|metaData
argument_list|(
name|typeFactory
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|,
name|fieldType
argument_list|,
name|originList
operator|.
name|get
argument_list|(
name|pair
operator|.
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ColumnMetaData
operator|.
name|struct
argument_list|(
name|columns
argument_list|)
return|;
block|}
specifier|private
name|ColumnMetaData
name|metaData
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|RelDataType
name|fieldType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|origins
parameter_list|)
block|{
return|return
operator|new
name|ColumnMetaData
argument_list|(
name|ordinal
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|type
operator|.
name|isNullable
argument_list|()
condition|?
name|DatabaseMetaData
operator|.
name|columnNullable
else|:
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|,
literal|true
argument_list|,
name|type
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|fieldName
argument_list|,
name|origin
argument_list|(
name|origins
argument_list|,
literal|0
argument_list|)
argument_list|,
name|origin
argument_list|(
name|origins
argument_list|,
literal|2
argument_list|)
argument_list|,
name|getPrecision
argument_list|(
name|type
argument_list|)
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|,
name|origin
argument_list|(
name|origins
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|avaticaType
argument_list|(
name|typeFactory
argument_list|,
name|type
argument_list|,
name|fieldType
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|getClassName
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|ColumnMetaData
operator|.
name|AvaticaType
name|avaticaType
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|RelDataType
name|fieldType
parameter_list|)
block|{
specifier|final
name|Type
name|clazz
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|Util
operator|.
name|first
argument_list|(
name|fieldType
argument_list|,
name|type
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ColumnMetaData
operator|.
name|Rep
name|rep
init|=
name|ColumnMetaData
operator|.
name|Rep
operator|.
name|of
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
assert|assert
name|rep
operator|!=
literal|null
assert|;
specifier|final
name|String
name|typeName
init|=
name|getTypeName
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getComponentType
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ColumnMetaData
operator|.
name|AvaticaType
name|componentType
init|=
name|avaticaType
argument_list|(
name|typeFactory
argument_list|,
name|type
operator|.
name|getComponentType
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|ColumnMetaData
operator|.
name|array
argument_list|(
name|componentType
argument_list|,
name|typeName
argument_list|,
name|rep
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ColumnMetaData
operator|.
name|scalar
argument_list|(
name|getTypeOrdinal
argument_list|(
name|type
argument_list|)
argument_list|,
name|typeName
argument_list|,
name|rep
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|origin
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|origins
parameter_list|,
name|int
name|offsetFromEnd
parameter_list|)
block|{
return|return
name|origins
operator|==
literal|null
operator|||
name|offsetFromEnd
operator|>=
name|origins
operator|.
name|size
argument_list|()
condition|?
literal|null
else|:
name|origins
operator|.
name|get
argument_list|(
name|origins
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|-
name|offsetFromEnd
argument_list|)
return|;
block|}
specifier|private
name|int
name|getTypeOrdinal
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getJdbcOrdinal
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getClassName
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|int
name|getScale
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getScale
argument_list|()
operator|==
name|RelDataType
operator|.
name|SCALE_NOT_SPECIFIED
condition|?
literal|0
else|:
name|type
operator|.
name|getScale
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|int
name|getPrecision
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getPrecision
argument_list|()
operator|==
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
condition|?
literal|0
else|:
name|type
operator|.
name|getPrecision
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getTypeName
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
name|SqlTypeName
name|sqlTypeName
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
condition|)
block|{
comment|// We'd rather print "INTEGER" than "JavaType(int)".
return|return
name|sqlTypeName
operator|.
name|getName
argument_list|()
return|;
block|}
switch|switch
condition|(
name|sqlTypeName
condition|)
block|{
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_DAY_TIME
case|:
comment|// e.g. "INTERVAL_MONTH" or "INTERVAL_YEAR_MONTH"
return|return
literal|"INTERVAL_"
operator|+
name|type
operator|.
name|getIntervalQualifier
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
return|;
default|default:
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
comment|// e.g. "VARCHAR(10)", "INTEGER ARRAY"
block|}
block|}
specifier|protected
name|void
name|populateMaterializations
parameter_list|(
name|Context
name|context
parameter_list|,
name|RelOptPlanner
name|planner
parameter_list|,
name|Prepare
operator|.
name|Materialization
name|materialization
parameter_list|)
block|{
comment|// REVIEW: initialize queryRel and tableRel inside MaterializationService,
comment|// not here?
try|try
block|{
specifier|final
name|OptiqSchema
name|schema
init|=
name|materialization
operator|.
name|materializedTable
operator|.
name|schema
decl_stmt|;
name|OptiqCatalogReader
name|catalogReader
init|=
operator|new
name|OptiqCatalogReader
argument_list|(
name|schema
operator|.
name|root
argument_list|()
argument_list|,
name|context
operator|.
name|config
argument_list|()
operator|.
name|caseSensitive
argument_list|()
argument_list|,
name|Util
operator|.
name|skipLast
argument_list|(
name|materialization
operator|.
name|materializedTable
operator|.
name|path
argument_list|()
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|OptiqMaterializer
name|materializer
init|=
operator|new
name|OptiqMaterializer
argument_list|(
name|context
argument_list|,
name|catalogReader
argument_list|,
name|schema
argument_list|,
name|planner
argument_list|)
decl_stmt|;
name|materializer
operator|.
name|populate
argument_list|(
name|materialization
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"While populating materialization "
operator|+
name|materialization
operator|.
name|materializedTable
operator|.
name|path
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|RelDataType
name|makeStruct
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isStruct
argument_list|()
condition|)
block|{
return|return
name|type
return|;
block|}
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"$0"
argument_list|,
name|type
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Executes a prepare action. */
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|perform
parameter_list|(
name|OptiqServerStatement
name|statement
parameter_list|,
name|Frameworks
operator|.
name|PrepareAction
argument_list|<
name|R
argument_list|>
name|action
parameter_list|)
block|{
specifier|final
name|OptiqPrepare
operator|.
name|Context
name|prepareContext
init|=
name|statement
operator|.
name|createPrepareContext
argument_list|()
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|prepareContext
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|OptiqCatalogReader
name|catalogReader
init|=
operator|new
name|OptiqCatalogReader
argument_list|(
name|prepareContext
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|prepareContext
operator|.
name|config
argument_list|()
operator|.
name|caseSensitive
argument_list|()
argument_list|,
name|prepareContext
operator|.
name|getDefaultSchemaPath
argument_list|()
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RelOptPlanner
name|planner
init|=
name|createPlanner
argument_list|(
name|prepareContext
argument_list|,
name|action
operator|.
name|getConfig
argument_list|()
operator|.
name|getContext
argument_list|()
argument_list|,
name|action
operator|.
name|getConfig
argument_list|()
operator|.
name|getCostFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelOptQuery
name|query
init|=
operator|new
name|RelOptQuery
argument_list|(
name|planner
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|query
operator|.
name|createCluster
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
return|return
name|action
operator|.
name|apply
argument_list|(
name|cluster
argument_list|,
name|catalogReader
argument_list|,
name|prepareContext
operator|.
name|getRootSchema
argument_list|()
operator|.
name|plus
argument_list|()
argument_list|,
name|statement
argument_list|)
return|;
block|}
specifier|static
class|class
name|OptiqPreparingStmt
extends|extends
name|Prepare
implements|implements
name|RelOptTable
operator|.
name|ViewExpander
block|{
specifier|private
specifier|final
name|RelOptPlanner
name|planner
decl_stmt|;
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|protected
specifier|final
name|OptiqSchema
name|schema
decl_stmt|;
specifier|protected
specifier|final
name|RelDataTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|EnumerableRel
operator|.
name|Prefer
name|prefer
decl_stmt|;
specifier|private
name|int
name|expansionDepth
decl_stmt|;
specifier|private
name|SqlValidator
name|sqlValidator
decl_stmt|;
specifier|public
name|OptiqPreparingStmt
parameter_list|(
name|Context
name|context
parameter_list|,
name|CatalogReader
name|catalogReader
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|OptiqSchema
name|schema
parameter_list|,
name|EnumerableRel
operator|.
name|Prefer
name|prefer
parameter_list|,
name|RelOptPlanner
name|planner
parameter_list|,
name|Convention
name|resultConvention
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|catalogReader
argument_list|,
name|resultConvention
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|prefer
operator|=
name|prefer
expr_stmt|;
name|this
operator|.
name|planner
operator|=
name|planner
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|rexBuilder
operator|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|Class
name|runtimeContextClass
parameter_list|)
block|{
block|}
specifier|public
name|PreparedResult
name|prepareQueryable
parameter_list|(
name|Queryable
name|queryable
parameter_list|,
name|RelDataType
name|resultType
parameter_list|)
block|{
name|queryString
operator|=
literal|null
expr_stmt|;
name|Class
name|runtimeContextClass
init|=
name|Object
operator|.
name|class
decl_stmt|;
name|init
argument_list|(
name|runtimeContextClass
argument_list|)
expr_stmt|;
specifier|final
name|RelOptQuery
name|query
init|=
operator|new
name|RelOptQuery
argument_list|(
name|planner
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|query
operator|.
name|createCluster
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|RelNode
name|rootRel
init|=
operator|new
name|LixToRelTranslator
argument_list|(
name|cluster
argument_list|,
name|OptiqPreparingStmt
operator|.
name|this
argument_list|)
operator|.
name|translate
argument_list|(
name|queryable
argument_list|)
decl_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end sql2rel"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|jdbcType
init|=
name|makeStruct
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|resultType
argument_list|)
decl_stmt|;
name|fieldOrigins
operator|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|jdbcType
operator|.
name|getFieldCount
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|parameterRowType
operator|=
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Structured type flattening, view expansion, and plugging in
comment|// physical storage.
name|rootRel
operator|=
name|flattenTypes
argument_list|(
name|rootRel
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Trim unused fields.
name|rootRel
operator|=
name|trimUnusedFields
argument_list|(
name|rootRel
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Materialization
argument_list|>
name|materializations
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
name|rootRel
operator|=
name|optimize
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|,
name|materializations
argument_list|)
expr_stmt|;
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end optimization"
argument_list|)
expr_stmt|;
block|}
return|return
name|implement
argument_list|(
name|resultType
argument_list|,
name|rootRel
argument_list|,
name|SqlKind
operator|.
name|SELECT
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SqlToRelConverter
name|getSqlToRelConverter
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|CatalogReader
name|catalogReader
parameter_list|)
block|{
name|SqlToRelConverter
name|sqlToRelConverter
init|=
operator|new
name|SqlToRelConverter
argument_list|(
name|this
argument_list|,
name|validator
argument_list|,
name|catalogReader
argument_list|,
name|planner
argument_list|,
name|rexBuilder
argument_list|,
name|StandardConvertletTable
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|sqlToRelConverter
operator|.
name|setTrimUnusedFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|sqlToRelConverter
return|;
block|}
annotation|@
name|Override
specifier|protected
name|EnumerableRelImplementor
name|getRelImplementor
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
return|return
operator|new
name|EnumerableRelImplementor
argument_list|(
name|rexBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldAlwaysWriteJavaFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|flattenTypes
parameter_list|(
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|restructure
parameter_list|)
block|{
specifier|final
name|SparkHandler
name|spark
init|=
name|context
operator|.
name|spark
argument_list|()
decl_stmt|;
if|if
condition|(
name|spark
operator|.
name|enabled
argument_list|()
condition|)
block|{
return|return
name|spark
operator|.
name|flattenTypes
argument_list|(
name|planner
argument_list|,
name|rootRel
argument_list|,
name|restructure
argument_list|)
return|;
block|}
return|return
name|rootRel
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelNode
name|decorrelate
parameter_list|(
name|SqlToRelConverter
name|sqlToRelConverter
parameter_list|,
name|SqlNode
name|query
parameter_list|,
name|RelNode
name|rootRel
parameter_list|)
block|{
return|return
name|sqlToRelConverter
operator|.
name|decorrelate
argument_list|(
name|query
argument_list|,
name|rootRel
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|expandView
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|String
name|queryString
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|)
block|{
name|expansionDepth
operator|++
expr_stmt|;
name|SqlParser
name|parser
init|=
name|SqlParser
operator|.
name|create
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parser
operator|.
name|parseQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"parse failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// View may have different schema path than current connection.
specifier|final
name|CatalogReader
name|catalogReader
init|=
name|this
operator|.
name|catalogReader
operator|.
name|withSchemaPath
argument_list|(
name|schemaPath
argument_list|)
decl_stmt|;
name|SqlValidator
name|validator
init|=
name|createSqlValidator
argument_list|(
name|catalogReader
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode1
init|=
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
decl_stmt|;
name|SqlToRelConverter
name|sqlToRelConverter
init|=
name|getSqlToRelConverter
argument_list|(
name|validator
argument_list|,
name|catalogReader
argument_list|)
decl_stmt|;
name|RelNode
name|relNode
init|=
name|sqlToRelConverter
operator|.
name|convertQuery
argument_list|(
name|sqlNode1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
operator|--
name|expansionDepth
expr_stmt|;
return|return
name|relNode
return|;
block|}
specifier|private
name|SqlValidatorImpl
name|createSqlValidator
parameter_list|(
name|CatalogReader
name|catalogReader
parameter_list|)
block|{
return|return
operator|new
name|SqlValidatorImpl
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|catalogReader
argument_list|,
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|SqlConformance
operator|.
name|DEFAULT
argument_list|)
block|{ }
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SqlValidator
name|getSqlValidator
parameter_list|()
block|{
if|if
condition|(
name|sqlValidator
operator|==
literal|null
condition|)
block|{
name|sqlValidator
operator|=
name|createSqlValidator
argument_list|(
name|catalogReader
argument_list|)
expr_stmt|;
block|}
return|return
name|sqlValidator
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PreparedResult
name|createPreparedExplanation
parameter_list|(
name|RelDataType
name|resultType
parameter_list|,
name|RelDataType
name|parameterRowType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|explainAsXml
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|)
block|{
return|return
operator|new
name|OptiqPreparedExplain
argument_list|(
name|resultType
argument_list|,
name|parameterRowType
argument_list|,
name|rootRel
argument_list|,
name|explainAsXml
argument_list|,
name|detailLevel
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PreparedResult
name|implement
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|SqlKind
name|sqlKind
parameter_list|)
block|{
name|RelDataType
name|resultType
init|=
name|rootRel
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|boolean
name|isDml
init|=
name|sqlKind
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|DML
argument_list|)
decl_stmt|;
name|EnumerableRelImplementor
name|relImplementor
init|=
name|getRelImplementor
argument_list|(
name|rootRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|ClassDeclaration
name|expr
init|=
name|relImplementor
operator|.
name|implementRoot
argument_list|(
operator|(
name|EnumerableRel
operator|)
name|rootRel
argument_list|,
name|prefer
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|Expressions
operator|.
name|toString
argument_list|(
name|expr
operator|.
name|memberDeclarations
argument_list|,
literal|"\n"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|debugCode
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|Hook
operator|.
name|JAVA_PLAN
operator|.
name|run
argument_list|(
name|s
argument_list|)
expr_stmt|;
specifier|final
name|Bindable
name|bindable
decl_stmt|;
try|try
block|{
name|bindable
operator|=
name|getBindable
argument_list|(
name|expr
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|Helper
operator|.
name|INSTANCE
operator|.
name|wrap
argument_list|(
literal|"Error while compiling generated Java code:\n"
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end codegen"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timingTracer
operator|!=
literal|null
condition|)
block|{
name|timingTracer
operator|.
name|traceTime
argument_list|(
literal|"end compilation"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PreparedResultImpl
argument_list|(
name|resultType
argument_list|,
name|parameterRowType
argument_list|,
name|fieldOrigins
argument_list|,
name|rootRel
argument_list|,
name|mapTableModOp
argument_list|(
name|isDml
argument_list|,
name|sqlKind
argument_list|)
argument_list|,
name|isDml
argument_list|)
block|{
specifier|public
name|String
name|getCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Bindable
name|getBindable
parameter_list|()
block|{
return|return
name|bindable
return|;
block|}
specifier|public
name|Type
name|getElementType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Typed
operator|)
name|bindable
operator|)
operator|.
name|getElementType
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**      * Prints the given code with line numbering.      */
specifier|private
name|void
name|debugCode
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|String
name|code
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|StringReader
name|sr
init|=
operator|new
name|StringReader
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|sr
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|String
name|number
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|length
argument_list|()
operator|<
literal|4
condition|)
block|{
name|Spaces
operator|.
name|append
argument_list|(
name|out
argument_list|,
literal|4
operator|-
name|number
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" */ "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// not possible
block|}
block|}
specifier|private
name|Bindable
name|getBindable
parameter_list|(
name|ClassDeclaration
name|expr
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|CompileException
throws|,
name|IOException
block|{
if|if
condition|(
name|context
operator|.
name|spark
argument_list|()
operator|.
name|enabled
argument_list|()
condition|)
block|{
return|return
name|context
operator|.
name|spark
argument_list|()
operator|.
name|compile
argument_list|(
name|expr
argument_list|,
name|s
argument_list|)
return|;
block|}
name|ICompilerFactory
name|compilerFactory
decl_stmt|;
try|try
block|{
name|compilerFactory
operator|=
name|CompilerFactoryFactory
operator|.
name|getDefaultCompilerFactory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate java compiler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|IClassBodyEvaluator
name|cbe
init|=
name|compilerFactory
operator|.
name|newClassBodyEvaluator
argument_list|()
decl_stmt|;
name|cbe
operator|.
name|setClassName
argument_list|(
name|expr
operator|.
name|name
argument_list|)
expr_stmt|;
name|cbe
operator|.
name|setExtendedClass
argument_list|(
name|Utilities
operator|.
name|class
argument_list|)
expr_stmt|;
name|cbe
operator|.
name|setImplementedInterfaces
argument_list|(
operator|new
name|Class
index|[]
block|{
name|Bindable
operator|.
name|class
block|,
name|Typed
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|cbe
operator|.
name|setParentClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
comment|// Add line numbers to the generated janino class
name|cbe
operator|.
name|setDebuggingInformation
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Bindable
operator|)
name|cbe
operator|.
name|createInstance
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|OptiqPreparedExplain
extends|extends
name|Prepare
operator|.
name|PreparedExplain
block|{
specifier|public
name|OptiqPreparedExplain
parameter_list|(
name|RelDataType
name|resultType
parameter_list|,
name|RelDataType
name|parameterRowType
parameter_list|,
name|RelNode
name|rootRel
parameter_list|,
name|boolean
name|explainAsXml
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|)
block|{
name|super
argument_list|(
name|resultType
argument_list|,
name|parameterRowType
argument_list|,
name|rootRel
argument_list|,
name|explainAsXml
argument_list|,
name|detailLevel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Bindable
name|getBindable
parameter_list|()
block|{
specifier|final
name|String
name|explanation
init|=
name|getCode
argument_list|()
decl_stmt|;
return|return
operator|new
name|Bindable
argument_list|()
block|{
specifier|public
name|Enumerable
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|singletonEnumerable
argument_list|(
name|explanation
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
interface|interface
name|ScalarTranslator
block|{
name|RexNode
name|toRex
parameter_list|(
name|BlockStatement
name|statement
parameter_list|)
function_decl|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|toRexList
parameter_list|(
name|BlockStatement
name|statement
parameter_list|)
function_decl|;
name|RexNode
name|toRex
parameter_list|(
name|Expression
name|expression
parameter_list|)
function_decl|;
name|ScalarTranslator
name|bind
parameter_list|(
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
function_decl|;
block|}
specifier|static
class|class
name|EmptyScalarTranslator
implements|implements
name|ScalarTranslator
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|public
name|EmptyScalarTranslator
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
block|}
specifier|public
specifier|static
name|ScalarTranslator
name|empty
parameter_list|(
name|RexBuilder
name|builder
parameter_list|)
block|{
return|return
operator|new
name|EmptyScalarTranslator
argument_list|(
name|builder
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|toRexList
parameter_list|(
name|BlockStatement
name|statement
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|simpleList
init|=
name|simpleList
argument_list|(
name|statement
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|expression1
range|:
name|simpleList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toRex
argument_list|(
name|expression1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|RexNode
name|toRex
parameter_list|(
name|BlockStatement
name|statement
parameter_list|)
block|{
return|return
name|toRex
argument_list|(
name|Blocks
operator|.
name|simple
argument_list|(
name|statement
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Expression
argument_list|>
name|simpleList
parameter_list|(
name|BlockStatement
name|statement
parameter_list|)
block|{
name|Expression
name|simple
init|=
name|Blocks
operator|.
name|simple
argument_list|(
name|statement
argument_list|)
decl_stmt|;
if|if
condition|(
name|simple
operator|instanceof
name|NewExpression
condition|)
block|{
name|NewExpression
name|newExpression
init|=
operator|(
name|NewExpression
operator|)
name|simple
decl_stmt|;
return|return
name|newExpression
operator|.
name|arguments
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|simple
argument_list|)
return|;
block|}
block|}
specifier|public
name|RexNode
name|toRex
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
switch|switch
condition|(
name|expression
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|MemberAccess
case|:
comment|// Case-sensitive name match because name was previously resolved.
return|return
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|toRex
argument_list|(
operator|(
operator|(
name|MemberExpression
operator|)
name|expression
operator|)
operator|.
name|expression
argument_list|)
argument_list|,
operator|(
operator|(
name|MemberExpression
operator|)
name|expression
operator|)
operator|.
name|field
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
case|case
name|GreaterThan
case|:
return|return
name|binary
argument_list|(
name|expression
argument_list|,
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|)
return|;
case|case
name|LessThan
case|:
return|return
name|binary
argument_list|(
name|expression
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|)
return|;
case|case
name|Parameter
case|:
return|return
name|parameter
argument_list|(
operator|(
name|ParameterExpression
operator|)
name|expression
argument_list|)
return|;
case|case
name|Call
case|:
name|MethodCallExpression
name|call
init|=
operator|(
name|MethodCallExpression
operator|)
name|expression
decl_stmt|;
name|SqlOperator
name|operator
init|=
name|RexToLixTranslator
operator|.
name|JAVA_TO_SQL_METHOD_MAP
operator|.
name|get
argument_list|(
name|call
operator|.
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|!=
literal|null
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|operator
argument_list|,
name|toRex
argument_list|(
name|Expressions
operator|.
expr|<
name|Expression
operator|>
name|list
argument_list|()
operator|.
name|appendIfNotNull
argument_list|(
name|call
operator|.
name|targetExpression
argument_list|)
operator|.
name|appendAll
argument_list|(
name|call
operator|.
name|expressions
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could translate call to method "
operator|+
name|call
operator|.
name|method
argument_list|)
throw|;
case|case
name|Constant
case|:
specifier|final
name|ConstantExpression
name|constant
init|=
operator|(
name|ConstantExpression
operator|)
name|expression
decl_stmt|;
name|Object
name|value
init|=
name|constant
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|Number
name|number
init|=
operator|(
name|Number
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Double
operator|||
name|value
operator|instanceof
name|Float
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeApproxLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|(
name|BigDecimal
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|constant
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unknown expression type "
operator|+
name|expression
operator|.
name|getNodeType
argument_list|()
operator|+
literal|" "
operator|+
name|expression
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RexNode
name|binary
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|SqlBinaryOperator
name|op
parameter_list|)
block|{
name|BinaryExpression
name|call
init|=
operator|(
name|BinaryExpression
operator|)
name|expression
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|,
name|toRex
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|call
operator|.
name|expression0
argument_list|,
name|call
operator|.
name|expression1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|RexNode
argument_list|>
name|toRex
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|expression
range|:
name|expressions
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toRex
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|ScalarTranslator
name|bind
parameter_list|(
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|new
name|LambdaScalarTranslator
argument_list|(
name|rexBuilder
argument_list|,
name|parameterList
argument_list|,
name|values
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|parameter
parameter_list|(
name|ParameterExpression
name|param
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LambdaScalarTranslator
extends|extends
name|EmptyScalarTranslator
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
decl_stmt|;
specifier|public
name|LambdaScalarTranslator
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameterList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
parameter_list|)
block|{
name|super
argument_list|(
name|rexBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameterList
operator|=
name|parameterList
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
specifier|public
name|RexNode
name|parameter
parameter_list|(
name|ParameterExpression
name|param
parameter_list|)
block|{
name|int
name|i
init|=
name|parameterList
operator|.
name|indexOf
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End OptiqPrepareImpl.java
end_comment

end_unit

