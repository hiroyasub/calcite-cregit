begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMoniker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link net.hydromatic.optiq.prepare.Prepare.CatalogReader}.  */
end_comment

begin_class
class|class
name|OptiqCatalogReader
implements|implements
name|Prepare
operator|.
name|CatalogReader
block|{
specifier|final
name|Schema
name|rootSchema
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|defaultSchema
decl_stmt|;
specifier|public
name|OptiqCatalogReader
parameter_list|(
name|Schema
name|rootSchema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|defaultSchema
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
assert|assert
name|rootSchema
operator|!=
name|defaultSchema
assert|;
name|this
operator|.
name|rootSchema
operator|=
name|rootSchema
expr_stmt|;
name|this
operator|.
name|defaultSchema
operator|=
name|defaultSchema
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
block|}
specifier|public
name|OptiqCatalogReader
name|withSchemaPath
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|)
block|{
return|return
operator|new
name|OptiqCatalogReader
argument_list|(
name|rootSchema
argument_list|,
name|schemaPath
argument_list|,
name|typeFactory
argument_list|)
return|;
block|}
specifier|public
name|OptiqPrepareImpl
operator|.
name|RelOptTableImpl
name|getTable
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
comment|// First look in the default schema, if any.
if|if
condition|(
name|defaultSchema
operator|!=
literal|null
condition|)
block|{
name|OptiqPrepareImpl
operator|.
name|RelOptTableImpl
name|table
init|=
name|getTableFrom
argument_list|(
name|names
argument_list|,
name|defaultSchema
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
return|;
block|}
block|}
comment|// If not found, look in the root schema
return|return
name|getTableFrom
argument_list|(
name|names
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|OptiqPrepareImpl
operator|.
name|RelOptTableImpl
name|getTableFrom
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaNames
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pairs
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
name|rootSchema
decl_stmt|;
for|for
control|(
name|String
name|schemaName
range|:
name|schemaNames
control|)
block|{
name|schema
operator|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|schemaName
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Schema
name|subSchema
init|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|subSchema
operator|!=
literal|null
condition|)
block|{
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|name
argument_list|,
name|subSchema
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|=
name|subSchema
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Table
name|table
init|=
name|schema
operator|.
name|getTable
argument_list|(
name|name
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|(
name|name
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// not enough objects to match all names
return|return
literal|null
return|;
block|}
return|return
operator|new
name|OptiqPrepareImpl
operator|.
name|RelOptTableImpl
argument_list|(
name|this
argument_list|,
name|table
operator|.
name|getRowType
argument_list|()
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|pairs
argument_list|)
argument_list|,
name|table
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|RelDataType
name|getNamedType
parameter_list|(
name|SqlIdentifier
name|typeName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|getAllSchemaObjectNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getSchemaName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|OptiqPrepareImpl
operator|.
name|RelOptTableImpl
name|getTableForMember
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|getTable
argument_list|(
name|names
argument_list|)
return|;
block|}
specifier|public
name|RelDataTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
specifier|public
name|void
name|registerRules
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
throws|throws
name|Exception
block|{
block|}
block|}
end_class

begin_comment
comment|// End OptiqCatalogReader.java
end_comment

end_unit

