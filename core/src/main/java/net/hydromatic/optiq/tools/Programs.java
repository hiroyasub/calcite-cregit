begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|hep
operator|.
name|HepProgram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utilities for creating {@link Program}s.  */
end_comment

begin_class
specifier|public
class|class
name|Programs
block|{
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|RuleSet
argument_list|,
name|Program
argument_list|>
name|RULE_SET_TO_PROGRAM
init|=
operator|new
name|Function
argument_list|<
name|RuleSet
argument_list|,
name|Program
argument_list|>
argument_list|()
block|{
specifier|public
name|Program
name|apply
parameter_list|(
name|RuleSet
name|ruleSet
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|ruleSet
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// private constructor for utility class
specifier|private
name|Programs
parameter_list|()
block|{
block|}
comment|/** Creates a program that executes a rule set. */
specifier|public
specifier|static
name|Program
name|of
parameter_list|(
name|RuleSet
name|ruleSet
parameter_list|)
block|{
return|return
operator|new
name|RuleSetProgram
argument_list|(
name|ruleSet
argument_list|)
return|;
block|}
comment|/** Creates a list of programs based on an array of rule sets. */
specifier|public
specifier|static
name|List
argument_list|<
name|Program
argument_list|>
name|listOf
parameter_list|(
name|RuleSet
modifier|...
name|ruleSets
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ruleSets
argument_list|)
argument_list|,
name|RULE_SET_TO_PROGRAM
argument_list|)
return|;
block|}
comment|/** Creates a program from a list of rules. */
specifier|public
specifier|static
name|Program
name|ofRules
parameter_list|(
name|RelOptRule
modifier|...
name|rules
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|RuleSets
operator|.
name|ofList
argument_list|(
name|rules
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a program from a list of rules. */
specifier|public
specifier|static
name|Program
name|ofRules
parameter_list|(
name|Collection
argument_list|<
name|RelOptRule
argument_list|>
name|rules
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|RuleSets
operator|.
name|ofList
argument_list|(
name|rules
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a program that executes a sequence of programs. */
specifier|public
specifier|static
name|Program
name|sequence
parameter_list|(
name|Program
modifier|...
name|programs
parameter_list|)
block|{
return|return
operator|new
name|SequenceProgram
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|programs
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a program that executes a {@link HepProgram}. */
specifier|public
specifier|static
name|Program
name|of
parameter_list|(
specifier|final
name|HepProgram
name|hepProgram
parameter_list|)
block|{
return|return
operator|new
name|Program
argument_list|()
block|{
specifier|public
name|RelNode
name|run
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|RelTraitSet
name|requiredOutputTraits
parameter_list|)
block|{
specifier|final
name|HepPlanner
name|hepPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|hepProgram
argument_list|)
decl_stmt|;
name|hepPlanner
operator|.
name|setRoot
argument_list|(
name|rel
argument_list|)
expr_stmt|;
return|return
name|hepPlanner
operator|.
name|findBestExp
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/** Program backed by a {@link RuleSet}. */
specifier|static
class|class
name|RuleSetProgram
implements|implements
name|Program
block|{
specifier|final
name|RuleSet
name|ruleSet
decl_stmt|;
specifier|private
name|RuleSetProgram
parameter_list|(
name|RuleSet
name|ruleSet
parameter_list|)
block|{
name|this
operator|.
name|ruleSet
operator|=
name|ruleSet
expr_stmt|;
block|}
specifier|public
name|RelNode
name|run
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|RelTraitSet
name|requiredOutputTraits
parameter_list|)
block|{
name|planner
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|RelOptRule
name|rule
range|:
name|ruleSet
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|equals
argument_list|(
name|requiredOutputTraits
argument_list|)
condition|)
block|{
name|rel
operator|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|rel
argument_list|,
name|requiredOutputTraits
argument_list|)
expr_stmt|;
block|}
name|planner
operator|.
name|setRoot
argument_list|(
name|rel
argument_list|)
expr_stmt|;
return|return
name|planner
operator|.
name|findBestExp
argument_list|()
return|;
block|}
block|}
comment|/** Program that runs sub-programs, sending the output of the previous as    * input to the next. */
specifier|private
specifier|static
class|class
name|SequenceProgram
implements|implements
name|Program
block|{
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Program
argument_list|>
name|programs
decl_stmt|;
name|SequenceProgram
parameter_list|(
name|ImmutableList
argument_list|<
name|Program
argument_list|>
name|programs
parameter_list|)
block|{
name|this
operator|.
name|programs
operator|=
name|programs
expr_stmt|;
block|}
specifier|public
name|RelNode
name|run
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|RelTraitSet
name|requiredOutputTraits
parameter_list|)
block|{
for|for
control|(
name|Program
name|program
range|:
name|programs
control|)
block|{
name|rel
operator|=
name|program
operator|.
name|run
argument_list|(
name|planner
argument_list|,
name|rel
argument_list|,
name|requiredOutputTraits
argument_list|)
expr_stmt|;
block|}
return|return
name|rel
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Programs.java
end_comment

end_unit

