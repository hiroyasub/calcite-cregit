begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|config
operator|.
name|Lex
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqConnection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|OptiqPrepareImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|PlannerImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|server
operator|.
name|OptiqServerStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCostFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserImplFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|impl
operator|.
name|SqlParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|SqlRexConvertletTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|StandardConvertletTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tools for invoking Optiq functionality without initializing a container /  * server first.  */
end_comment

begin_class
specifier|public
class|class
name|Frameworks
block|{
specifier|private
name|Frameworks
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|Planner
name|getPlanner
parameter_list|(
name|FrameworkConfig
name|config
parameter_list|)
block|{
return|return
operator|new
name|PlannerImpl
argument_list|(
name|config
argument_list|)
return|;
block|}
comment|/** Piece of code to be run in a context where a planner is available. The    * planner is accessible from the {@code cluster} parameter, as are several    * other useful objects. */
specifier|public
interface|interface
name|PlannerAction
parameter_list|<
name|R
parameter_list|>
block|{
name|R
name|apply
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptSchema
name|relOptSchema
parameter_list|,
name|SchemaPlus
name|rootSchema
parameter_list|)
function_decl|;
block|}
comment|/** Piece of code to be run in a context where a planner and statement are    * available. The planner is accessible from the {@code cluster} parameter, as    * are several other useful objects. The connection and    * {@link net.hydromatic.optiq.DataContext} are accessible from the    * statement. */
specifier|public
specifier|abstract
specifier|static
class|class
name|PrepareAction
parameter_list|<
name|R
parameter_list|>
block|{
specifier|private
specifier|final
name|FrameworkConfig
name|config
decl_stmt|;
specifier|public
name|PrepareAction
parameter_list|()
block|{
name|this
operator|.
name|config
operator|=
name|newConfigBuilder
argument_list|()
comment|//
operator|.
name|defaultSchema
argument_list|(
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PrepareAction
parameter_list|(
name|FrameworkConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|FrameworkConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
specifier|public
specifier|abstract
name|R
name|apply
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptSchema
name|relOptSchema
parameter_list|,
name|SchemaPlus
name|rootSchema
parameter_list|,
name|OptiqServerStatement
name|statement
parameter_list|)
function_decl|;
block|}
comment|/**    * Initializes a container then calls user-specified code with a planner.    *    * @param action Callback containing user-specified code    * @param config FrameworkConfig to use for planner action.    * @return Return value from action    */
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|>
name|R
name|withPlanner
parameter_list|(
specifier|final
name|PlannerAction
argument_list|<
name|R
argument_list|>
name|action
parameter_list|,
comment|//
name|FrameworkConfig
name|config
parameter_list|)
block|{
return|return
name|withPrepare
argument_list|(
operator|new
name|Frameworks
operator|.
name|PrepareAction
argument_list|<
name|R
argument_list|>
argument_list|(
name|config
argument_list|)
block|{
specifier|public
name|R
name|apply
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptSchema
name|relOptSchema
parameter_list|,
name|SchemaPlus
name|rootSchema
parameter_list|,
name|OptiqServerStatement
name|statement
parameter_list|)
block|{
return|return
name|action
operator|.
name|apply
argument_list|(
name|cluster
argument_list|,
name|relOptSchema
argument_list|,
name|rootSchema
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Initializes a container then calls user-specified code with a planner.    *    * @param action Callback containing user-specified code    * @return Return value from action    */
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|>
name|R
name|withPlanner
parameter_list|(
specifier|final
name|PlannerAction
argument_list|<
name|R
argument_list|>
name|action
parameter_list|)
block|{
name|FrameworkConfig
name|config
init|=
name|newConfigBuilder
argument_list|()
comment|//
operator|.
name|defaultSchema
argument_list|(
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|withPlanner
argument_list|(
name|action
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**    * Initializes a container then calls user-specified code with a planner    * and statement.    *    * @param action Callback containing user-specified code    * @return Return value from action    */
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|>
name|R
name|withPrepare
parameter_list|(
name|PrepareAction
argument_list|<
name|R
argument_list|>
name|action
parameter_list|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"net.hydromatic.optiq.jdbc.Driver"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:optiq:"
argument_list|)
decl_stmt|;
name|OptiqConnection
name|optiqConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|OptiqConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|OptiqServerStatement
name|statement
init|=
name|optiqConnection
operator|.
name|createStatement
argument_list|()
operator|.
name|unwrap
argument_list|(
name|OptiqServerStatement
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//noinspection deprecation
return|return
operator|new
name|OptiqPrepareImpl
argument_list|()
operator|.
name|perform
argument_list|(
name|statement
argument_list|,
name|action
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a root schema.    *    * @param addMetadataSchema Whether to add "metadata" schema containing    *    definitions of tables, columns etc.    */
specifier|public
specifier|static
name|SchemaPlus
name|createRootSchema
parameter_list|(
name|boolean
name|addMetadataSchema
parameter_list|)
block|{
return|return
name|OptiqSchema
operator|.
name|createRootSchema
argument_list|(
name|addMetadataSchema
argument_list|)
operator|.
name|plus
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ConfigBuilder
name|newConfigBuilder
parameter_list|()
block|{
return|return
operator|new
name|ConfigBuilder
argument_list|()
return|;
block|}
comment|/**    * A builder class to help you build a StdFrameworkConfig using defaults    * where values aren't required.    */
specifier|public
specifier|static
class|class
name|ConfigBuilder
block|{
specifier|private
name|SqlRexConvertletTable
name|convertletTable
init|=
name|StandardConvertletTable
operator|.
name|INSTANCE
decl_stmt|;
specifier|private
name|SqlOperatorTable
name|operatorTable
init|=
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
decl_stmt|;
specifier|private
name|ImmutableList
argument_list|<
name|Program
argument_list|>
name|programs
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|private
name|Context
name|context
decl_stmt|;
specifier|private
name|ImmutableList
argument_list|<
name|RelTraitDef
argument_list|>
name|traitDefs
decl_stmt|;
specifier|private
name|Lex
name|lex
init|=
name|Lex
operator|.
name|ORACLE
decl_stmt|;
specifier|private
name|SchemaPlus
name|defaultSchema
decl_stmt|;
specifier|private
name|RelOptCostFactory
name|costFactory
decl_stmt|;
specifier|private
name|SqlParserImplFactory
name|parserFactory
init|=
name|SqlParserImpl
operator|.
name|FACTORY
decl_stmt|;
specifier|private
name|ConfigBuilder
parameter_list|()
block|{
block|}
specifier|public
name|FrameworkConfig
name|build
parameter_list|()
block|{
return|return
operator|new
name|StdFrameworkConfig
argument_list|(
name|context
argument_list|,
name|convertletTable
argument_list|,
name|operatorTable
argument_list|,
name|programs
argument_list|,
name|traitDefs
argument_list|,
name|lex
argument_list|,
name|defaultSchema
argument_list|,
name|costFactory
argument_list|,
comment|//
name|parserFactory
argument_list|)
return|;
block|}
specifier|public
name|ConfigBuilder
name|context
parameter_list|(
name|Context
name|c
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|c
expr_stmt|;
return|return
name|this
return|;
block|}
empty_stmt|;
specifier|public
name|ConfigBuilder
name|convertletTable
parameter_list|(
name|SqlRexConvertletTable
name|table
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|this
operator|.
name|convertletTable
operator|=
name|table
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|operatorTable
parameter_list|(
name|SqlOperatorTable
name|table
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|this
operator|.
name|operatorTable
operator|=
name|table
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|traitDefs
parameter_list|(
name|List
argument_list|<
name|RelTraitDef
argument_list|>
name|traitDefs
parameter_list|)
block|{
if|if
condition|(
name|traitDefs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|traitDefs
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|traitDefs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|traitDefs
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|traitDefs
parameter_list|(
name|RelTraitDef
modifier|...
name|traitDefs
parameter_list|)
block|{
name|this
operator|.
name|traitDefs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|traitDefs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|lex
parameter_list|(
name|Lex
name|lex
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|lex
argument_list|)
expr_stmt|;
name|this
operator|.
name|lex
operator|=
name|lex
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|defaultSchema
parameter_list|(
name|SchemaPlus
name|defaultSchema
parameter_list|)
block|{
name|this
operator|.
name|defaultSchema
operator|=
name|defaultSchema
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|costFactory
parameter_list|(
name|RelOptCostFactory
name|costFactory
parameter_list|)
block|{
name|this
operator|.
name|costFactory
operator|=
name|costFactory
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|ruleSets
parameter_list|(
name|List
argument_list|<
name|RuleSet
argument_list|>
name|ruleSets
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ruleSets
argument_list|)
expr_stmt|;
name|this
operator|.
name|programs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Programs
operator|.
name|listOf
argument_list|(
name|ruleSets
operator|.
name|toArray
argument_list|(
operator|new
name|RuleSet
index|[
name|ruleSets
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|programs
parameter_list|(
name|List
argument_list|<
name|Program
argument_list|>
name|programs
parameter_list|)
block|{
name|this
operator|.
name|programs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|programs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|programs
parameter_list|(
name|Program
modifier|...
name|programs
parameter_list|)
block|{
name|this
operator|.
name|programs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|programs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|ruleSets
parameter_list|(
name|RuleSet
modifier|...
name|ruleSets
parameter_list|)
block|{
name|this
operator|.
name|programs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Programs
operator|.
name|listOf
argument_list|(
name|ruleSets
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ConfigBuilder
name|parserFactory
parameter_list|(
name|SqlParserImplFactory
name|parserFactory
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|parserFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|parserFactory
operator|=
name|parserFactory
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Frameworks.java
end_comment

end_unit

