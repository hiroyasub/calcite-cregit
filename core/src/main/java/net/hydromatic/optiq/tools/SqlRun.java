begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Runs a SQL script.  */
end_comment

begin_class
specifier|public
class|class
name|SqlRun
block|{
specifier|private
name|BufferedReader
name|reader
decl_stmt|;
specifier|private
name|Writer
name|writer
decl_stmt|;
specifier|private
name|PrintWriter
name|printWriter
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Property
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Property
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ResultSet
name|resultSet
decl_stmt|;
specifier|private
name|SQLException
name|resultSetException
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|pushedLine
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|boolean
name|execute
init|=
literal|true
decl_stmt|;
specifier|public
name|SqlRun
parameter_list|(
name|BufferedReader
name|reader
parameter_list|,
name|Writer
name|writer
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|map
operator|.
name|put
argument_list|(
name|Property
operator|.
name|OUTPUTFORMAT
argument_list|,
name|OutputFormat
operator|.
name|CSV
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|File
name|inFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Reader
name|reader
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|inFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error opening input "
operator|+
name|inFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|Writer
name|writer
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error opening output "
operator|+
name|outFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|SqlRun
name|sqlRun
init|=
operator|new
name|SqlRun
argument_list|(
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
argument_list|,
name|writer
argument_list|)
decl_stmt|;
try|try
block|{
name|sqlRun
operator|.
name|execute
argument_list|(
operator|new
name|ConnectionFactory
argument_list|()
block|{
specifier|public
name|Connection
name|connect
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
name|this
operator|.
name|printWriter
operator|=
operator|new
name|PrintWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
try|try
block|{
name|Command
name|command
init|=
operator|new
name|Parser
argument_list|()
operator|.
name|parse
argument_list|()
decl_stmt|;
try|try
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while executing command "
operator|+
name|command
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|printWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|Command
name|of
parameter_list|(
name|List
argument_list|<
name|Command
argument_list|>
name|commands
parameter_list|)
block|{
return|return
name|commands
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|commands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
operator|new
name|CompositeCommand
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|commands
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|pad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|width
parameter_list|,
name|boolean
name|right
parameter_list|)
block|{
specifier|final
name|int
name|x
init|=
name|width
operator|-
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|<=
literal|0
condition|)
block|{
return|return
name|s
return|;
block|}
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|chars
argument_list|(
literal|' '
argument_list|,
name|x
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
name|chars
argument_list|(
literal|' '
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|CharSequence
name|chars
parameter_list|(
specifier|final
name|char
name|c
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|CharSequence
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|c
return|;
block|}
specifier|public
name|CharSequence
name|subSequence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|SqlRun
operator|.
name|chars
argument_list|(
name|c
argument_list|,
name|end
operator|-
name|start
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Parser. */
specifier|private
class|class
name|Parser
block|{
name|Command
name|parse
parameter_list|()
block|{
name|List
argument_list|<
name|Command
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|Command
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Command
name|command
decl_stmt|;
try|try
block|{
name|command
operator|=
name|nextCommand
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while reading next command"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|of
argument_list|(
name|commands
argument_list|)
return|;
block|}
specifier|private
name|Command
name|nextCommand
parameter_list|()
throws|throws
name|IOException
block|{
name|lines
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|line
init|=
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|CommentCommand
argument_list|(
name|lines
argument_list|)
return|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"use"
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
return|return
operator|new
name|UseCommand
argument_list|(
name|lines
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
return|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"ok"
argument_list|)
condition|)
block|{
return|return
operator|new
name|CheckResultCommand
argument_list|(
name|lines
argument_list|)
return|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"set outputformat"
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
specifier|final
name|OutputFormat
name|outputFormat
init|=
name|OutputFormat
operator|.
name|valueOf
argument_list|(
name|parts
index|[
literal|2
index|]
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SetCommand
argument_list|(
name|lines
argument_list|,
name|Property
operator|.
name|OUTPUTFORMAT
argument_list|,
name|outputFormat
argument_list|)
return|;
block|}
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
literal|"if (false) {"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ifLines
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|lines
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Command
name|command
init|=
operator|new
name|Parser
argument_list|()
operator|.
name|parse
argument_list|()
decl_stmt|;
return|return
operator|new
name|IfCommand
argument_list|(
name|ifLines
argument_list|,
name|lines
argument_list|,
name|command
argument_list|)
return|;
block|}
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown command: "
operator|+
name|line
argument_list|)
throw|;
block|}
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|boolean
name|last
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|last
operator|=
literal|true
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
condition|)
block|{
break|break;
block|}
name|line
operator|=
name|nextLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"end of file reached before end of SQL command"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|sqlLines
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|line
operator|=
name|nextLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|pushLine
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outputLines
init|=
name|lines
operator|.
name|subList
argument_list|(
name|sqlLines
operator|.
name|size
argument_list|()
argument_list|,
name|lines
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SqlCommand
argument_list|(
name|sqlLines
argument_list|,
name|sql
argument_list|,
name|outputLines
argument_list|)
return|;
block|}
specifier|private
name|void
name|pushLine
parameter_list|()
block|{
if|if
condition|(
name|pushedLine
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot push two lines"
argument_list|)
throw|;
block|}
if|if
condition|(
name|lines
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"no line has been read"
argument_list|)
throw|;
block|}
name|pushedLine
operator|=
name|lines
operator|.
name|get
argument_list|(
name|lines
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|lines
operator|.
name|remove
argument_list|(
name|lines
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|nextLine
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|line
decl_stmt|;
if|if
condition|(
name|pushedLine
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|pushedLine
expr_stmt|;
name|pushedLine
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|line
return|;
block|}
block|}
comment|/** Schemes for converting the output of a SQL statement into text. */
enum|enum
name|OutputFormat
block|{
name|CSV
block|{
annotation|@
name|Override
specifier|public
name|void
name|format
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|SqlRun
name|run
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
specifier|final
name|PrintWriter
name|pw
init|=
name|run
operator|.
name|printWriter
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|metaData
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
name|metaData
operator|.
name|getColumnLabel
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|,
comment|// Example:
comment|//
comment|//  ename | deptno | gender | first_value
comment|// -------+--------+--------+-------------
comment|//  Jane  |     10 | F      | Jane
comment|//  Bob   |     10 | M      | Jane
comment|// (2 rows)
name|PSQL
block|{
annotation|@
name|Override
specifier|public
name|void
name|format
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|SqlRun
name|run
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
specifier|final
name|PrintWriter
name|pw
init|=
name|run
operator|.
name|printWriter
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|metaData
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|widths
init|=
operator|new
name|int
index|[
name|n
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|boolean
index|[]
name|rights
init|=
operator|new
name|boolean
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|widths
index|[
name|i
index|]
operator|=
name|metaData
operator|.
name|getColumnLabel
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
index|[]
name|row
init|=
operator|new
name|String
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|resultSet
operator|.
name|getString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|widths
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|widths
index|[
name|i
index|]
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|row
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|metaData
operator|.
name|getColumnType
argument_list|(
name|i
operator|+
literal|1
argument_list|)
condition|)
block|{
case|case
name|Types
operator|.
name|INTEGER
case|:
name|rights
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|i
operator|>
literal|0
condition|?
literal|" | "
else|:
literal|" "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|metaData
operator|.
name|getColumnLabel
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
name|chars
argument_list|(
literal|'-'
argument_list|,
name|widths
index|[
name|i
index|]
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|String
index|[]
name|row
range|:
name|rows
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|i
operator|>
literal|0
condition|?
literal|" | "
else|:
literal|" "
argument_list|)
expr_stmt|;
comment|// don't pad the last field if it is left-justified
specifier|final
name|String
name|s
init|=
name|i
operator|==
name|n
operator|-
literal|1
operator|&&
operator|!
name|rights
index|[
name|i
index|]
condition|?
name|row
index|[
name|i
index|]
else|:
name|pad
argument_list|(
name|row
index|[
name|i
index|]
argument_list|,
name|widths
index|[
name|i
index|]
argument_list|,
name|rights
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
name|rows
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"(1 row)"
else|:
literal|"("
operator|+
name|rows
operator|.
name|size
argument_list|()
operator|+
literal|" rows)"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|;
specifier|public
specifier|abstract
name|void
name|format
argument_list|(
name|ResultSet
name|resultSet
argument_list|,
name|SqlRun
name|run
argument_list|)
throws|throws
name|Exception
decl_stmt|;
block|}
comment|/** Command. */
interface|interface
name|Command
block|{
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
comment|/** Base class for implementations of Command. */
specifier|abstract
class|class
name|AbstractCommand
implements|implements
name|Command
block|{
specifier|protected
name|Command
name|echo
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
block|{
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
try|try
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while writing output"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|this
return|;
block|}
block|}
comment|/** Base class for implementations of Command that have one piece of source    * code. */
specifier|abstract
class|class
name|SimpleCommand
extends|extends
name|AbstractCommand
block|{
specifier|protected
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|lines
decl_stmt|;
specifier|public
name|SimpleCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
block|{
name|this
operator|.
name|lines
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Command that sets the current connection. */
class|class
name|UseCommand
extends|extends
name|SimpleCommand
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|UseCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|echo
argument_list|(
name|lines
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|connection
operator|=
name|connectionFactory
operator|.
name|connect
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Command that executes a SQL statement and checks its result. */
class|class
name|CheckResultCommand
extends|extends
name|SimpleCommand
block|{
specifier|public
name|CheckResultCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
block|{
name|super
argument_list|(
name|lines
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|execute
condition|)
block|{
name|OutputFormat
name|format
init|=
operator|(
name|OutputFormat
operator|)
name|map
operator|.
name|get
argument_list|(
name|Property
operator|.
name|OUTPUTFORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultSet
operator|!=
literal|null
condition|)
block|{
name|format
operator|.
name|format
argument_list|(
name|resultSet
argument_list|,
name|SqlRun
operator|.
name|this
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|resultSetException
operator|!=
literal|null
condition|)
block|{
name|resultSetException
operator|.
name|printStackTrace
argument_list|(
name|printWriter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"neither resultSet nor exception set"
argument_list|)
throw|;
block|}
name|resultSet
operator|=
literal|null
expr_stmt|;
name|resultSetException
operator|=
literal|null
expr_stmt|;
block|}
name|echo
argument_list|(
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Command that executes a SQL statement. */
specifier|private
class|class
name|SqlCommand
extends|extends
name|SimpleCommand
block|{
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|output
decl_stmt|;
specifier|protected
name|SqlCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|,
name|String
name|sql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|output
parameter_list|)
block|{
name|super
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|echo
argument_list|(
name|lines
argument_list|)
expr_stmt|;
if|if
condition|(
name|execute
condition|)
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no connection"
argument_list|)
throw|;
block|}
specifier|final
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultSet
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"result set already present"
argument_list|)
throw|;
block|}
try|try
block|{
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|resultSetException
operator|=
name|e
expr_stmt|;
block|}
block|}
else|else
block|{
name|echo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Creates a connection for a given name.    * Kind of a directory service.    * Caller must close the connection. */
specifier|public
interface|interface
name|ConnectionFactory
block|{
name|Connection
name|connect
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
comment|/** Property whose value may be set. */
enum|enum
name|Property
block|{
name|OUTPUTFORMAT
block|}
comment|/** Command that executes a SQL statement and checks its result. */
class|class
name|SetCommand
extends|extends
name|SimpleCommand
block|{
specifier|private
specifier|final
name|Property
name|property
decl_stmt|;
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
specifier|public
name|SetCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|,
name|Property
name|property
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|echo
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Command that executes a comment. (Does nothing.) */
class|class
name|CommentCommand
extends|extends
name|SimpleCommand
block|{
specifier|public
name|CommentCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
block|{
name|super
argument_list|(
name|lines
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|echo
argument_list|(
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Command that executes a comment. (Does nothing.) */
class|class
name|IfCommand
extends|extends
name|AbstractCommand
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ifLines
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|endLines
decl_stmt|;
specifier|private
specifier|final
name|Command
name|command
decl_stmt|;
specifier|public
name|IfCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ifLines
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|endLines
parameter_list|,
name|Command
name|command
parameter_list|)
block|{
name|this
operator|.
name|ifLines
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|ifLines
argument_list|)
expr_stmt|;
name|this
operator|.
name|endLines
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|endLines
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|echo
argument_list|(
name|ifLines
argument_list|)
expr_stmt|;
comment|// switch to a mode where we don't execute, just echo
name|boolean
name|oldExecute
init|=
name|execute
decl_stmt|;
name|execute
operator|=
literal|false
expr_stmt|;
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|execute
operator|=
name|oldExecute
expr_stmt|;
name|echo
argument_list|(
name|endLines
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Command that executes a comment. (Does nothing.) */
class|class
name|CompositeCommand
extends|extends
name|AbstractCommand
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Command
argument_list|>
name|commands
decl_stmt|;
specifier|public
name|CompositeCommand
parameter_list|(
name|List
argument_list|<
name|Command
argument_list|>
name|commands
parameter_list|)
block|{
name|this
operator|.
name|commands
operator|=
name|commands
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Command
name|command
range|:
name|commands
control|)
block|{
try|try
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while executing command "
operator|+
name|command
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlRun.java
end_comment

end_unit

