begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|config
operator|.
name|Lex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCostFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserImplFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|SqlRexConvertletTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link FrameworkConfig} that uses standard Optiq  * classes to provide basic planner functionality.  */
end_comment

begin_class
class|class
name|StdFrameworkConfig
implements|implements
name|FrameworkConfig
block|{
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
specifier|private
specifier|final
name|SqlRexConvertletTable
name|convertletTable
decl_stmt|;
specifier|private
specifier|final
name|SqlOperatorTable
name|operatorTable
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Program
argument_list|>
name|programs
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|RelTraitDef
argument_list|>
name|traitDefs
decl_stmt|;
specifier|private
specifier|final
name|Lex
name|lex
decl_stmt|;
specifier|private
specifier|final
name|SchemaPlus
name|defaultSchema
decl_stmt|;
specifier|private
specifier|final
name|RelOptCostFactory
name|costFactory
decl_stmt|;
specifier|private
specifier|final
name|SqlParserImplFactory
name|parserFactory
decl_stmt|;
specifier|public
name|StdFrameworkConfig
parameter_list|(
name|Context
name|context
parameter_list|,
comment|//
name|SqlRexConvertletTable
name|convertletTable
parameter_list|,
comment|//
name|SqlOperatorTable
name|operatorTable
parameter_list|,
comment|//
name|ImmutableList
argument_list|<
name|Program
argument_list|>
name|programs
parameter_list|,
comment|//
name|ImmutableList
argument_list|<
name|RelTraitDef
argument_list|>
name|traitDefs
parameter_list|,
name|Lex
name|lex
parameter_list|,
comment|//
name|SchemaPlus
name|defaultSchema
parameter_list|,
comment|//
name|RelOptCostFactory
name|costFactory
parameter_list|,
comment|//
name|SqlParserImplFactory
name|parserFactory
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|convertletTable
operator|=
name|convertletTable
expr_stmt|;
name|this
operator|.
name|operatorTable
operator|=
name|operatorTable
expr_stmt|;
name|this
operator|.
name|programs
operator|=
name|programs
expr_stmt|;
name|this
operator|.
name|traitDefs
operator|=
name|traitDefs
expr_stmt|;
name|this
operator|.
name|lex
operator|=
name|lex
expr_stmt|;
name|this
operator|.
name|defaultSchema
operator|=
name|defaultSchema
expr_stmt|;
name|this
operator|.
name|costFactory
operator|=
name|costFactory
expr_stmt|;
name|this
operator|.
name|parserFactory
operator|=
name|parserFactory
expr_stmt|;
block|}
specifier|public
name|Lex
name|getLex
parameter_list|()
block|{
return|return
name|lex
return|;
block|}
specifier|public
name|SqlParserImplFactory
name|getParserFactory
parameter_list|()
block|{
return|return
name|parserFactory
return|;
block|}
specifier|public
name|SchemaPlus
name|getDefaultSchema
parameter_list|()
block|{
return|return
name|defaultSchema
return|;
block|}
specifier|public
name|ImmutableList
argument_list|<
name|Program
argument_list|>
name|getPrograms
parameter_list|()
block|{
return|return
name|programs
return|;
block|}
specifier|public
name|RelOptCostFactory
name|getCostFactory
parameter_list|()
block|{
return|return
name|costFactory
return|;
block|}
specifier|public
name|ImmutableList
argument_list|<
name|RelTraitDef
argument_list|>
name|getTraitDefs
parameter_list|()
block|{
return|return
name|traitDefs
return|;
block|}
specifier|public
name|SqlRexConvertletTable
name|getConvertletTable
parameter_list|()
block|{
return|return
name|convertletTable
return|;
block|}
specifier|public
name|Context
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|SqlOperatorTable
name|getOperatorTable
parameter_list|()
block|{
return|return
name|operatorTable
return|;
block|}
block|}
end_class

end_unit

