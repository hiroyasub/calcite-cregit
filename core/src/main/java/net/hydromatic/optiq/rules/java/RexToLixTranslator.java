begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|BuiltinMethod
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Translates {@link org.eigenbase.rex.RexNode REX expressions} to  * {@link Expression linq4j expressions}.  */
end_comment

begin_class
specifier|public
class|class
name|RexToLixTranslator
block|{
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Method
argument_list|,
name|SqlOperator
argument_list|>
name|JAVA_TO_SQL_METHOD_MAP
init|=
name|Util
operator|.
expr|<
name|Method
decl_stmt|,
name|SqlOperator
decl|>
name|mapOf
argument_list|(
name|findMethod
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"toUpperCase"
argument_list|)
argument_list|,
name|upperFunc
argument_list|,
name|findMethod
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"substring"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
argument_list|,
name|substringFunc
argument_list|,
name|findMethod
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"charLength"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|characterLengthFunc
argument_list|,
name|findMethod
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"charLength"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|charLengthFunc
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MILLIS_IN_DAY
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|RexProgram
name|program
decl_stmt|;
specifier|private
specifier|final
name|RexToLixTranslator
operator|.
name|InputGetter
name|inputGetter
decl_stmt|;
specifier|private
specifier|final
name|BlockBuilder
name|list
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Boolean
argument_list|>
name|exprNullableMap
decl_stmt|;
specifier|private
specifier|static
name|Method
name|findMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
modifier|...
name|parameterTypes
parameter_list|)
block|{
try|try
block|{
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|parameterTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RexToLixTranslator
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|InputGetter
name|inputGetter
parameter_list|,
name|BlockBuilder
name|list
parameter_list|)
block|{
name|this
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|,
name|Collections
operator|.
expr|<
name|RexNode
argument_list|,
name|Boolean
operator|>
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RexToLixTranslator
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|InputGetter
name|inputGetter
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Boolean
argument_list|>
name|exprNullableMap
parameter_list|,
name|RexBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|inputGetter
operator|=
name|inputGetter
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|this
operator|.
name|exprNullableMap
operator|=
name|exprNullableMap
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
comment|/**    * Translates a {@link RexProgram} to a sequence of expressions and    * declarations.    *    * @param program Program to be translated    * @param typeFactory Type factory    * @param list List of statements, populated with declarations    * @param inputGetter Generates expressions for inputs    * @return Sequence of expressions, optional condition    */
specifier|public
specifier|static
name|List
argument_list|<
name|Expression
argument_list|>
name|translateProjects
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
name|InputGetter
name|inputGetter
parameter_list|)
block|{
return|return
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|)
operator|.
name|translateList
argument_list|(
name|program
operator|.
name|getProjectList
argument_list|()
argument_list|)
return|;
block|}
name|Expression
name|translate
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
specifier|final
name|RexImpTable
operator|.
name|NullAs
name|nullAs
init|=
name|RexImpTable
operator|.
name|NullAs
operator|.
name|of
argument_list|(
name|isNullable
argument_list|(
name|expr
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|translate
argument_list|(
name|expr
argument_list|,
name|nullAs
argument_list|)
return|;
block|}
name|Expression
name|translate
parameter_list|(
name|RexNode
name|expr
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|)
block|{
name|Expression
name|expression
init|=
name|translate0
argument_list|(
name|expr
argument_list|,
name|nullAs
argument_list|)
decl_stmt|;
assert|assert
name|expression
operator|!=
literal|null
assert|;
return|return
name|list
operator|.
name|append
argument_list|(
literal|"v"
argument_list|,
name|expression
argument_list|)
return|;
block|}
name|Expression
name|translateCast
parameter_list|(
name|RelDataType
name|sourceType
parameter_list|,
name|RelDataType
name|targetType
parameter_list|,
name|Expression
name|operand
parameter_list|)
block|{
name|Expression
name|convert
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|targetType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|ANY
case|:
name|convert
operator|=
name|operand
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|STRING_TO_BOOLEAN
operator|.
name|method
argument_list|,
name|operand
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
specifier|final
name|SqlIntervalQualifier
name|interval
init|=
name|sourceType
operator|.
name|getIntervalQualifier
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|DATE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|UNIX_DATE_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|UNIX_TIME_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|UNIX_TIMESTAMP_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|INTERVAL_YEAR_MONTH_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|interval
operator|.
name|foo
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|INTERVAL_DAY_TIME_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|interval
operator|.
name|foo
argument_list|()
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|interval
operator|.
name|getFractionalSecondPrecision
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|BOOLEAN_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|convert
operator|==
literal|null
condition|)
block|{
name|convert
operator|=
name|convert
argument_list|(
name|operand
argument_list|,
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|targetType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Going from CHAR(n), trim.
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
switch|switch
condition|(
name|targetType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|VARCHAR
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|RTRIM
operator|.
name|method
argument_list|,
name|convert
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
switch|switch
condition|(
name|targetType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|VARBINARY
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|RTRIM
operator|.
name|method
argument_list|,
name|convert
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// Going from anything to CHAR(n) or VARCHAR(n), make sure value is no
comment|// longer than n.
name|truncate
label|:
switch|switch
condition|(
name|targetType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|BINARY
case|:
case|case
name|VARBINARY
case|:
specifier|final
name|int
name|targetPrecision
init|=
name|targetType
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetPrecision
operator|>=
literal|0
condition|)
block|{
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|BINARY
case|:
case|case
name|VARBINARY
case|:
comment|// If this is a widening cast, no need to truncate.
specifier|final
name|int
name|sourcePrecision
init|=
name|sourceType
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourcePrecision
operator|<
literal|0
operator|||
name|sourcePrecision
operator|>=
literal|0
operator|&&
name|sourcePrecision
operator|<=
name|targetPrecision
condition|)
block|{
break|break
name|truncate
break|;
block|}
default|default:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|TRUNCATE
operator|.
name|method
argument_list|,
name|convert
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|targetPrecision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
name|int
name|targetScale
init|=
name|targetType
operator|.
name|getScale
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetScale
operator|==
name|RelDataType
operator|.
name|SCALE_NOT_SPECIFIED
condition|)
block|{
name|targetScale
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|targetScale
operator|<
name|sourceType
operator|.
name|getScale
argument_list|()
condition|)
block|{
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|ROUND_LONG
operator|.
name|method
argument_list|,
name|convert
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
literal|3
operator|-
name|targetScale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
return|return
name|convert
return|;
block|}
comment|/** Translates an expression that is not in the cache.    *    * @param expr Expression    * @param nullAs If false, if expression is definitely not null at    *   runtime. Therefore we can optimize. For example, we can cast to int    *   using x.intValue().    * @return Translated expression    */
specifier|private
name|Expression
name|translate0
parameter_list|(
name|RexNode
name|expr
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|)
block|{
if|if
condition|(
name|nullAs
operator|==
name|RexImpTable
operator|.
name|NullAs
operator|.
name|NULL
operator|&&
operator|!
name|expr
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
name|nullAs
operator|=
name|RexImpTable
operator|.
name|NullAs
operator|.
name|NOT_POSSIBLE
expr_stmt|;
block|}
switch|switch
condition|(
name|expr
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
specifier|final
name|int
name|index
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|expr
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|Expression
name|x
init|=
name|inputGetter
operator|.
name|field
argument_list|(
name|list
argument_list|,
name|index
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|append
argument_list|(
literal|"v"
argument_list|,
name|nullAs
operator|.
name|handle
argument_list|(
name|list
operator|.
name|append
argument_list|(
literal|"v"
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|LOCAL_REF
case|:
return|return
name|translate
argument_list|(
name|program
operator|.
name|getExprList
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexLocalRef
operator|)
name|expr
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|nullAs
argument_list|)
return|;
case|case
name|LITERAL
case|:
return|return
name|translateLiteral
argument_list|(
name|expr
argument_list|,
name|nullifyType
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|,
name|isNullable
argument_list|(
name|expr
argument_list|)
operator|&&
name|nullAs
operator|!=
name|RexImpTable
operator|.
name|NullAs
operator|.
name|NOT_POSSIBLE
argument_list|)
argument_list|,
name|typeFactory
argument_list|,
name|nullAs
argument_list|)
return|;
case|case
name|DYNAMIC_PARAM
case|:
return|return
name|translateParameter
argument_list|(
operator|(
name|RexDynamicParam
operator|)
name|expr
argument_list|,
name|nullAs
argument_list|)
return|;
default|default:
if|if
condition|(
name|expr
operator|instanceof
name|RexCall
condition|)
block|{
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|expr
decl_stmt|;
specifier|final
name|SqlOperator
name|operator
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
name|RexImpTable
operator|.
name|CallImplementor
name|implementor
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
name|operator
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor
operator|!=
literal|null
condition|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|,
name|call
argument_list|,
name|nullAs
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate expression "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
comment|/** Translates a parameter. */
specifier|private
name|Expression
name|translateParameter
parameter_list|(
name|RexDynamicParam
name|expr
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|)
block|{
return|return
name|nullAs
operator|.
name|handle
argument_list|(
name|convert
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|DataContext
operator|.
name|ROOT
argument_list|,
name|BuiltinMethod
operator|.
name|DATA_CONTEXT_GET
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"?"
operator|+
name|expr
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Translates a literal.    *    * @throws AlwaysNull if literal is null but {@code nullAs} is    * {@link net.hydromatic.optiq.rules.java.RexImpTable.NullAs#NOT_POSSIBLE}.    */
specifier|public
specifier|static
name|Expression
name|translateLiteral
parameter_list|(
name|RexNode
name|expr
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|)
block|{
name|Type
name|javaClass
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|expr
decl_stmt|;
name|Comparable
name|value
init|=
name|literal
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|TRUE
case|:
case|case
name|IS_NULL
case|:
return|return
name|RexImpTable
operator|.
name|TRUE_EXPR
return|;
case|case
name|FALSE
case|:
case|case
name|IS_NOT_NULL
case|:
return|return
name|RexImpTable
operator|.
name|FALSE_EXPR
return|;
case|case
name|NOT_POSSIBLE
case|:
throw|throw
operator|new
name|AlwaysNull
argument_list|()
throw|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|IS_NOT_NULL
case|:
return|return
name|RexImpTable
operator|.
name|TRUE_EXPR
return|;
case|case
name|IS_NULL
case|:
return|return
name|RexImpTable
operator|.
name|FALSE_EXPR
return|;
block|}
block|}
specifier|final
name|Object
name|value2
decl_stmt|;
switch|switch
condition|(
name|literal
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|DECIMAL
case|:
assert|assert
name|javaClass
operator|==
name|BigDecimal
operator|.
name|class
assert|;
return|return
name|value
operator|==
literal|null
condition|?
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
else|:
name|Expressions
operator|.
name|new_
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|DATE
case|:
name|value2
operator|=
name|value
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|int
operator|)
operator|(
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTimeInMillis
argument_list|()
operator|/
name|MILLIS_IN_DAY
operator|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|value2
operator|=
name|value
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|int
operator|)
operator|(
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTimeInMillis
argument_list|()
operator|%
name|MILLIS_IN_DAY
operator|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|value2
operator|=
name|value
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value2
operator|=
literal|null
expr_stmt|;
name|javaClass
operator|=
name|Long
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|value2
operator|=
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|javaClass
operator|=
name|long
operator|.
name|class
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value2
operator|=
literal|null
expr_stmt|;
name|javaClass
operator|=
name|Integer
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|value2
operator|=
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|javaClass
operator|=
name|int
operator|.
name|class
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|value2
operator|=
name|value
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
operator|(
name|NlsString
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
case|case
name|VARBINARY
case|:
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|ByteString
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|(
operator|(
name|ByteString
operator|)
name|value
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
return|;
case|case
name|SYMBOL
case|:
name|value2
operator|=
name|value
expr_stmt|;
name|javaClass
operator|=
name|value
operator|.
name|getClass
argument_list|()
expr_stmt|;
break|break;
default|default:
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|ofBoxOr
argument_list|(
name|javaClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
operator|&&
name|value
operator|instanceof
name|Number
condition|)
block|{
name|value2
operator|=
name|primitive
operator|.
name|number
argument_list|(
operator|(
name|Number
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value2
operator|=
name|value
expr_stmt|;
block|}
block|}
return|return
name|Expressions
operator|.
name|constant
argument_list|(
name|value2
argument_list|,
name|javaClass
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Expression
argument_list|>
name|translateList
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operandList
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|rex
range|:
name|operandList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translate
argument_list|(
name|rex
argument_list|,
name|nullAs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
name|List
argument_list|<
name|Expression
argument_list|>
name|translateList
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|operandList
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|rex
range|:
name|operandList
control|)
block|{
specifier|final
name|Expression
name|translate
init|=
name|translate
argument_list|(
name|rex
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|translate
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNullable
argument_list|(
name|rex
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|Primitive
operator|.
name|isBox
argument_list|(
name|translate
operator|.
name|getType
argument_list|()
argument_list|)
operator|:
literal|"Not-null boxed primitive should come back as primitive: "
operator|+
name|rex
operator|+
literal|", "
operator|+
name|translate
operator|.
name|getType
argument_list|()
assert|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|public
specifier|static
name|Expression
name|translateCondition
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
name|InputGetter
name|inputGetter
parameter_list|)
block|{
if|if
condition|(
name|program
operator|.
name|getCondition
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|RexImpTable
operator|.
name|TRUE_EXPR
return|;
block|}
specifier|final
name|RexToLixTranslator
name|translator
init|=
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|)
decl_stmt|;
return|return
name|translator
operator|.
name|translate
argument_list|(
name|program
operator|.
name|getCondition
argument_list|()
argument_list|,
name|RexImpTable
operator|.
name|NullAs
operator|.
name|FALSE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Expression
name|translateAggregate
parameter_list|(
name|Expression
name|grouping
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accessor
parameter_list|)
block|{
specifier|final
name|RexImpTable
operator|.
name|AggregateImplementor
name|implementor
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|aggMap
operator|.
name|get
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggregation
operator|==
name|countOperator
condition|)
block|{
comment|// FIXME: count(x) and count(distinct x) don't work currently
name|accessor
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|implementor
operator|!=
literal|null
condition|)
block|{
return|return
name|implementor
operator|.
name|implementAggregate
argument_list|(
name|grouping
argument_list|,
name|accessor
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown agg "
operator|+
name|aggregation
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|Expression
name|convert
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Type
name|toType
parameter_list|)
block|{
specifier|final
name|Type
name|fromType
init|=
name|operand
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromType
operator|.
name|equals
argument_list|(
name|toType
argument_list|)
condition|)
block|{
return|return
name|operand
return|;
block|}
comment|// E.g. from "Short" to "int".
comment|// Generate "x.intValue()".
specifier|final
name|Primitive
name|toPrimitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|toType
argument_list|)
decl_stmt|;
specifier|final
name|Primitive
name|toBox
init|=
name|Primitive
operator|.
name|ofBox
argument_list|(
name|toType
argument_list|)
decl_stmt|;
specifier|final
name|Primitive
name|fromBox
init|=
name|Primitive
operator|.
name|ofBox
argument_list|(
name|fromType
argument_list|)
decl_stmt|;
specifier|final
name|Primitive
name|fromPrimitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|fromType
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromType
operator|==
name|String
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|toPrimitive
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|toPrimitive
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
comment|// Generate "SqlFunctions.toShort(x)".
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"to"
operator|+
name|SqlFunctions
operator|.
name|initcap
argument_list|(
name|toPrimitive
operator|.
name|primitiveName
argument_list|)
argument_list|,
name|operand
argument_list|)
return|;
default|default:
comment|// Generate "Short.parseShort(x)".
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|toPrimitive
operator|.
name|boxClass
argument_list|,
literal|"parse"
operator|+
name|SqlFunctions
operator|.
name|initcap
argument_list|(
name|toPrimitive
operator|.
name|primitiveName
argument_list|)
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|toBox
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|toBox
condition|)
block|{
case|case
name|CHAR
case|:
comment|// Generate "SqlFunctions.toCharBoxed(x)".
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"to"
operator|+
name|SqlFunctions
operator|.
name|initcap
argument_list|(
name|toBox
operator|.
name|primitiveName
argument_list|)
operator|+
literal|"Boxed"
argument_list|,
name|operand
argument_list|)
return|;
default|default:
comment|// Generate "Short.valueOf(x)".
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|toBox
operator|.
name|boxClass
argument_list|,
literal|"valueOf"
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|toPrimitive
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromPrimitive
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "float" to "double"
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|toPrimitive
operator|.
name|primitiveClass
argument_list|)
return|;
block|}
if|if
condition|(
name|fromBox
operator|!=
literal|null
condition|)
block|{
comment|// Generate "x.shortValue()".
return|return
name|Expressions
operator|.
name|unbox
argument_list|(
name|operand
argument_list|,
name|toPrimitive
argument_list|)
return|;
block|}
else|else
block|{
comment|// E.g. from "Object" to "short".
comment|// Generate "SqlFunctions.toShort(x)"
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"to"
operator|+
name|SqlFunctions
operator|.
name|initcap
argument_list|(
name|toPrimitive
operator|.
name|primitiveName
argument_list|)
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|fromBox
operator|!=
literal|null
operator|&&
name|toBox
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "Short" to "Integer"
comment|// Generate "x == null ? null : Integer.valueOf(x.intValue())"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|box
argument_list|(
name|Expressions
operator|.
name|unbox
argument_list|(
name|operand
argument_list|,
name|toBox
argument_list|)
argument_list|,
name|toBox
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|toType
operator|==
name|BigDecimal
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|fromBox
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "Integer" to "BigDecimal".
comment|// Generate "x == null ? null : new BigDecimal(x.intValue())"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|unbox
argument_list|(
name|operand
argument_list|,
name|fromBox
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|fromPrimitive
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "int" to "BigDecimal".
comment|// Generate "new BigDecimal(x)"
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|operand
argument_list|)
return|;
block|}
comment|// E.g. from "Object" to "BigDecimal".
comment|// Generate "x == null ? null : SqlFunctions.toBigDecimal(x)"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"toBigDecimal"
argument_list|,
name|operand
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|toType
operator|==
name|String
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|fromPrimitive
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|fromPrimitive
condition|)
block|{
case|case
name|DOUBLE
case|:
case|case
name|FLOAT
case|:
comment|// E.g. from "double" to "String"
comment|// Generate "SqlFunctions.toString(x)"
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"toString"
argument_list|,
name|operand
argument_list|)
return|;
default|default:
comment|// E.g. from "int" to "String"
comment|// Generate "Integer.toString(x)"
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|fromPrimitive
operator|.
name|boxClass
argument_list|,
literal|"toString"
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|fromType
operator|==
name|BigDecimal
operator|.
name|class
condition|)
block|{
comment|// E.g. from "BigDecimal" to "String"
comment|// Generate "x.toString()"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"toString"
argument_list|,
name|operand
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// E.g. from "BigDecimal" to "String"
comment|// Generate "x == null ? null : x.toString()"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|operand
argument_list|,
literal|"toString"
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|toType
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|elvis
parameter_list|(
name|T
name|t0
parameter_list|,
name|T
name|t1
parameter_list|)
block|{
return|return
name|t0
operator|!=
literal|null
condition|?
name|t0
else|:
name|t1
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|elvis
parameter_list|(
name|T
name|t0
parameter_list|,
name|T
name|t1
parameter_list|,
name|T
name|t2
parameter_list|)
block|{
return|return
name|t0
operator|!=
literal|null
condition|?
name|t0
else|:
name|t1
operator|!=
literal|null
condition|?
name|t1
else|:
name|t2
return|;
block|}
specifier|public
name|Expression
name|translateConstructor
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operandList
parameter_list|,
name|SqlKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|MAP_VALUE_CONSTRUCTOR
case|:
name|Expression
name|map
init|=
name|list
operator|.
name|append
argument_list|(
literal|"map"
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|LinkedHashMap
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|key
init|=
name|operandList
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|RexNode
name|value
init|=
name|operandList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|map
argument_list|,
name|BuiltinMethod
operator|.
name|MAP_PUT
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|box
argument_list|(
name|translate
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|box
argument_list|(
name|translate
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
case|case
name|ARRAY_VALUE_CONSTRUCTOR
case|:
name|Expression
name|lyst
init|=
name|list
operator|.
name|append
argument_list|(
literal|"list"
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|value
range|:
name|operandList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|lyst
argument_list|,
name|BuiltinMethod
operator|.
name|COLLECTION_ADD
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|box
argument_list|(
name|translate
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|lyst
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected: "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
comment|/** Returns whether an expression is nullable. Even if its type says it is    * nullable, if we have previously generated a check to make sure that it is    * not null, we will say so.    *    *<p>For example, {@code WHERE a == b} translates to    * {@code a != null&& b != null&& a.equals(b)}. When translating the    * 3rd part of the disjunction, we already know a and b are not null.</p>    *    * @param e Expression    * @return Whether expression is nullable in the current translation context    */
specifier|public
name|boolean
name|isNullable
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
specifier|final
name|Boolean
name|b
init|=
name|exprNullableMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
return|return
name|e
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
return|;
block|}
comment|/** Creates a read-only copy of this translator that records that a given    * expression is nullable. */
specifier|public
name|RexToLixTranslator
name|setNullable
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|boolean
name|nullable
parameter_list|)
block|{
comment|// TODO: use linked-list, to avoid copying whole map& translator
comment|// each time
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Boolean
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|RexNode
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|exprNullableMap
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
return|return
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|,
name|map
argument_list|,
name|builder
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|nullifyType
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|boolean
name|nullable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|nullable
condition|)
block|{
specifier|final
name|Primitive
name|primitive
init|=
name|javaPrimitive
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
condition|)
block|{
return|return
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|primitive
operator|.
name|primitiveClass
argument_list|)
return|;
block|}
block|}
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|type
argument_list|,
name|nullable
argument_list|)
return|;
block|}
specifier|private
name|Primitive
name|javaPrimitive
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
condition|)
block|{
return|return
name|Primitive
operator|.
name|ofBox
argument_list|(
operator|(
operator|(
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
operator|)
name|type
operator|)
operator|.
name|getJavaClass
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Translates a field of an input to an expression. */
specifier|public
interface|interface
name|InputGetter
block|{
name|Expression
name|field
parameter_list|(
name|BlockBuilder
name|list
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
block|}
comment|/** Implementation of {@link InputGetter} that calls    * {@link PhysType#fieldReference}. */
specifier|public
specifier|static
class|class
name|InputGetterImpl
implements|implements
name|InputGetter
block|{
specifier|private
name|List
argument_list|<
name|Pair
argument_list|<
name|Expression
argument_list|,
name|PhysType
argument_list|>
argument_list|>
name|inputs
decl_stmt|;
specifier|public
name|InputGetterImpl
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|Expression
argument_list|,
name|PhysType
argument_list|>
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
specifier|public
name|Expression
name|field
parameter_list|(
name|BlockBuilder
name|list
parameter_list|,
name|int
name|index
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|Expression
argument_list|,
name|PhysType
argument_list|>
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|input
operator|.
name|right
decl_stmt|;
specifier|final
name|Expression
name|left
init|=
name|list
operator|.
name|append
argument_list|(
literal|"current"
operator|+
name|index
argument_list|,
name|input
operator|.
name|left
argument_list|)
decl_stmt|;
return|return
name|physType
operator|.
name|fieldReference
argument_list|(
name|left
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
comment|/** Thrown in the unusual (but not erroneous) situation where the expression    * we are translating is the null literal but we have already checked that    * it is not null. It is easier to throw (and caller will always handle)    * than to check exhaustively beforehand. */
specifier|static
class|class
name|AlwaysNull
extends|extends
name|RuntimeException
block|{
name|AlwaysNull
parameter_list|()
block|{
block|}
block|}
block|}
end_class

begin_comment
comment|// End RexToLixTranslator.java
end_comment

end_unit

