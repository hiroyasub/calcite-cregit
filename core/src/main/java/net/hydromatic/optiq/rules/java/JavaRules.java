begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|SortedMultiMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|trace
operator|.
name|EigenbaseTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Rules and relational operators for the  * {@link EnumerableConvention enumerable calling convention}.  */
end_comment

begin_class
specifier|public
class|class
name|JavaRules
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|EigenbaseTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|BRIDGE_METHODS
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|NO_PARAMS
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|NO_EXPRS
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|ENUMERABLE_JOIN_RULE
init|=
operator|new
name|EnumerableJoinRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|LEFT_RIGHT
init|=
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|}
decl_stmt|;
specifier|private
name|JavaRules
parameter_list|()
block|{
block|}
specifier|private
specifier|static
class|class
name|EnumerableJoinRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableJoinRule
parameter_list|()
block|{
name|super
argument_list|(
name|JoinRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableJoinRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|JoinRel
name|join
init|=
operator|(
name|JoinRel
operator|)
name|rel
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|.
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
operator|)
condition|)
block|{
name|input
operator|=
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newInputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|EnumerableJoinRel
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|join
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|getVariablesStopped
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.JoinRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableJoinRel
extends|extends
name|JoinRelBase
implements|implements
name|EnumerableRel
block|{
specifier|final
name|ImmutableIntList
name|leftKeys
decl_stmt|;
specifier|final
name|ImmutableIntList
name|rightKeys
decl_stmt|;
specifier|protected
name|EnumerableJoinRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leftKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rightKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|RexNode
name|remaining
init|=
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|leftKeys
argument_list|,
name|rightKeys
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"EnumerableJoinRel only supports equi-join"
argument_list|)
throw|;
block|}
name|this
operator|.
name|leftKeys
operator|=
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|leftKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|rightKeys
operator|=
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|rightKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableJoinRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RexNode
name|conditionExpr
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|EnumerableJoinRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|conditionExpr
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
comment|// We always "build" the
name|double
name|rowCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// Joins can be flipped, and for many algorithms, both versions are viable
comment|// and have the same cost. To make the results stable between versions of
comment|// the planner, make one of the versions slightly more expensive.
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|RIGHT
case|:
name|rowCount
operator|=
name|addEpsilon
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|left
operator|.
name|getId
argument_list|()
operator|>
name|right
operator|.
name|getId
argument_list|()
condition|)
block|{
name|rowCount
operator|=
name|addEpsilon
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Cheaper if the smaller number of rows is coming from the RHS.
specifier|final
name|double
name|rightRowCount
init|=
name|right
operator|.
name|getRows
argument_list|()
decl_stmt|;
specifier|final
name|double
name|leftRowCount
init|=
name|left
operator|.
name|getRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|rightRowCount
operator|>
name|leftRowCount
operator|&&
operator|!
name|Double
operator|.
name|isInfinite
argument_list|(
name|rightRowCount
argument_list|)
condition|)
block|{
name|rowCount
operator|*=
name|rightRowCount
operator|/
operator|(
name|leftRowCount
operator|+
literal|1d
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|condition
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|rowCount
operator|*=
literal|10d
expr_stmt|;
block|}
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeCost
argument_list|(
name|rowCount
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|double
name|addEpsilon
parameter_list|(
name|double
name|d
parameter_list|)
block|{
assert|assert
name|d
operator|>=
literal|0d
assert|;
specifier|final
name|double
name|d0
init|=
name|d
decl_stmt|;
if|if
condition|(
name|d
operator|<
literal|10
condition|)
block|{
comment|// For small d, adding 1 would change the value significantly.
name|d
operator|*=
literal|1.001d
expr_stmt|;
if|if
condition|(
name|d
operator|!=
name|d0
condition|)
block|{
return|return
name|d
return|;
block|}
block|}
comment|// For medium d, add 1. Keeps integral values integral.
operator|++
name|d
expr_stmt|;
if|if
condition|(
name|d
operator|!=
name|d0
condition|)
block|{
return|return
name|d
return|;
block|}
comment|// For large d, adding 1 might not change the value. Add .1%.
comment|// If d is NaN, this still will probably not change the value. That's OK.
name|d
operator|*=
literal|1.001d
expr_stmt|;
return|return
name|d
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getRows
parameter_list|()
block|{
specifier|final
name|boolean
name|leftKey
init|=
name|left
operator|.
name|isKey
argument_list|(
name|BitSets
operator|.
name|of
argument_list|(
name|leftKeys
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|rightKey
init|=
name|right
operator|.
name|isKey
argument_list|(
name|BitSets
operator|.
name|of
argument_list|(
name|rightKeys
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|double
name|leftRowCount
init|=
name|left
operator|.
name|getRows
argument_list|()
decl_stmt|;
specifier|final
name|double
name|rightRowCount
init|=
name|right
operator|.
name|getRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|leftKey
operator|&&
name|rightKey
condition|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|leftRowCount
argument_list|,
name|rightRowCount
argument_list|)
return|;
block|}
if|if
condition|(
name|leftKey
condition|)
block|{
return|return
name|rightRowCount
return|;
block|}
if|if
condition|(
name|rightKey
condition|)
block|{
return|return
name|leftRowCount
return|;
block|}
return|return
name|leftRowCount
operator|*
name|rightRowCount
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|leftResult
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|left
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|leftExpression
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"left"
argument_list|,
name|leftResult
operator|.
name|block
argument_list|)
decl_stmt|;
specifier|final
name|Result
name|rightResult
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|1
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|right
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|rightExpression
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"right"
argument_list|,
name|rightResult
operator|.
name|block
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|preferArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|keyPhysType
init|=
name|leftResult
operator|.
name|physType
operator|.
name|project
argument_list|(
name|leftKeys
argument_list|,
name|JavaRowFormat
operator|.
name|LIST
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|append
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|leftExpression
argument_list|,
name|BuiltinMethod
operator|.
name|JOIN
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|rightExpression
argument_list|,
name|leftResult
operator|.
name|physType
operator|.
name|generateAccessor
argument_list|(
name|leftKeys
argument_list|)
argument_list|,
name|rightResult
operator|.
name|physType
operator|.
name|generateAccessor
argument_list|(
name|rightKeys
argument_list|)
argument_list|,
name|generateSelector
argument_list|(
name|physType
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|leftResult
operator|.
name|physType
argument_list|,
name|rightResult
operator|.
name|physType
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|Util
operator|.
name|first
argument_list|(
name|keyPhysType
operator|.
name|comparer
argument_list|()
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
name|joinType
operator|.
name|generatesNullsOnLeft
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
name|joinType
operator|.
name|generatesNullsOnRight
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
name|Expression
name|generateSelector
parameter_list|(
name|PhysType
name|physType
parameter_list|,
name|List
argument_list|<
name|PhysType
argument_list|>
name|inputPhysTypes
parameter_list|)
block|{
comment|// A parameter for each input.
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ParameterExpression
argument_list|>
argument_list|()
decl_stmt|;
comment|// Generate all fields.
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|PhysType
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|inputPhysTypes
argument_list|)
control|)
block|{
specifier|final
name|PhysType
name|inputPhysType
init|=
name|ord
operator|.
name|e
operator|.
name|makeNullable
argument_list|(
name|joinType
operator|.
name|generatesNullsOn
argument_list|(
name|ord
operator|.
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
name|LEFT_RIGHT
index|[
name|ord
operator|.
name|i
index|]
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|inputPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|expression
init|=
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|parameter
argument_list|,
name|i
argument_list|,
name|physType
operator|.
name|getJavaFieldType
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinType
operator|.
name|generatesNullsOn
argument_list|(
name|ord
operator|.
name|i
argument_list|)
condition|)
block|{
name|expression
operator|=
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|parameter
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
name|expressions
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|physType
operator|.
name|record
argument_list|(
name|expressions
argument_list|)
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
comment|/**    * Utilities for generating programs in the Enumerable (functional)    * style.    */
specifier|public
specifier|static
class|class
name|EnumUtil
block|{
comment|/** Declares a method that overrides another method. */
specifier|public
specifier|static
name|MethodDeclaration
name|overridingMethodDecl
parameter_list|(
name|Method
name|method
parameter_list|,
name|Iterable
argument_list|<
name|ParameterExpression
argument_list|>
name|parameters
parameter_list|,
name|BlockStatement
name|body
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|ABSTRACT
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|parameters
argument_list|,
name|body
argument_list|)
return|;
block|}
specifier|static
name|Type
name|javaClass
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
specifier|final
name|Type
name|clazz
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|instanceof
name|Class
condition|?
name|clazz
else|:
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|static
name|Class
name|javaRowClass
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isStruct
argument_list|()
operator|&&
name|type
operator|.
name|getFieldCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Type
name|clazz
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|instanceof
name|Class
condition|?
operator|(
name|Class
operator|)
name|clazz
else|:
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|static
name|List
argument_list|<
name|Type
argument_list|>
name|fieldTypes
parameter_list|(
specifier|final
name|JavaTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|RelDataType
name|inputRowType
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|)
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|Type
argument_list|>
argument_list|()
block|{
specifier|public
name|Type
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|EnumUtil
operator|.
name|javaClass
argument_list|(
name|typeFactory
argument_list|,
name|inputRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|argList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|argList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|static
name|List
argument_list|<
name|AggImplementor
argument_list|>
name|getImplementors
parameter_list|(
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|AggImplementor
argument_list|>
name|implementors
init|=
operator|new
name|ArrayList
argument_list|<
name|AggImplementor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
name|AggImplementor
name|implementor2
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot implement aggregate "
operator|+
name|aggCall
argument_list|)
throw|;
block|}
name|implementors
operator|.
name|add
argument_list|(
name|implementor2
argument_list|)
expr_stmt|;
block|}
return|return
name|implementors
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.TableAccessRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableTableAccessRel
extends|extends
name|TableAccessRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|Class
name|elementType
decl_stmt|;
specifier|public
name|EnumerableTableAccessRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|Class
name|elementType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
name|this
operator|.
name|elementType
operator|=
name|elementType
expr_stmt|;
block|}
specifier|private
name|Expression
name|getExpression
parameter_list|()
block|{
name|Expression
name|expression
init|=
name|table
operator|.
name|getExpression
argument_list|(
name|Queryable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Type
name|type
init|=
name|expression
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Types
operator|.
name|isArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|Types
operator|.
name|toClass
argument_list|(
name|type
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|expression
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|AS_LIST
operator|.
name|method
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
name|expression
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|AS_ENUMERABLE
operator|.
name|method
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Types
operator|.
name|isAssignableFrom
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|type
argument_list|)
operator|&&
operator|!
name|Types
operator|.
name|isAssignableFrom
argument_list|(
name|Enumerable
operator|.
name|class
argument_list|,
name|type
argument_list|)
condition|)
block|{
name|expression
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|AS_ENUMERABLE2
operator|.
name|method
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Types
operator|.
name|isAssignableFrom
argument_list|(
name|Queryable
operator|.
name|class
argument_list|,
name|type
argument_list|)
condition|)
block|{
comment|// Queryable extends Enumerable, but it's too "clever", so we call
comment|// Queryable.asEnumerable so that operations such as take(int) will be
comment|// evaluated directly.
name|expression
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|expression
argument_list|,
name|BuiltinMethod
operator|.
name|QUERYABLE_AS_ENUMERABLE
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
specifier|private
name|JavaRowFormat
name|format
parameter_list|()
block|{
if|if
condition|(
name|Object
index|[]
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
condition|)
block|{
return|return
name|JavaRowFormat
operator|.
name|ARRAY
return|;
block|}
else|else
block|{
return|return
name|JavaRowFormat
operator|.
name|CUSTOM
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableTableAccessRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|elementType
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
comment|// Note that representation is ARRAY. This assumes that the table
comment|// returns a Object[] for each record. Actually a Table<T> can
comment|// return any type T. And, if it is a JdbcTable, we'd like to be
comment|// able to generate alternate accessors that return e.g. synthetic
comment|// records {T0 f0; T1 f1; ...} and don't box every primitive value.
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|format
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|expression
init|=
name|getExpression
argument_list|()
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|Blocks
operator|.
name|toBlock
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableProjectRule
name|ENUMERABLE_PROJECT_RULE
init|=
operator|new
name|EnumerableProjectRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert a {@link ProjectRel} to an    * {@link EnumerableProjectRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableProjectRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableProjectRule
parameter_list|()
block|{
name|super
argument_list|(
name|ProjectRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableProjectRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|ProjectRel
name|project
init|=
operator|(
name|ProjectRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|RexMultisetUtil
operator|.
name|containsMultiset
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|||
name|RexOver
operator|.
name|containsOver
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|EnumerableProjectRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|convert
argument_list|(
name|project
operator|.
name|getChild
argument_list|()
argument_list|,
name|project
operator|.
name|getChild
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
name|ProjectRelBase
operator|.
name|Flags
operator|.
name|BOXED
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.ProjectRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableProjectRel
extends|extends
name|ProjectRelBase
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableProjectRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exps
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|exps
argument_list|,
name|rowType
argument_list|,
name|flags
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
block|}
specifier|public
name|EnumerableProjectRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exps
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
return|return
operator|new
name|EnumerableProjectRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|exps
argument_list|,
name|rowType
argument_list|,
name|flags
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
comment|// EnumerableCalcRel is always better
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableFilterRule
name|ENUMERABLE_FILTER_RULE
init|=
operator|new
name|EnumerableFilterRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert a {@link FilterRel} to an    * {@link EnumerableFilterRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableFilterRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableFilterRule
parameter_list|()
block|{
name|super
argument_list|(
name|FilterRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableFilterRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|FilterRel
name|filter
init|=
operator|(
name|FilterRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|RexMultisetUtil
operator|.
name|containsMultiset
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|||
name|RexOver
operator|.
name|containsOver
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|EnumerableFilterRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|convert
argument_list|(
name|filter
operator|.
name|getChild
argument_list|()
argument_list|,
name|filter
operator|.
name|getChild
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.FilterRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableFilterRel
extends|extends
name|FilterRelBase
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableFilterRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|condition
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableFilterRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|condition
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
comment|// EnumerableCalcRel is always better
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableCalcRule
name|ENUMERABLE_CALC_RULE
init|=
operator|new
name|EnumerableCalcRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert a {@link CalcRel} to an    * {@link EnumerableCalcRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableCalcRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableCalcRule
parameter_list|()
block|{
name|super
argument_list|(
name|CalcRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableCalcRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|CalcRel
name|calc
init|=
operator|(
name|CalcRel
operator|)
name|rel
decl_stmt|;
comment|// If there's a multiset, let FarragoMultisetSplitter work on it
comment|// first.
specifier|final
name|RexProgram
name|program
init|=
name|calc
operator|.
name|getProgram
argument_list|()
decl_stmt|;
if|if
condition|(
name|RexMultisetUtil
operator|.
name|containsMultiset
argument_list|(
name|program
argument_list|)
operator|||
name|program
operator|.
name|containsAggs
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|EnumerableCalcRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|convert
argument_list|(
name|calc
operator|.
name|getChild
argument_list|()
argument_list|,
name|calc
operator|.
name|getChild
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|calc
operator|.
name|getRowType
argument_list|()
argument_list|,
name|program
argument_list|,
name|calc
operator|.
name|getCollationList
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.CalcRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableCalcRel
extends|extends
name|CalcRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|RexProgram
name|program
decl_stmt|;
specifier|public
name|EnumerableCalcRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|rowType
argument_list|,
name|program
argument_list|,
name|collationList
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
assert|assert
operator|!
name|program
operator|.
name|containsAggs
argument_list|()
assert|;
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|program
operator|.
name|getOutputRowType
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableCalcRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|)
block|{
comment|// we do not need to copy program; it is immutable
return|return
operator|new
name|EnumerableCalcRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|program
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
name|program
argument_list|,
name|collationList
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|implementor
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|,
name|pref
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|prefer
argument_list|(
name|result
operator|.
name|format
argument_list|)
argument_list|)
decl_stmt|;
comment|// final Enumerable<Employee> inputEnumerable =<<child impl>>;
comment|// return new Enumerable<IntString>() {
comment|//     Enumerator<IntString> enumerator() {
comment|//         return new Enumerator<IntString>() {
comment|//             public void reset() {
comment|// ...
name|Type
name|outputJavaType
init|=
name|physType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|enumeratorType
init|=
name|Types
operator|.
name|of
argument_list|(
name|Enumerator
operator|.
name|class
argument_list|,
name|outputJavaType
argument_list|)
decl_stmt|;
name|Type
name|inputJavaType
init|=
name|result
operator|.
name|physType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
name|ParameterExpression
name|inputEnumerator
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Types
operator|.
name|of
argument_list|(
name|Enumerator
operator|.
name|class
argument_list|,
name|inputJavaType
argument_list|)
argument_list|,
literal|"inputEnumerator"
argument_list|)
decl_stmt|;
name|Expression
name|input
init|=
name|RexToLixTranslator
operator|.
name|convert
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_CURRENT
operator|.
name|method
argument_list|)
argument_list|,
name|inputJavaType
argument_list|)
decl_stmt|;
name|BlockStatement
name|moveNextBody
decl_stmt|;
if|if
condition|(
name|program
operator|.
name|getCondition
argument_list|()
operator|==
literal|null
condition|)
block|{
name|moveNextBody
operator|=
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_MOVE_NEXT
operator|.
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BlockBuilder
name|builder2
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|condition
init|=
name|RexToLixTranslator
operator|.
name|translateCondition
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|builder2
argument_list|,
operator|new
name|RexToLixTranslator
operator|.
name|InputGetterImpl
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|result
operator|.
name|physType
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|condition
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|moveNextBody
operator|=
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|while_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_MOVE_NEXT
operator|.
name|method
argument_list|)
argument_list|,
name|builder2
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|,
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockBuilder
name|builder3
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
name|RexToLixTranslator
operator|.
name|translateProjects
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|builder3
argument_list|,
name|physType
argument_list|,
operator|new
name|RexToLixTranslator
operator|.
name|InputGetterImpl
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|result
operator|.
name|physType
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder3
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|physType
operator|.
name|record
argument_list|(
name|expressions
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BlockStatement
name|currentBody
init|=
name|builder3
operator|.
name|toBlock
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|inputEnumerable
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"inputEnumerable"
argument_list|,
name|result
operator|.
name|block
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|body
init|=
name|Expressions
operator|.
name|new_
argument_list|(
name|enumeratorType
argument_list|,
name|NO_EXPRS
argument_list|,
name|Expressions
operator|.
expr|<
name|MemberDeclaration
operator|>
name|list
argument_list|(
name|Expressions
operator|.
name|fieldDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
operator||
name|Modifier
operator|.
name|FINAL
argument_list|,
name|inputEnumerator
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerable
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERABLE_ENUMERATOR
operator|.
name|method
argument_list|)
argument_list|)
argument_list|,
name|EnumUtil
operator|.
name|overridingMethodDecl
argument_list|(
name|BuiltinMethod
operator|.
name|ENUMERATOR_RESET
operator|.
name|method
argument_list|,
name|NO_PARAMS
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_RESET
operator|.
name|method
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|EnumUtil
operator|.
name|overridingMethodDecl
argument_list|(
name|BuiltinMethod
operator|.
name|ENUMERATOR_MOVE_NEXT
operator|.
name|method
argument_list|,
name|NO_PARAMS
argument_list|,
name|moveNextBody
argument_list|)
argument_list|,
name|EnumUtil
operator|.
name|overridingMethodDecl
argument_list|(
name|BuiltinMethod
operator|.
name|ENUMERATOR_CLOSE
operator|.
name|method
argument_list|,
name|NO_PARAMS
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|inputEnumerator
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERATOR_CLOSE
operator|.
name|method
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|BRIDGE_METHODS
condition|?
name|Object
operator|.
name|class
else|:
name|outputJavaType
argument_list|,
literal|"current"
argument_list|,
name|NO_PARAMS
argument_list|,
name|currentBody
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|BuiltinMethod
operator|.
name|ABSTRACT_ENUMERABLE_CTOR
operator|.
name|constructor
argument_list|,
comment|// TODO: generics
comment|//   Collections.singletonList(inputRowType),
name|NO_EXPRS
argument_list|,
name|Arrays
operator|.
expr|<
name|MemberDeclaration
operator|>
name|asList
argument_list|(
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|enumeratorType
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERABLE_ENUMERATOR
operator|.
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|NO_PARAMS
argument_list|,
name|Blocks
operator|.
name|toFunctionBlock
argument_list|(
name|body
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RexProgram
name|getProgram
parameter_list|()
block|{
return|return
name|program
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableAggregateRule
name|ENUMERABLE_AGGREGATE_RULE
init|=
operator|new
name|EnumerableAggregateRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert an {@link org.eigenbase.rel.AggregateRel} to an    * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableAggregateRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableAggregateRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableAggregateRule
parameter_list|()
block|{
name|super
argument_list|(
name|AggregateRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableAggregateRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|AggregateRel
name|agg
init|=
operator|(
name|AggregateRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|agg
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|EnumerableAggregateRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|agg
operator|.
name|getChild
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|agg
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|agg
operator|.
name|getAggCallList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.AggregateRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableAggregateRel
extends|extends
name|AggregateRelBase
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Aggregation
argument_list|>
name|SUPPORTED_AGGREGATIONS
init|=
name|Arrays
operator|.
expr|<
name|Aggregation
operator|>
name|asList
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
name|SqlStdOperatorTable
operator|.
name|MIN
argument_list|,
name|SqlStdOperatorTable
operator|.
name|MAX
argument_list|,
name|SqlStdOperatorTable
operator|.
name|SUM
argument_list|)
decl_stmt|;
specifier|public
name|EnumerableAggregateRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|BitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"distinct aggregation not supported"
argument_list|)
throw|;
block|}
name|AggImplementor
name|implementor2
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"aggregation "
operator|+
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|EnumerableAggregateRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|BitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|EnumerableAggregateRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|implementor
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexToLixTranslator
name|translator
init|=
name|RexToLixTranslator
operator|.
name|forAggregation
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
name|RelDataType
name|inputRowType
init|=
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|preferCustom
argument_list|()
argument_list|)
decl_stmt|;
comment|// final Enumerable<Employee> child =<<child impl>>;
comment|// Function1<Employee, Integer> keySelector =
comment|//     new Function1<Employee, Integer>() {
comment|//         public Integer apply(Employee a0) {
comment|//             return a0.deptno;
comment|//         }
comment|//     };
comment|// Function1<Employee, Object[]> accumulatorInitializer =
comment|//     new Function1<Employee, Object[]>() {
comment|//         public Object[] apply(Employee a0) {
comment|//             return new Object[] {0, 0};
comment|//         }
comment|//     };
comment|// Function2<Object[], Employee, Object[]> accumulatorAdder =
comment|//     new Function2<Object[], Employee, Object[]>() {
comment|//         public Object[] apply(Object[] a1, Employee a0) {
comment|//              a1[0] = ((Integer) a1[0]) + 1;
comment|//              a1[1] = ((Integer) a1[1]) + a0.salary;
comment|//             return a1;
comment|//         }
comment|//     };
comment|// Function2<Integer, Object[], Object[]> resultSelector =
comment|//     new Function2<Integer, Object[], Object[]>() {
comment|//         public Object[] apply(Integer a0, Object[] a1) {
comment|//             return new Object[] { a0, a1[0], a1[1] };
comment|//         }
comment|//     };
comment|// return childEnumerable
comment|//     .groupBy(
comment|//        keySelector, accumulatorInitializer, accumulatorAdder,
comment|//        resultSelector);
comment|//
comment|// or, if key has 0 columns,
comment|//
comment|// return childEnumerable
comment|//     .aggregate(
comment|//       accumulatorInitializer.apply(),
comment|//       accumulatorAdder,
comment|//       resultSelector);
comment|//
comment|// with a slightly different resultSelector; or if there are no aggregate
comment|// functions
comment|//
comment|// final Enumerable<Employee> child =<<child impl>>;
comment|// Function1<Employee, Integer> keySelector =
comment|//     new Function1<Employee, Integer>() {
comment|//         public Integer apply(Employee a0) {
comment|//             return a0.deptno;
comment|//         }
comment|//     };
comment|// EqualityComparer<Employee> equalityComparer =
comment|//     new EqualityComparer<Employee>() {
comment|//         boolean equal(Employee a0, Employee a1) {
comment|//             return a0.deptno;
comment|//         }
comment|//     };
comment|// return child
comment|//     .distinct(equalityComparer);
name|PhysType
name|inputPhysType
init|=
name|result
operator|.
name|physType
decl_stmt|;
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"a0"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|keyExpressions
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
name|PhysType
name|keyPhysType
init|=
name|inputPhysType
operator|.
name|project
argument_list|(
name|BitSets
operator|.
name|toList
argument_list|(
name|groupSet
argument_list|)
argument_list|,
name|JavaRowFormat
operator|.
name|LIST
argument_list|)
decl_stmt|;
specifier|final
name|int
name|keyArity
init|=
name|groupSet
operator|.
name|cardinality
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|groupKey
range|:
name|BitSets
operator|.
name|toIter
argument_list|(
name|groupSet
argument_list|)
control|)
block|{
name|keyExpressions
operator|.
name|add
argument_list|(
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|parameter
argument_list|,
name|groupKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Expression
name|keySelector
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"keySelector"
argument_list|,
name|inputPhysType
operator|.
name|generateSelector
argument_list|(
name|parameter
argument_list|,
name|BitSets
operator|.
name|toList
argument_list|(
name|groupSet
argument_list|)
argument_list|,
name|keyPhysType
operator|.
name|getFormat
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggImplementor
argument_list|>
name|implementors
init|=
name|EnumUtil
operator|.
name|getImplementors
argument_list|(
name|aggCalls
argument_list|)
decl_stmt|;
comment|// Function0<Object[]> accumulatorInitializer =
comment|//     new Function0<Object[]>() {
comment|//         public Object[] apply() {
comment|//             return new Object[] {0, 0};
comment|//         }
comment|//     };
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|initExpressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|AggImplementor
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
name|initExpressions
operator|.
name|add
argument_list|(
name|ord
operator|.
name|e
operator|.
name|right
operator|.
name|implementInit
argument_list|(
name|translator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|physType
operator|.
name|fieldClass
argument_list|(
name|keyArity
operator|+
name|ord
operator|.
name|i
argument_list|)
argument_list|,
name|EnumUtil
operator|.
name|fieldTypes
argument_list|(
name|typeFactory
argument_list|,
name|inputRowType
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PhysType
name|accPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|typeFactory
operator|.
name|createSyntheticType
argument_list|(
operator|new
name|AbstractList
argument_list|<
name|Type
argument_list|>
argument_list|()
block|{
specifier|public
name|Type
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|initExpressions
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|initExpressions
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|accumulatorInitializer
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"accumulatorInitializer"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function0
operator|.
name|class
argument_list|,
name|accPhysType
operator|.
name|record
argument_list|(
name|initExpressions
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Function2<Object[], Employee, Object[]> accumulatorAdder =
comment|//     new Function2<Object[], Employee, Object[]>() {
comment|//         public Object[] apply(Object[] acc, Employee in) {
comment|//              acc[0] = ((Integer) acc[0]) + 1;
comment|//              acc[1] = ((Integer) acc[1]) + in.salary;
comment|//             return acc;
comment|//         }
comment|//     };
name|BlockBuilder
name|builder2
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|inParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|acc_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|accPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"acc"
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|AggImplementor
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
specifier|final
name|Type
name|type
init|=
name|initExpressions
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
operator|.
name|type
decl_stmt|;
specifier|final
name|Expression
name|accumulator
init|=
name|accPhysType
operator|.
name|fieldReference
argument_list|(
name|acc_
argument_list|,
name|ord
operator|.
name|i
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|arg
range|:
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getArgList
argument_list|()
control|)
block|{
if|if
condition|(
name|inputPhysType
operator|.
name|fieldNullable
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|conditions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|inParameter
argument_list|,
name|arg
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Statement
name|assign
init|=
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|accumulator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|right
operator|.
name|implementAdd
argument_list|(
name|translator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|type
argument_list|,
name|accumulator
argument_list|)
argument_list|,
name|inputPhysType
operator|.
name|accessors
argument_list|(
name|inParameter
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|conditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder2
operator|.
name|add
argument_list|(
name|assign
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|Expressions
operator|.
name|foldAnd
argument_list|(
name|conditions
argument_list|)
argument_list|,
name|assign
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder2
operator|.
name|add
argument_list|(
name|acc_
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|accumulatorAdder
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"accumulatorAdder"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|builder2
operator|.
name|toBlock
argument_list|()
argument_list|,
name|acc_
argument_list|,
name|inParameter
argument_list|)
argument_list|)
decl_stmt|;
comment|// Function2<Integer, Object[], Object[]> resultSelector =
comment|//     new Function2<Integer, Object[], Object[]>() {
comment|//         public Object[] apply(Integer key, Object[] acc) {
comment|//             return new Object[] { key, acc[0], acc[1] };
comment|//         }
comment|//     };
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|results
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|key_
decl_stmt|;
if|if
condition|(
name|keyArity
operator|==
literal|0
condition|)
block|{
name|key_
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Type
name|keyType
init|=
name|keyPhysType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
name|key_
operator|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|keyType
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|keyArity
condition|;
name|j
operator|++
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|keyPhysType
operator|.
name|fieldReference
argument_list|(
name|key_
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|AggImplementor
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|ord
operator|.
name|e
operator|.
name|right
operator|.
name|implementResult
argument_list|(
name|translator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|accPhysType
operator|.
name|fieldReference
argument_list|(
name|acc_
argument_list|,
name|ord
operator|.
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PhysType
name|resultPhysType
init|=
name|physType
decl_stmt|;
if|if
condition|(
name|keyArity
operator|==
literal|0
condition|)
block|{
specifier|final
name|Expression
name|resultSelector
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"resultSelector"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function1
operator|.
name|class
argument_list|,
name|resultPhysType
operator|.
name|record
argument_list|(
name|results
argument_list|)
argument_list|,
name|acc_
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|SINGLETON_ENUMERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltinMethod
operator|.
name|AGGREGATE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|accumulatorInitializer
argument_list|,
literal|"apply"
argument_list|)
argument_list|,
name|accumulatorAdder
argument_list|,
name|resultSelector
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|aggCalls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltinMethod
operator|.
name|DISTINCT
operator|.
name|method
argument_list|,
name|Expressions
operator|.
expr|<
name|Expression
operator|>
name|list
argument_list|()
operator|.
name|appendIfNotNull
argument_list|(
name|keyPhysType
operator|.
name|comparer
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Expression
name|resultSelector
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"resultSelector"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|resultPhysType
operator|.
name|record
argument_list|(
name|results
argument_list|)
argument_list|,
name|key_
argument_list|,
name|acc_
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltinMethod
operator|.
name|GROUP_BY2
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|keySelector
argument_list|,
name|accumulatorInitializer
argument_list|,
name|accumulatorAdder
argument_list|,
name|resultSelector
argument_list|)
operator|.
name|appendIfNotNull
argument_list|(
name|keyPhysType
operator|.
name|comparer
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableSortRule
name|ENUMERABLE_SORT_RULE
init|=
operator|new
name|EnumerableSortRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert an {@link org.eigenbase.rel.SortRel} to an    * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableSortRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableSortRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableSortRule
parameter_list|()
block|{
name|super
argument_list|(
name|SortRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableSortRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|SortRel
name|sort
init|=
operator|(
name|SortRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|offset
operator|!=
literal|null
operator|||
name|sort
operator|.
name|fetch
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|sort
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|sort
operator|.
name|getChild
argument_list|()
decl_stmt|;
return|return
operator|new
name|EnumerableSortRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.SortRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableSortRel
extends|extends
name|SortRel
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableSortRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|child
operator|.
name|getConvention
argument_list|()
assert|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableSortRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|newInput
parameter_list|,
name|RelCollation
name|newCollation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
return|return
operator|new
name|EnumerableSortRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|newInput
argument_list|,
name|newCollation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|,
name|pref
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|result
operator|.
name|format
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
name|PhysType
name|inputPhysType
init|=
name|result
operator|.
name|physType
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|pair
init|=
name|inputPhysType
operator|.
name|generateCollationKey
argument_list|(
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltinMethod
operator|.
name|ORDER_BY
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|builder
operator|.
name|append
argument_list|(
literal|"keySelector"
argument_list|,
name|pair
operator|.
name|left
argument_list|)
argument_list|)
operator|.
name|appendIfNotNull
argument_list|(
name|builder
operator|.
name|appendIfNotNull
argument_list|(
literal|"comparator"
argument_list|,
name|pair
operator|.
name|right
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableLimitRule
name|ENUMERABLE_LIMIT_RULE
init|=
operator|new
name|EnumerableLimitRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert an {@link org.eigenbase.rel.SortRel} that has    * {@code offset} or {@code fetch} set to an    * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableLimitRel}    * on top of a "pure" {@code SortRel} that has no offset or fetch.    */
specifier|private
specifier|static
class|class
name|EnumerableLimitRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|EnumerableLimitRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|SortRel
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
literal|"EnumerableLimitRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|SortRel
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|offset
operator|==
literal|null
operator|&&
name|sort
operator|.
name|fetch
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|sort
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|input
init|=
name|sort
operator|.
name|getChild
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sort
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Create a sort with the same sort key, but no offset or fetch.
name|input
operator|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|input
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|RelNode
name|x
init|=
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|EnumerableLimitRel
argument_list|(
name|sort
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|x
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Relational expression that applies a limit and/or offset to its input. */
specifier|public
specifier|static
class|class
name|EnumerableLimitRel
extends|extends
name|SingleRel
implements|implements
name|EnumerableRel
block|{
specifier|private
specifier|final
name|RexNode
name|offset
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|fetch
decl_stmt|;
specifier|public
name|EnumerableLimitRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|fetch
operator|=
name|fetch
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|child
operator|.
name|getConvention
argument_list|()
assert|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableLimitRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableLimitRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|newInputs
argument_list|)
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|itemIf
argument_list|(
literal|"offset"
argument_list|,
name|offset
argument_list|,
name|offset
operator|!=
literal|null
argument_list|)
operator|.
name|itemIf
argument_list|(
literal|"fetch"
argument_list|,
name|fetch
argument_list|,
name|fetch
operator|!=
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|,
name|pref
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|result
operator|.
name|format
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
name|Expression
name|v
init|=
name|childExp
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|v
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"offset"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|v
argument_list|,
name|BuiltinMethod
operator|.
name|SKIP
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|offset
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetch
operator|!=
literal|null
condition|)
block|{
name|v
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"fetch"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|v
argument_list|,
name|BuiltinMethod
operator|.
name|TAKE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|fetch
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableUnionRule
name|ENUMERABLE_UNION_RULE
init|=
operator|new
name|EnumerableUnionRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert an {@link org.eigenbase.rel.UnionRel} to an    * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableUnionRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableUnionRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableUnionRule
parameter_list|()
block|{
name|super
argument_list|(
name|UnionRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableUnionRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|UnionRel
name|union
init|=
operator|(
name|UnionRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|EnumerableConvention
name|out
init|=
name|EnumerableConvention
operator|.
name|INSTANCE
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|union
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnumerableUnionRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|union
operator|.
name|getInputs
argument_list|()
argument_list|,
name|out
argument_list|)
argument_list|,
name|union
operator|.
name|all
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.UnionRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableUnionRel
extends|extends
name|UnionRelBase
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableUnionRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EnumerableUnionRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|EnumerableUnionRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|unionExp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|inputs
argument_list|)
control|)
block|{
name|EnumerableRel
name|input
init|=
operator|(
name|EnumerableRel
operator|)
name|ord
operator|.
name|e
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
name|ord
operator|.
name|i
argument_list|,
name|input
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|unionExp
operator|==
literal|null
condition|)
block|{
name|unionExp
operator|=
name|childExp
expr_stmt|;
block|}
else|else
block|{
name|unionExp
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|unionExp
argument_list|,
name|all
condition|?
name|BuiltinMethod
operator|.
name|CONCAT
operator|.
name|method
else|:
name|BuiltinMethod
operator|.
name|UNION
operator|.
name|method
argument_list|,
name|childExp
argument_list|)
expr_stmt|;
block|}
comment|// Once the first input has chosen its format, ask for the same for
comment|// other inputs.
name|pref
operator|=
name|pref
operator|.
name|of
argument_list|(
name|result
operator|.
name|format
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|unionExp
argument_list|)
expr_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|prefer
argument_list|(
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableIntersectRule
name|ENUMERABLE_INTERSECT_RULE
init|=
operator|new
name|EnumerableIntersectRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert an {@link org.eigenbase.rel.IntersectRel} to an    * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableIntersectRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableIntersectRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableIntersectRule
parameter_list|()
block|{
name|super
argument_list|(
name|IntersectRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableIntersectRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|IntersectRel
name|intersect
init|=
operator|(
name|IntersectRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|intersect
operator|.
name|all
condition|)
block|{
return|return
literal|null
return|;
comment|// INTERSECT ALL not implemented
block|}
specifier|final
name|EnumerableConvention
name|out
init|=
name|EnumerableConvention
operator|.
name|INSTANCE
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|intersect
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnumerableIntersectRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|intersect
operator|.
name|getInputs
argument_list|()
argument_list|,
name|out
argument_list|)
argument_list|,
name|intersect
operator|.
name|all
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.IntersectRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableIntersectRel
extends|extends
name|IntersectRelBase
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableIntersectRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|all
assert|;
block|}
specifier|public
name|EnumerableIntersectRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|EnumerableIntersectRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|intersectExp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|inputs
argument_list|)
control|)
block|{
name|EnumerableRel
name|input
init|=
operator|(
name|EnumerableRel
operator|)
name|ord
operator|.
name|e
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
name|ord
operator|.
name|i
argument_list|,
name|input
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|intersectExp
operator|==
literal|null
condition|)
block|{
name|intersectExp
operator|=
name|childExp
expr_stmt|;
block|}
else|else
block|{
name|intersectExp
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|intersectExp
argument_list|,
name|all
condition|?
name|BuiltinMethod
operator|.
name|CONCAT
operator|.
name|method
else|:
name|BuiltinMethod
operator|.
name|INTERSECT
operator|.
name|method
argument_list|,
name|childExp
argument_list|)
expr_stmt|;
block|}
comment|// Once the first input has chosen its format, ask for the same for
comment|// other inputs.
name|pref
operator|=
name|pref
operator|.
name|of
argument_list|(
name|result
operator|.
name|format
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|intersectExp
argument_list|)
expr_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|prefer
argument_list|(
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableMinusRule
name|ENUMERABLE_MINUS_RULE
init|=
operator|new
name|EnumerableMinusRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert an {@link org.eigenbase.rel.MinusRel} to an    * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableMinusRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableMinusRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableMinusRule
parameter_list|()
block|{
name|super
argument_list|(
name|MinusRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableMinusRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|MinusRel
name|minus
init|=
operator|(
name|MinusRel
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|minus
operator|.
name|all
condition|)
block|{
return|return
literal|null
return|;
comment|// EXCEPT ALL not implemented
block|}
specifier|final
name|EnumerableConvention
name|out
init|=
name|EnumerableConvention
operator|.
name|INSTANCE
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnumerableMinusRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|minus
operator|.
name|getInputs
argument_list|()
argument_list|,
name|out
argument_list|)
argument_list|,
name|minus
operator|.
name|all
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.MinusRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableMinusRel
extends|extends
name|MinusRelBase
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableMinusRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|all
assert|;
block|}
specifier|public
name|EnumerableMinusRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|EnumerableMinusRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|minusExp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|inputs
argument_list|)
control|)
block|{
name|EnumerableRel
name|input
init|=
operator|(
name|EnumerableRel
operator|)
name|ord
operator|.
name|e
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
name|ord
operator|.
name|i
argument_list|,
name|input
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|minusExp
operator|==
literal|null
condition|)
block|{
name|minusExp
operator|=
name|childExp
expr_stmt|;
block|}
else|else
block|{
name|minusExp
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|minusExp
argument_list|,
name|BuiltinMethod
operator|.
name|EXCEPT
operator|.
name|method
argument_list|,
name|childExp
argument_list|)
expr_stmt|;
block|}
comment|// Once the first input has chosen its format, ask for the same for
comment|// other inputs.
name|pref
operator|=
name|pref
operator|.
name|of
argument_list|(
name|result
operator|.
name|format
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|minusExp
argument_list|)
expr_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|prefer
argument_list|(
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableTableModificationRule
name|ENUMERABLE_TABLE_MODIFICATION_RULE
init|=
operator|new
name|EnumerableTableModificationRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|EnumerableTableModificationRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableTableModificationRule
parameter_list|()
block|{
name|super
argument_list|(
name|TableModificationRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableTableModificationRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|TableModificationRel
name|modify
init|=
operator|(
name|TableModificationRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|modify
operator|.
name|getTable
argument_list|()
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|modify
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnumerableTableModificationRel
argument_list|(
name|modify
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|modify
operator|.
name|getTable
argument_list|()
argument_list|,
name|modify
operator|.
name|getCatalogReader
argument_list|()
argument_list|,
name|convert
argument_list|(
name|modify
operator|.
name|getChild
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|modify
operator|.
name|getOperation
argument_list|()
argument_list|,
name|modify
operator|.
name|getUpdateColumnList
argument_list|()
argument_list|,
name|modify
operator|.
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.TableModificationRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableTableModificationRel
extends|extends
name|TableModificationRelBase
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableTableModificationRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|Prepare
operator|.
name|CatalogReader
name|catalogReader
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|updateColumnList
parameter_list|,
name|boolean
name|flattened
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|table
argument_list|,
name|catalogReader
argument_list|,
name|child
argument_list|,
name|operation
argument_list|,
name|updateColumnList
argument_list|,
name|flattened
argument_list|)
expr_stmt|;
assert|assert
name|child
operator|.
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO: user error in validator
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableTableModificationRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|getCatalogReader
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|getOperation
argument_list|()
argument_list|,
name|getUpdateColumnList
argument_list|()
argument_list|,
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|collectionParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Collection
operator|.
name|class
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
literal|"collection"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|expression
init|=
name|table
operator|.
name|getExpression
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|expression
operator|!=
literal|null
assert|;
comment|// TODO: user error in validator
assert|assert
name|ModifiableTable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|Types
operator|.
name|toClass
argument_list|(
name|expression
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|:
name|expression
operator|.
name|getType
argument_list|()
assert|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|collectionParameter
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|expression
argument_list|,
name|BuiltinMethod
operator|.
name|MODIFIABLE_TABLE_GET_MODIFIABLE_COLLECTION
operator|.
name|method
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|countParameter
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"count"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|collectionParameter
argument_list|,
literal|"size"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Expression
name|convertedChildExp
decl_stmt|;
if|if
condition|(
operator|!
name|getChild
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|equals
argument_list|(
name|getRowType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
operator|(
name|JavaTypeFactory
operator|)
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|table
operator|.
name|getRowType
argument_list|()
argument_list|,
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|expressionList
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|PhysType
name|childPhysType
init|=
name|result
operator|.
name|physType
decl_stmt|;
specifier|final
name|ParameterExpression
name|o_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|childPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"o"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|childPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|expressionList
operator|.
name|add
argument_list|(
name|childPhysType
operator|.
name|fieldReference
argument_list|(
name|o_
argument_list|,
name|i
argument_list|,
name|physType
operator|.
name|getJavaFieldType
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|convertedChildExp
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"convertedChild"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltinMethod
operator|.
name|SELECT
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|physType
operator|.
name|record
argument_list|(
name|expressionList
argument_list|)
argument_list|,
name|o_
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|convertedChildExp
operator|=
name|childExp
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|convertedChildExp
argument_list|,
literal|"into"
argument_list|,
name|collectionParameter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|SINGLETON_ENUMERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|subtract
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|collectionParameter
argument_list|,
literal|"size"
argument_list|)
argument_list|,
name|countParameter
argument_list|)
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|==
name|Prefer
operator|.
name|ARRAY
condition|?
name|JavaRowFormat
operator|.
name|ARRAY
else|:
name|JavaRowFormat
operator|.
name|SCALAR
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableValuesRule
name|ENUMERABLE_VALUES_RULE
init|=
operator|new
name|EnumerableValuesRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|EnumerableValuesRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableValuesRule
parameter_list|()
block|{
name|super
argument_list|(
name|ValuesRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableValuesRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|ValuesRel
name|valuesRel
init|=
operator|(
name|ValuesRel
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|EnumerableValuesRel
argument_list|(
name|valuesRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getTuples
argument_list|()
argument_list|,
name|valuesRel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableOneRowRule
name|ENUMERABLE_ONE_ROW_RULE
init|=
operator|new
name|EnumerableOneRowRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|EnumerableOneRowRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableOneRowRule
parameter_list|()
block|{
name|super
argument_list|(
name|OneRowRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableOneRowRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|OneRowRel
name|oneRow
init|=
operator|(
name|OneRowRel
operator|)
name|rel
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
return|return
operator|new
name|EnumerableValuesRel
argument_list|(
name|oneRow
operator|.
name|getCluster
argument_list|()
argument_list|,
name|oneRow
operator|.
name|getRowType
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|oneRow
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableEmptyRule
name|ENUMERABLE_EMPTY_RULE
init|=
operator|new
name|EnumerableEmptyRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|EnumerableEmptyRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableEmptyRule
parameter_list|()
block|{
name|super
argument_list|(
name|EmptyRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableEmptyRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|EmptyRel
name|empty
init|=
operator|(
name|EmptyRel
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|EnumerableValuesRel
argument_list|(
name|empty
operator|.
name|getCluster
argument_list|()
argument_list|,
name|empty
operator|.
name|getRowType
argument_list|()
argument_list|,
name|ImmutableList
operator|.
expr|<
name|List
argument_list|<
name|RexLiteral
argument_list|>
operator|>
name|of
argument_list|()
argument_list|,
name|empty
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.ValuesRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableValuesRel
extends|extends
name|ValuesRelBase
implements|implements
name|EnumerableRel
block|{
name|EnumerableValuesRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
operator|new
name|EnumerableValuesRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
comment|/*             return Linq4j.asEnumerable(                 new Object[][] {                     new Object[] {1, 2},                     new Object[] {3, 4}                 }); */
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
operator|(
name|JavaTypeFactory
operator|)
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|preferCustom
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Type
name|rowClass
init|=
name|physType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RexLiteral
argument_list|>
name|tuple
range|:
name|tuples
control|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|literals
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|RexLiteral
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|fields
argument_list|,
name|tuple
argument_list|)
control|)
block|{
name|literals
operator|.
name|add
argument_list|(
name|RexToLixTranslator
operator|.
name|translateLiteral
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|pair
operator|.
name|left
operator|.
name|getType
argument_list|()
argument_list|,
name|typeFactory
argument_list|,
name|RexImpTable
operator|.
name|NullAs
operator|.
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expressions
operator|.
name|add
argument_list|(
name|physType
operator|.
name|record
argument_list|(
name|literals
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|AS_ENUMERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|newArrayInit
argument_list|(
name|Primitive
operator|.
name|box
argument_list|(
name|rowClass
argument_list|)
argument_list|,
name|expressions
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableWindowRule
name|ENUMERABLE_WINDOW_RULE
init|=
operator|new
name|EnumerableWindowRule
argument_list|()
decl_stmt|;
comment|/**    * Rule to convert an {@link org.eigenbase.rel.AggregateRel} to an    * {@link net.hydromatic.optiq.rules.java.JavaRules.EnumerableAggregateRel}.    */
specifier|private
specifier|static
class|class
name|EnumerableWindowRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|EnumerableWindowRule
parameter_list|()
block|{
name|super
argument_list|(
name|WindowRel
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"EnumerableWindowRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|WindowRel
name|winAgg
init|=
operator|(
name|WindowRel
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|winAgg
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|child
init|=
name|winAgg
operator|.
name|getChild
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|convertedChild
init|=
name|convert
argument_list|(
name|child
argument_list|,
name|child
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnumerableWindowRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertedChild
argument_list|,
name|winAgg
operator|.
name|getRowType
argument_list|()
argument_list|,
name|winAgg
operator|.
name|windows
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.eigenbase.rel.WindowRel} in    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableWindowRel
extends|extends
name|WindowRelBase
implements|implements
name|EnumerableRel
block|{
comment|/** Creates an EnumerableWindowRel. */
name|EnumerableWindowRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|WindowRel
operator|.
name|Window
argument_list|>
name|windows
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|,
name|rowType
argument_list|,
name|windows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableWindowRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|rowType
argument_list|,
name|windows
argument_list|)
return|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
comment|// Cost is proportional to the number of rows and the number of
comment|// components (windows and aggregate functions). There is
comment|// no I/O cost.
comment|//
comment|// TODO #1. Add memory cost.
comment|// TODO #2. MIN and MAX have higher CPU cost than SUM and COUNT.
specifier|final
name|double
name|rowsIn
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getChild
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|windows
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|WindowRel
operator|.
name|Window
name|window
range|:
name|windows
control|)
block|{
name|count
operator|+=
name|window
operator|.
name|aggCalls
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeCost
argument_list|(
name|rowsIn
argument_list|,
name|rowsIn
operator|*
name|count
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|implementor
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getChild
argument_list|()
decl_stmt|;
specifier|final
name|RexToLixTranslator
name|translator
init|=
name|RexToLixTranslator
operator|.
name|forAggregation
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|source_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"source"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
name|PhysType
name|inputPhysType
init|=
name|result
operator|.
name|physType
decl_stmt|;
for|for
control|(
name|Window
name|window
range|:
name|windows
control|)
block|{
comment|// Comparator:
comment|// final Comparator<JdbcTest.Employee> comparator =
comment|//    new Comparator<JdbcTest.Employee>() {
comment|//      public int compare(JdbcTest.Employee o1,
comment|//          JdbcTest.Employee o2) {
comment|//        return Integer.compare(o1.empid, o2.empid);
comment|//      }
comment|//    };
specifier|final
name|Expression
name|comparator_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"comparator"
argument_list|,
name|inputPhysType
operator|.
name|generateComparator
argument_list|(
name|window
operator|.
name|collation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Populate map of lists, one per partition
comment|//   final Map<Integer, List<Employee>> multiMap =
comment|//     new SortedMultiMap<Integer, List<Employee>>();
comment|//    source.foreach(
comment|//      new Function1<Employee, Void>() {
comment|//        public Void apply(Employee v) {
comment|//          final Integer k = v.deptno;
comment|//          multiMap.putMulti(k, v);
comment|//          return null;
comment|//        }
comment|//      });
comment|//   final List<Xxx> list = new ArrayList<Xxx>(multiMap.size());
comment|//   Iterator<Employee[]> iterator = multiMap.arrays(comparator);
comment|//
specifier|final
name|Expression
name|collectionExpr
decl_stmt|;
specifier|final
name|Expression
name|iterator_
decl_stmt|;
if|if
condition|(
name|window
operator|.
name|groupSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If partition key is empty, no need to partition.
comment|//
comment|//   final List<Employee> tempList =
comment|//       source.into(new ArrayList<Employee>());
comment|//   Iterator<Employee[]> iterator =
comment|//       SortedMultiMap.singletonArrayIterator(comparator, tempList);
comment|//   final List<Xxx> list = new ArrayList<Xxx>(tempList.size());
specifier|final
name|Expression
name|tempList_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"tempList"
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|source_
argument_list|,
name|BuiltinMethod
operator|.
name|INTO
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|List
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|iterator_
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"iterator"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|BuiltinMethod
operator|.
name|SORTED_MULTI_MAP_SINGLETON
operator|.
name|method
argument_list|,
name|comparator_
argument_list|,
name|tempList_
argument_list|)
argument_list|)
expr_stmt|;
name|collectionExpr
operator|=
name|tempList_
expr_stmt|;
block|}
else|else
block|{
name|Expression
name|multiMap_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"multiMap"
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|SortedMultiMap
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder2
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|v_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
name|builder2
operator|.
name|newName
argument_list|(
literal|"v"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DeclarationStatement
name|declare
init|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
literal|"key"
argument_list|,
name|inputPhysType
operator|.
name|selector
argument_list|(
name|v_
argument_list|,
name|BitSets
operator|.
name|toList
argument_list|(
name|window
operator|.
name|groupSet
argument_list|)
argument_list|,
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
argument_list|)
decl_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|declare
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|key_
init|=
name|declare
operator|.
name|parameter
decl_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|multiMap_
argument_list|,
name|BuiltinMethod
operator|.
name|SORTED_MULTI_MAP_PUT_MULTI
operator|.
name|method
argument_list|,
name|key_
argument_list|,
name|v_
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|source_
argument_list|,
name|BuiltinMethod
operator|.
name|ENUMERABLE_FOREACH
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|builder2
operator|.
name|toBlock
argument_list|()
argument_list|,
name|v_
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iterator_
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"iterator"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|multiMap_
argument_list|,
name|BuiltinMethod
operator|.
name|SORTED_MULTI_MAP_ARRAYS
operator|.
name|method
argument_list|,
name|comparator_
argument_list|)
argument_list|)
expr_stmt|;
name|collectionExpr
operator|=
name|multiMap_
expr_stmt|;
block|}
comment|// The output from this stage is the input plus the aggregate functions.
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|typeBuilder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
name|typeBuilder
operator|.
name|addAll
argument_list|(
name|inputPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|offset
init|=
name|typeBuilder
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggregateCalls
init|=
name|window
operator|.
name|getAggregateCalls
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggregateCall
range|:
name|aggregateCalls
control|)
block|{
name|typeBuilder
operator|.
name|add
argument_list|(
name|aggregateCall
operator|.
name|name
argument_list|,
name|aggregateCall
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|RelDataType
name|outputRowType
init|=
name|typeBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|PhysType
name|outputPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|outputRowType
argument_list|,
name|pref
operator|.
name|prefer
argument_list|(
name|result
operator|.
name|format
argument_list|)
argument_list|)
decl_stmt|;
comment|// For each list of rows that have the same partitioning key, evaluate
comment|// all of the windowed aggregate functions.
comment|//
comment|//   while (iterator.hasNext()) {
comment|//     //<builder3>
comment|//     Employee[] rows = iterator.next();
comment|//     int i = 0;
comment|//     while (i< rows.length) {
comment|//       //<builder4>
comment|//       JdbcTest.Employee row = rows[i];
comment|//       int sum = 0;
comment|//       int count = 0;
comment|//       int j = Math.max(0, i - 1);
comment|//       while (j<= i) {
comment|//         //<builder5>
comment|//         sum += rows[j].salary;
comment|//         ++count;
comment|//         ++j;
comment|//       }
comment|//       list.add(new Xxx(row.deptno, row.empid, sum, count));
comment|//       i++;
comment|//     }
comment|//     multiMap.clear(); // allows gc
comment|//   }
comment|//   source = Linq4j.asEnumerable(list);
specifier|final
name|Expression
name|list_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"list"
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|collectionExpr
argument_list|,
name|BuiltinMethod
operator|.
name|COLLECTION_SIZE
operator|.
name|method
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder3
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|Expression
name|rows_
init|=
name|builder3
operator|.
name|append
argument_list|(
literal|"rows"
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|iterator_
argument_list|,
name|BuiltinMethod
operator|.
name|ITERATOR_NEXT
operator|.
name|method
argument_list|)
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder4
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|i_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|builder4
operator|.
name|newName
argument_list|(
literal|"i"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|row_
init|=
name|builder4
operator|.
name|append
argument_list|(
literal|"row"
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|arrayIndex
argument_list|(
name|rows_
argument_list|,
name|i_
argument_list|)
argument_list|,
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggImplementor
argument_list|>
name|implementors
init|=
name|EnumUtil
operator|.
name|getImplementors
argument_list|(
name|aggregateCalls
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|variables
init|=
operator|new
name|ArrayList
argument_list|<
name|ParameterExpression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|AggImplementor
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggregateCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
specifier|final
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|outputPhysType
operator|.
name|fieldClass
argument_list|(
name|offset
operator|+
name|ord
operator|.
name|i
argument_list|)
argument_list|,
name|builder4
operator|.
name|newName
argument_list|(
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|initExpression
init|=
name|ord
operator|.
name|e
operator|.
name|right
operator|.
name|implementInit
argument_list|(
name|translator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|parameter
operator|.
name|type
argument_list|,
name|EnumUtil
operator|.
name|fieldTypes
argument_list|(
name|typeFactory
argument_list|,
name|inputPhysType
operator|.
name|getRowType
argument_list|()
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|variables
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|parameter
argument_list|,
name|initExpression
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|expressions
operator|.
name|add
argument_list|(
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|row_
argument_list|,
name|i
argument_list|,
name|outputPhysType
operator|.
name|getJavaFieldType
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PhysType
name|finalInputPhysType
init|=
name|inputPhysType
decl_stmt|;
name|generateWindowLoop
argument_list|(
name|translator
argument_list|,
name|builder4
argument_list|,
name|window
argument_list|,
name|aggregateCalls
argument_list|,
name|implementors
argument_list|,
name|variables
argument_list|,
name|rows_
argument_list|,
name|i_
argument_list|,
name|row_
argument_list|,
name|expressions
argument_list|,
operator|new
name|Function1
argument_list|<
name|AggCallContext
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|AggCallContext
name|a0
parameter_list|)
block|{
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|AggImplementor
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggregateCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
specifier|final
name|Expression
name|accumulator
init|=
name|variables
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|arg
range|:
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getArgList
argument_list|()
control|)
block|{
if|if
condition|(
name|finalInputPhysType
operator|.
name|fieldNullable
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|conditions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|notEqual
argument_list|(
name|finalInputPhysType
operator|.
name|fieldReference
argument_list|(
name|row_
argument_list|,
name|arg
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Statement
name|assign
init|=
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|accumulator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|right
operator|.
name|implementAdd
argument_list|(
name|translator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|accumulator
argument_list|,
name|finalInputPhysType
operator|.
name|accessors
argument_list|(
name|row_
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|conditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|a0
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|assign
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|a0
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|Expressions
operator|.
name|foldAnd
argument_list|(
name|conditions
argument_list|)
argument_list|,
name|assign
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|list_
argument_list|,
name|BuiltinMethod
operator|.
name|COLLECTION_ADD
operator|.
name|method
argument_list|,
name|outputPhysType
operator|.
name|record
argument_list|(
name|expressions
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder3
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|for_
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|i_
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|lessThan
argument_list|(
name|i_
argument_list|,
name|Expressions
operator|.
name|field
argument_list|(
name|rows_
argument_list|,
literal|"length"
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|preIncrementAssign
argument_list|(
name|i_
argument_list|)
argument_list|,
name|builder4
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|while_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|iterator_
argument_list|,
name|BuiltinMethod
operator|.
name|ITERATOR_HAS_NEXT
operator|.
name|method
argument_list|)
argument_list|,
name|builder3
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|collectionExpr
argument_list|,
name|BuiltinMethod
operator|.
name|MAP_CLEAR
operator|.
name|method
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// We're not assigning to "source". For each window, create a new
comment|// final variable called "source" or "sourceN".
name|source_
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"source"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|AS_ENUMERABLE
operator|.
name|method
argument_list|,
name|list_
argument_list|)
argument_list|)
expr_stmt|;
name|inputPhysType
operator|=
name|outputPhysType
expr_stmt|;
block|}
comment|//   return Linq4j.asEnumerable(list);
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|source_
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|inputPhysType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
comment|/** Generates the loop that computes aggregate functions over the window.      * Calls a callback to increment each aggregate function's accumulator. */
specifier|private
name|void
name|generateWindowLoop
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|BlockBuilder
name|builder
parameter_list|,
name|Window
name|window
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggregateCalls
parameter_list|,
name|List
argument_list|<
name|AggImplementor
argument_list|>
name|implementors
parameter_list|,
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|variables
parameter_list|,
name|Expression
name|rows_
parameter_list|,
name|ParameterExpression
name|i_
parameter_list|,
name|Expression
name|row_
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|,
name|Function1
argument_list|<
name|AggCallContext
argument_list|,
name|Void
argument_list|>
name|f3
parameter_list|)
block|{
comment|//       int j = Math.max(0, i - 1);
comment|//       while (j<= i) {
comment|//         //<builder5>
comment|//         Employee row2 = rows[j];
comment|//         sum += rows[j].salary;
comment|//         ++count;
comment|//         ++j;
comment|//       }
specifier|final
name|Expression
name|min_
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|max_
init|=
name|Expressions
operator|.
name|subtract
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|rows_
argument_list|,
literal|"length"
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SqlWindow
operator|.
name|OffsetRange
name|offsetAndRange
init|=
name|SqlWindow
operator|.
name|getOffsetAndRange
argument_list|(
name|window
operator|.
name|lowerBound
argument_list|,
name|window
operator|.
name|upperBound
argument_list|,
name|window
operator|.
name|isRows
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|start_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"start"
argument_list|,
name|optimizeAdd
argument_list|(
name|i_
argument_list|,
operator|(
name|int
operator|)
name|offsetAndRange
operator|.
name|offset
operator|-
operator|(
name|int
operator|)
name|offsetAndRange
operator|.
name|range
argument_list|,
name|min_
argument_list|,
name|max_
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|end_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"end"
argument_list|,
name|optimizeAdd
argument_list|(
name|i_
argument_list|,
operator|(
name|int
operator|)
name|offsetAndRange
operator|.
name|offset
argument_list|,
name|min_
argument_list|,
name|max_
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|DeclarationStatement
name|jDecl
init|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
literal|"j"
argument_list|,
name|start_
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|j_
init|=
name|jDecl
operator|.
name|parameter
decl_stmt|;
specifier|final
name|Expression
name|row2_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"row2"
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|arrayIndex
argument_list|(
name|rows_
argument_list|,
name|j_
argument_list|)
argument_list|,
name|row_
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder5
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|f3
operator|.
name|apply
argument_list|(
operator|new
name|AggCallContext
argument_list|()
block|{
specifier|public
name|BlockBuilder
name|builder
parameter_list|()
block|{
return|return
name|builder5
return|;
block|}
specifier|public
name|Expression
name|index
parameter_list|()
block|{
return|return
name|j_
return|;
block|}
specifier|public
name|Expression
name|current
parameter_list|()
block|{
return|return
name|row2_
return|;
block|}
specifier|public
name|Expression
name|isFirst
parameter_list|()
block|{
return|return
name|Expressions
operator|.
name|equal
argument_list|(
name|j_
argument_list|,
name|start_
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|isLast
parameter_list|()
block|{
return|return
name|Expressions
operator|.
name|equal
argument_list|(
name|j_
argument_list|,
name|end_
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|for_
argument_list|(
name|jDecl
argument_list|,
name|Expressions
operator|.
name|lessThanOrEqual
argument_list|(
name|j_
argument_list|,
name|end_
argument_list|)
argument_list|,
name|Expressions
operator|.
name|preIncrementAssign
argument_list|(
name|j_
argument_list|)
argument_list|,
name|builder5
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|AggImplementor
argument_list|>
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|Pair
operator|.
name|zip
argument_list|(
name|aggregateCalls
argument_list|,
name|implementors
argument_list|)
argument_list|)
control|)
block|{
specifier|final
name|AggImplementor
name|implementor2
init|=
name|ord
operator|.
name|e
operator|.
name|right
decl_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|implementor2
operator|instanceof
name|WinAggImplementor
condition|?
operator|(
operator|(
name|WinAggImplementor
operator|)
name|implementor2
operator|)
operator|.
name|implementResultPlus
argument_list|(
name|translator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|variables
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
argument_list|,
name|start_
argument_list|,
name|end_
argument_list|,
name|rows_
argument_list|,
name|i_
argument_list|)
else|:
name|implementor2
operator|.
name|implementResult
argument_list|(
name|translator
argument_list|,
name|ord
operator|.
name|e
operator|.
name|left
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|variables
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Expression
name|optimizeAdd
parameter_list|(
name|Expression
name|i_
parameter_list|,
name|int
name|offset
parameter_list|,
name|Expression
name|min_
parameter_list|,
name|Expression
name|max_
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
return|return
name|i_
return|;
block|}
if|else if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|BuiltinMethod
operator|.
name|MATH_MAX
operator|.
name|method
argument_list|,
name|min_
argument_list|,
name|Expressions
operator|.
name|subtract
argument_list|(
name|i_
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|-
name|offset
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|BuiltinMethod
operator|.
name|MATH_MIN
operator|.
name|method
argument_list|,
name|max_
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|i_
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|offset
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableFilterToCalcRule
name|ENUMERABLE_FILTER_TO_CALC_RULE
init|=
operator|new
name|EnumerableFilterToCalcRule
argument_list|()
decl_stmt|;
comment|/** Variant of {@link org.eigenbase.rel.rules.FilterToCalcRule} for    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableFilterToCalcRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|EnumerableFilterToCalcRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|EnumerableFilterRel
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|EnumerableFilterRel
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|filter
operator|.
name|getChild
argument_list|()
decl_stmt|;
comment|// Create a program containing a filter.
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|inputRowType
init|=
name|rel
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|RexProgramBuilder
name|programBuilder
init|=
operator|new
name|RexProgramBuilder
argument_list|(
name|inputRowType
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|programBuilder
operator|.
name|addIdentity
argument_list|()
expr_stmt|;
name|programBuilder
operator|.
name|addCondition
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RexProgram
name|program
init|=
name|programBuilder
operator|.
name|getProgram
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableCalcRel
name|calc
init|=
operator|new
name|EnumerableCalcRel
argument_list|(
name|filter
operator|.
name|getCluster
argument_list|()
argument_list|,
name|filter
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|rel
argument_list|,
name|inputRowType
argument_list|,
name|program
argument_list|,
name|ImmutableList
operator|.
expr|<
name|RelCollation
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|calc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|EnumerableProjectToCalcRule
name|ENUMERABLE_PROJECT_TO_CALC_RULE
init|=
operator|new
name|EnumerableProjectToCalcRule
argument_list|()
decl_stmt|;
comment|/** Variant of {@link org.eigenbase.rel.rules.ProjectToCalcRule} for    * {@link EnumerableConvention enumerable calling convention}. */
specifier|public
specifier|static
class|class
name|EnumerableProjectToCalcRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|EnumerableProjectToCalcRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|EnumerableProjectRel
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|EnumerableProjectRel
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|child
init|=
name|project
operator|.
name|getChild
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|project
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|RexProgram
name|program
init|=
name|RexProgram
operator|.
name|create
argument_list|(
name|child
operator|.
name|getRowType
argument_list|()
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
literal|null
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|EnumerableCalcRel
name|calc
init|=
operator|new
name|EnumerableCalcRel
argument_list|(
name|project
operator|.
name|getCluster
argument_list|()
argument_list|,
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|child
argument_list|,
name|rowType
argument_list|,
name|program
argument_list|,
name|ImmutableList
operator|.
expr|<
name|RelCollation
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|calc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
interface|interface
name|AggCallContext
block|{
name|BlockBuilder
name|builder
parameter_list|()
function_decl|;
name|Expression
name|index
parameter_list|()
function_decl|;
name|Expression
name|current
parameter_list|()
function_decl|;
name|Expression
name|isFirst
parameter_list|()
function_decl|;
name|Expression
name|isLast
parameter_list|()
function_decl|;
block|}
block|}
end_class

begin_comment
comment|// End JavaRules.java
end_comment

end_unit

