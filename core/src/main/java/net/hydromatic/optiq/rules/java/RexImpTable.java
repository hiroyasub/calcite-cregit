begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|BuiltinMethod
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|AggregateFunctionImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|ScalarFunctionImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlTrimFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlUserDefinedAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlUserDefinedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|ExpressionType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|DataContext
operator|.
name|ROOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Contains implementations of Rex operators as Java code.  */
end_comment

begin_class
specifier|public
class|class
name|RexImpTable
block|{
specifier|public
specifier|static
specifier|final
name|ConstantExpression
name|NULL_EXPR
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ConstantExpression
name|FALSE_EXPR
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ConstantExpression
name|TRUE_EXPR
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MemberExpression
name|BOXED_FALSE_EXPR
init|=
name|Expressions
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|"FALSE"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MemberExpression
name|BOXED_TRUE_EXPR
init|=
name|Expressions
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|"TRUE"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CallImplementor
name|UDF_IMPLEMENTOR
init|=
name|createImplementor
argument_list|(
operator|new
name|NotNullImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
name|Function
name|x
init|=
operator|(
operator|(
name|SqlUserDefinedFunction
operator|)
name|call
operator|.
name|getOperator
argument_list|()
operator|)
operator|.
name|function
decl_stmt|;
specifier|final
name|Method
name|method
init|=
operator|(
operator|(
name|ScalarFunctionImpl
operator|)
name|x
operator|)
operator|.
name|method
decl_stmt|;
if|if
condition|(
operator|(
name|method
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|method
argument_list|,
name|translatedOperands
argument_list|)
return|;
block|}
else|else
block|{
comment|// The UDF class must have a public zero-args constructor.
comment|// Assume that the validator checked already.
specifier|final
name|NewExpression
name|target
init|=
name|Expressions
operator|.
name|new_
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|target
argument_list|,
name|method
argument_list|,
name|translatedOperands
argument_list|)
return|;
block|}
block|}
block|}
argument_list|,
name|NullPolicy
operator|.
name|ANY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|CallImplementor
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|SqlOperator
argument_list|,
name|CallImplementor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Aggregation
argument_list|,
name|AggImplementor
argument_list|>
name|aggMap
init|=
operator|new
name|HashMap
argument_list|<
name|Aggregation
argument_list|,
name|AggImplementor
argument_list|>
argument_list|()
decl_stmt|;
name|RexImpTable
parameter_list|()
block|{
name|defineMethod
argument_list|(
name|UPPER
argument_list|,
name|BuiltinMethod
operator|.
name|UPPER
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|LOWER
argument_list|,
name|BuiltinMethod
operator|.
name|LOWER
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|INITCAP
argument_list|,
name|BuiltinMethod
operator|.
name|INITCAP
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|SUBSTRING
argument_list|,
name|BuiltinMethod
operator|.
name|SUBSTRING
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|CHARACTER_LENGTH
argument_list|,
name|BuiltinMethod
operator|.
name|CHAR_LENGTH
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|CHAR_LENGTH
argument_list|,
name|BuiltinMethod
operator|.
name|CHAR_LENGTH
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|CONCAT
argument_list|,
name|BuiltinMethod
operator|.
name|STRING_CONCAT
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|OVERLAY
argument_list|,
name|BuiltinMethod
operator|.
name|OVERLAY
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|POSITION
argument_list|,
name|BuiltinMethod
operator|.
name|POSITION
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
specifier|final
name|TrimImplementor
name|trimImplementor
init|=
operator|new
name|TrimImplementor
argument_list|()
decl_stmt|;
name|defineImplementor
argument_list|(
name|TRIM
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
name|trimImplementor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// logical
name|defineBinary
argument_list|(
name|AND
argument_list|,
name|AndAlso
argument_list|,
name|NullPolicy
operator|.
name|AND
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|OR
argument_list|,
name|OrElse
argument_list|,
name|NullPolicy
operator|.
name|OR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|defineUnary
argument_list|(
name|NOT
argument_list|,
name|Not
argument_list|,
name|NullPolicy
operator|.
name|NOT
argument_list|)
expr_stmt|;
comment|// comparisons
name|defineBinary
argument_list|(
name|LESS_THAN
argument_list|,
name|LessThan
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"lt"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|LESS_THAN_OR_EQUAL
argument_list|,
name|LessThanOrEqual
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"le"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|GREATER_THAN
argument_list|,
name|GreaterThan
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"gt"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|GREATER_THAN_OR_EQUAL
argument_list|,
name|GreaterThanOrEqual
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"ge"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|EQUALS
argument_list|,
name|Equal
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"eq"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|NOT_EQUALS
argument_list|,
name|NotEqual
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"ne"
argument_list|)
expr_stmt|;
comment|// arithmetic
name|defineBinary
argument_list|(
name|PLUS
argument_list|,
name|Add
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"plus"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|MINUS
argument_list|,
name|Subtract
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"minus"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|MULTIPLY
argument_list|,
name|Multiply
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"multiply"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|DIVIDE
argument_list|,
name|Divide
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"divide"
argument_list|)
expr_stmt|;
name|defineBinary
argument_list|(
name|DIVIDE_INTEGER
argument_list|,
name|Divide
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|"divide"
argument_list|)
expr_stmt|;
name|defineUnary
argument_list|(
name|UNARY_MINUS
argument_list|,
name|Negate
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineUnary
argument_list|(
name|UNARY_PLUS
argument_list|,
name|UnaryPlus
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|MOD
argument_list|,
literal|"mod"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|EXP
argument_list|,
literal|"exp"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|POWER
argument_list|,
literal|"power"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|LN
argument_list|,
literal|"ln"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|LOG10
argument_list|,
literal|"log10"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|ABS
argument_list|,
literal|"abs"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|CEIL
argument_list|,
literal|"ceil"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|FLOOR
argument_list|,
literal|"floor"
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
comment|// datetime
name|defineMethod
argument_list|(
name|EXTRACT_DATE
argument_list|,
name|BuiltinMethod
operator|.
name|UNIX_DATE_EXTRACT
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IS_NULL
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IS_NOT_NULL
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IS_TRUE
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IS_NOT_TRUE
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IS_FALSE
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IS_NOT_FALSE
argument_list|,
operator|new
name|IsXxxImplementor
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// LIKE and SIMILAR
specifier|final
name|MethodImplementor
name|likeImplementor
init|=
operator|new
name|MethodImplementor
argument_list|(
name|BuiltinMethod
operator|.
name|LIKE
operator|.
name|method
argument_list|)
decl_stmt|;
name|defineImplementor
argument_list|(
name|LIKE
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
name|likeImplementor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defineImplementor
argument_list|(
name|NOT_LIKE
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
name|NotImplementor
operator|.
name|of
argument_list|(
name|likeImplementor
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MethodImplementor
name|similarImplementor
init|=
operator|new
name|MethodImplementor
argument_list|(
name|BuiltinMethod
operator|.
name|SIMILAR
operator|.
name|method
argument_list|)
decl_stmt|;
name|defineImplementor
argument_list|(
name|SIMILAR_TO
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
name|similarImplementor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defineImplementor
argument_list|(
name|NOT_SIMILAR_TO
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
name|NotImplementor
operator|.
name|of
argument_list|(
name|similarImplementor
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Multisets& arrays
name|defineMethod
argument_list|(
name|CARDINALITY
argument_list|,
name|BuiltinMethod
operator|.
name|COLLECTION_SIZE
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|SLICE
argument_list|,
name|BuiltinMethod
operator|.
name|SLICE
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|defineMethod
argument_list|(
name|ELEMENT
argument_list|,
name|BuiltinMethod
operator|.
name|ELEMENT
operator|.
name|method
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CASE
argument_list|,
operator|new
name|CaseImplementor
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CAST
argument_list|,
operator|new
name|CastOptimizedImplementor
argument_list|()
argument_list|)
expr_stmt|;
name|defineImplementor
argument_list|(
name|REINTERPRET
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
operator|new
name|ReinterpretImplementor
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|CallImplementor
name|value
init|=
operator|new
name|ValueConstructorImplementor
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|MAP_VALUE_CONSTRUCTOR
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ARRAY_VALUE_CONSTRUCTOR
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ITEM
argument_list|,
operator|new
name|ItemImplementor
argument_list|()
argument_list|)
expr_stmt|;
comment|// System functions
specifier|final
name|SystemFunctionImplementor
name|systemFunctionImplementor
init|=
operator|new
name|SystemFunctionImplementor
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|USER
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CURRENT_USER
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SESSION_USER
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SYSTEM_USER
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CURRENT_PATH
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CURRENT_ROLE
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
comment|// Current time functions
name|map
operator|.
name|put
argument_list|(
name|CURRENT_TIME
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CURRENT_TIMESTAMP
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CURRENT_DATE
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|LOCALTIME
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|LOCALTIMESTAMP
argument_list|,
name|systemFunctionImplementor
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|COUNT
argument_list|,
operator|new
name|CountImplementor
argument_list|()
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|SUM0
argument_list|,
operator|new
name|SumImplementor
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MinMaxImplementor
name|minMax
init|=
operator|new
name|MinMaxImplementor
argument_list|()
decl_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|MIN
argument_list|,
name|minMax
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|MAX
argument_list|,
name|minMax
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|SINGLE_VALUE
argument_list|,
operator|new
name|SingleValueImplementor
argument_list|()
argument_list|)
expr_stmt|;
name|aggMap
operator|.
name|put
argument_list|(
name|RANK
argument_list|,
operator|new
name|RankImplementor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineImplementor
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|,
name|NotNullImplementor
name|implementor
parameter_list|,
name|boolean
name|harmonize
parameter_list|)
block|{
name|CallImplementor
name|callImplementor
init|=
name|createImplementor
argument_list|(
name|implementor
argument_list|,
name|nullPolicy
argument_list|,
name|harmonize
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|operator
argument_list|,
name|callImplementor
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|RexCall
name|call2
parameter_list|(
name|boolean
name|harmonize
parameter_list|,
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
operator|!
name|harmonize
condition|)
block|{
return|return
name|call
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands2
init|=
name|harmonize
argument_list|(
name|translator
argument_list|,
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|operands2
operator|.
name|equals
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|operands2
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CallImplementor
name|createImplementor
parameter_list|(
specifier|final
name|NotNullImplementor
name|implementor
parameter_list|,
specifier|final
name|NullPolicy
name|nullPolicy
parameter_list|,
specifier|final
name|boolean
name|harmonize
parameter_list|)
block|{
switch|switch
condition|(
name|nullPolicy
condition|)
block|{
case|case
name|ANY
case|:
case|case
name|STRICT
case|:
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
return|return
name|implementNullSemantics0
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|nullAs
argument_list|,
name|nullPolicy
argument_list|,
name|harmonize
argument_list|,
name|implementor
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|AND
case|:
comment|/* TODO:             if (nullAs == NullAs.FALSE) {                 nullPolicy2 = NullPolicy.ANY;             } */
comment|// If any of the arguments are false, result is false;
comment|// else if any arguments are null, result is null;
comment|// else true.
comment|//
comment|// b0 == null ? (b1 == null || b1 ? null : Boolean.FALSE)
comment|//   : b0 ? b1
comment|//   : Boolean.FALSE;
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|RexCall
name|call2
init|=
name|call2
argument_list|(
literal|false
argument_list|,
name|translator
argument_list|,
name|call
argument_list|)
decl_stmt|;
specifier|final
name|NullAs
name|nullAs2
init|=
name|nullAs
operator|==
name|NullAs
operator|.
name|TRUE
condition|?
name|NullAs
operator|.
name|NULL
else|:
name|nullAs
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
name|translator
operator|.
name|translateList
argument_list|(
name|call2
operator|.
name|getOperands
argument_list|()
argument_list|,
name|nullAs2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|NOT_POSSIBLE
case|:
case|case
name|TRUE
case|:
return|return
name|Expressions
operator|.
name|foldAnd
argument_list|(
name|expressions
argument_list|)
return|;
block|}
return|return
name|Expressions
operator|.
name|foldAnd
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|expressions
argument_list|,
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
argument_list|()
block|{
specifier|public
name|Expression
name|apply
parameter_list|(
name|Expression
name|e
parameter_list|)
block|{
return|return
name|nullAs2
operator|.
name|handle
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|OR
case|:
comment|// If any of the arguments are true, result is true;
comment|// else if any arguments are null, result is null;
comment|// else false.
comment|//
comment|// b0 == null ? (b1 == null || !b1 ? null : Boolean.TRUE)
comment|//   : !b0 ? b1
comment|//   : Boolean.TRUE;
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|RexCall
name|call2
init|=
name|call2
argument_list|(
name|harmonize
argument_list|,
name|translator
argument_list|,
name|call
argument_list|)
decl_stmt|;
specifier|final
name|NullAs
name|nullAs2
init|=
name|nullAs
operator|==
name|NullAs
operator|.
name|TRUE
condition|?
name|NullAs
operator|.
name|NULL
else|:
name|nullAs
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
name|translator
operator|.
name|translateList
argument_list|(
name|call2
operator|.
name|getOperands
argument_list|()
argument_list|,
name|nullAs2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|NOT_POSSIBLE
case|:
case|case
name|FALSE
case|:
return|return
name|Expressions
operator|.
name|foldOr
argument_list|(
name|expressions
argument_list|)
return|;
block|}
specifier|final
name|Expression
name|t0
init|=
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|t1
init|=
name|expressions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nullable
argument_list|(
name|call2
argument_list|,
literal|0
argument_list|)
operator|&&
operator|!
name|nullable
argument_list|(
name|call2
argument_list|,
literal|1
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|orElse
argument_list|(
name|t0
argument_list|,
name|t1
argument_list|)
return|;
block|}
return|return
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|t0
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|t1
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|not
argument_list|(
name|t1
argument_list|)
argument_list|)
argument_list|,
name|NULL_EXPR
argument_list|,
name|BOXED_TRUE_EXPR
argument_list|)
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|t0
argument_list|)
argument_list|,
name|t1
argument_list|,
name|BOXED_TRUE_EXPR
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|NOT
case|:
comment|// If any of the arguments are false, result is true;
comment|// else if any arguments are null, result is null;
comment|// else false.
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
name|NullAs
name|nullAs2
decl_stmt|;
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|FALSE
case|:
name|nullAs2
operator|=
name|NullAs
operator|.
name|TRUE
expr_stmt|;
break|break;
case|case
name|TRUE
case|:
name|nullAs2
operator|=
name|NullAs
operator|.
name|FALSE
expr_stmt|;
break|break;
default|default:
name|nullAs2
operator|=
name|nullAs
expr_stmt|;
block|}
return|return
name|implementNullSemantics0
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|nullAs2
argument_list|,
name|nullPolicy
argument_list|,
name|harmonize
argument_list|,
name|implementor
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|NONE
case|:
return|return
operator|new
name|CallImplementor
argument_list|()
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|RexCall
name|call2
init|=
name|call2
argument_list|(
literal|false
argument_list|,
name|translator
argument_list|,
name|call
argument_list|)
decl_stmt|;
return|return
name|implementCall
argument_list|(
name|translator
argument_list|,
name|call2
argument_list|,
name|implementor
argument_list|,
name|nullAs
argument_list|)
return|;
block|}
block|}
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|nullPolicy
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|defineMethod
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|String
name|functionName
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|)
block|{
name|defineImplementor
argument_list|(
name|operator
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|MethodNameImplementor
argument_list|(
name|functionName
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineMethod
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|Method
name|method
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|)
block|{
name|defineImplementor
argument_list|(
name|operator
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|MethodImplementor
argument_list|(
name|method
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineUnary
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|ExpressionType
name|expressionType
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|)
block|{
name|defineImplementor
argument_list|(
name|operator
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|UnaryImplementor
argument_list|(
name|expressionType
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|defineBinary
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|ExpressionType
name|expressionType
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|,
name|String
name|backupMethodName
parameter_list|)
block|{
name|defineImplementor
argument_list|(
name|operator
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|BinaryImplementor
argument_list|(
name|expressionType
argument_list|,
name|backupMethodName
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|RexImpTable
name|INSTANCE
init|=
operator|new
name|RexImpTable
argument_list|()
decl_stmt|;
specifier|public
name|CallImplementor
name|get
parameter_list|(
specifier|final
name|SqlOperator
name|operator
parameter_list|)
block|{
if|if
condition|(
name|operator
operator|instanceof
name|SqlUserDefinedFunction
condition|)
block|{
return|return
name|UDF_IMPLEMENTOR
return|;
block|}
return|return
name|map
operator|.
name|get
argument_list|(
name|operator
argument_list|)
return|;
block|}
specifier|public
name|AggImplementor
name|get
parameter_list|(
specifier|final
name|Aggregation
name|aggregation
parameter_list|)
block|{
if|if
condition|(
name|aggregation
operator|instanceof
name|SqlUserDefinedAggFunction
condition|)
block|{
specifier|final
name|SqlUserDefinedAggFunction
name|udaf
init|=
operator|(
name|SqlUserDefinedAggFunction
operator|)
name|aggregation
decl_stmt|;
if|if
condition|(
name|udaf
operator|.
name|function
operator|instanceof
name|AggregateFunctionImpl
condition|)
block|{
return|return
name|UserDefinedAggImplementor
operator|.
name|INSTANCE
return|;
block|}
block|}
return|return
name|aggMap
operator|.
name|get
argument_list|(
name|aggregation
argument_list|)
return|;
block|}
specifier|static
name|Expression
name|maybeNegate
parameter_list|(
name|boolean
name|negate
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
operator|!
name|negate
condition|)
block|{
return|return
name|expression
return|;
block|}
else|else
block|{
return|return
name|Expressions
operator|.
name|not
argument_list|(
name|expression
argument_list|)
return|;
block|}
block|}
specifier|static
name|Expression
name|optimize
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|expression
operator|.
name|accept
argument_list|(
operator|new
name|OptimizeVisitor
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|Expression
name|optimize2
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|Primitive
operator|.
name|is
argument_list|(
name|operand
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Primitive values cannot be null
return|return
name|optimize
argument_list|(
name|expression
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|,
name|NULL_EXPR
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|nullable
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
return|;
block|}
comment|/** Ensures that operands have identical type. */
specifier|private
specifier|static
name|List
argument_list|<
name|RexNode
argument_list|>
name|harmonize
parameter_list|(
specifier|final
name|RexToLixTranslator
name|translator
parameter_list|,
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
name|int
name|nullCount
init|=
literal|0
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|translator
operator|.
name|builder
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|RelDataType
name|type
init|=
name|operand
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|=
name|toSql
argument_list|(
name|typeFactory
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|translator
operator|.
name|isNullable
argument_list|(
name|operand
argument_list|)
condition|)
block|{
operator|++
name|nullCount
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allSame
argument_list|(
name|types
argument_list|)
condition|)
block|{
comment|// Operands have the same nullability and type. Return them
comment|// unchanged.
return|return
name|operands
return|;
block|}
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|leastRestrictive
argument_list|(
name|types
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|// There is no common type. Presumably this is a binary operator with
comment|// asymmetric arguments (e.g. interval / integer) which is not intended
comment|// to be harmonized.
return|return
name|operands
return|;
block|}
assert|assert
operator|(
name|nullCount
operator|>
literal|0
operator|)
operator|==
name|type
operator|.
name|isNullable
argument_list|()
assert|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translator
operator|.
name|builder
operator|.
name|ensureType
argument_list|(
name|type
argument_list|,
name|operand
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|RelDataType
name|toSql
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
condition|)
block|{
specifier|final
name|SqlTypeName
name|typeName
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|!=
literal|null
operator|&&
name|typeName
operator|!=
name|SqlTypeName
operator|.
name|OTHER
condition|)
block|{
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|,
name|type
operator|.
name|isNullable
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|boolean
name|allSame
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
name|E
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|list
control|)
block|{
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
operator|!
name|prev
operator|.
name|equals
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|prev
operator|=
name|e
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|Expression
name|implementNullSemantics0
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|,
name|boolean
name|harmonize
parameter_list|,
name|NotNullImplementor
name|implementor
parameter_list|)
block|{
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|IS_NOT_NULL
case|:
comment|// If "f" is strict, then "f(a0, a1) IS NOT NULL" is
comment|// equivalent to "a0 IS NOT NULL AND a1 IS NOT NULL".
if|if
condition|(
name|nullPolicy
operator|==
name|NullPolicy
operator|.
name|STRICT
condition|)
block|{
return|return
name|Expressions
operator|.
name|foldAnd
argument_list|(
name|translator
operator|.
name|translateList
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|,
name|nullAs
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|IS_NULL
case|:
comment|// If "f" is strict, then "f(a0, a1) IS NULL" is
comment|// equivalent to "a0 IS NULL OR a1 IS NULL".
if|if
condition|(
name|nullPolicy
operator|==
name|NullPolicy
operator|.
name|STRICT
condition|)
block|{
return|return
name|Expressions
operator|.
name|foldOr
argument_list|(
name|translator
operator|.
name|translateList
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|,
name|nullAs
argument_list|)
argument_list|)
return|;
block|}
break|break;
block|}
specifier|final
name|RexCall
name|call2
init|=
name|call2
argument_list|(
name|harmonize
argument_list|,
name|translator
argument_list|,
name|call
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|implementNullSemantics
argument_list|(
name|translator
argument_list|,
name|call2
argument_list|,
name|nullAs
argument_list|,
name|nullPolicy
argument_list|,
name|implementor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RexToLixTranslator
operator|.
name|AlwaysNull
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|NOT_POSSIBLE
case|:
throw|throw
name|e
throw|;
case|case
name|FALSE
case|:
return|return
name|FALSE_EXPR
return|;
case|case
name|TRUE
case|:
return|return
name|TRUE_EXPR
return|;
default|default:
return|return
name|NULL_EXPR
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Expression
name|implementNullSemantics
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|,
name|NullPolicy
name|nullPolicy
parameter_list|,
name|NotNullImplementor
name|implementor
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|NULL
case|:
comment|// v0 == null || v1 == null ? null : f(v0, v1)
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|operand
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|translator
operator|.
name|isNullable
argument_list|(
name|operand
operator|.
name|e
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
name|operand
operator|.
name|e
argument_list|,
name|NullAs
operator|.
name|IS_NULL
argument_list|)
argument_list|)
expr_stmt|;
name|translator
operator|=
name|translator
operator|.
name|setNullable
argument_list|(
name|operand
operator|.
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Expression
name|box
init|=
name|Expressions
operator|.
name|box
argument_list|(
name|implementCall
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|implementor
argument_list|,
name|nullAs
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|foldOr
argument_list|(
name|list
argument_list|)
argument_list|,
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|box
operator|.
name|getType
argument_list|()
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|,
name|box
argument_list|)
argument_list|)
return|;
case|case
name|FALSE
case|:
comment|// v0 != null&& v1 != null&& f(v0, v1)
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|operand
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|translator
operator|.
name|isNullable
argument_list|(
name|operand
operator|.
name|e
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
name|operand
operator|.
name|e
argument_list|,
name|NullAs
operator|.
name|IS_NOT_NULL
argument_list|)
argument_list|)
expr_stmt|;
name|translator
operator|=
name|translator
operator|.
name|setNullable
argument_list|(
name|operand
operator|.
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|implementCall
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|implementor
argument_list|,
name|nullAs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Expressions
operator|.
name|foldAnd
argument_list|(
name|list
argument_list|)
return|;
case|case
name|NOT_POSSIBLE
case|:
comment|// Need to transmit to the implementor the fact that call cannot
comment|// return null. In particular, it should return a primitive (e.g.
comment|// int) rather than a box type (Integer).
comment|// The cases with setNullable above might not help since the same
comment|// RexNode can be referred via multiple ways: RexNode itself, RexLocalRef,
comment|// and may be others.
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Boolean
argument_list|>
name|nullable
init|=
operator|new
name|HashMap
argument_list|<
name|RexNode
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|NullPolicy
operator|.
name|STRICT
condition|)
block|{
comment|// The arguments should be not nullable if STRICT operator is computed
comment|// in nulls NOT_POSSIBLE mode
for|for
control|(
name|RexNode
name|arg
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
if|if
condition|(
name|translator
operator|.
name|isNullable
argument_list|(
name|arg
argument_list|)
operator|&&
operator|!
name|nullable
operator|.
name|containsKey
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|nullable
operator|.
name|put
argument_list|(
name|arg
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|nullable
operator|.
name|put
argument_list|(
name|call
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|translator
operator|=
name|translator
operator|.
name|setNullable
argument_list|(
name|nullable
argument_list|)
expr_stmt|;
comment|// fall through
default|default:
return|return
name|implementCall
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|implementor
argument_list|,
name|nullAs
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Expression
name|implementCall
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NotNullImplementor
name|implementor
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
init|=
name|translator
operator|.
name|translateList
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|NOT_POSSIBLE
case|:
case|case
name|NULL
case|:
for|for
control|(
name|Expression
name|translatedOperand
range|:
name|translatedOperands
control|)
block|{
if|if
condition|(
name|Expressions
operator|.
name|isConstantNull
argument_list|(
name|translatedOperand
argument_list|)
condition|)
block|{
return|return
name|NULL_EXPR
return|;
block|}
block|}
block|}
name|Expression
name|result
decl_stmt|;
name|result
operator|=
name|implementor
operator|.
name|implement
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|translatedOperands
argument_list|)
expr_stmt|;
return|return
name|nullAs
operator|.
name|handle
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/** Strategy what an operator should return if one of its    * arguments is null. */
specifier|public
enum|enum
name|NullAs
block|{
comment|/** The most common policy among the SQL built-in operators. If      * one of the arguments is null, returns null. */
name|NULL
block|,
comment|/** If one of the arguments is null, the function returns      * false. Example: {@code IS NOT NULL}. */
name|FALSE
block|,
comment|/** If one of the arguments is null, the function returns      * true. Example: {@code IS NULL}. */
name|TRUE
block|,
comment|/** It is not possible for any of the arguments to be null.  If      * the argument type is nullable, the enclosing code will already      * have performed a not-null check. This may allow the operator      * implementor to generate a more efficient implementation, for      * example, by avoiding boxing or unboxing. */
name|NOT_POSSIBLE
block|,
comment|/** Return false if result is not null, true if result is null. */
name|IS_NULL
block|,
comment|/** Return true if result is not null, false if result is null. */
name|IS_NOT_NULL
block|;
specifier|public
specifier|static
name|NullAs
name|of
parameter_list|(
name|boolean
name|nullable
parameter_list|)
block|{
return|return
name|nullable
condition|?
name|NULL
else|:
name|NOT_POSSIBLE
return|;
block|}
comment|/** Adapts an expression with "normal" result to one that adheres to      * this particular policy. */
specifier|public
name|Expression
name|handle
parameter_list|(
name|Expression
name|x
parameter_list|)
block|{
switch|switch
condition|(
name|Primitive
operator|.
name|flavor
argument_list|(
name|x
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|PRIMITIVE
case|:
comment|// Expression cannot be null. We can skip any runtime checks.
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|NULL
case|:
case|case
name|NOT_POSSIBLE
case|:
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
return|return
name|x
return|;
case|case
name|IS_NULL
case|:
return|return
name|FALSE_EXPR
return|;
case|case
name|IS_NOT_NULL
case|:
return|return
name|TRUE_EXPR
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
case|case
name|BOX
case|:
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|NOT_POSSIBLE
case|:
return|return
name|RexToLixTranslator
operator|.
name|convert
argument_list|(
name|x
argument_list|,
name|Primitive
operator|.
name|ofBox
argument_list|(
name|x
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|primitiveClass
argument_list|)
return|;
block|}
comment|// fall through
block|}
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|NULL
case|:
case|case
name|NOT_POSSIBLE
case|:
return|return
name|x
return|;
case|case
name|FALSE
case|:
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|IS_TRUE
operator|.
name|method
argument_list|,
name|x
argument_list|)
return|;
case|case
name|TRUE
case|:
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|IS_NOT_FALSE
operator|.
name|method
argument_list|,
name|x
argument_list|)
return|;
case|case
name|IS_NULL
case|:
return|return
name|Expressions
operator|.
name|equal
argument_list|(
name|x
argument_list|,
name|NULL_EXPR
argument_list|)
return|;
case|case
name|IS_NOT_NULL
case|:
return|return
name|Expressions
operator|.
name|notEqual
argument_list|(
name|x
argument_list|,
name|NULL_EXPR
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
interface|interface
name|CallImplementor
block|{
comment|/** Implements a call. */
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
function_decl|;
block|}
specifier|abstract
specifier|static
class|class
name|AbstractCallImplementor
implements|implements
name|CallImplementor
block|{
comment|/** Implements a call with "normal" {@link NullAs} semantics. */
specifier|abstract
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|)
function_decl|;
specifier|public
specifier|final
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
comment|// Convert "normal" NullAs semantics to those asked for.
return|return
name|nullAs
operator|.
name|handle
argument_list|(
name|implement
argument_list|(
name|translator
argument_list|,
name|call
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Simplified version of {@link CallImplementor} that does not know about    * null semantics. */
interface|interface
name|NotNullImplementor
block|{
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
function_decl|;
block|}
specifier|static
class|class
name|CountImplementor
implements|implements
name|AggImplementor
block|{
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
comment|// We don't need to check whether the argument is NULL. callOnNull()
comment|// returned false, so that container has checked for us.
return|return
name|Expressions
operator|.
name|add
argument_list|(
name|accumulator
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|,
name|accumulator
operator|.
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementInitAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|static
class|class
name|SumImplementor
implements|implements
name|AggImplementor
block|{
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
specifier|final
name|Primitive
name|primitive
init|=
name|choosePrimitive
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
assert|assert
name|primitive
operator|!=
literal|null
assert|;
return|return
name|Expressions
operator|.
name|constant
argument_list|(
name|primitive
operator|.
name|number
argument_list|(
literal|0
argument_list|)
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|private
name|Primitive
name|choosePrimitive
parameter_list|(
name|Type
name|returnType
parameter_list|)
block|{
switch|switch
condition|(
name|Primitive
operator|.
name|flavor
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
name|Primitive
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
return|;
case|case
name|BOX
case|:
return|return
name|Primitive
operator|.
name|ofBox
argument_list|(
name|returnType
argument_list|)
return|;
default|default:
assert|assert
name|returnType
operator|==
name|BigDecimal
operator|.
name|class
operator|:
literal|"expected primitive or boxed primitive, got "
operator|+
name|returnType
assert|;
return|return
name|Primitive
operator|.
name|INT
return|;
block|}
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
assert|assert
name|arguments
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
if|if
condition|(
name|accumulator
operator|.
name|type
operator|==
name|BigDecimal
operator|.
name|class
operator|||
name|accumulator
operator|.
name|type
operator|==
name|BigInteger
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|accumulator
argument_list|,
literal|"add"
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|accumulator
operator|.
name|type
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|accumulator
argument_list|,
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|accumulator
operator|.
name|type
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementInitAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|returnType
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|static
class|class
name|MinMaxImplementor
implements|implements
name|AggImplementor
block|{
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
condition|)
block|{
comment|// allow nulls even if input does not
name|returnType
operator|=
name|primitive
operator|.
name|boxClass
expr_stmt|;
block|}
return|return
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|returnType
argument_list|,
name|NULL_EXPR
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
comment|// Need to check for null accumulator (e.g. first call to "add"
comment|// after "init") but because callWithNull() returned false, the
comment|// container has ensured that argument is not null.
comment|//
comment|// acc = acc == null
comment|//   ? arg
comment|//   : lesser(acc, arg)
assert|assert
name|arguments
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|Expression
name|arg
init|=
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|optimize
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|foldOr
argument_list|(
name|Expressions
operator|.
expr|<
name|Expression
operator|>
name|list
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|accumulator
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|)
operator|.
name|appendIf
argument_list|(
operator|!
name|Primitive
operator|.
name|is
argument_list|(
name|arg
operator|.
name|type
argument_list|)
argument_list|,
name|Expressions
operator|.
name|equal
argument_list|(
name|arg
argument_list|,
name|NULL_EXPR
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|arg
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|aggregation
operator|==
name|MIN
condition|?
literal|"lesser"
else|:
literal|"greater"
argument_list|,
name|Expressions
operator|.
name|unbox
argument_list|(
name|accumulator
argument_list|)
argument_list|,
name|Expressions
operator|.
name|unbox
argument_list|(
name|arg
argument_list|)
argument_list|)
argument_list|,
name|arg
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementInitAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|static
class|class
name|SingleValueImplementor
implements|implements
name|AggImplementor
block|{
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
return|return
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|Primitive
operator|.
name|box
argument_list|(
name|returnType
argument_list|)
argument_list|,
name|NULL_EXPR
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
comment|// Need to check for null accumulator (e.g. first call to "add"
comment|// after "init") but because callWithNull() returned false, the
comment|// container has ensured that argument is not null.
comment|//
comment|// acc = throwIf(acc, arg)
comment|//
comment|// Object throwIf(Object acc, Object arg) {
comment|//   if (acc != null) {
comment|//     throw new RuntimeException("move than one value");
comment|//   }
comment|//   return arg;
comment|// }
assert|assert
name|arguments
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|Expression
name|arg
init|=
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|Types
operator|.
name|castIfNecessary
argument_list|(
name|accumulator
operator|.
name|type
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|THROW_IF
operator|.
name|method
argument_list|,
name|accumulator
argument_list|,
name|arg
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementInitAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
block|}
specifier|static
class|class
name|RankImplementor
implements|implements
name|WinAggImplementor
block|{
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
specifier|public
name|Expression
name|implementInitAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|,
name|returnType
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
return|return
name|accumulator
return|;
block|}
specifier|public
name|Expression
name|implementResultPlus
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|Expression
name|start
parameter_list|,
name|Expression
name|end
parameter_list|,
name|Expression
name|rows
parameter_list|,
name|Expression
name|current
parameter_list|)
block|{
comment|// Rank is 1-based
return|return
name|Expressions
operator|.
name|add
argument_list|(
name|current
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TrimImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
specifier|final
name|Object
name|value
init|=
operator|(
operator|(
name|ConstantExpression
operator|)
name|translatedOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|value
decl_stmt|;
name|SqlTrimFunction
operator|.
name|Flag
name|flag
init|=
operator|(
name|SqlTrimFunction
operator|.
name|Flag
operator|)
name|value
decl_stmt|;
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|TRIM
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|flag
operator|==
name|SqlTrimFunction
operator|.
name|Flag
operator|.
name|BOTH
operator|||
name|flag
operator|==
name|SqlTrimFunction
operator|.
name|Flag
operator|.
name|LEADING
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|flag
operator|==
name|SqlTrimFunction
operator|.
name|Flag
operator|.
name|BOTH
operator|||
name|flag
operator|==
name|SqlTrimFunction
operator|.
name|Flag
operator|.
name|TRAILING
argument_list|)
argument_list|,
name|translatedOperands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|translatedOperands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MethodImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
name|MethodImplementor
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|method
argument_list|,
name|translatedOperands
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|translatedOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|method
argument_list|,
name|Util
operator|.
name|skip
argument_list|(
name|translatedOperands
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|MethodNameImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|private
specifier|final
name|String
name|methodName
decl_stmt|;
name|MethodNameImplementor
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|methodName
argument_list|,
name|translatedOperands
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BinaryImplementor
implements|implements
name|NotNullImplementor
block|{
comment|/** Types that can be arguments to comparison operators such as      * {@code<}. */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Primitive
argument_list|>
name|COMP_OP_TYPES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Primitive
operator|.
name|BYTE
argument_list|,
name|Primitive
operator|.
name|CHAR
argument_list|,
name|Primitive
operator|.
name|SHORT
argument_list|,
name|Primitive
operator|.
name|INT
argument_list|,
name|Primitive
operator|.
name|LONG
argument_list|,
name|Primitive
operator|.
name|FLOAT
argument_list|,
name|Primitive
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|SqlBinaryOperator
argument_list|>
name|COMPARISON_OPERATORS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|,
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExpressionType
name|expressionType
decl_stmt|;
specifier|private
specifier|final
name|String
name|backupMethodName
decl_stmt|;
name|BinaryImplementor
parameter_list|(
name|ExpressionType
name|expressionType
parameter_list|,
name|String
name|backupMethodName
parameter_list|)
block|{
name|this
operator|.
name|expressionType
operator|=
name|expressionType
expr_stmt|;
name|this
operator|.
name|backupMethodName
operator|=
name|backupMethodName
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
comment|// neither nullable:
comment|//   return x OP y
comment|// x nullable
comment|//   null_returns_null
comment|//     return x == null ? null : x OP y
comment|//   ignore_null
comment|//     return x == null ? null : y
comment|// x, y both nullable
comment|//   null_returns_null
comment|//     return x == null || y == null ? null : x OP y
comment|//   ignore_null
comment|//     return x == null ? y : y == null ? x : x OP y
if|if
condition|(
name|backupMethodName
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|ofBoxOr
argument_list|(
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SqlBinaryOperator
name|op
init|=
operator|(
name|SqlBinaryOperator
operator|)
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|primitive
operator|==
literal|null
operator|||
name|COMPARISON_OPERATORS
operator|.
name|contains
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
name|COMP_OP_TYPES
operator|.
name|contains
argument_list|(
name|primitive
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|backupMethodName
argument_list|,
name|expressions
argument_list|)
return|;
block|}
block|}
return|return
name|Expressions
operator|.
name|makeBinary
argument_list|(
name|expressionType
argument_list|,
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expressions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|UnaryImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|private
specifier|final
name|ExpressionType
name|expressionType
decl_stmt|;
name|UnaryImplementor
parameter_list|(
name|ExpressionType
name|expressionType
parameter_list|)
block|{
name|this
operator|.
name|expressionType
operator|=
name|expressionType
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|makeUnary
argument_list|(
name|expressionType
argument_list|,
name|translatedOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Describes when a function/operator will return null.    *    *<p>STRICT and ANY are similar. STRICT says f(a0, a1) will NEVER return    * null if a0 and a1 are not null. This means that we can check whether f    * returns null just by checking its arguments. Use STRICT in preference to    * ANY whenever possible.</p>    */
enum|enum
name|NullPolicy
block|{
comment|/** Returns null if and only if one of the arguments are null. */
name|STRICT
block|,
comment|/** If any of the arguments are null, return null. */
name|ANY
block|,
comment|/** If any of the arguments are false, result is false; else if any      * arguments are null, result is null; else true. */
name|AND
block|,
comment|/** If any of the arguments are true, result is true; else if any      * arguments are null, result is null; else false. */
name|OR
block|,
comment|/** If any argument is true, result is false; else if any argument is null,      * result is null; else true. */
name|NOT
block|,
name|NONE
block|}
specifier|private
specifier|static
class|class
name|CaseImplementor
implements|implements
name|CallImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
return|return
name|implementRecurse
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|nullAs
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Expression
name|implementRecurse
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|operands
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// the "else" clause
return|return
name|translator
operator|.
name|translate
argument_list|(
name|translator
operator|.
name|builder
operator|.
name|ensureType
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|nullAs
argument_list|)
return|;
block|}
else|else
block|{
name|Expression
name|ifTrue
decl_stmt|;
try|try
block|{
name|ifTrue
operator|=
name|translator
operator|.
name|translate
argument_list|(
name|translator
operator|.
name|builder
operator|.
name|ensureType
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|operands
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|nullAs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RexToLixTranslator
operator|.
name|AlwaysNull
name|e
parameter_list|)
block|{
name|ifTrue
operator|=
literal|null
expr_stmt|;
block|}
name|Expression
name|ifFalse
decl_stmt|;
try|try
block|{
name|ifFalse
operator|=
name|implementRecurse
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|nullAs
argument_list|,
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RexToLixTranslator
operator|.
name|AlwaysNull
name|e
parameter_list|)
block|{
if|if
condition|(
name|ifTrue
operator|==
literal|null
condition|)
block|{
throw|throw
name|RexToLixTranslator
operator|.
name|AlwaysNull
operator|.
name|INSTANCE
throw|;
block|}
name|ifFalse
operator|=
literal|null
expr_stmt|;
block|}
name|Expression
name|test
init|=
name|translator
operator|.
name|translate
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|NullAs
operator|.
name|FALSE
argument_list|)
decl_stmt|;
return|return
name|ifTrue
operator|==
literal|null
operator|||
name|ifFalse
operator|==
literal|null
condition|?
name|Util
operator|.
name|first
argument_list|(
name|ifTrue
argument_list|,
name|ifFalse
argument_list|)
else|:
name|Expressions
operator|.
name|condition
argument_list|(
name|test
argument_list|,
name|ifTrue
argument_list|,
name|ifFalse
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|CastOptimizedImplementor
implements|implements
name|CallImplementor
block|{
specifier|private
specifier|final
name|CallImplementor
name|accurate
decl_stmt|;
specifier|private
name|CastOptimizedImplementor
parameter_list|()
block|{
name|accurate
operator|=
name|createImplementor
argument_list|(
operator|new
name|CastImplementor
argument_list|()
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
comment|// Short-circuit if no cast is required
name|RexNode
name|arg
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|arg
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// No cast required, omit cast
return|return
name|translator
operator|.
name|translate
argument_list|(
name|arg
argument_list|,
name|nullAs
argument_list|)
return|;
block|}
return|return
name|accurate
operator|.
name|implement
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|nullAs
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CastImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|RelDataType
name|sourceType
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// It's only possible for the result to be null if both expression
comment|// and target type are nullable. We assume that the caller did not
comment|// make a mistake. If expression looks nullable, caller WILL have
comment|// checked that expression is not null before calling us.
specifier|final
name|boolean
name|nullable
init|=
name|translator
operator|.
name|isNullable
argument_list|(
name|call
argument_list|)
operator|&&
name|sourceType
operator|.
name|isNullable
argument_list|()
operator|&&
operator|!
name|Primitive
operator|.
name|is
argument_list|(
name|translatedOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|targetType
init|=
name|translator
operator|.
name|nullifyType
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|nullable
argument_list|)
decl_stmt|;
return|return
name|translator
operator|.
name|translateCast
argument_list|(
name|sourceType
argument_list|,
name|targetType
argument_list|,
name|translatedOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ReinterpretImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|translatedOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ValueConstructorImplementor
implements|implements
name|CallImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
return|return
name|translator
operator|.
name|translateConstructor
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ItemImplementor
implements|implements
name|CallImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
specifier|final
name|MethodImplementor
name|implementor
init|=
name|getImplementor
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|implementNullSemantics0
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|nullAs
argument_list|,
name|NullPolicy
operator|.
name|STRICT
argument_list|,
literal|false
argument_list|,
name|implementor
argument_list|)
return|;
block|}
specifier|private
name|MethodImplementor
name|getImplementor
parameter_list|(
name|SqlTypeName
name|sqlTypeName
parameter_list|)
block|{
switch|switch
condition|(
name|sqlTypeName
condition|)
block|{
case|case
name|ARRAY
case|:
return|return
operator|new
name|MethodImplementor
argument_list|(
name|BuiltinMethod
operator|.
name|ARRAY_ITEM
operator|.
name|method
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|MethodImplementor
argument_list|(
name|BuiltinMethod
operator|.
name|MAP_ITEM
operator|.
name|method
argument_list|)
return|;
default|default:
return|return
operator|new
name|MethodImplementor
argument_list|(
name|BuiltinMethod
operator|.
name|ANY_ITEM
operator|.
name|method
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|SystemFunctionImplementor
implements|implements
name|CallImplementor
block|{
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|IS_NULL
case|:
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|IS_NOT_NULL
case|:
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|final
name|SqlOperator
name|op
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|CURRENT_USER
operator|||
name|op
operator|==
name|SESSION_USER
operator|||
name|op
operator|==
name|USER
condition|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|"sa"
argument_list|)
return|;
block|}
if|else if
condition|(
name|op
operator|==
name|SYSTEM_USER
condition|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|op
operator|==
name|CURRENT_PATH
operator|||
name|op
operator|==
name|CURRENT_ROLE
condition|)
block|{
comment|// By default, the CURRENT_ROLE function returns
comment|// the empty string because a role has to be set explicitly.
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|""
argument_list|)
return|;
block|}
if|else if
condition|(
name|op
operator|==
name|CURRENT_TIMESTAMP
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|CURRENT_TIMESTAMP
operator|.
name|method
argument_list|,
name|ROOT
argument_list|)
return|;
block|}
if|else if
condition|(
name|op
operator|==
name|CURRENT_TIME
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|CURRENT_TIME
operator|.
name|method
argument_list|,
name|ROOT
argument_list|)
return|;
block|}
if|else if
condition|(
name|op
operator|==
name|CURRENT_DATE
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|CURRENT_DATE
operator|.
name|method
argument_list|,
name|ROOT
argument_list|)
return|;
block|}
if|else if
condition|(
name|op
operator|==
name|LOCALTIMESTAMP
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|LOCAL_TIMESTAMP
operator|.
name|method
argument_list|,
name|ROOT
argument_list|)
return|;
block|}
if|else if
condition|(
name|op
operator|==
name|LOCALTIME
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltinMethod
operator|.
name|LOCAL_TIME
operator|.
name|method
argument_list|,
name|ROOT
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown function "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Implements "IS XXX" operations such as "IS NULL"    * or "IS NOT TRUE".    *    *<p>What these operators have in common:</p>    * 1. They return TRUE or FALSE, never NULL.    * 2. Of the 3 input values (TRUE, FALSE, NULL) they return TRUE for 1 or 2,    *    FALSE for the other 2 or 1.    */
specifier|private
specifier|static
class|class
name|IsXxxImplementor
implements|implements
name|CallImplementor
block|{
specifier|private
specifier|final
name|Boolean
name|seek
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|negate
decl_stmt|;
specifier|public
name|IsXxxImplementor
parameter_list|(
name|Boolean
name|seek
parameter_list|,
name|boolean
name|negate
parameter_list|)
block|{
name|this
operator|.
name|seek
operator|=
name|seek
expr_stmt|;
name|this
operator|.
name|negate
operator|=
name|negate
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|NullAs
name|nullAs
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
assert|assert
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
if|if
condition|(
name|seek
operator|==
literal|null
condition|)
block|{
return|return
name|translator
operator|.
name|translate
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|negate
condition|?
name|NullAs
operator|.
name|IS_NOT_NULL
else|:
name|NullAs
operator|.
name|IS_NULL
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|maybeNegate
argument_list|(
name|negate
operator|==
name|seek
argument_list|,
name|translator
operator|.
name|translate
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|seek
condition|?
name|NullAs
operator|.
name|FALSE
else|:
name|NullAs
operator|.
name|TRUE
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|NotImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|private
specifier|final
name|NotNullImplementor
name|implementor
decl_stmt|;
specifier|public
name|NotImplementor
parameter_list|(
name|NotNullImplementor
name|implementor
parameter_list|)
block|{
name|this
operator|.
name|implementor
operator|=
name|implementor
expr_stmt|;
block|}
specifier|private
specifier|static
name|NotNullImplementor
name|of
parameter_list|(
name|NotNullImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|NotImplementor
argument_list|(
name|implementor
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
specifier|final
name|Expression
name|expression
init|=
name|implementor
operator|.
name|implement
argument_list|(
name|translator
argument_list|,
name|call
argument_list|,
name|translatedOperands
argument_list|)
decl_stmt|;
return|return
name|Expressions
operator|.
name|not
argument_list|(
name|expression
argument_list|)
return|;
block|}
block|}
comment|/** Implementor for user-defined aggregate functions. */
specifier|static
class|class
name|UserDefinedAggImplementor
implements|implements
name|AggImplementor
block|{
specifier|public
specifier|static
specifier|final
name|UserDefinedAggImplementor
name|INSTANCE
init|=
operator|new
name|UserDefinedAggImplementor
argument_list|()
decl_stmt|;
specifier|private
name|UserDefinedAggImplementor
parameter_list|()
block|{
block|}
specifier|private
specifier|static
name|AggregateFunctionImpl
name|afi
parameter_list|(
name|Aggregation
name|aggregation
parameter_list|)
block|{
specifier|final
name|SqlUserDefinedAggFunction
name|udf
init|=
operator|(
name|SqlUserDefinedAggFunction
operator|)
name|aggregation
decl_stmt|;
return|return
operator|(
name|AggregateFunctionImpl
operator|)
name|udf
operator|.
name|function
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isStatic
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
operator|(
name|method
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|==
name|Modifier
operator|.
name|STATIC
return|;
block|}
specifier|private
name|Expression
name|object
parameter_list|(
name|AggregateFunctionImpl
name|afi
parameter_list|,
name|RexToLixTranslator
name|translator
parameter_list|)
block|{
comment|// TODO: use translator to cache instance
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|afi
operator|.
name|declaringClass
argument_list|)
return|;
block|}
specifier|private
name|Expression
name|call
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|AggregateFunctionImpl
name|afi
parameter_list|,
name|Method
name|method
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
if|if
condition|(
name|isStatic
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|method
argument_list|,
name|arguments
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|object
argument_list|(
name|afi
argument_list|,
name|translator
argument_list|)
argument_list|,
name|method
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
specifier|public
name|Expression
name|implementInit
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|)
block|{
specifier|final
name|AggregateFunctionImpl
name|afi
init|=
name|afi
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|Expression
argument_list|>
name|args
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
return|return
name|call
argument_list|(
name|translator
argument_list|,
name|afi
argument_list|,
name|afi
operator|.
name|initMethod
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
specifier|final
name|AggregateFunctionImpl
name|afi
init|=
name|afi
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|Expression
argument_list|>
name|args
init|=
name|ImmutableList
operator|.
expr|<
name|Expression
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|accumulator
argument_list|)
operator|.
name|addAll
argument_list|(
name|arguments
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|call
argument_list|(
name|translator
argument_list|,
name|afi
argument_list|,
name|afi
operator|.
name|addMethod
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|implementInitAdd
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Type
name|returnType
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|parameterTypes
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
specifier|final
name|AggregateFunctionImpl
name|afi
init|=
name|afi
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
if|if
condition|(
name|afi
operator|.
name|initAddMethod
operator|!=
literal|null
condition|)
block|{
return|return
name|call
argument_list|(
name|translator
argument_list|,
name|afi
argument_list|,
name|afi
operator|.
name|initAddMethod
argument_list|,
name|arguments
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|Expression
name|accumulator
init|=
name|implementInit
argument_list|(
name|translator
argument_list|,
name|aggregation
argument_list|,
name|returnType
argument_list|,
name|parameterTypes
argument_list|)
decl_stmt|;
return|return
name|implementAdd
argument_list|(
name|translator
argument_list|,
name|aggregation
argument_list|,
name|accumulator
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
specifier|public
name|Expression
name|implementResult
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|Aggregation
name|aggregation
parameter_list|,
name|Expression
name|accumulator
parameter_list|)
block|{
specifier|final
name|AggregateFunctionImpl
name|afi
init|=
name|afi
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
if|if
condition|(
name|afi
operator|.
name|resultMethod
operator|==
literal|null
condition|)
block|{
return|return
name|accumulator
return|;
block|}
specifier|final
name|ImmutableList
argument_list|<
name|Expression
argument_list|>
name|args
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|accumulator
argument_list|)
decl_stmt|;
return|return
name|call
argument_list|(
name|translator
argument_list|,
name|afi
argument_list|,
name|afi
operator|.
name|resultMethod
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RexImpTable.java
end_comment

end_unit

