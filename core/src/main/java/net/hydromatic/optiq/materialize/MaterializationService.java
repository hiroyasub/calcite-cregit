begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|clone
operator|.
name|CloneSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Manages the collection of materialized tables known to the system,  * and the process by which they become valid and invalid.  */
end_comment

begin_class
specifier|public
class|class
name|MaterializationService
block|{
specifier|private
specifier|static
specifier|final
name|MaterializationService
name|INSTANCE
init|=
operator|new
name|MaterializationService
argument_list|()
decl_stmt|;
comment|/** For testing. */
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|MaterializationService
argument_list|>
name|THREAD_INSTANCE
init|=
operator|new
name|ThreadLocal
argument_list|<
name|MaterializationService
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|MaterializationService
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|MaterializationService
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|MaterializationActor
name|actor
init|=
operator|new
name|MaterializationActor
argument_list|()
decl_stmt|;
specifier|private
name|MaterializationService
parameter_list|()
block|{
block|}
comment|/** Defines a new materialization. Returns its key. */
specifier|public
name|MaterializationKey
name|defineMaterialization
parameter_list|(
specifier|final
name|OptiqSchema
name|schema
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewSchemaPath
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
specifier|final
name|OptiqConnection
name|connection
init|=
name|MetaImpl
operator|.
name|connect
argument_list|(
name|schema
operator|.
name|root
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|MaterializationKey
name|key
init|=
operator|new
name|MaterializationKey
argument_list|()
decl_stmt|;
name|Table
name|materializedTable
decl_stmt|;
name|RelDataType
name|rowType
init|=
literal|null
decl_stmt|;
name|OptiqSchema
operator|.
name|TableEntry
name|tableEntry
decl_stmt|;
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|materializedTable
operator|=
name|schema
operator|.
name|compositeTableMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|materializedTable
operator|==
literal|null
condition|)
block|{
specifier|final
name|OptiqPrepare
operator|.
name|PrepareResult
argument_list|<
name|Object
argument_list|>
name|prepareResult
init|=
name|Schemas
operator|.
name|prepare
argument_list|(
name|connection
argument_list|,
name|schema
argument_list|,
name|viewSchemaPath
argument_list|,
name|viewSql
argument_list|)
decl_stmt|;
name|rowType
operator|=
name|prepareResult
operator|.
name|rowType
expr_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|connection
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|materializedTable
operator|=
name|CloneSchema
operator|.
name|createCloneTable
argument_list|(
name|typeFactory
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|prepareResult
operator|.
name|rowType
argument_list|)
argument_list|,
name|Functions
operator|.
name|adapt
argument_list|(
name|prepareResult
operator|.
name|columnList
argument_list|,
operator|new
name|Function1
argument_list|<
name|ColumnMetaData
argument_list|,
name|ColumnMetaData
operator|.
name|Rep
argument_list|>
argument_list|()
block|{
specifier|public
name|ColumnMetaData
operator|.
name|Rep
name|apply
parameter_list|(
name|ColumnMetaData
name|column
parameter_list|)
block|{
return|return
name|column
operator|.
name|representation
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|AbstractQueryable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|DataContext
name|dataContext
init|=
name|Schemas
operator|.
name|createDataContext
argument_list|(
name|connection
argument_list|)
decl_stmt|;
return|return
name|prepareResult
operator|.
name|enumerator
argument_list|(
name|dataContext
argument_list|)
return|;
block|}
specifier|public
name|Type
name|getElementType
parameter_list|()
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|QueryProvider
name|getProvider
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|DataContext
name|dataContext
init|=
name|Schemas
operator|.
name|createDataContext
argument_list|(
name|connection
argument_list|)
decl_stmt|;
return|return
name|prepareResult
operator|.
name|iterator
argument_list|(
name|dataContext
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|schema
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|materializedTable
argument_list|)
expr_stmt|;
block|}
name|tableEntry
operator|=
name|schema
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|materializedTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableEntry
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|rowType
operator|==
literal|null
condition|)
block|{
comment|// If we didn't validate the SQL by populating a table, validate it now.
specifier|final
name|OptiqPrepare
operator|.
name|ParseResult
name|parse
init|=
name|Schemas
operator|.
name|parse
argument_list|(
name|connection
argument_list|,
name|schema
argument_list|,
name|viewSchemaPath
argument_list|,
name|viewSql
argument_list|)
decl_stmt|;
name|rowType
operator|=
name|parse
operator|.
name|rowType
expr_stmt|;
block|}
specifier|final
name|MaterializationActor
operator|.
name|Materialization
name|materialization
init|=
operator|new
name|MaterializationActor
operator|.
name|Materialization
argument_list|(
name|key
argument_list|,
name|schema
operator|.
name|root
argument_list|()
argument_list|,
name|tableEntry
argument_list|,
name|viewSql
argument_list|,
name|rowType
argument_list|)
decl_stmt|;
name|actor
operator|.
name|keyMap
operator|.
name|put
argument_list|(
name|materialization
operator|.
name|key
argument_list|,
name|materialization
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/** Checks whether a materialization is valid, and if so, returns the table    * where the data are stored. */
specifier|public
name|OptiqSchema
operator|.
name|TableEntry
name|checkValid
parameter_list|(
name|MaterializationKey
name|key
parameter_list|)
block|{
specifier|final
name|MaterializationActor
operator|.
name|Materialization
name|materialization
init|=
name|actor
operator|.
name|keyMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|materialization
operator|!=
literal|null
condition|)
block|{
return|return
name|materialization
operator|.
name|materializedTable
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Gathers a list of all materialized tables known within a given root    * schema. (Each root schema defines a disconnected namespace, with no overlap    * with the current schema. Especially in a test run, the contents of two    * root schemas may look similar.) */
specifier|public
name|List
argument_list|<
name|Prepare
operator|.
name|Materialization
argument_list|>
name|query
parameter_list|(
name|OptiqSchema
name|rootSchema
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Prepare
operator|.
name|Materialization
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Prepare
operator|.
name|Materialization
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MaterializationActor
operator|.
name|Materialization
name|materialization
range|:
name|actor
operator|.
name|keyMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|materialization
operator|.
name|rootSchema
operator|==
name|rootSchema
operator|&&
name|materialization
operator|.
name|materializedTable
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|Prepare
operator|.
name|Materialization
argument_list|(
name|materialization
operator|.
name|materializedTable
argument_list|,
name|materialization
operator|.
name|sql
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/** De-registers all materialized tables in the system. */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|actor
operator|.
name|keyMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** Used by tests, to ensure that they see their own service. */
specifier|public
specifier|static
name|void
name|setThreadLocal
parameter_list|()
block|{
name|THREAD_INSTANCE
operator|.
name|set
argument_list|(
operator|new
name|MaterializationService
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the instance of the materialization service. Usually the global    * one, but returns a thread-local one during testing (when    * {@link #setThreadLocal()} has been called by the current thread). */
specifier|public
specifier|static
name|MaterializationService
name|instance
parameter_list|()
block|{
name|MaterializationService
name|materializationService
init|=
name|THREAD_INSTANCE
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|materializationService
operator|!=
literal|null
condition|)
block|{
return|return
name|materializationService
return|;
block|}
return|return
name|INSTANCE
return|;
block|}
block|}
end_class

begin_comment
comment|// End MaterializationService.java
end_comment

end_unit

