begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|trace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class is a small extension to {@link Logger}. {@link Logger#log(Level  * level, String msg, Object[] params)} is expensive to call, since the caller  * must always allocate and fill in the array<code>params</code>, even when  *<code>level</code> will prevent a message being logged. On the other hand,  * {@link Logger#log(Level level, String msg)} and {@link Logger#log(Level  * level, String msg, Object)} do not have this problem. As a workaround this  * class provides {@link #log(Level, String msg, Object, Object)} etc. (The  * varargs feature of java 1.5 half-solves this problem, by automatically  * wrapping args in an array, but it does so without testing the level.) Usage:  * replace:<code>static final Logger tracer =  * EigenbaseTracer.getMyTracer();</code> by:<code>static final EigenbaseLogger  * tracer = new EigenbaseLogger(EigenbaseTracer.getMyTracer());</code>  */
end_comment

begin_class
specifier|public
class|class
name|EigenbaseLogger
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
comment|// delegate
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|EigenbaseLogger
parameter_list|(
name|Logger
name|logger
parameter_list|)
block|{
assert|assert
name|logger
operator|!=
literal|null
assert|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Conditionally logs a message with two Object parameters    */
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|msg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|arg1
block|,
name|arg2
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Conditionally logs a message with three Object parameters    */
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|,
name|Object
name|arg3
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|msg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|arg1
block|,
name|arg2
block|,
name|arg3
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Conditionally logs a message with four Object parameters    */
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|,
name|Object
name|arg3
parameter_list|,
name|Object
name|arg4
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|msg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|arg1
block|,
name|arg2
block|,
name|arg3
block|,
name|arg4
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We expose and delegate the commonly used part of the Logger interface.
comment|// For everything else, just expose the delegate. (Could use reflection.)
specifier|public
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|param1
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|msg
argument_list|,
name|param1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|msg
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|thrown
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|msg
argument_list|,
name|thrown
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|severe
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|severe
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|warning
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|config
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|config
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fine
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|fine
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finer
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|finer
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finest
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|finest
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End EigenbaseLogger.java
end_comment

end_unit

