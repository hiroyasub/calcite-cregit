begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// This class is generated. Do NOT modify it, or
end_comment

begin_comment
comment|// add it to source control.
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class was generated  * by class org.eigenbase.resgen.ResourceGen  * from /Users/jhyde/open1/dynamodb/eigenbase/src/org/eigenbase/resource/EigenbaseResource.xml  * on Fri Mar 23 14:27:41 PDT 2012.  * It contains a list of messages, and methods to  * retrieve and format those messages.  */
end_comment

begin_class
specifier|public
class|class
name|EigenbaseResource
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ShadowResourceBundle
block|{
specifier|public
name|EigenbaseResource
parameter_list|()
throws|throws
name|IOException
block|{
block|}
specifier|private
specifier|static
specifier|final
name|String
name|baseName
init|=
literal|"org.eigenbase.resource.EigenbaseResource"
decl_stmt|;
comment|/**    * Retrieves the singleton instance of {@link EigenbaseResource}. If    * the application has called {@link #setThreadLocale}, returns the    * resource for the thread's locale.    */
specifier|public
specifier|static
specifier|synchronized
name|EigenbaseResource
name|instance
parameter_list|()
block|{
return|return
operator|(
name|EigenbaseResource
operator|)
name|instance
argument_list|(
name|baseName
argument_list|,
name|getThreadOrDefaultLocale
argument_list|()
argument_list|,
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|baseName
argument_list|,
name|getThreadOrDefaultLocale
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieves the instance of {@link EigenbaseResource} for the given locale.    */
specifier|public
specifier|static
specifier|synchronized
name|EigenbaseResource
name|instance
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
return|return
operator|(
name|EigenbaseResource
operator|)
name|instance
argument_list|(
name|baseName
argument_list|,
name|locale
argument_list|,
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|baseName
argument_list|,
name|locale
argument_list|)
argument_list|)
return|;
block|}
comment|/**    *<code>ParserContext</code> is '<code>line {0,number,#}, column {1,number,#}</code>'    */
specifier|public
specifier|final
name|_Def0
name|ParserContext
init|=
operator|new
name|_Def0
argument_list|(
literal|"ParserContext"
argument_list|,
literal|"line {0,number,#}, column {1,number,#}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalLiteral</code> is '<code>Illegal {0} literal {1}: {2}</code>'    */
specifier|public
specifier|final
name|_Def1
name|IllegalLiteral
init|=
operator|new
name|_Def1
argument_list|(
literal|"IllegalLiteral"
argument_list|,
literal|"Illegal {0} literal {1}: {2}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IdentifierTooLong</code> is '<code>Length of identifier&#39;&#39;{0}&#39;&#39; must be less than or equal to {1,number,#} characters</code>'    */
specifier|public
specifier|final
name|_Def2
name|IdentifierTooLong
init|=
operator|new
name|_Def2
argument_list|(
literal|"IdentifierTooLong"
argument_list|,
literal|"Length of identifier ''{0}'' must be less than or equal to {1,number,#} characters"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>BadFormat</code> is '<code>not in format&#39;&#39;{0}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def3
name|BadFormat
init|=
operator|new
name|_Def3
argument_list|(
literal|"BadFormat"
argument_list|,
literal|"not in format ''{0}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>BetweenWithoutAnd</code> is '<code>BETWEEN operator has no terminating AND</code>'    */
specifier|public
specifier|final
name|_Def4
name|BetweenWithoutAnd
init|=
operator|new
name|_Def4
argument_list|(
literal|"BetweenWithoutAnd"
argument_list|,
literal|"BETWEEN operator has no terminating AND"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalIntervalLiteral</code> is '<code>Illegal INTERVAL literal {0}; at {1}</code>'    */
specifier|public
specifier|final
name|_Def5
name|IllegalIntervalLiteral
init|=
operator|new
name|_Def5
argument_list|(
literal|"IllegalIntervalLiteral"
argument_list|,
literal|"Illegal INTERVAL literal {0}; at {1}"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"SQLSTATE"
block|,
literal|"42000"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalMinusDate</code> is '<code>Illegal expression. Was expecting&quot;(DATETIME - DATETIME) INTERVALQUALIFIER&quot;</code>'    */
specifier|public
specifier|final
name|_Def6
name|IllegalMinusDate
init|=
operator|new
name|_Def6
argument_list|(
literal|"IllegalMinusDate"
argument_list|,
literal|"Illegal expression. Was expecting \"(DATETIME - DATETIME) INTERVALQUALIFIER\""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalOverlaps</code> is '<code>Illegal overlaps expression. Was expecting expression on the form&quot;(DATETIME, EXPRESSION) OVERLAPS (DATETIME, EXPRESSION)&quot;</code>'    */
specifier|public
specifier|final
name|_Def6
name|IllegalOverlaps
init|=
operator|new
name|_Def6
argument_list|(
literal|"IllegalOverlaps"
argument_list|,
literal|"Illegal overlaps expression. Was expecting expression on the form \"(DATETIME, EXPRESSION) OVERLAPS (DATETIME, EXPRESSION)\""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalNonQueryExpression</code> is '<code>Non-query expression encountered in illegal context</code>'    */
specifier|public
specifier|final
name|_Def6
name|IllegalNonQueryExpression
init|=
operator|new
name|_Def6
argument_list|(
literal|"IllegalNonQueryExpression"
argument_list|,
literal|"Non-query expression encountered in illegal context"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalQueryExpression</code> is '<code>Query expression encountered in illegal context</code>'    */
specifier|public
specifier|final
name|_Def6
name|IllegalQueryExpression
init|=
operator|new
name|_Def6
argument_list|(
literal|"IllegalQueryExpression"
argument_list|,
literal|"Query expression encountered in illegal context"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalCursorExpression</code> is '<code>CURSOR expression encountered in illegal context</code>'    */
specifier|public
specifier|final
name|_Def6
name|IllegalCursorExpression
init|=
operator|new
name|_Def6
argument_list|(
literal|"IllegalCursorExpression"
argument_list|,
literal|"CURSOR expression encountered in illegal context"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalOrderBy</code> is '<code>ORDER BY unexpected</code>'    */
specifier|public
specifier|final
name|_Def6
name|IllegalOrderBy
init|=
operator|new
name|_Def6
argument_list|(
literal|"IllegalOrderBy"
argument_list|,
literal|"ORDER BY unexpected"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalBinaryString</code> is '<code>Illegal binary string {0}</code>'    */
specifier|public
specifier|final
name|_Def7
name|IllegalBinaryString
init|=
operator|new
name|_Def7
argument_list|(
literal|"IllegalBinaryString"
argument_list|,
literal|"Illegal binary string {0}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalFromEmpty</code> is '<code>&#39;&#39;FROM&#39;&#39; without operands preceding it is illegal</code>'    */
specifier|public
specifier|final
name|_Def6
name|IllegalFromEmpty
init|=
operator|new
name|_Def6
argument_list|(
literal|"IllegalFromEmpty"
argument_list|,
literal|"''FROM'' without operands preceding it is illegal"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalRowExpression</code> is '<code>ROW expression encountered in illegal context</code>'    */
specifier|public
specifier|final
name|_Def6
name|IllegalRowExpression
init|=
operator|new
name|_Def6
argument_list|(
literal|"IllegalRowExpression"
argument_list|,
literal|"ROW expression encountered in illegal context"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>InvalidSampleSize</code> is '<code>TABLESAMPLE percentage must be between 0 and 100, inclusive</code>'    */
specifier|public
specifier|final
name|_Def6
name|InvalidSampleSize
init|=
operator|new
name|_Def6
argument_list|(
literal|"InvalidSampleSize"
argument_list|,
literal|"TABLESAMPLE percentage must be between 0 and 100, inclusive"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"SQLSTATE"
block|,
literal|"2202H"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>UnknownCharacterSet</code> is '<code>Unknown character set&#39;&#39;{0}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def7
name|UnknownCharacterSet
init|=
operator|new
name|_Def7
argument_list|(
literal|"UnknownCharacterSet"
argument_list|,
literal|"Unknown character set ''{0}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CharsetEncoding</code> is '<code>Failed to encode&#39;&#39;{0}&#39;&#39; in character set&#39;&#39;{1}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def5
name|CharsetEncoding
init|=
operator|new
name|_Def5
argument_list|(
literal|"CharsetEncoding"
argument_list|,
literal|"Failed to encode ''{0}'' in character set ''{1}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnicodeEscapeCharLength</code> is '<code>UESCAPE&#39;&#39;{0}&#39;&#39; must be exactly one character</code>'    */
specifier|public
specifier|final
name|_Def7
name|UnicodeEscapeCharLength
init|=
operator|new
name|_Def7
argument_list|(
literal|"UnicodeEscapeCharLength"
argument_list|,
literal|"UESCAPE ''{0}'' must be exactly one character"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnicodeEscapeCharIllegal</code> is '<code>UESCAPE&#39;&#39;{0}&#39;&#39; may not be hex digit, whitespace, plus sign, or double quote</code>'    */
specifier|public
specifier|final
name|_Def7
name|UnicodeEscapeCharIllegal
init|=
operator|new
name|_Def7
argument_list|(
literal|"UnicodeEscapeCharIllegal"
argument_list|,
literal|"UESCAPE ''{0}'' may not be hex digit, whitespace, plus sign, or double quote"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnicodeEscapeUnexpected</code> is '<code>UESCAPE cannot be specified without Unicode literal introducer</code>'    */
specifier|public
specifier|final
name|_Def6
name|UnicodeEscapeUnexpected
init|=
operator|new
name|_Def6
argument_list|(
literal|"UnicodeEscapeUnexpected"
argument_list|,
literal|"UESCAPE cannot be specified without Unicode literal introducer"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnicodeEscapeMalformed</code> is '<code>Unicode escape sequence starting at character {0,number,#} is not exactly four hex digits</code>'    */
specifier|public
specifier|final
name|_Def8
name|UnicodeEscapeMalformed
init|=
operator|new
name|_Def8
argument_list|(
literal|"UnicodeEscapeMalformed"
argument_list|,
literal|"Unicode escape sequence starting at character {0,number,#} is not exactly four hex digits"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ValidatorUnknownFunction</code> is '<code>No match found for function signature {0}</code>'    */
specifier|public
specifier|final
name|_Def9
name|ValidatorUnknownFunction
init|=
operator|new
name|_Def9
argument_list|(
literal|"ValidatorUnknownFunction"
argument_list|,
literal|"No match found for function signature {0}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>InvalidArgCount</code> is '<code>Invalid number of arguments to function&#39;&#39;{0}&#39;&#39;. Was expecting {1,number,#} arguments</code>'    */
specifier|public
specifier|final
name|_Def10
name|InvalidArgCount
init|=
operator|new
name|_Def10
argument_list|(
literal|"InvalidArgCount"
argument_list|,
literal|"Invalid number of arguments to function ''{0}''. Was expecting {1,number,#} arguments"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ValidatorContextPoint</code> is '<code>At line {0,number,#}, column {1,number,#}</code>'    */
specifier|public
specifier|final
name|_Def11
name|ValidatorContextPoint
init|=
operator|new
name|_Def11
argument_list|(
literal|"ValidatorContextPoint"
argument_list|,
literal|"At line {0,number,#}, column {1,number,#}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ValidatorContext</code> is '<code>From line {0,number,#}, column {1,number,#} to line {2,number,#}, column {3,number,#}</code>'    */
specifier|public
specifier|final
name|_Def12
name|ValidatorContext
init|=
operator|new
name|_Def12
argument_list|(
literal|"ValidatorContext"
argument_list|,
literal|"From line {0,number,#}, column {1,number,#} to line {2,number,#}, column {3,number,#}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CannotCastValue</code> is '<code>Cast function cannot convert value of type {0} to type {1}</code>'    */
specifier|public
specifier|final
name|_Def13
name|CannotCastValue
init|=
operator|new
name|_Def13
argument_list|(
literal|"CannotCastValue"
argument_list|,
literal|"Cast function cannot convert value of type {0} to type {1}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnknownDatatypeName</code> is '<code>Unknown datatype name&#39;&#39;{0}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def9
name|UnknownDatatypeName
init|=
operator|new
name|_Def9
argument_list|(
literal|"UnknownDatatypeName"
argument_list|,
literal|"Unknown datatype name ''{0}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IncompatibleValueType</code> is '<code>Values passed to {0} operator must have compatible types</code>'    */
specifier|public
specifier|final
name|_Def9
name|IncompatibleValueType
init|=
operator|new
name|_Def9
argument_list|(
literal|"IncompatibleValueType"
argument_list|,
literal|"Values passed to {0} operator must have compatible types"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IncompatibleTypesInList</code> is '<code>Values in expression list must have compatible types</code>'    */
specifier|public
specifier|final
name|_Def4
name|IncompatibleTypesInList
init|=
operator|new
name|_Def4
argument_list|(
literal|"IncompatibleTypesInList"
argument_list|,
literal|"Values in expression list must have compatible types"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IncompatibleCharset</code> is '<code>Cannot apply {0} to the two different charsets {1} and {2}</code>'    */
specifier|public
specifier|final
name|_Def14
name|IncompatibleCharset
init|=
operator|new
name|_Def14
argument_list|(
literal|"IncompatibleCharset"
argument_list|,
literal|"Cannot apply {0} to the two different charsets {1} and {2}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>InvalidOrderByPos</code> is '<code>ORDER BY is only allowed on top-level SELECT</code>'    */
specifier|public
specifier|final
name|_Def4
name|InvalidOrderByPos
init|=
operator|new
name|_Def4
argument_list|(
literal|"InvalidOrderByPos"
argument_list|,
literal|"ORDER BY is only allowed on top-level SELECT"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnknownIdentifier</code> is '<code>Unknown identifier&#39;&#39;{0}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def9
name|UnknownIdentifier
init|=
operator|new
name|_Def9
argument_list|(
literal|"UnknownIdentifier"
argument_list|,
literal|"Unknown identifier ''{0}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnknownField</code> is '<code>Unknown field&#39;&#39;{0}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def9
name|UnknownField
init|=
operator|new
name|_Def9
argument_list|(
literal|"UnknownField"
argument_list|,
literal|"Unknown field ''{0}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnknownTargetColumn</code> is '<code>Unknown target column&#39;&#39;{0}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def9
name|UnknownTargetColumn
init|=
operator|new
name|_Def9
argument_list|(
literal|"UnknownTargetColumn"
argument_list|,
literal|"Unknown target column ''{0}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>DuplicateTargetColumn</code> is '<code>Target column&#39;&#39;{0}&#39;&#39; is assigned more than once</code>'    */
specifier|public
specifier|final
name|_Def9
name|DuplicateTargetColumn
init|=
operator|new
name|_Def9
argument_list|(
literal|"DuplicateTargetColumn"
argument_list|,
literal|"Target column ''{0}'' is assigned more than once"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnmatchInsertColumn</code> is '<code>Number of INSERT target columns ({0,number}) does not equal number of source items ({1,number})</code>'    */
specifier|public
specifier|final
name|_Def15
name|UnmatchInsertColumn
init|=
operator|new
name|_Def15
argument_list|(
literal|"UnmatchInsertColumn"
argument_list|,
literal|"Number of INSERT target columns ({0,number}) does not equal number of source items ({1,number})"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>TypeNotAssignable</code> is '<code>Cannot assign to target field&#39;&#39;{0}&#39;&#39; of type {1} from source field&#39;&#39;{2}&#39;&#39; of type {3}</code>'    */
specifier|public
specifier|final
name|_Def16
name|TypeNotAssignable
init|=
operator|new
name|_Def16
argument_list|(
literal|"TypeNotAssignable"
argument_list|,
literal|"Cannot assign to target field ''{0}'' of type {1} from source field ''{2}'' of type {3}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>TableNameNotFound</code> is '<code>Table&#39;&#39;{0}&#39;&#39; not found</code>'    */
specifier|public
specifier|final
name|_Def9
name|TableNameNotFound
init|=
operator|new
name|_Def9
argument_list|(
literal|"TableNameNotFound"
argument_list|,
literal|"Table ''{0}'' not found"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ColumnNotFound</code> is '<code>Column&#39;&#39;{0}&#39;&#39; not found in any table</code>'    */
specifier|public
specifier|final
name|_Def9
name|ColumnNotFound
init|=
operator|new
name|_Def9
argument_list|(
literal|"ColumnNotFound"
argument_list|,
literal|"Column ''{0}'' not found in any table"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ColumnNotFoundInTable</code> is '<code>Column&#39;&#39;{0}&#39;&#39; not found in table&#39;&#39;{1}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def13
name|ColumnNotFoundInTable
init|=
operator|new
name|_Def13
argument_list|(
literal|"ColumnNotFoundInTable"
argument_list|,
literal|"Column ''{0}'' not found in table ''{1}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ColumnAmbiguous</code> is '<code>Column&#39;&#39;{0}&#39;&#39; is ambiguous</code>'    */
specifier|public
specifier|final
name|_Def9
name|ColumnAmbiguous
init|=
operator|new
name|_Def9
argument_list|(
literal|"ColumnAmbiguous"
argument_list|,
literal|"Column ''{0}'' is ambiguous"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NeedQueryOp</code> is '<code>Operand {0} must be a query</code>'    */
specifier|public
specifier|final
name|_Def9
name|NeedQueryOp
init|=
operator|new
name|_Def9
argument_list|(
literal|"NeedQueryOp"
argument_list|,
literal|"Operand {0} must be a query"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NeedSameTypeParameter</code> is '<code>Parameters must be of the same type</code>'    */
specifier|public
specifier|final
name|_Def4
name|NeedSameTypeParameter
init|=
operator|new
name|_Def4
argument_list|(
literal|"NeedSameTypeParameter"
argument_list|,
literal|"Parameters must be of the same type"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CanNotApplyOp2Type</code> is '<code>Cannot apply&#39;&#39;{0}&#39;&#39; to arguments of type {1}. Supported form(s): {2}</code>'    */
specifier|public
specifier|final
name|_Def14
name|CanNotApplyOp2Type
init|=
operator|new
name|_Def14
argument_list|(
literal|"CanNotApplyOp2Type"
argument_list|,
literal|"Cannot apply ''{0}'' to arguments of type {1}. Supported form(s): {2}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ExpectedBoolean</code> is '<code>Expected a boolean type</code>'    */
specifier|public
specifier|final
name|_Def4
name|ExpectedBoolean
init|=
operator|new
name|_Def4
argument_list|(
literal|"ExpectedBoolean"
argument_list|,
literal|"Expected a boolean type"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>MustNotNullInElse</code> is '<code>ELSE clause or at least one THEN clause must be non-NULL</code>'    */
specifier|public
specifier|final
name|_Def4
name|MustNotNullInElse
init|=
operator|new
name|_Def4
argument_list|(
literal|"MustNotNullInElse"
argument_list|,
literal|"ELSE clause or at least one THEN clause must be non-NULL"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>FunctionUndefined</code> is '<code>Function&#39;&#39;{0}&#39;&#39; is not defined</code>'    */
specifier|public
specifier|final
name|_Def9
name|FunctionUndefined
init|=
operator|new
name|_Def9
argument_list|(
literal|"FunctionUndefined"
argument_list|,
literal|"Function ''{0}'' is not defined"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>WrongNumberOfParam</code> is '<code>Encountered {0} with {1,number} parameter(s); was expecting {2}</code>'    */
specifier|public
specifier|final
name|_Def17
name|WrongNumberOfParam
init|=
operator|new
name|_Def17
argument_list|(
literal|"WrongNumberOfParam"
argument_list|,
literal|"Encountered {0} with {1,number} parameter(s); was expecting {2}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IllegalMixingOfTypes</code> is '<code>Illegal mixing of types in CASE or COALESCE statement</code>'    */
specifier|public
specifier|final
name|_Def4
name|IllegalMixingOfTypes
init|=
operator|new
name|_Def4
argument_list|(
literal|"IllegalMixingOfTypes"
argument_list|,
literal|"Illegal mixing of types in CASE or COALESCE statement"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>InvalidCompare</code> is '<code>Invalid compare. Comparing  (collation, coercibility): ({0}, {1} with ({2}, {3}) is illegal</code>'    */
specifier|public
specifier|final
name|_Def18
name|InvalidCompare
init|=
operator|new
name|_Def18
argument_list|(
literal|"InvalidCompare"
argument_list|,
literal|"Invalid compare. Comparing  (collation, coercibility): ({0}, {1} with ({2}, {3}) is illegal"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>DifferentCollations</code> is '<code>Invalid syntax. Two explicit different collations ({0}, {1}) are illegal</code>'    */
specifier|public
specifier|final
name|_Def5
name|DifferentCollations
init|=
operator|new
name|_Def5
argument_list|(
literal|"DifferentCollations"
argument_list|,
literal|"Invalid syntax. Two explicit different collations ({0}, {1}) are illegal"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>TypeNotComparable</code> is '<code>{0} is not comparable to {1}</code>'    */
specifier|public
specifier|final
name|_Def13
name|TypeNotComparable
init|=
operator|new
name|_Def13
argument_list|(
literal|"TypeNotComparable"
argument_list|,
literal|"{0} is not comparable to {1}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>TypeNotComparableNear</code> is '<code>Cannot compare values of types&#39;&#39;{0}&#39;&#39;,&#39;&#39;{1}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def13
name|TypeNotComparableNear
init|=
operator|new
name|_Def13
argument_list|(
literal|"TypeNotComparableNear"
argument_list|,
literal|"Cannot compare values of types ''{0}'', ''{1}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>WrongNumOfArguments</code> is '<code>Wrong number of arguments to expression</code>'    */
specifier|public
specifier|final
name|_Def4
name|WrongNumOfArguments
init|=
operator|new
name|_Def4
argument_list|(
literal|"WrongNumOfArguments"
argument_list|,
literal|"Wrong number of arguments to expression"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>OperandNotComparable</code> is '<code>Operands {0} not comparable to each other</code>'    */
specifier|public
specifier|final
name|_Def9
name|OperandNotComparable
init|=
operator|new
name|_Def9
argument_list|(
literal|"OperandNotComparable"
argument_list|,
literal|"Operands {0} not comparable to each other"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>TypeNotComparableEachOther</code> is '<code>Types {0} not comparable to each other</code>'    */
specifier|public
specifier|final
name|_Def9
name|TypeNotComparableEachOther
init|=
operator|new
name|_Def9
argument_list|(
literal|"TypeNotComparableEachOther"
argument_list|,
literal|"Types {0} not comparable to each other"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NumberLiteralOutOfRange</code> is '<code>Numeric literal&#39;&#39;{0}&#39;&#39; out of range</code>'    */
specifier|public
specifier|final
name|_Def9
name|NumberLiteralOutOfRange
init|=
operator|new
name|_Def9
argument_list|(
literal|"NumberLiteralOutOfRange"
argument_list|,
literal|"Numeric literal ''{0}'' out of range"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>DateLiteralOutOfRange</code> is '<code>Date literal&#39;&#39;{0}&#39;&#39; out of range</code>'    */
specifier|public
specifier|final
name|_Def9
name|DateLiteralOutOfRange
init|=
operator|new
name|_Def9
argument_list|(
literal|"DateLiteralOutOfRange"
argument_list|,
literal|"Date literal ''{0}'' out of range"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>StringFragsOnSameLine</code> is '<code>String literal continued on same line</code>'    */
specifier|public
specifier|final
name|_Def4
name|StringFragsOnSameLine
init|=
operator|new
name|_Def4
argument_list|(
literal|"StringFragsOnSameLine"
argument_list|,
literal|"String literal continued on same line"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>AliasMustBeSimpleIdentifier</code> is '<code>Table or column alias must be a simple identifier</code>'    */
specifier|public
specifier|final
name|_Def4
name|AliasMustBeSimpleIdentifier
init|=
operator|new
name|_Def4
argument_list|(
literal|"AliasMustBeSimpleIdentifier"
argument_list|,
literal|"Table or column alias must be a simple identifier"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>AliasListDegree</code> is '<code>List of column aliases must have same degree as table; table has {0,number,#} columns {1}, whereas alias list has {2,number,#} columns</code>'    */
specifier|public
specifier|final
name|_Def19
name|AliasListDegree
init|=
operator|new
name|_Def19
argument_list|(
literal|"AliasListDegree"
argument_list|,
literal|"List of column aliases must have same degree as table; table has {0,number,#} columns {1}, whereas alias list has {2,number,#} columns"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>AliasListDuplicate</code> is '<code>Duplicate name&#39;&#39;{0}&#39;&#39; in column alias list</code>'    */
specifier|public
specifier|final
name|_Def9
name|AliasListDuplicate
init|=
operator|new
name|_Def9
argument_list|(
literal|"AliasListDuplicate"
argument_list|,
literal|"Duplicate name ''{0}'' in column alias list"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>JoinRequiresCondition</code> is '<code>INNER, LEFT, RIGHT or FULL join requires a condition (NATURAL keyword or ON or USING clause)</code>'    */
specifier|public
specifier|final
name|_Def4
name|JoinRequiresCondition
init|=
operator|new
name|_Def4
argument_list|(
literal|"JoinRequiresCondition"
argument_list|,
literal|"INNER, LEFT, RIGHT or FULL join requires a condition (NATURAL keyword or ON or USING clause)"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CrossJoinDisallowsCondition</code> is '<code>Cannot specify condition (NATURAL keyword, or ON or USING clause) following CROSS JOIN</code>'    */
specifier|public
specifier|final
name|_Def4
name|CrossJoinDisallowsCondition
init|=
operator|new
name|_Def4
argument_list|(
literal|"CrossJoinDisallowsCondition"
argument_list|,
literal|"Cannot specify condition (NATURAL keyword, or ON or USING clause) following CROSS JOIN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NaturalDisallowsOnOrUsing</code> is '<code>Cannot specify NATURAL keyword with ON or USING clause</code>'    */
specifier|public
specifier|final
name|_Def4
name|NaturalDisallowsOnOrUsing
init|=
operator|new
name|_Def4
argument_list|(
literal|"NaturalDisallowsOnOrUsing"
argument_list|,
literal|"Cannot specify NATURAL keyword with ON or USING clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ColumnInUsingNotUnique</code> is '<code>Column name&#39;&#39;{0}&#39;&#39; in USING clause is not unique on one side of join</code>'    */
specifier|public
specifier|final
name|_Def9
name|ColumnInUsingNotUnique
init|=
operator|new
name|_Def9
argument_list|(
literal|"ColumnInUsingNotUnique"
argument_list|,
literal|"Column name ''{0}'' in USING clause is not unique on one side of join"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NaturalOrUsingColumnNotCompatible</code> is '<code>Column&#39;&#39;{0}&#39;&#39; matched using NATURAL keyword or USING clause has incompatible types: cannot compare&#39;&#39;{1}&#39;&#39; to&#39;&#39;{2}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def14
name|NaturalOrUsingColumnNotCompatible
init|=
operator|new
name|_Def14
argument_list|(
literal|"NaturalOrUsingColumnNotCompatible"
argument_list|,
literal|"Column ''{0}'' matched using NATURAL keyword or USING clause has incompatible types: cannot compare ''{1}'' to ''{2}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>WindowNotFound</code> is '<code>Window&#39;&#39;{0}&#39;&#39; not found</code>'    */
specifier|public
specifier|final
name|_Def9
name|WindowNotFound
init|=
operator|new
name|_Def9
argument_list|(
literal|"WindowNotFound"
argument_list|,
literal|"Window ''{0}'' not found"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NotGroupExpr</code> is '<code>Expression&#39;&#39;{0}&#39;&#39; is not being grouped</code>'    */
specifier|public
specifier|final
name|_Def9
name|NotGroupExpr
init|=
operator|new
name|_Def9
argument_list|(
literal|"NotGroupExpr"
argument_list|,
literal|"Expression ''{0}'' is not being grouped"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NotSelectDistinctExpr</code> is '<code>Expression&#39;&#39;{0}&#39;&#39; is not in the select clause</code>'    */
specifier|public
specifier|final
name|_Def9
name|NotSelectDistinctExpr
init|=
operator|new
name|_Def9
argument_list|(
literal|"NotSelectDistinctExpr"
argument_list|,
literal|"Expression ''{0}'' is not in the select clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>AggregateIllegalInClause</code> is '<code>Aggregate expression is illegal in {0} clause</code>'    */
specifier|public
specifier|final
name|_Def9
name|AggregateIllegalInClause
init|=
operator|new
name|_Def9
argument_list|(
literal|"AggregateIllegalInClause"
argument_list|,
literal|"Aggregate expression is illegal in {0} clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>WindowedAggregateIllegalInClause</code> is '<code>Windowed aggregate expression is illegal in {0} clause</code>'    */
specifier|public
specifier|final
name|_Def9
name|WindowedAggregateIllegalInClause
init|=
operator|new
name|_Def9
argument_list|(
literal|"WindowedAggregateIllegalInClause"
argument_list|,
literal|"Windowed aggregate expression is illegal in {0} clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>AggregateIllegalInGroupBy</code> is '<code>Aggregate expression is illegal in GROUP BY clause</code>'    */
specifier|public
specifier|final
name|_Def4
name|AggregateIllegalInGroupBy
init|=
operator|new
name|_Def4
argument_list|(
literal|"AggregateIllegalInGroupBy"
argument_list|,
literal|"Aggregate expression is illegal in GROUP BY clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NestedAggIllegal</code> is '<code>Aggregate expressions cannot be nested</code>'    */
specifier|public
specifier|final
name|_Def4
name|NestedAggIllegal
init|=
operator|new
name|_Def4
argument_list|(
literal|"NestedAggIllegal"
argument_list|,
literal|"Aggregate expressions cannot be nested"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>AggregateIllegalInOrderBy</code> is '<code>Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT</code>'    */
specifier|public
specifier|final
name|_Def4
name|AggregateIllegalInOrderBy
init|=
operator|new
name|_Def4
argument_list|(
literal|"AggregateIllegalInOrderBy"
argument_list|,
literal|"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CondMustBeBoolean</code> is '<code>{0} clause must be a condition</code>'    */
specifier|public
specifier|final
name|_Def9
name|CondMustBeBoolean
init|=
operator|new
name|_Def9
argument_list|(
literal|"CondMustBeBoolean"
argument_list|,
literal|"{0} clause must be a condition"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>HavingMustBeBoolean</code> is '<code>HAVING clause must be a condition</code>'    */
specifier|public
specifier|final
name|_Def4
name|HavingMustBeBoolean
init|=
operator|new
name|_Def4
argument_list|(
literal|"HavingMustBeBoolean"
argument_list|,
literal|"HAVING clause must be a condition"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>OverNonAggregate</code> is '<code>OVER must be applied to aggregate function</code>'    */
specifier|public
specifier|final
name|_Def4
name|OverNonAggregate
init|=
operator|new
name|_Def4
argument_list|(
literal|"OverNonAggregate"
argument_list|,
literal|"OVER must be applied to aggregate function"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CannotOverrideWindowAttribute</code> is '<code>Cannot override window attribute</code>'    */
specifier|public
specifier|final
name|_Def4
name|CannotOverrideWindowAttribute
init|=
operator|new
name|_Def4
argument_list|(
literal|"CannotOverrideWindowAttribute"
argument_list|,
literal|"Cannot override window attribute"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ColumnCountMismatchInSetop</code> is '<code>Column count mismatch in {0}</code>'    */
specifier|public
specifier|final
name|_Def9
name|ColumnCountMismatchInSetop
init|=
operator|new
name|_Def9
argument_list|(
literal|"ColumnCountMismatchInSetop"
argument_list|,
literal|"Column count mismatch in {0}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ColumnTypeMismatchInSetop</code> is '<code>Type mismatch in column {0,number} of {1}</code>'    */
specifier|public
specifier|final
name|_Def20
name|ColumnTypeMismatchInSetop
init|=
operator|new
name|_Def20
argument_list|(
literal|"ColumnTypeMismatchInSetop"
argument_list|,
literal|"Type mismatch in column {0,number} of {1}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>BinaryLiteralOdd</code> is '<code>Binary literal string must contain an even number of hexits</code>'    */
specifier|public
specifier|final
name|_Def4
name|BinaryLiteralOdd
init|=
operator|new
name|_Def4
argument_list|(
literal|"BinaryLiteralOdd"
argument_list|,
literal|"Binary literal string must contain an even number of hexits"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>BinaryLiteralInvalid</code> is '<code>Binary literal string must contain only characters&#39;&#39;0&#39;&#39; -&#39;&#39;9&#39;&#39;,&#39;&#39;A&#39;&#39; -&#39;&#39;F&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def4
name|BinaryLiteralInvalid
init|=
operator|new
name|_Def4
argument_list|(
literal|"BinaryLiteralInvalid"
argument_list|,
literal|"Binary literal string must contain only characters ''0'' - ''9'', ''A'' - ''F''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnsupportedIntervalLiteral</code> is '<code>Illegal interval literal format {0} for {1}</code>'    */
specifier|public
specifier|final
name|_Def13
name|UnsupportedIntervalLiteral
init|=
operator|new
name|_Def13
argument_list|(
literal|"UnsupportedIntervalLiteral"
argument_list|,
literal|"Illegal interval literal format {0} for {1}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IntervalFieldExceedsPrecision</code> is '<code>Interval field value {0,number} exceeds precision of {1} field</code>'    */
specifier|public
specifier|final
name|_Def20
name|IntervalFieldExceedsPrecision
init|=
operator|new
name|_Def20
argument_list|(
literal|"IntervalFieldExceedsPrecision"
argument_list|,
literal|"Interval field value {0,number} exceeds precision of {1} field"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CompoundOrderByProhibitsRange</code> is '<code>RANGE clause cannot be used with compound ORDER BY clause</code>'    */
specifier|public
specifier|final
name|_Def4
name|CompoundOrderByProhibitsRange
init|=
operator|new
name|_Def4
argument_list|(
literal|"CompoundOrderByProhibitsRange"
argument_list|,
literal|"RANGE clause cannot be used with compound ORDER BY clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>OrderByDataTypeProhibitsRange</code> is '<code>Data type of ORDER BY prohibits use of RANGE clause</code>'    */
specifier|public
specifier|final
name|_Def4
name|OrderByDataTypeProhibitsRange
init|=
operator|new
name|_Def4
argument_list|(
literal|"OrderByDataTypeProhibitsRange"
argument_list|,
literal|"Data type of ORDER BY prohibits use of RANGE clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>OrderByRangeMismatch</code> is '<code>Data Type mismatch between ORDER BY and RANGE clause</code>'    */
specifier|public
specifier|final
name|_Def4
name|OrderByRangeMismatch
init|=
operator|new
name|_Def4
argument_list|(
literal|"OrderByRangeMismatch"
argument_list|,
literal|"Data Type mismatch between ORDER BY and RANGE clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>DateRequiresInterval</code> is '<code>Window ORDER BY expression of type DATE requires range of type INTERVAL</code>'    */
specifier|public
specifier|final
name|_Def4
name|DateRequiresInterval
init|=
operator|new
name|_Def4
argument_list|(
literal|"DateRequiresInterval"
argument_list|,
literal|"Window ORDER BY expression of type DATE requires range of type INTERVAL"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>RangeOrRowMustBeConstant</code> is '<code>Window boundary must be constant</code>'    */
specifier|public
specifier|final
name|_Def4
name|RangeOrRowMustBeConstant
init|=
operator|new
name|_Def4
argument_list|(
literal|"RangeOrRowMustBeConstant"
argument_list|,
literal|"Window boundary must be constant"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>RowMustBeNonNegativeIntegral</code> is '<code>ROWS value must be a non-negative integral constant</code>'    */
specifier|public
specifier|final
name|_Def4
name|RowMustBeNonNegativeIntegral
init|=
operator|new
name|_Def4
argument_list|(
literal|"RowMustBeNonNegativeIntegral"
argument_list|,
literal|"ROWS value must be a non-negative integral constant"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>OverMissingOrderBy</code> is '<code>Window specification must contain an ORDER BY clause</code>'    */
specifier|public
specifier|final
name|_Def4
name|OverMissingOrderBy
init|=
operator|new
name|_Def4
argument_list|(
literal|"OverMissingOrderBy"
argument_list|,
literal|"Window specification must contain an ORDER BY clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>BadLowerBoundary</code> is '<code>UNBOUNDED FOLLOWING cannot be specified for the lower frame boundary</code>'    */
specifier|public
specifier|final
name|_Def4
name|BadLowerBoundary
init|=
operator|new
name|_Def4
argument_list|(
literal|"BadLowerBoundary"
argument_list|,
literal|"UNBOUNDED FOLLOWING cannot be specified for the lower frame boundary"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>BadUpperBoundary</code> is '<code>UNBOUNDED PRECEDING cannot be specified for the upper frame boundary</code>'    */
specifier|public
specifier|final
name|_Def4
name|BadUpperBoundary
init|=
operator|new
name|_Def4
argument_list|(
literal|"BadUpperBoundary"
argument_list|,
literal|"UNBOUNDED PRECEDING cannot be specified for the upper frame boundary"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CurrentRowPrecedingError</code> is '<code>Upper frame boundary cannot be PRECEDING when lower boundary is CURRENT ROW</code>'    */
specifier|public
specifier|final
name|_Def4
name|CurrentRowPrecedingError
init|=
operator|new
name|_Def4
argument_list|(
literal|"CurrentRowPrecedingError"
argument_list|,
literal|"Upper frame boundary cannot be PRECEDING when lower boundary is CURRENT ROW"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CurrentRowFollowingError</code> is '<code>Upper frame boundary cannot be CURRENT ROW when lower boundary is FOLLOWING</code>'    */
specifier|public
specifier|final
name|_Def4
name|CurrentRowFollowingError
init|=
operator|new
name|_Def4
argument_list|(
literal|"CurrentRowFollowingError"
argument_list|,
literal|"Upper frame boundary cannot be CURRENT ROW when lower boundary is FOLLOWING"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>FollowingBeforePrecedingError</code> is '<code>Upper frame boundary cannot be PRECEDING when lower boundary is FOLLOWING</code>'    */
specifier|public
specifier|final
name|_Def4
name|FollowingBeforePrecedingError
init|=
operator|new
name|_Def4
argument_list|(
literal|"FollowingBeforePrecedingError"
argument_list|,
literal|"Upper frame boundary cannot be PRECEDING when lower boundary is FOLLOWING"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>WindowNameMustBeSimple</code> is '<code>Window name must be a simple identifier</code>'    */
specifier|public
specifier|final
name|_Def4
name|WindowNameMustBeSimple
init|=
operator|new
name|_Def4
argument_list|(
literal|"WindowNameMustBeSimple"
argument_list|,
literal|"Window name must be a simple identifier"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>DuplicateWindowName</code> is '<code>Duplicate window names not allowed</code>'    */
specifier|public
specifier|final
name|_Def4
name|DuplicateWindowName
init|=
operator|new
name|_Def4
argument_list|(
literal|"DuplicateWindowName"
argument_list|,
literal|"Duplicate window names not allowed"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>EmptyWindowSpec</code> is '<code>Empty window specification not allowed</code>'    */
specifier|public
specifier|final
name|_Def4
name|EmptyWindowSpec
init|=
operator|new
name|_Def4
argument_list|(
literal|"EmptyWindowSpec"
argument_list|,
literal|"Empty window specification not allowed"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>DupWindowSpec</code> is '<code>Duplicate window specification not allowed in the same window clause</code>'    */
specifier|public
specifier|final
name|_Def4
name|DupWindowSpec
init|=
operator|new
name|_Def4
argument_list|(
literal|"DupWindowSpec"
argument_list|,
literal|"Duplicate window specification not allowed in the same window clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>RankWithFrame</code> is '<code>ROW/RANGE not allowed with RANK or DENSE_RANK functions</code>'    */
specifier|public
specifier|final
name|_Def4
name|RankWithFrame
init|=
operator|new
name|_Def4
argument_list|(
literal|"RankWithFrame"
argument_list|,
literal|"ROW/RANGE not allowed with RANK or DENSE_RANK functions"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>FuncNeedsOrderBy</code> is '<code>RANK or DENSE_RANK functions require ORDER BY clause in window specification</code>'    */
specifier|public
specifier|final
name|_Def4
name|FuncNeedsOrderBy
init|=
operator|new
name|_Def4
argument_list|(
literal|"FuncNeedsOrderBy"
argument_list|,
literal|"RANK or DENSE_RANK functions require ORDER BY clause in window specification"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>PartitionNotAllowed</code> is '<code>PARTITION BY not allowed with existing window reference</code>'    */
specifier|public
specifier|final
name|_Def4
name|PartitionNotAllowed
init|=
operator|new
name|_Def4
argument_list|(
literal|"PartitionNotAllowed"
argument_list|,
literal|"PARTITION BY not allowed with existing window reference"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>OrderByOverlap</code> is '<code>ORDER BY not allowed in both base and referenced windows</code>'    */
specifier|public
specifier|final
name|_Def4
name|OrderByOverlap
init|=
operator|new
name|_Def4
argument_list|(
literal|"OrderByOverlap"
argument_list|,
literal|"ORDER BY not allowed in both base and referenced windows"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>RefWindowWithFrame</code> is '<code>Referenced window cannot have framing declarations</code>'    */
specifier|public
specifier|final
name|_Def4
name|RefWindowWithFrame
init|=
operator|new
name|_Def4
argument_list|(
literal|"RefWindowWithFrame"
argument_list|,
literal|"Referenced window cannot have framing declarations"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>TypeNotSupported</code> is '<code>Type&#39;&#39;{0}&#39;&#39; is not supported</code>'    */
specifier|public
specifier|final
name|_Def9
name|TypeNotSupported
init|=
operator|new
name|_Def9
argument_list|(
literal|"TypeNotSupported"
argument_list|,
literal|"Type ''{0}'' is not supported"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>FunctionQuantifierNotAllowed</code> is '<code>DISTINCT/ALL not allowed with {0} function</code>'    */
specifier|public
specifier|final
name|_Def9
name|FunctionQuantifierNotAllowed
init|=
operator|new
name|_Def9
argument_list|(
literal|"FunctionQuantifierNotAllowed"
argument_list|,
literal|"DISTINCT/ALL not allowed with {0} function"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>AccessNotAllowed</code> is '<code>Not allowed to perform {0} on {1}</code>'    */
specifier|public
specifier|final
name|_Def13
name|AccessNotAllowed
init|=
operator|new
name|_Def13
argument_list|(
literal|"AccessNotAllowed"
argument_list|,
literal|"Not allowed to perform {0} on {1}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>MinMaxBadType</code> is '<code>The {0} function does not support the {1} data type.</code>'    */
specifier|public
specifier|final
name|_Def13
name|MinMaxBadType
init|=
operator|new
name|_Def13
argument_list|(
literal|"MinMaxBadType"
argument_list|,
literal|"The {0} function does not support the {1} data type."
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>OnlyScalarSubqueryAllowed</code> is '<code>Only scalar subqueries allowed in select list.</code>'    */
specifier|public
specifier|final
name|_Def4
name|OnlyScalarSubqueryAllowed
init|=
operator|new
name|_Def4
argument_list|(
literal|"OnlyScalarSubqueryAllowed"
argument_list|,
literal|"Only scalar subqueries allowed in select list."
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>OrderByOrdinalOutOfRange</code> is '<code>Ordinal out of range</code>'    */
specifier|public
specifier|final
name|_Def4
name|OrderByOrdinalOutOfRange
init|=
operator|new
name|_Def4
argument_list|(
literal|"OrderByOrdinalOutOfRange"
argument_list|,
literal|"Ordinal out of range"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>WindowHasNegativeSize</code> is '<code>Window has negative size</code>'    */
specifier|public
specifier|final
name|_Def4
name|WindowHasNegativeSize
init|=
operator|new
name|_Def4
argument_list|(
literal|"WindowHasNegativeSize"
argument_list|,
literal|"Window has negative size"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>UnboundedFollowingWindowNotSupported</code> is '<code>UNBOUNDED FOLLOWING window not supported</code>'    */
specifier|public
specifier|final
name|_Def4
name|UnboundedFollowingWindowNotSupported
init|=
operator|new
name|_Def4
argument_list|(
literal|"UnboundedFollowingWindowNotSupported"
argument_list|,
literal|"UNBOUNDED FOLLOWING window not supported"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>CannotUseDisallowPartialWithRange</code> is '<code>Cannot use DISALLOW PARTIAL with window based on RANGE</code>'    */
specifier|public
specifier|final
name|_Def4
name|CannotUseDisallowPartialWithRange
init|=
operator|new
name|_Def4
argument_list|(
literal|"CannotUseDisallowPartialWithRange"
argument_list|,
literal|"Cannot use DISALLOW PARTIAL with window based on RANGE"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IntervalStartPrecisionOutOfRange</code> is '<code>Interval leading field precision&#39;&#39;{0}&#39;&#39; out of range for {1}</code>'    */
specifier|public
specifier|final
name|_Def13
name|IntervalStartPrecisionOutOfRange
init|=
operator|new
name|_Def13
argument_list|(
literal|"IntervalStartPrecisionOutOfRange"
argument_list|,
literal|"Interval leading field precision ''{0}'' out of range for {1}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>IntervalFractionalSecondPrecisionOutOfRange</code> is '<code>Interval fractional second precision&#39;&#39;{0}&#39;&#39; out of range for {1}</code>'    */
specifier|public
specifier|final
name|_Def13
name|IntervalFractionalSecondPrecisionOutOfRange
init|=
operator|new
name|_Def13
argument_list|(
literal|"IntervalFractionalSecondPrecisionOutOfRange"
argument_list|,
literal|"Interval fractional second precision ''{0}'' out of range for {1}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>FromAliasDuplicate</code> is '<code>Duplicate relation name&#39;&#39;{0}&#39;&#39; in FROM clause</code>'    */
specifier|public
specifier|final
name|_Def9
name|FromAliasDuplicate
init|=
operator|new
name|_Def9
argument_list|(
literal|"FromAliasDuplicate"
argument_list|,
literal|"Duplicate relation name ''{0}'' in FROM clause"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>DuplicateColumnName</code> is '<code>Duplicate column name&#39;&#39;{0}&#39;&#39; in output</code>'    */
specifier|public
specifier|final
name|_Def9
name|DuplicateColumnName
init|=
operator|new
name|_Def9
argument_list|(
literal|"DuplicateColumnName"
argument_list|,
literal|"Duplicate column name ''{0}'' in output"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>Internal</code> is '<code>Internal error: {0}</code>'    */
specifier|public
specifier|final
name|_Def7
name|Internal
init|=
operator|new
name|_Def7
argument_list|(
literal|"Internal"
argument_list|,
literal|"Internal error: {0}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ArgumentMustBeLiteral</code> is '<code>Argument to function&#39;&#39;{0}&#39;&#39; must be a literal</code>'    */
specifier|public
specifier|final
name|_Def9
name|ArgumentMustBeLiteral
init|=
operator|new
name|_Def9
argument_list|(
literal|"ArgumentMustBeLiteral"
argument_list|,
literal|"Argument to function ''{0}'' must be a literal"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ArgumentMustBePositiveInteger</code> is '<code>Argument to function&#39;&#39;{0}&#39;&#39; must be a positive integer literal</code>'    */
specifier|public
specifier|final
name|_Def9
name|ArgumentMustBePositiveInteger
init|=
operator|new
name|_Def9
argument_list|(
literal|"ArgumentMustBePositiveInteger"
argument_list|,
literal|"Argument to function ''{0}'' must be a positive integer literal"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ValidationError</code> is '<code>Validation Error: {0}</code>'    */
specifier|public
specifier|final
name|_Def7
name|ValidationError
init|=
operator|new
name|_Def7
argument_list|(
literal|"ValidationError"
argument_list|,
literal|"Validation Error: {0}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ParserError</code> is '<code>Parser Error: {0}</code>'    */
specifier|public
specifier|final
name|_Def7
name|ParserError
init|=
operator|new
name|_Def7
argument_list|(
literal|"ParserError"
argument_list|,
literal|"Parser Error: {0}"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ArgumentMustNotBeNull</code> is '<code>Argument to function&#39;&#39;{0}&#39;&#39; must not be NULL</code>'    */
specifier|public
specifier|final
name|_Def9
name|ArgumentMustNotBeNull
init|=
operator|new
name|_Def9
argument_list|(
literal|"ArgumentMustNotBeNull"
argument_list|,
literal|"Argument to function ''{0}'' must not be NULL"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>NullIllegal</code> is '<code>Illegal use of&#39;&#39;NULL&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def4
name|NullIllegal
init|=
operator|new
name|_Def4
argument_list|(
literal|"NullIllegal"
argument_list|,
literal|"Illegal use of ''NULL''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>DynamicParamIllegal</code> is '<code>Illegal use of dynamic parameter</code>'    */
specifier|public
specifier|final
name|_Def4
name|DynamicParamIllegal
init|=
operator|new
name|_Def4
argument_list|(
literal|"DynamicParamIllegal"
argument_list|,
literal|"Illegal use of dynamic parameter"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>InvalidBoolean</code> is '<code>&#39;&#39;{0}&#39;&#39; is not a valid boolean value</code>'    */
specifier|public
specifier|final
name|_Def7
name|InvalidBoolean
init|=
operator|new
name|_Def7
argument_list|(
literal|"InvalidBoolean"
argument_list|,
literal|"''{0}'' is not a valid boolean value"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ArgumentMustBeValidPrecision</code> is '<code>Argument to function&#39;&#39;{0}&#39;&#39; must be a valid precision between&#39;&#39;{1}&#39;&#39; and&#39;&#39;{2}&#39;&#39;</code>'    */
specifier|public
specifier|final
name|_Def14
name|ArgumentMustBeValidPrecision
init|=
operator|new
name|_Def14
argument_list|(
literal|"ArgumentMustBeValidPrecision"
argument_list|,
literal|"Argument to function ''{0}'' must be a valid precision between ''{1}'' and ''{2}''"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>InvalidDatetimeFormat</code> is '<code>&#39;&#39;{0}&#39;&#39; is not a valid datetime format</code>'    */
specifier|public
specifier|final
name|_Def7
name|InvalidDatetimeFormat
init|=
operator|new
name|_Def7
argument_list|(
literal|"InvalidDatetimeFormat"
argument_list|,
literal|"''{0}'' is not a valid datetime format"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>InsertIntoAlwaysGenerated</code> is '<code>Cannot explicitly insert value into IDENTITY column&#39;&#39;{0}&#39;&#39; which is ALWAYS GENERATED</code>'    */
specifier|public
specifier|final
name|_Def7
name|InsertIntoAlwaysGenerated
init|=
operator|new
name|_Def7
argument_list|(
literal|"InsertIntoAlwaysGenerated"
argument_list|,
literal|"Cannot explicitly insert value into IDENTITY column ''{0}'' which is ALWAYS GENERATED"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>ArgumentMustHaveScaleZero</code> is '<code>Argument to function&#39;&#39;{0}&#39;&#39; must have a scale of 0</code>'    */
specifier|public
specifier|final
name|_Def7
name|ArgumentMustHaveScaleZero
init|=
operator|new
name|_Def7
argument_list|(
literal|"ArgumentMustHaveScaleZero"
argument_list|,
literal|"Argument to function ''{0}'' must have a scale of 0"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>PreparationAborted</code> is '<code>Statement preparation aborted</code>'    */
specifier|public
specifier|final
name|_Def6
name|PreparationAborted
init|=
operator|new
name|_Def6
argument_list|(
literal|"PreparationAborted"
argument_list|,
literal|"Statement preparation aborted"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeature_E051_01</code> is '<code>SELECT DISTINCT not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeature_E051_01
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeature_E051_01"
argument_list|,
literal|"SELECT DISTINCT not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"SQL:2003 Part 2 Annex F"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeature_E071_03</code> is '<code>EXCEPT not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeature_E071_03
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeature_E071_03"
argument_list|,
literal|"EXCEPT not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"SQL:2003 Part 2 Annex F"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeature_E101_03</code> is '<code>UPDATE not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeature_E101_03
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeature_E101_03"
argument_list|,
literal|"UPDATE not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"SQL:2003 Part 2 Annex F"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeature_E151</code> is '<code>Transactions not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeature_E151
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeature_E151"
argument_list|,
literal|"Transactions not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"SQL:2003 Part 2 Annex F"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeature_F302</code> is '<code>INTERSECT not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeature_F302
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeature_F302"
argument_list|,
literal|"INTERSECT not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"SQL:2003 Part 2 Annex F"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeature_F312</code> is '<code>MERGE not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeature_F312
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeature_F312"
argument_list|,
literal|"MERGE not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"SQL:2003 Part 2 Annex F"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeature_S271</code> is '<code>Basic multiset not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeature_S271
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeature_S271"
argument_list|,
literal|"Basic multiset not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"SQL:2003 Part 2 Annex F"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeature_T613</code> is '<code>TABLESAMPLE not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeature_T613
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeature_T613"
argument_list|,
literal|"TABLESAMPLE not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"SQL:2003 Part 2 Annex F"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLConformance_MultipleActiveAutocommitStatements</code> is '<code>Execution of a new autocommit statement while a cursor is still open on same connection is not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLConformance_MultipleActiveAutocommitStatements
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLConformance_MultipleActiveAutocommitStatements"
argument_list|,
literal|"Execution of a new autocommit statement while a cursor is still open on same connection is not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"Eigenbase-defined"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLConformance_OrderByDesc</code> is '<code>Descending sort (ORDER BY DESC) not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLConformance_OrderByDesc
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLConformance_OrderByDesc"
argument_list|,
literal|"Descending sort (ORDER BY DESC) not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"Eigenbase-defined"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SharedStatementPlans</code> is '<code>Sharing of cached statement plans not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SharedStatementPlans
init|=
operator|new
name|_Def6
argument_list|(
literal|"SharedStatementPlans"
argument_list|,
literal|"Sharing of cached statement plans not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"Eigenbase-defined"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>SQLFeatureExt_T613_Substitution</code> is '<code>TABLESAMPLE SUBSTITUTE not supported</code>'    */
specifier|public
specifier|final
name|_Def6
name|SQLFeatureExt_T613_Substitution
init|=
operator|new
name|_Def6
argument_list|(
literal|"SQLFeatureExt_T613_Substitution"
argument_list|,
literal|"TABLESAMPLE SUBSTITUTE not supported"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"Eigenbase-defined"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>PersonalityManagesRowCount</code> is '<code>Personality does not maintain table&#39;&#39;s row count in the catalog</code>'    */
specifier|public
specifier|final
name|_Def6
name|PersonalityManagesRowCount
init|=
operator|new
name|_Def6
argument_list|(
literal|"PersonalityManagesRowCount"
argument_list|,
literal|"Personality does not maintain table''s row count in the catalog"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"Eigenbase-defined"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>PersonalitySupportsSnapshots</code> is '<code>Personality does not support snapshot reads</code>'    */
specifier|public
specifier|final
name|_Def6
name|PersonalitySupportsSnapshots
init|=
operator|new
name|_Def6
argument_list|(
literal|"PersonalitySupportsSnapshots"
argument_list|,
literal|"Personality does not support snapshot reads"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"Eigenbase-defined"
block|}
argument_list|)
decl_stmt|;
comment|/**    *<code>PersonalitySupportsLabels</code> is '<code>Personality does not support labels</code>'    */
specifier|public
specifier|final
name|_Def6
name|PersonalitySupportsLabels
init|=
operator|new
name|_Def6
argument_list|(
literal|"PersonalitySupportsLabels"
argument_list|,
literal|"Personality does not support labels"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FeatureDefinition"
block|,
literal|"Eigenbase-defined"
block|}
argument_list|)
decl_stmt|;
comment|/**    * Definition for resources which    * take arguments 'Number p0, Number p1'.    */
specifier|public
specifier|final
class|class
name|_Def0
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def0
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseException} exception and    * take arguments 'String p0, String p1, String p2'.    */
specifier|public
specifier|final
class|class
name|_Def1
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def1
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseException} exception and    * take arguments 'String p0, Number p1'.    */
specifier|public
specifier|final
class|class
name|_Def2
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def2
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * take arguments 'String p0'.    */
specifier|public
specifier|final
class|class
name|_Def3
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def3
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments ''.    */
specifier|public
specifier|final
class|class
name|_Def4
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def4
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|()
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
name|emptyObjectArray
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|()
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
name|emptyObjectArray
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
name|emptyObjectArray
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseException} exception and    * take arguments 'String p0, String p1'.    */
specifier|public
specifier|final
class|class
name|_Def5
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def5
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseException} exception and    * take arguments ''.    */
specifier|public
specifier|final
class|class
name|_Def6
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def6
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|()
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
name|emptyObjectArray
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|()
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
name|emptyObjectArray
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
name|emptyObjectArray
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseException} exception and    * take arguments 'String p0'.    */
specifier|public
specifier|final
class|class
name|_Def7
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def7
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseException} exception and    * take arguments 'Number p0'.    */
specifier|public
specifier|final
class|class
name|_Def8
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def8
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|Number
name|p0
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'String p0'.    */
specifier|public
specifier|final
class|class
name|_Def9
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def9
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'String p0, Number p1'.    */
specifier|public
specifier|final
class|class
name|_Def10
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def10
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseContextException} exception and    * take arguments 'Number p0, Number p1'.    */
specifier|public
specifier|final
class|class
name|_Def11
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def11
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseContextException} exception and    * take arguments 'Number p0, Number p1, Number p2, Number p3'.    */
specifier|public
specifier|final
class|class
name|_Def12
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def12
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|Number
name|p2
parameter_list|,
name|Number
name|p3
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|Number
name|p2
parameter_list|,
name|Number
name|p3
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|Number
name|p2
parameter_list|,
name|Number
name|p3
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseContextException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'String p0, String p1'.    */
specifier|public
specifier|final
class|class
name|_Def13
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def13
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'String p0, String p1, String p2'.    */
specifier|public
specifier|final
class|class
name|_Def14
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def14
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'Number p0, Number p1'.    */
specifier|public
specifier|final
class|class
name|_Def15
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def15
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'String p0, String p1, String p2, String p3'.    */
specifier|public
specifier|final
class|class
name|_Def16
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def16
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|String
name|p3
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|String
name|p3
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|String
name|p3
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'String p0, Number p1, String p2'.    */
specifier|public
specifier|final
class|class
name|_Def17
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def17
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|String
name|p2
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|String
name|p2
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|Number
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.util.EigenbaseException} exception and    * take arguments 'String p0, String p1, String p2, String p3'.    */
specifier|public
specifier|final
class|class
name|_Def18
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def18
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|String
name|p3
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|String
name|p3
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
name|ex
parameter_list|(
name|String
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|String
name|p2
parameter_list|,
name|String
name|p3
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|EigenbaseException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'Number p0, String p1, Number p2'.    */
specifier|public
specifier|final
class|class
name|_Def19
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def19
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|Number
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|Number
name|p2
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|Number
name|p2
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|Number
name|p2
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|,
name|p2
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
comment|/**    * Definition for resources which    * return a {@link org.eigenbase.sql.validate.SqlValidatorException} exception and    * take arguments 'Number p0, String p1'.    */
specifier|public
specifier|final
class|class
name|_Def20
extends|extends
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|ResourceDefinition
block|{
name|_Def20
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|str
parameter_list|(
name|Number
name|p0
parameter_list|,
name|String
name|p1
parameter_list|)
block|{
return|return
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|String
name|p1
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
name|ex
parameter_list|(
name|Number
name|p0
parameter_list|,
name|String
name|p1
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
argument_list|(
name|instantiate
argument_list|(
name|EigenbaseResource
operator|.
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|p0
block|,
name|p1
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

