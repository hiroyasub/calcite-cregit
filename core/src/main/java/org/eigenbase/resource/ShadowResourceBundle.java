begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<code>ShadowResourceBundle</code> is an abstract base class for  * {@link ResourceBundle} classes which are backed by a properties file. When  * the class is created, it loads a properties file with the same name as the  * class.  *  *<p> In the standard scheme (see {@link ResourceBundle}),  * if you call<code>{@link ResourceBundle#getBundle}("foo.MyResource")</code>,  * it first looks for a class called<code>foo.MyResource</code>, then  * looks for a file called<code>foo/MyResource.properties</code>. If it finds  * the file, it creates a {@link PropertyResourceBundle} and loads the class.  * The problem is if you want to load the<code>.properties</code> file  * into a dedicated class;<code>ShadowResourceBundle</code> helps with this  * case.  *  *<p> You should create a class as follows:<blockquote>  *  *<pre>package foo;  *class MyResource extends org.eigenbase.resgen.ShadowResourceBundle {  *    public MyResource() throws java.io.IOException {  *    }  *}</pre>  *  *</blockquote> Then when you call  * {@link ResourceBundle#getBundle ResourceBundle.getBundle("foo.MyResource")},  * it will find the class before the properties file, but still automatically  * load the properties file based upon the name of the class.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ShadowResourceBundle
extends|extends
name|ResourceBundle
block|{
specifier|private
name|PropertyResourceBundle
name|bundle
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Locale
argument_list|>
name|MAP_THREAD_TO_LOCALE
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Locale
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY_OBJECT_ARRAY
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * Creates a<code>ShadowResourceBundle</code>, and reads resources from    * a<code>.properties</code> file with the same name as the current class.    * For example, if the class is called<code>foo.MyResource_en_US</code>,    * reads from<code>foo/MyResource_en_US.properties</code>, then    *<code>foo/MyResource_en.properties</code>, then    *<code>foo/MyResource.properties</code>.    *    * @throws IOException on error    */
specifier|protected
name|ShadowResourceBundle
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|Class
name|clazz
init|=
name|getClass
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|openPropertiesFile
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"could not open properties file for "
operator|+
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|MyPropertyResourceBundle
name|previousBundle
init|=
operator|new
name|MyPropertyResourceBundle
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|bundle
operator|=
name|previousBundle
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now load properties files for parent locales, which we deduce from
comment|// the names of our super-class, and its super-class.
while|while
condition|(
literal|true
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|==
name|ShadowResourceBundle
operator|.
name|class
operator|||
operator|!
name|ResourceBundle
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
break|break;
block|}
name|stream
operator|=
name|openPropertiesFile
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|MyPropertyResourceBundle
name|newBundle
init|=
operator|new
name|MyPropertyResourceBundle
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|previousBundle
operator|!=
literal|null
condition|)
block|{
name|previousBundle
operator|.
name|setParentTrojan
argument_list|(
name|newBundle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundle
operator|=
name|newBundle
expr_stmt|;
block|}
name|previousBundle
operator|=
name|newBundle
expr_stmt|;
block|}
block|}
comment|/** Resource bundle based on properties. */
specifier|static
class|class
name|MyPropertyResourceBundle
extends|extends
name|PropertyResourceBundle
block|{
specifier|public
name|MyPropertyResourceBundle
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|void
name|setParentTrojan
parameter_list|(
name|ResourceBundle
name|parent
parameter_list|)
block|{
name|super
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Opens the properties file corresponding to a given class. The code is    * copied from {@link ResourceBundle}.    */
specifier|private
specifier|static
name|InputStream
name|openPropertiesFile
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
specifier|final
name|ClassLoader
name|loader
init|=
name|clazz
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
specifier|final
name|String
name|resName
init|=
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".properties"
decl_stmt|;
return|return
operator|(
name|InputStream
operator|)
name|java
operator|.
name|security
operator|.
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
return|return
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|resName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|resName
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|bundle
operator|.
name|getKeys
argument_list|()
return|;
block|}
specifier|protected
name|Object
name|handleGetObject
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|bundle
operator|.
name|getObject
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Returns the instance of the<code>baseName</code> resource bundle for    * the current thread's locale. For example, if called with    * "mondrian.olap.MondrianResource", from a thread which has called {@link    * #setThreadLocale}({@link Locale#FRENCH}), will get an instance of    * "mondrian.olap.MondrianResource_FR" from the cache.    *    *<p> This method should be called from a derived class, with the proper    * casting:<blockquote>    *    *<pre>class MyResource extends ShadowResourceBundle {    *    ...    *    /&#42;&#42;    *&#42; Retrieves the instance of {&#64;link MyResource} appropriate    *&#42; to the current locale. If this thread has specified a locale    *&#42; by calling {&#64;link #setThreadLocale}, this locale is used,    *&#42; otherwise the default locale is used.    *&#42;&#42;/    *    public static MyResource instance() {    *       return (MyResource) instance(MyResource.class.getName());    *    }    *    ...    * }</pre></blockquote>    *    * @deprecated This method does not work correctly in dynamically    * loaded jars.    *    * @param baseName Base name    *    * @return Resource bundle    */
specifier|protected
specifier|static
name|ResourceBundle
name|instance
parameter_list|(
name|String
name|baseName
parameter_list|)
block|{
return|return
name|instance
argument_list|(
name|baseName
argument_list|,
name|getThreadLocale
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the instance of the<code>baseName</code> resource bundle    * for the given locale.    *    *<p> This method should be called from a derived class, with the proper    * casting:<blockquote>    *    *<pre>class MyResource extends ShadowResourceBundle {    *    ...    *    *    /&#42;&#42;    *&#42; Retrieves the instance of {&#64;link MyResource} appropriate    *&#42; to the given locale.    *&#42;&#42;/    *    public static MyResource instance(Locale locale) {    *       return (MyResource) instance(MyResource.class.getName(), locale);    *    }    *    ...    * }</pre></blockquote>    *    * @param baseName Base name    * @param locale Locale    * @return Resource bundle    *    * @deprecated This method does not work correctly in dynamically    * loaded jars.    */
specifier|protected
specifier|static
name|ShadowResourceBundle
name|instance
parameter_list|(
name|String
name|baseName
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
block|{
name|locale
operator|=
name|Locale
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
name|ResourceBundle
name|bundle
init|=
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|baseName
argument_list|,
name|locale
argument_list|)
decl_stmt|;
return|return
name|instance
argument_list|(
name|baseName
argument_list|,
name|locale
argument_list|,
name|bundle
argument_list|)
return|;
block|}
comment|/**    * Returns the instance of the<code>baseName</code> resource bundle    * for the given locale.    *    *<p> This method should be called from a derived class, with the proper    * casting:<blockquote>    *    *<pre>class MyResource extends ShadowResourceBundle {    *    ...    *    *    /&#42;&#42;    *&#42; Retrieves the instance of {&#64;link MyResource} appropriate    *&#42; to the given locale.    *&#42;&#42;/    *    public static MyResource instance(Locale locale) {    *       return (MyResource) instance(    *           MyResource.class.getName(), locale,    *           ResourceBundle.getBundle(MyResource.class.getName(), locale));    *    }    *    ...    * }</pre></blockquote>    *    * @param baseName Base name    * @param locale Locale    * @param bundle Resource bundle    * @return Resource bundle    */
specifier|protected
specifier|static
name|ShadowResourceBundle
name|instance
parameter_list|(
name|String
name|baseName
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|ResourceBundle
name|bundle
parameter_list|)
block|{
if|if
condition|(
name|bundle
operator|instanceof
name|PropertyResourceBundle
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"ShadowResourceBundle.instance('"
operator|+
name|baseName
operator|+
literal|"','"
operator|+
name|locale
operator|+
literal|"') found "
operator|+
name|baseName
operator|+
literal|"_"
operator|+
name|locale
operator|+
literal|".properties but not "
operator|+
name|baseName
operator|+
literal|"_"
operator|+
name|locale
operator|+
literal|".class"
argument_list|)
throw|;
block|}
return|return
operator|(
name|ShadowResourceBundle
operator|)
name|bundle
return|;
block|}
comment|/** Returns the preferred locale of the current thread, or    * the default locale if the current thread has not called {@link    * #setThreadLocale}.    *    * @return Locale */
specifier|protected
specifier|static
name|Locale
name|getThreadOrDefaultLocale
parameter_list|()
block|{
name|Locale
name|locale
init|=
name|getThreadLocale
argument_list|()
decl_stmt|;
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
block|{
return|return
name|Locale
operator|.
name|getDefault
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|locale
return|;
block|}
block|}
comment|/** Sets the locale for the current thread. Used by {@link    * #instance(String,Locale)}.    *    * @param locale Locale */
specifier|public
specifier|static
name|void
name|setThreadLocale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|MAP_THREAD_TO_LOCALE
operator|.
name|set
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the preferred locale of the current thread, or null if the    * thread has not called {@link #setThreadLocale}.    *    * @return Locale */
specifier|public
specifier|static
name|Locale
name|getThreadLocale
parameter_list|()
block|{
return|return
name|MAP_THREAD_TO_LOCALE
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End ShadowResourceBundle.java
end_comment

end_unit

