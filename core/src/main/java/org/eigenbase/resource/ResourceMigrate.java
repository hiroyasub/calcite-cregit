begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resgen
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|xom
operator|.
name|DOMWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|xom
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|xom
operator|.
name|XOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|xom
operator|.
name|XOMUtil
import|;
end_import

begin_comment
comment|/**  * Tool to convert EigenbaseResource.xml into NewEigenbaseResource.java.  * A one-time conversion task - not intended to be a generic tool.  */
end_comment

begin_class
specifier|public
class|class
name|ResourceMigrate
block|{
specifier|private
name|ResourceMigrate
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|main0
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|main0
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:/Users/jhyde/open1/optiq/core/src/main/java/org/eigenbase/resource/EigenbaseResource.xml"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceDef
operator|.
name|ResourceBundle
name|resourceBundle
init|=
name|load
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
literal|"Out.java"
argument_list|)
decl_stmt|;
specifier|final
name|FileWriter
name|fileWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
specifier|final
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|fileWriter
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceDef
operator|.
name|Resource
name|resource
range|:
name|resourceBundle
operator|.
name|resources
control|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"    @BaseMessage(\""
operator|+
name|getMessage
argument_list|(
name|resource
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\""
argument_list|)
operator|+
literal|"\")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|.
name|properties
operator|.
name|length
operator|>
literal|0
condition|)
block|{
assert|assert
name|resource
operator|.
name|properties
operator|.
name|length
operator|==
literal|1
assert|;
comment|// can't handle more than 1
specifier|final
name|ResourceDef
operator|.
name|Property
name|property
init|=
name|resource
operator|.
name|properties
index|[
literal|0
index|]
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"    @Property(name = \""
operator|+
name|property
operator|.
name|name
operator|+
literal|"\", value = \""
operator|+
name|property
operator|.
name|cdata
operator|+
literal|"\")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resource
operator|instanceof
name|ResourceDef
operator|.
name|Exception
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"    @ExceptionClass("
operator|+
name|exceptionClassName
argument_list|(
operator|(
name|ResourceDef
operator|.
name|Exception
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
operator|+
literal|".class)"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|returnType
argument_list|(
name|resource
argument_list|)
operator|+
literal|" "
operator|+
name|Character
operator|.
name|toLowerCase
argument_list|(
name|resource
operator|.
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|resource
operator|.
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|"("
operator|+
name|getParameterList
argument_list|(
name|resource
argument_list|)
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getMessage
parameter_list|(
name|ResourceDef
operator|.
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|resource
operator|.
name|text
operator|.
name|cdata
operator|.
name|replaceAll
argument_list|(
literal|"\n *"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|returnType
parameter_list|(
name|ResourceDef
operator|.
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|ResourceDef
operator|.
name|Exception
condition|)
block|{
return|return
literal|"ExInst<"
operator|+
name|exceptionClassName
argument_list|(
operator|(
name|ResourceDef
operator|.
name|Exception
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
operator|+
literal|">"
return|;
block|}
return|return
literal|"Inst"
return|;
block|}
specifier|private
specifier|static
name|String
name|exceptionClassName
parameter_list|(
name|ResourceDef
operator|.
name|Exception
name|resource
parameter_list|,
name|boolean
name|simple
parameter_list|)
block|{
name|String
name|className
init|=
name|resource
operator|.
name|className
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
name|className
operator|=
literal|"EigenbaseException"
expr_stmt|;
block|}
if|if
condition|(
name|simple
operator|&&
name|className
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|className
return|;
block|}
specifier|private
specifier|static
name|String
name|getParameterList
parameter_list|(
name|ResourceDef
operator|.
name|Resource
name|resource
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|String
name|text
init|=
name|resource
operator|.
name|text
operator|.
name|cdata
decl_stmt|;
specifier|final
name|Format
index|[]
name|formats
init|=
operator|new
name|MessageFormat
argument_list|(
name|text
argument_list|)
operator|.
name|getFormatsByArgumentIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Format
name|format
init|=
name|formats
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|instanceof
name|NumberFormat
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"int "
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|format
operator|instanceof
name|DateFormat
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"java.util.Date "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"String "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|ResourceDef
operator|.
name|ResourceBundle
name|load
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
return|;
block|}
comment|/** loads InputStream and returns set of resources */
specifier|static
name|ResourceDef
operator|.
name|ResourceBundle
name|load
parameter_list|(
name|InputStream
name|inStream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Parser
name|parser
init|=
name|XOMUtil
operator|.
name|createDefaultParser
argument_list|()
decl_stmt|;
name|DOMWrapper
name|def
init|=
name|parser
operator|.
name|parse
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
return|return
operator|new
name|ResourceDef
operator|.
name|ResourceBundle
argument_list|(
name|def
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XOMException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|err
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ResourceMigrate.java
end_comment

end_unit

