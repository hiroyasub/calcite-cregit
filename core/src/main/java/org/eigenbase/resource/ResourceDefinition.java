begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_comment
comment|/**  * Definition of a resource such as a parameterized message or exception.  *  *<p>A resource is identified within a {@link ResourceBundle} by a text  *<em>key</em>, and has a<em>message</em> in its base locale (which is  * usually US-English (en_US)). It may also have a set of properties, which are  * represented as name-value pairs.  *  *<p>A resource definition is immutable.  */
end_comment

begin_class
specifier|public
class|class
name|ResourceDefinition
block|{
specifier|public
specifier|final
name|String
name|key
decl_stmt|;
comment|/** The message in the base locale. (To find the message in another locale,    * you will need to load a resource bundle for that locale.) */
specifier|public
specifier|final
name|String
name|baseMessage
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|props
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EMPTY_STRING_ARRAY
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
comment|/** Type of an argument within a format string. */
enum|enum
name|ArgType
block|{
name|STRING
block|,
name|NUMBER
block|,
name|DATE
block|}
comment|/**    * Creates a resource definition with no properties.    *    * @param key Unique name for this resource definition.    * @param baseMessage Message for this resource definition in the base    *    locale.    */
specifier|public
name|ResourceDefinition
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
name|baseMessage
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a resource definition.    *    * @param key Unique name for this resource definition.    * @param baseMessage Message for this resource definition in the base    *    locale.    * @param props Array of property name/value pairs.    *<code>null</code> means the same as an empty array.    */
specifier|public
name|ResourceDefinition
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|baseMessage
parameter_list|,
name|String
index|[]
name|props
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|baseMessage
operator|=
name|baseMessage
expr_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
name|props
operator|=
name|EMPTY_STRING_ARRAY
expr_stmt|;
block|}
assert|assert
name|props
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
operator|:
literal|"Must have even number of property names/values"
assert|;
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
comment|/**    * Returns this resource definition's key.    *    * @return Key    */
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**    * Returns the properties of this resource definition.    *    * @return Properties    */
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|prop
init|=
name|props
index|[
name|i
index|]
decl_stmt|;
name|String
name|value
init|=
name|props
index|[
operator|++
name|i
index|]
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
comment|/**    * Returns the types of arguments.    *    * @return Argument types    */
specifier|public
name|List
argument_list|<
name|ArgType
argument_list|>
name|getArgTypes
parameter_list|()
block|{
return|return
name|getArgTypes
argument_list|(
name|baseMessage
argument_list|)
return|;
block|}
comment|/**    * Creates an instance of this definition with a set of parameters.    * This is a factory method, which may be overridden by a derived class.    *    * @param bundle Resource bundle the resource instance will belong to    *   (This contains the locale, among other things.)    * @param args Arguments to populate the message's parameters.    *   The arguments must be consistent in number and type with the results    *   of {@link #getArgTypes}.    * @return Resource instance    */
specifier|public
name|ResourceInstance
name|instantiate
parameter_list|(
name|ResourceBundle
name|bundle
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
return|return
operator|new
name|Instance
argument_list|(
name|bundle
argument_list|,
name|this
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Parses a message for the arguments inside it, and    * returns an array with the types of those arguments.    *    *<p>For example,<code>getArgTypes("I bought {0,number} {2}s",    * new String[] {"string", "number", "date", "time"})</code>    * yields {"number", null, "string"}.    * Note the null corresponding to missing message #1.    *    * @param message Message to be parsed.    * @return Array of type names    */
specifier|protected
specifier|static
name|List
argument_list|<
name|ArgType
argument_list|>
name|getArgTypes
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|MessageFormat
name|format
init|=
operator|new
name|MessageFormat
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Format
index|[]
name|argFormats
init|=
name|format
operator|.
name|getFormatsByArgumentIndex
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArgType
argument_list|>
name|argTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|ArgType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Format
name|argFormat
range|:
name|argFormats
control|)
block|{
name|argTypes
operator|.
name|add
argument_list|(
name|formatToType
argument_list|(
name|argFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|argTypes
return|;
block|}
comment|/**    * Converts a {@link Format} to a type code.    */
specifier|private
specifier|static
name|ArgType
name|formatToType
parameter_list|(
name|Format
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
return|return
name|ArgType
operator|.
name|STRING
return|;
block|}
if|else if
condition|(
name|format
operator|instanceof
name|NumberFormat
condition|)
block|{
return|return
name|ArgType
operator|.
name|NUMBER
return|;
block|}
if|else if
condition|(
name|format
operator|instanceof
name|DateFormat
condition|)
block|{
comment|// might be date or time, but assume it's date
return|return
name|ArgType
operator|.
name|DATE
return|;
block|}
else|else
block|{
return|return
name|ArgType
operator|.
name|STRING
return|;
block|}
block|}
comment|/**    * Default implementation of {@link ResourceInstance}.    */
specifier|private
specifier|static
class|class
name|Instance
implements|implements
name|ResourceInstance
block|{
name|ResourceDefinition
name|definition
decl_stmt|;
name|ResourceBundle
name|bundle
decl_stmt|;
name|Object
index|[]
name|args
decl_stmt|;
specifier|public
name|Instance
parameter_list|(
name|ResourceBundle
name|bundle
parameter_list|,
name|ResourceDefinition
name|definition
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|message
init|=
name|bundle
operator|.
name|getString
argument_list|(
name|definition
operator|.
name|key
argument_list|)
decl_stmt|;
name|MessageFormat
name|format
init|=
operator|new
name|MessageFormat
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|format
operator|.
name|setLocale
argument_list|(
name|bundle
operator|.
name|getLocale
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|format
operator|.
name|format
argument_list|(
name|args
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ResourceDefinition.java
end_comment

end_unit

