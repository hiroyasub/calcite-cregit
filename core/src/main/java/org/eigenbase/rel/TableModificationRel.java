begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_comment
comment|/**  * TableModificationRel is like TableAccessRel, but represents a request to  * modify a table rather than read from it. It takes one child which produces  * the modified rows. (For INSERT, the new values; for DELETE, the old values;  * for UPDATE, all old values plus updated new values.)  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TableModificationRel
extends|extends
name|TableModificationRelBase
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|TableModificationRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|Prepare
operator|.
name|CatalogReader
name|schema
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|updateColumnList
parameter_list|,
name|boolean
name|flattened
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
argument_list|,
name|table
argument_list|,
name|schema
argument_list|,
name|child
argument_list|,
name|operation
argument_list|,
name|updateColumnList
argument_list|,
name|flattened
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|TableModificationRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|containsIfApplicable
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
assert|;
return|return
operator|new
name|TableModificationRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|table
argument_list|,
name|catalogReader
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|getOperation
argument_list|()
argument_list|,
name|getUpdateColumnList
argument_list|()
argument_list|,
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End TableModificationRel.java
end_comment

end_unit

