begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|JsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Utilities for converting {@link RelNode} into JSON format.  */
end_comment

begin_class
specifier|public
class|class
name|RelJson
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|>
name|constructorMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|JsonBuilder
name|jsonBuilder
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|packages
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"org.eigenbase.rel."
argument_list|,
literal|"net.hydromatic.optiq.impl.jdbc."
argument_list|,
literal|"net.hydromatic.optiq.impl.jdbc.JdbcRules$"
argument_list|)
decl_stmt|;
specifier|public
name|RelJson
parameter_list|(
name|JsonBuilder
name|jsonBuilder
parameter_list|)
block|{
name|this
operator|.
name|jsonBuilder
operator|=
name|jsonBuilder
expr_stmt|;
block|}
specifier|public
name|RelNode
name|create
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|String
name|type
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|getConstructor
argument_list|(
name|type
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|RelNode
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|map
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while invoking constructor for type '"
operator|+
name|type
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while invoking constructor for type '"
operator|+
name|type
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while invoking constructor for type '"
operator|+
name|type
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while invoking constructor for type '"
operator|+
name|type
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Constructor
name|getConstructor
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|Constructor
name|constructor
init|=
name|constructorMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructor
operator|==
literal|null
condition|)
block|{
name|Class
name|clazz
init|=
name|typeNameToClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
try|try
block|{
comment|//noinspection unchecked
name|constructor
operator|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|RelInput
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"class does not have required constructor, "
operator|+
name|clazz
operator|+
literal|"(RelInput)"
argument_list|)
throw|;
block|}
name|constructorMap
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|constructor
argument_list|)
expr_stmt|;
block|}
return|return
name|constructor
return|;
block|}
comment|/**    * Converts a type name to a class. E.g. {@code getClass("ProjectRel")}    * returns {@link org.eigenbase.rel.ProjectRel}.class.    */
specifier|public
name|Class
name|typeNameToClass
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|package_
range|:
name|packages
control|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|package_
operator|+
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Inverse of {@link #typeNameToClass}.    */
specifier|public
name|String
name|classToTypeName
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|class_
parameter_list|)
block|{
specifier|final
name|String
name|canonicalName
init|=
name|class_
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|package_
range|:
name|packages
control|)
block|{
if|if
condition|(
name|canonicalName
operator|.
name|startsWith
argument_list|(
name|package_
argument_list|)
condition|)
block|{
name|String
name|remaining
init|=
name|canonicalName
operator|.
name|substring
argument_list|(
name|package_
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|remaining
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
operator|&&
name|remaining
operator|.
name|indexOf
argument_list|(
literal|'$'
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|remaining
return|;
block|}
block|}
block|}
return|return
name|canonicalName
return|;
block|}
specifier|public
name|Object
name|toJson
parameter_list|(
name|RelCollationImpl
name|node
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|fieldCollation
range|:
name|node
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|jsonBuilder
operator|.
name|map
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|fieldCollation
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"direction"
argument_list|,
name|fieldCollation
operator|.
name|getDirection
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"nulls"
argument_list|,
name|fieldCollation
operator|.
name|nullDirection
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|RelCollation
name|toCollation
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|jsonFieldCollations
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
init|=
operator|new
name|ArrayList
argument_list|<
name|RelFieldCollation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
range|:
name|jsonFieldCollations
control|)
block|{
name|fieldCollations
operator|.
name|add
argument_list|(
name|toFieldCollation
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|RelCollationImpl
operator|.
name|of
argument_list|(
name|fieldCollations
argument_list|)
return|;
block|}
specifier|public
name|RelFieldCollation
name|toFieldCollation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
specifier|final
name|Integer
name|field
init|=
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
specifier|final
name|RelFieldCollation
operator|.
name|Direction
name|direction
init|=
name|Util
operator|.
name|enumVal
argument_list|(
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|class
argument_list|,
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"direction"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelFieldCollation
operator|.
name|NullDirection
name|nullDirection
init|=
name|Util
operator|.
name|enumVal
argument_list|(
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|class
argument_list|,
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"nulls"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|RelFieldCollation
argument_list|(
name|field
argument_list|,
name|direction
argument_list|,
name|nullDirection
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|toType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|jsonList
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|o
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|builder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonMap
range|:
name|jsonList
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|jsonMap
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|toType
argument_list|(
name|typeFactory
argument_list|,
name|jsonMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
specifier|final
name|SqlTypeName
name|sqlTypeName
init|=
name|Util
operator|.
name|enumVal
argument_list|(
name|SqlTypeName
operator|.
name|class
argument_list|,
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|precision
init|=
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"precision"
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|scale
init|=
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"scale"
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|type
decl_stmt|;
if|if
condition|(
name|precision
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|sqlTypeName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|scale
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|sqlTypeName
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|sqlTypeName
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|nullable
init|=
operator|(
name|Boolean
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"nullable"
argument_list|)
decl_stmt|;
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|type
argument_list|,
name|nullable
argument_list|)
return|;
block|}
block|}
specifier|public
name|Object
name|toJson
parameter_list|(
name|AggregateCall
name|node
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|jsonBuilder
operator|.
name|map
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"agg"
argument_list|,
name|toJson
argument_list|(
operator|(
name|SqlOperator
operator|)
name|node
operator|.
name|getAggregation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|toJson
argument_list|(
name|node
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"distinct"
argument_list|,
name|node
operator|.
name|isDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"operands"
argument_list|,
name|node
operator|.
name|getArgList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
name|Object
name|toJson
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|instanceof
name|Number
operator|||
name|value
operator|instanceof
name|String
operator|||
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|value
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|RexNode
condition|)
block|{
return|return
name|toJson
argument_list|(
operator|(
name|RexNode
operator|)
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|CorrelatorRel
operator|.
name|Correlation
condition|)
block|{
return|return
name|toJson
argument_list|(
operator|(
name|CorrelatorRel
operator|.
name|Correlation
operator|)
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|jsonBuilder
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
operator|(
operator|(
name|List
operator|)
name|value
operator|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toJson
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|BitSet
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|jsonBuilder
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|integer
range|:
name|BitSets
operator|.
name|toIter
argument_list|(
operator|(
name|BitSet
operator|)
name|value
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toJson
argument_list|(
name|integer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|AggregateCall
condition|)
block|{
return|return
name|toJson
argument_list|(
operator|(
name|AggregateCall
operator|)
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|RelCollationImpl
condition|)
block|{
return|return
name|toJson
argument_list|(
operator|(
name|RelCollationImpl
operator|)
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|RelDataType
condition|)
block|{
return|return
name|toJson
argument_list|(
operator|(
name|RelDataType
operator|)
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|RelDataTypeField
condition|)
block|{
return|return
name|toJson
argument_list|(
operator|(
name|RelDataTypeField
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"type not serializable: "
operator|+
name|value
operator|+
literal|" (type "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|RelDataType
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isStruct
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|jsonBuilder
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|node
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toJson
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|jsonBuilder
operator|.
name|map
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|node
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"nullable"
argument_list|,
name|node
operator|.
name|isNullable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|allowsPrec
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
name|node
operator|.
name|getPrecision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|allowsScale
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"scale"
argument_list|,
name|node
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|RelDataTypeField
name|node
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|toJson
argument_list|(
name|node
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|CorrelatorRel
operator|.
name|Correlation
name|node
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|jsonBuilder
operator|.
name|map
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"correlation"
argument_list|,
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
name|node
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|FIELD_ACCESS
case|:
name|map
operator|=
name|jsonBuilder
operator|.
name|map
argument_list|()
expr_stmt|;
specifier|final
name|RexFieldAccess
name|fieldAccess
init|=
operator|(
name|RexFieldAccess
operator|)
name|node
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"expr"
argument_list|,
name|toJson
argument_list|(
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
case|case
name|LITERAL
case|:
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|node
decl_stmt|;
specifier|final
name|Object
name|value2
init|=
name|literal
operator|.
name|getValue2
argument_list|()
decl_stmt|;
if|if
condition|(
name|value2
operator|==
literal|null
condition|)
block|{
comment|// Special treatment for null literal because (1) we wouldn't want
comment|// 'null' to be confused as an empty expression and (2) for null
comment|// literals we need an explicit type.
name|map
operator|=
name|jsonBuilder
operator|.
name|map
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"literal"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|literal
operator|.
name|getTypeName
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
return|return
name|value2
return|;
case|case
name|INPUT_REF
case|:
name|map
operator|=
name|jsonBuilder
operator|.
name|map
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"input"
argument_list|,
operator|(
operator|(
name|RexInputRef
operator|)
name|node
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|map
return|;
case|case
name|CORREL_VARIABLE
case|:
name|map
operator|=
name|jsonBuilder
operator|.
name|map
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"correl"
argument_list|,
operator|(
operator|(
name|RexCorrelVariable
operator|)
name|node
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|toJson
argument_list|(
name|node
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
default|default:
if|if
condition|(
name|node
operator|instanceof
name|RexCall
condition|)
block|{
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
name|map
operator|=
name|jsonBuilder
operator|.
name|map
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"op"
argument_list|,
name|toJson
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|jsonBuilder
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toJson
argument_list|(
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"operands"
argument_list|,
name|list
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CAST
case|:
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|toJson
argument_list|(
name|node
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|instanceof
name|SqlFunction
condition|)
block|{
switch|switch
condition|(
operator|(
operator|(
name|SqlFunction
operator|)
name|call
operator|.
name|getOperator
argument_list|()
operator|)
operator|.
name|getFunctionType
argument_list|()
condition|)
block|{
case|case
name|UserDefinedConstructor
case|:
case|case
name|UserDefinedFunction
case|:
case|case
name|UserDefinedProcedure
case|:
case|case
name|UserDefinedSpecificFunction
case|:
name|map
operator|.
name|put
argument_list|(
literal|"class"
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unknown rex "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
name|RexNode
name|toRex
parameter_list|(
name|RelInput
name|relInput
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|relInput
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
specifier|final
name|String
name|op
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
name|operands
init|=
operator|(
name|List
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"operands"
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|jsonType
init|=
name|map
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonType
operator|!=
literal|null
condition|)
block|{
name|RelDataType
name|type
init|=
name|toType
argument_list|(
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|jsonType
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|type
argument_list|,
name|toOp
argument_list|(
name|op
argument_list|,
name|map
argument_list|)
argument_list|,
name|toRexList
argument_list|(
name|relInput
argument_list|,
name|operands
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|toOp
argument_list|(
name|op
argument_list|,
name|map
argument_list|)
argument_list|,
name|toRexList
argument_list|(
name|relInput
argument_list|,
name|operands
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|final
name|Integer
name|input
init|=
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputNodes
init|=
name|relInput
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|input
decl_stmt|;
for|for
control|(
name|RelNode
name|inputNode
range|:
name|inputNodes
control|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|inputNode
operator|.
name|getRowType
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rowType
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|input
argument_list|)
return|;
block|}
name|i
operator|-=
name|rowType
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"input field "
operator|+
name|input
operator|+
literal|" is out of range"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|field
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|jsonExpr
init|=
name|map
operator|.
name|get
argument_list|(
literal|"expr"
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|expr
init|=
name|toRex
argument_list|(
name|relInput
argument_list|,
name|jsonExpr
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|expr
argument_list|,
name|field
argument_list|)
return|;
block|}
specifier|final
name|String
name|correl
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"correl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|correl
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|jsonType
init|=
name|map
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|RelDataType
name|type
init|=
name|toType
argument_list|(
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|jsonType
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCorrel
argument_list|(
name|type
argument_list|,
name|correl
argument_list|)
return|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"literal"
argument_list|)
condition|)
block|{
specifier|final
name|Object
name|literal
init|=
name|map
operator|.
name|get
argument_list|(
literal|"literal"
argument_list|)
decl_stmt|;
specifier|final
name|SqlTypeName
name|sqlTypeName
init|=
name|Util
operator|.
name|enumVal
argument_list|(
name|SqlTypeName
operator|.
name|class
argument_list|,
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal
operator|==
literal|null
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|sqlTypeName
argument_list|)
return|;
block|}
return|return
name|toRex
argument_list|(
name|relInput
argument_list|,
name|literal
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"cannot convert to rex "
operator|+
name|o
argument_list|)
throw|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|(
name|Boolean
operator|)
name|o
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Number
condition|)
block|{
specifier|final
name|Number
name|number
init|=
operator|(
name|Number
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|number
operator|instanceof
name|Double
operator|||
name|number
operator|instanceof
name|Float
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeApproxLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"cannot convert to rex "
operator|+
name|o
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|RexNode
argument_list|>
name|toRexList
parameter_list|(
name|RelInput
name|relInput
parameter_list|,
name|List
name|operands
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|operand
range|:
name|operands
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toRex
argument_list|(
name|relInput
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|SqlOperator
name|toOp
parameter_list|(
name|String
name|op
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
comment|// TODO: build a map, for more efficient lookup
comment|// TODO: look up based on SqlKind
specifier|final
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|operatorList
init|=
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
operator|.
name|getOperatorList
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlOperator
name|operator
range|:
name|operatorList
control|)
block|{
if|if
condition|(
name|operator
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|operator
return|;
block|}
block|}
name|String
name|class_
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|class_
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|(
name|SqlOperator
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|class_
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|Aggregation
name|toAggregation
parameter_list|(
name|String
name|agg
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|(
name|Aggregation
operator|)
name|toOp
argument_list|(
name|agg
argument_list|,
name|map
argument_list|)
return|;
block|}
specifier|private
name|String
name|toJson
parameter_list|(
name|SqlOperator
name|operator
parameter_list|)
block|{
comment|// User-defined operators are not yet handled.
return|return
name|operator
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelJson.java
end_comment

end_unit

