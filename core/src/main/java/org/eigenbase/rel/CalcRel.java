begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A relational expression which computes project expressions and also filters.  *  *<p>This relational expression combines the functionality of  * {@link ProjectRel} and {@link FilterRel}. It should be created in the later  * stages of optimization, by merging consecutive {@link ProjectRel} and  * {@link FilterRel} nodes together.  *  *<p>The following rules relate to<code>CalcRel</code>:</p>  *  *<ul>  *<li>{@link FilterToCalcRule} creates this from a {@link FilterRel}</li>  *<li>{@link ProjectToCalcRule} creates this from a {@link FilterRel}</li>  *<li>{@link MergeFilterOntoCalcRule} merges this with a {@link FilterRel}</li>  *<li>{@link MergeProjectOntoCalcRule} merges this with a  *     {@link ProjectRel}</li>  *<li>{@link MergeCalcRule} merges two CalcRels</li>  *</ul>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CalcRel
extends|extends
name|CalcRelBase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a CalcRel. */
specifier|public
name|CalcRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|,
name|rowType
argument_list|,
name|program
argument_list|,
name|collationList
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|CalcRelBase
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|)
block|{
return|return
operator|new
name|CalcRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|program
operator|.
name|getOutputRowType
argument_list|()
argument_list|,
name|program
argument_list|,
name|collationList
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collectVariablesUsed
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|variableSet
parameter_list|)
block|{
specifier|final
name|RelOptUtil
operator|.
name|VariableUsedVisitor
name|vuv
init|=
operator|new
name|RelOptUtil
operator|.
name|VariableUsedVisitor
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|program
operator|.
name|getExprList
argument_list|()
control|)
block|{
name|expr
operator|.
name|accept
argument_list|(
name|vuv
argument_list|)
expr_stmt|;
block|}
name|variableSet
operator|.
name|addAll
argument_list|(
name|vuv
operator|.
name|variables
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End CalcRel.java
end_comment

end_unit

