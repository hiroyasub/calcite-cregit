begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>SingleRel</code> is a base class single-input relational expressions.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SingleRel
extends|extends
name|AbstractRelNode
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|RelNode
name|child
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a<code>SingleRel</code>.    *    * @param cluster {@link RelOptCluster}  this relational expression belongs    *                to    * @param child   input relational expression    */
specifier|protected
name|SingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|)
expr_stmt|;
name|this
operator|.
name|child
operator|=
name|child
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|RelNode
name|getChild
parameter_list|()
block|{
return|return
name|child
return|;
block|}
comment|// implement RelNode
specifier|public
name|List
argument_list|<
name|RelNode
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|child
argument_list|)
return|;
block|}
specifier|public
name|double
name|getRows
parameter_list|()
block|{
comment|// Not necessarily correct, but a better default than Rel's 1.0
return|return
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|child
argument_list|)
return|;
block|}
specifier|public
name|void
name|childrenAccept
parameter_list|(
name|RelVisitor
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|child
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|input
argument_list|(
literal|"child"
argument_list|,
name|getChild
argument_list|()
argument_list|)
return|;
block|}
comment|// override Rel
specifier|public
name|void
name|replaceInput
parameter_list|(
name|int
name|ordinalInParent
parameter_list|,
name|RelNode
name|rel
parameter_list|)
block|{
assert|assert
operator|(
name|ordinalInParent
operator|==
literal|0
operator|)
assert|;
name|this
operator|.
name|child
operator|=
name|rel
expr_stmt|;
block|}
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|child
operator|.
name|getRowType
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End SingleRel.java
end_comment

end_unit

