begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_comment
comment|/** Implementation of {@link MetadataFactory} that gets providers from a  * {@link RelMetadataProvider} and stores them in a cache.  *  *<p>The cache does not store metadata. It remembers which providers can  * provide which kinds of metadata, for which kinds of relational  * expressions.</p>  */
end_comment

begin_class
specifier|public
class|class
name|MetadataFactoryImpl
implements|implements
name|MetadataFactory
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
specifier|final
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
name|DUMMY
init|=
operator|(
name|Function
operator|)
name|Functions
operator|.
expr|<
name|Metadata
operator|>
name|constant
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|Pair
argument_list|<
name|Class
argument_list|<
name|RelNode
argument_list|>
argument_list|,
name|Class
argument_list|<
name|Metadata
argument_list|>
argument_list|>
argument_list|,
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
argument_list|>
name|cache
decl_stmt|;
specifier|public
name|MetadataFactoryImpl
parameter_list|(
name|RelMetadataProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|(
name|provider
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|CacheLoader
argument_list|<
name|Pair
argument_list|<
name|Class
argument_list|<
name|RelNode
argument_list|>
argument_list|,
name|Class
argument_list|<
name|Metadata
argument_list|>
argument_list|>
argument_list|,
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
argument_list|>
name|loader
parameter_list|(
specifier|final
name|RelMetadataProvider
name|provider
parameter_list|)
block|{
return|return
operator|new
name|CacheLoader
argument_list|<
name|Pair
argument_list|<
name|Class
argument_list|<
name|RelNode
argument_list|>
argument_list|,
name|Class
argument_list|<
name|Metadata
argument_list|>
argument_list|>
argument_list|,
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
name|load
parameter_list|(
name|Pair
argument_list|<
name|Class
argument_list|<
name|RelNode
argument_list|>
argument_list|,
name|Class
argument_list|<
name|Metadata
argument_list|>
argument_list|>
name|key
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
name|function
init|=
name|provider
operator|.
name|apply
argument_list|(
name|key
operator|.
name|left
argument_list|,
name|key
operator|.
name|right
argument_list|)
decl_stmt|;
comment|// Return DUMMY, not null, so the cache knows to not ask again.
return|return
name|function
operator|!=
literal|null
condition|?
name|function
else|:
name|DUMMY
return|;
block|}
block|}
return|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Metadata
parameter_list|>
name|T
name|query
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
comment|//noinspection unchecked
specifier|final
name|Pair
argument_list|<
name|Class
argument_list|<
name|RelNode
argument_list|>
argument_list|,
name|Class
argument_list|<
name|Metadata
argument_list|>
argument_list|>
name|key
init|=
operator|(
name|Pair
operator|)
name|Pair
operator|.
name|of
argument_list|(
name|rel
operator|.
name|getClass
argument_list|()
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|Metadata
name|apply
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|apply
argument_list|(
name|rel
argument_list|)
decl_stmt|;
comment|//noinspection unchecked
return|return
operator|(
name|T
operator|)
name|apply
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|(
name|Error
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End MetadataFactoryImpl.java
end_comment

end_unit

