begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  *<code>FilterRelBase</code> is an abstract base class for implementations of  * {@link FilterRel}.  *  * @author John V. Sichi  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FilterRelBase
extends|extends
name|SingleRel
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|RexNode
name|condition
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a filter.      *      * @param cluster {@link RelOptCluster}  this relational expression belongs      * to      * @param traits the traits of this rel      * @param child input relational expression      * @param condition boolean expression which determines whether a row is      * allowed to pass      */
specifier|protected
name|FilterRelBase
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|)
expr_stmt|;
assert|assert
name|condition
operator|!=
literal|null
assert|;
assert|assert
name|RexUtil
operator|.
name|isFlat
argument_list|(
name|condition
argument_list|)
operator|:
name|condition
assert|;
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|getChildExps
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|condition
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|getCondition
parameter_list|()
block|{
return|return
name|condition
return|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
name|double
name|dRows
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|double
name|dCpu
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getChild
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|dIo
init|=
literal|0
decl_stmt|;
return|return
name|planner
operator|.
name|makeCost
argument_list|(
name|dRows
argument_list|,
name|dCpu
argument_list|,
name|dIo
argument_list|)
return|;
block|}
comment|// override RelNode
specifier|public
name|double
name|getRows
parameter_list|()
block|{
return|return
name|estimateFilteredRows
argument_list|(
name|getChild
argument_list|()
argument_list|,
name|condition
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|estimateFilteredRows
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|RexProgram
name|program
parameter_list|)
block|{
comment|// convert the program's RexLocalRef condition to an expanded RexNode
name|RexLocalRef
name|programCondition
init|=
name|program
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|RexNode
name|condition
decl_stmt|;
if|if
condition|(
name|programCondition
operator|==
literal|null
condition|)
block|{
name|condition
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|condition
operator|=
name|program
operator|.
name|expandLocalRef
argument_list|(
name|programCondition
argument_list|)
expr_stmt|;
block|}
return|return
name|estimateFilteredRows
argument_list|(
name|child
argument_list|,
name|condition
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|estimateFilteredRows
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
return|return
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|child
argument_list|)
operator|*
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|child
argument_list|,
name|condition
argument_list|)
return|;
block|}
specifier|public
name|RelOptPlanWriter
name|explainTerms
parameter_list|(
name|RelOptPlanWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|item
argument_list|(
literal|"condition"
argument_list|,
name|condition
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End FilterRelBase.java
end_comment

end_unit

