begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_comment
comment|/**  * Contains factory interface and default implementation for creating various  * rel nodes.  */
end_comment

begin_class
specifier|public
class|class
name|RelFactories
block|{
specifier|public
specifier|static
specifier|final
name|ProjectFactory
name|DEFAULT_PROJECT_FACTORY
init|=
operator|new
name|ProjectFactoryImpl
argument_list|()
decl_stmt|;
specifier|private
name|RelFactories
parameter_list|()
block|{
block|}
comment|/**    * Can create a {@link org.eigenbase.rel.ProjectRel} of the appropriate type    * for this rule's calling convention.    */
specifier|public
interface|interface
name|ProjectFactory
block|{
comment|/**      * Can create a {@link org.eigenbase.rel.ProjectRel} of the appropriate type      * for this rule's calling convention.      */
name|RelNode
name|createProject
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|childExprs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link ProjectFactory} that returns vanilla    * {@link ProjectRel}.    */
specifier|private
specifier|static
class|class
name|ProjectFactoryImpl
implements|implements
name|ProjectFactory
block|{
specifier|public
name|RelNode
name|createProject
parameter_list|(
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|childExprs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
return|return
name|CalcRel
operator|.
name|createProject
argument_list|(
name|child
argument_list|,
name|childExprs
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates a relational expression that projects the given fields of the    * input.    *<p>    * Optimizes if the fields are the identity projection.    *</p>    * @param factory    *          ProjectFactory    * @param child    *          Input relational expression    * @param posList    *          Source of each projected field    * @return Relational expression that projects given fields    */
specifier|public
specifier|static
name|RelNode
name|createProject
parameter_list|(
specifier|final
name|ProjectFactory
name|factory
parameter_list|,
specifier|final
name|RelNode
name|child
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|posList
parameter_list|)
block|{
if|if
condition|(
name|isIdentity
argument_list|(
name|posList
argument_list|,
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|child
return|;
block|}
return|return
name|factory
operator|.
name|createProject
argument_list|(
name|child
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|posList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|RexNode
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|pos
init|=
name|posList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|child
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeInputRef
argument_list|(
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isIdentity
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
name|count
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Integer
name|o
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|!=
name|i
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

