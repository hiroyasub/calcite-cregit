begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * PushJoinThroughUnionRule implements the rule for pushing a  * {@link JoinRel} past a non-distinct {@link UnionRel}.  */
end_comment

begin_class
specifier|public
class|class
name|PushJoinThroughUnionRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|PushJoinThroughUnionRule
name|LEFT_UNION
init|=
operator|new
name|PushJoinThroughUnionRule
argument_list|(
name|operand
argument_list|(
name|JoinRelBase
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|UnionRelBase
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"union on left"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PushJoinThroughUnionRule
name|RIGHT_UNION
init|=
operator|new
name|PushJoinThroughUnionRule
argument_list|(
name|operand
argument_list|(
name|JoinRelBase
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|UnionRelBase
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"union on right"
argument_list|)
decl_stmt|;
specifier|private
name|PushJoinThroughUnionRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
literal|"PushJoinThroughUnionRule: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|JoinRelBase
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|UnionRelBase
name|unionRel
decl_stmt|;
name|RelNode
name|otherInput
decl_stmt|;
name|boolean
name|unionOnLeft
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|UnionRel
condition|)
block|{
name|unionRel
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|otherInput
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|unionOnLeft
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|otherInput
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|unionRel
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|unionOnLeft
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unionRel
operator|.
name|all
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|join
operator|.
name|getVariablesStopped
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// The UNION ALL cannot be on the null generating side
comment|// of an outer join (otherwise we might generate incorrect
comment|// rows for the other side for join keys which lack a match
comment|// in one or both branches of the union)
if|if
condition|(
name|unionOnLeft
condition|)
block|{
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnLeft
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnRight
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|List
argument_list|<
name|RelNode
argument_list|>
name|newUnionInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|unionRel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|RelNode
name|joinLeft
decl_stmt|;
name|RelNode
name|joinRight
decl_stmt|;
if|if
condition|(
name|unionOnLeft
condition|)
block|{
name|joinLeft
operator|=
name|input
expr_stmt|;
name|joinRight
operator|=
name|otherInput
expr_stmt|;
block|}
else|else
block|{
name|joinLeft
operator|=
name|otherInput
expr_stmt|;
name|joinRight
operator|=
name|input
expr_stmt|;
block|}
name|newUnionInputs
operator|.
name|add
argument_list|(
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|joinLeft
argument_list|,
name|joinRight
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SetOpRel
name|newUnionRel
init|=
name|unionRel
operator|.
name|copy
argument_list|(
name|unionRel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newUnionInputs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newUnionRel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End PushJoinThroughUnionRule.java
end_comment

end_unit

