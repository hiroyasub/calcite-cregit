begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Planner rule that finds an approximately optimal ordering for join operators  * using a heuristic algorithm.  *  *<p>It is triggered by the pattern {@link ProjectRel} ({@link MultiJoinRel}).  *  *<p>It is similar to {@link org.eigenbase.rel.rules.LoptOptimizeJoinRule}.  * {@code LoptOptimizeJoinRule} is only capable of producing left-deep joins;  * this rule is capable of producing bushy joins.  */
end_comment

begin_class
specifier|public
class|class
name|OptimizeBushyJoinRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|OptimizeBushyJoinRule
name|INSTANCE
init|=
operator|new
name|OptimizeBushyJoinRule
argument_list|(
name|RelFactories
operator|.
name|DEFAULT_JOIN_FACTORY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RelFactories
operator|.
name|JoinFactory
name|joinFactory
decl_stmt|;
comment|/** Creates an OptimizeBushyJoinRule. */
specifier|public
name|OptimizeBushyJoinRule
parameter_list|(
name|RelFactories
operator|.
name|JoinFactory
name|joinFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|MultiJoinRel
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|joinFactory
operator|=
name|joinFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|MultiJoinRel
name|multiJoinRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|LoptMultiJoin
name|multiJoin
init|=
operator|new
name|LoptMultiJoin
argument_list|(
name|multiJoinRel
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|multiJoinRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|multiJoin
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End OptimizeBushyJoinRule.java
end_comment

end_unit

