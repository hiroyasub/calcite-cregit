begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|AggregateRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|ProjectRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptLattice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|SubstitutionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|mapping
operator|.
name|AbstractSourceMapping
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|StarTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|OptiqPrepareImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|RelOptTableImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Planner rule that matches an {@link org.eigenbase.rel.AggregateRelBase} on  * top of a {@link net.hydromatic.optiq.impl.StarTable.StarTableScan}.  *  *<p>This pattern indicates that an aggregate table may exist. The rule asks  * the star table for an aggregate table at the required level of aggregation.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateStarTableRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|AggregateStarTableRule
name|INSTANCE
init|=
operator|new
name|AggregateStarTableRule
argument_list|(
name|operand
argument_list|(
name|AggregateRelBase
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|StarTable
operator|.
name|StarTableScan
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"AggregateStarTableRule"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|AggregateStarTableRule
name|INSTANCE2
init|=
operator|new
name|AggregateStarTableRule
argument_list|(
name|operand
argument_list|(
name|AggregateRelBase
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|ProjectRelBase
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|StarTable
operator|.
name|StarTableScan
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"AggregateStarTableRule:project"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|AggregateRelBase
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ProjectRelBase
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|StarTable
operator|.
name|StarTableScan
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|AggregateProjectMergeRule
operator|.
name|apply
argument_list|(
name|aggregate
argument_list|,
name|project
argument_list|)
decl_stmt|;
specifier|final
name|AggregateRelBase
name|aggregate2
decl_stmt|;
specifier|final
name|ProjectRelBase
name|project2
decl_stmt|;
if|if
condition|(
name|rel
operator|instanceof
name|AggregateRelBase
condition|)
block|{
name|project2
operator|=
literal|null
expr_stmt|;
name|aggregate2
operator|=
operator|(
name|AggregateRelBase
operator|)
name|rel
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|ProjectRelBase
condition|)
block|{
name|project2
operator|=
operator|(
name|ProjectRelBase
operator|)
name|rel
expr_stmt|;
name|aggregate2
operator|=
operator|(
name|AggregateRelBase
operator|)
name|project2
operator|.
name|getChild
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
name|apply
argument_list|(
name|call
argument_list|,
name|project2
argument_list|,
name|aggregate2
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
name|AggregateStarTableRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|AggregateRelBase
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|StarTable
operator|.
name|StarTableScan
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|apply
argument_list|(
name|call
argument_list|,
literal|null
argument_list|,
name|aggregate
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|apply
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|,
name|ProjectRelBase
name|postProject
parameter_list|,
specifier|final
name|AggregateRelBase
name|aggregate
parameter_list|,
name|StarTable
operator|.
name|StarTableScan
name|scan
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|scan
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|RelOptLattice
name|lattice
init|=
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|getLattice
argument_list|(
name|table
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Lattice
operator|.
name|Measure
argument_list|>
name|measures
init|=
name|lattice
operator|.
name|lattice
operator|.
name|toMeasures
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|OptiqSchema
operator|.
name|TableEntry
argument_list|,
name|MaterializationService
operator|.
name|TileKey
argument_list|>
name|pair
init|=
name|lattice
operator|.
name|getAggregate
argument_list|(
name|call
operator|.
name|getPlanner
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|measures
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|OptiqSchema
operator|.
name|TableEntry
name|tableEntry
init|=
name|pair
operator|.
name|left
decl_stmt|;
specifier|final
name|MaterializationService
operator|.
name|TileKey
name|tileKey
init|=
name|pair
operator|.
name|right
decl_stmt|;
specifier|final
name|double
name|rowCount
init|=
name|aggregate
operator|.
name|getRows
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|aggregateTable
init|=
name|tableEntry
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|aggregateTableRowType
init|=
name|aggregateTable
operator|.
name|getRowType
argument_list|(
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelOptTable
name|aggregateRelOptTable
init|=
name|RelOptTableImpl
operator|.
name|create
argument_list|(
name|table
operator|.
name|getRelOptSchema
argument_list|()
argument_list|,
name|aggregateTableRowType
argument_list|,
name|tableEntry
argument_list|,
name|rowCount
argument_list|)
decl_stmt|;
name|RelNode
name|rel
init|=
name|aggregateRelOptTable
operator|.
name|toRel
argument_list|(
name|RelOptUtil
operator|.
name|getContext
argument_list|(
name|cluster
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tileKey
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|OptiqPrepareImpl
operator|.
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using materialization "
operator|+
name|aggregateRelOptTable
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|" (exact match)"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|tileKey
operator|.
name|dimensions
operator|.
name|equals
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
condition|)
block|{
comment|// Aggregate has finer granularity than we need. Roll up.
if|if
condition|(
name|OptiqPrepareImpl
operator|.
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using materialization "
operator|+
name|aggregateRelOptTable
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|", rolling up "
operator|+
name|tileKey
operator|.
name|dimensions
operator|+
literal|" to "
operator|+
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|BitSets
operator|.
name|contains
argument_list|(
name|tileKey
operator|.
name|dimensions
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
assert|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
specifier|final
name|AggregateCall
name|copy
init|=
name|rollUp
argument_list|(
name|aggCall
argument_list|,
name|tileKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|copy
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|aggCalls
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
name|BitSet
name|groupSet
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|key
range|:
name|BitSets
operator|.
name|toIter
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
control|)
block|{
name|groupSet
operator|.
name|set
argument_list|(
name|BitSets
operator|.
name|toList
argument_list|(
name|tileKey
operator|.
name|dimensions
argument_list|)
operator|.
name|indexOf
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rel
operator|=
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|rel
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|tileKey
operator|.
name|measures
operator|.
name|equals
argument_list|(
name|measures
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using materialization "
operator|+
name|aggregateRelOptTable
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|", right granularity, but different measures "
operator|+
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
expr_stmt|;
name|rel
operator|=
name|RelOptUtil
operator|.
name|project
argument_list|(
name|rel
argument_list|,
operator|new
name|AbstractSourceMapping
argument_list|(
name|tileKey
operator|.
name|dimensions
operator|.
name|cardinality
argument_list|()
operator|+
name|tileKey
operator|.
name|measures
operator|.
name|size
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
block|{
specifier|public
name|int
name|getSourceOpt
parameter_list|(
name|int
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|<
name|aggregate
operator|.
name|getGroupCount
argument_list|()
condition|)
block|{
name|int
name|in
init|=
name|BitSets
operator|.
name|toList
argument_list|(
name|tileKey
operator|.
name|dimensions
argument_list|)
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
name|BitSets
operator|.
name|toList
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
operator|.
name|indexOf
argument_list|(
name|in
argument_list|)
return|;
block|}
name|Lattice
operator|.
name|Measure
name|measure
init|=
name|measures
operator|.
name|get
argument_list|(
name|source
operator|-
name|aggregate
operator|.
name|getGroupCount
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|tileKey
operator|.
name|measures
operator|.
name|indexOf
argument_list|(
name|measure
argument_list|)
decl_stmt|;
assert|assert
name|i
operator|>=
literal|0
assert|;
return|return
name|tileKey
operator|.
name|dimensions
operator|.
name|cardinality
argument_list|()
operator|+
name|i
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postProject
operator|!=
literal|null
condition|)
block|{
name|rel
operator|=
name|postProject
operator|.
name|copy
argument_list|(
name|postProject
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|AggregateCall
name|rollUp
parameter_list|(
name|AggregateCall
name|aggregateCall
parameter_list|,
name|MaterializationService
operator|.
name|TileKey
name|tileKey
parameter_list|)
block|{
specifier|final
name|Aggregation
name|aggregation
init|=
name|aggregateCall
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|Aggregation
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|seek
init|=
name|Pair
operator|.
name|of
argument_list|(
name|aggregation
argument_list|,
name|aggregateCall
operator|.
name|getArgList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|tileKey
operator|.
name|dimensions
operator|.
name|cardinality
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|Lattice
operator|.
name|Measure
argument_list|>
name|measures
init|=
name|tileKey
operator|.
name|measures
decl_stmt|;
comment|// First, try to satisfy the aggregation by rolling up an aggregate in the
comment|// materialization.
specifier|final
name|int
name|i
init|=
name|find
argument_list|(
name|measures
argument_list|,
name|seek
argument_list|)
decl_stmt|;
name|tryRoll
label|:
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
specifier|final
name|Aggregation
name|roll
init|=
name|SubstitutionVisitor
operator|.
name|getRollup
argument_list|(
name|aggregation
argument_list|)
decl_stmt|;
if|if
condition|(
name|roll
operator|==
literal|null
condition|)
block|{
break|break
name|tryRoll
break|;
block|}
return|return
operator|new
name|AggregateCall
argument_list|(
name|roll
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|offset
operator|+
name|i
argument_list|)
argument_list|,
name|aggregateCall
operator|.
name|type
argument_list|,
name|aggregateCall
operator|.
name|name
argument_list|)
return|;
block|}
comment|// Second, try to satisfy the aggregation based on group set columns.
name|tryGroup
label|:
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|arg
range|:
name|aggregateCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|int
name|z
init|=
name|BitSets
operator|.
name|toList
argument_list|(
name|tileKey
operator|.
name|dimensions
argument_list|)
operator|.
name|indexOf
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|z
operator|<
literal|0
condition|)
block|{
break|break
name|tryGroup
break|;
block|}
name|newArgs
operator|.
name|add
argument_list|(
name|z
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AggregateCall
argument_list|(
name|aggregation
argument_list|,
literal|false
argument_list|,
name|newArgs
argument_list|,
name|aggregateCall
operator|.
name|type
argument_list|,
name|aggregateCall
operator|.
name|name
argument_list|)
return|;
block|}
comment|// No roll up possible.
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|int
name|find
parameter_list|(
name|ImmutableList
argument_list|<
name|Lattice
operator|.
name|Measure
argument_list|>
name|measures
parameter_list|,
name|Pair
argument_list|<
name|Aggregation
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|seek
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|measures
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Lattice
operator|.
name|Measure
name|measure
init|=
name|measures
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|measure
operator|.
name|agg
operator|.
name|equals
argument_list|(
name|seek
operator|.
name|left
argument_list|)
operator|&&
name|measure
operator|.
name|argOrdinals
argument_list|()
operator|.
name|equals
argument_list|(
name|seek
operator|.
name|right
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateStarTableRule.java
end_comment

end_unit

