begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * PushFilterPastProjectRule implements the rule for pushing a {@link FilterRel}  * past a {@link ProjectRel}.  */
end_comment

begin_class
specifier|public
class|class
name|PushFilterPastProjectRule
extends|extends
name|RelOptRule
block|{
comment|/** The default instance of    * {@link org.eigenbase.rel.rules.PushFilterPastJoinRule}.    *    *<p>It matches any kind of join or filter, and generates the same kind of    * join and filter. It uses null values for {@code filterFactory} and    * {@code projectFactory} to achieve this. */
specifier|public
specifier|static
specifier|final
name|PushFilterPastProjectRule
name|INSTANCE
init|=
operator|new
name|PushFilterPastProjectRule
argument_list|(
name|FilterRelBase
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|ProjectRelBase
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RelFactories
operator|.
name|FilterFactory
name|filterFactory
decl_stmt|;
specifier|private
specifier|final
name|RelFactories
operator|.
name|ProjectFactory
name|projectFactory
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a PushFilterPastProjectRule.    *    *<p>If {@code filterFactory} is null, creates the same kind of filter as    * matched in the rule. Similarly {@code projectFactory}.</p>    */
specifier|public
name|PushFilterPastProjectRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|FilterRelBase
argument_list|>
name|filterClass
parameter_list|,
name|RelFactories
operator|.
name|FilterFactory
name|filterFactory
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ProjectRelBase
argument_list|>
name|projectRelBaseClass
parameter_list|,
name|RelFactories
operator|.
name|ProjectFactory
name|projectFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|filterClass
argument_list|,
name|operand
argument_list|(
name|projectRelBaseClass
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterFactory
operator|=
name|filterFactory
expr_stmt|;
name|this
operator|.
name|projectFactory
operator|=
name|projectFactory
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|FilterRelBase
name|filterRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ProjectRelBase
name|projRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// convert the filter to one that references the child of the project
name|RexNode
name|newCondition
init|=
name|RelOptUtil
operator|.
name|pushFilterPastProject
argument_list|(
name|filterRel
operator|.
name|getCondition
argument_list|()
argument_list|,
name|projRel
argument_list|)
decl_stmt|;
name|RelNode
name|newFilterRel
init|=
name|filterFactory
operator|==
literal|null
condition|?
name|filterRel
operator|.
name|copy
argument_list|(
name|filterRel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|projRel
operator|.
name|getChild
argument_list|()
argument_list|,
name|newCondition
argument_list|)
else|:
name|filterFactory
operator|.
name|createFilter
argument_list|(
name|projRel
operator|.
name|getChild
argument_list|()
argument_list|,
name|newCondition
argument_list|)
decl_stmt|;
name|RelNode
name|newProjRel
init|=
name|projectFactory
operator|==
literal|null
condition|?
name|projRel
operator|.
name|copy
argument_list|(
name|projRel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newFilterRel
argument_list|,
name|projRel
operator|.
name|getProjects
argument_list|()
argument_list|,
name|projRel
operator|.
name|getRowType
argument_list|()
argument_list|)
else|:
name|projectFactory
operator|.
name|createProject
argument_list|(
name|newFilterRel
argument_list|,
name|projRel
operator|.
name|getProjects
argument_list|()
argument_list|,
name|projRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProjRel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End PushFilterPastProjectRule.java
end_comment

end_unit

