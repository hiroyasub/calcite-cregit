begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/** An analyzed join condition.  *  *<p>It is useful for the many algorithms that care whether a join is an  * equi-join.  *  *<p>You can create one using {@link #of}, or call {@link JoinRelBase#analyzeCondition()};  * many kinds of join cache their join info, especially those that are  * equi-joins and sub-class {@link org.eigenbase.rel.rules.EquiJoinRel}.</p>  *  * @see JoinRelBase#analyzeCondition() */
end_comment

begin_class
specifier|public
class|class
name|JoinInfo
block|{
specifier|public
specifier|final
name|ImmutableIntList
name|leftKeys
decl_stmt|;
specifier|public
specifier|final
name|ImmutableIntList
name|rightKeys
decl_stmt|;
specifier|public
specifier|final
name|RexNode
name|remaining
decl_stmt|;
comment|/** Creates a JoinInfo. */
specifier|public
name|JoinInfo
parameter_list|(
name|ImmutableIntList
name|leftKeys
parameter_list|,
name|ImmutableIntList
name|rightKeys
parameter_list|,
name|RexNode
name|remaining
parameter_list|)
block|{
name|this
operator|.
name|leftKeys
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|leftKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|rightKeys
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|rightKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
assert|assert
name|leftKeys
operator|.
name|size
argument_list|()
operator|==
name|rightKeys
operator|.
name|size
argument_list|()
assert|;
block|}
comment|/** Creates a {@code JoinInfo} by analyzing a condition. */
specifier|public
specifier|static
name|JoinInfo
name|of
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leftKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rightKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|RexNode
name|remaining
init|=
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|leftKeys
argument_list|,
name|rightKeys
argument_list|)
decl_stmt|;
return|return
operator|new
name|JoinInfo
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|leftKeys
argument_list|)
argument_list|,
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|rightKeys
argument_list|)
argument_list|,
name|remaining
argument_list|)
return|;
block|}
comment|/** Returns whether this is an equi-join. */
specifier|public
name|boolean
name|isEqui
parameter_list|()
block|{
return|return
name|remaining
operator|.
name|isAlwaysTrue
argument_list|()
return|;
block|}
comment|/** Returns a list of (left, right) key ordinals. */
specifier|public
name|List
argument_list|<
name|IntPair
argument_list|>
name|pairs
parameter_list|()
block|{
return|return
name|IntPair
operator|.
name|zip
argument_list|(
name|leftKeys
argument_list|,
name|rightKeys
argument_list|)
return|;
block|}
specifier|public
name|BitSet
name|leftSet
parameter_list|()
block|{
return|return
name|BitSets
operator|.
name|of
argument_list|(
name|leftKeys
argument_list|)
return|;
block|}
specifier|public
name|BitSet
name|rightSet
parameter_list|()
block|{
return|return
name|BitSets
operator|.
name|of
argument_list|(
name|rightKeys
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End JoinInfo.java
end_comment

end_unit

