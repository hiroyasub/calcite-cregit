begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|javac
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>JavaCompilerArgs</code> holds the arguments for a {@link  * JavaCompiler}.  *  *<p>Specific implementations of {@link JavaCompiler} may override<code>  * set<i>Argument</i></code> methods to store arguments in a different fashion,  * or may throw {@link UnsupportedOperationException} to indicate that the  * compiler does not support that argument.  */
end_comment

begin_class
specifier|public
class|class
name|JavaCompilerArgs
block|{
comment|//~ Instance fields --------------------------------------------------------
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ClassLoader
name|classLoader
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|JavaCompilerArgs
parameter_list|()
block|{
name|classLoader
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|fileNameList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Sets the arguments by parsing a standard java argument string.    *    *<p>A typical such string is<code>"-classpath<i>classpath</i> -d<i>    * dir</i> -verbose [<i>file</i>...]"</code>    */
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|args
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setStringArray
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the arguments by parsing a standard java argument string. A typical    * such string is<code>"-classpath<i>classpath</i> -d<i>dir</i> -verbose    * [<i>file</i>...]"</code>    */
specifier|public
name|void
name|setStringArray
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-classpath"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|setClasspath
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-d"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|setDestdir
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-verbose"
argument_list|)
condition|)
block|{
name|setVerbose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argsList
operator|.
name|add
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
index|[]
name|getStringArray
parameter_list|()
block|{
name|argsList
operator|.
name|addAll
argument_list|(
name|fileNameList
argument_list|)
expr_stmt|;
return|return
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|fileNameList
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getFileNames
parameter_list|()
block|{
return|return
name|fileNameList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fileNameList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
literal|"-verbose"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDestdir
parameter_list|(
name|String
name|destdir
parameter_list|)
block|{
name|argsList
operator|.
name|add
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
name|argsList
operator|.
name|add
argument_list|(
name|destdir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClasspath
parameter_list|(
name|String
name|classpath
parameter_list|)
block|{
name|argsList
operator|.
name|add
argument_list|(
literal|"-classpath"
argument_list|)
expr_stmt|;
name|argsList
operator|.
name|add
argument_list|(
name|classpath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDebugInfo
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
literal|"-g="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the source code (that is, the full java program, generally starting    * with something like "package com.foo.bar;") and the file name.    *    *<p>This method is optional. It only works if the compiler supports    * in-memory compilation. If this compiler does not return in-memory    * compilation (which the base class does not), {@link #supportsSetSource}    * returns false, and this method throws {@link    * UnsupportedOperationException}.    */
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Returns whether {@link #setSource} will work.    */
specifier|public
name|boolean
name|supportsSetSource
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setFullClassName
parameter_list|(
name|String
name|fullClassName
parameter_list|)
block|{
comment|// NOTE jvs 28-June-2004: I added this in order to support Janino's
comment|// JavaSourceClassLoader, which needs it.  Non-Farrago users
comment|// don't need to call this method.
block|}
specifier|public
name|void
name|setClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|this
operator|.
name|classLoader
operator|=
name|classLoader
expr_stmt|;
block|}
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|classLoader
return|;
block|}
block|}
end_class

begin_comment
comment|// End JavaCompilerArgs.java
end_comment

end_unit

