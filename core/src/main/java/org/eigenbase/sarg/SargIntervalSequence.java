begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sarg
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * SargIntervalSequence represents the union of a set of disjoint {@link  * SargInterval} instances. (If any adjacent intervals weren't disjoint, they  * would have been combined into one bigger one before creation of the  * sequence.) Intervals are maintained in coordinate order.  */
end_comment

begin_class
specifier|public
class|class
name|SargIntervalSequence
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|final
name|List
argument_list|<
name|SargInterval
argument_list|>
name|list
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
name|SargIntervalSequence
parameter_list|()
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|SargInterval
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * @return true if this sequence represents a point range.    */
specifier|public
name|boolean
name|isPoint
parameter_list|()
block|{
return|return
operator|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isPoint
argument_list|()
return|;
block|}
comment|/**    * @return true if this sequence represents an empty range.    */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * @return true if this sequence represents a non-point, non-empty range.    */
specifier|public
name|boolean
name|isRange
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|||
operator|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRange
argument_list|()
operator|)
return|;
block|}
comment|/**    * @return unmodifiable list representing this sequence    */
specifier|public
name|List
argument_list|<
name|SargInterval
argument_list|>
name|getList
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
return|;
block|}
name|void
name|addInterval
parameter_list|(
name|SargInterval
name|interval
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
comment|// override Object
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// Special case:  empty sequence implies empty set.
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"()"
return|;
block|}
comment|// Special case:  don't return UNION of a single interval.
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|SargSetOperator
operator|.
name|UNION
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|SargInterval
name|interval
range|:
name|list
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End SargIntervalSequence.java
end_comment

end_unit

