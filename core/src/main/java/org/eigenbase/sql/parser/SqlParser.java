begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|impl
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|Casing
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|Quoting
import|;
end_import

begin_comment
comment|/**  * A<code>SqlParser</code> parses a SQL statement.  */
end_comment

begin_class
specifier|public
class|class
name|SqlParser
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlParserImpl
name|parser
decl_stmt|;
specifier|private
name|String
name|originalInput
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a<code>SqlParser</code> that reads input from a string.    */
specifier|public
name|SqlParser
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
argument_list|(
name|s
argument_list|,
name|Quoting
operator|.
name|DOUBLE_QUOTE
argument_list|,
name|Casing
operator|.
name|TO_UPPER
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a<code>SqlParser</code> that reads input from a string.    */
specifier|public
name|SqlParser
parameter_list|(
name|String
name|s
parameter_list|,
name|Quoting
name|quoting
parameter_list|,
name|Casing
name|unquotedCasing
parameter_list|,
name|Casing
name|quotedCasing
parameter_list|)
block|{
name|parser
operator|=
operator|new
name|SqlParserImpl
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setTabSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|parser
operator|.
name|quotedCasing
operator|=
name|quotedCasing
expr_stmt|;
name|parser
operator|.
name|unquotedCasing
operator|=
name|unquotedCasing
expr_stmt|;
name|this
operator|.
name|originalInput
operator|=
name|s
expr_stmt|;
switch|switch
condition|(
name|quoting
condition|)
block|{
case|case
name|DOUBLE_QUOTE
case|:
name|switchTo
argument_list|(
literal|"DQID"
argument_list|)
expr_stmt|;
break|break;
case|case
name|BACK_TICK
case|:
name|switchTo
argument_list|(
literal|"BTID"
argument_list|)
expr_stmt|;
break|break;
case|case
name|BRACKET
case|:
name|switchTo
argument_list|(
literal|"DEFAULT"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|void
name|switchTo
parameter_list|(
name|String
name|stateName
parameter_list|)
block|{
name|int
name|state
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|SqlParserImplTokenManager
operator|.
name|lexStateNames
argument_list|)
operator|.
name|indexOf
argument_list|(
name|stateName
argument_list|)
decl_stmt|;
name|parser
operator|.
name|token_source
operator|.
name|SwitchTo
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Parses a SQL expression.    *    * @throws SqlParseException if there is a parse error    */
specifier|public
name|SqlNode
name|parseExpression
parameter_list|()
throws|throws
name|SqlParseException
block|{
try|try
block|{
return|return
name|parser
operator|.
name|SqlExpressionEof
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|(
name|ex
operator|instanceof
name|EigenbaseContextException
operator|)
operator|&&
operator|(
name|originalInput
operator|!=
literal|null
operator|)
condition|)
block|{
operator|(
operator|(
name|EigenbaseContextException
operator|)
name|ex
operator|)
operator|.
name|setOriginalStatement
argument_list|(
name|originalInput
argument_list|)
expr_stmt|;
block|}
throw|throw
name|parser
operator|.
name|normalizeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Parses a<code>SELECT</code> statement.    *    * @return A {@link org.eigenbase.sql.SqlSelect} for a regular<code>    * SELECT</code> statement; a {@link org.eigenbase.sql.SqlBinaryOperator}    * for a<code>UNION</code>,<code>INTERSECT</code>, or<code>EXCEPT</code>.    * @throws SqlParseException if there is a parse error    */
specifier|public
name|SqlNode
name|parseQuery
parameter_list|()
throws|throws
name|SqlParseException
block|{
try|try
block|{
return|return
name|parser
operator|.
name|SqlStmtEof
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|(
name|ex
operator|instanceof
name|EigenbaseContextException
operator|)
operator|&&
operator|(
name|originalInput
operator|!=
literal|null
operator|)
condition|)
block|{
operator|(
operator|(
name|EigenbaseContextException
operator|)
name|ex
operator|)
operator|.
name|setOriginalStatement
argument_list|(
name|originalInput
argument_list|)
expr_stmt|;
block|}
throw|throw
name|parser
operator|.
name|normalizeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Parses an SQL statement.    *    * @return top-level SqlNode representing stmt    * @throws SqlParseException if there is a parse error    */
specifier|public
name|SqlNode
name|parseStmt
parameter_list|()
throws|throws
name|SqlParseException
block|{
try|try
block|{
return|return
name|parser
operator|.
name|SqlStmtEof
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|(
name|ex
operator|instanceof
name|EigenbaseContextException
operator|)
operator|&&
operator|(
name|originalInput
operator|!=
literal|null
operator|)
condition|)
block|{
operator|(
operator|(
name|EigenbaseContextException
operator|)
name|ex
operator|)
operator|.
name|setOriginalStatement
argument_list|(
name|originalInput
argument_list|)
expr_stmt|;
block|}
throw|throw
name|parser
operator|.
name|normalizeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the underlying generated parser.    */
specifier|public
name|SqlParserImpl
name|getParserImpl
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlParser.java
end_comment

end_unit

