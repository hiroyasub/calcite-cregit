begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|trace
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|avatica
operator|.
name|Casing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Utility methods relating to parsing SQL.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SqlParserUtil
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|EigenbaseTrace
operator|.
name|getParserTracer
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|SqlParserUtil
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * @return the character-set prefix of an sql string literal; returns null    * if there is none    */
specifier|public
specifier|static
name|String
name|getCharacterSet
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\''
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|'N'
condition|)
block|{
return|return
name|SaffronProperties
operator|.
name|instance
argument_list|()
operator|.
name|defaultNationalCharset
operator|.
name|get
argument_list|()
return|;
block|}
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"'"
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
return|;
comment|// skip prefixed '_'
block|}
comment|/**    * Converts the contents of an sql quoted string literal into the    * corresponding Java string representation (removing leading and trailing    * quotes and unescaping internal doubled quotes).    */
specifier|public
specifier|static
name|String
name|parseString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"'"
argument_list|)
decl_stmt|;
comment|// start of body
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|strip
argument_list|(
name|s
argument_list|,
literal|"'"
argument_list|,
literal|"'"
argument_list|,
literal|"''"
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|parseDecimal
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|parseInteger
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * @deprecated this method is not localized for Farrago standards    */
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Date
name|parseDate
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * @deprecated Does not parse SQL:99 milliseconds    */
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Time
name|parseTime
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * @deprecated this method is not localized for Farrago standards    */
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|parseTimestamp
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * Checks if the date/time format is valid    *    * @param pattern {@link SimpleDateFormat}  pattern    */
specifier|public
specifier|static
name|void
name|checkDateFormat
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|df
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts the interval value into a millisecond representation.    *    * @param interval Interval    * @return a long value that represents millisecond equivalent of the    * interval value.    */
specifier|public
specifier|static
name|long
name|intervalToMillis
parameter_list|(
name|SqlIntervalLiteral
operator|.
name|IntervalValue
name|interval
parameter_list|)
block|{
return|return
name|intervalToMillis
argument_list|(
name|interval
operator|.
name|getIntervalLiteral
argument_list|()
argument_list|,
name|interval
operator|.
name|getIntervalQualifier
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|intervalToMillis
parameter_list|(
name|String
name|literal
parameter_list|,
name|SqlIntervalQualifier
name|intervalQualifier
parameter_list|)
block|{
name|Util
operator|.
name|permAssert
argument_list|(
operator|!
name|intervalQualifier
operator|.
name|isYearMonth
argument_list|()
argument_list|,
literal|"interval must be day time"
argument_list|)
expr_stmt|;
name|int
index|[]
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|intervalQualifier
operator|.
name|evaluateIntervalLiteral
argument_list|(
name|literal
argument_list|,
name|intervalQualifier
operator|.
name|getParserPosition
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|ret
operator|!=
literal|null
assert|;
block|}
catch|catch
parameter_list|(
name|EigenbaseContextException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"while parsing day-to-second interval "
operator|+
name|literal
argument_list|)
throw|;
block|}
name|long
name|l
init|=
literal|0
decl_stmt|;
name|long
index|[]
name|conv
init|=
operator|new
name|long
index|[
literal|5
index|]
decl_stmt|;
name|conv
index|[
literal|4
index|]
operator|=
literal|1
expr_stmt|;
comment|// millisecond
name|conv
index|[
literal|3
index|]
operator|=
name|conv
index|[
literal|4
index|]
operator|*
literal|1000
expr_stmt|;
comment|// second
name|conv
index|[
literal|2
index|]
operator|=
name|conv
index|[
literal|3
index|]
operator|*
literal|60
expr_stmt|;
comment|// minute
name|conv
index|[
literal|1
index|]
operator|=
name|conv
index|[
literal|2
index|]
operator|*
literal|60
expr_stmt|;
comment|// hour
name|conv
index|[
literal|0
index|]
operator|=
name|conv
index|[
literal|1
index|]
operator|*
literal|24
expr_stmt|;
comment|// day
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|+=
name|conv
index|[
name|i
operator|-
literal|1
index|]
operator|*
name|ret
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|ret
index|[
literal|0
index|]
operator|*
name|l
return|;
block|}
comment|/**    * Converts the interval value into a months representation.    *    * @param interval Interval    * @return a long value that represents months equivalent of the interval    * value.    */
specifier|public
specifier|static
name|long
name|intervalToMonths
parameter_list|(
name|SqlIntervalLiteral
operator|.
name|IntervalValue
name|interval
parameter_list|)
block|{
return|return
name|intervalToMonths
argument_list|(
name|interval
operator|.
name|getIntervalLiteral
argument_list|()
argument_list|,
name|interval
operator|.
name|getIntervalQualifier
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|intervalToMonths
parameter_list|(
name|String
name|literal
parameter_list|,
name|SqlIntervalQualifier
name|intervalQualifier
parameter_list|)
block|{
name|Util
operator|.
name|permAssert
argument_list|(
name|intervalQualifier
operator|.
name|isYearMonth
argument_list|()
argument_list|,
literal|"interval must be year month"
argument_list|)
expr_stmt|;
name|int
index|[]
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|intervalQualifier
operator|.
name|evaluateIntervalLiteral
argument_list|(
name|literal
argument_list|,
name|intervalQualifier
operator|.
name|getParserPosition
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|ret
operator|!=
literal|null
assert|;
block|}
catch|catch
parameter_list|(
name|EigenbaseContextException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"error parsing year-to-month interval "
operator|+
name|literal
argument_list|)
throw|;
block|}
name|long
name|l
init|=
literal|0
decl_stmt|;
name|long
index|[]
name|conv
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
name|conv
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
comment|// months
name|conv
index|[
literal|0
index|]
operator|=
name|conv
index|[
literal|1
index|]
operator|*
literal|12
expr_stmt|;
comment|// years
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|+=
name|conv
index|[
name|i
operator|-
literal|1
index|]
operator|*
name|ret
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|ret
index|[
literal|0
index|]
operator|*
name|l
return|;
block|}
comment|/**    * Parses a positive int. All characters have to be digits.    *    * @see Integer#parseInt(String)    * @throws java.lang.NumberFormatException if invalid number or leading '-'    */
specifier|public
specifier|static
name|int
name|parsePositiveInt
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
name|value
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Parses a Binary string. SQL:99 defines a binary string as a hexstring    * with EVEN nbr of hex digits.    */
specifier|public
specifier|static
name|byte
index|[]
name|parseBinaryString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\t"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\r"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\f"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
assert|assert
operator|(
name|s
operator|.
name|length
argument_list|()
operator|&
literal|1
operator|)
operator|==
literal|0
assert|;
comment|// must be even nbr of hex digits
specifier|final
name|int
name|lengthToBe
init|=
name|s
operator|.
name|length
argument_list|()
operator|/
literal|2
decl_stmt|;
name|s
operator|=
literal|"ff"
operator|+
name|s
expr_stmt|;
name|BigInteger
name|bigInt
init|=
operator|new
name|BigInteger
argument_list|(
name|s
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|lengthToBe
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bigInt
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Unquotes a quoted string, using different quotes for beginning and end.    */
specifier|public
specifier|static
name|String
name|strip
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|startQuote
parameter_list|,
name|String
name|endQuote
parameter_list|,
name|String
name|escape
parameter_list|,
name|Casing
name|casing
parameter_list|)
block|{
if|if
condition|(
name|startQuote
operator|!=
literal|null
condition|)
block|{
assert|assert
name|endQuote
operator|!=
literal|null
assert|;
assert|assert
name|startQuote
operator|.
name|length
argument_list|()
operator|==
literal|1
assert|;
assert|assert
name|endQuote
operator|.
name|length
argument_list|()
operator|==
literal|1
assert|;
assert|assert
name|escape
operator|!=
literal|null
assert|;
assert|assert
name|s
operator|.
name|startsWith
argument_list|(
name|startQuote
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
name|endQuote
argument_list|)
operator|:
name|s
assert|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
name|escape
argument_list|,
name|endQuote
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|casing
condition|)
block|{
case|case
name|TO_UPPER
case|:
return|return
name|s
operator|.
name|toUpperCase
argument_list|()
return|;
case|case
name|TO_LOWER
case|:
return|return
name|s
operator|.
name|toLowerCase
argument_list|()
return|;
default|default:
return|return
name|s
return|;
block|}
block|}
comment|/**    * Trims a string for given characters from left and right. E.g.    * {@code trim("aBaac123AabC","abBcC")} returns {@code "123A"}.    */
specifier|public
specifier|static
name|String
name|trim
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|chars
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|start
decl_stmt|;
for|for
control|(
name|start
operator|=
literal|0
init|;
name|start
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|start
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|chars
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|int
name|stop
decl_stmt|;
for|for
control|(
name|stop
operator|=
name|s
operator|.
name|length
argument_list|()
init|;
name|stop
operator|>
name|start
condition|;
name|stop
operator|--
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|stop
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|chars
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|start
operator|>=
name|stop
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|stop
argument_list|)
return|;
block|}
comment|/**    * Looks for one or two carets in a SQL string, and if present, converts    * them into a parser position.    *    *<p>Examples:    *    *<ul>    *<li>findPos("xxx^yyy") yields {"xxxyyy", position 3, line 1 column 4}    *<li>findPos("xxxyyy") yields {"xxxyyy", null}    *<li>findPos("xxx^yy^y") yields {"xxxyyy", position 3, line 4 column 4    * through line 1 column 6}    *</ul>    */
specifier|public
specifier|static
name|StringAndPos
name|findPos
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|int
name|firstCaret
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstCaret
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|StringAndPos
argument_list|(
name|sql
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|int
name|secondCaret
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|,
name|firstCaret
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondCaret
operator|<
literal|0
condition|)
block|{
name|String
name|sqlSansCaret
init|=
name|sql
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstCaret
argument_list|)
operator|+
name|sql
operator|.
name|substring
argument_list|(
name|firstCaret
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|start
init|=
name|indexToLineCol
argument_list|(
name|sql
argument_list|,
name|firstCaret
argument_list|)
decl_stmt|;
name|SqlParserPos
name|pos
init|=
operator|new
name|SqlParserPos
argument_list|(
name|start
index|[
literal|0
index|]
argument_list|,
name|start
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringAndPos
argument_list|(
name|sqlSansCaret
argument_list|,
name|firstCaret
argument_list|,
name|pos
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|sqlSansCaret
init|=
name|sql
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstCaret
argument_list|)
operator|+
name|sql
operator|.
name|substring
argument_list|(
name|firstCaret
operator|+
literal|1
argument_list|,
name|secondCaret
argument_list|)
operator|+
name|sql
operator|.
name|substring
argument_list|(
name|secondCaret
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|start
init|=
name|indexToLineCol
argument_list|(
name|sql
argument_list|,
name|firstCaret
argument_list|)
decl_stmt|;
comment|// subtract 1 because the col position needs to be inclusive
operator|--
name|secondCaret
expr_stmt|;
name|int
index|[]
name|end
init|=
name|indexToLineCol
argument_list|(
name|sql
argument_list|,
name|secondCaret
argument_list|)
decl_stmt|;
comment|// if second caret is on same line as first, decrement its column,
comment|// because first caret pushed the string out
if|if
condition|(
name|start
index|[
literal|0
index|]
operator|==
name|end
index|[
literal|0
index|]
condition|)
block|{
operator|--
name|end
index|[
literal|1
index|]
expr_stmt|;
block|}
name|SqlParserPos
name|pos
init|=
operator|new
name|SqlParserPos
argument_list|(
name|start
index|[
literal|0
index|]
argument_list|,
name|start
index|[
literal|1
index|]
argument_list|,
name|end
index|[
literal|0
index|]
argument_list|,
name|end
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringAndPos
argument_list|(
name|sqlSansCaret
argument_list|,
name|firstCaret
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the (1-based) line and column corresponding to a particular    * (0-based) offset in a string.    *    *<p>Converse of {@link #lineColToIndex(String, int, int)}.    */
specifier|public
specifier|static
name|int
index|[]
name|indexToLineCol
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|int
name|line
init|=
literal|0
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|prevj
init|=
name|j
decl_stmt|;
name|j
operator|=
name|nextLine
argument_list|(
name|sql
argument_list|,
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|j
operator|<
literal|0
operator|)
operator|||
operator|(
name|j
operator|>
name|i
operator|)
condition|)
block|{
return|return
operator|new
name|int
index|[]
block|{
name|line
operator|+
literal|1
block|,
name|i
operator|-
name|prevj
operator|+
literal|1
block|}
return|;
block|}
operator|++
name|line
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|nextLine
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|rn
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"\r\n"
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|int
name|r
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"\r"
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"\n"
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|<
literal|0
operator|)
operator|&&
operator|(
name|n
operator|<
literal|0
operator|)
condition|)
block|{
assert|assert
name|rn
operator|<
literal|0
assert|;
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
operator|(
name|rn
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|rn
operator|<
name|n
operator|)
operator|&&
operator|(
name|rn
operator|<=
name|r
operator|)
condition|)
block|{
return|return
name|rn
operator|+
literal|2
return|;
comment|// looking at "\r\n"
block|}
if|else if
condition|(
operator|(
name|r
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|r
operator|<
name|n
operator|)
condition|)
block|{
return|return
name|r
operator|+
literal|1
return|;
comment|// looking at "\r"
block|}
else|else
block|{
return|return
name|n
operator|+
literal|1
return|;
comment|// looking at "\n"
block|}
block|}
comment|/**    * Finds the position (0-based) in a string which corresponds to a given    * line and column (1-based).    *    *<p>Converse of {@link #indexToLineCol(String, int)}.    */
specifier|public
specifier|static
name|int
name|lineColToIndex
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|)
block|{
operator|--
name|line
expr_stmt|;
operator|--
name|column
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|line
operator|--
operator|>
literal|0
condition|)
block|{
name|i
operator|=
name|nextLine
argument_list|(
name|sql
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|i
operator|+
name|column
return|;
block|}
comment|/**    * Converts a string to a string with one or two carets in it. For example,    *<code>addCarets("values (foo)", 1, 9, 1, 12)</code> yields "values    * (^foo^)".    */
specifier|public
specifier|static
name|String
name|addCarets
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|col
parameter_list|,
name|int
name|endLine
parameter_list|,
name|int
name|endCol
parameter_list|)
block|{
name|String
name|sqlWithCarets
decl_stmt|;
name|int
name|cut
init|=
name|lineColToIndex
argument_list|(
name|sql
argument_list|,
name|line
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|sqlWithCarets
operator|=
name|sql
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cut
argument_list|)
operator|+
literal|"^"
operator|+
name|sql
operator|.
name|substring
argument_list|(
name|cut
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|col
operator|!=
name|endCol
operator|)
operator|||
operator|(
name|line
operator|!=
name|endLine
operator|)
condition|)
block|{
name|cut
operator|=
name|lineColToIndex
argument_list|(
name|sqlWithCarets
argument_list|,
name|endLine
argument_list|,
name|endCol
argument_list|)
expr_stmt|;
operator|++
name|cut
expr_stmt|;
comment|// for caret
if|if
condition|(
name|cut
operator|<
name|sqlWithCarets
operator|.
name|length
argument_list|()
condition|)
block|{
name|sqlWithCarets
operator|=
name|sqlWithCarets
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cut
argument_list|)
operator|+
literal|"^"
operator|+
name|sqlWithCarets
operator|.
name|substring
argument_list|(
name|cut
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sqlWithCarets
operator|+=
literal|"^"
expr_stmt|;
block|}
block|}
return|return
name|sqlWithCarets
return|;
block|}
specifier|public
specifier|static
name|String
name|getTokenVal
parameter_list|(
name|String
name|token
parameter_list|)
block|{
comment|// We don't care about the token which are not string
if|if
condition|(
operator|!
name|token
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Remove the quote from the token
name|int
name|startIndex
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|"\""
argument_list|)
decl_stmt|;
name|int
name|endIndex
init|=
name|token
operator|.
name|lastIndexOf
argument_list|(
literal|"\""
argument_list|)
decl_stmt|;
name|String
name|tokenVal
init|=
name|token
operator|.
name|substring
argument_list|(
name|startIndex
operator|+
literal|1
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
name|char
name|c
init|=
name|tokenVal
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|tokenVal
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Extracts the values from a collation name.    *    *<p>Collation names are on the form<i>charset$locale$strength</i>.    *    * @param in The collation name    * @return A {@link ParsedCollation}    */
specifier|public
specifier|static
name|ParsedCollation
name|parseCollation
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|in
argument_list|,
literal|"$"
argument_list|)
decl_stmt|;
name|String
name|charsetStr
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|localeStr
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|strength
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|strength
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|strength
operator|=
name|SaffronProperties
operator|.
name|instance
argument_list|()
operator|.
name|defaultCollationStrength
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetStr
argument_list|)
decl_stmt|;
name|String
index|[]
name|localeParts
init|=
name|localeStr
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|Locale
name|locale
decl_stmt|;
if|if
condition|(
literal|1
operator|==
name|localeParts
operator|.
name|length
condition|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|localeParts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|2
operator|==
name|localeParts
operator|.
name|length
condition|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|localeParts
index|[
literal|0
index|]
argument_list|,
name|localeParts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|3
operator|==
name|localeParts
operator|.
name|length
condition|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|localeParts
index|[
literal|0
index|]
argument_list|,
name|localeParts
index|[
literal|1
index|]
argument_list|,
name|localeParts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|RESOURCE
operator|.
name|illegalLocaleFormat
argument_list|(
name|localeStr
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
return|return
operator|new
name|ParsedCollation
argument_list|(
name|charset
argument_list|,
name|locale
argument_list|,
name|strength
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|toStringArray
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
index|[]
name|toNodeArray
parameter_list|(
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|SqlNode
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
index|[]
name|toNodeArray
parameter_list|(
name|SqlNodeList
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|rightTrim
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|int
name|stop
decl_stmt|;
for|for
control|(
name|stop
operator|=
name|s
operator|.
name|length
argument_list|()
init|;
name|stop
operator|>
literal|0
condition|;
name|stop
operator|--
control|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|stop
operator|-
literal|1
argument_list|)
operator|!=
name|c
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|stop
operator|>
literal|0
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|stop
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
comment|/**    * Replaces a range of elements in a list with a single element. For    * example, if list contains<code>{A, B, C, D, E}</code> then<code>    * replaceSublist(list, X, 1, 4)</code> returns<code>{A, X, E}</code>.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|replaceSublist
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|T
name|o
parameter_list|)
block|{
name|Util
operator|.
name|pre
argument_list|(
name|list
operator|!=
literal|null
argument_list|,
literal|"list != null"
argument_list|)
expr_stmt|;
name|Util
operator|.
name|pre
argument_list|(
name|start
operator|<
name|end
argument_list|,
literal|"start< end"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|end
operator|-
literal|1
init|;
name|i
operator|>
name|start
condition|;
operator|--
name|i
control|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|set
argument_list|(
name|start
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts a list of {expression, operator, expression, ...} into a tree,    * taking operator precedence and associativity into account.    */
specifier|public
specifier|static
name|SqlNode
name|toTree
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|)
block|{
assert|assert
name|list
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|1
assert|;
if|if
condition|(
name|LOGGER
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|finer
argument_list|(
literal|"Attempting to reduce "
operator|+
name|list
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SqlNode
name|node
init|=
name|toTreeEx
argument_list|(
name|list
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SqlKind
operator|.
name|OTHER
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
literal|"Reduced "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
comment|/**    * Converts a list of {expression, operator, expression, ...} into a tree,    * taking operator precedence and associativity into account.    *    * @param list        List of operands and operators. This list is modified as    *                    expressions are reduced.    * @param start       Position of first operand in the list. Anything to the    *                    left of this (besides the immediately preceding operand)    *                    is ignored. Generally use value 1.    * @param minPrec     Minimum precedence to consider. If the method encounters    *                    an operator of lower precedence, it doesn't reduce any    *                    further.    * @param stopperKind If not {@link SqlKind#OTHER}, stop reading the list if    *                    we encounter a token of this kind.    * @return the root node of the tree which the list condenses into    */
specifier|public
specifier|static
name|SqlNode
name|toTreeEx
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|minPrec
parameter_list|,
name|SqlKind
name|stopperKind
parameter_list|)
block|{
comment|// Make several passes over the list, and each pass, coalesce the
comment|// expressions with the highest precedence.
name|outer
label|:
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|count
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<=
operator|(
name|start
operator|+
literal|1
operator|)
condition|)
block|{
break|break;
block|}
name|int
name|i
init|=
name|start
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|count
condition|)
block|{
name|SqlOperator
name|previous
decl_stmt|;
name|SqlOperator
name|current
init|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|op
decl_stmt|;
name|SqlParserPos
name|currentPos
init|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|pos
decl_stmt|;
if|if
condition|(
operator|(
name|stopperKind
operator|!=
name|SqlKind
operator|.
name|OTHER
operator|)
operator|&&
operator|(
name|current
operator|.
name|getKind
argument_list|()
operator|==
name|stopperKind
operator|)
condition|)
block|{
break|break
name|outer
break|;
block|}
name|SqlOperator
name|next
decl_stmt|;
name|int
name|previousRight
decl_stmt|;
name|int
name|left
init|=
name|current
operator|.
name|getLeftPrec
argument_list|()
decl_stmt|;
name|int
name|right
init|=
name|current
operator|.
name|getRightPrec
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|<
name|minPrec
condition|)
block|{
break|break
name|outer
break|;
block|}
name|int
name|nextLeft
decl_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|SqlBinaryOperator
condition|)
block|{
if|if
condition|(
name|i
operator|==
operator|(
name|start
operator|+
literal|1
operator|)
condition|)
block|{
name|previous
operator|=
literal|null
expr_stmt|;
name|previousRight
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|previous
operator|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
operator|-
literal|2
argument_list|)
operator|)
operator|.
name|op
expr_stmt|;
name|previousRight
operator|=
name|previous
operator|.
name|getRightPrec
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
operator|(
name|count
operator|-
literal|2
operator|)
condition|)
block|{
name|next
operator|=
literal|null
expr_stmt|;
name|nextLeft
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|)
operator|.
name|op
expr_stmt|;
name|nextLeft
operator|=
name|next
operator|.
name|getLeftPrec
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|next
operator|.
name|getKind
argument_list|()
operator|==
name|stopperKind
operator|)
operator|&&
operator|(
name|stopperKind
operator|!=
name|SqlKind
operator|.
name|OTHER
operator|)
condition|)
block|{
comment|// Suppose we're looking at 'AND' in
comment|//    a BETWEEN b OR c AND d
comment|//
comment|// Because 'AND' is our stopper token, we still
comment|// want to reduce 'b OR c', even though 'AND' has
comment|// higher precedence than 'OR'.
name|nextLeft
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|previousRight
operator|<
name|left
operator|)
operator|&&
operator|(
name|right
operator|>=
name|nextLeft
operator|)
condition|)
block|{
comment|// For example,
comment|//    i:  0 1 2 3 4 5 6 7 8
comment|// list:  a + b * c * d + e
comment|// prec: 0 1 2 3 4 3 4 1 2 0
comment|//
comment|// At i == 3, we have the first '*' operator, and its
comment|// surrounding precedences obey the relation 2< 3 and
comment|// 4>= 3, so we can reduce (b * c) to a single node.
name|SqlNode
name|leftExp
init|=
operator|(
name|SqlNode
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// For example,
comment|//    i:  0 1 2 3 4 5 6 7 8
comment|// list:  a + b * c * d + e
comment|// prec: 0 1 2 3 4 3 4 1 2 0
comment|//
comment|// At i == 3, we have the first '*' operator, and its
comment|// surrounding precedences obey the relation 2< 3 and
comment|// 4>= 3, so we can reduce (b * c) to a single node.
name|SqlNode
name|rightExp
init|=
operator|(
name|SqlNode
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|SqlParserPos
name|callPos
init|=
name|currentPos
operator|.
name|plusAll
argument_list|(
operator|new
name|SqlNode
index|[]
block|{
name|leftExp
block|,
name|rightExp
block|}
argument_list|)
decl_stmt|;
specifier|final
name|SqlCall
name|newExp
init|=
name|current
operator|.
name|createCall
argument_list|(
name|callPos
argument_list|,
name|leftExp
argument_list|,
name|rightExp
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
literal|"Reduced infix: "
operator|+
name|newExp
argument_list|)
expr_stmt|;
block|}
comment|// Replace elements {i - 1, i, i + 1} with the new
comment|// expression.
name|replaceSublist
argument_list|(
name|list
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|i
operator|+
literal|2
argument_list|,
name|newExp
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|+=
literal|2
expr_stmt|;
block|}
if|else if
condition|(
name|current
operator|instanceof
name|SqlPostfixOperator
condition|)
block|{
if|if
condition|(
name|i
operator|==
operator|(
name|start
operator|+
literal|1
operator|)
condition|)
block|{
name|previous
operator|=
literal|null
expr_stmt|;
name|previousRight
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|previous
operator|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
operator|-
literal|2
argument_list|)
operator|)
operator|.
name|op
expr_stmt|;
name|previousRight
operator|=
name|previous
operator|.
name|getRightPrec
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|previousRight
operator|<
name|left
condition|)
block|{
comment|// For example,
comment|//    i:  0 1 2 3 4 5 6 7 8
comment|// list:  a + b * c ! + d
comment|// prec: 0 1 2 3 4 3 0 2
comment|//
comment|// At i == 3, we have the postfix '!' operator. Its
comment|// high precedence determines that it binds with 'b *
comment|// c'. The precedence of the following '+' operator is
comment|// irrelevant.
name|SqlNode
name|leftExp
init|=
operator|(
name|SqlNode
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SqlParserPos
name|callPos
init|=
name|currentPos
operator|.
name|plusAll
argument_list|(
operator|new
name|SqlNode
index|[]
block|{
name|leftExp
block|}
argument_list|)
decl_stmt|;
specifier|final
name|SqlCall
name|newExp
init|=
name|current
operator|.
name|createCall
argument_list|(
name|callPos
argument_list|,
name|leftExp
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
literal|"Reduced postfix: "
operator|+
name|newExp
argument_list|)
expr_stmt|;
block|}
comment|// Replace elements {i - 1, i} with the new expression.
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|list
operator|.
name|set
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|newExp
argument_list|)
expr_stmt|;
break|break;
block|}
operator|++
name|i
expr_stmt|;
comment|//
block|}
if|else if
condition|(
name|current
operator|instanceof
name|SqlSpecialOperator
condition|)
block|{
name|SqlSpecialOperator
name|specOp
init|=
operator|(
name|SqlSpecialOperator
operator|)
name|current
decl_stmt|;
comment|// We decide to reduce a special operator only on the basis
comment|// of what's to the left of it. The operator then decides
comment|// how far to the right to chew off.
if|if
condition|(
name|i
operator|==
operator|(
name|start
operator|+
literal|1
operator|)
condition|)
block|{
name|previous
operator|=
literal|null
expr_stmt|;
name|previousRight
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|previous
operator|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
operator|-
literal|2
argument_list|)
operator|)
operator|.
name|op
expr_stmt|;
name|previousRight
operator|=
name|previous
operator|.
name|getRightPrec
argument_list|()
expr_stmt|;
block|}
name|int
name|nextOrdinal
init|=
name|i
operator|+
literal|2
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|(
name|count
operator|-
literal|2
operator|)
condition|)
block|{
name|next
operator|=
literal|null
expr_stmt|;
name|nextLeft
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// find next op
name|next
operator|=
literal|null
expr_stmt|;
name|nextLeft
operator|=
literal|0
expr_stmt|;
for|for
control|(
init|;
name|nextOrdinal
operator|<
name|count
condition|;
name|nextOrdinal
operator|++
control|)
block|{
name|Object
name|listItem
init|=
name|list
operator|.
name|get
argument_list|(
name|nextOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|listItem
operator|instanceof
name|ToTreeListItem
condition|)
block|{
name|next
operator|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|listItem
operator|)
operator|.
name|op
expr_stmt|;
name|nextLeft
operator|=
name|next
operator|.
name|getLeftPrec
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|stopperKind
operator|!=
name|SqlKind
operator|.
name|OTHER
operator|)
operator|&&
operator|(
name|next
operator|.
name|getKind
argument_list|()
operator|==
name|stopperKind
operator|)
condition|)
block|{
break|break
name|outer
break|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|nextLeft
operator|<
name|minPrec
condition|)
block|{
break|break
name|outer
break|;
block|}
if|if
condition|(
operator|(
name|previousRight
operator|<
name|left
operator|)
operator|&&
operator|(
name|right
operator|>=
name|nextLeft
operator|)
condition|)
block|{
name|i
operator|=
name|specOp
operator|.
name|reduceExpr
argument_list|(
name|i
argument_list|,
name|list
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
literal|"Reduced special op: "
operator|+
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|i
operator|=
name|nextOrdinal
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"Unexpected operator type: "
operator|+
name|current
argument_list|)
throw|;
block|}
block|}
comment|// Require the list shrinks each time around -- otherwise we will
comment|// never terminate.
assert|assert
name|list
operator|.
name|size
argument_list|()
operator|<
name|count
assert|;
block|}
return|return
operator|(
name|SqlNode
operator|)
name|list
operator|.
name|get
argument_list|(
name|start
argument_list|)
return|;
block|}
comment|/**    * Checks a UESCAPE string for validity, and returns the escape character if    * no exception is thrown.    *    * @param s UESCAPE string to check    * @return validated escape character    */
specifier|public
specifier|static
name|char
name|checkUnicodeEscapeChar
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|unicodeEscapeCharLength
argument_list|(
name|s
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
operator|||
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
operator|||
operator|(
name|c
operator|==
literal|'+'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'"'
operator|)
operator|||
operator|(
operator|(
name|c
operator|>=
literal|'a'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'f'
operator|)
operator|)
operator|||
operator|(
operator|(
name|c
operator|>=
literal|'A'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'F'
operator|)
operator|)
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|unicodeEscapeCharIllegal
argument_list|(
name|s
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
return|return
name|c
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|public
specifier|static
class|class
name|ParsedCollation
block|{
specifier|private
specifier|final
name|Charset
name|charset
decl_stmt|;
specifier|private
specifier|final
name|Locale
name|locale
decl_stmt|;
specifier|private
specifier|final
name|String
name|strength
decl_stmt|;
specifier|public
name|ParsedCollation
parameter_list|(
name|Charset
name|charset
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|String
name|strength
parameter_list|)
block|{
name|this
operator|.
name|charset
operator|=
name|charset
expr_stmt|;
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
name|this
operator|.
name|strength
operator|=
name|strength
expr_stmt|;
block|}
specifier|public
name|Charset
name|getCharset
parameter_list|()
block|{
return|return
name|charset
return|;
block|}
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
name|locale
return|;
block|}
specifier|public
name|String
name|getStrength
parameter_list|()
block|{
return|return
name|strength
return|;
block|}
block|}
comment|/**    * Class that holds a {@link SqlOperator} and a {@link SqlParserPos}. Used    * by {@link SqlSpecialOperator#reduceExpr} and the parser to associate a    * parsed operator with a parser position.    */
specifier|public
specifier|static
class|class
name|ToTreeListItem
block|{
specifier|private
specifier|final
name|SqlOperator
name|op
decl_stmt|;
specifier|private
specifier|final
name|SqlParserPos
name|pos
decl_stmt|;
specifier|public
name|ToTreeListItem
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|op
return|;
block|}
specifier|public
name|SqlParserPos
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
block|}
comment|/**    * Contains a string, the offset of a token within the string, and a parser    * position containing the beginning and end line number.    */
specifier|public
specifier|static
class|class
name|StringAndPos
block|{
specifier|public
specifier|final
name|String
name|sql
decl_stmt|;
specifier|public
specifier|final
name|int
name|cursor
decl_stmt|;
specifier|public
specifier|final
name|SqlParserPos
name|pos
decl_stmt|;
name|StringAndPos
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|cursor
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|cursor
operator|=
name|cursor
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlParserUtil.java
end_comment

end_unit

