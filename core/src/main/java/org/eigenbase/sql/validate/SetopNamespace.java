begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resource
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Namespace based upon a set operation (UNION, INTERSECT, EXCEPT).  */
end_comment

begin_class
specifier|public
class|class
name|SetopNamespace
extends|extends
name|AbstractNamespace
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlCall
name|call
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a<code>SetopNamespace</code>.      *      * @param validator Validator      * @param call Call to set operator      * @param enclosingNode Enclosing node      */
specifier|protected
name|SetopNamespace
parameter_list|(
name|SqlValidatorImpl
name|validator
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|SqlNode
name|enclosingNode
parameter_list|)
block|{
name|super
argument_list|(
name|validator
argument_list|,
name|enclosingNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|call
operator|=
name|call
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlNode
name|getNode
parameter_list|()
block|{
return|return
name|call
return|;
block|}
specifier|public
name|RelDataType
name|validateImpl
parameter_list|()
block|{
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|UNION
case|:
case|case
name|INTERSECT
case|:
case|case
name|EXCEPT
case|:
specifier|final
name|SqlValidatorScope
name|scope
init|=
name|validator
operator|.
name|scopes
operator|.
name|get
argument_list|(
name|call
argument_list|)
decl_stmt|;
for|for
control|(
name|SqlNode
name|operand
range|:
name|call
operator|.
name|operands
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|operand
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|QUERY
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|operand
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|NeedQueryOp
operator|.
name|ex
argument_list|(
name|operand
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|validator
operator|.
name|validateQuery
argument_list|(
name|operand
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
return|return
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|validateOperands
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|call
argument_list|)
return|;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"Not a query: "
operator|+
name|call
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SetopNamespace.java
end_comment

end_unit

