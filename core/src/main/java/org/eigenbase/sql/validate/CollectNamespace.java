begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Namespace for COLLECT and TABLE constructs.  *  *<p>Examples:  *  *<ul>  *<li><code>SELECT deptno, COLLECT(empno) FROM emp GROUP BY deptno</code>,  *<li><code>SELECT * FROM (TABLE getEmpsInDept(30))</code>.  *</ul>  *  *<p>NOTE: jhyde, 2006/4/24: These days, this class seems to be used  * exclusively for the<code>MULTISET</code> construct.  *  * @see CollectScope  */
end_comment

begin_class
specifier|public
class|class
name|CollectNamespace
extends|extends
name|AbstractNamespace
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlCall
name|child
decl_stmt|;
specifier|private
specifier|final
name|SqlValidatorScope
name|scope
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a CollectNamespace.    *    * @param child         Parse tree node    * @param scope         Scope    * @param enclosingNode Enclosing parse tree node    */
name|CollectNamespace
parameter_list|(
name|SqlCall
name|child
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlNode
name|enclosingNode
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|SqlValidatorImpl
operator|)
name|scope
operator|.
name|getValidator
argument_list|()
argument_list|,
name|enclosingNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|child
operator|=
name|child
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|protected
name|RelDataType
name|validateImpl
parameter_list|()
block|{
specifier|final
name|RelDataType
name|type
init|=
name|child
operator|.
name|getOperator
argument_list|()
operator|.
name|deriveType
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|child
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|MULTISET_VALUE_CONSTRUCTOR
case|:
comment|// "MULTISET [<expr>, ...]" needs to be wrapped in a record if
comment|//<expr> has a scalar type.
comment|// For example, "MULTISET [8, 9]" has type
comment|// "RECORD(INTEGER EXPR$0 NOT NULL) NOT NULL MULTISET NOT NULL".
name|boolean
name|isNullable
init|=
name|type
operator|.
name|isNullable
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|componentType
init|=
operator|(
operator|(
name|MultisetSqlType
operator|)
name|type
operator|)
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|validator
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentType
operator|.
name|isStruct
argument_list|()
condition|)
block|{
return|return
name|type
return|;
block|}
else|else
block|{
specifier|final
name|RelDataType
name|structType
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
operator|new
name|RelDataType
index|[]
block|{
name|type
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|validator
operator|.
name|deriveAlias
argument_list|(
name|child
argument_list|,
literal|0
argument_list|)
block|}
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|multisetType
init|=
name|typeFactory
operator|.
name|createMultisetType
argument_list|(
name|structType
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|multisetType
argument_list|,
name|isNullable
argument_list|)
return|;
block|}
case|case
name|MULTISET_QUERY_CONSTRUCTOR
case|:
comment|// "MULTISET(<query>)" is already a record.
assert|assert
operator|(
name|type
operator|instanceof
name|MultisetSqlType
operator|)
operator|&&
operator|(
operator|(
name|MultisetSqlType
operator|)
name|type
operator|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|isStruct
argument_list|()
operator|:
name|type
assert|;
return|return
name|type
return|;
default|default:
throw|throw
name|Util
operator|.
name|unexpected
argument_list|(
name|child
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|SqlNode
name|getNode
parameter_list|()
block|{
return|return
name|child
return|;
block|}
specifier|public
name|SqlValidatorScope
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
block|}
end_class

begin_comment
comment|// End CollectNamespace.java
end_comment

end_unit

