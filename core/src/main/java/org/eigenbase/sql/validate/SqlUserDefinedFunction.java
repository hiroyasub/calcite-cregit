begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|NlsString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_comment
comment|/** * User-defined function.  *  *<p>Created by the validator, after resolving a function call to a function  * defined in an Optiq schema.</p> */
end_comment

begin_class
specifier|public
class|class
name|SqlUserDefinedFunction
extends|extends
name|SqlFunction
block|{
specifier|public
specifier|final
name|Function
name|function
decl_stmt|;
specifier|public
name|SqlUserDefinedFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|RelDataType
name|returnType
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argTypes
parameter_list|,
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|typeFamilies
parameter_list|,
name|Function
name|function
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
name|ReturnTypes
operator|.
name|explicit
argument_list|(
name|returnType
argument_list|)
argument_list|,
operator|new
name|ExplicitOperandTypeInference
argument_list|(
name|argTypes
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|typeFamilies
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
block|}
comment|/** Returns the table in this UDF, or null if there is no table. */
specifier|public
name|Table
name|getTable
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operandList
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|function
operator|instanceof
name|TableMacro
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|TableMacro
name|tableMacro
init|=
operator|(
name|TableMacro
operator|)
name|function
decl_stmt|;
comment|// Construct a list of arguments, if they are all constants.
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|FunctionParameter
argument_list|,
name|SqlNode
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|tableMacro
operator|.
name|getParameters
argument_list|()
argument_list|,
name|operandList
argument_list|)
control|)
block|{
if|if
condition|(
name|SqlUtil
operator|.
name|isNullLiteral
argument_list|(
name|pair
operator|.
name|right
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|pair
operator|.
name|right
argument_list|)
condition|)
block|{
specifier|final
name|Object
name|o
init|=
operator|(
operator|(
name|SqlLiteral
operator|)
name|pair
operator|.
name|right
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|o2
init|=
name|coerce
argument_list|(
name|o
argument_list|,
name|pair
operator|.
name|left
operator|.
name|getType
argument_list|(
name|typeFactory
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// not suitable type
block|}
name|arguments
operator|.
name|add
argument_list|(
name|o2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not all operands are constants. Cannot expand table macro.
return|return
literal|null
return|;
block|}
block|}
return|return
name|tableMacro
operator|.
name|apply
argument_list|(
name|arguments
argument_list|)
return|;
block|}
specifier|private
name|Object
name|coerce
parameter_list|(
name|Object
name|o
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|type
operator|instanceof
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
name|javaType
init|=
operator|(
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
operator|)
name|type
decl_stmt|;
specifier|final
name|Class
name|clazz
init|=
name|javaType
operator|.
name|getJavaClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
name|o
return|;
block|}
if|if
condition|(
name|clazz
operator|==
name|String
operator|.
name|class
operator|&&
name|o
operator|instanceof
name|NlsString
condition|)
block|{
return|return
operator|(
operator|(
name|NlsString
operator|)
name|o
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlUserDefinedFunction.java
end_comment

end_unit

