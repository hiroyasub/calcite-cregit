begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A generic implementation of {@link SqlMoniker}.  */
end_comment

begin_class
specifier|public
class|class
name|SqlMonikerImpl
implements|implements
name|SqlMoniker
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|String
index|[]
name|names
decl_stmt|;
specifier|private
specifier|final
name|SqlMonikerType
name|type
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates a moniker with an array of names.      */
specifier|public
name|SqlMonikerImpl
parameter_list|(
name|String
index|[]
name|names
parameter_list|,
name|SqlMonikerType
name|type
parameter_list|)
block|{
assert|assert
name|names
operator|!=
literal|null
assert|;
assert|assert
name|type
operator|!=
literal|null
assert|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
block|}
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Creates a moniker with a single name.      */
specifier|public
name|SqlMonikerImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlMonikerType
name|type
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|String
index|[]
block|{
name|name
block|}
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlMonikerType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
index|[]
name|getFullyQualifiedNames
parameter_list|()
block|{
return|return
name|names
return|;
block|}
specifier|public
name|SqlIdentifier
name|toIdentifier
parameter_list|()
block|{
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|names
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|id
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlMonikerImpl.java
end_comment

end_unit

