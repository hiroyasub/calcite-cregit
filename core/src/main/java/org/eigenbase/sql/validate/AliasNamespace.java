begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resource
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Namespace for an<code>AS t(c1, c2, ...)</code> clause.  *  *<p>A namespace is necessary only if there is a column list, in order to  * re-map column names; a<code>relation AS t</code> clause just uses the same  * namespace as<code>relation</code>.  */
end_comment

begin_class
specifier|public
class|class
name|AliasNamespace
extends|extends
name|AbstractNamespace
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|SqlCall
name|call
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates an AliasNamespace.    *    * @param validator     Validator    * @param call          Call to AS operator    * @param enclosingNode Enclosing node    */
specifier|protected
name|AliasNamespace
parameter_list|(
name|SqlValidatorImpl
name|validator
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|SqlNode
name|enclosingNode
parameter_list|)
block|{
name|super
argument_list|(
name|validator
argument_list|,
name|enclosingNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|call
operator|=
name|call
expr_stmt|;
assert|assert
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|SqlStdOperatorTable
operator|.
name|AS
assert|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|protected
name|RelDataType
name|validateImpl
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|SqlValidatorNamespace
name|childNs
init|=
name|validator
operator|.
name|getNamespace
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|childNs
operator|.
name|getRowTypeSansSystemColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|SqlNode
name|operand
init|=
name|call
operator|.
name|getOperands
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|String
name|name
init|=
operator|(
operator|(
name|SqlIdentifier
operator|)
name|operand
operator|)
operator|.
name|getSimple
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameList
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|operand
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|AliasListDuplicate
operator|.
name|ex
argument_list|(
name|name
argument_list|)
argument_list|)
throw|;
block|}
name|nameList
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nameList
operator|.
name|size
argument_list|()
operator|!=
name|rowType
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
comment|// Position error at first name in list.
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
index|[
literal|2
index|]
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|AliasListDegree
operator|.
name|ex
argument_list|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|getString
argument_list|(
name|rowType
argument_list|)
argument_list|,
name|nameList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|typeList
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|typeList
operator|.
name|add
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|validator
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|typeList
argument_list|,
name|nameList
argument_list|)
return|;
block|}
specifier|private
name|String
name|getString
parameter_list|(
name|RelDataType
name|rowType
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|SqlNode
name|getNode
parameter_list|()
block|{
return|return
name|call
return|;
block|}
specifier|public
name|String
name|translate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|RelDataType
name|underlyingRowType
init|=
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|underlyingRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown field '"
operator|+
name|name
operator|+
literal|"' in rowtype "
operator|+
name|underlyingRowType
argument_list|)
throw|;
block|}
block|}
end_class

begin_comment
comment|// End AliasNamespace.java
end_comment

end_unit

