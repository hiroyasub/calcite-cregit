begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * ReflectiveSqlOperatorTable implements the {@link SqlOperatorTable } interface  * by reflecting the public fields of a subclass.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ReflectiveSqlOperatorTable
implements|implements
name|SqlOperatorTable
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|MultiMap
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
name|operators
init|=
operator|new
name|MultiMap
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
name|mapNameToOp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|ReflectiveSqlOperatorTable
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Performs post-constructor initialization of an operator table. It can't      * be part of the constructor, because the subclass constructor needs to      * complete first.      */
specifier|public
specifier|final
name|void
name|init
parameter_list|()
block|{
comment|// Use reflection to register the expressions stored in public fields.
name|Field
index|[]
name|fields
init|=
name|getClass
argument_list|()
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Field
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|SqlFunction
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|SqlFunction
name|op
init|=
operator|(
name|SqlFunction
operator|)
name|field
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
name|register
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SqlOperator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|SqlOperator
name|op
init|=
operator|(
name|SqlOperator
operator|)
name|field
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"Error while initializing operator table"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
name|e
argument_list|,
literal|"Error while initializing operator table"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// implement SqlOperatorTable
specifier|public
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|lookupOperatorOverloads
parameter_list|(
name|SqlIdentifier
name|opName
parameter_list|,
name|SqlFunctionCategory
name|category
parameter_list|,
name|SqlSyntax
name|syntax
parameter_list|)
block|{
comment|// NOTE jvs 3-Mar-2005:  ignore category until someone cares
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|overloads
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlOperator
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|simpleName
decl_stmt|;
if|if
condition|(
name|opName
operator|.
name|names
operator|.
name|length
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|opName
operator|.
name|names
index|[
name|opName
operator|.
name|names
operator|.
name|length
operator|-
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|"INFORMATION_SCHEMA"
argument_list|)
condition|)
block|{
comment|// per SQL99 Part 2 Section 10.4 Syntax Rule 7.b.ii.1
name|simpleName
operator|=
name|opName
operator|.
name|names
index|[
name|opName
operator|.
name|names
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
return|return
name|overloads
return|;
block|}
block|}
else|else
block|{
name|simpleName
operator|=
name|opName
operator|.
name|getSimple
argument_list|()
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|list
init|=
name|operators
operator|.
name|getMulti
argument_list|(
name|simpleName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|list
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|SqlOperator
name|op
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getSyntax
argument_list|()
operator|==
name|syntax
condition|)
block|{
name|overloads
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|syntax
operator|==
name|SqlSyntax
operator|.
name|Function
operator|)
operator|&&
operator|(
name|op
operator|instanceof
name|SqlFunction
operator|)
condition|)
block|{
comment|// this special case is needed for operators like CAST,
comment|// which are treated as functions but have special syntax
name|overloads
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|// REVIEW jvs 1-Jan-2005:  why is this extra lookup required?
comment|// Shouldn't it be covered by search above?
name|SqlOperator
name|extra
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|syntax
condition|)
block|{
case|case
name|Binary
case|:
name|extra
operator|=
name|mapNameToOp
operator|.
name|get
argument_list|(
name|simpleName
operator|+
literal|":BINARY"
argument_list|)
expr_stmt|;
case|case
name|Prefix
case|:
name|extra
operator|=
name|mapNameToOp
operator|.
name|get
argument_list|(
name|simpleName
operator|+
literal|":PREFIX"
argument_list|)
expr_stmt|;
case|case
name|Postfix
case|:
name|extra
operator|=
name|mapNameToOp
operator|.
name|get
argument_list|(
name|simpleName
operator|+
literal|":POSTFIX"
argument_list|)
expr_stmt|;
default|default:
break|break;
block|}
if|if
condition|(
operator|(
name|extra
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|overloads
operator|.
name|contains
argument_list|(
name|extra
argument_list|)
condition|)
block|{
name|overloads
operator|.
name|add
argument_list|(
name|extra
argument_list|)
expr_stmt|;
block|}
return|return
name|overloads
return|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|SqlOperator
name|op
parameter_list|)
block|{
name|operators
operator|.
name|putMulti
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|SqlBinaryOperator
condition|)
block|{
name|mapNameToOp
operator|.
name|put
argument_list|(
name|op
operator|.
name|getName
argument_list|()
operator|+
literal|":BINARY"
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|op
operator|instanceof
name|SqlPrefixOperator
condition|)
block|{
name|mapNameToOp
operator|.
name|put
argument_list|(
name|op
operator|.
name|getName
argument_list|()
operator|+
literal|":PREFIX"
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|op
operator|instanceof
name|SqlPostfixOperator
condition|)
block|{
name|mapNameToOp
operator|.
name|put
argument_list|(
name|op
operator|.
name|getName
argument_list|()
operator|+
literal|":POSTFIX"
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Registers a function in the table.      *      * @param function Function to register      */
specifier|public
name|void
name|register
parameter_list|(
name|SqlFunction
name|function
parameter_list|)
block|{
name|operators
operator|.
name|putMulti
argument_list|(
name|function
operator|.
name|getName
argument_list|()
argument_list|,
name|function
argument_list|)
expr_stmt|;
name|SqlFunctionCategory
name|funcType
init|=
name|function
operator|.
name|getFunctionType
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|funcType
operator|!=
literal|null
operator|)
operator|:
literal|"Function type for "
operator|+
name|function
operator|.
name|getName
argument_list|()
operator|+
literal|" not set"
assert|;
block|}
comment|// implement SqlOperatorTable
specifier|public
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|getOperatorList
parameter_list|()
block|{
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlOperator
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
argument_list|>
name|it
init|=
name|operators
operator|.
name|entryIterMulti
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
end_class

begin_comment
comment|// End ReflectiveSqlOperatorTable.java
end_comment

end_unit

