begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resource
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * An operator describing a window specification.  *  *<p>Operands are as follows:</p>  *  *<ul>  *<li>0: name of referenced window ({@link SqlIdentifier})</li>  *<li>1: partition clause ({@link SqlNodeList})</li>  *<li>2: order clause ({@link SqlNodeList})</li>  *<li>3: isRows ({@link SqlLiteral})</li>  *<li>4: lowerBound ({@link SqlNode})</li>  *<li>5: upperBound ({@link SqlNode})</li>  *</ul>  *  *<p>All operands are optional.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SqlWindowOperator
extends|extends
name|SqlOperator
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * The FOLLOWING operator used exclusively in a window specification.    */
specifier|static
specifier|final
name|SqlPostfixOperator
name|followingOperator
init|=
operator|new
name|SqlPostfixOperator
argument_list|(
literal|"FOLLOWING"
argument_list|,
name|SqlKind
operator|.
name|FOLLOWING
argument_list|,
literal|20
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    * The PRECEDING operator used exclusively in a window specification.    */
specifier|static
specifier|final
name|SqlPostfixOperator
name|precedingOperator
init|=
operator|new
name|SqlPostfixOperator
argument_list|(
literal|"PRECEDING"
argument_list|,
name|SqlKind
operator|.
name|PRECEDING
argument_list|,
literal|20
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//~ Enums ------------------------------------------------------------------
comment|/**    * An enumeration of types of bounds in a window:<code>CURRENT ROW</code>,    *<code>UNBOUNDED PRECEDING</code>, and<code>UNBOUNDED FOLLOWING</code>.    */
enum|enum
name|Bound
implements|implements
name|SqlLiteral
operator|.
name|SqlSymbol
block|{
name|CURRENT_ROW
argument_list|(
literal|"CURRENT ROW"
argument_list|)
block|,
name|UNBOUNDED_PRECEDING
argument_list|(
literal|"UNBOUNDED PRECEDING"
argument_list|)
block|,
name|UNBOUNDED_FOLLOWING
argument_list|(
literal|"UNBOUNDED FOLLOWING"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
name|Bound
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sql
return|;
block|}
comment|/**      * Creates a parse-tree node representing an occurrence of this bound      * type at a particular position in the parsed text.      */
specifier|public
name|SqlNode
name|symbol
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|this
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlWindowOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"WINDOW"
argument_list|,
name|SqlKind
operator|.
name|WINDOW
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlSyntax
name|getSyntax
parameter_list|()
block|{
return|return
name|SqlSyntax
operator|.
name|Special
return|;
block|}
specifier|public
name|SqlCall
name|createCall
parameter_list|(
name|SqlLiteral
name|functionQualifier
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
name|SqlNode
modifier|...
name|operands
parameter_list|)
block|{
assert|assert
name|functionQualifier
operator|==
literal|null
assert|;
return|return
operator|new
name|SqlWindow
argument_list|(
name|this
argument_list|,
name|operands
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
name|SqlWindow
name|createCall
parameter_list|(
name|SqlIdentifier
name|declName
parameter_list|,
name|SqlIdentifier
name|refName
parameter_list|,
name|SqlNodeList
name|partitionList
parameter_list|,
name|SqlNodeList
name|orderList
parameter_list|,
name|SqlLiteral
name|isRows
parameter_list|,
name|SqlNode
name|lowerBound
parameter_list|,
name|SqlNode
name|upperBound
parameter_list|,
name|SqlLiteral
name|allowPartial
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
comment|// If there's only one bound and it's 'FOLLOWING', make it the upper
comment|// bound.
if|if
condition|(
operator|(
name|upperBound
operator|==
literal|null
operator|)
operator|&&
operator|(
name|lowerBound
operator|!=
literal|null
operator|)
operator|&&
name|lowerBound
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FOLLOWING
condition|)
block|{
name|upperBound
operator|=
name|lowerBound
expr_stmt|;
name|lowerBound
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|(
name|SqlWindow
operator|)
name|createCall
argument_list|(
name|pos
argument_list|,
name|declName
argument_list|,
name|refName
argument_list|,
name|partitionList
argument_list|,
name|orderList
argument_list|,
name|isRows
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|allowPartial
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|acceptCall
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|boolean
name|onlyExpressions
parameter_list|,
name|SqlBasicVisitor
operator|.
name|ArgHandler
argument_list|<
name|R
argument_list|>
name|argHandler
parameter_list|)
block|{
if|if
condition|(
name|onlyExpressions
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|call
operator|.
name|operands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SqlNode
name|operand
init|=
name|call
operator|.
name|operands
index|[
name|i
index|]
decl_stmt|;
comment|// if the second parm is an Identifier then it's supposed to
comment|// be a name from a window clause and isn't part of the
comment|// group by check
if|if
condition|(
name|operand
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|i
operator|==
name|SqlWindow
operator|.
name|RefName_OPERAND
operator|)
operator|&&
operator|(
name|operand
operator|instanceof
name|SqlIdentifier
operator|)
condition|)
block|{
continue|continue;
block|}
name|argHandler
operator|.
name|visitChild
argument_list|(
name|visitor
argument_list|,
name|call
argument_list|,
name|i
argument_list|,
name|operand
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|acceptCall
argument_list|(
name|visitor
argument_list|,
name|call
argument_list|,
name|onlyExpressions
argument_list|,
name|argHandler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|Window
argument_list|,
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
name|SqlIdentifier
name|refName
init|=
operator|(
name|SqlIdentifier
operator|)
name|operands
index|[
name|SqlWindow
operator|.
name|RefName_OPERAND
index|]
decl_stmt|;
if|if
condition|(
name|refName
operator|!=
literal|null
condition|)
block|{
name|refName
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|SqlNodeList
name|partitionList
init|=
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlWindow
operator|.
name|PartitionList_OPERAND
index|]
decl_stmt|;
if|if
condition|(
name|partitionList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"PARTITION BY"
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|partitionFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|partitionList
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|partitionFrame
argument_list|)
expr_stmt|;
block|}
name|SqlNodeList
name|orderList
init|=
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlWindow
operator|.
name|OrderList_OPERAND
index|]
decl_stmt|;
if|if
condition|(
name|orderList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ORDER BY"
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|orderFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|orderList
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|orderFrame
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isRows
init|=
name|SqlLiteral
operator|.
name|booleanValue
argument_list|(
name|operands
index|[
name|SqlWindow
operator|.
name|IsRows_OPERAND
index|]
argument_list|)
decl_stmt|;
name|SqlNode
name|lowerBound
init|=
name|operands
index|[
name|SqlWindow
operator|.
name|LowerBound_OPERAND
index|]
decl_stmt|,
name|upperBound
init|=
name|operands
index|[
name|SqlWindow
operator|.
name|UpperBound_OPERAND
index|]
decl_stmt|;
if|if
condition|(
name|lowerBound
operator|==
literal|null
condition|)
block|{
comment|// No ROWS or RANGE clause
block|}
if|else if
condition|(
name|upperBound
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isRows
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ROWS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"RANGE"
argument_list|)
expr_stmt|;
block|}
name|lowerBound
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isRows
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ROWS BETWEEN"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"RANGE BETWEEN"
argument_list|)
expr_stmt|;
block|}
name|lowerBound
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"AND"
argument_list|)
expr_stmt|;
name|upperBound
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// ALLOW PARTIAL/DISALLOW PARTIAL
name|SqlNode
name|allowPartial
init|=
name|operands
index|[
name|SqlWindow
operator|.
name|AllowPartial_OPERAND
index|]
decl_stmt|;
if|if
condition|(
name|allowPartial
operator|==
literal|null
condition|)
block|{
empty_stmt|;
block|}
if|else if
condition|(
name|SqlLiteral
operator|.
name|booleanValue
argument_list|(
name|allowPartial
argument_list|)
condition|)
block|{
comment|// We could output "ALLOW PARTIAL", but this syntax is
comment|// non-standard. Omitting the clause has the same effect.
empty_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"DISALLOW PARTIAL"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validateCall
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlValidatorScope
name|operandScope
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|this
assert|;
specifier|final
name|SqlWindow
name|window
init|=
operator|(
name|SqlWindow
operator|)
name|call
decl_stmt|;
specifier|final
name|SqlCall
name|windowCall
init|=
name|window
operator|.
name|getWindowCall
argument_list|()
decl_stmt|;
name|SqlNode
index|[]
name|operands
init|=
name|call
operator|.
name|operands
decl_stmt|;
comment|//        operandScope = validator.getScope(operands[0]);
name|SqlIdentifier
name|refName
init|=
operator|(
name|SqlIdentifier
operator|)
name|operands
index|[
name|SqlWindow
operator|.
name|RefName_OPERAND
index|]
decl_stmt|;
if|if
condition|(
name|refName
operator|!=
literal|null
condition|)
block|{
name|SqlWindow
name|win
init|=
name|validator
operator|.
name|resolveWindow
argument_list|(
name|call
argument_list|,
name|operandScope
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|operands
operator|=
name|win
operator|.
name|operands
expr_stmt|;
block|}
name|SqlNodeList
name|partitionList
init|=
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlWindow
operator|.
name|PartitionList_OPERAND
index|]
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|partitionList
condition|)
block|{
if|if
condition|(
literal|0
operator|!=
name|partitionList
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SqlNode
name|partitionItem
init|=
name|partitionList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|partitionItem
operator|.
name|validateExpr
argument_list|(
name|validator
argument_list|,
name|operandScope
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|partitionList
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|SqlNodeList
name|orderList
init|=
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlWindow
operator|.
name|OrderList_OPERAND
index|]
decl_stmt|;
if|if
condition|(
name|orderList
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|0
operator|!=
name|orderList
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orderList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SqlNode
name|orderItem
init|=
name|orderList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|savedColumnReferenceExpansion
init|=
name|validator
operator|.
name|getColumnReferenceExpansion
argument_list|()
decl_stmt|;
name|validator
operator|.
name|setColumnReferenceExpansion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|orderItem
operator|.
name|validateExpr
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|validator
operator|.
name|setColumnReferenceExpansion
argument_list|(
name|savedColumnReferenceExpansion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// list is empty so reset the base reference to null so
comment|// we don't need to keep checking two conditions
name|orderList
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|boolean
name|isRows
init|=
name|SqlLiteral
operator|.
name|booleanValue
argument_list|(
name|operands
index|[
name|SqlWindow
operator|.
name|IsRows_OPERAND
index|]
argument_list|)
decl_stmt|;
name|SqlNode
name|lowerBound
init|=
name|operands
index|[
name|SqlWindow
operator|.
name|LowerBound_OPERAND
index|]
decl_stmt|,
name|upperBound
init|=
name|operands
index|[
name|SqlWindow
operator|.
name|UpperBound_OPERAND
index|]
decl_stmt|;
name|boolean
name|triggerFunction
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|windowCall
condition|)
block|{
if|if
condition|(
name|windowCall
operator|.
name|isName
argument_list|(
literal|"RANK"
argument_list|)
operator|||
name|windowCall
operator|.
name|isName
argument_list|(
literal|"DENSE_RANK"
argument_list|)
condition|)
block|{
name|triggerFunction
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// 6.10 rule 6a Function RANk& DENSE_RANK require OBC
if|if
condition|(
operator|(
literal|null
operator|==
name|orderList
operator|)
operator|&&
name|triggerFunction
operator|&&
operator|!
name|isTableSorted
argument_list|(
name|scope
argument_list|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|FuncNeedsOrderBy
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
comment|// Run framing checks if there are any
if|if
condition|(
operator|(
literal|null
operator|!=
name|upperBound
operator|)
operator|||
operator|(
literal|null
operator|!=
name|lowerBound
operator|)
condition|)
block|{
comment|// 6.10 Rule 6a
if|if
condition|(
name|triggerFunction
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|operands
index|[
name|SqlWindow
operator|.
name|IsRows_OPERAND
index|]
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|RankWithFrame
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
name|SqlTypeFamily
name|orderTypeFam
init|=
literal|null
decl_stmt|;
comment|// SQL03 7.10 Rule 11a
if|if
condition|(
literal|null
operator|!=
name|orderList
condition|)
block|{
comment|// if order by is a conpound list then range not allowed
if|if
condition|(
operator|(
name|orderList
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
operator|&&
operator|!
name|isRows
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|operands
index|[
name|SqlWindow
operator|.
name|IsRows_OPERAND
index|]
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|CompoundOrderByProhibitsRange
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
comment|// get the type family for the sort key for Frame Boundary Val.
name|RelDataType
name|orderType
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|operandScope
argument_list|,
name|orderList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|orderTypeFam
operator|=
name|SqlTypeFamily
operator|.
name|getFamilyForSqlType
argument_list|(
name|orderType
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// requires an ORDER BY clause if frame is logical(RANGE)
comment|// We relax this requirment if the table appears to be
comment|// sorted already
if|if
condition|(
operator|!
name|isRows
operator|&&
operator|!
name|isTableSorted
argument_list|(
name|scope
argument_list|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|OverMissingOrderBy
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Let the bounds validate themselves
name|validateFrameBoundary
argument_list|(
name|lowerBound
argument_list|,
name|isRows
argument_list|,
name|orderTypeFam
argument_list|,
name|validator
argument_list|,
name|operandScope
argument_list|)
expr_stmt|;
name|validateFrameBoundary
argument_list|(
name|upperBound
argument_list|,
name|isRows
argument_list|,
name|orderTypeFam
argument_list|,
name|validator
argument_list|,
name|operandScope
argument_list|)
expr_stmt|;
comment|// Validate across boundries. 7.10 Rule 8 a-d
name|checkSpecialLiterals
argument_list|(
name|window
argument_list|,
name|validator
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
literal|null
operator|==
name|orderList
operator|)
operator|&&
operator|!
name|isTableSorted
argument_list|(
name|scope
argument_list|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|OverMissingOrderBy
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
name|SqlNode
name|allowPartialOperand
init|=
name|operands
index|[
name|SqlWindow
operator|.
name|AllowPartial_OPERAND
index|]
decl_stmt|;
name|boolean
name|allowPartial
init|=
operator|(
name|allowPartialOperand
operator|==
literal|null
operator|)
operator|||
name|SqlLiteral
operator|.
name|booleanValue
argument_list|(
name|allowPartialOperand
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isRows
operator|&&
operator|!
name|allowPartial
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|allowPartialOperand
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|CannotUseDisallowPartialWithRange
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|validateFrameBoundary
parameter_list|(
name|SqlNode
name|bound
parameter_list|,
name|boolean
name|isRows
parameter_list|,
name|SqlTypeFamily
name|orderTypeFam
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|bound
condition|)
block|{
return|return;
block|}
name|bound
operator|.
name|validate
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|bound
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
comment|// is there really anything to validate here? this covers
comment|// "CURRENT_ROW","unbounded preceding"& "unbounded following"
break|break;
case|case
name|OTHER
case|:
case|case
name|FOLLOWING
case|:
case|case
name|PRECEDING
case|:
assert|assert
operator|(
name|bound
operator|instanceof
name|SqlCall
operator|)
assert|;
specifier|final
name|SqlNode
name|boundVal
init|=
operator|(
operator|(
name|SqlCall
operator|)
name|bound
operator|)
operator|.
name|getOperands
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Boundries must be a constant
if|if
condition|(
operator|!
operator|(
name|boundVal
operator|instanceof
name|SqlLiteral
operator|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|RangeOrRowMustBeConstant
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
comment|// SQL03 7.10 rule 11b Physical ROWS must be a numeric constant. JR:
comment|// actually it's SQL03 7.11 rule 11b "exact numeric with scale 0"
comment|// means not only numeric constant but exact numeric integral
comment|// constant. We also interpret the spec. to not allow negative
comment|// values, but allow zero.
if|if
condition|(
name|isRows
condition|)
block|{
if|if
condition|(
name|boundVal
operator|instanceof
name|SqlNumericLiteral
condition|)
block|{
specifier|final
name|SqlNumericLiteral
name|boundLiteral
init|=
operator|(
name|SqlNumericLiteral
operator|)
name|boundVal
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|boundLiteral
operator|.
name|isExact
argument_list|()
operator|)
operator|||
operator|(
name|boundLiteral
operator|.
name|getScale
argument_list|()
operator|!=
literal|0
operator|)
operator|||
operator|(
literal|0
operator|>
name|boundLiteral
operator|.
name|longValue
argument_list|(
literal|true
argument_list|)
operator|)
condition|)
block|{
comment|// true == throw if not exact (we just tested that - right?)
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|RowMustBeNonNegativeIntegral
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|RowMustBeNonNegativeIntegral
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// if this is a range spec check and make sure the boundery type
comment|// and order by type are compatible
if|if
condition|(
operator|(
literal|null
operator|!=
name|orderTypeFam
operator|)
operator|&&
operator|!
name|isRows
condition|)
block|{
name|RelDataType
name|bndType
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
name|boundVal
argument_list|)
decl_stmt|;
name|SqlTypeFamily
name|bndTypeFam
init|=
name|SqlTypeFamily
operator|.
name|getFamilyForSqlType
argument_list|(
name|bndType
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|orderTypeFam
condition|)
block|{
case|case
name|NUMERIC
case|:
if|if
condition|(
name|SqlTypeFamily
operator|.
name|NUMERIC
operator|!=
name|bndTypeFam
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|OrderByRangeMismatch
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
if|if
condition|(
operator|(
name|SqlTypeFamily
operator|.
name|INTERVAL_DAY_TIME
operator|!=
name|bndTypeFam
operator|)
operator|&&
operator|(
name|SqlTypeFamily
operator|.
name|INTERVAL_YEAR_MONTH
operator|!=
name|bndTypeFam
operator|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|OrderByRangeMismatch
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|OrderByDataTypeProhibitsRange
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"Unexpected node type"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkSpecialLiterals
parameter_list|(
name|SqlWindow
name|window
parameter_list|,
name|SqlValidator
name|validator
parameter_list|)
block|{
specifier|final
name|SqlNode
name|lowerBound
init|=
name|window
operator|.
name|getLowerBound
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|upperBound
init|=
name|window
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
name|Object
name|lowerLitType
init|=
literal|null
decl_stmt|;
name|Object
name|upperLitType
init|=
literal|null
decl_stmt|;
name|SqlOperator
name|lowerOp
init|=
literal|null
decl_stmt|;
name|SqlOperator
name|upperOp
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|lowerBound
condition|)
block|{
if|if
condition|(
name|lowerBound
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
name|lowerLitType
operator|=
operator|(
operator|(
name|SqlLiteral
operator|)
name|lowerBound
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|Bound
operator|.
name|UNBOUNDED_FOLLOWING
operator|==
name|lowerLitType
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|lowerBound
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|BadLowerBoundary
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|lowerBound
operator|instanceof
name|SqlCall
condition|)
block|{
name|lowerOp
operator|=
operator|(
operator|(
name|SqlCall
operator|)
name|lowerBound
operator|)
operator|.
name|getOperator
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|upperBound
condition|)
block|{
if|if
condition|(
name|upperBound
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
name|upperLitType
operator|=
operator|(
operator|(
name|SqlLiteral
operator|)
name|upperBound
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|Bound
operator|.
name|UNBOUNDED_PRECEDING
operator|==
name|upperLitType
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|upperBound
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|BadUpperBoundary
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|upperBound
operator|instanceof
name|SqlCall
condition|)
block|{
name|upperOp
operator|=
operator|(
operator|(
name|SqlCall
operator|)
name|upperBound
operator|)
operator|.
name|getOperator
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Bound
operator|.
name|CURRENT_ROW
operator|==
name|lowerLitType
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|upperOp
condition|)
block|{
if|if
condition|(
name|upperOp
operator|==
name|precedingOperator
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|upperBound
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|CurrentRowPrecedingError
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|else if
condition|(
literal|null
operator|!=
name|lowerOp
condition|)
block|{
if|if
condition|(
name|lowerOp
operator|==
name|followingOperator
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|upperOp
condition|)
block|{
if|if
condition|(
name|upperOp
operator|==
name|precedingOperator
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|upperBound
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|FollowingBeforePrecedingError
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
literal|null
operator|!=
name|upperLitType
condition|)
block|{
if|if
condition|(
name|Bound
operator|.
name|CURRENT_ROW
operator|==
name|upperLitType
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|upperBound
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|CurrentRowFollowingError
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// Check that window size is non-negative. I would prefer to allow
comment|// negative windows and return NULL (as Oracle does) but this is
comment|// expedient.
specifier|final
name|OffsetRange
name|offsetAndRange
init|=
name|getOffsetAndRange
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsetAndRange
operator|==
literal|null
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|window
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|UnboundedFollowingWindowNotSupported
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|offsetAndRange
operator|.
name|range
operator|<
literal|0
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|window
argument_list|,
name|EigenbaseResource
operator|.
name|instance
argument_list|()
operator|.
name|WindowHasNegativeSize
operator|.
name|ex
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * This method retrieves the list of columns for the current table then    * walks through the list looking for a column that is monotonic (sorted)    */
specifier|private
specifier|static
name|boolean
name|isTableSorted
parameter_list|(
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlMoniker
argument_list|>
argument_list|()
decl_stmt|;
comment|// REVIEW: jhyde, 2007/11/7: This is the only use of
comment|// findAllColumnNames. Find a better way to detect monotonicity, then
comment|// remove that method.
name|scope
operator|.
name|findAllColumnNames
argument_list|(
name|columnNames
argument_list|)
expr_stmt|;
for|for
control|(
name|SqlMoniker
name|columnName
range|:
name|columnNames
control|)
block|{
name|SqlIdentifier
name|columnId
init|=
name|columnName
operator|.
name|toIdentifier
argument_list|()
decl_stmt|;
specifier|final
name|SqlMonotonicity
name|monotonicity
init|=
name|scope
operator|.
name|getMonotonicity
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
if|if
condition|(
name|monotonicity
operator|!=
name|SqlMonotonicity
operator|.
name|NotMonotonic
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Creates a window<code>(RANGE<i>columnName</i> CURRENT ROW)</code>.    *    * @param columnName Order column    */
specifier|public
name|SqlWindow
name|createCurrentRowWindow
parameter_list|(
specifier|final
name|String
name|columnName
parameter_list|)
block|{
return|return
name|createCall
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|columnName
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|createCurrentRow
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|createCurrentRow
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
return|;
block|}
comment|/**    * Creates a window<code>(RANGE<i>columnName</i> UNBOUNDED    * PRECEDING)</code>.    *    * @param columnName Order column    */
specifier|public
name|SqlWindow
name|createUnboundedPrecedingWindow
parameter_list|(
specifier|final
name|String
name|columnName
parameter_list|)
block|{
return|return
name|createCall
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|columnName
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|createUnboundedPreceding
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|createCurrentRow
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createCurrentRow
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|Bound
operator|.
name|CURRENT_ROW
operator|.
name|symbol
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createUnboundedFollowing
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|Bound
operator|.
name|UNBOUNDED_FOLLOWING
operator|.
name|symbol
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createUnboundedPreceding
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|Bound
operator|.
name|UNBOUNDED_PRECEDING
operator|.
name|symbol
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createFollowing
parameter_list|(
name|SqlLiteral
name|literal
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|followingOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|literal
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createPreceding
parameter_list|(
name|SqlLiteral
name|literal
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|precedingOperator
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|literal
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createBound
parameter_list|(
name|SqlLiteral
name|range
parameter_list|)
block|{
return|return
name|range
return|;
block|}
comment|/**    * Returns whether an expression represents the "CURRENT ROW" bound.    */
specifier|public
specifier|static
name|boolean
name|isCurrentRow
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|instanceof
name|SqlLiteral
operator|)
operator|&&
operator|(
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|node
argument_list|)
operator|==
name|Bound
operator|.
name|CURRENT_ROW
operator|)
return|;
block|}
comment|/**    * Returns whether an expression represents the "UNBOUNDED PRECEDING" bound.    */
specifier|public
specifier|static
name|boolean
name|isUnboundedPreceding
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|instanceof
name|SqlLiteral
operator|)
operator|&&
operator|(
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|node
argument_list|)
operator|==
name|Bound
operator|.
name|UNBOUNDED_PRECEDING
operator|)
return|;
block|}
comment|/**    * Returns whether an expression represents the "UNBOUNDED FOLLOWING" bound.    */
specifier|public
specifier|static
name|boolean
name|isUnboundedFollowing
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|instanceof
name|SqlLiteral
operator|)
operator|&&
operator|(
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|node
argument_list|)
operator|==
name|Bound
operator|.
name|UNBOUNDED_FOLLOWING
operator|)
return|;
block|}
comment|/**    * Converts a pair of bounds into a (range, offset) pair.    *    *<p>If the upper bound is unbounded, returns null, since that cannot be    * represented as a (range, offset) pair. (The offset would be +infinity,    * but what would the range be?)    *    * @param lowerBound Lower bound    * @param upperBound Upper bound    * @param physical   Whether interval is physical (rows), as opposed to    *                   logical (values)    * @return range-offset pair, or null    */
specifier|public
specifier|static
name|OffsetRange
name|getOffsetAndRange
parameter_list|(
specifier|final
name|SqlNode
name|lowerBound
parameter_list|,
specifier|final
name|SqlNode
name|upperBound
parameter_list|,
name|boolean
name|physical
parameter_list|)
block|{
name|ValSign
name|upper
init|=
name|getRangeOffset
argument_list|(
name|upperBound
argument_list|,
name|precedingOperator
argument_list|)
decl_stmt|;
name|ValSign
name|lower
init|=
name|getRangeOffset
argument_list|(
name|lowerBound
argument_list|,
name|followingOperator
argument_list|)
decl_stmt|;
name|long
name|offset
decl_stmt|;
name|long
name|range
decl_stmt|;
if|if
condition|(
name|upper
operator|==
literal|null
condition|)
block|{
comment|// cannot represent this as a range-offset pair
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|lower
operator|==
literal|null
condition|)
block|{
name|offset
operator|=
name|upper
operator|.
name|signedVal
argument_list|()
expr_stmt|;
name|range
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
name|upper
operator|.
name|signedVal
argument_list|()
expr_stmt|;
name|range
operator|=
name|lower
operator|.
name|signedVal
argument_list|()
operator|+
name|upper
operator|.
name|signedVal
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|OffsetRange
argument_list|(
name|offset
argument_list|,
name|range
argument_list|)
return|;
block|}
comment|/**    * Decodes a node, representing an upper or lower bound to a window, into a    * range offset. For example, '3 FOLLOWING' is 3, '3 PRECEDING' is -3, and    * 'UNBOUNDED PRECEDING' or 'UNBOUNDED FOLLOWING' is null.    *    * @param node Node representing window bound    * @param op   Either {@link #precedingOperator} or {@link #followingOperator}    * @return range    */
specifier|private
specifier|static
name|ValSign
name|getRangeOffset
parameter_list|(
name|SqlNode
name|node
parameter_list|,
name|SqlPostfixOperator
name|op
parameter_list|)
block|{
assert|assert
operator|(
name|op
operator|==
name|precedingOperator
operator|)
operator|||
operator|(
name|op
operator|==
name|followingOperator
operator|)
assert|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ValSign
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
if|else if
condition|(
name|node
operator|instanceof
name|SqlLiteral
condition|)
block|{
name|SqlLiteral
name|literal
init|=
operator|(
name|SqlLiteral
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|literal
operator|.
name|getValue
argument_list|()
operator|==
name|Bound
operator|.
name|CURRENT_ROW
condition|)
block|{
return|return
operator|new
name|ValSign
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
if|else if
condition|(
operator|(
name|literal
operator|.
name|getValue
argument_list|()
operator|==
name|Bound
operator|.
name|UNBOUNDED_FOLLOWING
operator|)
operator|&&
operator|(
name|op
operator|==
name|precedingOperator
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
operator|(
name|literal
operator|.
name|getValue
argument_list|()
operator|==
name|Bound
operator|.
name|UNBOUNDED_PRECEDING
operator|)
operator|&&
operator|(
name|op
operator|==
name|followingOperator
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"unexpected literal "
operator|+
name|literal
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|node
operator|instanceof
name|SqlCall
condition|)
block|{
specifier|final
name|SqlCall
name|call
init|=
operator|(
name|SqlCall
operator|)
name|node
decl_stmt|;
name|long
name|sign
init|=
operator|(
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|op
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
name|SqlNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|operands
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|operands
index|[
literal|0
index|]
operator|!=
literal|null
operator|)
assert|;
name|SqlLiteral
name|operand
init|=
operator|(
name|SqlLiteral
operator|)
name|operands
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|obj
init|=
name|operand
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|val
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|BigDecimal
condition|)
block|{
name|val
operator|=
operator|(
operator|(
name|BigDecimal
operator|)
name|obj
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|SqlIntervalLiteral
operator|.
name|IntervalValue
condition|)
block|{
name|val
operator|=
name|SqlParserUtil
operator|.
name|intervalToMillis
argument_list|(
operator|(
name|SqlIntervalLiteral
operator|.
name|IntervalValue
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|new
name|ValSign
argument_list|(
name|val
argument_list|,
name|sign
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ValSign
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
comment|//~ Inner Classes ----------------------------------------------------------
specifier|public
specifier|static
class|class
name|OffsetRange
block|{
specifier|public
specifier|final
name|long
name|offset
decl_stmt|;
specifier|public
specifier|final
name|long
name|range
decl_stmt|;
name|OffsetRange
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|range
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|range
operator|=
name|range
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ValSign
block|{
name|long
name|val
decl_stmt|;
name|long
name|sign
decl_stmt|;
name|ValSign
parameter_list|(
name|long
name|val
parameter_list|,
name|long
name|sign
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|sign
operator|=
name|sign
expr_stmt|;
assert|assert
operator|(
name|sign
operator|==
literal|1
operator|)
operator|||
operator|(
name|sign
operator|==
operator|-
literal|1
operator|)
assert|;
block|}
name|long
name|signedVal
parameter_list|()
block|{
return|return
name|val
operator|*
name|sign
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlWindowOperator.java
end_comment

end_unit

