begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<code>SqlOperatorBinding</code> represents the binding of an {@link  * SqlOperator} to actual operands, along with any additional information  * required to validate those operands if needed.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SqlOperatorBinding
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|RelDataTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|SqlOperator
name|sqlOperator
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a SqlOperatorBinding.    *    * @param typeFactory Type factory    * @param sqlOperator Operator which is subject of this call    */
specifier|protected
name|SqlOperatorBinding
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|SqlOperator
name|sqlOperator
parameter_list|)
block|{
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|sqlOperator
operator|=
name|sqlOperator
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * @return bound operator    */
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|sqlOperator
return|;
block|}
comment|/**    * @return factory for type creation    */
specifier|public
name|RelDataTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
comment|/**    * Gets the string value of a string literal operand.    *    * @param ordinal zero-based ordinal of operand of interest    * @return string value    */
specifier|public
name|String
name|getStringLiteralOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Gets the integer value of a numeric literal operand.    *    * @param ordinal zero-based ordinal of operand of interest    * @return integer value    */
specifier|public
name|int
name|getIntLiteralOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Determines whether a bound operand is NULL.    *    *<p>This is only relevant for SQL validation.    *    * @param ordinal   zero-based ordinal of operand of interest    * @param allowCast whether to regard CAST(constant) as a constant    * @return whether operand is null; false for everything except SQL    * validation    */
specifier|public
name|boolean
name|isOperandNull
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|boolean
name|allowCast
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * @return the number of bound operands    */
specifier|public
specifier|abstract
name|int
name|getOperandCount
parameter_list|()
function_decl|;
comment|/**    * Gets the type of a bound operand.    *    * @param ordinal zero-based ordinal of operand of interest    * @return bound operand type    */
specifier|public
specifier|abstract
name|RelDataType
name|getOperandType
parameter_list|(
name|int
name|ordinal
parameter_list|)
function_decl|;
comment|/**    * Collects the types of the bound operands into a list.    *    * @return collected list    */
specifier|public
name|List
argument_list|<
name|RelDataType
argument_list|>
name|collectOperandTypes
parameter_list|()
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
block|{
specifier|public
name|RelDataType
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getOperandType
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|getOperandCount
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns the rowtype of the<code>ordinal</code>th operand, which is a    * cursor.    *    *<p>This is only implemented for {@link SqlCallBinding}.    *    * @param ordinal Ordinal of the operand    * @return Rowtype of the query underlying the cursor    */
specifier|public
name|RelDataType
name|getCursorOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Retrieves information about a column list parameter.    *    * @param ordinal    ordinal position of the column list parameter    * @param paramName  name of the column list parameter    * @param columnList returns a list of the column names that are referenced    *                   in the column list parameter    * @return the name of the parent cursor referenced by the column list    * parameter if it is a column list parameter; otherwise, null is returned    */
specifier|public
name|String
name|getColumnListParamInfo
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|String
name|paramName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnList
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Wraps a validation error with context appropriate to this operator call.    *    * @param e Validation error    * @return Error wrapped, if possible, with positional information    * @pre node != null    * @post return != null    */
specifier|public
specifier|abstract
name|EigenbaseException
name|newError
parameter_list|(
name|SqlValidatorException
name|e
parameter_list|)
function_decl|;
block|}
end_class

begin_comment
comment|// End SqlOperatorBinding.java
end_comment

end_unit

