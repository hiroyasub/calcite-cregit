begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * The WITH clause of a query. It wraps a SELECT, UNION, or INTERSECT.  */
end_comment

begin_class
specifier|public
class|class
name|SqlWith
extends|extends
name|SqlCall
block|{
specifier|public
specifier|final
name|SqlNodeList
name|withList
decl_stmt|;
specifier|public
specifier|final
name|SqlNode
name|body
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlWith
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlNodeList
name|withList
parameter_list|,
name|SqlNode
name|body
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|withList
operator|=
name|withList
expr_stmt|;
name|this
operator|.
name|body
operator|=
name|body
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|SqlKind
name|getKind
parameter_list|()
block|{
return|return
name|SqlKind
operator|.
name|WITH
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|SqlWithOperator
operator|.
name|INSTANCE
return|;
block|}
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|getOperandList
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|withList
argument_list|,
name|body
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
name|validator
operator|.
name|validateWith
argument_list|(
name|this
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
comment|/**    * SqlWithOperator is used to represent a WITH clause of a query. It wraps    * a SELECT, UNION, or INTERSECT.    */
specifier|private
specifier|static
class|class
name|SqlWithOperator
extends|extends
name|SqlSpecialOperator
block|{
specifier|private
specifier|static
specifier|final
name|SqlWithOperator
name|INSTANCE
init|=
operator|new
name|SqlWithOperator
argument_list|()
decl_stmt|;
specifier|private
name|SqlWithOperator
parameter_list|()
block|{
comment|// NOTE:  make precedence lower then SELECT to avoid extra parens
name|super
argument_list|(
literal|"WITH"
argument_list|,
name|SqlKind
operator|.
name|WITH
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
specifier|final
name|SqlWith
name|with
init|=
operator|(
name|SqlWith
operator|)
name|call
decl_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|WITH
argument_list|,
literal|"WITH"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame1
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|SqlNode
name|node
range|:
name|with
operator|.
name|withList
control|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|node
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame1
argument_list|)
expr_stmt|;
name|with
operator|.
name|body
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SqlCall
name|createCall
parameter_list|(
name|SqlLiteral
name|functionQualifier
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
name|SqlNode
modifier|...
name|operands
parameter_list|)
block|{
return|return
operator|new
name|SqlWith
argument_list|(
name|pos
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|0
index|]
argument_list|,
name|operands
index|[
literal|1
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateCall
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlValidatorScope
name|operandScope
parameter_list|)
block|{
name|validator
operator|.
name|validateWith
argument_list|(
operator|(
name|SqlWith
operator|)
name|call
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlWithOperator.java
end_comment

end_unit

