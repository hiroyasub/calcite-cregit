begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_comment
comment|/**  * Parse tree node that represents an {@code ORDER BY} on a query other than a  * {@code SELECT} (e.g. {@code VALUES} or {@code UNION}).  *  *<p>It is a purely syntactic operator, and is eliminated by  * {@link org.eigenbase.sql.validate.SqlValidatorImpl#performUnconditionalRewrites}  * and replaced with the ORDER_OPERAND of SqlSelect.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SqlOrderBy
extends|extends
name|SqlCall
block|{
specifier|public
specifier|static
specifier|final
name|SqlSpecialOperator
name|OPERATOR
init|=
operator|new
name|Operator
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|SqlNode
name|query
decl_stmt|;
specifier|public
specifier|final
name|SqlNodeList
name|orderList
decl_stmt|;
specifier|public
specifier|final
name|SqlNode
name|offset
decl_stmt|;
specifier|public
specifier|final
name|SqlNode
name|fetch
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlOrderBy
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlNode
name|query
parameter_list|,
name|SqlNodeList
name|orderList
parameter_list|,
name|SqlNode
name|offset
parameter_list|,
name|SqlNode
name|fetch
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|orderList
operator|=
name|orderList
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|fetch
operator|=
name|fetch
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|SqlKind
name|getKind
parameter_list|()
block|{
return|return
name|SqlKind
operator|.
name|ORDER_BY
return|;
block|}
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|OPERATOR
return|;
block|}
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|getOperandList
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|query
argument_list|,
name|orderList
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
comment|/** Definition of {@code ORDER BY} operator. */
specifier|private
specifier|static
class|class
name|Operator
extends|extends
name|SqlSpecialOperator
block|{
specifier|private
name|Operator
parameter_list|()
block|{
comment|// NOTE:  make precedence lower then SELECT to avoid extra parens
name|super
argument_list|(
literal|"ORDER BY"
argument_list|,
name|SqlKind
operator|.
name|ORDER_BY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlSyntax
name|getSyntax
parameter_list|()
block|{
return|return
name|SqlSyntax
operator|.
name|POSTFIX
return|;
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|SqlOrderBy
name|orderBy
init|=
operator|(
name|SqlOrderBy
operator|)
name|call
decl_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|ORDER_BY
argument_list|)
decl_stmt|;
name|orderBy
operator|.
name|query
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|getLeftPrec
argument_list|()
argument_list|,
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|orderBy
operator|.
name|orderList
operator|!=
name|SqlNodeList
operator|.
name|EMPTY
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|listFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|ORDER_BY_LIST
argument_list|)
decl_stmt|;
name|unparseListClause
argument_list|(
name|writer
argument_list|,
name|orderBy
operator|.
name|orderList
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|listFrame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orderBy
operator|.
name|offset
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame2
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|OFFSET
argument_list|)
decl_stmt|;
name|writer
operator|.
name|newlineAndIndent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"OFFSET"
argument_list|)
expr_stmt|;
name|orderBy
operator|.
name|offset
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"ROWS"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orderBy
operator|.
name|fetch
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame3
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|FETCH
argument_list|)
decl_stmt|;
name|writer
operator|.
name|newlineAndIndent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"FETCH"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"NEXT"
argument_list|)
expr_stmt|;
name|orderBy
operator|.
name|fetch
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"ROWS"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"ONLY"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame3
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlOrderByOperator.java
end_comment

end_unit

