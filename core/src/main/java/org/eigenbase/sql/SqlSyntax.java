begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Enumeration of possible syntactic types of {@link SqlOperator operators}.  */
end_comment

begin_enum
specifier|public
enum|enum
name|SqlSyntax
block|{
comment|/**    * Function syntax, as in "Foo(x, y)".    */
name|Function
block|{
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|SqlUtil
operator|.
name|unparseFunctionSyntax
argument_list|(
name|operator
argument_list|,
name|writer
argument_list|,
name|operands
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|,
comment|/**    * Binary operator syntax, as in "x + y".    */
name|Binary
block|{
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|SqlUtil
operator|.
name|unparseBinarySyntax
argument_list|(
name|operator
argument_list|,
name|operands
argument_list|,
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
block|}
block|}
block|,
comment|/**    * Prefix unary operator syntax, as in "- x".    */
name|Prefix
block|{
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
assert|assert
operator|(
name|operands
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
name|writer
operator|.
name|keyword
argument_list|(
name|operator
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|operands
index|[
literal|0
index|]
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|operator
operator|.
name|getLeftPrec
argument_list|()
argument_list|,
name|operator
operator|.
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
comment|/**    * Postfix unary operator syntax, as in "x ++".    */
name|Postfix
block|{
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
assert|assert
operator|(
name|operands
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
name|operands
index|[
literal|0
index|]
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|operator
operator|.
name|getLeftPrec
argument_list|()
argument_list|,
name|operator
operator|.
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
name|operator
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
comment|/**    * Special syntax, such as that of the SQL CASE operator, "CASE x WHEN 1    * THEN 2 ELSE 3 END".    */
name|Special
block|{
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
comment|// You probably need to override the operator's unparse
comment|// method.
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
block|,
comment|/**    * Function syntax which takes no parentheses if there are no arguments, for    * example "CURRENTTIME".    */
name|FunctionId
block|{
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|SqlUtil
operator|.
name|unparseFunctionSyntax
argument_list|(
name|operator
argument_list|,
name|writer
argument_list|,
name|operands
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|,
comment|/**    * Syntax of an internal operator, which does not appear in the SQL.    */
name|Internal
block|{
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"Internal operator '"
operator|+
name|operator
operator|+
literal|"' cannot be un-parsed"
argument_list|)
throw|;
block|}
block|}
block|;
comment|/**    * Converts a call to an operator of this syntax into a string.    */
specifier|public
specifier|abstract
name|void
name|unparse
argument_list|(
name|SqlWriter
name|writer
argument_list|,
name|SqlOperator
name|operator
argument_list|,
name|SqlNode
index|[]
name|operands
argument_list|,
name|int
name|leftPrec
argument_list|,
name|int
name|rightPrec
argument_list|)
decl_stmt|;
block|}
end_enum

begin_comment
comment|// End SqlSyntax.java
end_comment

end_unit

