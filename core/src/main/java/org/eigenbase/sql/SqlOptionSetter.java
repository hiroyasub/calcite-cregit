begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_comment
comment|/**  * Node to represent set option statement.  */
end_comment

begin_class
specifier|public
class|class
name|SqlOptionSetter
extends|extends
name|SqlNode
block|{
name|String
name|name
decl_stmt|;
name|SqlNode
name|value
decl_stmt|;
name|String
name|rawValue
decl_stmt|;
name|String
name|scope
decl_stmt|;
comment|/**    * Creates a node.    *    * @param pos Parser position, must not be null.    */
specifier|public
name|SqlOptionSetter
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"alter"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"set"
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|SIMPLE
argument_list|)
decl_stmt|;
name|writer
operator|.
name|identifier
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|getVal
argument_list|()
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|literal
argument_list|(
name|getRawVal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
comment|/**    * Options can be set to several valid sql types, such as literals, or in    * some cases, such as 'on', set to reserved words that need not be given    * in quotes as string literals. In this case these are saved by the parser    * as strings in the rawValue field. Only one of these should hold a value    * in an instance of {@link SqlOptionSetter }.    *    * @param validator    * @param scope     Validator    */
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
if|if
condition|(
name|getVal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|validate
argument_list|(
name|getVal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|accept
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|)
block|{
comment|// TODO - figure out if this type should be added to the visitor
comment|// definition or if this class should be declared a subclass
comment|// of SqlCall
return|return
name|visitor
operator|.
name|visit
argument_list|(
operator|(
name|SqlLiteral
operator|)
name|this
operator|.
name|getVal
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalsDeep
parameter_list|(
name|SqlNode
name|node
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|SqlCall
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
name|this
operator|+
literal|"!="
operator|+
name|node
assert|;
return|return
literal|false
return|;
block|}
name|SqlOptionSetter
name|that
init|=
operator|(
name|SqlOptionSetter
operator|)
name|node
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getScope
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
name|this
operator|+
literal|"!="
operator|+
name|node
assert|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
name|this
operator|+
literal|"!="
operator|+
name|node
assert|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getVal
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|getVal
argument_list|()
operator|.
name|equalsDeep
argument_list|(
name|that
operator|.
name|getVal
argument_list|()
argument_list|,
name|fail
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
name|this
operator|+
literal|"!="
operator|+
name|node
assert|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|getRawVal
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|getVal
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getVal
argument_list|()
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
name|this
operator|+
literal|"!="
operator|+
name|node
assert|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
specifier|public
name|void
name|setScope
parameter_list|(
name|String
name|scope
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
block|}
specifier|public
name|String
name|getRawVal
parameter_list|()
block|{
return|return
name|rawValue
return|;
block|}
specifier|public
name|void
name|setRawVal
parameter_list|(
name|String
name|rawValue
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|value
operator|==
literal|null
operator|:
literal|"Either a rawValue or a typed value can be set in an "
operator|+
literal|"SqlOptionSetter instance, setting both is invalid."
assert|;
name|this
operator|.
name|rawValue
operator|=
name|rawValue
expr_stmt|;
block|}
specifier|public
name|SqlNode
name|getVal
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|void
name|setVal
parameter_list|(
name|SqlNode
name|val
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|rawValue
operator|==
literal|null
operator|:
literal|"Either a rawValue or a typed value can be set in an "
operator|+
literal|"SqlOptionSetter instance, setting both is invalid."
assert|;
name|this
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
block|}
end_class

end_unit

