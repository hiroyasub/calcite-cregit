begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A {@link SqlReturnTypeInference} which always returns the same SQL type.  */
end_comment

begin_class
specifier|public
class|class
name|ExplicitReturnTypeInference
implements|implements
name|SqlReturnTypeInference
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|int
name|argCount
decl_stmt|;
specifier|private
specifier|final
name|SqlTypeName
name|typeName
decl_stmt|;
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|type
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**      * Creates an inference rule which always returns the same type object.      *      *<p>If the requesting type factory is different, returns a copy of the      * type object made using {@link RelDataTypeFactory#copyType(RelDataType)}      * within the requesting type factory.      *      *<p>REVIEW jvs 6-Aug-2006: Under what circumstances is a copy of the type      * required?      *      * @param type Type object      */
specifier|public
name|ExplicitReturnTypeInference
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|length
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|scale
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|argCount
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Creates an inference rule which always returns a given SQL type with zero      * parameters (such as<code>DATE</code>).      *      * @param typeName Name of the type      */
specifier|public
name|ExplicitReturnTypeInference
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
name|this
operator|.
name|argCount
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|length
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|scale
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Creates an inference rule which always returns a given SQL type with a      * precision/length parameter (such as<code>VARCHAR(10)</code> and<code>      * NUMBER(5)</code>).      *      * @param typeName Name of the type      * @param length Length or precision of the type      */
specifier|public
name|ExplicitReturnTypeInference
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|argCount
operator|=
literal|2
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|scale
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Creates an inference rule which always returns a given SQL type with a      * precision and scale parameters (such as<code>DECIMAL(8, 3)</code>).      *      * @param typeName Name of the type      * @param length Precision of the type      */
specifier|public
name|ExplicitReturnTypeInference
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|this
operator|.
name|argCount
operator|=
literal|3
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|RelDataType
name|inferReturnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|copyType
argument_list|(
name|type
argument_list|)
return|;
block|}
return|return
name|createType
argument_list|(
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|RelDataType
name|getExplicitType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|private
name|RelDataType
name|createType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
switch|switch
condition|(
name|argCount
condition|)
block|{
case|case
literal|1
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|,
name|length
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|,
name|length
argument_list|,
name|scale
argument_list|)
return|;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"unexpected argCount "
operator|+
name|argCount
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ExplicitReturnTypeInference.java
end_comment

end_unit

