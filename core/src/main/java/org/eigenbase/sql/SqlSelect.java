begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A<code>SqlSelect</code> is a node of a parse tree which represents a select  * statement. It warrants its own node type just because we have a lot of  * methods to put somewhere.  */
end_comment

begin_class
specifier|public
class|class
name|SqlSelect
extends|extends
name|SqlCall
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|// constants representing operand positions
specifier|public
specifier|static
specifier|final
name|int
name|KEYWORDS_OPERAND
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SELECT_OPERAND
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|FROM_OPERAND
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|WHERE_OPERAND
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|GROUP_OPERAND
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HAVING_OPERAND
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|WINDOW_OPERAND
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ORDER_OPERAND
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OFFSET_OPERAND
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|FETCH_OPERAND
init|=
literal|9
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OPERAND_COUNT
init|=
literal|10
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
name|SqlSelect
parameter_list|(
name|SqlSelectOperator
name|operator
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|operator
argument_list|,
name|operands
argument_list|,
name|pos
argument_list|)
expr_stmt|;
assert|assert
name|operands
operator|.
name|length
operator|==
name|OPERAND_COUNT
assert|;
assert|assert
name|operands
index|[
name|KEYWORDS_OPERAND
index|]
operator|instanceof
name|SqlNodeList
assert|;
assert|assert
name|operands
index|[
name|WINDOW_OPERAND
index|]
operator|instanceof
name|SqlNodeList
assert|;
assert|assert
name|pos
operator|!=
literal|null
assert|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
specifier|final
name|boolean
name|isDistinct
parameter_list|()
block|{
return|return
name|getModifierNode
argument_list|(
name|SqlSelectKeyword
operator|.
name|Distinct
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|final
name|SqlNode
name|getModifierNode
parameter_list|(
name|SqlSelectKeyword
name|modifier
parameter_list|)
block|{
specifier|final
name|SqlNodeList
name|keywords
init|=
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlSelect
operator|.
name|KEYWORDS_OPERAND
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keywords
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SqlSelectKeyword
name|keyword
init|=
operator|(
name|SqlSelectKeyword
operator|)
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|keywords
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyword
operator|==
name|modifier
condition|)
block|{
return|return
name|keywords
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|final
name|SqlNode
name|getFrom
parameter_list|()
block|{
return|return
name|operands
index|[
name|SqlSelect
operator|.
name|FROM_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|SqlNodeList
name|getGroup
parameter_list|()
block|{
return|return
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlSelect
operator|.
name|GROUP_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|SqlNode
name|getHaving
parameter_list|()
block|{
return|return
name|operands
index|[
name|SqlSelect
operator|.
name|HAVING_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|SqlNodeList
name|getSelectList
parameter_list|()
block|{
return|return
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlSelect
operator|.
name|SELECT_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|SqlNode
name|getWhere
parameter_list|()
block|{
return|return
name|operands
index|[
name|SqlSelect
operator|.
name|WHERE_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|SqlNodeList
name|getWindowList
parameter_list|()
block|{
return|return
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlSelect
operator|.
name|WINDOW_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|SqlNodeList
name|getOrderList
parameter_list|()
block|{
return|return
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlSelect
operator|.
name|ORDER_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|SqlNode
name|getOffset
parameter_list|()
block|{
return|return
name|operands
index|[
name|SqlSelect
operator|.
name|OFFSET_OPERAND
index|]
return|;
block|}
specifier|public
specifier|final
name|SqlNode
name|getFetch
parameter_list|()
block|{
return|return
name|operands
index|[
name|SqlSelect
operator|.
name|FETCH_OPERAND
index|]
return|;
block|}
specifier|public
name|void
name|addFrom
parameter_list|(
name|SqlIdentifier
name|tableId
parameter_list|)
block|{
name|SqlNode
name|fromClause
init|=
name|getFrom
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromClause
operator|==
literal|null
condition|)
block|{
name|fromClause
operator|=
name|tableId
expr_stmt|;
block|}
else|else
block|{
name|fromClause
operator|=
name|SqlStdOperatorTable
operator|.
name|joinOperator
operator|.
name|createCall
argument_list|(
literal|null
argument_list|,
name|fromClause
argument_list|,
name|tableId
argument_list|)
expr_stmt|;
block|}
name|operands
index|[
name|FROM_OPERAND
index|]
operator|=
name|fromClause
expr_stmt|;
block|}
specifier|public
name|void
name|addWhere
parameter_list|(
name|SqlNode
name|condition
parameter_list|)
block|{
assert|assert
name|operands
index|[
name|SELECT_OPERAND
index|]
operator|==
literal|null
operator|:
literal|"cannot add a filter if there is already a select list"
assert|;
name|operands
index|[
name|WHERE_OPERAND
index|]
operator|=
name|SqlUtil
operator|.
name|andExpressions
argument_list|(
name|operands
index|[
name|WHERE_OPERAND
index|]
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
name|validator
operator|.
name|validateQuery
argument_list|(
name|this
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
comment|// Override SqlCall, to introduce a subquery frame.
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
if|if
condition|(
operator|!
name|writer
operator|.
name|inQuery
argument_list|()
condition|)
block|{
comment|// If this SELECT is the topmost item in a subquery, introduce a new
comment|// frame. (The topmost item in the subquery might be a UNION or
comment|// ORDER. In this case, we don't need a wrapper frame.)
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|Subquery
argument_list|,
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
name|getOperator
argument_list|()
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|operands
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getOperator
argument_list|()
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|operands
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasOrderBy
parameter_list|()
block|{
name|SqlNodeList
name|orderList
init|=
name|getOrderList
argument_list|()
decl_stmt|;
return|return
operator|(
literal|null
operator|!=
name|orderList
operator|)
operator|&&
operator|(
literal|0
operator|!=
name|orderList
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasWhere
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|getWhere
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isKeywordPresent
parameter_list|(
name|SqlSelectKeyword
name|targetKeyWord
parameter_list|)
block|{
specifier|final
name|SqlNodeList
name|keywordList
init|=
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
name|SqlSelect
operator|.
name|KEYWORDS_OPERAND
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keywordList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SqlSelectKeyword
name|keyWord
init|=
operator|(
name|SqlSelectKeyword
operator|)
name|SqlLiteral
operator|.
name|symbolValue
argument_list|(
name|keywordList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyWord
operator|==
name|targetKeyWord
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlSelect.java
end_comment

end_unit

