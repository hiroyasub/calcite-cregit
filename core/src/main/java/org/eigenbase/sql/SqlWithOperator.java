begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * SqlWithOperator is used to represent a WITH clause of a query. It wraps  * a SELECT, UNION, or INTERSECT.  */
end_comment

begin_class
specifier|public
class|class
name|SqlWithOperator
extends|extends
name|SqlSpecialOperator
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlWithOperator
parameter_list|()
block|{
comment|// NOTE:  make precedence lower then SELECT to avoid extra parens
name|super
argument_list|(
literal|"WITH"
argument_list|,
name|SqlKind
operator|.
name|WITH
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlNode
index|[]
name|operands
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
specifier|final
name|Call
name|call
init|=
name|Call
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|operands
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|With
argument_list|,
literal|"WITH"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame1
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|SqlNode
name|node
range|:
name|call
operator|.
name|withList
control|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|node
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame1
argument_list|)
expr_stmt|;
name|call
operator|.
name|body
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateCall
parameter_list|(
name|SqlCall
name|call_
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlValidatorScope
name|operandScope
parameter_list|)
block|{
name|validator
operator|.
name|validateWith
argument_list|(
name|call_
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
comment|/** Copy of the operands to a call to {@link SqlWithOperator}, with names and    * types applied. Use this rather than accessing the operands by position. */
specifier|public
specifier|static
class|class
name|Call
block|{
specifier|public
specifier|final
name|SqlNodeList
name|withList
decl_stmt|;
specifier|public
specifier|final
name|SqlNode
name|body
decl_stmt|;
specifier|private
name|Call
parameter_list|(
name|SqlNodeList
name|withList
parameter_list|,
name|SqlNode
name|body
parameter_list|)
block|{
name|this
operator|.
name|withList
operator|=
name|withList
expr_stmt|;
name|this
operator|.
name|body
operator|=
name|body
expr_stmt|;
block|}
specifier|public
specifier|static
name|Call
name|of
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|WITH
assert|;
return|return
name|of
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Call
name|of
parameter_list|(
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operands
parameter_list|)
block|{
assert|assert
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|2
assert|;
return|return
operator|new
name|Call
argument_list|(
operator|(
name|SqlNodeList
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlWithOperator.java
end_comment

end_unit

