begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A SQL literal representing a DATE value, such as<code>DATE  * '2004-10-22'</code>.  *  *<p>Create values using {@link SqlLiteral#createDate}.  */
end_comment

begin_class
specifier|public
class|class
name|SqlDateLiteral
extends|extends
name|SqlAbstractDateTimeLiteral
block|{
comment|//~ Constructors -----------------------------------------------------------
name|SqlDateLiteral
parameter_list|(
name|Calendar
name|d
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|d
argument_list|,
literal|false
argument_list|,
name|SqlTypeName
operator|.
name|DATE
argument_list|,
literal|0
argument_list|,
name|SqlParserUtil
operator|.
name|DateFormatStr
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|SqlDateLiteral
parameter_list|(
name|Calendar
name|d
parameter_list|,
name|String
name|format
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|d
argument_list|,
literal|false
argument_list|,
name|SqlTypeName
operator|.
name|DATE
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlNode
name|clone
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
operator|new
name|SqlDateLiteral
argument_list|(
operator|(
name|Calendar
operator|)
name|value
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DATE '"
operator|+
name|toFormattedString
argument_list|()
operator|+
literal|"'"
return|;
block|}
comment|/**    * Returns e.g. '1969-07-21'.    */
specifier|public
name|String
name|toFormattedString
parameter_list|()
block|{
return|return
name|getDate
argument_list|()
operator|.
name|toString
argument_list|(
name|formatString
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|createSqlType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|getTypeName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
switch|switch
condition|(
name|writer
operator|.
name|getDialect
argument_list|()
operator|.
name|getDatabaseProduct
argument_list|()
condition|)
block|{
case|case
name|MSSQL
case|:
name|writer
operator|.
name|literal
argument_list|(
literal|"'"
operator|+
name|this
operator|.
name|toFormattedString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|writer
operator|.
name|literal
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlDateLiteral.java
end_comment

end_unit

