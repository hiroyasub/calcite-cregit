begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Definition of the<code>MIN</code> and<code>MAX</code> aggregate functions,  * returning the returns the smallest/largest of the values which go into it.  *  *<p>There are 3 forms:  *  *<dl>  *<dt>sum(<em>primitive type</em>)  *<dd>values are compared using '&lt;'  *  *<dt>sum({@link java.lang.Comparable})  *<dd>values are compared using {@link java.lang.Comparable#compareTo}  *  *<dt>sum({@link java.util.Comparator}, {@link java.lang.Object})  *<dd>the {@link java.util.Comparator#compare} method of the comparator is used  * to compare pairs of objects. The comparator is a startup argument, and must  * therefore be constant for the duration of the aggregation.  *</dl>  */
end_comment

begin_class
specifier|public
class|class
name|SqlMinMaxAggFunction
extends|extends
name|SqlAggFunction
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|int
name|MINMAX_INVALID
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MINMAX_PRIMITIVE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MINMAX_COMPARABLE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MINMAX_COMPARATOR
init|=
literal|2
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|public
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argTypes
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isMin
decl_stmt|;
specifier|private
specifier|final
name|int
name|kind
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlMinMaxAggFunction
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argTypes
parameter_list|,
name|boolean
name|isMin
parameter_list|,
name|int
name|kind
parameter_list|)
block|{
name|super
argument_list|(
name|isMin
condition|?
literal|"MIN"
else|:
literal|"MAX"
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
name|ReturnTypes
operator|.
name|ARG0
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|COMPARABLE_ORDERED
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
expr_stmt|;
name|this
operator|.
name|argTypes
operator|=
name|argTypes
expr_stmt|;
name|this
operator|.
name|isMin
operator|=
name|isMin
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|boolean
name|isMin
parameter_list|()
block|{
return|return
name|isMin
return|;
block|}
specifier|public
name|int
name|getMinMaxKind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelDataType
argument_list|>
name|getParameterTypes
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|MINMAX_PRIMITIVE
case|:
case|case
name|MINMAX_COMPARABLE
case|:
return|return
name|argTypes
return|;
case|case
name|MINMAX_COMPARATOR
case|:
return|return
name|argTypes
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
return|;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"bad kind: "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
specifier|public
name|RelDataType
name|getReturnType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|MINMAX_PRIMITIVE
case|:
case|case
name|MINMAX_COMPARABLE
case|:
return|return
name|argTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
case|case
name|MINMAX_COMPARATOR
case|:
return|return
name|argTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"bad kind: "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlMinMaxAggFunction.java
end_comment

end_unit

