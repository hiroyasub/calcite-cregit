begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Takes a tree of {@link RexNode} objects and transforms it into another in one  * sense equivalent tree. Nodes in tree will be modified and hence tree will not  * remain unchanged.  *  *<p>NOTE: You must validate the tree of RexNodes before using this class.  */
end_comment

begin_class
specifier|public
class|class
name|RexTransformer
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|RexNode
name|root
decl_stmt|;
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
name|int
name|isParentsCount
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|SqlOperator
argument_list|>
name|transformableOperators
init|=
operator|new
name|HashSet
argument_list|<
name|SqlOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|RexTransformer
parameter_list|(
name|RexNode
name|root
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|isParentsCount
operator|=
literal|0
expr_stmt|;
name|transformableOperators
operator|.
name|add
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|)
expr_stmt|;
comment|/** NOTE the OR operator is NOT missing.      * see {@link org.eigenbase.test.RexTransformerTest} */
name|transformableOperators
operator|.
name|add
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|)
expr_stmt|;
name|transformableOperators
operator|.
name|add
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT_EQUALS
argument_list|)
expr_stmt|;
name|transformableOperators
operator|.
name|add
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|)
expr_stmt|;
name|transformableOperators
operator|.
name|add
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
argument_list|)
expr_stmt|;
name|transformableOperators
operator|.
name|add
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|)
expr_stmt|;
name|transformableOperators
operator|.
name|add
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|private
name|boolean
name|isBoolean
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|RelDataType
name|type
init|=
name|node
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|SqlTypeUtil
operator|.
name|inBooleanFamily
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isNullable
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isTransformable
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|==
name|isParentsCount
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
return|return
operator|!
name|transformableOperators
operator|.
name|contains
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
operator|&&
name|isNullable
argument_list|(
name|node
argument_list|)
return|;
block|}
return|return
name|isNullable
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|transformNullSemantics
parameter_list|()
block|{
name|root
operator|=
name|transformNullSemantics
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
specifier|private
name|RexNode
name|transformNullSemantics
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
assert|assert
name|isParentsCount
operator|>=
literal|0
operator|:
literal|"Cannot be negative"
assert|;
if|if
condition|(
operator|!
name|isBoolean
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
name|Boolean
name|directlyUnderIs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|IS_TRUE
argument_list|)
condition|)
block|{
name|directlyUnderIs
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
name|isParentsCount
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|IS_FALSE
argument_list|)
condition|)
block|{
name|directlyUnderIs
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
name|isParentsCount
operator|++
expr_stmt|;
block|}
comment|// Special case when we have a Literal, Parameter or Identifier directly
comment|// as an operand to IS TRUE or IS FALSE.
if|if
condition|(
literal|null
operator|!=
name|directlyUnderIs
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
assert|assert
name|isParentsCount
operator|>
literal|0
operator|:
literal|"Stack should not be empty"
assert|;
assert|assert
literal|1
operator|==
name|call
operator|.
name|operands
operator|.
name|size
argument_list|()
assert|;
name|RexNode
name|operand
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|RexLiteral
operator|||
name|operand
operator|instanceof
name|RexInputRef
operator|||
name|operand
operator|instanceof
name|RexDynamicParam
condition|)
block|{
if|if
condition|(
name|isNullable
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|RexNode
name|notNullNode
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|operand
argument_list|)
decl_stmt|;
name|RexNode
name|boolNode
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|directlyUnderIs
operator|.
name|booleanValue
argument_list|()
argument_list|)
decl_stmt|;
name|RexNode
name|eqNode
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|operand
argument_list|,
name|boolNode
argument_list|)
decl_stmt|;
name|RexNode
name|andBoolNode
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|notNullNode
argument_list|,
name|eqNode
argument_list|)
decl_stmt|;
return|return
name|andBoolNode
return|;
block|}
else|else
block|{
name|RexNode
name|boolNode
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|directlyUnderIs
operator|.
name|booleanValue
argument_list|()
argument_list|)
decl_stmt|;
name|RexNode
name|andBoolNode
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|node
argument_list|,
name|boolNode
argument_list|)
decl_stmt|;
return|return
name|andBoolNode
return|;
block|}
block|}
comment|// else continue as normal
block|}
if|if
condition|(
name|node
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
comment|// Transform children (if any) before transforming node itself.
specifier|final
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|operands
control|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|transformNullSemantics
argument_list|(
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|directlyUnderIs
condition|)
block|{
name|isParentsCount
operator|--
expr_stmt|;
name|directlyUnderIs
operator|=
literal|null
expr_stmt|;
return|return
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|transformableOperators
operator|.
name|contains
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
assert|assert
literal|2
operator|==
name|operands
operator|.
name|size
argument_list|()
assert|;
specifier|final
name|RexNode
name|isNotNullOne
decl_stmt|;
if|if
condition|(
name|isTransformable
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|isNotNullOne
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isNotNullOne
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|RexNode
name|isNotNullTwo
decl_stmt|;
if|if
condition|(
name|isTransformable
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|isNotNullTwo
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isNotNullTwo
operator|=
literal|null
expr_stmt|;
block|}
name|RexNode
name|intoFinalAnd
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|!=
name|isNotNullOne
operator|)
operator|&&
operator|(
literal|null
operator|!=
name|isNotNullTwo
operator|)
condition|)
block|{
name|intoFinalAnd
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|isNotNullOne
argument_list|,
name|isNotNullTwo
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|null
operator|!=
name|isNotNullOne
condition|)
block|{
name|intoFinalAnd
operator|=
name|isNotNullOne
expr_stmt|;
block|}
if|else if
condition|(
literal|null
operator|!=
name|isNotNullTwo
condition|)
block|{
name|intoFinalAnd
operator|=
name|isNotNullTwo
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|intoFinalAnd
condition|)
block|{
name|RexNode
name|andNullAndCheckNode
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|intoFinalAnd
argument_list|,
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|operands
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|andNullAndCheckNode
return|;
block|}
comment|// if come here no need to do anything
block|}
if|if
condition|(
operator|!
name|operands
operator|.
name|equals
argument_list|(
name|call
operator|.
name|operands
argument_list|)
condition|)
block|{
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|operands
argument_list|)
return|;
block|}
block|}
return|return
name|node
return|;
block|}
block|}
end_class

begin_comment
comment|// End RexTransformer.java
end_comment

end_unit

