begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A helper class for generating formatted text. StackWriter keeps track of  * nested formatting state like indentation level and quote escaping. Typically,  * it is inserted between a PrintWriter and the real Writer; directives are  * passed straight through the PrintWriter via the write method, as in the  * following example:  *  *<pre><code>  *    StringWriter sw = new StringWriter();  *    StackWriter stackw = new StackWriter(sw, StackWriter.INDENT_SPACE4);  *    PrintWriter pw = new PrintWriter(stackw);  *    pw.write(StackWriter.INDENT);  *    pw.print("execute remote(link_name,");  *    pw.write(StackWriter.OPEN_SQL_STRING_LITERAL);  *    pw.println();  *    pw.write(StackWriter.INDENT);  *    pw.println("select * from t where c> 'alabama'");  *    pw.write(StackWriter.OUTDENT);  *    pw.write(StackWriter.CLOSE_SQL_STRING_LITERAL);  *    pw.println(");");  *    pw.write(StackWriter.OUTDENT);  *    pw.close();  *    System.out.println(sw.toString());  *</code></pre>  *  * which produces the following output:  *  *<pre><code>  *      execute remote(link_name,'  *          select * from t where c> ''alabama''  *      ');  *</code></pre>  */
end_comment

begin_class
specifier|public
class|class
name|StackWriter
extends|extends
name|FilterWriter
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * directive for increasing the indentation level    */
specifier|public
specifier|static
specifier|final
name|int
name|INDENT
init|=
literal|0xF0000001
decl_stmt|;
comment|/**    * directive for decreasing the indentation level    */
specifier|public
specifier|static
specifier|final
name|int
name|OUTDENT
init|=
literal|0xF0000002
decl_stmt|;
comment|/**    * directive for beginning an SQL string literal    */
specifier|public
specifier|static
specifier|final
name|int
name|OPEN_SQL_STRING_LITERAL
init|=
literal|0xF0000003
decl_stmt|;
comment|/**    * directive for ending an SQL string literal    */
specifier|public
specifier|static
specifier|final
name|int
name|CLOSE_SQL_STRING_LITERAL
init|=
literal|0xF0000004
decl_stmt|;
comment|/**    * directive for beginning an SQL identifier    */
specifier|public
specifier|static
specifier|final
name|int
name|OPEN_SQL_IDENTIFIER
init|=
literal|0xF0000005
decl_stmt|;
comment|/**    * directive for ending an SQL identifier    */
specifier|public
specifier|static
specifier|final
name|int
name|CLOSE_SQL_IDENTIFIER
init|=
literal|0xF0000006
decl_stmt|;
comment|/**    * tab indentation    */
specifier|public
specifier|static
specifier|final
name|String
name|INDENT_TAB
init|=
literal|"\t"
decl_stmt|;
comment|/**    * four-space indentation    */
specifier|public
specifier|static
specifier|final
name|String
name|INDENT_SPACE4
init|=
literal|"    "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Character
name|singleQuote
init|=
operator|new
name|Character
argument_list|(
literal|'\''
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Character
name|doubleQuote
init|=
operator|new
name|Character
argument_list|(
literal|'"'
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|int
name|indentationDepth
decl_stmt|;
specifier|private
name|String
name|indentation
decl_stmt|;
specifier|private
name|boolean
name|needIndent
decl_stmt|;
specifier|private
name|LinkedList
name|quoteStack
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a new StackWriter on top of an existing Writer, with the    * specified string to be used for each level of indentation.    *    * @param writer      underyling writer    * @param indentation indentation unit such as {@link #INDENT_TAB} or {@link    *                    #INDENT_SPACE4}    */
specifier|public
name|StackWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|indentation
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|indentation
operator|=
name|indentation
expr_stmt|;
name|quoteStack
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|private
name|void
name|indentIfNeeded
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|needIndent
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indentationDepth
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|indentation
argument_list|)
expr_stmt|;
block|}
name|needIndent
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeQuote
parameter_list|(
name|Character
name|quoteChar
parameter_list|)
throws|throws
name|IOException
block|{
name|indentIfNeeded
argument_list|()
expr_stmt|;
name|int
name|n
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|quoteStack
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|quoteStack
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|quoteChar
argument_list|)
condition|)
block|{
name|n
operator|*=
literal|2
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|quoteChar
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|pushQuote
parameter_list|(
name|Character
name|quoteChar
parameter_list|)
throws|throws
name|IOException
block|{
name|writeQuote
argument_list|(
name|quoteChar
argument_list|)
expr_stmt|;
name|quoteStack
operator|.
name|addLast
argument_list|(
name|quoteChar
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|popQuote
parameter_list|(
name|Character
name|quoteChar
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|quoteStack
operator|.
name|removeLast
argument_list|()
operator|.
name|equals
argument_list|(
name|quoteChar
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"mismatched quotes"
argument_list|)
throw|;
block|}
name|writeQuote
argument_list|(
name|quoteChar
argument_list|)
expr_stmt|;
block|}
comment|// implement Writer
specifier|public
name|void
name|write
parameter_list|(
name|int
name|c
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|INDENT
case|:
name|indentationDepth
operator|++
expr_stmt|;
break|break;
case|case
name|OUTDENT
case|:
name|indentationDepth
operator|--
expr_stmt|;
break|break;
case|case
name|OPEN_SQL_STRING_LITERAL
case|:
name|pushQuote
argument_list|(
name|singleQuote
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLOSE_SQL_STRING_LITERAL
case|:
name|popQuote
argument_list|(
name|singleQuote
argument_list|)
expr_stmt|;
break|break;
case|case
name|OPEN_SQL_IDENTIFIER
case|:
name|pushQuote
argument_list|(
name|doubleQuote
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLOSE_SQL_IDENTIFIER
case|:
name|popQuote
argument_list|(
name|doubleQuote
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|needIndent
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
comment|// NOTE jvs 3-Jan-2006:  suppress indentIfNeeded() in this case
comment|// so that we don't get spurious diffs on Windows vs. Linux
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\''
case|:
name|writeQuote
argument_list|(
name|singleQuote
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'"'
case|:
name|writeQuote
argument_list|(
name|doubleQuote
argument_list|)
expr_stmt|;
break|break;
default|default:
name|indentIfNeeded
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// implement Writer
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: something more efficient using searches for
comment|// special characters
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
operator|(
name|off
operator|+
name|len
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
name|cbuf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// implement Writer
specifier|public
name|void
name|write
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: something more efficient using searches for
comment|// special characters
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
operator|(
name|off
operator|+
name|len
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes an SQL string literal.    *    * @param pw PrintWriter on which to write    * @param s  text of literal    */
specifier|public
specifier|static
name|void
name|printSqlStringLiteral
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|pw
operator|.
name|write
argument_list|(
name|OPEN_SQL_STRING_LITERAL
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|pw
operator|.
name|write
argument_list|(
name|CLOSE_SQL_STRING_LITERAL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes an SQL identifier.    *    * @param pw PrintWriter on which to write    * @param s  identifier    */
specifier|public
specifier|static
name|void
name|printSqlIdentifier
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|pw
operator|.
name|write
argument_list|(
name|OPEN_SQL_IDENTIFIER
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|pw
operator|.
name|write
argument_list|(
name|CLOSE_SQL_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End StackWriter.java
end_comment

end_unit

