begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of list similar to {@link LinkedList}, but stores elements  * in chunks of 32 elements.  *  *<p>ArrayList has O(n) insertion and deletion into the middle of the list.  * ChunkList insertion and deletion are O(1).</p>  */
end_comment

begin_class
specifier|public
class|class
name|ChunkList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractSequentialList
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|HEADER_SIZE
init|=
literal|3
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|private
name|Object
index|[]
name|first
decl_stmt|;
specifier|private
name|Object
index|[]
name|last
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Integer
index|[]
name|INTEGERS
init|=
operator|new
name|Integer
index|[
name|CHUNK_SIZE
operator|+
literal|3
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|INTEGERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|INTEGERS
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|/**    * Creates an empty ChunkList.    */
specifier|public
name|ChunkList
parameter_list|()
block|{
block|}
comment|/**    * Creates a ChunkList whose contents are a given Collection.    */
specifier|public
name|ChunkList
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
parameter_list|)
block|{
name|addAll
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
comment|/**    * For debugging and testing.    */
name|boolean
name|isValid
parameter_list|(
name|boolean
name|fail
parameter_list|)
block|{
if|if
condition|(
operator|(
name|first
operator|==
literal|null
operator|)
operator|!=
operator|(
name|last
operator|==
literal|null
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|first
operator|==
literal|null
operator|)
operator|!=
operator|(
name|size
operator|==
literal|0
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|this
control|)
block|{
if|if
condition|(
name|n
operator|++
operator|>
name|size
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|n
operator|!=
name|size
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
name|Object
index|[]
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|chunk
init|=
name|first
init|;
name|chunk
operator|!=
literal|null
condition|;
name|chunk
operator|=
name|next
argument_list|(
name|chunk
argument_list|)
control|)
block|{
if|if
condition|(
name|prev
argument_list|(
name|chunk
argument_list|)
operator|!=
name|prev
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
name|prev
operator|=
name|chunk
expr_stmt|;
if|if
condition|(
name|occupied
argument_list|(
name|chunk
argument_list|)
operator|==
literal|0
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|locate
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|element
parameter_list|)
block|{
name|Object
index|[]
name|chunk
init|=
name|last
decl_stmt|;
name|int
name|occupied
decl_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|chunk
operator|=
name|first
operator|=
name|last
operator|=
operator|new
name|Object
index|[
name|CHUNK_SIZE
operator|+
name|HEADER_SIZE
index|]
expr_stmt|;
name|occupied
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|occupied
operator|=
name|occupied
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|occupied
operator|==
name|CHUNK_SIZE
condition|)
block|{
name|chunk
operator|=
operator|new
name|Object
index|[
name|CHUNK_SIZE
operator|+
name|HEADER_SIZE
index|]
expr_stmt|;
name|setNext
argument_list|(
name|last
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|setPrev
argument_list|(
name|chunk
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|occupied
operator|=
literal|0
expr_stmt|;
name|last
operator|=
name|chunk
expr_stmt|;
block|}
block|}
name|setOccupied
argument_list|(
name|chunk
argument_list|,
name|occupied
operator|+
literal|1
argument_list|)
expr_stmt|;
name|setElement
argument_list|(
name|chunk
argument_list|,
name|HEADER_SIZE
operator|+
name|occupied
argument_list|,
name|element
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
name|size
condition|)
block|{
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Object
index|[]
name|prev
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|)
block|{
return|return
operator|(
name|Object
index|[]
operator|)
name|chunk
index|[
literal|0
index|]
return|;
block|}
specifier|private
specifier|static
name|void
name|setPrev
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|,
name|Object
index|[]
name|prev
parameter_list|)
block|{
name|chunk
index|[
literal|0
index|]
operator|=
name|prev
expr_stmt|;
block|}
specifier|private
specifier|static
name|Object
index|[]
name|next
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|)
block|{
return|return
operator|(
name|Object
index|[]
operator|)
name|chunk
index|[
literal|1
index|]
return|;
block|}
specifier|private
specifier|static
name|void
name|setNext
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|,
name|Object
index|[]
name|next
parameter_list|)
block|{
assert|assert
name|chunk
operator|!=
name|next
assert|;
name|chunk
index|[
literal|1
index|]
operator|=
name|next
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|occupied
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|chunk
index|[
literal|2
index|]
return|;
block|}
specifier|private
specifier|static
name|void
name|setOccupied
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|chunk
index|[
literal|2
index|]
operator|=
name|INTEGERS
index|[
name|size
index|]
expr_stmt|;
block|}
specifier|private
specifier|static
name|Object
name|element
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|chunk
index|[
name|index
index|]
return|;
block|}
specifier|private
specifier|static
name|void
name|setElement
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|chunk
index|[
name|index
index|]
operator|=
name|element
expr_stmt|;
block|}
specifier|private
name|ChunkListIterator
name|locate
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ChunkListIterator
argument_list|()
return|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|chunk
init|=
name|first
init|;
condition|;
control|)
block|{
specifier|final
name|int
name|occupied
init|=
name|occupied
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nextN
init|=
name|n
operator|+
name|occupied
decl_stmt|;
specifier|final
name|Object
index|[]
name|next
init|=
name|next
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextN
operator|>
name|index
operator|||
name|next
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ChunkListIterator
argument_list|(
name|chunk
argument_list|,
name|n
argument_list|,
name|index
operator|-
name|n
operator|-
literal|1
operator|+
name|HEADER_SIZE
argument_list|,
name|occupied
operator|+
name|HEADER_SIZE
argument_list|)
return|;
block|}
name|n
operator|=
name|nextN
expr_stmt|;
name|chunk
operator|=
name|next
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ChunkListIterator
implements|implements
name|ListIterator
argument_list|<
name|E
argument_list|>
block|{
specifier|private
name|Object
index|[]
name|chunk
decl_stmt|;
specifier|private
name|int
name|startIndex
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
name|ChunkListIterator
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ChunkListIterator
parameter_list|(
name|Object
index|[]
name|chunk
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|chunk
operator|=
name|chunk
expr_stmt|;
name|this
operator|.
name|startIndex
operator|=
name|startIndex
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|offset
operator|+
literal|1
operator|<
name|end
operator|||
operator|(
name|chunk
operator|==
literal|null
condition|?
name|first
operator|!=
literal|null
else|:
name|ChunkList
operator|.
name|next
argument_list|(
name|chunk
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|E
name|next
parameter_list|()
block|{
operator|++
name|offset
expr_stmt|;
assert|assert
name|offset
operator|<=
name|end
assert|;
if|if
condition|(
name|offset
operator|==
name|end
condition|)
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|chunk
operator|=
name|first
expr_stmt|;
block|}
else|else
block|{
name|chunk
operator|=
name|ChunkList
operator|.
name|next
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
name|startIndex
operator|+=
operator|(
name|end
operator|-
name|HEADER_SIZE
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|offset
operator|=
name|HEADER_SIZE
expr_stmt|;
name|end
operator|=
name|occupied
argument_list|(
name|chunk
argument_list|)
operator|+
name|HEADER_SIZE
expr_stmt|;
block|}
return|return
operator|(
name|E
operator|)
name|element
argument_list|(
name|chunk
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasPrevious
parameter_list|()
block|{
return|return
name|offset
operator|>=
name|HEADER_SIZE
operator|||
name|ChunkList
operator|.
name|prev
argument_list|(
name|chunk
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|E
name|previous
parameter_list|()
block|{
operator|--
name|offset
expr_stmt|;
if|if
condition|(
name|offset
operator|==
name|HEADER_SIZE
operator|-
literal|1
condition|)
block|{
name|chunk
operator|=
name|chunk
operator|==
literal|null
condition|?
name|last
else|:
name|ChunkList
operator|.
name|prev
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|end
operator|=
name|occupied
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
name|startIndex
operator|-=
name|end
expr_stmt|;
name|offset
operator|=
name|end
operator|-
literal|1
expr_stmt|;
block|}
return|return
operator|(
name|E
operator|)
name|element
argument_list|(
name|chunk
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|public
name|int
name|nextIndex
parameter_list|()
block|{
return|return
name|startIndex
operator|+
operator|(
name|offset
operator|-
name|HEADER_SIZE
operator|)
operator|+
literal|1
return|;
block|}
specifier|public
name|int
name|previousIndex
parameter_list|()
block|{
return|return
name|startIndex
operator|+
operator|(
name|offset
operator|-
name|HEADER_SIZE
operator|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
operator|--
name|size
expr_stmt|;
if|if
condition|(
name|end
operator|==
name|HEADER_SIZE
operator|+
literal|1
condition|)
block|{
comment|// Chunk is now empty.
specifier|final
name|Object
index|[]
name|prev
init|=
name|prev
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|next
init|=
name|ChunkList
operator|.
name|next
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|prev
expr_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|first
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|setNext
argument_list|(
name|prev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|chunk
operator|=
literal|null
expr_stmt|;
name|end
operator|=
name|HEADER_SIZE
expr_stmt|;
name|offset
operator|=
name|end
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|next
expr_stmt|;
name|setPrev
argument_list|(
name|next
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNext
argument_list|(
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|setPrev
argument_list|(
name|next
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
name|chunk
operator|=
name|next
expr_stmt|;
name|offset
operator|=
name|HEADER_SIZE
expr_stmt|;
name|end
operator|=
name|HEADER_SIZE
operator|+
name|occupied
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// Move existing contents down one.
name|System
operator|.
name|arraycopy
argument_list|(
name|chunk
argument_list|,
name|offset
operator|+
literal|1
argument_list|,
name|chunk
argument_list|,
name|offset
argument_list|,
name|end
operator|-
name|offset
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|--
name|end
expr_stmt|;
name|setElement
argument_list|(
name|chunk
argument_list|,
name|end
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// allow gc
name|setOccupied
argument_list|(
name|chunk
argument_list|,
name|end
operator|-
name|HEADER_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|==
name|end
condition|)
block|{
specifier|final
name|Object
index|[]
name|next
init|=
name|ChunkList
operator|.
name|next
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|startIndex
operator|+=
operator|(
name|end
operator|-
name|HEADER_SIZE
operator|)
expr_stmt|;
name|chunk
operator|=
name|next
expr_stmt|;
name|offset
operator|=
name|HEADER_SIZE
operator|-
literal|1
expr_stmt|;
name|end
operator|=
name|HEADER_SIZE
operator|+
name|occupied
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|set
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|setElement
argument_list|(
name|chunk
argument_list|,
name|offset
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
operator|||
name|end
operator|==
name|CHUNK_SIZE
operator|+
name|HEADER_SIZE
condition|)
block|{
comment|// FIXME We create a new chunk, but the next chunk might be
comment|// less than half full. We should consider using it.
name|Object
index|[]
name|newChunk
init|=
operator|new
name|Object
index|[
name|CHUNK_SIZE
operator|+
name|HEADER_SIZE
index|]
decl_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|setNext
argument_list|(
name|newChunk
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|setPrev
argument_list|(
name|first
argument_list|,
name|newChunk
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
name|newChunk
expr_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|newChunk
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|Object
index|[]
name|next
init|=
name|ChunkList
operator|.
name|next
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|setPrev
argument_list|(
name|newChunk
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|setNext
argument_list|(
name|chunk
argument_list|,
name|newChunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|newChunk
expr_stmt|;
block|}
else|else
block|{
name|setPrev
argument_list|(
name|next
argument_list|,
name|newChunk
argument_list|)
expr_stmt|;
name|setNext
argument_list|(
name|newChunk
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
name|startIndex
operator|+=
name|CHUNK_SIZE
expr_stmt|;
block|}
name|chunk
operator|=
name|newChunk
expr_stmt|;
name|end
operator|=
name|offset
operator|=
name|HEADER_SIZE
expr_stmt|;
block|}
else|else
block|{
comment|// Move existing contents up one.
name|System
operator|.
name|arraycopy
argument_list|(
name|chunk
argument_list|,
name|offset
argument_list|,
name|chunk
argument_list|,
name|offset
operator|+
literal|1
argument_list|,
name|end
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
name|setElement
argument_list|(
name|chunk
argument_list|,
name|offset
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//            ++offset;
operator|++
name|end
expr_stmt|;
name|setOccupied
argument_list|(
name|chunk
argument_list|,
name|end
operator|-
name|HEADER_SIZE
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ChunkList.java
end_comment

end_unit

