begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Map which contains more than one value per key.  *  *<p>You can either use a<code>MultiMap</code> as a regular map, or you can  * use the additional methods {@link #putMulti} and {@link #getMulti}. Values  * are returned in the order in which they were added.</p>  *  *<p>TODO jvs 21-Jul-2007: unit test for this class  *  * @author jhyde  * @version $Id$  * @since May 18, 2003  */
end_comment

begin_class
specifier|public
class|class
name|MultiMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Returns the number of keys in this MultiMap.      *      * @return number of keys in this MultiMap      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|Object
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
name|Object
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Returns a list of values for a given key; returns an empty list if not      * found.      *      * @post return != null      */
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|getMulti
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Object
name|o
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|ValueList
condition|)
block|{
return|return
operator|(
name|ValueList
argument_list|<
name|V
argument_list|>
operator|)
name|o
return|;
block|}
else|else
block|{
comment|// FIXME jvs 21-Jul-2007:  This list is immutable, meaning callers
comment|// have to avoid deleting from it.  That's inconsistent with
comment|// ValueList, which goes to the effort to support deletion.
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|V
operator|)
name|o
argument_list|)
return|;
block|}
block|}
comment|/**      * Adds a value for this key.      */
specifier|public
name|void
name|putMulti
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
specifier|final
name|Object
name|o
init|=
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
comment|// We knocked something out. It might be a list, or a singleton
comment|// object.
name|ValueList
argument_list|<
name|V
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|ValueList
condition|)
block|{
name|list
operator|=
operator|(
name|ValueList
argument_list|<
name|V
argument_list|>
operator|)
name|o
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
operator|new
name|ValueList
argument_list|<
name|V
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|(
name|V
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a value for this key.      */
specifier|public
name|boolean
name|removeMulti
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
specifier|final
name|Object
name|o
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
comment|// key not found, so nothing changed
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|o
operator|instanceof
name|ValueList
condition|)
block|{
name|ValueList
argument_list|<
name|V
argument_list|>
name|list
init|=
operator|(
name|ValueList
argument_list|<
name|V
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|remove
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// now just one value left, so forget the list, and
comment|// keep its only element
name|put
argument_list|(
name|key
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// have just removed the last value belonging to this
comment|// key, so remove the key
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// nothing changed
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|o
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// have just removed the last value belonging to this key,
comment|// so remove the key.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// the value they asked to remove was not the one present,
comment|// so nothing changed
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
comment|/**      * Like entrySet().iterator(), but returns one Map.Entry per value rather      * than one per key.      */
specifier|public
name|EntryIter
name|entryIterMulti
parameter_list|()
block|{
return|return
operator|new
name|EntryIter
argument_list|()
return|;
block|}
specifier|public
name|Object
name|remove
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**      * Holder class, ensures that user's values are never interpreted as      * multiple values.      */
specifier|private
specifier|static
class|class
name|ValueList
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ArrayList
argument_list|<
name|V
argument_list|>
block|{     }
comment|/**      * Implementation for entryIterMulti(). Note that this assumes that empty      * ValueLists will never be encountered, and also preserves this property      * when remove() is called.      */
specifier|private
class|class
name|EntryIter
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
name|K
name|key
decl_stmt|;
name|Iterator
argument_list|<
name|K
argument_list|>
name|keyIter
decl_stmt|;
name|List
argument_list|<
name|V
argument_list|>
name|valueList
decl_stmt|;
name|Iterator
argument_list|<
name|V
argument_list|>
name|valueIter
decl_stmt|;
name|EntryIter
parameter_list|()
block|{
name|keyIter
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|valueList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|valueIter
operator|=
name|valueList
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|nextKey
parameter_list|()
block|{
name|key
operator|=
name|keyIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|valueList
operator|=
name|getMulti
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|valueIter
operator|=
name|valueList
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|keyIter
operator|.
name|hasNext
argument_list|()
operator|||
name|valueIter
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|valueIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextKey
argument_list|()
expr_stmt|;
block|}
specifier|final
name|K
name|savedKey
init|=
name|key
decl_stmt|;
specifier|final
name|V
name|value
init|=
name|valueIter
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|savedKey
return|;
block|}
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|valueList
operator|instanceof
name|ValueList
condition|)
block|{
name|valueIter
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|valueList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|keyIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|keyIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End MultiMap.java
end_comment

end_unit

