begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Filtered iterator class: an iterator that includes only elements that are  * instanceof a specified class. Apologies for the dorky name.  *  * @see Util#cast(List, Class)  * @see Util#cast(Iterator, Class)  */
end_comment

begin_class
specifier|public
class|class
name|Filterator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
comment|//~ Instance fields --------------------------------------------------------
name|Class
argument_list|<
name|E
argument_list|>
name|includeFilter
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|iterator
decl_stmt|;
name|E
name|lookAhead
decl_stmt|;
name|boolean
name|ready
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|Filterator
parameter_list|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|iterator
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|includeFilter
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|this
operator|.
name|includeFilter
operator|=
name|includeFilter
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|ready
condition|)
block|{
comment|// Allow hasNext() to be called repeatedly.
return|return
literal|true
return|;
block|}
comment|// look ahead to see if there are any additional elements
try|try
block|{
name|lookAhead
operator|=
name|next
argument_list|()
expr_stmt|;
name|ready
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
name|ready
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
name|ready
condition|)
block|{
name|E
name|o
init|=
name|lookAhead
decl_stmt|;
name|ready
operator|=
literal|false
expr_stmt|;
return|return
name|o
return|;
block|}
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|o
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeFilter
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
name|includeFilter
operator|.
name|cast
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End Filterator.java
end_comment

end_unit

