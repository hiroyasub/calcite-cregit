begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Set based on object identity, like {@link IdentityHashMap}.  */
end_comment

begin_class
specifier|public
class|class
name|IdentityHashSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractSet
argument_list|<
name|E
argument_list|>
implements|implements
name|Set
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|E
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
comment|// Dummy value to associate with an Object in the backing Map
specifier|private
specifier|static
specifier|final
name|Object
name|PRESENT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**      * Creates an empty IdentityHashSet.      */
specifier|public
name|IdentityHashSet
parameter_list|()
block|{
name|map
operator|=
operator|new
name|IdentityHashMap
argument_list|<
name|E
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates an IdentityHashSet containing the elements of the specified      * collection.      *      * @param c the collection whose elements are to be placed into this set      */
specifier|public
name|IdentityHashSet
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|map
operator|=
operator|new
name|IdentityHashMap
argument_list|<
name|E
argument_list|,
name|Object
argument_list|>
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|+
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|map
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|//noinspection SuspiciousMethodCalls
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
comment|//noinspection SuspiciousToArrayCall
return|return
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|map
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|PRESENT
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|remove
argument_list|(
name|o
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End IdentityHashSet.java
end_comment

end_unit

