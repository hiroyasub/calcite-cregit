begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util14
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * ZonelessDatetime is an abstract class for dates, times, or timestamps that  * contain a zoneless time value.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ZonelessDatetime
implements|implements
name|BasicDatetime
implements|,
name|Serializable
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * SerialVersionUID created with JDK 1.5 serialver tool.    */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1274713852537224763L
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/**    * Treat this as a protected field. It is only made public to simplify Java    * code generation.    */
specifier|public
name|long
name|internalTime
decl_stmt|;
comment|// The following fields are workspace and are not serialized.
specifier|protected
specifier|transient
name|Calendar
name|tempCal
decl_stmt|;
specifier|protected
specifier|transient
name|DateFormat
name|tempFormatter
decl_stmt|;
specifier|protected
specifier|transient
name|String
name|lastFormat
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|// implement BasicDatetime
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|internalTime
return|;
block|}
comment|// implement BasicDatetime
specifier|public
name|void
name|setZonelessTime
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|internalTime
operator|=
name|value
expr_stmt|;
block|}
comment|// implement BasicDatetime
specifier|public
name|void
name|setZonedTime
parameter_list|(
name|long
name|value
parameter_list|,
name|TimeZone
name|zone
parameter_list|)
block|{
name|this
operator|.
name|internalTime
operator|=
name|value
operator|+
name|zone
operator|.
name|getOffset
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the time portion of this zoneless datetime.    */
specifier|public
name|long
name|getTimeValue
parameter_list|()
block|{
comment|// Value must be non-negative, even for negative timestamps, and
comment|// unfortunately the '%' operator returns a negative value if its LHS
comment|// is negative.
name|long
name|timePart
init|=
name|internalTime
operator|%
name|DateTimeUtil
operator|.
name|MILLIS_PER_DAY
decl_stmt|;
if|if
condition|(
name|timePart
operator|<
literal|0
condition|)
block|{
name|timePart
operator|+=
name|DateTimeUtil
operator|.
name|MILLIS_PER_DAY
expr_stmt|;
block|}
return|return
name|timePart
return|;
block|}
comment|/**    * Gets the date portion of this zoneless datetime.    */
specifier|public
name|long
name|getDateValue
parameter_list|()
block|{
return|return
name|internalTime
operator|-
name|getTimeValue
argument_list|()
return|;
block|}
comment|/**    * Clears the date component of this datetime    */
specifier|public
name|void
name|clearDate
parameter_list|()
block|{
name|internalTime
operator|=
name|getTimeValue
argument_list|()
expr_stmt|;
block|}
comment|/**    * Clears the time component of this datetime    */
specifier|public
name|void
name|clearTime
parameter_list|()
block|{
name|internalTime
operator|=
name|getDateValue
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets the value of this datetime as a milliseconds value for {@link    * java.sql.Time}.    *    * @param zone time zone in which to generate a time value for    */
specifier|public
name|long
name|getJdbcTime
parameter_list|(
name|TimeZone
name|zone
parameter_list|)
block|{
name|long
name|timeValue
init|=
name|getTimeValue
argument_list|()
decl_stmt|;
return|return
name|timeValue
operator|-
name|zone
operator|.
name|getOffset
argument_list|(
name|timeValue
argument_list|)
return|;
block|}
comment|/**    * Gets the value of this datetime as a milliseconds value for {@link    * java.sql.Date}.    *    * @param zone time zone in which to generate a time value for    */
specifier|public
name|long
name|getJdbcDate
parameter_list|(
name|TimeZone
name|zone
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|getCalendar
argument_list|(
name|DateTimeUtil
operator|.
name|gmtZone
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|getDateValue
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|year
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|int
name|doy
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|setTimeZone
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|year
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|doy
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
comment|/**    * Gets the value of this datetime as a milliseconds value for {@link    * java.sql.Timestamp}.    *    * @param zone time zone in which to generate a time value for    */
specifier|public
name|long
name|getJdbcTimestamp
parameter_list|(
name|TimeZone
name|zone
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|getCalendar
argument_list|(
name|DateTimeUtil
operator|.
name|gmtZone
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|internalTime
argument_list|)
expr_stmt|;
name|int
name|year
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|int
name|doy
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
name|int
name|hour
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
decl_stmt|;
name|int
name|minute
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
decl_stmt|;
name|int
name|second
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
decl_stmt|;
name|int
name|millis
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|)
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|setTimeZone
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|year
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|doy
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|hour
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|minute
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
name|millis
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
comment|/**    * Returns this datetime as a Jdbc object    */
specifier|public
specifier|abstract
name|Object
name|toJdbcObject
parameter_list|()
function_decl|;
comment|/**    * Gets a temporary Calendar set to the specified time zone. The same    * Calendar is returned on subsequent calls.    */
specifier|protected
name|Calendar
name|getCalendar
parameter_list|(
name|TimeZone
name|zone
parameter_list|)
block|{
if|if
condition|(
name|tempCal
operator|==
literal|null
condition|)
block|{
name|tempCal
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|zone
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempCal
operator|.
name|setTimeZone
argument_list|(
name|zone
argument_list|)
expr_stmt|;
block|}
return|return
name|tempCal
return|;
block|}
comment|/**    * Gets a temporary formatter for a zoneless date time. The same formatter    * is returned on subsequent calls.    *    * @param format a {@link java.text.SimpleDateFormat} format string    */
specifier|protected
name|DateFormat
name|getFormatter
parameter_list|(
name|String
name|format
parameter_list|)
block|{
if|if
condition|(
operator|(
name|tempFormatter
operator|!=
literal|null
operator|)
operator|&&
name|lastFormat
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
return|return
name|tempFormatter
return|;
block|}
name|tempFormatter
operator|=
name|DateTimeUtil
operator|.
name|newDateFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|tempFormatter
operator|.
name|setTimeZone
argument_list|(
name|DateTimeUtil
operator|.
name|gmtZone
argument_list|)
expr_stmt|;
name|lastFormat
operator|=
name|format
expr_stmt|;
return|return
name|tempFormatter
return|;
block|}
block|}
end_class

begin_comment
comment|// End ZonelessDatetime.java
end_comment

end_unit

