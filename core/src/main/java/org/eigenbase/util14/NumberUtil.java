begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util14
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility functions for working with numbers This class is JDK 1.4 compatible.  */
end_comment

begin_class
specifier|public
class|class
name|NumberUtil
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|floatFormatter
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|doubleFormatter
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
index|[]
name|bigIntTenPow
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
index|[]
name|bigIntMinUnscaled
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
index|[]
name|bigIntMaxUnscaled
decl_stmt|;
comment|// For JDK 1.4 compatibility
specifier|private
specifier|static
specifier|final
name|BigInteger
name|bigIntTen
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Byte
name|MIN_BYTE
init|=
operator|new
name|Byte
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Byte
name|MAX_BYTE
init|=
operator|new
name|Byte
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Integer
name|MIN_INTEGER
init|=
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Integer
name|MAX_INTEGER
init|=
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Short
name|MIN_SHORT
init|=
operator|new
name|Short
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Short
name|MAX_SHORT
init|=
operator|new
name|Short
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Long
name|MIN_LONG
init|=
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Long
name|MAX_LONG
init|=
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Float
name|MIN_FLOAT
init|=
operator|new
name|Float
argument_list|(
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Float
name|MAX_FLOAT
init|=
operator|new
name|Float
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Double
name|MIN_DOUBLE
init|=
operator|new
name|Double
argument_list|(
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Double
name|MAX_DOUBLE
init|=
operator|new
name|Double
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Integer
name|INTEGER_ZERO
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Integer
name|INTEGER_ONE
init|=
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
static|static
block|{
comment|// TODO: DecimalFormat uses ROUND_HALF_EVEN, not ROUND_HALF_UP
comment|// Float: precision of 7 (6 digits after .)
name|floatFormatter
operator|=
operator|new
name|DecimalFormat
argument_list|()
expr_stmt|;
name|floatFormatter
operator|.
name|applyPattern
argument_list|(
literal|"0.######E0"
argument_list|)
expr_stmt|;
comment|// Double: precision of 16 (15 digits after .)
name|doubleFormatter
operator|=
operator|new
name|DecimalFormat
argument_list|()
expr_stmt|;
name|doubleFormatter
operator|.
name|applyPattern
argument_list|(
literal|"0.###############E0"
argument_list|)
expr_stmt|;
name|bigIntTenPow
operator|=
operator|new
name|BigInteger
index|[
literal|20
index|]
expr_stmt|;
name|bigIntMinUnscaled
operator|=
operator|new
name|BigInteger
index|[
literal|20
index|]
expr_stmt|;
name|bigIntMaxUnscaled
operator|=
operator|new
name|BigInteger
index|[
literal|20
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigIntTenPow
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bigIntTenPow
index|[
name|i
index|]
operator|=
name|bigIntTen
operator|.
name|pow
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|19
condition|)
block|{
name|bigIntMaxUnscaled
index|[
name|i
index|]
operator|=
name|bigIntTenPow
index|[
name|i
index|]
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|bigIntMinUnscaled
index|[
name|i
index|]
operator|=
name|bigIntMaxUnscaled
index|[
name|i
index|]
operator|.
name|negate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bigIntMaxUnscaled
index|[
name|i
index|]
operator|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|bigIntMinUnscaled
index|[
name|i
index|]
operator|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
specifier|static
specifier|final
name|BigInteger
name|powTen
parameter_list|(
name|int
name|exponent
parameter_list|)
block|{
if|if
condition|(
operator|(
name|exponent
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|exponent
operator|<
name|bigIntTenPow
operator|.
name|length
operator|)
condition|)
block|{
return|return
name|bigIntTenPow
index|[
name|exponent
index|]
return|;
block|}
else|else
block|{
return|return
name|bigIntTen
operator|.
name|pow
argument_list|(
name|exponent
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|BigInteger
name|getMaxUnscaled
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
return|return
name|bigIntMaxUnscaled
index|[
name|precision
index|]
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BigInteger
name|getMinUnscaled
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
return|return
name|bigIntMinUnscaled
index|[
name|precision
index|]
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BigDecimal
name|rescaleBigDecimal
parameter_list|(
name|BigDecimal
name|bd
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
if|if
condition|(
name|bd
operator|!=
literal|null
condition|)
block|{
name|bd
operator|=
name|bd
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|BigDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
expr_stmt|;
block|}
return|return
name|bd
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Number
name|number
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|BigDecimal
name|bd
init|=
name|toBigDecimal
argument_list|(
name|number
argument_list|)
decl_stmt|;
return|return
name|rescaleBigDecimal
argument_list|(
name|bd
argument_list|,
name|scale
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|number
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|number
return|;
block|}
if|else if
condition|(
operator|(
name|number
operator|instanceof
name|Double
operator|)
operator|||
operator|(
name|number
operator|instanceof
name|Float
operator|)
condition|)
block|{
comment|// For JDK 1.4 compatibility
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|number
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
comment|//return BigDecimal.valueOf(((Number) number).doubleValue());
block|}
if|else if
condition|(
name|number
operator|instanceof
name|BigInteger
condition|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
name|BigInteger
operator|)
name|number
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|number
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * @return whether a BigDecimal is a valid Farrago decimal. If a    * BigDecimal's unscaled value overflows a long, then it is not a valid    * Farrago decimal.    */
specifier|public
specifier|static
name|boolean
name|isValidDecimal
parameter_list|(
name|BigDecimal
name|bd
parameter_list|)
block|{
name|BigInteger
name|usv
init|=
name|bd
operator|.
name|unscaledValue
argument_list|()
decl_stmt|;
name|long
name|usvl
init|=
name|usv
operator|.
name|longValue
argument_list|()
decl_stmt|;
return|return
name|usv
operator|.
name|equals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|usvl
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NumberFormat
name|getApproxFormatter
parameter_list|(
name|boolean
name|isFloat
parameter_list|)
block|{
return|return
operator|(
name|isFloat
operator|)
condition|?
name|floatFormatter
else|:
name|doubleFormatter
return|;
block|}
specifier|public
specifier|static
name|long
name|round
parameter_list|(
name|double
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
return|return
operator|(
name|long
operator|)
operator|(
name|d
operator|-
literal|0.5
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|long
operator|)
operator|(
name|d
operator|+
literal|0.5
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Double
name|add
parameter_list|(
name|Double
name|a
parameter_list|,
name|Double
name|b
parameter_list|)
block|{
if|if
condition|(
operator|(
name|a
operator|==
literal|null
operator|)
operator|||
operator|(
name|b
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// For JDK 1.4 compatibility
return|return
operator|new
name|Double
argument_list|(
name|a
operator|.
name|doubleValue
argument_list|()
operator|+
name|b
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
comment|//return Double.valueOf(a.doubleValue() + b.doubleValue());
block|}
specifier|public
specifier|static
name|Double
name|divide
parameter_list|(
name|Double
name|a
parameter_list|,
name|Double
name|b
parameter_list|)
block|{
if|if
condition|(
operator|(
name|a
operator|==
literal|null
operator|)
operator|||
operator|(
name|b
operator|==
literal|null
operator|)
operator|||
operator|(
name|b
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// For JDK 1.4 compatibility
return|return
operator|new
name|Double
argument_list|(
name|a
operator|.
name|doubleValue
argument_list|()
operator|/
name|b
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
comment|// return Double.valueOf(a.doubleValue() / b.doubleValue());
block|}
specifier|public
specifier|static
name|Double
name|multiply
parameter_list|(
name|Double
name|a
parameter_list|,
name|Double
name|b
parameter_list|)
block|{
if|if
condition|(
operator|(
name|a
operator|==
literal|null
operator|)
operator|||
operator|(
name|b
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// For JDK 1.4 compatibility
return|return
operator|new
name|Double
argument_list|(
name|a
operator|.
name|doubleValue
argument_list|()
operator|*
name|b
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
comment|//return Double.valueOf(a.doubleValue() * b.doubleValue());
block|}
block|}
end_class

begin_comment
comment|// End NumberUtil.java
end_comment

end_unit

