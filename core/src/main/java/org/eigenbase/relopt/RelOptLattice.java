begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|relopt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|config
operator|.
name|OptiqConnectionConfig
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationKey
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|prepare
operator|.
name|OptiqPrepareImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Use of a lattice by the query optimizer.  */
end_comment

begin_class
specifier|public
class|class
name|RelOptLattice
block|{
specifier|private
specifier|final
name|Lattice
name|lattice
decl_stmt|;
specifier|public
specifier|final
name|RelOptTable
name|starRelOptTable
decl_stmt|;
specifier|public
name|RelOptLattice
parameter_list|(
name|Lattice
name|lattice
parameter_list|,
name|RelOptTable
name|starRelOptTable
parameter_list|)
block|{
name|this
operator|.
name|lattice
operator|=
name|lattice
expr_stmt|;
name|this
operator|.
name|starRelOptTable
operator|=
name|starRelOptTable
expr_stmt|;
block|}
specifier|public
name|RelOptTable
name|rootTable
parameter_list|()
block|{
return|return
name|lattice
operator|.
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|scan
operator|.
name|getTable
argument_list|()
return|;
block|}
comment|/** Rewrites a relational expression to use a lattice.    *    *<p>Returns null if a rewrite is not possible.    *    * @param node Relational expression    * @return Rewritten query    */
specifier|public
name|RelNode
name|rewrite
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
name|RelOptMaterialization
operator|.
name|tryUseStar
argument_list|(
name|node
argument_list|,
name|starRelOptTable
argument_list|)
return|;
block|}
comment|/** Retrieves a materialized table that will satisfy an aggregate query on    * the star table.    *    *<p>The current implementation creates a materialization and populates it.    *    *<p>Future implementations might return materializations at a different    * level of aggregation, from which the desired result can be obtained by    * rolling up.    *    * @param planner Current planner    * @param groupSet Grouping key    * @param aggCallList Aggregate functions    * @return Materialized table    */
specifier|public
name|OptiqSchema
operator|.
name|TableEntry
name|getAggregate
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|BitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCallList
parameter_list|)
block|{
specifier|final
name|OptiqConnectionConfig
name|config
init|=
name|planner
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|OptiqConnectionConfig
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
operator|||
operator|!
name|config
operator|.
name|createMaterializations
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|sql
init|=
name|sql
argument_list|(
name|starRelOptTable
argument_list|,
name|groupSet
argument_list|,
name|aggCallList
argument_list|)
decl_stmt|;
specifier|final
name|MaterializationService
name|service
init|=
name|MaterializationService
operator|.
name|instance
argument_list|()
decl_stmt|;
specifier|final
name|OptiqSchema
name|schema
init|=
name|starRelOptTable
operator|.
name|unwrap
argument_list|(
name|OptiqSchema
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MaterializationKey
name|materializationKey
init|=
name|service
operator|.
name|defineMaterialization
argument_list|(
name|schema
argument_list|,
name|sql
argument_list|,
name|schema
operator|.
name|path
argument_list|(
literal|null
argument_list|)
argument_list|,
literal|"m"
operator|+
name|groupSet
argument_list|)
decl_stmt|;
return|return
name|service
operator|.
name|checkValid
argument_list|(
name|materializationKey
argument_list|)
return|;
block|}
specifier|private
name|String
name|sql
parameter_list|(
name|RelOptTable
name|starRelOptTable
parameter_list|,
name|BitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCallList
parameter_list|)
block|{
name|BitSet
name|columns
init|=
operator|(
name|BitSet
operator|)
name|groupSet
operator|.
name|clone
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|call
range|:
name|aggCallList
control|)
block|{
for|for
control|(
name|int
name|arg
range|:
name|call
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|columns
operator|.
name|set
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Figure out which nodes are needed. Use a node if its columns are used
comment|// or if has a child whose columns are used.
name|List
argument_list|<
name|Lattice
operator|.
name|Node
argument_list|>
name|usedNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Lattice
operator|.
name|Node
name|node
range|:
name|lattice
operator|.
name|nodes
control|)
block|{
if|if
condition|(
name|BitSets
operator|.
name|range
argument_list|(
name|node
operator|.
name|startCol
argument_list|,
name|node
operator|.
name|endCol
argument_list|)
operator|.
name|intersects
argument_list|(
name|columns
argument_list|)
condition|)
block|{
name|use
argument_list|(
name|usedNodes
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|SqlDialect
name|dialect
init|=
name|SqlDialect
operator|.
name|DatabaseProduct
operator|.
name|OPTIQ
operator|.
name|getDialect
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"SELECT DISTINCT "
argument_list|)
expr_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|BitSets
operator|.
name|toIter
argument_list|(
name|groupSet
argument_list|)
control|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|starRelOptTable
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|dialect
operator|.
name|quoteIdentifier
argument_list|(
name|buf
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\nFROM "
argument_list|)
expr_stmt|;
for|for
control|(
name|Lattice
operator|.
name|Node
name|node
range|:
name|usedNodes
control|)
block|{
if|if
condition|(
name|node
operator|.
name|parent
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\nJOIN "
argument_list|)
expr_stmt|;
block|}
name|dialect
operator|.
name|quoteIdentifier
argument_list|(
name|buf
argument_list|,
name|node
operator|.
name|scan
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" AS "
argument_list|)
expr_stmt|;
name|dialect
operator|.
name|quoteIdentifier
argument_list|(
name|buf
argument_list|,
name|node
operator|.
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|parent
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" ON "
argument_list|)
expr_stmt|;
name|k
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|IntPair
name|pair
range|:
name|node
operator|.
name|link
control|)
block|{
if|if
condition|(
name|k
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
name|dialect
operator|.
name|quoteIdentifier
argument_list|(
name|buf
argument_list|,
name|lattice
operator|.
name|getColumn
argument_list|(
name|node
operator|.
name|parent
operator|.
name|startCol
operator|+
name|pair
operator|.
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|dialect
operator|.
name|quoteIdentifier
argument_list|(
name|buf
argument_list|,
name|lattice
operator|.
name|getColumn
argument_list|(
name|node
operator|.
name|startCol
operator|+
name|pair
operator|.
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|OptiqPrepareImpl
operator|.
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Lattice SQL:\n"
operator|+
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|use
parameter_list|(
name|List
argument_list|<
name|Lattice
operator|.
name|Node
argument_list|>
name|usedNodes
parameter_list|,
name|Lattice
operator|.
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|usedNodes
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|parent
operator|!=
literal|null
condition|)
block|{
name|use
argument_list|(
name|usedNodes
argument_list|,
name|node
operator|.
name|parent
argument_list|)
expr_stmt|;
block|}
name|usedNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RelOptLattice.java
end_comment

end_unit

