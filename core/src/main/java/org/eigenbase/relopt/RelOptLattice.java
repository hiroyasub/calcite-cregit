begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|relopt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Use of a lattice by the query optimizer.  */
end_comment

begin_class
specifier|public
class|class
name|RelOptLattice
block|{
specifier|private
specifier|final
name|Lattice
name|lattice
decl_stmt|;
specifier|private
specifier|final
name|RelOptTable
name|starRelOptTable
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RelOptMaterialization
argument_list|>
name|materializations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|public
name|RelOptLattice
parameter_list|(
name|Lattice
name|lattice
parameter_list|,
name|RelOptTable
name|starRelOptTable
parameter_list|)
block|{
name|this
operator|.
name|lattice
operator|=
name|lattice
expr_stmt|;
name|this
operator|.
name|starRelOptTable
operator|=
name|starRelOptTable
expr_stmt|;
block|}
specifier|public
name|RelOptTable
name|rootTable
parameter_list|()
block|{
return|return
name|lattice
operator|.
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|scan
operator|.
name|getTable
argument_list|()
return|;
block|}
comment|/** Rewrites a relational expression to use a lattice.    *    *<p>Returns null if a rewrite is not possible.    *    * @param node Relational expression    * @return Rewritten query    */
specifier|public
name|RelNode
name|rewrite
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
name|RelOptMaterialization
operator|.
name|tryUseStar
argument_list|(
name|node
argument_list|,
name|starRelOptTable
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelOptLattice.java
end_comment

end_unit

