begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Concrete implementation of {@link CalciteSchema} that caches tables,  * functions and sub-schemas.  */
end_comment

begin_class
class|class
name|CachingCalciteSchema
extends|extends
name|CalciteSchema
block|{
specifier|private
specifier|final
name|Cached
argument_list|<
name|SubSchemaCache
argument_list|>
name|implicitSubSchemaCache
decl_stmt|;
specifier|private
specifier|final
name|Cached
argument_list|<
name|NameSet
argument_list|>
name|implicitTableCache
decl_stmt|;
specifier|private
specifier|final
name|Cached
argument_list|<
name|NameSet
argument_list|>
name|implicitFunctionCache
decl_stmt|;
specifier|private
name|boolean
name|cache
init|=
literal|true
decl_stmt|;
comment|/** Creates a CachingCalciteSchema. */
name|CachingCalciteSchema
parameter_list|(
name|CalciteSchema
name|parent
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
name|schema
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CachingCalciteSchema
parameter_list|(
name|CalciteSchema
name|parent
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|NameMap
argument_list|<
name|CalciteSchema
argument_list|>
name|subSchemaMap
parameter_list|,
name|NameMap
argument_list|<
name|TableEntry
argument_list|>
name|tableMap
parameter_list|,
name|NameMap
argument_list|<
name|LatticeEntry
argument_list|>
name|latticeMap
parameter_list|,
name|NameMultimap
argument_list|<
name|FunctionEntry
argument_list|>
name|functionMap
parameter_list|,
name|NameSet
name|functionNames
parameter_list|,
name|NameMap
argument_list|<
name|FunctionEntry
argument_list|>
name|nullaryFunctionMap
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|schema
argument_list|,
name|name
argument_list|,
name|subSchemaMap
argument_list|,
name|tableMap
argument_list|,
name|latticeMap
argument_list|,
name|functionMap
argument_list|,
name|functionNames
argument_list|,
name|nullaryFunctionMap
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|implicitSubSchemaCache
operator|=
operator|new
name|AbstractCached
argument_list|<
name|SubSchemaCache
argument_list|>
argument_list|()
block|{
specifier|public
name|SubSchemaCache
name|build
parameter_list|()
block|{
return|return
operator|new
name|SubSchemaCache
argument_list|(
name|CachingCalciteSchema
operator|.
name|this
argument_list|,
name|CachingCalciteSchema
operator|.
name|this
operator|.
name|schema
operator|.
name|getSubSchemaNames
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|implicitTableCache
operator|=
operator|new
name|AbstractCached
argument_list|<
name|NameSet
argument_list|>
argument_list|()
block|{
specifier|public
name|NameSet
name|build
parameter_list|()
block|{
return|return
name|NameSet
operator|.
name|immutableCopyOf
argument_list|(
name|CachingCalciteSchema
operator|.
name|this
operator|.
name|schema
operator|.
name|getTableNames
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|implicitFunctionCache
operator|=
operator|new
name|AbstractCached
argument_list|<
name|NameSet
argument_list|>
argument_list|()
block|{
specifier|public
name|NameSet
name|build
parameter_list|()
block|{
return|return
name|NameSet
operator|.
name|immutableCopyOf
argument_list|(
name|CachingCalciteSchema
operator|.
name|this
operator|.
name|schema
operator|.
name|getFunctionNames
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
name|void
name|setCache
parameter_list|(
name|boolean
name|cache
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|==
name|this
operator|.
name|cache
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|implicitSubSchemaCache
operator|.
name|enable
argument_list|(
name|now
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|implicitTableCache
operator|.
name|enable
argument_list|(
name|now
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|implicitFunctionCache
operator|.
name|enable
argument_list|(
name|now
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isCacheEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|cache
return|;
block|}
specifier|protected
name|CalciteSchema
name|getImplicitSubSchema
parameter_list|(
name|String
name|schemaName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|SubSchemaCache
name|subSchemaCache
init|=
name|implicitSubSchemaCache
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
comment|//noinspection LoopStatementThatDoesntLoop
for|for
control|(
name|String
name|schemaName2
range|:
name|subSchemaCache
operator|.
name|names
operator|.
name|range
argument_list|(
name|schemaName
argument_list|,
name|caseSensitive
argument_list|)
control|)
block|{
return|return
name|subSchemaCache
operator|.
name|cache
operator|.
name|getUnchecked
argument_list|(
name|schemaName2
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Adds a child schema of this schema. */
specifier|public
name|CalciteSchema
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
specifier|final
name|CalciteSchema
name|calciteSchema
init|=
operator|new
name|CachingCalciteSchema
argument_list|(
name|this
argument_list|,
name|schema
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|subSchemaMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|calciteSchema
argument_list|)
expr_stmt|;
return|return
name|calciteSchema
return|;
block|}
specifier|protected
name|TableEntry
name|getImplicitTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|NameSet
name|implicitTableNames
init|=
name|implicitTableCache
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tableName2
range|:
name|implicitTableNames
operator|.
name|range
argument_list|(
name|tableName
argument_list|,
name|caseSensitive
argument_list|)
control|)
block|{
specifier|final
name|Table
name|table
init|=
name|schema
operator|.
name|getTable
argument_list|(
name|tableName2
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|tableEntry
argument_list|(
name|tableName2
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|addImplicitSubSchemaToBuilder
parameter_list|(
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|builder
parameter_list|)
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|explicitSubSchemas
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|SubSchemaCache
name|subSchemaCache
init|=
name|implicitSubSchemaCache
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|subSchemaCache
operator|.
name|names
operator|.
name|iterable
argument_list|()
control|)
block|{
if|if
condition|(
name|explicitSubSchemas
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// explicit sub-schema wins.
continue|continue;
block|}
name|builder
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|subSchemaCache
operator|.
name|cache
operator|.
name|getUnchecked
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addImplicitTableToBuilder
parameter_list|(
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
parameter_list|)
block|{
comment|// Add implicit tables, case-sensitive.
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|NameSet
name|set
init|=
name|implicitTableCache
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|set
operator|.
name|iterable
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addImplicitFunctionsToBuilder
parameter_list|(
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Function
argument_list|>
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
comment|// Add implicit functions, case-insensitive.
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|NameSet
name|set
init|=
name|implicitFunctionCache
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name2
range|:
name|set
operator|.
name|range
argument_list|(
name|name
argument_list|,
name|caseSensitive
argument_list|)
control|)
block|{
specifier|final
name|Collection
argument_list|<
name|Function
argument_list|>
name|functions
init|=
name|schema
operator|.
name|getFunctions
argument_list|(
name|name2
argument_list|)
decl_stmt|;
if|if
condition|(
name|functions
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|functions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addImplicitFuncNamesToBuilder
parameter_list|(
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
parameter_list|)
block|{
comment|// Add implicit functions, case-sensitive.
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|NameSet
name|set
init|=
name|implicitFunctionCache
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|set
operator|.
name|iterable
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addImplicitTablesBasedOnNullaryFunctionsToBuilder
parameter_list|(
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
parameter_list|)
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|explicitTables
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|NameSet
name|set
init|=
name|implicitFunctionCache
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|set
operator|.
name|iterable
argument_list|()
control|)
block|{
comment|// explicit table wins.
if|if
condition|(
name|explicitTables
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Function
name|function
range|:
name|schema
operator|.
name|getFunctions
argument_list|(
name|s
argument_list|)
control|)
block|{
if|if
condition|(
name|function
operator|instanceof
name|TableMacro
operator|&&
name|function
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Table
name|table
init|=
operator|(
operator|(
name|TableMacro
operator|)
name|function
operator|)
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|TableEntry
name|getImplicitTableBasedOnNullaryFunction
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|NameSet
name|set
init|=
name|implicitFunctionCache
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|set
operator|.
name|range
argument_list|(
name|tableName
argument_list|,
name|caseSensitive
argument_list|)
control|)
block|{
for|for
control|(
name|Function
name|function
range|:
name|schema
operator|.
name|getFunctions
argument_list|(
name|s
argument_list|)
control|)
block|{
if|if
condition|(
name|function
operator|instanceof
name|TableMacro
operator|&&
name|function
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Table
name|table
init|=
operator|(
operator|(
name|TableMacro
operator|)
name|function
operator|)
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tableEntry
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|CalciteSchema
name|snapshot
parameter_list|(
name|CalciteSchema
name|parent
parameter_list|,
name|long
name|now
parameter_list|)
block|{
name|CalciteSchema
name|snapshot
init|=
operator|new
name|CachingCalciteSchema
argument_list|(
name|parent
argument_list|,
name|schema
operator|.
name|snapshot
argument_list|(
name|now
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|tableMap
argument_list|,
name|latticeMap
argument_list|,
name|functionMap
argument_list|,
name|functionNames
argument_list|,
name|nullaryFunctionMap
argument_list|,
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CalciteSchema
name|subSchema
range|:
name|subSchemaMap
operator|.
name|map
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|CalciteSchema
name|subSchemaSnapshot
init|=
name|subSchema
operator|.
name|snapshot
argument_list|(
name|snapshot
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|snapshot
operator|.
name|subSchemaMap
operator|.
name|put
argument_list|(
name|subSchema
operator|.
name|name
argument_list|,
name|subSchemaSnapshot
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshot
return|;
block|}
comment|/** Strategy for caching the value of an object and re-creating it if its    * value is out of date as of a given timestamp.    *    * @param<T> Type of cached object    */
specifier|private
interface|interface
name|Cached
parameter_list|<
name|T
parameter_list|>
block|{
comment|/** Returns the value; uses cached value if valid. */
name|T
name|get
parameter_list|(
name|long
name|now
parameter_list|)
function_decl|;
comment|/** Creates a new value. */
name|T
name|build
parameter_list|()
function_decl|;
comment|/** Called when CalciteSchema caching is enabled or disabled. */
name|void
name|enable
parameter_list|(
name|long
name|now
parameter_list|,
name|boolean
name|enabled
parameter_list|)
function_decl|;
block|}
comment|/** Implementation of {@link CachingCalciteSchema.Cached}    * that drives from {@link CachingCalciteSchema#cache}.    *    * @param<T> element type */
specifier|private
specifier|abstract
class|class
name|AbstractCached
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Cached
argument_list|<
name|T
argument_list|>
block|{
name|T
name|t
decl_stmt|;
name|long
name|checked
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|public
name|T
name|get
parameter_list|(
name|long
name|now
parameter_list|)
block|{
if|if
condition|(
operator|!
name|CachingCalciteSchema
operator|.
name|this
operator|.
name|cache
condition|)
block|{
return|return
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|checked
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|||
name|schema
operator|.
name|contentsHaveChangedSince
argument_list|(
name|checked
argument_list|,
name|now
argument_list|)
condition|)
block|{
name|t
operator|=
name|build
argument_list|()
expr_stmt|;
block|}
name|checked
operator|=
name|now
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|public
name|void
name|enable
parameter_list|(
name|long
name|now
parameter_list|,
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|t
operator|=
literal|null
expr_stmt|;
block|}
name|checked
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
block|}
comment|/** Information about the implicit sub-schemas of an {@link CalciteSchema}. */
specifier|private
specifier|static
class|class
name|SubSchemaCache
block|{
comment|/** The names of sub-schemas returned from the {@link Schema} SPI. */
specifier|final
name|NameSet
name|names
decl_stmt|;
comment|/** Cached {@link CalciteSchema} wrappers. It is      * worth caching them because they contain maps of their own sub-objects. */
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|cache
decl_stmt|;
specifier|private
name|SubSchemaCache
parameter_list|(
specifier|final
name|CalciteSchema
name|calciteSchema
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|this
operator|.
name|names
operator|=
name|NameSet
operator|.
name|immutableCopyOf
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NullableProblems"
argument_list|)
annotation|@
name|Override
specifier|public
name|CalciteSchema
name|load
parameter_list|(
name|String
name|schemaName
parameter_list|)
block|{
specifier|final
name|Schema
name|subSchema
init|=
name|calciteSchema
operator|.
name|schema
operator|.
name|getSubSchema
argument_list|(
name|schemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subSchema
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"sub-schema "
operator|+
name|schemaName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|CachingCalciteSchema
argument_list|(
name|calciteSchema
argument_list|,
name|subSchema
argument_list|,
name|schemaName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End CachingCalciteSchema.java
end_comment

end_unit

