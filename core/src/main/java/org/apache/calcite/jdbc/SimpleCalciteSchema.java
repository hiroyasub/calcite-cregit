begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A concrete implementation of {@link org.apache.calcite.jdbc.CalciteSchema}  * that maintains minimal state.  */
end_comment

begin_class
class|class
name|SimpleCalciteSchema
extends|extends
name|CalciteSchema
block|{
comment|/** Creates a SimpleCalciteSchema.    *    *<p>Use {@link CalciteSchema#createRootSchema(boolean)}    * or {@link #add(String, Schema)}. */
name|SimpleCalciteSchema
parameter_list|(
annotation|@
name|Nullable
name|CalciteSchema
name|parent
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
name|schema
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SimpleCalciteSchema
parameter_list|(
annotation|@
name|Nullable
name|CalciteSchema
name|parent
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|NameMap
argument_list|<
name|CalciteSchema
argument_list|>
name|subSchemaMap
parameter_list|,
annotation|@
name|Nullable
name|NameMap
argument_list|<
name|TableEntry
argument_list|>
name|tableMap
parameter_list|,
annotation|@
name|Nullable
name|NameMap
argument_list|<
name|LatticeEntry
argument_list|>
name|latticeMap
parameter_list|,
annotation|@
name|Nullable
name|NameMap
argument_list|<
name|TypeEntry
argument_list|>
name|typeMap
parameter_list|,
annotation|@
name|Nullable
name|NameMultimap
argument_list|<
name|FunctionEntry
argument_list|>
name|functionMap
parameter_list|,
annotation|@
name|Nullable
name|NameSet
name|functionNames
parameter_list|,
annotation|@
name|Nullable
name|NameMap
argument_list|<
name|FunctionEntry
argument_list|>
name|nullaryFunctionMap
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|schema
argument_list|,
name|name
argument_list|,
name|subSchemaMap
argument_list|,
name|tableMap
argument_list|,
name|latticeMap
argument_list|,
name|typeMap
argument_list|,
name|functionMap
argument_list|,
name|functionNames
argument_list|,
name|nullaryFunctionMap
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCache
parameter_list|(
name|boolean
name|cache
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CalciteSchema
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
specifier|final
name|CalciteSchema
name|calciteSchema
init|=
operator|new
name|SimpleCalciteSchema
argument_list|(
name|this
argument_list|,
name|schema
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|subSchemaMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|calciteSchema
argument_list|)
expr_stmt|;
return|return
name|calciteSchema
return|;
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
name|String
name|caseInsensitiveLookup
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|// Exact string lookup
if|if
condition|(
name|candidates
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
comment|// Upper case string lookup
specifier|final
name|String
name|upperCaseName
init|=
name|name
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|contains
argument_list|(
name|upperCaseName
argument_list|)
condition|)
block|{
return|return
name|upperCaseName
return|;
block|}
comment|// Lower case string lookup
specifier|final
name|String
name|lowerCaseName
init|=
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|contains
argument_list|(
name|lowerCaseName
argument_list|)
condition|)
block|{
return|return
name|lowerCaseName
return|;
block|}
comment|// Fall through: Set iteration
for|for
control|(
name|String
name|candidate
range|:
name|candidates
control|)
block|{
if|if
condition|(
name|candidate
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|candidate
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
annotation|@
name|Nullable
name|CalciteSchema
name|getImplicitSubSchema
parameter_list|(
name|String
name|schemaName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
comment|// Check implicit schemas.
specifier|final
name|String
name|schemaName2
init|=
name|caseSensitive
condition|?
name|schemaName
else|:
name|caseInsensitiveLookup
argument_list|(
name|schema
operator|.
name|getSubSchemaNames
argument_list|()
argument_list|,
name|schemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaName2
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Schema
name|s
init|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|schemaName2
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SimpleCalciteSchema
argument_list|(
name|this
argument_list|,
name|s
argument_list|,
name|schemaName2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
annotation|@
name|Nullable
name|TableEntry
name|getImplicitTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
comment|// Check implicit tables.
specifier|final
name|String
name|tableName2
init|=
name|caseSensitive
condition|?
name|tableName
else|:
name|caseInsensitiveLookup
argument_list|(
name|schema
operator|.
name|getTableNames
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName2
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Table
name|table
init|=
name|schema
operator|.
name|getTable
argument_list|(
name|tableName2
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|tableEntry
argument_list|(
name|tableName2
argument_list|,
name|table
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
annotation|@
name|Nullable
name|TypeEntry
name|getImplicitType
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
comment|// Check implicit types.
specifier|final
name|String
name|name2
init|=
name|caseSensitive
condition|?
name|name
else|:
name|caseInsensitiveLookup
argument_list|(
name|schema
operator|.
name|getTypeNames
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|name2
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelProtoDataType
name|type
init|=
name|schema
operator|.
name|getType
argument_list|(
name|name2
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|typeEntry
argument_list|(
name|name2
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addImplicitSubSchemaToBuilder
parameter_list|(
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|builder
parameter_list|)
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|explicitSubSchemas
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|schemaName
range|:
name|schema
operator|.
name|getSubSchemaNames
argument_list|()
control|)
block|{
if|if
condition|(
name|explicitSubSchemas
operator|.
name|containsKey
argument_list|(
name|schemaName
argument_list|)
condition|)
block|{
comment|// explicit subschema wins.
continue|continue;
block|}
name|Schema
name|s
init|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|schemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|CalciteSchema
name|calciteSchema
init|=
operator|new
name|SimpleCalciteSchema
argument_list|(
name|this
argument_list|,
name|s
argument_list|,
name|schemaName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|schemaName
argument_list|,
name|calciteSchema
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addImplicitTableToBuilder
parameter_list|(
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|schema
operator|.
name|getTableNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addImplicitFunctionsToBuilder
parameter_list|(
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Function
argument_list|>
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|Collection
argument_list|<
name|Function
argument_list|>
name|functions
init|=
name|schema
operator|.
name|getFunctions
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|functions
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|functions
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addImplicitFuncNamesToBuilder
parameter_list|(
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|schema
operator|.
name|getFunctionNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addImplicitTypeNamesToBuilder
parameter_list|(
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|schema
operator|.
name|getTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addImplicitTablesBasedOnNullaryFunctionsToBuilder
parameter_list|(
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
parameter_list|)
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|explicitTables
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|schema
operator|.
name|getFunctionNames
argument_list|()
control|)
block|{
comment|// explicit table wins.
if|if
condition|(
name|explicitTables
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Function
name|function
range|:
name|schema
operator|.
name|getFunctions
argument_list|(
name|s
argument_list|)
control|)
block|{
if|if
condition|(
name|function
operator|instanceof
name|TableMacro
operator|&&
name|function
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Table
name|table
init|=
operator|(
operator|(
name|TableMacro
operator|)
name|function
operator|)
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
annotation|@
name|Nullable
name|TableEntry
name|getImplicitTableBasedOnNullaryFunction
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|Collection
argument_list|<
name|Function
argument_list|>
name|functions
init|=
name|schema
operator|.
name|getFunctions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|functions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Function
name|function
range|:
name|functions
control|)
block|{
if|if
condition|(
name|function
operator|instanceof
name|TableMacro
operator|&&
name|function
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Table
name|table
init|=
operator|(
operator|(
name|TableMacro
operator|)
name|function
operator|)
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tableEntry
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|CalciteSchema
name|snapshot
parameter_list|(
annotation|@
name|Nullable
name|CalciteSchema
name|parent
parameter_list|,
name|SchemaVersion
name|version
parameter_list|)
block|{
name|CalciteSchema
name|snapshot
init|=
operator|new
name|SimpleCalciteSchema
argument_list|(
name|parent
argument_list|,
name|schema
operator|.
name|snapshot
argument_list|(
name|version
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|tableMap
argument_list|,
name|latticeMap
argument_list|,
name|typeMap
argument_list|,
name|functionMap
argument_list|,
name|functionNames
argument_list|,
name|nullaryFunctionMap
argument_list|,
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CalciteSchema
name|subSchema
range|:
name|subSchemaMap
operator|.
name|map
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|CalciteSchema
name|subSchemaSnapshot
init|=
name|subSchema
operator|.
name|snapshot
argument_list|(
name|snapshot
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|snapshot
operator|.
name|subSchemaMap
operator|.
name|put
argument_list|(
name|subSchema
operator|.
name|name
argument_list|,
name|subSchemaSnapshot
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshot
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isCacheEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

