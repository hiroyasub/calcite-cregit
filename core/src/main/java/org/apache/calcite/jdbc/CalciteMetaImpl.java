begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|ColumnMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|MetaImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|FlatLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTableQueryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|server
operator|.
name|CalciteServerStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJdbcFunctionCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Helper for implementing the {@code getXxx} methods such as  * {@link org.apache.calcite.avatica.AvaticaDatabaseMetaData#getTables}.  */
end_comment

begin_class
specifier|public
class|class
name|CalciteMetaImpl
extends|extends
name|MetaImpl
block|{
specifier|static
specifier|final
name|Driver
name|DRIVER
init|=
operator|new
name|Driver
argument_list|()
decl_stmt|;
specifier|public
name|CalciteMetaImpl
parameter_list|(
name|CalciteConnectionImpl
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|this
operator|.
name|connProps
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
operator|.
name|setTransactionIsolation
argument_list|(
name|Connection
operator|.
name|TRANSACTION_NONE
argument_list|)
expr_stmt|;
name|this
operator|.
name|connProps
operator|.
name|setDirty
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|static
parameter_list|<
name|T
extends|extends
name|Named
parameter_list|>
name|Predicate1
argument_list|<
name|T
argument_list|>
name|namedMatcher
parameter_list|(
specifier|final
name|Pat
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|.
name|s
operator|==
literal|null
operator|||
name|pattern
operator|.
name|s
operator|.
name|equals
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
return|return
name|Functions
operator|.
name|truePredicate1
argument_list|()
return|;
block|}
specifier|final
name|Pattern
name|regex
init|=
name|likeToRegex
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
operator|new
name|Predicate1
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|T
name|v1
parameter_list|)
block|{
return|return
name|regex
operator|.
name|matcher
argument_list|(
name|v1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|static
name|Predicate1
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|(
specifier|final
name|Pat
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|.
name|s
operator|==
literal|null
operator|||
name|pattern
operator|.
name|s
operator|.
name|equals
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
return|return
name|Functions
operator|.
name|truePredicate1
argument_list|()
return|;
block|}
specifier|final
name|Pattern
name|regex
init|=
name|likeToRegex
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
operator|new
name|Predicate1
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|v1
parameter_list|)
block|{
return|return
name|regex
operator|.
name|matcher
argument_list|(
name|v1
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/** Converts a LIKE-style pattern (where '%' represents a wild-card, escaped    * using '\') to a Java regex. */
specifier|public
specifier|static
name|Pattern
name|likeToRegex
parameter_list|(
name|Pat
name|pattern
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"^"
argument_list|)
decl_stmt|;
name|char
index|[]
name|charArray
init|=
name|pattern
operator|.
name|s
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|slash
init|=
operator|-
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|charArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|slash
operator|==
name|i
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\\'
case|:
name|slash
operator|=
name|i
expr_stmt|;
break|break;
case|case
literal|'%'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'['
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\["
argument_list|)
expr_stmt|;
break|break;
case|case
literal|']'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\]"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"$"
argument_list|)
expr_stmt|;
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StatementHandle
name|createStatement
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|)
block|{
specifier|final
name|StatementHandle
name|h
init|=
name|super
operator|.
name|createStatement
argument_list|(
name|ch
argument_list|)
decl_stmt|;
specifier|final
name|CalciteConnectionImpl
name|calciteConnection
init|=
name|getConnection
argument_list|()
decl_stmt|;
name|calciteConnection
operator|.
name|server
operator|.
name|addStatement
argument_list|(
name|calciteConnection
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeStatement
parameter_list|(
name|StatementHandle
name|h
parameter_list|)
block|{
specifier|final
name|CalciteConnectionImpl
name|calciteConnection
init|=
name|getConnection
argument_list|()
decl_stmt|;
name|CalciteServerStatement
name|stmt
init|=
name|calciteConnection
operator|.
name|server
operator|.
name|getStatement
argument_list|(
name|h
argument_list|)
decl_stmt|;
comment|// stmt.close(); // TODO: implement
name|calciteConnection
operator|.
name|server
operator|.
name|removeStatement
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|E
parameter_list|>
name|MetaResultSet
name|createResultSet
parameter_list|(
name|Enumerable
argument_list|<
name|E
argument_list|>
name|enumerable
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|int
name|index
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|field
decl_stmt|;
try|try
block|{
name|field
operator|=
name|clazz
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|columns
operator|.
name|add
argument_list|(
name|columnMetaData
argument_list|(
name|name
argument_list|,
name|index
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
comment|//noinspection unchecked
specifier|final
name|Iterable
argument_list|<
name|Object
argument_list|>
name|iterable
init|=
operator|(
name|Iterable
argument_list|<
name|Object
argument_list|>
operator|)
operator|(
name|Iterable
operator|)
name|enumerable
decl_stmt|;
return|return
name|createResultSet
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|columns
argument_list|,
name|CursorFactory
operator|.
name|record
argument_list|(
name|clazz
argument_list|,
name|fields
argument_list|,
name|fieldNames
argument_list|)
argument_list|,
operator|new
name|Frame
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|iterable
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|MetaResultSet
name|createEmptyResultSet
parameter_list|(
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
init|=
name|fieldMetaData
argument_list|(
name|clazz
argument_list|)
operator|.
name|columns
decl_stmt|;
specifier|final
name|CursorFactory
name|cursorFactory
init|=
name|CursorFactory
operator|.
name|deduce
argument_list|(
name|columns
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
return|return
name|createResultSet
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|columns
argument_list|,
name|cursorFactory
argument_list|,
name|Frame
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|protected
name|MetaResultSet
name|createResultSet
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|internalParameters
parameter_list|,
name|List
argument_list|<
name|ColumnMetaData
argument_list|>
name|columns
parameter_list|,
name|CursorFactory
name|cursorFactory
parameter_list|,
specifier|final
name|Frame
name|firstFrame
parameter_list|)
block|{
try|try
block|{
specifier|final
name|CalciteConnectionImpl
name|connection
init|=
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|AvaticaStatement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|CalcitePrepare
operator|.
name|CalciteSignature
argument_list|<
name|Object
argument_list|>
name|signature
init|=
operator|new
name|CalcitePrepare
operator|.
name|CalciteSignature
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|""
argument_list|,
name|ImmutableList
operator|.
expr|<
name|AvaticaParameter
operator|>
name|of
argument_list|()
argument_list|,
name|internalParameters
argument_list|,
literal|null
argument_list|,
name|columns
argument_list|,
name|cursorFactory
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|enumerable
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|firstFrame
operator|.
name|rows
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|MetaResultSet
operator|.
name|create
argument_list|(
name|connection
operator|.
name|id
argument_list|,
name|statement
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|signature
argument_list|,
name|firstFrame
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|CalciteConnectionImpl
name|getConnection
parameter_list|()
block|{
return|return
operator|(
name|CalciteConnectionImpl
operator|)
name|connection
return|;
block|}
specifier|public
name|String
name|getSqlKeywords
parameter_list|()
block|{
return|return
name|SqlParser
operator|.
name|create
argument_list|(
literal|""
argument_list|)
operator|.
name|getMetadata
argument_list|()
operator|.
name|getJdbcKeywords
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNumericFunctions
parameter_list|()
block|{
return|return
name|SqlJdbcFunctionCall
operator|.
name|getNumericFunctions
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStringFunctions
parameter_list|()
block|{
return|return
name|SqlJdbcFunctionCall
operator|.
name|getStringFunctions
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSystemFunctions
parameter_list|()
block|{
return|return
name|SqlJdbcFunctionCall
operator|.
name|getSystemFunctions
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTimeDateFunctions
parameter_list|()
block|{
return|return
name|SqlJdbcFunctionCall
operator|.
name|getTimeDateFunctions
argument_list|()
return|;
block|}
specifier|public
name|MetaResultSet
name|getTables
parameter_list|(
name|String
name|catalog
parameter_list|,
specifier|final
name|Pat
name|schemaPattern
parameter_list|,
specifier|final
name|Pat
name|tableNamePattern
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|typeList
parameter_list|)
block|{
specifier|final
name|Predicate1
argument_list|<
name|MetaTable
argument_list|>
name|typeFilter
decl_stmt|;
if|if
condition|(
name|typeList
operator|==
literal|null
condition|)
block|{
name|typeFilter
operator|=
name|Functions
operator|.
name|truePredicate1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|typeFilter
operator|=
operator|new
name|Predicate1
argument_list|<
name|MetaTable
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|MetaTable
name|v1
parameter_list|)
block|{
return|return
name|typeList
operator|.
name|contains
argument_list|(
name|v1
operator|.
name|tableType
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|final
name|Predicate1
argument_list|<
name|MetaSchema
argument_list|>
name|schemaMatcher
init|=
name|namedMatcher
argument_list|(
name|schemaPattern
argument_list|)
decl_stmt|;
return|return
name|createResultSet
argument_list|(
name|schemas
argument_list|(
name|catalog
argument_list|)
operator|.
name|where
argument_list|(
name|schemaMatcher
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaSchema
argument_list|,
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|apply
parameter_list|(
name|MetaSchema
name|schema
parameter_list|)
block|{
return|return
name|tables
argument_list|(
name|schema
argument_list|,
name|matcher
argument_list|(
name|tableNamePattern
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|where
argument_list|(
name|typeFilter
argument_list|)
argument_list|,
name|MetaTable
operator|.
name|class
argument_list|,
literal|"TABLE_CAT"
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_NAME"
argument_list|,
literal|"TABLE_TYPE"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"TYPE_CAT"
argument_list|,
literal|"TYPE_SCHEM"
argument_list|,
literal|"TYPE_NAME"
argument_list|,
literal|"SELF_REFERENCING_COL_NAME"
argument_list|,
literal|"REF_GENERATION"
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|,
name|Pat
name|tableNamePattern
parameter_list|,
name|Pat
name|columnNamePattern
parameter_list|)
block|{
specifier|final
name|Predicate1
argument_list|<
name|String
argument_list|>
name|tableNameMatcher
init|=
name|matcher
argument_list|(
name|tableNamePattern
argument_list|)
decl_stmt|;
specifier|final
name|Predicate1
argument_list|<
name|MetaSchema
argument_list|>
name|schemaMatcher
init|=
name|namedMatcher
argument_list|(
name|schemaPattern
argument_list|)
decl_stmt|;
specifier|final
name|Predicate1
argument_list|<
name|MetaColumn
argument_list|>
name|columnMatcher
init|=
name|namedMatcher
argument_list|(
name|columnNamePattern
argument_list|)
decl_stmt|;
return|return
name|createResultSet
argument_list|(
name|schemas
argument_list|(
name|catalog
argument_list|)
operator|.
name|where
argument_list|(
name|schemaMatcher
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaSchema
argument_list|,
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|apply
parameter_list|(
name|MetaSchema
name|schema
parameter_list|)
block|{
return|return
name|tables
argument_list|(
name|schema
argument_list|,
name|tableNameMatcher
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaTable
argument_list|,
name|Enumerable
argument_list|<
name|MetaColumn
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|MetaColumn
argument_list|>
name|apply
parameter_list|(
name|MetaTable
name|schema
parameter_list|)
block|{
return|return
name|columns
argument_list|(
name|schema
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|where
argument_list|(
name|columnMatcher
argument_list|)
argument_list|,
name|MetaColumn
operator|.
name|class
argument_list|,
literal|"TABLE_CAT"
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_NAME"
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
literal|"DATA_TYPE"
argument_list|,
literal|"TYPE_NAME"
argument_list|,
literal|"COLUMN_SIZE"
argument_list|,
literal|"BUFFER_LENGTH"
argument_list|,
literal|"DECIMAL_DIGITS"
argument_list|,
literal|"NUM_PREC_RADIX"
argument_list|,
literal|"NULLABLE"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"COLUMN_DEF"
argument_list|,
literal|"SQL_DATA_TYPE"
argument_list|,
literal|"SQL_DATETIME_SUB"
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
literal|"SCOPE_CATALOG"
argument_list|,
literal|"SCOPE_TABLE"
argument_list|,
literal|"SOURCE_DATA_TYPE"
argument_list|,
literal|"IS_AUTOINCREMENT"
argument_list|,
literal|"IS_GENERATEDCOLUMN"
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaCatalog
argument_list|>
name|catalogs
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|MetaCatalog
argument_list|(
name|connection
operator|.
name|getCatalog
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaTableType
argument_list|>
name|tableTypes
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|MetaTableType
argument_list|(
literal|"TABLE"
argument_list|)
argument_list|,
operator|new
name|MetaTableType
argument_list|(
literal|"VIEW"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaSchema
argument_list|>
name|schemas
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|getConnection
argument_list|()
operator|.
name|rootSchema
operator|.
name|getSubSchemaMap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|CalciteSchema
argument_list|,
name|MetaSchema
argument_list|>
argument_list|()
block|{
specifier|public
name|MetaSchema
name|apply
parameter_list|(
name|CalciteSchema
name|calciteSchema
parameter_list|)
block|{
return|return
operator|new
name|CalciteMetaSchema
argument_list|(
name|calciteSchema
argument_list|,
name|connection
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|calciteSchema
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|orderBy
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaSchema
argument_list|,
name|Comparable
argument_list|>
argument_list|()
block|{
specifier|public
name|Comparable
name|apply
parameter_list|(
name|MetaSchema
name|metaSchema
parameter_list|)
block|{
return|return
operator|(
name|Comparable
operator|)
name|FlatLists
operator|.
name|of
argument_list|(
name|Util
operator|.
name|first
argument_list|(
name|metaSchema
operator|.
name|tableCatalog
argument_list|,
literal|""
argument_list|)
argument_list|,
name|metaSchema
operator|.
name|tableSchem
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|tables
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
return|return
name|schemas
argument_list|(
name|catalog
argument_list|)
operator|.
name|selectMany
argument_list|(
operator|new
name|Function1
argument_list|<
name|MetaSchema
argument_list|,
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|apply
parameter_list|(
name|MetaSchema
name|schema
parameter_list|)
block|{
return|return
name|tables
argument_list|(
name|schema
argument_list|,
name|Functions
operator|.
expr|<
name|String
operator|>
name|truePredicate1
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|tables
parameter_list|(
specifier|final
name|MetaSchema
name|schema_
parameter_list|)
block|{
specifier|final
name|CalciteMetaSchema
name|schema
init|=
operator|(
name|CalciteMetaSchema
operator|)
name|schema_
decl_stmt|;
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|schema
operator|.
name|calciteSchema
operator|.
name|getTableNames
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|String
argument_list|,
name|MetaTable
argument_list|>
argument_list|()
block|{
specifier|public
name|MetaTable
name|apply
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Table
name|table
init|=
name|schema
operator|.
name|calciteSchema
operator|.
name|getTable
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
operator|new
name|CalciteMetaTable
argument_list|(
name|table
argument_list|,
name|schema
operator|.
name|tableCatalog
argument_list|,
name|schema
operator|.
name|tableSchem
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|concat
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|schema
operator|.
name|calciteSchema
operator|.
name|getTablesBasedOnNullaryFunctions
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|,
name|MetaTable
argument_list|>
argument_list|()
block|{
specifier|public
name|MetaTable
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|pair
parameter_list|)
block|{
specifier|final
name|Table
name|table
init|=
name|pair
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
operator|new
name|CalciteMetaTable
argument_list|(
name|table
argument_list|,
name|schema
operator|.
name|tableCatalog
argument_list|,
name|schema
operator|.
name|tableSchem
argument_list|,
name|pair
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
name|Enumerable
argument_list|<
name|MetaTable
argument_list|>
name|tables
parameter_list|(
specifier|final
name|MetaSchema
name|schema
parameter_list|,
specifier|final
name|Predicate1
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
return|return
name|tables
argument_list|(
name|schema
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|MetaTable
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|MetaTable
name|v1
parameter_list|)
block|{
return|return
name|matcher
operator|.
name|apply
argument_list|(
name|v1
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|MetaColumn
argument_list|>
name|columns
parameter_list|(
specifier|final
name|MetaTable
name|table_
parameter_list|)
block|{
specifier|final
name|CalciteMetaTable
name|table
init|=
operator|(
name|CalciteMetaTable
operator|)
name|table_
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|table
operator|.
name|calciteTable
operator|.
name|getRowType
argument_list|(
name|getConnection
argument_list|()
operator|.
name|typeFactory
argument_list|)
decl_stmt|;
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
operator|new
name|Function1
argument_list|<
name|RelDataTypeField
argument_list|,
name|MetaColumn
argument_list|>
argument_list|()
block|{
specifier|public
name|MetaColumn
name|apply
parameter_list|(
name|RelDataTypeField
name|field
parameter_list|)
block|{
specifier|final
name|int
name|precision
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|allowsPrec
argument_list|()
operator|&&
operator|!
operator|(
name|field
operator|.
name|getType
argument_list|()
operator|instanceof
name|RelDataTypeFactoryImpl
operator|.
name|JavaType
operator|)
condition|?
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getPrecision
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
return|return
operator|new
name|MetaColumn
argument_list|(
name|table
operator|.
name|tableCat
argument_list|,
name|table
operator|.
name|tableSchem
argument_list|,
name|table
operator|.
name|tableName
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getJdbcOrdinal
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getFullTypeString
argument_list|()
argument_list|,
name|precision
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|allowsScale
argument_list|()
condition|?
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getScale
argument_list|()
else|:
literal|null
argument_list|,
literal|10
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
name|DatabaseMetaData
operator|.
name|columnNullable
else|:
name|DatabaseMetaData
operator|.
name|columnNoNulls
argument_list|,
name|precision
argument_list|,
name|field
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
literal|"YES"
else|:
literal|"NO"
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getSchemas
parameter_list|(
name|String
name|catalog
parameter_list|,
name|Pat
name|schemaPattern
parameter_list|)
block|{
specifier|final
name|Predicate1
argument_list|<
name|MetaSchema
argument_list|>
name|schemaMatcher
init|=
name|namedMatcher
argument_list|(
name|schemaPattern
argument_list|)
decl_stmt|;
return|return
name|createResultSet
argument_list|(
name|schemas
argument_list|(
name|catalog
argument_list|)
operator|.
name|where
argument_list|(
name|schemaMatcher
argument_list|)
argument_list|,
name|MetaSchema
operator|.
name|class
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_CATALOG"
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getCatalogs
parameter_list|()
block|{
return|return
name|createResultSet
argument_list|(
name|catalogs
argument_list|()
argument_list|,
name|MetaCatalog
operator|.
name|class
argument_list|,
literal|"TABLE_CATALOG"
argument_list|)
return|;
block|}
specifier|public
name|MetaResultSet
name|getTableTypes
parameter_list|()
block|{
return|return
name|createResultSet
argument_list|(
name|tableTypes
argument_list|()
argument_list|,
name|MetaTableType
operator|.
name|class
argument_list|,
literal|"TABLE_TYPE"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Object
argument_list|>
name|createIterable
parameter_list|(
name|StatementHandle
name|handle
parameter_list|,
name|Signature
name|signature
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|parameterValues
parameter_list|,
name|Frame
name|firstFrame
parameter_list|)
block|{
try|try
block|{
comment|//noinspection unchecked
specifier|final
name|CalcitePrepare
operator|.
name|CalciteSignature
argument_list|<
name|Object
argument_list|>
name|calciteSignature
init|=
operator|(
name|CalcitePrepare
operator|.
name|CalciteSignature
argument_list|<
name|Object
argument_list|>
operator|)
name|signature
decl_stmt|;
return|return
name|getConnection
argument_list|()
operator|.
name|enumerable
argument_list|(
name|handle
argument_list|,
name|calciteSignature
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StatementHandle
name|prepare
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|sql
parameter_list|,
name|int
name|maxRowCount
parameter_list|)
block|{
specifier|final
name|StatementHandle
name|h
init|=
name|createStatement
argument_list|(
name|ch
argument_list|)
decl_stmt|;
specifier|final
name|CalciteConnectionImpl
name|calciteConnection
init|=
name|getConnection
argument_list|()
decl_stmt|;
name|CalciteServerStatement
name|statement
init|=
name|calciteConnection
operator|.
name|server
operator|.
name|getStatement
argument_list|(
name|h
argument_list|)
decl_stmt|;
name|h
operator|.
name|signature
operator|=
name|calciteConnection
operator|.
name|parseQuery
argument_list|(
name|sql
argument_list|,
name|statement
operator|.
name|createPrepareContext
argument_list|()
argument_list|,
name|maxRowCount
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setSignature
argument_list|(
name|h
operator|.
name|signature
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteResult
name|prepareAndExecute
parameter_list|(
name|ConnectionHandle
name|ch
parameter_list|,
name|String
name|sql
parameter_list|,
name|int
name|maxRowCount
parameter_list|,
name|PrepareCallback
name|callback
parameter_list|)
block|{
specifier|final
name|CalcitePrepare
operator|.
name|CalciteSignature
argument_list|<
name|Object
argument_list|>
name|signature
decl_stmt|;
specifier|final
name|StatementHandle
name|h
init|=
name|createStatement
argument_list|(
name|ch
argument_list|)
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|callback
operator|.
name|getMonitor
argument_list|()
init|)
block|{
name|callback
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|CalciteConnectionImpl
name|calciteConnection
init|=
name|getConnection
argument_list|()
decl_stmt|;
name|CalciteServerStatement
name|statement
init|=
name|calciteConnection
operator|.
name|server
operator|.
name|getStatement
argument_list|(
name|h
argument_list|)
decl_stmt|;
name|signature
operator|=
name|calciteConnection
operator|.
name|parseQuery
argument_list|(
name|sql
argument_list|,
name|statement
operator|.
name|createPrepareContext
argument_list|()
argument_list|,
name|maxRowCount
argument_list|)
expr_stmt|;
name|callback
operator|.
name|assign
argument_list|(
name|signature
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|execute
argument_list|()
expr_stmt|;
specifier|final
name|MetaResultSet
name|metaResultSet
init|=
name|MetaResultSet
operator|.
name|create
argument_list|(
name|h
operator|.
name|connectionId
argument_list|,
name|h
operator|.
name|id
argument_list|,
literal|false
argument_list|,
name|signature
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecuteResult
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|metaResultSet
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// TODO: share code with prepare and createIterable
block|}
annotation|@
name|Override
specifier|public
name|Frame
name|fetch
parameter_list|(
name|StatementHandle
name|h
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|parameterValues
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|fetchMaxRowCount
parameter_list|)
block|{
specifier|final
name|CalciteConnectionImpl
name|calciteConnection
init|=
name|getConnection
argument_list|()
decl_stmt|;
name|CalciteServerStatement
name|stmt
init|=
name|calciteConnection
operator|.
name|server
operator|.
name|getStatement
argument_list|(
name|h
argument_list|)
decl_stmt|;
specifier|final
name|Signature
name|signature
init|=
name|stmt
operator|.
name|getSignature
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
decl_stmt|;
if|if
condition|(
name|parameterValues
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Iterable
argument_list|<
name|Object
argument_list|>
name|iterable
init|=
name|createIterable
argument_list|(
name|h
argument_list|,
name|signature
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|iterator
operator|=
name|iterable
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|setResultSet
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterator
operator|=
name|stmt
operator|.
name|getResultSet
argument_list|()
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rows
init|=
name|MetaImpl
operator|.
name|collect
argument_list|(
name|signature
operator|.
name|cursorFactory
argument_list|,
name|LimitIterator
operator|.
name|of
argument_list|(
name|iterator
argument_list|,
name|fetchMaxRowCount
argument_list|)
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|boolean
name|done
init|=
name|fetchMaxRowCount
operator|==
literal|0
operator|||
name|list
operator|.
name|size
argument_list|()
operator|<
name|fetchMaxRowCount
decl_stmt|;
return|return
operator|new
name|Meta
operator|.
name|Frame
argument_list|(
name|offset
argument_list|,
name|done
argument_list|,
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
operator|(
name|List
operator|)
name|rows
argument_list|)
return|;
block|}
comment|/** A trojan-horse method, subject to change without notice. */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|DataContext
name|createDataContext
parameter_list|(
name|CalciteConnection
name|connection
parameter_list|)
block|{
return|return
operator|(
operator|(
name|CalciteConnectionImpl
operator|)
name|connection
operator|)
operator|.
name|createDataContext
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/** A trojan-horse method, subject to change without notice. */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|CalciteConnection
name|connect
parameter_list|(
name|CalciteRootSchema
name|schema
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|DRIVER
operator|.
name|connect
argument_list|(
name|schema
argument_list|,
name|typeFactory
argument_list|)
return|;
block|}
comment|/** Metadata describing a Calcite table. */
specifier|private
specifier|static
class|class
name|CalciteMetaTable
extends|extends
name|MetaTable
block|{
specifier|private
specifier|final
name|Table
name|calciteTable
decl_stmt|;
specifier|public
name|CalciteMetaTable
parameter_list|(
name|Table
name|calciteTable
parameter_list|,
name|String
name|tableCat
parameter_list|,
name|String
name|tableSchem
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableCat
argument_list|,
name|tableSchem
argument_list|,
name|tableName
argument_list|,
name|calciteTable
operator|.
name|getJdbcTableType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|calciteTable
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|calciteTable
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Metadata describing a Calcite schema. */
specifier|private
specifier|static
class|class
name|CalciteMetaSchema
extends|extends
name|MetaSchema
block|{
specifier|private
specifier|final
name|CalciteSchema
name|calciteSchema
decl_stmt|;
specifier|public
name|CalciteMetaSchema
parameter_list|(
name|CalciteSchema
name|calciteSchema
parameter_list|,
name|String
name|tableCatalog
parameter_list|,
name|String
name|tableSchem
parameter_list|)
block|{
name|super
argument_list|(
name|tableCatalog
argument_list|,
name|tableSchem
argument_list|)
expr_stmt|;
name|this
operator|.
name|calciteSchema
operator|=
name|calciteSchema
expr_stmt|;
block|}
block|}
comment|/** Table whose contents are metadata. */
specifier|abstract
specifier|static
class|class
name|MetadataTable
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractQueryableTable
block|{
specifier|public
name|MetadataTable
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
operator|(
operator|(
name|JavaTypeFactory
operator|)
name|typeFactory
operator|)
operator|.
name|createType
argument_list|(
name|elementType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|SYSTEM_TABLE
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|E
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
operator|(
name|Class
argument_list|<
name|E
argument_list|>
operator|)
name|elementType
return|;
block|}
specifier|protected
specifier|abstract
name|Enumerator
argument_list|<
name|E
argument_list|>
name|enumerator
parameter_list|(
name|CalciteMetaImpl
name|connection
parameter_list|)
function_decl|;
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|AbstractTableQueryable
argument_list|<
name|T
argument_list|>
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|(
name|Enumerator
argument_list|<
name|T
argument_list|>
operator|)
name|MetadataTable
operator|.
name|this
operator|.
name|enumerator
argument_list|(
operator|(
operator|(
name|CalciteConnectionImpl
operator|)
name|queryProvider
operator|)
operator|.
name|meta
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Iterator that returns at most {@code limit} rows from an underlying    * {@link Iterator}. */
specifier|private
specifier|static
class|class
name|LimitIterator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
decl_stmt|;
specifier|private
specifier|final
name|int
name|limit
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|private
name|LimitIterator
parameter_list|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Iterator
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
if|if
condition|(
name|limit
operator|<=
literal|0
condition|)
block|{
return|return
name|iterator
return|;
block|}
return|return
operator|new
name|LimitIterator
argument_list|<>
argument_list|(
name|iterator
argument_list|,
name|limit
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|i
operator|<
name|limit
return|;
block|}
specifier|public
name|E
name|next
parameter_list|()
block|{
operator|++
name|i
expr_stmt|;
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End CalciteMetaImpl.java
end_comment

end_unit

