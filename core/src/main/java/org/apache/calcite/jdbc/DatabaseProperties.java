begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaDatabaseMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJdbcFunctionCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Definition of a database static properties.  * {@link Meta.PropertyName} enumerates current database properties,  * supporting some of the static String properties return via  * {@link AvaticaDatabaseMetaData}  */
end_comment

begin_enum
specifier|public
enum|enum
name|DatabaseProperties
block|{
name|NUMERIC_FUNCTIONS
argument_list|(
name|Meta
operator|.
name|DatabaseProperties
operator|.
name|NUMERIC_FUNCTIONS
argument_list|,
name|SqlJdbcFunctionCall
operator|.
name|getNumericFunctions
argument_list|()
argument_list|)
block|,
name|STRING_FUNCTIONS
argument_list|(
name|Meta
operator|.
name|DatabaseProperties
operator|.
name|STRING_FUNCTIONS
argument_list|,
name|SqlJdbcFunctionCall
operator|.
name|getStringFunctions
argument_list|()
argument_list|)
block|,
name|SYSTEM_FUNCTIONS
argument_list|(
name|Meta
operator|.
name|DatabaseProperties
operator|.
name|SYSTEM_FUNCTIONS
argument_list|,
name|SqlJdbcFunctionCall
operator|.
name|getSystemFunctions
argument_list|()
argument_list|)
block|,
name|TIME_DATE_FUNCTIONS
argument_list|(
name|Meta
operator|.
name|DatabaseProperties
operator|.
name|TIME_DATE_FUNCTIONS
argument_list|,
name|SqlJdbcFunctionCall
operator|.
name|getTimeDateFunctions
argument_list|()
argument_list|)
block|,
name|SQL_KEYWORDS
argument_list|(
name|Meta
operator|.
name|DatabaseProperties
operator|.
name|SQL_KEYWORDS
argument_list|,
name|SqlParser
operator|.
name|create
argument_list|(
literal|""
argument_list|)
operator|.
name|getMetadata
argument_list|()
operator|.
name|getJdbcKeywords
argument_list|()
argument_list|)
block|;
specifier|private
name|Meta
operator|.
name|DatabaseProperties
name|databaseProperty
decl_stmt|;
specifier|private
name|String
name|defaultValue
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Meta
operator|.
name|DatabaseProperties
argument_list|,
name|DatabaseProperties
argument_list|>
name|NAME_TO_PROPS
decl_stmt|;
static|static
block|{
name|NAME_TO_PROPS
operator|=
operator|new
name|HashMap
argument_list|<
name|Meta
operator|.
name|DatabaseProperties
argument_list|,
name|DatabaseProperties
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|DatabaseProperties
name|p
range|:
name|DatabaseProperties
operator|.
name|values
argument_list|()
control|)
block|{
name|NAME_TO_PROPS
operator|.
name|put
argument_list|(
name|p
operator|.
name|databaseProperty
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|DatabaseProperties
parameter_list|(
name|Meta
operator|.
name|DatabaseProperties
name|dbProp
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|databaseProperty
operator|=
name|dbProp
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
specifier|public
name|Meta
operator|.
name|DatabaseProperties
name|databaseProperty
parameter_list|()
block|{
return|return
name|this
operator|.
name|databaseProperty
return|;
block|}
specifier|public
name|String
name|defaultValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultValue
return|;
block|}
specifier|public
specifier|static
name|String
name|getProperty
parameter_list|(
name|Meta
operator|.
name|DatabaseProperties
name|dbProps
parameter_list|)
block|{
specifier|final
name|DatabaseProperties
name|dbProp
init|=
name|NAME_TO_PROPS
operator|.
name|get
argument_list|(
name|dbProps
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbProp
operator|!=
literal|null
condition|)
block|{
return|return
name|dbProp
operator|.
name|defaultValue
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
end_enum

end_unit

