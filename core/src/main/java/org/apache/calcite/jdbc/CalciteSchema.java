begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|MaterializedViewTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|StarTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Compatible
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Schema.  *  *<p>Wrapper around user-defined schema used internally.</p>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CalciteSchema
block|{
specifier|private
specifier|final
name|CalciteSchema
name|parent
decl_stmt|;
specifier|public
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
comment|/** Tables explicitly defined in this schema. Does not include tables in    *  {@link #schema}. */
specifier|protected
specifier|final
name|NameMap
argument_list|<
name|TableEntry
argument_list|>
name|tableMap
decl_stmt|;
specifier|protected
specifier|final
name|NameMultimap
argument_list|<
name|FunctionEntry
argument_list|>
name|functionMap
decl_stmt|;
specifier|protected
specifier|final
name|NameMap
argument_list|<
name|LatticeEntry
argument_list|>
name|latticeMap
decl_stmt|;
specifier|protected
specifier|final
name|NameSet
name|functionNames
decl_stmt|;
specifier|protected
specifier|final
name|NameMap
argument_list|<
name|FunctionEntry
argument_list|>
name|nullaryFunctionMap
decl_stmt|;
specifier|protected
specifier|final
name|NameMap
argument_list|<
name|CalciteSchema
argument_list|>
name|subSchemaMap
decl_stmt|;
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|path
decl_stmt|;
specifier|protected
name|CalciteSchema
parameter_list|(
name|CalciteSchema
name|parent
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|NameMap
argument_list|<
name|CalciteSchema
argument_list|>
name|subSchemaMap
parameter_list|,
name|NameMap
argument_list|<
name|TableEntry
argument_list|>
name|tableMap
parameter_list|,
name|NameMap
argument_list|<
name|LatticeEntry
argument_list|>
name|latticeMap
parameter_list|,
name|NameMultimap
argument_list|<
name|FunctionEntry
argument_list|>
name|functionMap
parameter_list|,
name|NameSet
name|functionNames
parameter_list|,
name|NameMap
argument_list|<
name|FunctionEntry
argument_list|>
name|nullaryFunctionMap
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|path
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|tableMap
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|tableMap
operator|=
operator|new
name|NameMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|tableMap
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tableMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|latticeMap
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|latticeMap
operator|=
operator|new
name|NameMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|latticeMap
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|latticeMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subSchemaMap
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|subSchemaMap
operator|=
operator|new
name|NameMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|subSchemaMap
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|subSchemaMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|functionMap
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|functionMap
operator|=
operator|new
name|NameMultimap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|functionNames
operator|=
operator|new
name|NameSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullaryFunctionMap
operator|=
operator|new
name|NameMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If you specify functionMap, you must also specify functionNames and
comment|// nullaryFunctionMap.
name|this
operator|.
name|functionMap
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|functionMap
argument_list|)
expr_stmt|;
name|this
operator|.
name|functionNames
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|functionNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullaryFunctionMap
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nullaryFunctionMap
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
comment|/** Returns a sub-schema with a given name that is defined implicitly    * (that is, by the underlying {@link Schema} object, not explicitly    * by a call to {@link #add(String, Schema)}), or null. */
specifier|protected
specifier|abstract
name|CalciteSchema
name|getImplicitSubSchema
parameter_list|(
name|String
name|schemaName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
function_decl|;
comment|/** Returns a table with a given name that is defined implicitly    * (that is, by the underlying {@link Schema} object, not explicitly    * by a call to {@link #add(String, Table)}), or null. */
specifier|protected
specifier|abstract
name|TableEntry
name|getImplicitTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
function_decl|;
comment|/** Returns table function with a given name and zero arguments that is    * defined implicitly (that is, by the underlying {@link Schema} object,    * not explicitly by a call to {@link #add(String, Function)}), or null. */
specifier|protected
specifier|abstract
name|TableEntry
name|getImplicitTableBasedOnNullaryFunction
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
function_decl|;
comment|/** Adds implicit sub-schemas to a builder. */
specifier|protected
specifier|abstract
name|void
name|addImplicitSubSchemaToBuilder
parameter_list|(
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|builder
parameter_list|)
function_decl|;
comment|/** Adds implicit tables to a builder. */
specifier|protected
specifier|abstract
name|void
name|addImplicitTableToBuilder
parameter_list|(
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
parameter_list|)
function_decl|;
comment|/** Adds implicit functions to a builder. */
specifier|protected
specifier|abstract
name|void
name|addImplicitFunctionsToBuilder
parameter_list|(
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Function
argument_list|>
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
function_decl|;
comment|/** Adds implicit function names to a builder. */
specifier|protected
specifier|abstract
name|void
name|addImplicitFuncNamesToBuilder
parameter_list|(
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
parameter_list|)
function_decl|;
comment|/** Adds implicit table functions to a builder. */
specifier|protected
specifier|abstract
name|void
name|addImplicitTablesBasedOnNullaryFunctionsToBuilder
parameter_list|(
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
parameter_list|)
function_decl|;
comment|/** Returns a snapshot representation of this CalciteSchema. */
specifier|protected
specifier|abstract
name|CalciteSchema
name|snapshot
parameter_list|(
name|CalciteSchema
name|parent
parameter_list|,
name|SchemaVersion
name|version
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|isCacheEnabled
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|setCache
parameter_list|(
name|boolean
name|cache
parameter_list|)
function_decl|;
comment|/** Creates a TableEntryImpl with no SQLs. */
specifier|protected
name|TableEntryImpl
name|tableEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
return|return
operator|new
name|TableEntryImpl
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|table
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/** Defines a table within this schema. */
specifier|public
name|TableEntry
name|add
parameter_list|(
name|String
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/** Defines a table within this schema. */
specifier|public
name|TableEntry
name|add
parameter_list|(
name|String
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|sqls
parameter_list|)
block|{
specifier|final
name|TableEntryImpl
name|entry
init|=
operator|new
name|TableEntryImpl
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|,
name|sqls
argument_list|)
decl_stmt|;
name|tableMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|private
name|FunctionEntry
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Function
name|function
parameter_list|)
block|{
specifier|final
name|FunctionEntryImpl
name|entry
init|=
operator|new
name|FunctionEntryImpl
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|function
argument_list|)
decl_stmt|;
name|functionMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|functionNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|function
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nullaryFunctionMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
specifier|private
name|LatticeEntry
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Lattice
name|lattice
parameter_list|)
block|{
if|if
condition|(
name|latticeMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Duplicate lattice '"
operator|+
name|name
operator|+
literal|"'"
argument_list|)
throw|;
block|}
specifier|final
name|LatticeEntryImpl
name|entry
init|=
operator|new
name|LatticeEntryImpl
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|lattice
argument_list|)
decl_stmt|;
name|latticeMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|public
name|CalciteSchema
name|root
parameter_list|()
block|{
for|for
control|(
name|CalciteSchema
name|schema
init|=
name|this
init|;
condition|;
control|)
block|{
if|if
condition|(
name|schema
operator|.
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|schema
return|;
block|}
name|schema
operator|=
name|schema
operator|.
name|parent
expr_stmt|;
block|}
block|}
comment|/** Returns whether this is a root schema. */
specifier|public
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|parent
operator|==
literal|null
return|;
block|}
comment|/** Returns the path of an object in this schema. */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CalciteSchema
name|s
init|=
name|this
init|;
name|s
operator|!=
literal|null
condition|;
name|s
operator|=
name|s
operator|.
name|parent
control|)
block|{
if|if
condition|(
name|s
operator|.
name|parent
operator|!=
literal|null
operator|||
operator|!
name|s
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// Omit the root schema's name from the path if it's the empty string,
comment|// which it usually is.
name|list
operator|.
name|add
argument_list|(
name|s
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Lists
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|CalciteSchema
name|getSubSchema
parameter_list|(
name|String
name|schemaName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
comment|// Check explicit schemas.
comment|//noinspection LoopStatementThatDoesntLoop
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|entry
range|:
name|subSchemaMap
operator|.
name|range
argument_list|(
name|schemaName
argument_list|,
name|caseSensitive
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
name|getImplicitSubSchema
argument_list|(
name|schemaName
argument_list|,
name|caseSensitive
argument_list|)
return|;
block|}
comment|/** Adds a child schema of this schema. */
specifier|public
specifier|abstract
name|CalciteSchema
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
function_decl|;
comment|/** Returns a table that materializes the given SQL statement. */
specifier|public
specifier|final
name|TableEntry
name|getTableBySql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
for|for
control|(
name|TableEntry
name|tableEntry
range|:
name|tableMap
operator|.
name|map
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|tableEntry
operator|.
name|sqls
operator|.
name|contains
argument_list|(
name|sql
argument_list|)
condition|)
block|{
return|return
name|tableEntry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** Returns a table with the given name. Does not look for views. */
specifier|public
specifier|final
name|TableEntry
name|getTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
comment|// Check explicit tables.
comment|//noinspection LoopStatementThatDoesntLoop
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TableEntry
argument_list|>
name|entry
range|:
name|tableMap
operator|.
name|range
argument_list|(
name|tableName
argument_list|,
name|caseSensitive
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
name|getImplicitTable
argument_list|(
name|tableName
argument_list|,
name|caseSensitive
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|SchemaPlus
name|plus
parameter_list|()
block|{
return|return
operator|new
name|SchemaPlusImpl
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|CalciteSchema
name|from
parameter_list|(
name|SchemaPlus
name|plus
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SchemaPlusImpl
operator|)
name|plus
operator|)
operator|.
name|calciteSchema
argument_list|()
return|;
block|}
comment|/** Returns the default path resolving functions from this schema.    *    *<p>The path consists is a list of lists of strings.    * Each list of strings represents the path of a schema from the root schema.    * For example, [[], [foo], [foo, bar, baz]] represents three schemas: the    * root schema "/" (level 0), "/foo" (level 1) and "/foo/bar/baz" (level 3).    *    * @return Path of this schema; never null, may be empty    */
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
return|return
name|path
return|;
block|}
comment|// Return a path consisting of just this schema.
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|path
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns a collection of sub-schemas, both explicit (defined using    * {@link #add(String, org.apache.calcite.schema.Schema)}) and implicit    * (defined using {@link org.apache.calcite.schema.Schema#getSubSchemaNames()}    * and {@link Schema#getSubSchema(String)}). */
specifier|public
specifier|final
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|getSubSchemaMap
parameter_list|()
block|{
comment|// Build a map of implicit sub-schemas first, then explicit sub-schemas.
comment|// If there are implicit and explicit with the same name, explicit wins.
specifier|final
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|CalciteSchema
argument_list|>
name|builder
init|=
operator|new
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<>
argument_list|(
name|NameSet
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|subSchemaMap
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|addImplicitSubSchemaToBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|Compatible
operator|.
name|INSTANCE
operator|.
name|navigableMap
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a collection of lattices.    *    *<p>All are explicit (defined using {@link #add(String, Lattice)}). */
specifier|public
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|LatticeEntry
argument_list|>
name|getLatticeMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|latticeMap
operator|.
name|map
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the set of all table names. Includes implicit and explicit tables    * and functions with zero parameters. */
specifier|public
specifier|final
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|getTableNames
parameter_list|()
block|{
specifier|final
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<>
argument_list|(
name|NameSet
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
comment|// Add explicit tables, case-sensitive.
name|builder
operator|.
name|addAll
argument_list|(
name|tableMap
operator|.
name|map
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add implicit tables, case-sensitive.
name|addImplicitTableToBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|Compatible
operator|.
name|INSTANCE
operator|.
name|navigableSet
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a collection of all functions, explicit and implicit, with a given    * name. Never null. */
specifier|public
specifier|final
name|Collection
argument_list|<
name|Function
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Function
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// Add explicit functions.
for|for
control|(
name|FunctionEntry
name|functionEntry
range|:
name|Pair
operator|.
name|right
argument_list|(
name|functionMap
operator|.
name|range
argument_list|(
name|name
argument_list|,
name|caseSensitive
argument_list|)
argument_list|)
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|functionEntry
operator|.
name|getFunction
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add implicit functions.
name|addImplicitFunctionsToBuilder
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Returns the list of function names in this schema, both implicit and    * explicit, never null. */
specifier|public
specifier|final
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|getFunctionNames
parameter_list|()
block|{
specifier|final
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<>
argument_list|(
name|NameSet
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
comment|// Add explicit functions, case-sensitive.
name|builder
operator|.
name|addAll
argument_list|(
name|functionMap
operator|.
name|map
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add implicit functions, case-sensitive.
name|addImplicitFuncNamesToBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|Compatible
operator|.
name|INSTANCE
operator|.
name|navigableSet
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns tables derived from explicit and implicit functions    * that take zero parameters. */
specifier|public
specifier|final
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTablesBasedOnNullaryFunctions
parameter_list|()
block|{
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|builder
init|=
operator|new
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<>
argument_list|(
name|NameSet
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FunctionEntry
argument_list|>
name|entry
range|:
name|nullaryFunctionMap
operator|.
name|map
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Function
name|function
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getFunction
argument_list|()
decl_stmt|;
if|if
condition|(
name|function
operator|instanceof
name|TableMacro
condition|)
block|{
assert|assert
name|function
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
assert|;
specifier|final
name|Table
name|table
init|=
operator|(
operator|(
name|TableMacro
operator|)
name|function
operator|)
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add tables derived from implicit functions
name|addImplicitTablesBasedOnNullaryFunctionsToBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|Compatible
operator|.
name|INSTANCE
operator|.
name|navigableMap
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a tables derived from explicit and implicit functions    * that take zero parameters. */
specifier|public
specifier|final
name|TableEntry
name|getTableBasedOnNullaryFunction
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FunctionEntry
argument_list|>
name|entry
range|:
name|nullaryFunctionMap
operator|.
name|range
argument_list|(
name|tableName
argument_list|,
name|caseSensitive
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Function
name|function
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getFunction
argument_list|()
decl_stmt|;
if|if
condition|(
name|function
operator|instanceof
name|TableMacro
condition|)
block|{
assert|assert
name|function
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
assert|;
specifier|final
name|Table
name|table
init|=
operator|(
operator|(
name|TableMacro
operator|)
name|function
operator|)
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tableEntry
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
return|return
name|getImplicitTableBasedOnNullaryFunction
argument_list|(
name|tableName
argument_list|,
name|caseSensitive
argument_list|)
return|;
block|}
comment|/** Creates a snapshot of this CalciteSchema as of the specified time. All    * explicit objects in this CalciteSchema will be copied into the snapshot    * CalciteSchema, while the contents of the snapshot of the underlying schema    * should not change as specified in {@link Schema#snapshot(SchemaVersion)}.    * Snapshots of explicit sub schemas will be created and copied recursively.    *    *<p>Currently, to accommodate the requirement of creating tables on the fly    * for materializations, the snapshot will still use the same table map and    * lattice map as in the original CalciteSchema instead of making copies.</p>    *    * @param version The current schema version    *    * @return the schema snapshot.    */
specifier|public
name|CalciteSchema
name|createSnapshot
parameter_list|(
name|SchemaVersion
name|version
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|this
operator|.
name|isRoot
argument_list|()
argument_list|,
literal|"must be root schema"
argument_list|)
expr_stmt|;
return|return
name|snapshot
argument_list|(
literal|null
argument_list|,
name|version
argument_list|)
return|;
block|}
comment|/** Returns a subset of a map whose keys match the given string    * case-insensitively. */
specifier|protected
specifier|static
parameter_list|<
name|V
parameter_list|>
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|find
parameter_list|(
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|String
name|s
parameter_list|)
block|{
assert|assert
name|map
operator|.
name|comparator
argument_list|()
operator|==
name|NameSet
operator|.
name|COMPARATOR
assert|;
return|return
name|map
operator|.
name|subMap
argument_list|(
name|s
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
literal|true
argument_list|,
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Returns a subset of a set whose values match the given string    * case-insensitively. */
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|set
parameter_list|,
name|String
name|name
parameter_list|)
block|{
assert|assert
name|set
operator|.
name|comparator
argument_list|()
operator|==
name|NameSet
operator|.
name|COMPARATOR
assert|;
return|return
name|set
operator|.
name|subSet
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Creates a root schema.    *    *<p>When<code>addMetadataSchema</code> argument is true adds a "metadata"    * schema containing definitions of tables, columns etc. to root schema.    * By default, creates a {@link CachingCalciteSchema}.    */
specifier|public
specifier|static
name|CalciteSchema
name|createRootSchema
parameter_list|(
name|boolean
name|addMetadataSchema
parameter_list|)
block|{
return|return
name|createRootSchema
argument_list|(
name|addMetadataSchema
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Creates a root schema.    *    * @param addMetadataSchema Whether to add a "metadata" schema containing    *              definitions of tables, columns etc.    * @param cache If true create {@link CachingCalciteSchema};    *                if false create {@link SimpleCalciteSchema}    */
specifier|public
specifier|static
name|CalciteSchema
name|createRootSchema
parameter_list|(
name|boolean
name|addMetadataSchema
parameter_list|,
name|boolean
name|cache
parameter_list|)
block|{
return|return
name|createRootSchema
argument_list|(
name|addMetadataSchema
argument_list|,
name|cache
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/** Creates a root schema.    *    * @param addMetadataSchema Whether to add a "metadata" schema containing    *              definitions of tables, columns etc.    * @param cache If true create {@link CachingCalciteSchema};    *                if false create {@link SimpleCalciteSchema}    * @param name Schema name    */
specifier|public
specifier|static
name|CalciteSchema
name|createRootSchema
parameter_list|(
name|boolean
name|addMetadataSchema
parameter_list|,
name|boolean
name|cache
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|CalciteSchema
name|rootSchema
decl_stmt|;
specifier|final
name|Schema
name|schema
init|=
operator|new
name|CalciteConnectionImpl
operator|.
name|RootSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
condition|)
block|{
name|rootSchema
operator|=
operator|new
name|CachingCalciteSchema
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rootSchema
operator|=
operator|new
name|SimpleCalciteSchema
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addMetadataSchema
condition|)
block|{
name|rootSchema
operator|.
name|add
argument_list|(
literal|"metadata"
argument_list|,
name|MetadataSchema
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
return|return
name|rootSchema
return|;
block|}
comment|/**    * Entry in a schema, such as a table or sub-schema.    *    *<p>Each object's name is a property of its membership in a schema;    * therefore in principle it could belong to several schemas, or    * even the same schema several times, with different names. In this    * respect, it is like an inode in a Unix file system.</p>    *    *<p>The members of a schema must have unique names.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|Entry
block|{
specifier|public
specifier|final
name|CalciteSchema
name|schema
decl_stmt|;
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|Entry
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** Returns this object's path. For example ["hr", "emps"]. */
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|()
block|{
return|return
name|schema
operator|.
name|path
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/** Membership of a table in a schema. */
specifier|public
specifier|abstract
specifier|static
class|class
name|TableEntry
extends|extends
name|Entry
block|{
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|sqls
decl_stmt|;
specifier|public
name|TableEntry
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|sqls
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|sqls
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|sqls
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|Table
name|getTable
parameter_list|()
function_decl|;
block|}
comment|/** Membership of a function in a schema. */
specifier|public
specifier|abstract
specifier|static
class|class
name|FunctionEntry
extends|extends
name|Entry
block|{
specifier|public
name|FunctionEntry
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|Function
name|getFunction
parameter_list|()
function_decl|;
comment|/** Whether this represents a materialized view. (At a given point in time,      * it may or may not be materialized as a table.) */
specifier|public
specifier|abstract
name|boolean
name|isMaterialization
parameter_list|()
function_decl|;
block|}
comment|/** Membership of a lattice in a schema. */
specifier|public
specifier|abstract
specifier|static
class|class
name|LatticeEntry
extends|extends
name|Entry
block|{
specifier|public
name|LatticeEntry
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|Lattice
name|getLattice
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|TableEntry
name|getStarTable
parameter_list|()
function_decl|;
block|}
comment|/** Implementation of {@link SchemaPlus} based on a    * {@link org.apache.calcite.jdbc.CalciteSchema}. */
specifier|private
class|class
name|SchemaPlusImpl
implements|implements
name|SchemaPlus
block|{
name|CalciteSchema
name|calciteSchema
parameter_list|()
block|{
return|return
name|CalciteSchema
operator|.
name|this
return|;
block|}
specifier|public
name|SchemaPlus
name|getParentSchema
parameter_list|()
block|{
return|return
name|parent
operator|==
literal|null
condition|?
literal|null
else|:
name|parent
operator|.
name|plus
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|CalciteSchema
operator|.
name|this
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isMutable
parameter_list|()
block|{
return|return
name|schema
operator|.
name|isMutable
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCacheEnabled
parameter_list|(
name|boolean
name|cache
parameter_list|)
block|{
name|CalciteSchema
operator|.
name|this
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCacheEnabled
parameter_list|()
block|{
return|return
name|CalciteSchema
operator|.
name|this
operator|.
name|isCacheEnabled
argument_list|()
return|;
block|}
specifier|public
name|Schema
name|snapshot
parameter_list|(
name|SchemaVersion
name|version
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|SchemaPlus
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|schema
operator|.
name|getExpression
argument_list|(
name|parentSchema
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|TableEntry
name|entry
init|=
name|CalciteSchema
operator|.
name|this
operator|.
name|getTable
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|entry
operator|==
literal|null
condition|?
literal|null
else|:
name|entry
operator|.
name|getTable
argument_list|()
return|;
block|}
specifier|public
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|getTableNames
parameter_list|()
block|{
return|return
name|CalciteSchema
operator|.
name|this
operator|.
name|getTableNames
argument_list|()
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Function
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|CalciteSchema
operator|.
name|this
operator|.
name|getFunctions
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|getFunctionNames
parameter_list|()
block|{
return|return
name|CalciteSchema
operator|.
name|this
operator|.
name|getFunctionNames
argument_list|()
return|;
block|}
specifier|public
name|SchemaPlus
name|getSubSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|CalciteSchema
name|subSchema
init|=
name|CalciteSchema
operator|.
name|this
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|subSchema
operator|==
literal|null
condition|?
literal|null
else|:
name|subSchema
operator|.
name|plus
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSubSchemaNames
parameter_list|()
block|{
return|return
name|CalciteSchema
operator|.
name|this
operator|.
name|getSubSchemaMap
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|SchemaPlus
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
specifier|final
name|CalciteSchema
name|calciteSchema
init|=
name|CalciteSchema
operator|.
name|this
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
decl_stmt|;
return|return
name|calciteSchema
operator|.
name|plus
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|CalciteSchema
operator|.
name|this
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|CalciteSchema
operator|.
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|CalciteSchema
operator|.
name|this
operator|.
name|schema
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|CalciteSchema
operator|.
name|this
operator|.
name|schema
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"not a "
operator|+
name|clazz
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|ImmutableList
argument_list|<
name|ImmutableList
argument_list|<
name|String
argument_list|>
argument_list|>
name|path
parameter_list|)
block|{
name|CalciteSchema
operator|.
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
name|CalciteSchema
operator|.
name|this
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Function
name|function
parameter_list|)
block|{
name|CalciteSchema
operator|.
name|this
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Lattice
name|lattice
parameter_list|)
block|{
name|CalciteSchema
operator|.
name|this
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|lattice
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Implementation of {@link CalciteSchema.TableEntry}    * where all properties are held in fields.    */
specifier|public
specifier|static
class|class
name|TableEntryImpl
extends|extends
name|TableEntry
block|{
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
comment|/** Creates a TableEntryImpl. */
specifier|public
name|TableEntryImpl
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|table
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|sqls
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|name
argument_list|,
name|sqls
argument_list|)
expr_stmt|;
assert|assert
name|table
operator|!=
literal|null
assert|;
name|this
operator|.
name|table
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
block|}
comment|/**    * Implementation of {@link FunctionEntry}    * where all properties are held in fields.    */
specifier|public
specifier|static
class|class
name|FunctionEntryImpl
extends|extends
name|FunctionEntry
block|{
specifier|private
specifier|final
name|Function
name|function
decl_stmt|;
comment|/** Creates a FunctionEntryImpl. */
specifier|public
name|FunctionEntryImpl
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|Function
name|function
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
block|}
specifier|public
name|Function
name|getFunction
parameter_list|()
block|{
return|return
name|function
return|;
block|}
specifier|public
name|boolean
name|isMaterialization
parameter_list|()
block|{
return|return
name|function
operator|instanceof
name|MaterializedViewTable
operator|.
name|MaterializedViewTableMacro
return|;
block|}
block|}
comment|/**    * Implementation of {@link LatticeEntry}    * where all properties are held in fields.    */
specifier|public
specifier|static
class|class
name|LatticeEntryImpl
extends|extends
name|LatticeEntry
block|{
specifier|private
specifier|final
name|Lattice
name|lattice
decl_stmt|;
specifier|private
specifier|final
name|CalciteSchema
operator|.
name|TableEntry
name|starTableEntry
decl_stmt|;
comment|/** Creates a LatticeEntryImpl. */
specifier|public
name|LatticeEntryImpl
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|Lattice
name|lattice
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|lattice
operator|=
name|lattice
expr_stmt|;
comment|// Star table has same name as lattice and is in same schema.
specifier|final
name|StarTable
name|starTable
init|=
name|lattice
operator|.
name|createStarTable
argument_list|()
decl_stmt|;
name|starTableEntry
operator|=
name|schema
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|starTable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Lattice
name|getLattice
parameter_list|()
block|{
return|return
name|lattice
return|;
block|}
specifier|public
name|TableEntry
name|getStarTable
parameter_list|()
block|{
return|return
name|starTableEntry
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End CalciteSchema.java
end_comment

end_unit

