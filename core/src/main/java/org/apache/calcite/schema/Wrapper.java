begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apiguardian
operator|.
name|api
operator|.
name|API
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Mix-in interface that allows you to find sub-objects.  */
end_comment

begin_interface
specifier|public
interface|interface
name|Wrapper
block|{
comment|/** Finds an instance of an interface implemented by this object,    * or returns null if this object does not support that interface. */
parameter_list|<
name|C
extends|extends
name|Object
parameter_list|>
annotation|@
name|Nullable
name|C
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
function_decl|;
comment|/** Finds an instance of an interface implemented by this object,    * or throws NullPointerException if this object does not support    * that interface. */
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.27"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|INTERNAL
argument_list|)
specifier|default
parameter_list|<
name|C
extends|extends
name|Object
parameter_list|>
name|C
name|unwrapOrThrow
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
name|requireNonNull
argument_list|(
name|unwrap
argument_list|(
name|aClass
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"Can't unwrap "
operator|+
name|aClass
operator|+
literal|" from "
operator|+
name|this
argument_list|)
return|;
block|}
comment|/** Finds an instance of an interface implemented by this object,    * or returns {@link Optional#empty()} if this object does not support    * that interface. */
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.27"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|INTERNAL
argument_list|)
specifier|default
parameter_list|<
name|C
extends|extends
name|Object
parameter_list|>
name|Optional
argument_list|<
name|C
argument_list|>
name|maybeUnwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|unwrap
argument_list|(
name|aClass
argument_list|)
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

