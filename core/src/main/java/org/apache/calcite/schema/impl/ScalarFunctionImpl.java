begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|CallImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|NullPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|ReflectiveCallNotNullImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|RexImpTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|SemiStrict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Strict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ImplementableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScalarFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/** * Implementation of {@link org.apache.calcite.schema.ScalarFunction}. */
end_comment

begin_class
specifier|public
class|class
name|ScalarFunctionImpl
extends|extends
name|ReflectiveFunctionBase
implements|implements
name|ScalarFunction
implements|,
name|ImplementableFunction
block|{
specifier|private
specifier|final
name|CallImplementor
name|implementor
decl_stmt|;
comment|/** Private constructor. */
specifier|private
name|ScalarFunctionImpl
parameter_list|(
name|Method
name|method
parameter_list|,
name|CallImplementor
name|implementor
parameter_list|)
block|{
name|super
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|this
operator|.
name|implementor
operator|=
name|implementor
expr_stmt|;
block|}
comment|/**    * Creates {@link org.apache.calcite.schema.ScalarFunction} for each method in    * a given class.    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|ScalarFunction
argument_list|>
name|createAll
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ScalarFunction
argument_list|>
name|builder
init|=
name|ImmutableMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|==
name|Object
operator|.
name|class
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|classHasPublicZeroArgsConstructor
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|ScalarFunction
name|function
init|=
name|create
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a map of all functions based on the methods in a given class.    * It is keyed by method names and maps to both    * {@link org.apache.calcite.schema.ScalarFunction}    * and {@link org.apache.calcite.schema.TableFunction}.    */
specifier|public
specifier|static
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|Function
argument_list|>
name|functions
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Function
argument_list|>
name|builder
init|=
name|ImmutableMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|==
name|Object
operator|.
name|class
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|classHasPublicZeroArgsConstructor
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|TableFunction
name|tableFunction
init|=
name|TableFunctionImpl
operator|.
name|create
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableFunction
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|tableFunction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ScalarFunction
name|function
init|=
name|create
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Creates {@link org.apache.calcite.schema.ScalarFunction} from given class.    *    *<p>If a method of the given name is not found or it does not suit,    * returns {@code null}.    *    * @param clazz class that is used to implement the function    * @param methodName Method name (typically "eval")    * @return created {@link ScalarFunction} or null    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|ScalarFunction
name|create
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
specifier|final
name|Method
name|method
init|=
name|findMethod
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|create
argument_list|(
name|method
argument_list|)
return|;
block|}
comment|/**    * Creates {@link org.apache.calcite.schema.ScalarFunction} from given method.    * When {@code eval} method does not suit, {@code null} is returned.    *    * @param method method that is used to implement the function    * @return created {@link ScalarFunction} or null    */
specifier|public
specifier|static
name|ScalarFunction
name|create
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|Class
name|clazz
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|classHasPublicZeroArgsConstructor
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|requireDefaultConstructor
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
name|CallImplementor
name|implementor
init|=
name|createImplementor
argument_list|(
name|method
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScalarFunctionImpl
argument_list|(
name|method
argument_list|,
name|implementor
argument_list|)
return|;
block|}
comment|/**    * Creates unsafe version of {@link ScalarFunction} from any method. The method    * does not need to be static or belong to a class with default constructor. It is    * the responsibility of the underlying engine to initialize the UDF object that    * contain the method.    *    * @param method method that is used to implement the function    */
specifier|public
specifier|static
name|ScalarFunction
name|createUnsafe
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|CallImplementor
name|implementor
init|=
name|createImplementor
argument_list|(
name|method
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScalarFunctionImpl
argument_list|(
name|method
argument_list|,
name|implementor
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getReturnType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CallImplementor
name|getImplementor
parameter_list|()
block|{
return|return
name|implementor
return|;
block|}
specifier|private
specifier|static
name|CallImplementor
name|createImplementor
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
specifier|final
name|NullPolicy
name|nullPolicy
init|=
name|getNullPolicy
argument_list|(
name|method
argument_list|)
decl_stmt|;
return|return
name|RexImpTable
operator|.
name|createImplementor
argument_list|(
operator|new
name|ReflectiveCallNotNullImplementor
argument_list|(
name|method
argument_list|)
argument_list|,
name|nullPolicy
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NullPolicy
name|getNullPolicy
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getAnnotation
argument_list|(
name|Strict
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|NullPolicy
operator|.
name|STRICT
return|;
block|}
if|else if
condition|(
name|m
operator|.
name|getAnnotation
argument_list|(
name|SemiStrict
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|NullPolicy
operator|.
name|SEMI_STRICT
return|;
block|}
if|else if
condition|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Strict
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|NullPolicy
operator|.
name|STRICT
return|;
block|}
if|else if
condition|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|SemiStrict
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|NullPolicy
operator|.
name|SEMI_STRICT
return|;
block|}
else|else
block|{
return|return
name|NullPolicy
operator|.
name|NONE
return|;
block|}
block|}
specifier|public
name|RelDataType
name|getReturnType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
comment|// Strict and semi-strict functions can return null even if their Java
comment|// functions return a primitive type. Because when one of their arguments
comment|// is null, they won't even be called.
specifier|final
name|RelDataType
name|returnType
init|=
name|getReturnType
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|getNullPolicy
argument_list|(
name|method
argument_list|)
condition|)
block|{
case|case
name|STRICT
case|:
for|for
control|(
name|RelDataType
name|type
range|:
name|opBinding
operator|.
name|collectOperandTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|returnType
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|SEMI_STRICT
case|:
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|returnType
argument_list|,
literal|true
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|returnType
return|;
block|}
block|}
end_class

end_unit

