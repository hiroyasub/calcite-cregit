begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ModifiableView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Wrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|NullInitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Extension to {@link ViewTable} that is modifiable. */
end_comment

begin_class
specifier|public
class|class
name|ModifiableViewTable
extends|extends
name|ViewTable
implements|implements
name|ModifiableView
implements|,
name|Wrapper
block|{
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|Path
name|tablePath
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|constraint
decl_stmt|;
specifier|private
specifier|final
name|ImmutableIntList
name|columnMapping
decl_stmt|;
specifier|private
specifier|final
name|InitializerExpressionFactory
name|initializerExpressionFactory
decl_stmt|;
comment|/** Creates a ModifiableViewTable. */
specifier|public
name|ModifiableViewTable
parameter_list|(
name|Type
name|elementType
parameter_list|,
name|RelProtoDataType
name|rowType
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewPath
parameter_list|,
name|Table
name|table
parameter_list|,
name|Path
name|tablePath
parameter_list|,
name|RexNode
name|constraint
parameter_list|,
name|ImmutableIntList
name|columnMapping
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
argument_list|(
name|elementType
argument_list|,
name|rowType
argument_list|,
name|viewSql
argument_list|,
name|schemaPath
argument_list|,
name|viewPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|tablePath
operator|=
name|tablePath
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|constraint
expr_stmt|;
name|this
operator|.
name|columnMapping
operator|=
name|columnMapping
expr_stmt|;
name|this
operator|.
name|initializerExpressionFactory
operator|=
operator|new
name|ModifiableViewTableInitializerExpressionFactory
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|copy
argument_list|(
name|constraint
argument_list|)
return|;
block|}
specifier|public
name|ImmutableIntList
name|getColumnMapping
parameter_list|()
block|{
return|return
name|columnMapping
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
specifier|public
name|Path
name|getTablePath
parameter_list|()
block|{
return|return
name|tablePath
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|C
parameter_list|>
name|C
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
if|if
condition|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|initializerExpressionFactory
argument_list|)
condition|)
block|{
return|return
name|aClass
operator|.
name|cast
argument_list|(
name|initializerExpressionFactory
argument_list|)
return|;
block|}
if|else if
condition|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return
name|aClass
operator|.
name|cast
argument_list|(
name|table
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Initializes columns based on the view constraint.    */
specifier|private
class|class
name|ModifiableViewTableInitializerExpressionFactory
extends|extends
name|NullInitializerExpressionFactory
block|{
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|RexNode
argument_list|>
name|projectMap
decl_stmt|;
specifier|private
name|ModifiableViewTableInitializerExpressionFactory
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|RexNode
argument_list|>
name|projectMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|inferViewPredicates
argument_list|(
name|projectMap
argument_list|,
name|filters
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
assert|assert
name|filters
operator|.
name|isEmpty
argument_list|()
assert|;
name|this
operator|.
name|projectMap
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|projectMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGeneratedAlways
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|int
name|iColumn
parameter_list|)
block|{
assert|assert
name|table
operator|.
name|unwrap
argument_list|(
name|ModifiableViewTable
operator|.
name|class
argument_list|)
operator|!=
literal|null
assert|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|newColumnDefaultValue
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|int
name|iColumn
parameter_list|)
block|{
specifier|final
name|ModifiableViewTable
name|viewTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ModifiableViewTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|viewType
init|=
name|viewTable
operator|.
name|getRowType
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|iType
init|=
name|viewType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Use the view constraint to generate the default value if the column is constrained.
specifier|final
name|int
name|mappedOrdinal
init|=
name|viewTable
operator|.
name|columnMapping
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|viewConstraint
init|=
name|projectMap
operator|.
name|get
argument_list|(
name|mappedOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|viewConstraint
operator|!=
literal|null
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|iType
argument_list|,
name|viewConstraint
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Otherwise use the default value of the underlying table.
specifier|final
name|Table
name|schemaTable
init|=
name|viewTable
operator|.
name|unwrap
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaTable
operator|instanceof
name|Wrapper
condition|)
block|{
specifier|final
name|InitializerExpressionFactory
name|initializerExpressionFactory
init|=
operator|(
operator|(
name|Wrapper
operator|)
name|schemaTable
operator|)
operator|.
name|unwrap
argument_list|(
name|InitializerExpressionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|initializerExpressionFactory
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RexNode
name|tableConstraint
init|=
name|initializerExpressionFactory
operator|.
name|newColumnDefaultValue
argument_list|(
name|table
argument_list|,
name|iColumn
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|iType
argument_list|,
name|tableConstraint
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
comment|// Otherwise Sql type of NULL.
return|return
name|super
operator|.
name|newColumnDefaultValue
argument_list|(
name|table
argument_list|,
name|iColumn
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|newAttributeInitializer
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|SqlFunction
name|constructor
parameter_list|,
name|int
name|iAttribute
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|constructorArgs
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented - unknown requirements"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ModifiableViewTable.java
end_comment

end_unit

