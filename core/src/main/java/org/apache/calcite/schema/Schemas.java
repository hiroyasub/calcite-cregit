begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContexts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfigImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalcitePrepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|MethodCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
operator|.
name|LatticeEntry
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Utility functions for schemas.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Schemas
block|{
specifier|private
name|Schemas
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"no instances!"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|CalciteSchema
operator|.
expr|@
name|Nullable
name|FunctionEntry
name|resolve
argument_list|(
name|RelDataTypeFactory
name|typeFactory
argument_list|,
name|String
name|name
argument_list|,
name|Collection
argument_list|<
name|CalciteSchema
operator|.
name|FunctionEntry
argument_list|>
name|functionEntries
argument_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argumentTypes
argument_list|)
block|{
name|final
name|List
argument_list|<
name|CalciteSchema
operator|.
name|FunctionEntry
argument_list|>
name|matches
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
block|;
for|for
control|(
name|CalciteSchema
operator|.
name|FunctionEntry
name|entry
range|:
name|functionEntries
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|typeFactory
argument_list|,
name|entry
operator|.
name|getFunction
argument_list|()
argument_list|,
name|argumentTypes
argument_list|)
condition|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_switch
switch|switch
condition|(
name|matches
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|null
return|;
case|case
literal|1
case|:
return|return
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"More than one match for "
operator|+
name|name
operator|+
literal|" with arguments "
operator|+
name|argumentTypes
argument_list|)
throw|;
block|}
end_switch

begin_function
unit|}    private
specifier|static
name|boolean
name|matches
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|Function
name|member
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argumentTypes
parameter_list|)
block|{
name|List
argument_list|<
name|FunctionParameter
argument_list|>
name|parameters
init|=
name|member
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|size
argument_list|()
operator|!=
name|argumentTypes
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argumentTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelDataType
name|argumentType
init|=
name|argumentTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|FunctionParameter
name|parameter
init|=
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|canConvert
argument_list|(
name|argumentType
argument_list|,
name|parameter
operator|.
name|getType
argument_list|(
name|typeFactory
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|canConvert
parameter_list|(
name|RelDataType
name|fromType
parameter_list|,
name|RelDataType
name|toType
parameter_list|)
block|{
return|return
name|SqlTypeUtil
operator|.
name|canAssignFrom
argument_list|(
name|toType
argument_list|,
name|fromType
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns the expression for a schema. */
end_comment

begin_function
specifier|public
specifier|static
name|Expression
name|expression
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|)
block|{
return|return
name|schema
operator|.
name|getExpression
argument_list|(
name|schema
operator|.
name|getParentSchema
argument_list|()
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns the expression for a sub-schema. */
end_comment

begin_function
specifier|public
specifier|static
name|Expression
name|subSchemaExpression
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
comment|// (Type) schemaExpression.getSubSchema("name")
specifier|final
name|Expression
name|schemaExpression
init|=
name|expression
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|Expression
name|call
init|=
name|Expressions
operator|.
name|call
argument_list|(
name|schemaExpression
argument_list|,
name|BuiltInMethod
operator|.
name|SCHEMA_GET_SUB_SCHEMA
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
comment|//CHECKSTYLE: IGNORE 2
comment|//noinspection unchecked
if|if
condition|(
literal|false
operator|&&
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|Schema
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|unwrap
argument_list|(
name|call
argument_list|,
name|type
argument_list|)
return|;
block|}
return|return
name|call
return|;
block|}
end_function

begin_comment
comment|/** Converts a schema expression to a given type by calling the    * {@link SchemaPlus#unwrap(Class)} method. */
end_comment

begin_function
specifier|public
specifier|static
name|Expression
name|unwrap
parameter_list|(
name|Expression
name|call
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|call
argument_list|,
name|BuiltInMethod
operator|.
name|SCHEMA_PLUS_UNWRAP
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns the expression to access a table within a schema. */
end_comment

begin_function
specifier|public
specifier|static
name|Expression
name|tableExpression
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
specifier|final
name|MethodCallExpression
name|expression
decl_stmt|;
if|if
condition|(
name|Table
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|expression
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|expression
argument_list|(
name|schema
argument_list|)
argument_list|,
name|BuiltInMethod
operator|.
name|SCHEMA_GET_TABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ScannableTable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|SCHEMAS_ENUMERABLE_SCANNABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|expression
argument_list|,
name|ScannableTable
operator|.
name|class
argument_list|)
argument_list|,
name|DataContext
operator|.
name|ROOT
argument_list|)
return|;
block|}
if|if
condition|(
name|FilterableTable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|SCHEMAS_ENUMERABLE_FILTERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|expression
argument_list|,
name|FilterableTable
operator|.
name|class
argument_list|)
argument_list|,
name|DataContext
operator|.
name|ROOT
argument_list|)
return|;
block|}
if|if
condition|(
name|ProjectableFilterableTable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|SCHEMAS_ENUMERABLE_PROJECTABLE_FILTERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|expression
argument_list|,
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
argument_list|,
name|DataContext
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|expression
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|SCHEMAS_QUERYABLE
operator|.
name|method
argument_list|,
name|DataContext
operator|.
name|ROOT
argument_list|,
name|expression
argument_list|(
name|schema
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|elementType
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|EnumUtils
operator|.
name|convert
argument_list|(
name|expression
argument_list|,
name|clazz
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|DataContext
name|createDataContext
parameter_list|(
name|Connection
name|connection
parameter_list|,
annotation|@
name|Nullable
name|SchemaPlus
name|rootSchema
parameter_list|)
block|{
return|return
name|DataContexts
operator|.
name|of
argument_list|(
operator|(
name|CalciteConnection
operator|)
name|connection
argument_list|,
name|rootSchema
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns a {@link Queryable}, given a fully-qualified table name. */
end_comment

begin_function
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Queryable
argument_list|<
name|E
argument_list|>
name|queryable
parameter_list|(
name|DataContext
name|root
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
return|return
name|queryable
argument_list|(
name|root
argument_list|,
name|clazz
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|names
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns a {@link Queryable}, given a fully-qualified table name as an    * iterable. */
end_comment

begin_function
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Queryable
argument_list|<
name|E
argument_list|>
name|queryable
parameter_list|(
name|DataContext
name|root
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|SchemaPlus
name|schema
init|=
name|root
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|iterator
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
condition|;
control|)
block|{
name|String
name|name
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|requireNonNull
argument_list|(
name|schema
argument_list|,
literal|"schema"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SchemaPlus
name|next
init|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"schema "
operator|+
name|name
operator|+
literal|" is not found in "
operator|+
name|schema
argument_list|)
throw|;
block|}
name|schema
operator|=
name|next
expr_stmt|;
block|}
else|else
block|{
return|return
name|queryable
argument_list|(
name|root
argument_list|,
name|schema
argument_list|,
name|clazz
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_function

begin_comment
comment|/** Returns a {@link Queryable}, given a schema and table name. */
end_comment

begin_function
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Queryable
argument_list|<
name|E
argument_list|>
name|queryable
parameter_list|(
name|DataContext
name|root
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|QueryableTable
name|table
init|=
operator|(
name|QueryableTable
operator|)
name|requireNonNull
argument_list|(
name|schema
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"table "
operator|+
name|tableName
operator|+
literal|" is not found in "
operator|+
name|schema
argument_list|)
decl_stmt|;
name|QueryProvider
name|queryProvider
init|=
name|root
operator|.
name|getQueryProvider
argument_list|()
decl_stmt|;
return|return
name|table
operator|.
name|asQueryable
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|tableName
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns an {@link org.apache.calcite.linq4j.Enumerable} over the rows of    * a given table, representing each row as an object array. */
end_comment

begin_function
specifier|public
specifier|static
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|enumerable
parameter_list|(
specifier|final
name|ScannableTable
name|table
parameter_list|,
specifier|final
name|DataContext
name|root
parameter_list|)
block|{
return|return
name|table
operator|.
name|scan
argument_list|(
name|root
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns an {@link org.apache.calcite.linq4j.Enumerable} over the rows of    * a given table, not applying any filters, representing each row as an object    * array. */
end_comment

begin_function
specifier|public
specifier|static
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|enumerable
parameter_list|(
specifier|final
name|FilterableTable
name|table
parameter_list|,
specifier|final
name|DataContext
name|root
parameter_list|)
block|{
return|return
name|table
operator|.
name|scan
argument_list|(
name|root
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns an {@link org.apache.calcite.linq4j.Enumerable} over the rows of    * a given table, not applying any filters and projecting all columns,    * representing each row as an object array. */
end_comment

begin_function
specifier|public
specifier|static
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|enumerable
parameter_list|(
specifier|final
name|ProjectableFilterableTable
name|table
parameter_list|,
specifier|final
name|DataContext
name|root
parameter_list|)
block|{
name|JavaTypeFactory
name|typeFactory
init|=
name|root
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
return|return
name|table
operator|.
name|scan
argument_list|(
name|root
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|identity
argument_list|(
name|table
operator|.
name|getRowType
argument_list|(
name|typeFactory
argument_list|)
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|int
index|[]
name|identity
parameter_list|(
name|int
name|count
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|integers
init|=
operator|new
name|int
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|integers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|integers
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
return|return
name|integers
return|;
block|}
end_function

begin_comment
comment|/** Returns an {@link org.apache.calcite.linq4j.Enumerable} over object    * arrays, given a fully-qualified table name which leads to a    * {@link ScannableTable}. */
end_comment

begin_function
specifier|public
specifier|static
annotation|@
name|Nullable
name|Table
name|table
parameter_list|(
name|DataContext
name|root
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
name|SchemaPlus
name|schema
init|=
name|root
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|names
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|iterator
init|=
name|nameList
operator|.
name|iterator
argument_list|()
init|;
condition|;
control|)
block|{
name|String
name|name
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|requireNonNull
argument_list|(
name|schema
argument_list|,
literal|"schema"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SchemaPlus
name|next
init|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"schema "
operator|+
name|name
operator|+
literal|" is not found in "
operator|+
name|schema
argument_list|)
throw|;
block|}
name|schema
operator|=
name|next
expr_stmt|;
block|}
else|else
block|{
return|return
name|schema
operator|.
name|getTable
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_function

begin_comment
comment|/** Parses and validates a SQL query. For use within Calcite only. */
end_comment

begin_function
specifier|public
specifier|static
name|CalcitePrepare
operator|.
name|ParseResult
name|parse
parameter_list|(
specifier|final
name|CalciteConnection
name|connection
parameter_list|,
specifier|final
name|CalciteSchema
name|schema
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
specifier|final
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|CalcitePrepare
name|prepare
init|=
name|CalcitePrepare
operator|.
name|DEFAULT_FACTORY
operator|.
name|apply
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|CalciteConnectionProperty
argument_list|,
name|String
argument_list|>
name|propValues
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|final
name|CalcitePrepare
operator|.
name|Context
name|context
init|=
name|makeContext
argument_list|(
name|connection
argument_list|,
name|schema
argument_list|,
name|schemaPath
argument_list|,
literal|null
argument_list|,
name|propValues
argument_list|)
decl_stmt|;
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|push
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|prepare
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|sql
argument_list|)
return|;
block|}
finally|finally
block|{
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|pop
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** Parses and validates a SQL query and converts to relational algebra. For    * use within Calcite only. */
end_comment

begin_function
specifier|public
specifier|static
name|CalcitePrepare
operator|.
name|ConvertResult
name|convert
parameter_list|(
specifier|final
name|CalciteConnection
name|connection
parameter_list|,
specifier|final
name|CalciteSchema
name|schema
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
specifier|final
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|CalcitePrepare
name|prepare
init|=
name|CalcitePrepare
operator|.
name|DEFAULT_FACTORY
operator|.
name|apply
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|CalciteConnectionProperty
argument_list|,
name|String
argument_list|>
name|propValues
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|final
name|CalcitePrepare
operator|.
name|Context
name|context
init|=
name|makeContext
argument_list|(
name|connection
argument_list|,
name|schema
argument_list|,
name|schemaPath
argument_list|,
literal|null
argument_list|,
name|propValues
argument_list|)
decl_stmt|;
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|push
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|prepare
operator|.
name|convert
argument_list|(
name|context
argument_list|,
name|sql
argument_list|)
return|;
block|}
finally|finally
block|{
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|pop
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** Analyzes a view. For use within Calcite only. */
end_comment

begin_function
specifier|public
specifier|static
name|CalcitePrepare
operator|.
name|AnalyzeViewResult
name|analyzeView
parameter_list|(
specifier|final
name|CalciteConnection
name|connection
parameter_list|,
specifier|final
name|CalciteSchema
name|schema
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
specifier|final
name|String
name|viewSql
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|viewPath
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
specifier|final
name|CalcitePrepare
name|prepare
init|=
name|CalcitePrepare
operator|.
name|DEFAULT_FACTORY
operator|.
name|apply
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|CalciteConnectionProperty
argument_list|,
name|String
argument_list|>
name|propValues
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|final
name|CalcitePrepare
operator|.
name|Context
name|context
init|=
name|makeContext
argument_list|(
name|connection
argument_list|,
name|schema
argument_list|,
name|schemaPath
argument_list|,
name|viewPath
argument_list|,
name|propValues
argument_list|)
decl_stmt|;
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|push
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|prepare
operator|.
name|analyzeView
argument_list|(
name|context
argument_list|,
name|viewSql
argument_list|,
name|fail
argument_list|)
return|;
block|}
finally|finally
block|{
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|pop
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** Prepares a SQL query for execution. For use within Calcite only. */
end_comment

begin_function
specifier|public
specifier|static
name|CalcitePrepare
operator|.
name|CalciteSignature
argument_list|<
name|Object
argument_list|>
name|prepare
parameter_list|(
specifier|final
name|CalciteConnection
name|connection
parameter_list|,
specifier|final
name|CalciteSchema
name|schema
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
specifier|final
name|String
name|sql
parameter_list|,
specifier|final
name|ImmutableMap
argument_list|<
name|CalciteConnectionProperty
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
specifier|final
name|CalcitePrepare
name|prepare
init|=
name|CalcitePrepare
operator|.
name|DEFAULT_FACTORY
operator|.
name|apply
argument_list|()
decl_stmt|;
specifier|final
name|CalcitePrepare
operator|.
name|Context
name|context
init|=
name|makeContext
argument_list|(
name|connection
argument_list|,
name|schema
argument_list|,
name|schemaPath
argument_list|,
literal|null
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|push
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|prepare
operator|.
name|prepareSql
argument_list|(
name|context
argument_list|,
name|CalcitePrepare
operator|.
name|Query
operator|.
name|of
argument_list|(
name|sql
argument_list|)
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
finally|finally
block|{
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|pop
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Creates a context for the purposes of preparing a statement.    *    * @param connection Connection    * @param schema Schema    * @param schemaPath Path wherein to look for functions    * @param objectPath Path of the object being analyzed (usually a view),    *                  or null    * @param propValues Connection properties    * @return Context    */
end_comment

begin_function
specifier|private
specifier|static
name|CalcitePrepare
operator|.
name|Context
name|makeContext
parameter_list|(
name|CalciteConnection
name|connection
parameter_list|,
name|CalciteSchema
name|schema
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|objectPath
parameter_list|,
specifier|final
name|ImmutableMap
argument_list|<
name|CalciteConnectionProperty
argument_list|,
name|String
argument_list|>
name|propValues
parameter_list|)
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
specifier|final
name|CalcitePrepare
operator|.
name|Context
name|context0
init|=
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|peek
argument_list|()
decl_stmt|;
specifier|final
name|CalciteConnectionConfig
name|config
init|=
name|mutate
argument_list|(
name|context0
operator|.
name|config
argument_list|()
argument_list|,
name|propValues
argument_list|)
decl_stmt|;
return|return
name|makeContext
argument_list|(
name|config
argument_list|,
name|context0
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|context0
operator|.
name|getDataContext
argument_list|()
argument_list|,
name|schema
argument_list|,
name|schemaPath
argument_list|,
name|objectPath
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|CalciteConnectionConfig
name|config
init|=
name|mutate
argument_list|(
name|connection
operator|.
name|config
argument_list|()
argument_list|,
name|propValues
argument_list|)
decl_stmt|;
return|return
name|makeContext
argument_list|(
name|config
argument_list|,
name|connection
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|DataContexts
operator|.
name|of
argument_list|(
name|connection
argument_list|,
name|schema
operator|.
name|root
argument_list|()
operator|.
name|plus
argument_list|()
argument_list|)
argument_list|,
name|schema
argument_list|,
name|schemaPath
argument_list|,
name|objectPath
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|CalciteConnectionConfig
name|mutate
parameter_list|(
name|CalciteConnectionConfig
name|config
parameter_list|,
name|ImmutableMap
argument_list|<
name|CalciteConnectionProperty
argument_list|,
name|String
argument_list|>
name|propValues
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CalciteConnectionProperty
argument_list|,
name|String
argument_list|>
name|e
range|:
name|propValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|config
operator|=
operator|(
operator|(
name|CalciteConnectionConfigImpl
operator|)
name|config
operator|)
operator|.
name|set
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|CalcitePrepare
operator|.
name|Context
name|makeContext
parameter_list|(
specifier|final
name|CalciteConnectionConfig
name|connectionConfig
parameter_list|,
specifier|final
name|JavaTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|DataContext
name|dataContext
parameter_list|,
specifier|final
name|CalciteSchema
name|schema
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|objectPath_
parameter_list|)
block|{
specifier|final
annotation|@
name|Nullable
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|objectPath
init|=
name|objectPath_
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|objectPath_
argument_list|)
decl_stmt|;
return|return
operator|new
name|CalcitePrepare
operator|.
name|Context
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JavaTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|CalciteSchema
name|getRootSchema
parameter_list|()
block|{
return|return
name|schema
operator|.
name|root
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CalciteSchema
name|getMutableRootSchema
parameter_list|()
block|{
return|return
name|getRootSchema
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDefaultSchemaPath
parameter_list|()
block|{
comment|// schemaPath is usually null. If specified, it overrides schema
comment|// as the context within which the SQL is validated.
if|if
condition|(
name|schemaPath
operator|==
literal|null
condition|)
block|{
return|return
name|schema
operator|.
name|path
argument_list|(
literal|null
argument_list|)
return|;
block|}
return|return
name|schemaPath
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|getObjectPath
parameter_list|()
block|{
return|return
name|objectPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|CalciteConnectionConfig
name|config
parameter_list|()
block|{
return|return
name|connectionConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataContext
name|getDataContext
parameter_list|()
block|{
return|return
name|dataContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelRunner
name|getRelRunner
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CalcitePrepare
operator|.
name|SparkHandler
name|spark
parameter_list|()
block|{
specifier|final
name|boolean
name|enable
init|=
name|config
argument_list|()
operator|.
name|spark
argument_list|()
decl_stmt|;
return|return
name|CalcitePrepare
operator|.
name|Dummy
operator|.
name|getSparkHandler
argument_list|(
name|enable
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/** Returns an implementation of    * {@link RelProtoDataType}    * that asks a given table for its row type with a given type factory. */
end_comment

begin_function
specifier|public
specifier|static
name|RelProtoDataType
name|proto
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|)
block|{
return|return
name|table
operator|::
name|getRowType
return|;
block|}
end_function

begin_comment
comment|/** Returns an implementation of {@link RelProtoDataType}    * that asks a given scalar function for its return type with a given type    * factory. */
end_comment

begin_function
specifier|public
specifier|static
name|RelProtoDataType
name|proto
parameter_list|(
specifier|final
name|ScalarFunction
name|function
parameter_list|)
block|{
return|return
name|function
operator|::
name|getReturnType
return|;
block|}
end_function

begin_comment
comment|/** Returns the star tables defined in a schema.    *    * @param schema Schema */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|CalciteSchema
operator|.
name|TableEntry
argument_list|>
name|getStarTables
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|CalciteSchema
operator|.
name|LatticeEntry
argument_list|>
name|list
init|=
name|getLatticeEntries
argument_list|(
name|schema
argument_list|)
decl_stmt|;
return|return
name|Util
operator|.
name|transform
argument_list|(
name|list
argument_list|,
name|entry
lambda|->
block|{
specifier|final
name|CalciteSchema
operator|.
name|TableEntry
name|starTable
init|=
name|requireNonNull
argument_list|(
name|entry
argument_list|,
literal|"entry"
argument_list|)
operator|.
name|getStarTable
argument_list|()
decl_stmt|;
assert|assert
name|starTable
operator|.
name|getTable
argument_list|()
operator|.
name|getJdbcTableType
argument_list|()
operator|==
name|Schema
operator|.
name|TableType
operator|.
name|STAR
assert|;
return|return
name|entry
operator|.
name|getStarTable
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns the lattices defined in a schema.    *    * @param schema Schema */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Lattice
argument_list|>
name|getLattices
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|CalciteSchema
operator|.
name|LatticeEntry
argument_list|>
name|list
init|=
name|getLatticeEntries
argument_list|(
name|schema
argument_list|)
decl_stmt|;
return|return
name|Util
operator|.
name|transform
argument_list|(
name|list
argument_list|,
name|LatticeEntry
operator|::
name|getLattice
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns the lattices defined in a schema.    *    * @param schema Schema */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|CalciteSchema
operator|.
name|LatticeEntry
argument_list|>
name|getLatticeEntries
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|LatticeEntry
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|gatherLattices
argument_list|(
name|schema
argument_list|,
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|gatherLattices
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|List
argument_list|<
name|CalciteSchema
operator|.
name|LatticeEntry
argument_list|>
name|list
parameter_list|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|schema
operator|.
name|getLatticeMap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CalciteSchema
name|subSchema
range|:
name|schema
operator|.
name|getSubSchemaMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|gatherLattices
argument_list|(
name|subSchema
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** Returns a sub-schema of a given schema obtained by following a sequence    * of names.    *    *<p>The result is null if the initial schema is null or any sub-schema does    * not exist.    */
end_comment

begin_function
specifier|public
specifier|static
annotation|@
name|Nullable
name|CalciteSchema
name|subSchema
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
annotation|@
name|Nullable
name|CalciteSchema
name|current
init|=
name|schema
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|names
control|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|current
operator|=
name|current
operator|.
name|getSubSchema
argument_list|(
name|string
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
end_function

begin_comment
comment|/** Generates a table name that is unique within the given schema. */
end_comment

begin_function
specifier|public
specifier|static
name|String
name|uniqueTableName
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|base
parameter_list|)
block|{
name|String
name|t
init|=
name|requireNonNull
argument_list|(
name|base
argument_list|,
literal|"base"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|schema
operator|.
name|getTable
argument_list|(
name|t
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|;
name|x
operator|++
control|)
block|{
name|t
operator|=
name|base
operator|+
name|x
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
end_function

begin_comment
comment|/** Creates a path with a given list of names starting from a given root    * schema. */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|path
parameter_list|(
name|CalciteSchema
name|rootSchema
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
name|rootSchema
operator|.
name|plus
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|names
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|PathImpl
operator|.
name|EMPTY
return|;
block|}
if|if
condition|(
operator|!
name|rootSchema
operator|.
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If path starts with the name of the root schema, ignore the first step
comment|// in the path.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|rootSchema
operator|.
name|name
operator|.
name|equals
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|String
name|name
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|path
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
name|Schema
name|next
init|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"schema "
operator|+
name|name
operator|+
literal|" is not found in "
operator|+
name|schema
argument_list|)
throw|;
block|}
name|schema
operator|=
name|next
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|PathImpl
name|path
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|>
name|build
parameter_list|)
block|{
return|return
operator|new
name|PathImpl
argument_list|(
name|build
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns the path to get to a schema from its root. */
end_comment

begin_function
specifier|public
specifier|static
name|Path
name|path
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchemaPlus
name|s
init|=
name|schema
init|;
name|s
operator|!=
literal|null
condition|;
name|s
operator|=
name|s
operator|.
name|getParentSchema
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PathImpl
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Lists
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Implementation of {@link Path}. */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|PathImpl
extends|extends
name|AbstractList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|>
implements|implements
name|Path
block|{
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|>
name|pairs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PathImpl
name|EMPTY
init|=
operator|new
name|PathImpl
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|PathImpl
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
name|this
operator|.
name|pairs
operator|=
name|pairs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|==
name|o
operator|||
name|o
operator|instanceof
name|PathImpl
operator|&&
name|pairs
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|PathImpl
operator|)
name|o
operator|)
operator|.
name|pairs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|pairs
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|pairs
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|pairs
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|parent
parameter_list|()
block|{
if|if
condition|(
name|pairs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at root"
argument_list|)
throw|;
block|}
return|return
operator|new
name|PathImpl
argument_list|(
name|pairs
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|pairs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|()
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|pairs
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|left
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|pairs
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Schema
argument_list|>
name|schemas
parameter_list|()
block|{
return|return
name|Pair
operator|.
name|right
argument_list|(
name|pairs
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

