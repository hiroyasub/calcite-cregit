begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
package|;
end_package

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Small extension to {@link Logger} with some performance improvements.  *  *<p>{@link Logger#info(String format, Object[] params)} is expensive  * to call, since the caller must always allocate and fill in the array  *<code>params</code>, even when the<code>level</code> will prevent a message  * being logged. On the other hand, {@link Logger#info(String msg)}  * and {@link Logger#info(String msg, Object o)} do not have this  * problem.  *  *<p>As a workaround this class provides  * {@link #info(String msg, Object o1, Object o2)} etc. (The varargs feature of  * java 1.5 half-solves this problem, by automatically wrapping args in an  * array, but it does so without testing the level.)  *  *<p>Usage: replace:  *  *<blockquote><code>static final Logger tracer =  * CalciteTracer.getMyTracer();</code></blockquote>  *  *<p>by:  *  *<blockquote><code>static final CalciteLogger tracer =  *     new CalciteLogger(CalciteTrace.getMyTracer());</code></blockquote>  */
end_comment

begin_class
specifier|public
class|class
name|CalciteLogger
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
comment|// delegate
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|CalciteLogger
parameter_list|(
name|Logger
name|logger
parameter_list|)
block|{
assert|assert
name|logger
operator|!=
literal|null
assert|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// WARN
comment|/**    * Logs a WARN message with two Object parameters.    */
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|)
block|{
comment|// slf4j already avoids the array creation for 1 or 2 arg invocations
name|logger
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Conditionally logs a WARN message with three Object parameters.    */
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Conditionally logs a WARN message with four Object parameters.    */
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg4
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
comment|// INFO
comment|/**    * Logs an INFO message with two Object parameters.    */
specifier|public
name|void
name|info
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|)
block|{
comment|// slf4j already avoids the array creation for 1 or 2 arg invocations
name|logger
operator|.
name|info
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Conditionally logs an INFO message with three Object parameters.    */
specifier|public
name|void
name|info
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Conditionally logs an INFO message with four Object parameters.    */
specifier|public
name|void
name|info
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg4
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
comment|// DEBUG
comment|/**    * Logs a DEBUG message with two Object parameters.    */
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|)
block|{
comment|// slf4j already avoids the array creation for 1 or 2 arg invocations
name|logger
operator|.
name|debug
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Conditionally logs a DEBUG message with three Object parameters.    */
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Conditionally logs a DEBUG message with four Object parameters.    */
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg4
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TRACE
comment|/**    * Logs a TRACE message with two Object parameters.    */
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|)
block|{
comment|// slf4j already avoids the array creation for 1 or 2 arg invocations
name|logger
operator|.
name|trace
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Conditionally logs a TRACE message with three Object parameters.    */
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Conditionally logs a TRACE message with four Object parameters.    */
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg4
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|format
parameter_list|,
annotation|@
name|Nullable
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We expose and delegate the commonly used part of the Logger interface.
comment|// For everything else, just expose the delegate. (Could use reflection.)
specifier|public
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
comment|// Hold-over from the previous j.u.logging implementation
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

