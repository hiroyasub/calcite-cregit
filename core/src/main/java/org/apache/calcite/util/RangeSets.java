begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableRangeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|RangeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeRangeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/** Utilities for Guava {@link com.google.common.collect.RangeSet}. */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"BetaApi"
block|,
literal|"UnstableApiUsage"
block|}
argument_list|)
specifier|public
class|class
name|RangeSets
block|{
specifier|private
name|RangeSets
parameter_list|()
block|{
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"BetaApi"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
specifier|static
specifier|final
name|ImmutableRangeSet
name|ALL
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|()
operator|.
name|complement
argument_list|()
decl_stmt|;
comment|/** Subtracts a range from a range set. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RangeSet
argument_list|<
name|C
argument_list|>
name|minus
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|,
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
specifier|final
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
name|mutableRangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|(
name|rangeSet
argument_list|)
decl_stmt|;
name|mutableRangeSet
operator|.
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
return|return
name|mutableRangeSet
operator|.
name|equals
argument_list|(
name|rangeSet
argument_list|)
condition|?
name|rangeSet
else|:
name|ImmutableRangeSet
operator|.
name|copyOf
argument_list|(
name|mutableRangeSet
argument_list|)
return|;
block|}
comment|/** Returns the unrestricted range set. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSetAll
parameter_list|()
block|{
return|return
operator|(
name|RangeSet
operator|)
name|ALL
return|;
block|}
comment|/** Compares two range sets. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|int
name|compare
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|s0
parameter_list|,
name|RangeSet
argument_list|<
name|C
argument_list|>
name|s1
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|i0
init|=
name|s0
operator|.
name|asRanges
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|i1
init|=
name|s1
operator|.
name|asRanges
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|boolean
name|h0
init|=
name|i0
operator|.
name|hasNext
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|h1
init|=
name|i1
operator|.
name|hasNext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|h0
operator|||
operator|!
name|h1
condition|)
block|{
return|return
name|Boolean
operator|.
name|compare
argument_list|(
name|h0
argument_list|,
name|h1
argument_list|)
return|;
block|}
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|r0
init|=
name|i0
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|r1
init|=
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|compare
argument_list|(
name|r0
argument_list|,
name|r1
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
block|}
comment|/** Compares two ranges. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|int
name|compare
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|r0
parameter_list|,
name|Range
argument_list|<
name|C
argument_list|>
name|r1
parameter_list|)
block|{
name|int
name|c
init|=
name|Boolean
operator|.
name|compare
argument_list|(
name|r0
operator|.
name|hasLowerBound
argument_list|()
argument_list|,
name|r1
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
if|if
condition|(
name|r0
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|c
operator|=
name|r0
operator|.
name|lowerEndpoint
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r1
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
name|c
operator|=
name|r0
operator|.
name|lowerBoundType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r1
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
name|c
operator|=
name|Boolean
operator|.
name|compare
argument_list|(
name|r0
operator|.
name|hasUpperBound
argument_list|()
argument_list|,
name|r1
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
operator|-
name|c
return|;
block|}
if|if
condition|(
name|r0
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|c
operator|=
name|r0
operator|.
name|upperEndpoint
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r1
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
name|c
operator|=
name|r0
operator|.
name|upperBoundType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r1
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/** Computes a hash code for a range set.    *    *<p>This method does not compute the same result as    * {@link RangeSet#hashCode}. That is a poor hash code because it is based    * upon {@link java.util.Set#hashCode}).    *    *<p>The algorithm is based on {@link java.util.List#hashCode()},    * which is well-defined because {@link RangeSet#asRanges()} is sorted. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|int
name|hashCode
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|)
block|{
name|int
name|h
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|r
range|:
name|rangeSet
operator|.
name|asRanges
argument_list|()
control|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|r
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
comment|/** Returns whether a range is a point. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|boolean
name|isPoint
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|hasLowerBound
argument_list|()
operator|&&
name|range
operator|.
name|hasUpperBound
argument_list|()
operator|&&
name|range
operator|.
name|lowerEndpoint
argument_list|()
operator|.
name|equals
argument_list|(
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
operator|&&
operator|!
name|range
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/** Returns the number of ranges in a range set that are points.    *    *<p>If every range in a range set is a point then it can be converted to a    * SQL IN list. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|int
name|countPoints
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
range|:
name|rangeSet
operator|.
name|asRanges
argument_list|()
control|)
block|{
if|if
condition|(
name|isPoint
argument_list|(
name|range
argument_list|)
condition|)
block|{
operator|++
name|n
expr_stmt|;
block|}
block|}
return|return
name|n
return|;
block|}
comment|/** Calls the appropriate handler method for each range in a range set,    * creating a new range set from the results. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|,
name|C2
extends|extends
name|Comparable
argument_list|<
name|C2
argument_list|>
parameter_list|>
name|RangeSet
argument_list|<
name|C2
argument_list|>
name|map
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|,
name|Handler
argument_list|<
name|C
argument_list|,
name|Range
argument_list|<
name|C2
argument_list|>
argument_list|>
name|handler
parameter_list|)
block|{
specifier|final
name|ImmutableRangeSet
operator|.
name|Builder
argument_list|<
name|C2
argument_list|>
name|builder
init|=
name|ImmutableRangeSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|asRanges
argument_list|()
operator|.
name|forEach
argument_list|(
name|range
lambda|->
name|builder
operator|.
name|add
argument_list|(
name|map
argument_list|(
name|range
argument_list|,
name|handler
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Calls the appropriate handler method for the type of range. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|,
name|R
parameter_list|>
name|R
name|map
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|,
name|Handler
argument_list|<
name|C
argument_list|,
name|R
argument_list|>
name|handler
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|hasLowerBound
argument_list|()
operator|&&
name|range
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
specifier|final
name|C
name|lower
init|=
name|range
operator|.
name|lowerEndpoint
argument_list|()
decl_stmt|;
specifier|final
name|C
name|upper
init|=
name|range
operator|.
name|upperEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
if|if
condition|(
name|range
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
return|return
name|handler
operator|.
name|open
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|handler
operator|.
name|openClosed
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|range
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
return|return
name|handler
operator|.
name|closedOpen
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|lower
operator|.
name|equals
argument_list|(
name|upper
argument_list|)
condition|)
block|{
return|return
name|handler
operator|.
name|singleton
argument_list|(
name|lower
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|handler
operator|.
name|closed
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|range
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
specifier|final
name|C
name|lower
init|=
name|range
operator|.
name|lowerEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
return|return
name|handler
operator|.
name|greaterThan
argument_list|(
name|lower
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|handler
operator|.
name|atLeast
argument_list|(
name|lower
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|range
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
specifier|final
name|C
name|upper
init|=
name|range
operator|.
name|upperEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
return|return
name|handler
operator|.
name|lessThan
argument_list|(
name|upper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|handler
operator|.
name|atMost
argument_list|(
name|upper
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|handler
operator|.
name|all
argument_list|()
return|;
block|}
block|}
comment|/** Copies a range set. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|,
name|C2
extends|extends
name|Comparable
argument_list|<
name|C2
argument_list|>
parameter_list|>
name|RangeSet
argument_list|<
name|C2
argument_list|>
name|copy
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|,
name|Function
argument_list|<
name|C
argument_list|,
name|C2
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|map
argument_list|(
name|rangeSet
argument_list|,
operator|new
name|CopyingHandler
argument_list|<
name|C
argument_list|,
name|C2
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|C2
name|convert
parameter_list|(
name|C
name|c
parameter_list|)
block|{
return|return
name|map
operator|.
name|apply
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Copies a range. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|,
name|C2
extends|extends
name|Comparable
argument_list|<
name|C2
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C2
argument_list|>
name|copy
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|,
name|Function
argument_list|<
name|C
argument_list|,
name|C2
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|map
argument_list|(
name|range
argument_list|,
operator|new
name|CopyingHandler
argument_list|<
name|C
argument_list|,
name|C2
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|C2
name|convert
parameter_list|(
name|C
name|c
parameter_list|)
block|{
return|return
name|map
operator|.
name|apply
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|void
name|forEach
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|,
name|Consumer
argument_list|<
name|C
argument_list|>
name|consumer
parameter_list|)
block|{
name|rangeSet
operator|.
name|asRanges
argument_list|()
operator|.
name|forEach
argument_list|(
name|range
lambda|->
name|forEach
argument_list|(
name|range
argument_list|,
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|void
name|forEach
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|,
name|Consumer
argument_list|<
name|C
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|hasLowerBound
argument_list|()
operator|&&
name|range
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
specifier|final
name|C
name|lower
init|=
name|range
operator|.
name|lowerEndpoint
argument_list|()
decl_stmt|;
specifier|final
name|C
name|upper
init|=
name|range
operator|.
name|upperEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
if|if
condition|(
name|range
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
name|consumer
operator|.
name|open
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|.
name|openClosed
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|range
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
name|consumer
operator|.
name|closedOpen
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lower
operator|.
name|equals
argument_list|(
name|upper
argument_list|)
condition|)
block|{
name|consumer
operator|.
name|singleton
argument_list|(
name|lower
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|.
name|closed
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|range
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
specifier|final
name|C
name|lower
init|=
name|range
operator|.
name|lowerEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
name|consumer
operator|.
name|greaterThan
argument_list|(
name|lower
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|.
name|atLeast
argument_list|(
name|lower
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|range
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
specifier|final
name|C
name|upper
init|=
name|range
operator|.
name|upperEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
name|consumer
operator|.
name|lessThan
argument_list|(
name|upper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|.
name|atMost
argument_list|(
name|upper
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|consumer
operator|.
name|all
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Creates a consumer that prints values to a {@link StringBuilder}. */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|Consumer
argument_list|<
name|C
argument_list|>
name|printer
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|BiConsumer
argument_list|<
name|StringBuilder
argument_list|,
name|C
argument_list|>
name|valuePrinter
parameter_list|)
block|{
return|return
operator|new
name|Printer
argument_list|<>
argument_list|(
name|sb
argument_list|,
name|valuePrinter
argument_list|)
return|;
block|}
comment|/** Deconstructor for {@link Range} values.    *    * @param<C> Value type    * @param<R> Return type    *    * @see Consumer */
specifier|public
interface|interface
name|Handler
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|C
parameter_list|>
parameter_list|,
name|R
parameter_list|>
block|{
name|R
name|all
parameter_list|()
function_decl|;
name|R
name|atLeast
parameter_list|(
name|C
name|lower
parameter_list|)
function_decl|;
name|R
name|atMost
parameter_list|(
name|C
name|upper
parameter_list|)
function_decl|;
name|R
name|greaterThan
parameter_list|(
name|C
name|lower
parameter_list|)
function_decl|;
name|R
name|lessThan
parameter_list|(
name|C
name|upper
parameter_list|)
function_decl|;
name|R
name|singleton
parameter_list|(
name|C
name|value
parameter_list|)
function_decl|;
name|R
name|closed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
function_decl|;
name|R
name|closedOpen
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
function_decl|;
name|R
name|openClosed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
function_decl|;
name|R
name|open
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
function_decl|;
block|}
comment|/** Consumer of {@link Range} values.    *    * @param<C> Value type    *    * @see Handler */
specifier|public
interface|interface
name|Consumer
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|C
parameter_list|>
parameter_list|>
block|{
name|void
name|all
parameter_list|()
function_decl|;
name|void
name|atLeast
parameter_list|(
name|C
name|lower
parameter_list|)
function_decl|;
name|void
name|atMost
parameter_list|(
name|C
name|upper
parameter_list|)
function_decl|;
name|void
name|greaterThan
parameter_list|(
name|C
name|lower
parameter_list|)
function_decl|;
name|void
name|lessThan
parameter_list|(
name|C
name|upper
parameter_list|)
function_decl|;
name|void
name|singleton
parameter_list|(
name|C
name|value
parameter_list|)
function_decl|;
name|void
name|closed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
function_decl|;
name|void
name|closedOpen
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
function_decl|;
name|void
name|openClosed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
function_decl|;
name|void
name|open
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
function_decl|;
block|}
comment|/** Handler that converts a Range into another Range of the same type,    * applying a mapping function to the range's bound(s).    *    * @param<C> Value type    * @param<C2> Output value type */
specifier|private
specifier|abstract
specifier|static
class|class
name|CopyingHandler
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|C
parameter_list|>
parameter_list|,
name|C2
extends|extends
name|Comparable
parameter_list|<
name|C2
parameter_list|>
parameter_list|>
implements|implements
name|RangeSets
operator|.
name|Handler
argument_list|<
name|C
argument_list|,
name|Range
argument_list|<
name|C2
argument_list|>
argument_list|>
block|{
specifier|abstract
name|C2
name|convert
parameter_list|(
name|C
name|c
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|all
parameter_list|()
block|{
return|return
name|Range
operator|.
name|all
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|atLeast
parameter_list|(
name|C
name|lower
parameter_list|)
block|{
return|return
name|Range
operator|.
name|atLeast
argument_list|(
name|convert
argument_list|(
name|lower
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|atMost
parameter_list|(
name|C
name|upper
parameter_list|)
block|{
return|return
name|Range
operator|.
name|atMost
argument_list|(
name|convert
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|greaterThan
parameter_list|(
name|C
name|lower
parameter_list|)
block|{
return|return
name|Range
operator|.
name|greaterThan
argument_list|(
name|convert
argument_list|(
name|lower
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|lessThan
parameter_list|(
name|C
name|upper
parameter_list|)
block|{
return|return
name|Range
operator|.
name|lessThan
argument_list|(
name|convert
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|singleton
parameter_list|(
name|C
name|value
parameter_list|)
block|{
return|return
name|Range
operator|.
name|singleton
argument_list|(
name|convert
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|closed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
return|return
name|Range
operator|.
name|closed
argument_list|(
name|convert
argument_list|(
name|lower
argument_list|)
argument_list|,
name|convert
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|closedOpen
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
return|return
name|Range
operator|.
name|closedOpen
argument_list|(
name|convert
argument_list|(
name|lower
argument_list|)
argument_list|,
name|convert
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|openClosed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
return|return
name|Range
operator|.
name|openClosed
argument_list|(
name|convert
argument_list|(
name|lower
argument_list|)
argument_list|,
name|convert
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|C2
argument_list|>
name|open
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
return|return
name|Range
operator|.
name|open
argument_list|(
name|convert
argument_list|(
name|lower
argument_list|)
argument_list|,
name|convert
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Converts any type of range to a string, using a given value printer.    *    * @param<C> Value type */
specifier|static
class|class
name|Printer
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|C
parameter_list|>
parameter_list|>
implements|implements
name|Consumer
argument_list|<
name|C
argument_list|>
block|{
specifier|private
specifier|final
name|StringBuilder
name|sb
decl_stmt|;
specifier|private
specifier|final
name|BiConsumer
argument_list|<
name|StringBuilder
argument_list|,
name|C
argument_list|>
name|valuePrinter
decl_stmt|;
name|Printer
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|BiConsumer
argument_list|<
name|StringBuilder
argument_list|,
name|C
argument_list|>
name|valuePrinter
parameter_list|)
block|{
name|this
operator|.
name|sb
operator|=
name|sb
expr_stmt|;
name|this
operator|.
name|valuePrinter
operator|=
name|valuePrinter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|all
parameter_list|()
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(-\u221e..+\u221e)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|atLeast
parameter_list|(
name|C
name|lower
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"..+\u221e)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|atMost
parameter_list|(
name|C
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(-\u221e.."
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|greaterThan
parameter_list|(
name|C
name|lower
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"..+\u221e)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lessThan
parameter_list|(
name|C
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(-\u221e.."
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|singleton
parameter_list|(
name|C
name|value
parameter_list|)
block|{
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closedOpen
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|openClosed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
name|valuePrinter
operator|.
name|accept
argument_list|(
name|sb
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

