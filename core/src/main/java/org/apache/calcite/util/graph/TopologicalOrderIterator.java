begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|initialization
operator|.
name|qual
operator|.
name|UnderInitialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|RequiresNonNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Iterates over the edges of a graph in topological order.  *  * @param<V> Vertex type  * @param<E> Edge type  */
end_comment

begin_class
specifier|public
class|class
name|TopologicalOrderIterator
parameter_list|<
name|V
parameter_list|,
name|E
extends|extends
name|DefaultEdge
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|V
argument_list|>
block|{
specifier|final
name|Map
argument_list|<
name|V
argument_list|,
name|int
index|[]
argument_list|>
name|countMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|V
argument_list|>
name|empties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|DefaultDirectedGraph
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|graph
decl_stmt|;
specifier|public
name|TopologicalOrderIterator
parameter_list|(
name|DirectedGraph
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|)
block|{
name|this
operator|.
name|graph
operator|=
operator|(
name|DefaultDirectedGraph
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
operator|)
name|graph
expr_stmt|;
name|populate
argument_list|(
name|countMap
argument_list|,
name|empties
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|E
extends|extends
name|DefaultEdge
parameter_list|>
name|Iterable
argument_list|<
name|V
argument_list|>
name|of
parameter_list|(
specifier|final
name|DirectedGraph
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
operator|new
name|TopologicalOrderIterator
argument_list|<>
argument_list|(
name|graph
argument_list|)
return|;
block|}
annotation|@
name|RequiresNonNull
argument_list|(
literal|"graph"
argument_list|)
specifier|private
name|void
name|populate
parameter_list|(
annotation|@
name|UnderInitialization
name|TopologicalOrderIterator
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|this
parameter_list|,
name|Map
argument_list|<
name|V
argument_list|,
name|int
index|[]
argument_list|>
name|countMap
parameter_list|,
name|List
argument_list|<
name|V
argument_list|>
name|empties
parameter_list|)
block|{
for|for
control|(
name|V
name|v
range|:
name|graph
operator|.
name|vertexMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|countMap
operator|.
name|put
argument_list|(
name|v
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DefaultDirectedGraph
operator|.
name|VertexInfo
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|info
range|:
name|graph
operator|.
name|vertexMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|E
name|edge
range|:
name|info
operator|.
name|outEdges
control|)
block|{
comment|//noinspection SuspiciousMethodCalls
specifier|final
name|int
index|[]
name|ints
init|=
name|requireNonNull
argument_list|(
name|countMap
operator|.
name|get
argument_list|(
name|edge
operator|.
name|target
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"no value for "
operator|+
name|edge
operator|.
name|target
argument_list|)
decl_stmt|;
operator|++
name|ints
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|V
argument_list|,
name|int
index|[]
argument_list|>
name|entry
range|:
name|countMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|empties
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|countMap
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|empties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|empties
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|next
parameter_list|()
block|{
name|V
name|v
init|=
name|empties
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DefaultDirectedGraph
operator|.
name|VertexInfo
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|vertexInfo
init|=
name|requireNonNull
argument_list|(
name|graph
operator|.
name|vertexMap
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"no vertex "
operator|+
name|v
argument_list|)
decl_stmt|;
for|for
control|(
name|E
name|o
range|:
name|vertexInfo
operator|.
name|outEdges
control|)
block|{
comment|//noinspection unchecked
specifier|final
name|V
name|target
init|=
operator|(
name|V
operator|)
name|o
operator|.
name|target
decl_stmt|;
name|int
index|[]
name|ints
init|=
name|requireNonNull
argument_list|(
name|countMap
operator|.
name|get
argument_list|(
name|target
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"no counts found for target "
operator|+
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|--
name|ints
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|countMap
operator|.
name|remove
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|empties
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|Set
argument_list|<
name|V
argument_list|>
name|findCycles
parameter_list|()
block|{
while|while
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|next
argument_list|()
expr_stmt|;
block|}
comment|//noinspection RedundantCast
return|return
operator|(
name|Set
argument_list|<
name|V
argument_list|>
operator|)
name|countMap
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

