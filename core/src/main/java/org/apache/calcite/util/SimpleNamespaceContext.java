begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_comment
comment|/**  * Simple {@link javax.xml.namespace.NamespaceContext} implementation. Follows the standard  * NamespaceContext contract, and is loadable via a {@link java.util.Map}  */
end_comment

begin_class
specifier|public
class|class
name|SimpleNamespaceContext
implements|implements
name|NamespaceContext
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixToNamespaceUri
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|namespaceUriToPrefixes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|SimpleNamespaceContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bindings
parameter_list|)
block|{
name|bindNamespaceUri
argument_list|(
name|XMLConstants
operator|.
name|XML_NS_PREFIX
argument_list|,
name|XMLConstants
operator|.
name|XML_NS_URI
argument_list|)
expr_stmt|;
name|bindNamespaceUri
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|)
expr_stmt|;
name|bindNamespaceUri
argument_list|(
name|XMLConstants
operator|.
name|DEFAULT_NS_PREFIX
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|bindings
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|bindNamespaceUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|prefixToNamespaceUri
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|prefixToNamespaceUri
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|namespaceUri
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
name|getPrefixesSet
argument_list|(
name|namespaceUri
argument_list|)
decl_stmt|;
return|return
operator|!
name|prefixes
operator|.
name|isEmpty
argument_list|()
condition|?
name|prefixes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPrefixes
parameter_list|(
name|String
name|namespaceUri
parameter_list|)
block|{
return|return
name|getPrefixesSet
argument_list|(
name|namespaceUri
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getPrefixesSet
parameter_list|(
name|String
name|namespaceUri
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
name|this
operator|.
name|namespaceUriToPrefixes
operator|.
name|get
argument_list|(
name|namespaceUri
argument_list|)
decl_stmt|;
return|return
name|prefixes
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|prefixes
argument_list|)
else|:
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|private
name|void
name|bindNamespaceUri
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceUri
parameter_list|)
block|{
name|this
operator|.
name|prefixToNamespaceUri
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespaceUri
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
name|this
operator|.
name|namespaceUriToPrefixes
operator|.
name|computeIfAbsent
argument_list|(
name|namespaceUri
argument_list|,
name|k
lambda|->
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

