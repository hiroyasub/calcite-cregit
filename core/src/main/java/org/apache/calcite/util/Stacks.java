begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utilities to make vanilla lists look like stacks.  */
end_comment

begin_class
specifier|public
class|class
name|Stacks
block|{
specifier|private
name|Stacks
parameter_list|()
block|{
block|}
comment|/**    * Returns the most recently added element in the stack. Throws if the    * stack is empty.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|peek
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|stack
parameter_list|)
block|{
return|return
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns the {@code n}th most recently added element in the stack.    * Throws if the stack is empty.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|peek
parameter_list|(
name|int
name|n
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|stack
parameter_list|)
block|{
return|return
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
name|n
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Adds an element to the stack.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|push
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|stack
parameter_list|,
name|T
name|element
parameter_list|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes an element from the stack. Asserts of the element is not the    * one last added; throws if the stack is empty.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|pop
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|stack
parameter_list|,
name|T
name|element
parameter_list|)
block|{
assert|assert
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|element
assert|;
name|stack
operator|.
name|remove
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes an element from the stack and returns it.    *    *<p>Throws if the stack is empty.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|pop
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|stack
parameter_list|)
block|{
return|return
name|stack
operator|.
name|remove
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End Stacks.java
end_comment

end_unit

