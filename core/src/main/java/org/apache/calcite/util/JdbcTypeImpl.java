begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link JdbcType}.  *  *<p>It is frustrating that we can't use an {@code enum} to implement an  * interface with a type parameter. At times like this, we wish Java had  * Generalized Algebraic Data Types (GADTs). */
end_comment

begin_enum
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
enum|enum
name|JdbcTypeImpl
implements|implements
name|JdbcType
block|{
name|BIG_DECIMAL
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|BigDecimal
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|requireNonNull
argument_list|(
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|column
argument_list|)
argument_list|,
literal|"getBigDecimal"
argument_list|)
return|;
block|}
block|}
block|,
name|BIG_DECIMAL_NULLABLE
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|BigDecimal
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|resultSet
operator|.
name|getBigDecimal
argument_list|(
name|column
argument_list|)
return|;
block|}
block|}
block|,
name|BOOLEAN
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|boolean
name|v
init|=
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|v
operator|||
operator|!
name|resultSet
operator|.
name|wasNull
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
block|}
block|,
name|BOOLEAN_NULLABLE
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Boolean
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|boolean
name|v
init|=
name|resultSet
operator|.
name|getBoolean
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
operator|!
name|v
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|v
return|;
block|}
block|}
block|,
name|DOUBLE
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Double
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|double
name|v
init|=
name|resultSet
operator|.
name|getDouble
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|v
operator|!=
literal|0
operator|||
operator|!
name|resultSet
operator|.
name|wasNull
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
block|}
block|,
name|DOUBLE_NULLABLE
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Double
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|double
name|v
init|=
name|resultSet
operator|.
name|getDouble
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|0
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|v
return|;
block|}
block|}
block|,
name|INTEGER
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|v
init|=
name|resultSet
operator|.
name|getInt
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|v
operator|!=
literal|0
operator|||
operator|!
name|resultSet
operator|.
name|wasNull
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
block|}
block|,
name|INTEGER_NULLABLE
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Integer
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|v
init|=
name|resultSet
operator|.
name|getInt
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|0
operator|&&
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|?
literal|null
else|:
name|v
return|;
block|}
block|}
block|,
name|STRING
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|requireNonNull
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
name|column
argument_list|)
argument_list|,
literal|"getString"
argument_list|)
return|;
block|}
block|}
block|,
name|STRING_NULLABLE
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|String
name|get
parameter_list|(
name|int
name|column
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|resultSet
operator|.
name|getString
argument_list|(
name|column
argument_list|)
return|;
block|}
block|}
block|;
name|JdbcTypeImpl
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unusedClass
parameter_list|,
name|boolean
name|unusedNullable
parameter_list|)
block|{
block|}
block|}
end_enum

end_unit

