begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|AnsiSqlDialect
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|IllegalCharsetNameException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|UnsupportedCharsetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * A string, optionally with {@link Charset character set} and  * {@link SqlCollation}. It is immutable.  */
end_comment

begin_class
specifier|public
class|class
name|NlsString
implements|implements
name|Comparable
argument_list|<
name|NlsString
argument_list|>
implements|,
name|Cloneable
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|static
specifier|final
name|LoadingCache
argument_list|<
name|Pair
argument_list|<
name|ByteString
argument_list|,
name|Charset
argument_list|>
argument_list|,
name|String
argument_list|>
name|DECODE_MAP
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|Pair
argument_list|<
name|ByteString
argument_list|,
name|Charset
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|load
parameter_list|(
annotation|@
name|Nonnull
name|Pair
argument_list|<
name|ByteString
argument_list|,
name|Charset
argument_list|>
name|key
parameter_list|)
block|{
specifier|final
name|Charset
name|charset
init|=
name|key
operator|.
name|right
decl_stmt|;
specifier|final
name|CharsetDecoder
name|decoder
init|=
name|charset
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|key
operator|.
name|left
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|decoder
operator|.
name|decode
argument_list|(
name|buffer
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|charsetEncoding
argument_list|(
comment|//CHECKSTYLE: IGNORE 1
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|stringValue
decl_stmt|;
specifier|private
specifier|final
name|ByteString
name|bytesValue
decl_stmt|;
specifier|private
specifier|final
name|String
name|charsetName
decl_stmt|;
specifier|private
specifier|final
name|Charset
name|charset
decl_stmt|;
specifier|private
specifier|final
name|SqlCollation
name|collation
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a string in a specified character set.    *    * @param bytesValue  Byte array constant, must not be null    * @param charsetName Name of the character set, must not be null    * @param collation   Collation, may be null    *    * @throws IllegalCharsetNameException If the given charset name is illegal    * @throws UnsupportedCharsetException If no support for the named charset    *     is available in this instance of the Java virtual machine    * @throws RuntimeException If the given value cannot be represented in the    *     given charset    */
specifier|public
name|NlsString
parameter_list|(
name|ByteString
name|bytesValue
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|SqlCollation
name|collation
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bytesValue
argument_list|)
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|charsetName
argument_list|)
argument_list|,
name|collation
argument_list|)
expr_stmt|;
block|}
comment|/**    * Easy constructor for Java string.    *    * @param stringValue String constant, must not be null    * @param charsetName Name of the character set, may be null    * @param collation Collation, may be null    *    * @throws IllegalCharsetNameException If the given charset name is illegal    * @throws UnsupportedCharsetException If no support for the named charset    *     is available in this instance of the Java virtual machine    * @throws RuntimeException If the given value cannot be represented in the    *     given charset    */
specifier|public
name|NlsString
parameter_list|(
name|String
name|stringValue
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|SqlCollation
name|collation
parameter_list|)
block|{
name|this
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|stringValue
argument_list|)
argument_list|,
literal|null
argument_list|,
name|charsetName
argument_list|,
name|collation
argument_list|)
expr_stmt|;
block|}
comment|/** Internal constructor; other constructors must call it. */
specifier|private
name|NlsString
parameter_list|(
name|String
name|stringValue
parameter_list|,
name|ByteString
name|bytesValue
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|SqlCollation
name|collation
parameter_list|)
block|{
if|if
condition|(
name|charsetName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|charsetName
operator|=
name|charsetName
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
name|this
operator|.
name|charset
operator|=
name|SqlUtil
operator|.
name|getCharset
argument_list|(
name|charsetName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|charsetName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|charset
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|stringValue
operator|!=
literal|null
operator|)
operator|==
operator|(
name|bytesValue
operator|!=
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Specify stringValue or bytesValue"
argument_list|)
throw|;
block|}
if|if
condition|(
name|bytesValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|charsetName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bytes value requires charset"
argument_list|)
throw|;
block|}
name|SqlUtil
operator|.
name|validateCharset
argument_list|(
name|bytesValue
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Java string can be malformed if LATIN1 is required.
if|if
condition|(
name|this
operator|.
name|charsetName
operator|!=
literal|null
operator|&&
operator|(
name|this
operator|.
name|charsetName
operator|.
name|equals
argument_list|(
literal|"LATIN1"
argument_list|)
operator|||
name|this
operator|.
name|charsetName
operator|.
name|equals
argument_list|(
literal|"ISO-8859-1"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|charset
operator|.
name|newEncoder
argument_list|()
operator|.
name|canEncode
argument_list|(
name|stringValue
argument_list|)
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|charsetEncoding
argument_list|(
name|stringValue
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
block|}
name|this
operator|.
name|collation
operator|=
name|collation
expr_stmt|;
name|this
operator|.
name|stringValue
operator|=
name|stringValue
expr_stmt|;
name|this
operator|.
name|bytesValue
operator|=
name|bytesValue
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|stringValue
argument_list|,
name|bytesValue
argument_list|,
name|charsetName
argument_list|,
name|collation
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|instanceof
name|NlsString
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|stringValue
argument_list|,
operator|(
operator|(
name|NlsString
operator|)
name|obj
operator|)
operator|.
name|stringValue
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|bytesValue
argument_list|,
operator|(
operator|(
name|NlsString
operator|)
name|obj
operator|)
operator|.
name|bytesValue
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|charsetName
argument_list|,
operator|(
operator|(
name|NlsString
operator|)
name|obj
operator|)
operator|.
name|charsetName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|collation
argument_list|,
operator|(
operator|(
name|NlsString
operator|)
name|obj
operator|)
operator|.
name|collation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|NlsString
name|other
parameter_list|)
block|{
comment|// TODO jvs 18-Jan-2006:  Actual collation support.  This just uses
comment|// the default collation.
return|return
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getCharsetName
parameter_list|()
block|{
return|return
name|charsetName
return|;
block|}
specifier|public
name|Charset
name|getCharset
parameter_list|()
block|{
return|return
name|charset
return|;
block|}
specifier|public
name|SqlCollation
name|getCollation
parameter_list|()
block|{
return|return
name|collation
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|stringValue
operator|==
literal|null
condition|)
block|{
assert|assert
name|bytesValue
operator|!=
literal|null
assert|;
return|return
name|DECODE_MAP
operator|.
name|getUnchecked
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|bytesValue
argument_list|,
name|charset
argument_list|)
argument_list|)
return|;
block|}
return|return
name|stringValue
return|;
block|}
comment|/**    * Returns a string the same as this but with spaces trimmed from the    * right.    */
specifier|public
name|NlsString
name|rtrim
parameter_list|()
block|{
name|String
name|trimmed
init|=
name|SqlFunctions
operator|.
name|rtrim
argument_list|(
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|trimmed
operator|.
name|equals
argument_list|(
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|NlsString
argument_list|(
name|trimmed
argument_list|,
name|charsetName
argument_list|,
name|collation
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
comment|/** As {@link #asSql(boolean, boolean, SqlDialect)} but with SQL standard    * dialect. */
specifier|public
name|String
name|asSql
parameter_list|(
name|boolean
name|prefix
parameter_list|,
name|boolean
name|suffix
parameter_list|)
block|{
return|return
name|asSql
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
name|AnsiSqlDialect
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Returns the string quoted for SQL, for example<code>_ISO-8859-1'is it a    * plane? no it''s superman!'</code>.    *    * @param prefix if true, prefix the character set name    * @param suffix if true, suffix the collation clause    * @param dialect Dialect    * @return the quoted string    */
specifier|public
name|String
name|asSql
parameter_list|(
name|boolean
name|prefix
parameter_list|,
name|boolean
name|suffix
parameter_list|,
name|SqlDialect
name|dialect
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|dialect
operator|.
name|quoteStringLiteral
argument_list|(
name|ret
argument_list|,
name|prefix
condition|?
name|charsetName
else|:
literal|null
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// NOTE jvs 3-Feb-2005:  see FRG-78 for why this should go away
if|if
condition|(
literal|false
condition|)
block|{
if|if
condition|(
name|suffix
operator|&&
operator|(
literal|null
operator|!=
name|collation
operator|)
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|collation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns the string quoted for SQL, for example<code>_ISO-8859-1'is it a    * plane? no it''s superman!'</code>.    */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|asSql
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Concatenates some {@link NlsString} objects. The result has the charset    * and collation of the first element. The other elements must have matching    * (or null) charset and collation. Concatenates all at once, not pairwise,    * to avoid string copies.    *    * @param args array of {@link NlsString} to be concatenated    */
specifier|public
specifier|static
name|NlsString
name|concat
parameter_list|(
name|List
argument_list|<
name|NlsString
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|String
name|charSetName
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|charsetName
decl_stmt|;
name|SqlCollation
name|collation
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|collation
decl_stmt|;
name|int
name|length
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// sum string lengths and validate
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|NlsString
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|length
operator|+=
name|arg
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|arg
operator|.
name|charsetName
operator|==
literal|null
operator|)
operator|||
name|arg
operator|.
name|charsetName
operator|.
name|equals
argument_list|(
name|charSetName
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mismatched charsets"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
operator|(
name|arg
operator|.
name|collation
operator|==
literal|null
operator|)
operator|||
name|arg
operator|.
name|collation
operator|.
name|equals
argument_list|(
name|collation
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mismatched collations"
argument_list|)
throw|;
block|}
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|NlsString
name|arg
range|:
name|args
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|arg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NlsString
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|charSetName
argument_list|,
name|collation
argument_list|)
return|;
block|}
comment|/** Creates a copy of this {@code NlsString} with different content but same    * charset and collation. */
specifier|public
name|NlsString
name|copy
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|NlsString
argument_list|(
name|value
argument_list|,
name|charsetName
argument_list|,
name|collation
argument_list|)
return|;
block|}
comment|/** Returns the value as a {@link ByteString}. */
specifier|public
name|ByteString
name|getValueBytes
parameter_list|()
block|{
return|return
name|bytesValue
return|;
block|}
block|}
end_class

end_unit

