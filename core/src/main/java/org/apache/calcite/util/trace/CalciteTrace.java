begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * Contains all of the {@link org.slf4j.Logger tracers} used within  * org.apache.calcite class libraries.  *  *<h2>Note to developers</h2>  *  *<p>Please ensure that every tracer used in org.apache.calcite is added to  * this class as a<em>public static final</em> member called<code>  *<i>component</i>Tracer</code>. For example, {@link #getPlannerTracer} is the  * tracer used by all classes which take part in the query planning process.  *  *<p>The javadoc in this file is the primary source of information on what  * tracers are available, so the javadoc against each tracer member must be an  * up-to-date description of what that tracer does.  *  *<p>In the class where the tracer is used, create a<em>private</em> (or  * perhaps<em>protected</em>)<em>static final</em> member called<code>  * tracer</code>.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CalciteTrace
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * The "org.apache.calcite.sql.parser" tracer reports parser events in    * {@link org.apache.calcite.sql.parser.SqlParser} and other classes at DEBUG.    */
specifier|public
specifier|static
specifier|final
name|Logger
name|PARSER_LOGGER
init|=
name|getParserTracer
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Function2
argument_list|<
name|Void
argument_list|,
name|File
argument_list|,
name|String
argument_list|>
argument_list|>
name|DYNAMIC_HANDLER
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|Functions
operator|::
name|ignore2
argument_list|)
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * The "org.apache.calcite.plan.RelOptPlanner" tracer prints the query    * optimization process.    *    *<p>Levels:    *    *<ul>    *<li>{@link Logger#debug(String)} (formerly FINE) prints rules as they fire;    *<li>{@link Logger#trace(String)} (formerly FINER) prints and validates the whole expression    * pool and rule queue as each rule fires;    *<li>{@link Logger#trace(String)} (formerly FINEST) also prints finer details like rule    * importances.    *</ul>    */
specifier|public
specifier|static
name|Logger
name|getPlannerTracer
parameter_list|()
block|{
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RelOptPlanner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The "org.apache.calcite.prepare.Prepare" tracer prints the generated    * program at DEBUG (formerly, FINE)  or higher.    */
specifier|public
specifier|static
name|Logger
name|getStatementTracer
parameter_list|()
block|{
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Prepare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The "org.apache.calcite.rel.RelImplementorImpl" tracer reports when    * expressions are bound to variables (DEBUG, formerly FINE)    */
specifier|public
specifier|static
name|Logger
name|getRelImplementorTracer
parameter_list|()
block|{
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RelImplementor
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * The tracer "org.apache.calcite.sql.timing" traces timing for    * various stages of query processing.    *    * @see CalciteTimingTracer    */
specifier|public
specifier|static
name|Logger
name|getSqlTimingTracer
parameter_list|()
block|{
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.calcite.sql.timing"
argument_list|)
return|;
block|}
comment|/**    * The "org.apache.calcite.sql.parser" tracer reports parse events.    */
specifier|public
specifier|static
name|Logger
name|getParserTracer
parameter_list|()
block|{
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.calcite.sql.parser"
argument_list|)
return|;
block|}
comment|/**    * The "org.apache.calcite.sql2rel" tracer reports parse events.    */
specifier|public
specifier|static
name|Logger
name|getSqlToRelTracer
parameter_list|()
block|{
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.calcite.sql2rel"
argument_list|)
return|;
block|}
comment|/**    * The tracers report important/useful information related with the execution    * of unit tests.    */
specifier|public
specifier|static
name|Logger
name|getTestTracer
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
parameter_list|)
block|{
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|testClass
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Thread-local handler that is called with dynamically generated Java code.    * It exists for unit-testing.    * The handler is never null; the default handler does nothing.    */
specifier|public
specifier|static
name|ThreadLocal
argument_list|<
name|Function2
argument_list|<
name|Void
argument_list|,
name|File
argument_list|,
name|String
argument_list|>
argument_list|>
name|getDynamicHandler
parameter_list|()
block|{
return|return
name|DYNAMIC_HANDLER
return|;
block|}
block|}
end_class

end_unit

