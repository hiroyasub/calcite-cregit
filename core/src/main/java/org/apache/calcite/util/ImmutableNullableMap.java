begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * An immutable map that may contain null values.  *  *<p>If the map cannot contain null values, use {@link ImmutableMap}.  *  * @param<K> Key type  * @param<V> Value type  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ImmutableNullableMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|SINGLETON_MAP
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|ImmutableNullableMap
parameter_list|()
block|{
block|}
comment|/**    * Returns an immutable map containing the given elements.    *    *<p>Behavior is as {@link ImmutableMap#copyOf(Iterable)}    * except that this map allows nulls.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"JdkObsolete"
block|,
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|instanceof
name|ImmutableNullableMap
operator|||
name|map
operator|instanceof
name|ImmutableMap
operator|||
name|map
operator|==
name|Collections
operator|.
name|emptyMap
argument_list|()
operator|||
name|map
operator|==
name|Collections
operator|.
name|emptyNavigableMap
argument_list|()
operator|||
name|map
operator|.
name|getClass
argument_list|()
operator|==
name|SINGLETON_MAP
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|map
return|;
block|}
if|if
condition|(
name|map
operator|instanceof
name|SortedMap
condition|)
block|{
specifier|final
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedMap
init|=
operator|(
name|SortedMap
operator|)
name|map
decl_stmt|;
try|try
block|{
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
init|=
name|sortedMap
operator|.
name|comparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|sortedMap
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|sortedMap
argument_list|,
name|comparator
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Make an effectively immutable map by creating a mutable copy
comment|// and wrapping it to prevent modification. Unfortunately, if we see
comment|// it again we will not recognize that it is immutable and we will make
comment|// another copy.
return|return
name|Collections
operator|.
name|unmodifiableNavigableMap
argument_list|(
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|sortedMap
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
try|try
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Make an effectively immutable map by creating a mutable copy
comment|// and wrapping it to prevent modification. Unfortunately, if we see
comment|// it again we will not recognize that it is immutable and we will make
comment|// another copy.
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|map
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Returns an immutable navigable map containing the given entries.    *    *<p>Behavior is as {@link ImmutableSortedMap#copyOf(Map)}    * except that this map allows nulls.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"JdkObsolete"
block|,
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|SortedMap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|instanceof
name|ImmutableNullableMap
operator|||
name|map
operator|instanceof
name|ImmutableMap
operator|||
name|map
operator|==
name|Collections
operator|.
name|emptyMap
argument_list|()
operator|||
name|map
operator|==
name|Collections
operator|.
name|emptyNavigableMap
argument_list|()
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|map
return|;
block|}
specifier|final
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedMap
init|=
operator|(
name|SortedMap
operator|)
name|map
decl_stmt|;
try|try
block|{
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
init|=
name|sortedMap
operator|.
name|comparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|sortedMap
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|sortedMap
argument_list|,
name|comparator
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Make an effectively immutable map by creating a mutable copy
comment|// and wrapping it to prevent modification. Unfortunately, if we see
comment|// it again we will not recognize that it is immutable and we will make
comment|// another copy.
return|return
name|Collections
operator|.
name|unmodifiableNavigableMap
argument_list|(
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|sortedMap
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

