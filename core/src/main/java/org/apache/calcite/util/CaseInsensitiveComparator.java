begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Comparator that compares all strings differently, but if two strings are  * equal in case-insensitive match they are right next to each other.  *  *<p>Note: strings that differ only in upper-lower case are treated by this comparator  * as distinct.  *  *<p>In a collection sorted on this comparator, we can find case-insensitive matches  * for a given string using  * {@link #floorKey(java.lang.String)}  * and {@link #ceilingKey(java.lang.String)}.  */
end_comment

begin_class
class|class
name|CaseInsensitiveComparator
implements|implements
name|Comparator
block|{
specifier|static
specifier|final
name|CaseInsensitiveComparator
name|COMPARATOR
init|=
operator|new
name|CaseInsensitiveComparator
argument_list|()
decl_stmt|;
comment|/**    * Enables to create floor and ceiling keys for given string.    */
specifier|private
specifier|static
specifier|final
class|class
name|Key
block|{
specifier|public
specifier|final
name|String
name|value
decl_stmt|;
specifier|public
specifier|final
name|int
name|compareResult
decl_stmt|;
specifier|private
name|Key
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|compareResult
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|compareResult
operator|=
name|compareResult
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
name|Object
name|floorKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|(
name|key
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
name|Object
name|ceilingKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|(
name|key
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|String
name|s1
init|=
name|o1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|s2
init|=
name|o2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|s1
operator|.
name|compareToIgnoreCase
argument_list|(
name|s2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
if|if
condition|(
name|o1
operator|instanceof
name|Key
condition|)
block|{
return|return
operator|(
operator|(
name|Key
operator|)
name|o1
operator|)
operator|.
name|compareResult
return|;
block|}
if|if
condition|(
name|o2
operator|instanceof
name|Key
condition|)
block|{
return|return
operator|-
operator|(
operator|(
name|Key
operator|)
name|o2
operator|)
operator|.
name|compareResult
return|;
block|}
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End CaseInsensitiveComparator.java
end_comment

end_unit

