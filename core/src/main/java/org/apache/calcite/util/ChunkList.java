begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSequentialList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Implementation of list similar to {@link LinkedList}, but stores elements  * in chunks of 32 elements.  *  *<p>ArrayList has O(n) insertion and deletion into the middle of the list.  * ChunkList insertion and deletion are O(1).</p>  *  * @param<E> element type  */
end_comment

begin_class
specifier|public
class|class
name|ChunkList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractSequentialList
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|HEADER_SIZE
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Integer
index|[]
name|INTEGERS
init|=
operator|new
name|Integer
index|[
name|CHUNK_SIZE
operator|+
literal|3
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|INTEGERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|INTEGERS
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|size
decl_stmt|;
specifier|private
name|E
annotation|@
name|Nullable
type|[]
name|first
decl_stmt|;
specifier|private
name|E
annotation|@
name|Nullable
type|[]
name|last
decl_stmt|;
comment|/**    * Creates an empty ChunkList.    */
specifier|public
name|ChunkList
parameter_list|()
block|{
block|}
comment|/**    * Creates a ChunkList whose contents are a given Collection.    */
specifier|public
name|ChunkList
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"method.invocation.invalid"
block|,
literal|"unused"
block|}
argument_list|)
name|boolean
name|ignore
init|=
name|addAll
argument_list|(
name|collection
argument_list|)
decl_stmt|;
block|}
comment|/**    * For debugging and testing.    */
name|boolean
name|isValid
parameter_list|(
name|boolean
name|fail
parameter_list|)
block|{
if|if
condition|(
operator|(
name|first
operator|==
literal|null
operator|)
operator|!=
operator|(
name|last
operator|==
literal|null
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|first
operator|==
literal|null
operator|)
operator|!=
operator|(
name|size
operator|==
literal|0
operator|)
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|E
name|e
range|:
name|this
control|)
block|{
if|if
condition|(
name|n
operator|++
operator|>
name|size
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|n
operator|!=
name|size
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
name|E
index|[]
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|E
index|[]
name|chunk
init|=
name|first
init|;
name|chunk
operator|!=
literal|null
condition|;
name|chunk
operator|=
name|next
argument_list|(
name|chunk
argument_list|)
control|)
block|{
if|if
condition|(
name|prev
argument_list|(
name|chunk
argument_list|)
operator|!=
name|prev
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
name|prev
operator|=
name|chunk
expr_stmt|;
if|if
condition|(
name|occupied
argument_list|(
name|chunk
argument_list|)
operator|==
literal|0
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|locate
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
comment|// base class method works, but let's optimize
name|size
operator|=
literal|0
expr_stmt|;
name|first
operator|=
name|last
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|element
parameter_list|)
block|{
name|E
index|[]
name|chunk
init|=
name|last
decl_stmt|;
name|int
name|occupied
decl_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
comment|//noinspection unchecked
name|chunk
operator|=
name|first
operator|=
name|last
operator|=
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
name|CHUNK_SIZE
operator|+
name|HEADER_SIZE
index|]
expr_stmt|;
name|occupied
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|occupied
operator|=
name|occupied
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|occupied
operator|==
name|CHUNK_SIZE
condition|)
block|{
comment|//noinspection unchecked
name|chunk
operator|=
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
name|CHUNK_SIZE
operator|+
name|HEADER_SIZE
index|]
expr_stmt|;
name|setNext
argument_list|(
name|requireNonNull
argument_list|(
name|last
argument_list|,
literal|"last"
argument_list|)
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|setPrev
argument_list|(
name|chunk
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|occupied
operator|=
literal|0
expr_stmt|;
name|last
operator|=
name|chunk
expr_stmt|;
block|}
block|}
name|setOccupied
argument_list|(
name|chunk
argument_list|,
name|occupied
operator|+
literal|1
argument_list|)
expr_stmt|;
name|setElement
argument_list|(
name|chunk
argument_list|,
name|HEADER_SIZE
operator|+
name|occupied
argument_list|,
name|element
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
name|size
condition|)
block|{
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|E
annotation|@
name|Nullable
type|[]
name|prev
function|(
name|E
function|[]
name|chunk
block|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|E
expr|@
name|Nullable
index|[]
operator|)
name|chunk
index|[
literal|0
index|]
return|;
block|}
end_class

begin_decl_stmt
specifier|private
specifier|static
argument_list|<
name|E
argument_list|>
name|void
name|setPrev
argument_list|(
name|E
index|[]
name|chunk
argument_list|,
name|E
expr|@
name|Nullable
index|[]
name|prev
argument_list|)
block|{
comment|//noinspection unchecked
name|chunk
index|[
literal|0
index|]
operator|=
operator|(
name|E
operator|)
name|prev
expr_stmt|;
block|}
end_decl_stmt

begin_function
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|E
annotation|@
name|Nullable
type|[]
name|next
function|(
name|E
function|[]
name|chunk
end_function

begin_block
unit|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|E
expr|@
name|Nullable
index|[]
operator|)
name|chunk
index|[
literal|1
index|]
return|;
block|}
end_block

begin_decl_stmt
specifier|private
specifier|static
argument_list|<
name|E
argument_list|>
name|void
name|setNext
argument_list|(
name|E
index|[]
name|chunk
argument_list|,
name|E
expr|@
name|Nullable
index|[]
name|next
argument_list|)
block|{
assert|assert
name|chunk
operator|!=
name|next
assert|;
comment|//noinspection unchecked
name|chunk
index|[
literal|1
index|]
operator|=
operator|(
name|E
operator|)
name|next
expr_stmt|;
block|}
end_decl_stmt

begin_function
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|int
name|occupied
parameter_list|(
name|E
index|[]
name|chunk
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|requireNonNull
argument_list|(
name|chunk
index|[
literal|2
index|]
argument_list|,
literal|"chunk[2] (number of occupied entries)"
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|void
name|setOccupied
parameter_list|(
name|E
index|[]
name|chunk
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|chunk
index|[
literal|2
index|]
operator|=
operator|(
name|E
operator|)
name|INTEGERS
index|[
name|size
index|]
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|E
name|element
parameter_list|(
name|E
index|[]
name|chunk
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|chunk
index|[
name|index
index|]
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|void
name|setElement
parameter_list|(
name|E
index|[]
name|chunk
parameter_list|,
name|int
name|index
parameter_list|,
annotation|@
name|Nullable
name|E
name|element
parameter_list|)
block|{
name|chunk
index|[
name|index
index|]
operator|=
name|castNonNull
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|ChunkListIterator
name|locate
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>
name|size
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
comment|// Create an iterator positioned before the first element.
return|return
operator|new
name|ChunkListIterator
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|E
index|[]
name|chunk
init|=
name|first
init|;
condition|;
control|)
block|{
specifier|final
name|int
name|occupied
init|=
name|occupied
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nextN
init|=
name|n
operator|+
name|occupied
decl_stmt|;
specifier|final
name|E
index|[]
name|next
init|=
name|next
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextN
operator|>=
name|index
operator|||
name|next
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ChunkListIterator
argument_list|(
name|chunk
argument_list|,
name|n
argument_list|,
name|index
argument_list|,
operator|-
literal|1
argument_list|,
name|n
operator|+
name|occupied
argument_list|)
return|;
block|}
name|n
operator|=
name|nextN
expr_stmt|;
name|chunk
operator|=
name|next
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** Iterator over a {@link ChunkList}. */
end_comment

begin_class
specifier|private
class|class
name|ChunkListIterator
implements|implements
name|ListIterator
argument_list|<
name|E
argument_list|>
block|{
specifier|private
name|E
annotation|@
name|Nullable
type|[]
name|chunk
decl_stmt|;
comment|/** Offset in the list of the first element of this chunk. */
specifier|private
name|int
name|start
decl_stmt|;
comment|/** Offset within current chunk of the next element to return. */
specifier|private
name|int
name|cursor
decl_stmt|;
comment|/** Offset within the current chunk of the last element returned. -1 if      * {@link #next} or {@link #previous()} has not been called. */
specifier|private
name|int
name|lastRet
decl_stmt|;
comment|/** Offset of the first unoccupied location in the current chunk. */
specifier|private
name|int
name|end
decl_stmt|;
name|ChunkListIterator
argument_list|(
name|E
expr|@
name|Nullable
index|[]
name|chunk
argument_list|,
name|int
name|start
argument_list|,
name|int
name|cursor
argument_list|,
name|int
name|lastRet
argument_list|,
name|int
name|end
argument_list|)
block|{
name|this
operator|.
name|chunk
operator|=
name|chunk
block|;
name|this
operator|.
name|start
operator|=
name|start
block|;
name|this
operator|.
name|cursor
operator|=
name|cursor
block|;
name|this
operator|.
name|lastRet
operator|=
name|lastRet
block|;
name|this
operator|.
name|end
operator|=
name|end
block|;     }
specifier|private
name|E
index|[]
name|currentChunk
argument_list|()
block|{
return|return
name|castNonNull
argument_list|(
name|chunk
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|cursor
operator|<
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
name|cursor
operator|>=
name|size
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
if|if
condition|(
name|cursor
operator|==
name|end
condition|)
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|chunk
operator|=
name|first
expr_stmt|;
block|}
else|else
block|{
name|chunk
operator|=
name|ChunkList
operator|.
name|next
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|end
expr_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|end
operator|=
name|start
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|start
operator|+
name|occupied
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|E
name|element
init|=
operator|(
name|E
operator|)
name|element
argument_list|(
name|currentChunk
argument_list|()
argument_list|,
name|HEADER_SIZE
operator|+
operator|(
name|lastRet
operator|=
name|cursor
operator|++
operator|)
operator|-
name|start
argument_list|)
decl_stmt|;
return|return
name|element
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrevious
parameter_list|()
block|{
return|return
name|cursor
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|previous
parameter_list|()
block|{
name|lastRet
operator|=
name|cursor
operator|--
expr_stmt|;
if|if
condition|(
name|cursor
operator|<
name|start
condition|)
block|{
name|chunk
operator|=
name|chunk
operator|==
literal|null
condition|?
name|last
else|:
name|ChunkList
operator|.
name|prev
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|final
name|int
name|o
init|=
name|occupied
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|end
operator|=
name|start
expr_stmt|;
name|start
operator|-=
name|o
expr_stmt|;
assert|assert
name|cursor
operator|==
name|end
operator|-
literal|1
assert|;
block|}
comment|//noinspection unchecked
return|return
operator|(
name|E
operator|)
name|element
argument_list|(
name|currentChunk
argument_list|()
argument_list|,
name|cursor
operator|-
name|start
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextIndex
parameter_list|()
block|{
return|return
name|cursor
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|previousIndex
parameter_list|()
block|{
return|return
name|cursor
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|lastRet
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
operator|--
name|size
expr_stmt|;
operator|--
name|cursor
expr_stmt|;
if|if
condition|(
name|end
operator|==
name|start
operator|+
literal|1
condition|)
block|{
comment|// Chunk is now empty.
specifier|final
name|E
index|[]
name|prev
init|=
name|prev
argument_list|(
name|currentChunk
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|E
index|[]
name|next
init|=
name|ChunkList
operator|.
name|next
argument_list|(
name|currentChunk
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|prev
expr_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|first
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|setNext
argument_list|(
name|prev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|chunk
operator|=
literal|null
expr_stmt|;
name|end
operator|=
name|HEADER_SIZE
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|chunk
operator|=
name|first
operator|=
name|next
expr_stmt|;
name|setPrev
argument_list|(
name|next
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|end
operator|=
name|occupied
argument_list|(
name|requireNonNull
argument_list|(
name|chunk
argument_list|,
literal|"chunk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNext
argument_list|(
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|setPrev
argument_list|(
name|next
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|chunk
operator|=
name|prev
expr_stmt|;
name|end
operator|=
name|start
expr_stmt|;
name|start
operator|-=
name|occupied
argument_list|(
name|requireNonNull
argument_list|(
name|chunk
argument_list|,
literal|"chunk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|lastRet
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|r
init|=
name|lastRet
decl_stmt|;
name|lastRet
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|start
condition|)
block|{
comment|// Element we wish to eliminate is the last element in the previous
comment|// block.
name|E
index|[]
name|c
init|=
name|chunk
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
name|last
expr_stmt|;
block|}
name|int
name|o
init|=
name|occupied
argument_list|(
name|castNonNull
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|1
condition|)
block|{
comment|// Block is now empty; remove it
specifier|final
name|E
index|[]
name|prev
init|=
name|prev
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|last
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
name|chunk
expr_stmt|;
name|setPrev
argument_list|(
name|requireNonNull
argument_list|(
name|chunk
argument_list|,
literal|"chunk"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setNext
argument_list|(
name|requireNonNull
argument_list|(
name|prev
argument_list|,
literal|"prev"
argument_list|)
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|setPrev
argument_list|(
name|requireNonNull
argument_list|(
name|chunk
argument_list|,
literal|"chunk"
argument_list|)
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
operator|--
name|o
expr_stmt|;
name|setElement
argument_list|(
name|c
argument_list|,
name|HEADER_SIZE
operator|+
name|o
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// allow gc
name|setOccupied
argument_list|(
name|c
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Move existing contents down one.
name|System
operator|.
name|arraycopy
argument_list|(
name|currentChunk
argument_list|()
argument_list|,
name|HEADER_SIZE
operator|+
name|r
operator|-
name|start
operator|+
literal|1
argument_list|,
name|currentChunk
argument_list|()
argument_list|,
name|HEADER_SIZE
operator|+
name|r
operator|-
name|start
argument_list|,
name|end
operator|-
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|--
name|end
expr_stmt|;
specifier|final
name|int
name|o
init|=
name|end
operator|-
name|start
decl_stmt|;
name|setElement
argument_list|(
name|currentChunk
argument_list|()
argument_list|,
name|HEADER_SIZE
operator|+
name|o
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// allow gc
name|setOccupied
argument_list|(
name|currentChunk
argument_list|()
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|lastRet
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|E
index|[]
name|c
init|=
name|currentChunk
argument_list|()
decl_stmt|;
name|int
name|p
init|=
name|lastRet
decl_stmt|;
name|int
name|s
init|=
name|start
decl_stmt|;
if|if
condition|(
name|p
operator|<
name|start
condition|)
block|{
comment|// The element is at the end of the previous chunk
name|c
operator|=
name|prev
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|s
operator|-=
name|occupied
argument_list|(
name|castNonNull
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setElement
argument_list|(
name|c
argument_list|,
name|HEADER_SIZE
operator|+
name|p
operator|-
name|s
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
comment|//noinspection unchecked
name|E
index|[]
name|newChunk
init|=
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
name|CHUNK_SIZE
operator|+
name|HEADER_SIZE
index|]
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|setNext
argument_list|(
name|newChunk
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|setPrev
argument_list|(
name|requireNonNull
argument_list|(
name|first
argument_list|,
literal|"first"
argument_list|)
argument_list|,
name|newChunk
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
name|newChunk
expr_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|newChunk
expr_stmt|;
block|}
name|chunk
operator|=
name|newChunk
expr_stmt|;
name|end
operator|=
name|start
expr_stmt|;
block|}
if|else if
condition|(
name|end
operator|==
name|start
operator|+
name|CHUNK_SIZE
condition|)
block|{
comment|// FIXME We create a new chunk, but the next chunk might be
comment|// less than half full. We should consider using it.
comment|//noinspection unchecked
name|E
index|[]
name|newChunk
init|=
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
name|CHUNK_SIZE
operator|+
name|HEADER_SIZE
index|]
decl_stmt|;
specifier|final
name|E
index|[]
name|next
init|=
name|ChunkList
operator|.
name|next
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|setPrev
argument_list|(
name|newChunk
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|setNext
argument_list|(
name|requireNonNull
argument_list|(
name|chunk
argument_list|,
literal|"chunk"
argument_list|)
argument_list|,
name|newChunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|newChunk
expr_stmt|;
block|}
else|else
block|{
name|setPrev
argument_list|(
name|next
argument_list|,
name|newChunk
argument_list|)
expr_stmt|;
name|setNext
argument_list|(
name|newChunk
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
name|setOccupied
argument_list|(
name|requireNonNull
argument_list|(
name|chunk
argument_list|,
literal|"chunk"
argument_list|)
argument_list|,
name|CHUNK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|setOccupied
argument_list|(
name|newChunk
argument_list|,
name|CHUNK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|requireNonNull
argument_list|(
name|chunk
argument_list|,
literal|"chunk"
argument_list|)
argument_list|,
name|HEADER_SIZE
operator|+
name|CHUNK_SIZE
operator|/
literal|2
argument_list|,
name|newChunk
argument_list|,
name|HEADER_SIZE
argument_list|,
name|CHUNK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|chunk
argument_list|,
name|HEADER_SIZE
operator|+
name|CHUNK_SIZE
operator|/
literal|2
argument_list|,
name|HEADER_SIZE
operator|+
name|CHUNK_SIZE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|-
name|start
operator|<
name|CHUNK_SIZE
operator|/
literal|2
condition|)
block|{
name|end
operator|-=
name|CHUNK_SIZE
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
name|start
operator|+=
name|CHUNK_SIZE
operator|/
literal|2
expr_stmt|;
name|chunk
operator|=
name|newChunk
expr_stmt|;
block|}
block|}
comment|// Move existing contents up one.
name|System
operator|.
name|arraycopy
argument_list|(
name|chunk
argument_list|,
name|HEADER_SIZE
operator|+
name|cursor
operator|-
name|start
argument_list|,
name|chunk
argument_list|,
name|HEADER_SIZE
operator|+
name|cursor
operator|-
name|start
operator|+
literal|1
argument_list|,
name|end
operator|-
name|cursor
argument_list|)
expr_stmt|;
operator|++
name|end
expr_stmt|;
name|setElement
argument_list|(
name|chunk
argument_list|,
name|HEADER_SIZE
operator|+
name|cursor
operator|-
name|start
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setOccupied
argument_list|(
name|chunk
argument_list|,
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

