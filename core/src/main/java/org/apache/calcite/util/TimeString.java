begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * Time literal.  *  *<p>Immutable, internally represented as a string (in ISO format),  * and can support unlimited precision (milliseconds, nanoseconds).  */
end_comment

begin_class
specifier|public
class|class
name|TimeString
implements|implements
name|Comparable
argument_list|<
name|TimeString
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9]*[1-9])?"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|v
decl_stmt|;
comment|/** Internal constructor, no validation. */
specifier|private
name|TimeString
parameter_list|(
name|String
name|v
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|boolean
name|ignore
parameter_list|)
block|{
name|this
operator|.
name|v
operator|=
name|v
expr_stmt|;
block|}
comment|/** Creates a TimeString. */
specifier|public
name|TimeString
parameter_list|(
name|String
name|v
parameter_list|)
block|{
name|this
argument_list|(
name|v
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|PATTERN
operator|.
name|matcher
argument_list|(
name|v
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|,
literal|"Invalid time format:"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|getHour
argument_list|()
operator|>=
literal|0
operator|&&
name|getHour
argument_list|()
operator|<
literal|24
argument_list|,
literal|"Hour out of range:"
argument_list|,
name|getHour
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|getMinute
argument_list|()
operator|>=
literal|0
operator|&&
name|getMinute
argument_list|()
operator|<
literal|60
argument_list|,
literal|"Minute out of range:"
argument_list|,
name|getMinute
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|getSecond
argument_list|()
operator|>=
literal|0
operator|&&
name|getSecond
argument_list|()
operator|<
literal|60
argument_list|,
literal|"Second out of range:"
argument_list|,
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a TimeString for hour, minute, second and millisecond values. */
specifier|public
name|TimeString
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|s
parameter_list|)
block|{
name|this
argument_list|(
name|hms
argument_list|(
name|h
argument_list|,
name|m
argument_list|,
name|s
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Validates an hour-minute-second value and converts to a string. */
specifier|private
specifier|static
name|String
name|hms
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|s
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|h
operator|>=
literal|0
operator|&&
name|h
operator|<
literal|24
argument_list|,
literal|"Hour out of range:"
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|m
operator|>=
literal|0
operator|&&
name|m
operator|<
literal|60
argument_list|,
literal|"Minute out of range:"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|s
operator|>=
literal|0
operator|&&
name|s
operator|<
literal|60
argument_list|,
literal|"Second out of range:"
argument_list|,
name|s
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|DateTimeStringUtils
operator|.
name|hms
argument_list|(
name|b
argument_list|,
name|h
argument_list|,
name|m
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Sets the fraction field of a {@code TimeString} to a given number    * of milliseconds. Nukes the value set via {@link #withNanos}.    *    *<p>For example,    * {@code new TimeString(1970, 1, 1, 2, 3, 4).withMillis(56)}    * yields {@code TIME '1970-01-01 02:03:04.056'}. */
specifier|public
name|TimeString
name|withMillis
parameter_list|(
name|int
name|millis
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|millis
operator|>=
literal|0
operator|&&
name|millis
operator|<
literal|1000
argument_list|)
expr_stmt|;
return|return
name|withFraction
argument_list|(
name|DateTimeStringUtils
operator|.
name|pad
argument_list|(
literal|3
argument_list|,
name|millis
argument_list|)
argument_list|)
return|;
block|}
comment|/** Sets the fraction field of a {@code TimeString} to a given number    * of nanoseconds. Nukes the value set via {@link #withMillis(int)}.    *    *<p>For example,    * {@code new TimeString(1970, 1, 1, 2, 3, 4).withNanos(56789)}    * yields {@code TIME '1970-01-01 02:03:04.000056789'}. */
specifier|public
name|TimeString
name|withNanos
parameter_list|(
name|int
name|nanos
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nanos
operator|>=
literal|0
operator|&&
name|nanos
operator|<
literal|1000000000
argument_list|)
expr_stmt|;
return|return
name|withFraction
argument_list|(
name|DateTimeStringUtils
operator|.
name|pad
argument_list|(
literal|9
argument_list|,
name|nanos
argument_list|)
argument_list|)
return|;
block|}
comment|/** Sets the fraction field of a {@code TimeString}.    * The precision is determined by the number of leading zeros.    * Trailing zeros are stripped.    *    *<p>For example,    * {@code new TimeString(1970, 1, 1, 2, 3, 4).withFraction("00506000")}    * yields {@code TIME '1970-01-01 02:03:04.00506'}. */
specifier|public
name|TimeString
name|withFraction
parameter_list|(
name|String
name|fraction
parameter_list|)
block|{
name|String
name|v
init|=
name|this
operator|.
name|v
decl_stmt|;
name|int
name|i
init|=
name|v
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|v
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|fraction
operator|.
name|endsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
name|fraction
operator|=
name|fraction
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fraction
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fraction
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|v
operator|=
name|v
operator|+
literal|"."
operator|+
name|fraction
expr_stmt|;
block|}
return|return
operator|new
name|TimeString
argument_list|(
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// The value is in canonical form (no trailing zeros).
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|TimeString
operator|&&
operator|(
operator|(
name|TimeString
operator|)
name|o
operator|)
operator|.
name|v
operator|.
name|equals
argument_list|(
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|v
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
annotation|@
name|Nonnull
name|TimeString
name|o
parameter_list|)
block|{
return|return
name|v
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|v
argument_list|)
return|;
block|}
comment|/** Creates a TimeString from a Calendar. */
specifier|public
specifier|static
name|TimeString
name|fromCalendarFields
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
return|return
operator|new
name|TimeString
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
operator|.
name|withMillis
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TimeString
name|fromMillisOfDay
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|TimeString
argument_list|(
name|DateTimeUtils
operator|.
name|unixTimeToString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|withMillis
argument_list|(
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|floorMod
argument_list|(
name|i
argument_list|,
literal|1000
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|TimeString
name|round
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|precision
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|int
name|targetLength
init|=
literal|9
operator|+
name|precision
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|length
argument_list|()
operator|<=
name|targetLength
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
name|v
init|=
name|this
operator|.
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|targetLength
argument_list|)
decl_stmt|;
while|while
condition|(
name|v
operator|.
name|length
argument_list|()
operator|>=
literal|9
operator|&&
operator|(
name|v
operator|.
name|endsWith
argument_list|(
literal|"0"
argument_list|)
operator|||
name|v
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TimeString
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMillisOfDay
parameter_list|()
block|{
name|int
name|h
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|m
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|s
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ms
init|=
name|getMillisInSecond
argument_list|()
decl_stmt|;
return|return
operator|(
name|int
operator|)
operator|(
name|h
operator|*
name|DateTimeUtils
operator|.
name|MILLIS_PER_HOUR
operator|+
name|m
operator|*
name|DateTimeUtils
operator|.
name|MILLIS_PER_MINUTE
operator|+
name|s
operator|*
name|DateTimeUtils
operator|.
name|MILLIS_PER_SECOND
operator|+
name|ms
operator|)
return|;
block|}
specifier|private
name|int
name|getMillisInSecond
parameter_list|()
block|{
switch|switch
condition|(
name|v
operator|.
name|length
argument_list|()
condition|)
block|{
case|case
literal|8
case|:
comment|// "12:34:56"
return|return
literal|0
return|;
case|case
literal|10
case|:
comment|// "12:34:56.7"
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|9
argument_list|)
argument_list|)
operator|*
literal|100
return|;
case|case
literal|11
case|:
comment|// "12:34:56.78"
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|9
argument_list|)
argument_list|)
operator|*
literal|10
return|;
case|case
literal|12
case|:
comment|// "12:34:56.789"
default|default:
comment|// "12:34:56.7890000012345"
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|9
argument_list|,
literal|12
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|getHour
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getMinute
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|this
operator|.
name|v
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getSecond
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|this
operator|.
name|v
operator|.
name|substring
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Calendar
name|toCalendar
parameter_list|()
block|{
return|return
name|Util
operator|.
name|calendar
argument_list|(
name|getMillisOfDay
argument_list|()
argument_list|)
return|;
block|}
comment|/** Converts this TimestampString to a string, truncated or padded with    * zeros to a given precision. */
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|precision
operator|>=
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|p
init|=
name|precision
argument_list|()
decl_stmt|;
if|if
condition|(
name|precision
operator|<
name|p
condition|)
block|{
return|return
name|round
argument_list|(
name|precision
argument_list|)
operator|.
name|toString
argument_list|(
name|precision
argument_list|)
return|;
block|}
if|if
condition|(
name|precision
operator|>
name|p
condition|)
block|{
name|String
name|s
init|=
name|v
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|0
condition|)
block|{
name|s
operator|+=
literal|"."
expr_stmt|;
block|}
return|return
name|s
operator|+
name|Strings
operator|.
name|repeat
argument_list|(
literal|"0"
argument_list|,
name|precision
operator|-
name|p
argument_list|)
return|;
block|}
return|return
name|v
return|;
block|}
specifier|private
name|int
name|precision
parameter_list|()
block|{
return|return
name|v
operator|.
name|length
argument_list|()
operator|<
literal|9
condition|?
literal|0
else|:
operator|(
name|v
operator|.
name|length
argument_list|()
operator|-
literal|9
operator|)
return|;
block|}
block|}
end_class

end_unit

