begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|floorMod
import|;
end_import

begin_comment
comment|/**  * Time with time-zone literal.  *  *<p>Immutable, internally represented as a string (in ISO format),  * and can support unlimited precision (milliseconds, nanoseconds).  */
end_comment

begin_class
specifier|public
class|class
name|TimeWithTimeZoneString
implements|implements
name|Comparable
argument_list|<
name|TimeWithTimeZoneString
argument_list|>
block|{
specifier|final
name|TimeString
name|localTime
decl_stmt|;
specifier|final
name|TimeZone
name|timeZone
decl_stmt|;
specifier|final
name|String
name|v
decl_stmt|;
comment|/** Creates a TimeWithTimeZoneString. */
specifier|public
name|TimeWithTimeZoneString
parameter_list|(
name|TimeString
name|localTime
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|localTime
operator|=
name|localTime
expr_stmt|;
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
name|this
operator|.
name|v
operator|=
name|localTime
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|timeZone
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
comment|/** Creates a TimeWithTimeZoneString. */
specifier|public
name|TimeWithTimeZoneString
parameter_list|(
name|String
name|v
parameter_list|)
block|{
name|this
operator|.
name|localTime
operator|=
operator|new
name|TimeString
argument_list|(
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|timeZoneString
init|=
name|v
operator|.
name|substring
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|DateTimeStringUtils
operator|.
name|isValidTimeZone
argument_list|(
name|timeZoneString
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeZone
operator|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timeZoneString
argument_list|)
expr_stmt|;
name|this
operator|.
name|v
operator|=
name|v
expr_stmt|;
block|}
comment|/** Creates a TimeWithTimeZoneString for hour, minute, second and millisecond values    * in the given time-zone. */
specifier|public
name|TimeWithTimeZoneString
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|s
parameter_list|,
name|String
name|timeZone
parameter_list|)
block|{
name|this
argument_list|(
name|DateTimeStringUtils
operator|.
name|hms
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|,
name|h
argument_list|,
name|m
argument_list|,
name|s
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|timeZone
argument_list|)
expr_stmt|;
block|}
comment|/** Sets the fraction field of a {@code TimeWithTimeZoneString} to a given number    * of milliseconds. Nukes the value set via {@link #withNanos}.    *    *<p>For example,    * {@code new TimeWithTimeZoneString(1970, 1, 1, 2, 3, 4, "UTC").withMillis(56)}    * yields {@code TIME WITH LOCAL TIME ZONE '1970-01-01 02:03:04.056 UTC'}. */
specifier|public
name|TimeWithTimeZoneString
name|withMillis
parameter_list|(
name|int
name|millis
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|millis
operator|>=
literal|0
operator|&&
name|millis
operator|<
literal|1000
argument_list|)
expr_stmt|;
return|return
name|withFraction
argument_list|(
name|DateTimeStringUtils
operator|.
name|pad
argument_list|(
literal|3
argument_list|,
name|millis
argument_list|)
argument_list|)
return|;
block|}
comment|/** Sets the fraction field of a {@code TimeString} to a given number    * of nanoseconds. Nukes the value set via {@link #withMillis(int)}.    *    *<p>For example,    * {@code new TimeWithTimeZoneString(1970, 1, 1, 2, 3, 4, "UTC").withNanos(56789)}    * yields {@code TIME WITH LOCAL TIME ZONE '1970-01-01 02:03:04.000056789 UTC'}. */
specifier|public
name|TimeWithTimeZoneString
name|withNanos
parameter_list|(
name|int
name|nanos
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nanos
operator|>=
literal|0
operator|&&
name|nanos
operator|<
literal|1000000000
argument_list|)
expr_stmt|;
return|return
name|withFraction
argument_list|(
name|DateTimeStringUtils
operator|.
name|pad
argument_list|(
literal|9
argument_list|,
name|nanos
argument_list|)
argument_list|)
return|;
block|}
comment|/** Sets the fraction field of a {@code TimeWithTimeZoneString}.    * The precision is determined by the number of leading zeros.    * Trailing zeros are stripped.    *    *<p>For example,    * {@code new TimeWithTimeZoneString(1970, 1, 1, 2, 3, 4, "UTC").withFraction("00506000")}    * yields {@code TIME WITH LOCAL TIME ZONE '1970-01-01 02:03:04.00506 UTC'}. */
specifier|public
name|TimeWithTimeZoneString
name|withFraction
parameter_list|(
name|String
name|fraction
parameter_list|)
block|{
name|String
name|v
init|=
name|this
operator|.
name|v
decl_stmt|;
name|int
name|i
init|=
name|v
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|v
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|fraction
operator|.
name|endsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
name|fraction
operator|=
name|fraction
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fraction
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fraction
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|v
operator|=
name|v
operator|+
literal|"."
operator|+
name|fraction
expr_stmt|;
block|}
name|v
operator|=
name|v
operator|+
name|this
operator|.
name|v
operator|.
name|substring
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// time-zone
return|return
operator|new
name|TimeWithTimeZoneString
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
name|TimeWithTimeZoneString
name|withTimeZone
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|timeZone
operator|.
name|equals
argument_list|(
name|timeZone
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
name|localTimeString
init|=
name|localTime
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|v
decl_stmt|;
name|String
name|fraction
decl_stmt|;
name|int
name|i
init|=
name|localTimeString
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|v
operator|=
name|localTimeString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|fraction
operator|=
name|localTimeString
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
name|localTimeString
expr_stmt|;
name|fraction
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|DateTimeUtils
operator|.
name|PrecisionTime
name|pt
init|=
name|DateTimeUtils
operator|.
name|parsePrecisionDateTimeLiteral
argument_list|(
name|v
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
name|DateTimeUtils
operator|.
name|TIME_FORMAT_STRING
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|this
operator|.
name|timeZone
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|pt
operator|.
name|getCalendar
argument_list|()
operator|.
name|setTimeZone
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
if|if
condition|(
name|fraction
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|TimeWithTimeZoneString
argument_list|(
name|pt
operator|.
name|getCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|pt
operator|.
name|getCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|pt
operator|.
name|getCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|withFraction
argument_list|(
name|fraction
argument_list|)
return|;
block|}
return|return
operator|new
name|TimeWithTimeZoneString
argument_list|(
name|pt
operator|.
name|getCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|pt
operator|.
name|getCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|pt
operator|.
name|getCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
comment|// The value is in canonical form (no trailing zeros).
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|TimeWithTimeZoneString
operator|&&
operator|(
operator|(
name|TimeWithTimeZoneString
operator|)
name|o
operator|)
operator|.
name|v
operator|.
name|equals
argument_list|(
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|v
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimeWithTimeZoneString
name|o
parameter_list|)
block|{
return|return
name|v
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|v
argument_list|)
return|;
block|}
specifier|public
name|TimeWithTimeZoneString
name|round
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|precision
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|TimeWithTimeZoneString
argument_list|(
name|localTime
operator|.
name|round
argument_list|(
name|precision
argument_list|)
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TimeWithTimeZoneString
name|fromMillisOfDay
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|TimeWithTimeZoneString
argument_list|(
name|DateTimeUtils
operator|.
name|unixTimeToString
argument_list|(
name|i
argument_list|)
operator|+
literal|" "
operator|+
name|DateTimeUtils
operator|.
name|UTC_ZONE
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|withMillis
argument_list|(
operator|(
name|int
operator|)
name|floorMod
argument_list|(
name|i
argument_list|,
literal|1000L
argument_list|)
argument_list|)
return|;
block|}
comment|/** Converts this TimeWithTimeZoneString to a string, truncated or padded with    * zeros to a given precision. */
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|precision
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|localTime
operator|.
name|toString
argument_list|(
name|precision
argument_list|)
operator|+
literal|" "
operator|+
name|timeZone
operator|.
name|getID
argument_list|()
return|;
block|}
specifier|public
name|TimeString
name|getLocalTimeString
parameter_list|()
block|{
return|return
name|localTime
return|;
block|}
block|}
end_class

end_unit

