begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NameSet
operator|.
name|COMPARATOR
import|;
end_import

begin_comment
comment|/** Helps construct case-insensitive ranges of {@link NameSet},  * {@link NameMap}, {@link NameMultimap}.  *  *<p>Not thread-safe. */
end_comment

begin_class
class|class
name|NameHelper
block|{
comment|/** Characters whose floor/ceiling are not the same as their upper/lower    * case. Out of 64k unicode characters, there are 289 weird characters. */
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|Character
argument_list|,
name|Pair
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
argument_list|>
name|WEIRD_CHARACTERS
init|=
name|weirdCharacters
argument_list|()
decl_stmt|;
comment|/** Workspace for computing the floor key. */
specifier|private
specifier|final
name|StringBuilder
name|floorBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|/** Workspace for computing the ceiling key. */
specifier|private
specifier|final
name|StringBuilder
name|ceilingBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|/** Given a string, computes the smallest and largest strings that are    * case-insensitive equal to that string,    * calls the given function,    * and returns its result.    *    *<p>For latin strings such as "bAz" computing the smallest and largest    * strings is straightforward:    * the floor is the upper-case string ("BAZ"), and    * the ceiling is the lower-case string ("baz").    *    *<p>It's more complicated for non-Latin strings that have characters    * whose lower-case value is less than their upper-case value.    *    *<p>This method is not thread-safe.    */
specifier|private
parameter_list|<
name|R
parameter_list|>
name|R
name|applyFloorCeiling
parameter_list|(
name|String
name|name
parameter_list|,
name|BiFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|R
argument_list|>
name|f
parameter_list|)
block|{
name|name
operator|.
name|chars
argument_list|()
operator|.
name|forEachOrdered
argument_list|(
name|i
lambda|->
block|{
specifier|final
name|char
name|c
init|=
operator|(
name|char
operator|)
name|i
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
name|pair
init|=
name|WEIRD_CHARACTERS
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
name|floorBuilder
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|ceilingBuilder
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|floorBuilder
operator|.
name|append
argument_list|(
name|pair
operator|.
name|left
argument_list|)
expr_stmt|;
name|ceilingBuilder
operator|.
name|append
argument_list|(
name|pair
operator|.
name|right
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|floor
init|=
name|bufValue
argument_list|(
name|floorBuilder
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ceiling
init|=
name|bufValue
argument_list|(
name|ceilingBuilder
argument_list|,
name|name
argument_list|)
decl_stmt|;
assert|assert
name|floor
operator|.
name|compareTo
argument_list|(
name|ceiling
argument_list|)
operator|<=
literal|0
assert|;
return|return
name|f
operator|.
name|apply
argument_list|(
name|floor
argument_list|,
name|ceiling
argument_list|)
return|;
block|}
comment|/** Returns the value of a {@link StringBuilder} as a string,    * and clears the builder.    *    *<p>If the value is the same the given string, returns that string,    * thereby saving the effort of building a new string. */
specifier|private
specifier|static
name|String
name|bufValue
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|!=
name|s
operator|.
name|length
argument_list|()
operator|||
name|b
operator|.
name|indexOf
argument_list|(
name|s
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|s
operator|=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/** Used by {@link NameSet#range(String, boolean)}. */
name|Collection
argument_list|<
name|String
argument_list|>
name|set
parameter_list|(
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|applyFloorCeiling
argument_list|(
name|name
argument_list|,
parameter_list|(
name|floor
parameter_list|,
name|ceiling
parameter_list|)
lambda|->
block|{
specifier|final
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|subSet
init|=
name|names
operator|.
name|subSet
argument_list|(
name|floor
argument_list|,
literal|true
argument_list|,
name|ceiling
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|subSet
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
comment|/** Used by {@link NameMap#range(String, boolean)}. */
parameter_list|<
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|map
parameter_list|(
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|applyFloorCeiling
argument_list|(
name|name
argument_list|,
parameter_list|(
name|floor
parameter_list|,
name|ceiling
parameter_list|)
lambda|->
block|{
specifier|final
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|builder
init|=
operator|new
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<>
argument_list|(
name|COMPARATOR
argument_list|)
decl_stmt|;
specifier|final
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|subMap
init|=
name|map
operator|.
name|subMap
argument_list|(
name|floor
argument_list|,
literal|true
argument_list|,
name|ceiling
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|e
range|:
name|subMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
comment|/** Used by {@link NameMultimap#range(String, boolean)}. */
parameter_list|<
name|V
parameter_list|>
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimap
parameter_list|(
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|applyFloorCeiling
argument_list|(
name|name
argument_list|,
parameter_list|(
name|floor
parameter_list|,
name|ceiling
parameter_list|)
lambda|->
block|{
specifier|final
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|subMap
init|=
name|map
operator|.
name|subMap
argument_list|(
name|floor
argument_list|,
literal|true
argument_list|,
name|ceiling
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|e
range|:
name|subMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
for|for
control|(
name|V
name|v
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
comment|/** Returns whether an equivalence class of characters is simple.    *    *<p>It is simple if    * the floor of the class is the upper-case value of every character, and    * the ceiling of the class is the lower-case value of every character. */
specifier|private
specifier|static
name|boolean
name|isSimple
parameter_list|(
name|Collection
argument_list|<
name|Character
argument_list|>
name|characters
parameter_list|,
name|Character
name|floor
parameter_list|,
name|Character
name|ceiling
parameter_list|)
block|{
for|for
control|(
name|Character
name|character
range|:
name|characters
control|)
block|{
if|if
condition|(
operator|!
name|floor
operator|.
name|equals
argument_list|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|character
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ceiling
operator|.
name|equals
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|character
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|ImmutableMap
argument_list|<
name|Character
argument_list|,
name|Pair
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
argument_list|>
name|weirdCharacters
parameter_list|()
block|{
specifier|final
name|EquivalenceSet
argument_list|<
name|Character
argument_list|>
name|strange
init|=
operator|new
name|EquivalenceSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|0xffff
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|i
decl_stmt|;
name|strange
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|strange
operator|.
name|equiv
argument_list|(
name|c
argument_list|,
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|strange
operator|.
name|equiv
argument_list|(
name|c
argument_list|,
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SortedMap
argument_list|<
name|Character
argument_list|,
name|SortedSet
argument_list|<
name|Character
argument_list|>
argument_list|>
name|map
init|=
name|strange
operator|.
name|map
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Pair
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Character
argument_list|,
name|SortedSet
argument_list|<
name|Character
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Collection
argument_list|<
name|Character
argument_list|>
name|characters
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Character
name|floor
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|min
argument_list|(
name|characters
argument_list|)
decl_stmt|;
specifier|final
name|Character
name|ceiling
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|max
argument_list|(
name|characters
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSimple
argument_list|(
name|characters
argument_list|,
name|floor
argument_list|,
name|ceiling
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Pair
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
name|pair
init|=
name|Pair
operator|.
name|of
argument_list|(
name|floor
argument_list|,
name|ceiling
argument_list|)
decl_stmt|;
for|for
control|(
name|Character
name|character
range|:
name|characters
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|character
argument_list|,
name|pair
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End NameHelper.java
end_comment

end_unit

