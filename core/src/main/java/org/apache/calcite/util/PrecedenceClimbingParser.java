begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Parser that takes a collection of tokens (atoms and operators)  * and groups them together according to the operators' precedence  * and associativity.  */
end_comment

begin_class
specifier|public
class|class
name|PrecedenceClimbingParser
block|{
specifier|private
annotation|@
name|Nullable
name|Token
name|first
decl_stmt|;
specifier|private
annotation|@
name|Nullable
name|Token
name|last
decl_stmt|;
specifier|private
name|PrecedenceClimbingParser
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
parameter_list|)
block|{
name|Token
name|p
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|next
operator|=
name|token
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
name|token
expr_stmt|;
block|}
name|token
operator|.
name|previous
operator|=
name|p
expr_stmt|;
name|token
operator|.
name|next
operator|=
literal|null
expr_stmt|;
name|p
operator|=
name|token
expr_stmt|;
block|}
name|last
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|Token
name|atom
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|(
name|Type
operator|.
name|ATOM
argument_list|,
name|o
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|Call
name|call
parameter_list|(
name|Op
name|op
parameter_list|,
name|ImmutableList
argument_list|<
name|Token
argument_list|>
name|args
parameter_list|)
block|{
return|return
operator|new
name|Call
argument_list|(
name|op
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Op
name|infix
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|precedence
parameter_list|,
name|boolean
name|left
parameter_list|)
block|{
return|return
operator|new
name|Op
argument_list|(
name|Type
operator|.
name|INFIX
argument_list|,
name|o
argument_list|,
name|precedence
operator|*
literal|2
operator|+
operator|(
name|left
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
name|precedence
operator|*
literal|2
operator|+
operator|(
name|left
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Op
name|prefix
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|precedence
parameter_list|)
block|{
return|return
operator|new
name|Op
argument_list|(
name|Type
operator|.
name|PREFIX
argument_list|,
name|o
argument_list|,
operator|-
literal|1
argument_list|,
name|precedence
operator|*
literal|2
argument_list|)
return|;
block|}
specifier|public
name|Op
name|postfix
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|precedence
parameter_list|)
block|{
return|return
operator|new
name|Op
argument_list|(
name|Type
operator|.
name|POSTFIX
argument_list|,
name|o
argument_list|,
name|precedence
operator|*
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|SpecialOp
name|special
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|,
name|Special
name|special
parameter_list|)
block|{
return|return
operator|new
name|SpecialOp
argument_list|(
name|o
argument_list|,
name|leftPrec
operator|*
literal|2
argument_list|,
name|rightPrec
operator|*
literal|2
argument_list|,
name|special
argument_list|)
return|;
block|}
specifier|public
annotation|@
name|Nullable
name|Token
name|parse
parameter_list|()
block|{
name|partialParse
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
operator|!=
name|last
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"could not find next operator to reduce: "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
name|first
return|;
block|}
specifier|public
name|void
name|partialParse
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|Op
name|op
init|=
name|highest
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|Token
name|t
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|POSTFIX
case|:
block|{
name|Token
name|previous
init|=
name|requireNonNull
argument_list|(
name|op
operator|.
name|previous
argument_list|,
parameter_list|()
lambda|->
literal|"previous of "
operator|+
name|op
argument_list|)
decl_stmt|;
name|t
operator|=
name|call
argument_list|(
name|op
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|previous
argument_list|)
argument_list|)
expr_stmt|;
name|replace
argument_list|(
name|t
argument_list|,
name|previous
operator|.
name|previous
argument_list|,
name|op
operator|.
name|next
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PREFIX
case|:
block|{
name|Token
name|next
init|=
name|requireNonNull
argument_list|(
name|op
operator|.
name|next
argument_list|,
parameter_list|()
lambda|->
literal|"next of "
operator|+
name|op
argument_list|)
decl_stmt|;
name|t
operator|=
name|call
argument_list|(
name|op
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
name|replace
argument_list|(
name|t
argument_list|,
name|op
operator|.
name|previous
argument_list|,
name|next
operator|.
name|next
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INFIX
case|:
block|{
name|Token
name|previous
init|=
name|requireNonNull
argument_list|(
name|op
operator|.
name|previous
argument_list|,
parameter_list|()
lambda|->
literal|"previous of "
operator|+
name|op
argument_list|)
decl_stmt|;
name|Token
name|next
init|=
name|requireNonNull
argument_list|(
name|op
operator|.
name|next
argument_list|,
parameter_list|()
lambda|->
literal|"next of "
operator|+
name|op
argument_list|)
decl_stmt|;
name|t
operator|=
name|call
argument_list|(
name|op
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|previous
argument_list|,
name|next
argument_list|)
argument_list|)
expr_stmt|;
name|replace
argument_list|(
name|t
argument_list|,
name|previous
operator|.
name|previous
argument_list|,
name|next
operator|.
name|next
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SPECIAL
case|:
block|{
name|Result
name|r
init|=
operator|(
operator|(
name|SpecialOp
operator|)
name|op
operator|)
operator|.
name|special
operator|.
name|apply
argument_list|(
name|this
argument_list|,
operator|(
name|SpecialOp
operator|)
name|op
argument_list|)
decl_stmt|;
name|requireNonNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|replace
argument_list|(
name|r
operator|.
name|replacement
argument_list|,
name|r
operator|.
name|first
operator|.
name|previous
argument_list|,
name|r
operator|.
name|last
operator|.
name|next
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
comment|// debug: System.out.println(this);
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Util
operator|.
name|commaList
argument_list|(
name|all
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a list of all tokens. */
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|all
parameter_list|()
block|{
return|return
operator|new
name|TokenList
argument_list|()
return|;
block|}
specifier|private
name|void
name|replace
parameter_list|(
name|Token
name|t
parameter_list|,
annotation|@
name|Nullable
name|Token
name|previous
parameter_list|,
annotation|@
name|Nullable
name|Token
name|next
parameter_list|)
block|{
name|t
operator|.
name|previous
operator|=
name|previous
expr_stmt|;
name|t
operator|.
name|next
operator|=
name|next
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|previous
operator|.
name|next
operator|=
name|t
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|next
operator|.
name|previous
operator|=
name|t
expr_stmt|;
block|}
block|}
specifier|private
annotation|@
name|Nullable
name|Op
name|highest
parameter_list|()
block|{
name|int
name|p
init|=
operator|-
literal|1
decl_stmt|;
name|Op
name|highest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Token
name|t
init|=
name|first
init|;
name|t
operator|!=
literal|null
condition|;
name|t
operator|=
name|t
operator|.
name|next
control|)
block|{
if|if
condition|(
operator|(
name|t
operator|.
name|left
operator|>
name|p
operator|||
name|t
operator|.
name|right
operator|>
name|p
operator|)
operator|&&
operator|(
name|t
operator|.
name|left
operator|<
literal|0
operator|||
name|t
operator|.
name|left
operator|>=
name|prevRight
argument_list|(
name|t
operator|.
name|previous
argument_list|)
operator|)
operator|&&
operator|(
name|t
operator|.
name|right
operator|<
literal|0
operator|||
name|t
operator|.
name|right
operator|>=
name|nextLeft
argument_list|(
name|t
operator|.
name|next
argument_list|)
operator|)
condition|)
block|{
name|p
operator|=
name|Math
operator|.
name|max
argument_list|(
name|t
operator|.
name|left
argument_list|,
name|t
operator|.
name|right
argument_list|)
expr_stmt|;
name|highest
operator|=
operator|(
name|Op
operator|)
name|t
expr_stmt|;
block|}
block|}
return|return
name|highest
return|;
block|}
comment|/** Returns the right precedence of the preceding operator token. */
specifier|private
name|int
name|prevRight
parameter_list|(
annotation|@
name|Nullable
name|Token
name|token
parameter_list|)
block|{
for|for
control|(
init|;
name|token
operator|!=
literal|null
condition|;
name|token
operator|=
name|token
operator|.
name|previous
control|)
block|{
if|if
condition|(
name|token
operator|.
name|type
operator|==
name|Type
operator|.
name|POSTFIX
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
if|if
condition|(
name|token
operator|.
name|right
operator|>=
literal|0
condition|)
block|{
return|return
name|token
operator|.
name|right
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/** Returns the left precedence of the following operator token. */
specifier|private
name|int
name|nextLeft
parameter_list|(
annotation|@
name|Nullable
name|Token
name|token
parameter_list|)
block|{
for|for
control|(
init|;
name|token
operator|!=
literal|null
condition|;
name|token
operator|=
name|token
operator|.
name|next
control|)
block|{
if|if
condition|(
name|token
operator|.
name|type
operator|==
name|Type
operator|.
name|PREFIX
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
if|if
condition|(
name|token
operator|.
name|left
operator|>=
literal|0
condition|)
block|{
return|return
name|token
operator|.
name|left
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|print
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
return|return
name|token
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|PrecedenceClimbingParser
name|copy
parameter_list|(
name|int
name|start
parameter_list|,
name|Predicate
argument_list|<
name|Token
argument_list|>
name|predicate
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|Util
operator|.
name|skip
argument_list|(
name|all
argument_list|()
argument_list|,
name|start
argument_list|)
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|token
argument_list|)
condition|)
block|{
break|break;
block|}
name|tokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PrecedenceClimbingParser
argument_list|(
name|tokens
argument_list|)
return|;
block|}
comment|/** Token type. */
specifier|public
enum|enum
name|Type
block|{
name|ATOM
block|,
name|CALL
block|,
name|PREFIX
block|,
name|INFIX
block|,
name|POSTFIX
block|,
name|SPECIAL
block|}
comment|/** A token: either an atom, a call to an operator with arguments,    * or an unmatched operator. */
specifier|public
specifier|static
class|class
name|Token
block|{
annotation|@
name|Nullable
name|Token
name|previous
decl_stmt|;
annotation|@
name|Nullable
name|Token
name|next
decl_stmt|;
specifier|public
specifier|final
name|Type
name|type
decl_stmt|;
specifier|public
specifier|final
annotation|@
name|Nullable
name|Object
name|o
decl_stmt|;
specifier|final
name|int
name|left
decl_stmt|;
specifier|final
name|int
name|right
decl_stmt|;
name|Token
parameter_list|(
name|Type
name|type
parameter_list|,
annotation|@
name|Nullable
name|Object
name|o
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|o
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
comment|/**      * Returns {@code o}.      * @return o      */
specifier|public
annotation|@
name|Nullable
name|Object
name|o
parameter_list|()
block|{
return|return
name|o
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|protected
name|StringBuilder
name|print
parameter_list|(
name|StringBuilder
name|b
parameter_list|)
block|{
return|return
name|b
operator|.
name|append
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Token
name|copy
parameter_list|()
block|{
return|return
operator|new
name|Token
argument_list|(
name|type
argument_list|,
name|o
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
block|}
comment|/** An operator token. */
specifier|public
specifier|static
class|class
name|Op
extends|extends
name|Token
block|{
name|Op
parameter_list|(
name|Type
name|type
parameter_list|,
name|Object
name|o
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|o
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|o
parameter_list|()
block|{
return|return
name|castNonNull
argument_list|(
name|super
operator|.
name|o
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Token
name|copy
parameter_list|()
block|{
return|return
operator|new
name|Op
argument_list|(
name|type
argument_list|,
name|o
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
block|}
comment|/** An token corresponding to a special operator. */
specifier|public
specifier|static
class|class
name|SpecialOp
extends|extends
name|Op
block|{
specifier|public
specifier|final
name|Special
name|special
decl_stmt|;
name|SpecialOp
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|,
name|Special
name|special
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|SPECIAL
argument_list|,
name|o
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|this
operator|.
name|special
operator|=
name|special
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Token
name|copy
parameter_list|()
block|{
return|return
operator|new
name|SpecialOp
argument_list|(
name|o
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|special
argument_list|)
return|;
block|}
block|}
comment|/** A token that is a call to an operator with arguments. */
specifier|public
specifier|static
class|class
name|Call
extends|extends
name|Token
block|{
specifier|public
specifier|final
name|Op
name|op
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|Token
argument_list|>
name|args
decl_stmt|;
name|Call
parameter_list|(
name|Op
name|op
parameter_list|,
name|ImmutableList
argument_list|<
name|Token
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|CALL
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Token
name|copy
parameter_list|()
block|{
return|return
operator|new
name|Call
argument_list|(
name|op
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|print
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|StringBuilder
name|print
parameter_list|(
name|StringBuilder
name|b
parameter_list|)
block|{
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|PREFIX
case|:
name|b
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|printOp
argument_list|(
name|b
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|print
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
return|;
case|case
name|POSTFIX
case|:
name|b
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|print
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|printOp
argument_list|(
name|b
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
return|;
case|case
name|INFIX
case|:
name|b
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|print
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|printOp
argument_list|(
name|b
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|print
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
return|;
case|case
name|SPECIAL
case|:
name|printOp
argument_list|(
name|b
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Token
argument_list|>
name|arg
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|args
argument_list|)
control|)
block|{
if|if
condition|(
name|arg
operator|.
name|i
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|arg
operator|.
name|e
operator|.
name|print
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
specifier|private
name|StringBuilder
name|printOp
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|boolean
name|leftSpace
parameter_list|,
name|boolean
name|rightSpace
parameter_list|)
block|{
name|String
name|s
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|op
operator|.
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftSpace
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|rightSpace
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
block|}
comment|/** Callback defining the behavior of a special function. */
specifier|public
interface|interface
name|Special
block|{
comment|/** Given an occurrence of this operator, identifies the range of tokens to      * be collapsed into a call of this operator, and the arguments to that      * call. */
name|Result
name|apply
parameter_list|(
name|PrecedenceClimbingParser
name|parser
parameter_list|,
name|SpecialOp
name|op
parameter_list|)
function_decl|;
block|}
comment|/** Result of a call to {@link Special#apply}. */
specifier|public
specifier|static
class|class
name|Result
block|{
specifier|final
name|Token
name|first
decl_stmt|;
specifier|final
name|Token
name|last
decl_stmt|;
specifier|final
name|Token
name|replacement
decl_stmt|;
specifier|public
name|Result
parameter_list|(
name|Token
name|first
parameter_list|,
name|Token
name|last
parameter_list|,
name|Token
name|replacement
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|last
operator|=
name|last
expr_stmt|;
name|this
operator|.
name|replacement
operator|=
name|replacement
expr_stmt|;
block|}
block|}
comment|/** Fluent helper to build a parser containing a list of tokens. */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|final
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PrecedenceClimbingParser
name|dummy
init|=
operator|new
name|PrecedenceClimbingParser
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Builder
name|add
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|atom
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|dummy
operator|.
name|atom
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|call
parameter_list|(
name|Op
name|op
parameter_list|,
name|Token
name|arg0
parameter_list|,
name|Token
name|arg1
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|dummy
operator|.
name|call
argument_list|(
name|op
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|infix
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|precedence
parameter_list|,
name|boolean
name|left
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|dummy
operator|.
name|infix
argument_list|(
name|o
argument_list|,
name|precedence
argument_list|,
name|left
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|prefix
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|precedence
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|dummy
operator|.
name|prefix
argument_list|(
name|o
argument_list|,
name|precedence
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|postfix
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|precedence
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|dummy
operator|.
name|postfix
argument_list|(
name|o
argument_list|,
name|precedence
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|special
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|,
name|Special
name|special
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|dummy
operator|.
name|special
argument_list|(
name|o
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|,
name|special
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|PrecedenceClimbingParser
name|build
parameter_list|()
block|{
return|return
operator|new
name|PrecedenceClimbingParser
argument_list|(
name|tokens
argument_list|)
return|;
block|}
block|}
comment|/** List view onto the tokens in a parser. The view is semi-mutable; it    * supports {@link List#remove(int)} but not {@link List#set} or    * {@link List#add}. */
specifier|private
class|class
name|TokenList
extends|extends
name|AbstractList
argument_list|<
name|Token
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Token
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
for|for
control|(
name|Token
name|t
init|=
name|first
init|;
name|t
operator|!=
literal|null
condition|;
name|t
operator|=
name|t
operator|.
name|next
control|)
block|{
if|if
condition|(
name|index
operator|--
operator|==
literal|0
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Token
name|t
init|=
name|first
init|;
name|t
operator|!=
literal|null
condition|;
name|t
operator|=
name|t
operator|.
name|next
control|)
block|{
operator|++
name|n
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
name|Token
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|previous
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|t
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|previous
operator|.
name|next
operator|=
name|t
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|t
operator|.
name|previous
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|next
operator|.
name|previous
operator|=
name|t
operator|.
name|previous
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
annotation|@
name|Override
specifier|public
name|Token
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|Token
name|element
parameter_list|)
block|{
specifier|final
name|Token
name|t
init|=
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|element
operator|.
name|previous
operator|=
name|t
operator|.
name|previous
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|previous
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|element
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|previous
operator|.
name|next
operator|=
name|element
expr_stmt|;
block|}
name|element
operator|.
name|next
operator|=
name|t
operator|.
name|next
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|element
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|next
operator|.
name|previous
operator|=
name|element
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
block|}
block|}
end_class

end_unit

