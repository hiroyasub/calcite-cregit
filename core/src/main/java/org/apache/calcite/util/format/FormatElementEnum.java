begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|format
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link FormatElement} containing the standard format  * elements. These are based on Oracle's format model documentation.  *  *<p>See  *<a href="https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlqr/Format-Models.html">  * Oracle format model reference.</a>  *  * @see FormatModels#DEFAULT  */
end_comment

begin_enum
specifier|public
enum|enum
name|FormatElementEnum
implements|implements
name|FormatElement
block|{
name|D
argument_list|(
literal|"The weekday (Monday as the first day of the week) as a decimal number (1-7)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
name|DAY
argument_list|(
literal|"The full weekday name"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|eeeeFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|DD
argument_list|(
literal|"The day of the month as a decimal number (01-31)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%02d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
name|DDD
argument_list|(
literal|"The day of the year as a decimal number (001-366)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%03d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
name|DY
argument_list|(
literal|"The abbreviated weekday name"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|eeeFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|FF1
argument_list|(
literal|"Fractional seconds to 1 digit"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|sFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|FF2
argument_list|(
literal|"Fractional seconds to 2 digits"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|ssFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|FF3
argument_list|(
literal|"Fractional seconds to 3 digits"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|sssFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|FF4
argument_list|(
literal|"Fractional seconds to 4 digits"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|ssssFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|FF5
argument_list|(
literal|"Fractional seconds to 5 digits"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|sssssFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|FF6
argument_list|(
literal|"Fractional seconds to 6 digits"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|ssssssFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|HH24
argument_list|(
literal|"The hour (24-hour clock) as a decimal number (00-23)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%02d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
name|IW
argument_list|(
literal|"The ISO 8601 week number of the year (Monday as the first day of the week) "
operator|+
literal|"as a decimal number (01-53)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
comment|// TODO: ensure this is isoweek
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|setFirstDayOfWeek
argument_list|(
name|Calendar
operator|.
name|MONDAY
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%02d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
name|MI
argument_list|(
literal|"The minute as a decimal number (00-59)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%02d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
name|MM
argument_list|(
literal|"The month as a decimal number (01-12)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%02d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|,
name|MON
argument_list|(
literal|"The abbreviated month name"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|mmmFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|MONTH
argument_list|(
literal|"The full month name (English)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|mmmmFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|Q
argument_list|(
literal|"The quarter as a decimal number (1-4)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d"
argument_list|,
operator|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|/
literal|3
operator|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|,
name|SS
argument_list|(
literal|"The second as a decimal number (00-60)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%02d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
name|TZR
argument_list|(
literal|"The time zone name"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
comment|// TODO: how to support timezones?
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|,
name|WW
argument_list|(
literal|"The week number of the year (Sunday as the first day of the week) as a decimal "
operator|+
literal|"number (00-53)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|setFirstDayOfWeek
argument_list|(
name|Calendar
operator|.
name|SUNDAY
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%02d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
name|YY
argument_list|(
literal|"Last 2 digits of year"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Work
name|work
init|=
name|Work
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|work
operator|.
name|yyFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
block|,
name|YYYY
argument_list|(
literal|"The year with century as a decimal number"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|Work
operator|.
name|get
argument_list|()
operator|.
name|calendar
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
return|;
block|}
block|}
block|;
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
comment|// TODO: be sure to deal with TZ
name|FormatElementEnum
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
comment|/** Work space. Provides a value for each mutable data structure that might    * be needed by a format element. Ensures thread-safety. */
specifier|static
class|class
name|Work
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
annotation|@
name|Nullable
name|Work
argument_list|>
name|THREAD_WORK
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|Work
operator|::
operator|new
argument_list|)
decl_stmt|;
comment|/** Returns an instance of Work for this thread. */
specifier|static
name|Work
name|get
parameter_list|()
block|{
return|return
name|castNonNull
argument_list|(
name|THREAD_WORK
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|DateTimeUtils
operator|.
name|DEFAULT_ZONE
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|eeeeFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEEE"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|eeeFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|mmmFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|mmmmFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMMM"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|sFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"S"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|ssFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"SS"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|sssFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"SSS"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|ssssFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"SSSS"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|sssssFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"SSSSS"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|ssssssFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"SSSSSS"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|yyFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yy"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
block|}
block|}
end_enum

end_unit

