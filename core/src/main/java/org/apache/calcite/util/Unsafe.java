begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Contains methods that call JDK methods that the  *<a href="https://github.com/policeman-tools/forbidden-apis">forbidden  * APIs checker</a> does not approve of.  *  *<p>This class is excluded from the check, so methods called via this class  * will not fail the build.  */
end_comment

begin_class
specifier|public
class|class
name|Unsafe
block|{
specifier|private
name|Unsafe
parameter_list|()
block|{
block|}
comment|/** Calls {@link System#exit}. */
specifier|public
specifier|static
name|void
name|systemExit
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|/** Calls {@link Object#notifyAll()}. */
specifier|public
specifier|static
name|void
name|notifyAll
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|o
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|/** Calls {@link Object#wait()}. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"WaitNotInLoop"
argument_list|)
specifier|public
specifier|static
name|void
name|wait
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|o
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
comment|/** Clears the contents of a {@link StringWriter}. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
specifier|public
specifier|static
name|void
name|clear
parameter_list|(
name|StringWriter
name|sw
parameter_list|)
block|{
comment|// Included in this class because StringBuffer is banned.
name|sw
operator|.
name|getBuffer
argument_list|()
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** Helper for the SQL {@code REGEXP_REPLACE} function.    *    *<p>It is marked "unsafe" because it uses {@link StringBuffer};    * Versions of {@link Matcher#appendReplacement(StringBuffer, String)}    * and {@link Matcher#appendTail(StringBuffer)}    * that use {@link StringBuilder} are not available until JDK 9. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
specifier|public
specifier|static
name|String
name|regexpReplace
parameter_list|(
name|String
name|s
parameter_list|,
name|Pattern
name|pattern
parameter_list|,
name|String
name|replacement
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|occurrence
parameter_list|)
block|{
name|Bug
operator|.
name|upgrade
argument_list|(
literal|"when we drop JDK 8, replace StringBuffer with StringBuilder"
argument_list|)
expr_stmt|;
specifier|final
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|final
name|String
name|input
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|pos
operator|-
literal|1
argument_list|)
expr_stmt|;
name|input
operator|=
name|s
operator|.
name|substring
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|=
name|s
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|occurrence
operator|==
literal|0
condition|)
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|++
name|count
operator|==
name|occurrence
condition|)
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|matcher
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

