begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|CaseInsensitiveComparator
operator|.
name|COMPARATOR
import|;
end_import

begin_comment
comment|/** Map whose keys are names and can be accessed with and without case  * sensitivity.  *  * @param<V> Value type */
end_comment

begin_class
specifier|public
class|class
name|NameMap
parameter_list|<
name|V
parameter_list|>
block|{
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
comment|/** Creates a NameSet based on an existing set. */
specifier|private
name|NameMap
parameter_list|(
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
assert|assert
name|this
operator|.
name|map
operator|.
name|comparator
argument_list|()
operator|==
name|COMPARATOR
assert|;
block|}
comment|/** Creates a NameMap, initially empty. */
specifier|public
name|NameMap
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
argument_list|(
name|COMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|map
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|map
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|instanceof
name|NameMap
operator|&&
name|map
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|NameMap
operator|)
name|obj
operator|)
operator|.
name|map
argument_list|)
return|;
block|}
comment|/** Creates a NameMap that is an immutable copy of a given map. */
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|NameMap
name|immutableCopyOf
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|names
parameter_list|)
block|{
return|return
operator|new
name|NameMap
argument_list|<>
argument_list|(
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|names
argument_list|,
name|COMPARATOR
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|String
name|name
parameter_list|,
name|V
name|v
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a map containing all the entries in the map that match the given    * name. If case-sensitive, that map will have 0 or 1 elements; if    * case-insensitive, it may have 0 or more. */
specifier|public
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|range
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|Object
name|floorKey
decl_stmt|;
name|Object
name|ceilingKey
decl_stmt|;
if|if
condition|(
name|caseSensitive
condition|)
block|{
name|floorKey
operator|=
name|name
expr_stmt|;
name|ceilingKey
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
name|floorKey
operator|=
name|COMPARATOR
operator|.
name|floorKey
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ceilingKey
operator|=
name|COMPARATOR
operator|.
name|ceilingKey
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|NavigableMap
name|subMap
init|=
operator|(
operator|(
name|NavigableMap
operator|)
name|map
operator|)
operator|.
name|subMap
argument_list|(
name|floorKey
argument_list|,
literal|true
argument_list|,
name|ceilingKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableNavigableMap
argument_list|(
operator|(
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
operator|)
name|subMap
argument_list|)
return|;
block|}
comment|/** Returns whether this map contains a given key, with a given    * case-sensitivity. */
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
return|return
operator|!
name|range
argument_list|(
name|name
argument_list|,
name|caseSensitive
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/** Returns the underlying map. */
specifier|public
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|map
return|;
block|}
annotation|@
name|Experimental
specifier|public
name|V
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End NameMap.java
end_comment

end_unit

