begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Directed graph.  *  * @param<V> Vertex type  * @param<E> Edge type  */
end_comment

begin_interface
specifier|public
interface|interface
name|DirectedGraph
parameter_list|<
name|V
parameter_list|,
name|E
parameter_list|>
block|{
comment|/** Adds a vertex to this graph.    *    * @param vertex Vertex    * @return Whether vertex was added    */
name|boolean
name|addVertex
parameter_list|(
name|V
name|vertex
parameter_list|)
function_decl|;
comment|/** Adds an edge to this graph.    *    * @param vertex Source vertex    * @param targetVertex Target vertex    * @return New edge, if added, otherwise null    * @throws IllegalArgumentException if either vertex is not already in graph    */
name|E
name|addEdge
parameter_list|(
name|V
name|vertex
parameter_list|,
name|V
name|targetVertex
parameter_list|)
function_decl|;
name|E
name|getEdge
parameter_list|(
name|V
name|source
parameter_list|,
name|V
name|target
parameter_list|)
function_decl|;
name|boolean
name|removeEdge
parameter_list|(
name|V
name|vertex
parameter_list|,
name|V
name|targetVertex
parameter_list|)
function_decl|;
name|Set
argument_list|<
name|V
argument_list|>
name|vertexSet
parameter_list|()
function_decl|;
name|void
name|removeAllVertices
parameter_list|(
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
parameter_list|)
function_decl|;
name|List
argument_list|<
name|E
argument_list|>
name|getOutwardEdges
parameter_list|(
name|V
name|source
parameter_list|)
function_decl|;
name|List
argument_list|<
name|E
argument_list|>
name|getInwardEdges
parameter_list|(
name|V
name|vertex
parameter_list|)
function_decl|;
name|Set
argument_list|<
name|E
argument_list|>
name|edgeSet
parameter_list|()
function_decl|;
comment|/** Factory for edges.    *    * @param<V> Vertex type    * @param<E> Edge type    */
interface|interface
name|EdgeFactory
parameter_list|<
name|V
parameter_list|,
name|E
parameter_list|>
block|{
name|E
name|createEdge
parameter_list|(
name|V
name|v0
parameter_list|,
name|V
name|v1
parameter_list|)
function_decl|;
block|}
block|}
end_interface

begin_comment
comment|// End DirectedGraph.java
end_comment

end_unit

