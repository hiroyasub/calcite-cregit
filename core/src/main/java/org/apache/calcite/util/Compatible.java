begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Compatibility layer.  *  *<p>Allows to use advanced functionality if the latest JDK or Guava version  * is present.</p>  */
end_comment

begin_interface
specifier|public
interface|interface
name|Compatible
block|{
name|Compatible
name|INSTANCE
init|=
operator|new
name|Factory
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/** Same as Guava {@code Maps.asMap(set, function)}. */
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|asMap
parameter_list|(
name|Set
argument_list|<
name|K
argument_list|>
name|set
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|K
argument_list|,
name|V
argument_list|>
name|function
parameter_list|)
function_decl|;
comment|/** Converts a {@link com.google.common.collect.ImmutableSortedSet} to a    * {@link java.util.NavigableSet}. */
parameter_list|<
name|E
parameter_list|>
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|navigableSet
parameter_list|(
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|set
parameter_list|)
function_decl|;
comment|/** Converts a {@link com.google.common.collect.ImmutableSortedMap} to a    * {@link java.util.NavigableMap}. */
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|navigableMap
parameter_list|(
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
function_decl|;
comment|/** Converts a {@link Map} to a {@link java.util.NavigableMap} that is    * immutable. */
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|immutableNavigableMap
parameter_list|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
function_decl|;
comment|/** Creates the implementation of Compatible suitable for the    * current environment. */
class|class
name|Factory
block|{
name|Compatible
name|create
parameter_list|()
block|{
return|return
operator|(
name|Compatible
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|Compatible
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Compatible
operator|.
name|class
block|}
argument_list|,
operator|new
name|InvocationHandler
argument_list|()
block|{
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"asMap"
argument_list|)
condition|)
block|{
comment|// Use the Guava implementation Maps.asMap if it is available
try|try
block|{
specifier|final
name|Method
name|guavaMethod
init|=
name|Maps
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|guavaMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|Set
name|set
init|=
operator|(
name|Set
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|Function
name|function
init|=
operator|(
name|Function
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
return|return
name|CompatibleGuava11
operator|.
name|asMap
argument_list|(
name|set
argument_list|,
name|function
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"navigableSet"
argument_list|)
condition|)
block|{
name|ImmutableSortedSet
name|set
init|=
operator|(
name|ImmutableSortedSet
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
return|return
name|CompatibleGuava11
operator|.
name|navigableSet
argument_list|(
name|set
argument_list|)
return|;
block|}
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"navigableMap"
argument_list|)
condition|)
block|{
name|ImmutableSortedMap
name|map
init|=
operator|(
name|ImmutableSortedMap
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
return|return
name|CompatibleGuava11
operator|.
name|navigableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"immutableNavigableMap"
argument_list|)
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|ImmutableSortedMap
name|sortedMap
init|=
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
decl_stmt|;
return|return
name|CompatibleGuava11
operator|.
name|navigableMap
argument_list|(
name|sortedMap
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
block|}
end_interface

begin_comment
comment|// End Compatible.java
end_comment

end_unit

