begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_comment
comment|/** Compatibility layer.  *  *<p>Allows to use advanced functionality if the latest JDK or Guava version  * is present.  */
end_comment

begin_interface
specifier|public
interface|interface
name|Compatible
block|{
name|Compatible
name|INSTANCE
init|=
operator|new
name|Factory
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/** Same as {@code MethodHandles#privateLookupIn()}.    * (On JDK 8, only {@link MethodHandles#lookup()} is available. */
parameter_list|<
name|T
parameter_list|>
name|MethodHandles
operator|.
name|Lookup
name|lookupPrivate
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
function_decl|;
comment|/** Creates the implementation of Compatible suitable for the    * current environment. */
class|class
name|Factory
block|{
name|Compatible
name|create
parameter_list|()
block|{
return|return
operator|(
name|Compatible
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|Compatible
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Compatible
operator|.
name|class
block|}
argument_list|,
parameter_list|(
name|proxy
parameter_list|,
name|method
parameter_list|,
name|args
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"lookupPrivate"
argument_list|)
condition|)
block|{
comment|// Use MethodHandles.privateLookupIn if it is available (JDK 9
comment|// and above)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
operator|(
name|Class
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
specifier|final
name|Method
name|privateLookupMethod
init|=
name|MethodHandles
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"privateLookupIn"
argument_list|,
name|Class
operator|.
name|class
argument_list|,
name|MethodHandles
operator|.
name|Lookup
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MethodHandles
operator|.
name|Lookup
name|lookup
init|=
name|MethodHandles
operator|.
name|lookup
argument_list|()
decl_stmt|;
return|return
name|privateLookupMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|clazz
argument_list|,
name|lookup
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
name|privateLookupJdk8
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
comment|/** Emulates MethodHandles.privateLookupIn on JDK 8;      * in later JDK versions, throws. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|MethodHandles
operator|.
name|Lookup
name|privateLookupJdk8
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Constructor
argument_list|<
name|MethodHandles
operator|.
name|Lookup
argument_list|>
name|constructor
init|=
name|MethodHandles
operator|.
name|Lookup
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|(
name|Class
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|constructor
operator|.
name|isAccessible
argument_list|()
condition|)
block|{
name|constructor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|MethodHandles
operator|.
name|Lookup
operator|.
name|PRIVATE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
decl||
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_interface

end_unit

