begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Deterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Strict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|Line
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|MapGeometry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|OperatorFactoryLocal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|OperatorIntersects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|Polyline
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|SpatialReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Utilities for geometry.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"UnnecessaryUnboxing"
block|,
literal|"WeakerAccess"
block|,
literal|"unused"
block|}
argument_list|)
annotation|@
name|Deterministic
annotation|@
name|Strict
annotation|@
name|Experimental
specifier|public
class|class
name|Geometries
block|{
specifier|static
specifier|final
name|int
name|NO_SRID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SpatialReference
name|SPATIAL_REFERENCE
init|=
name|SpatialReference
operator|.
name|create
argument_list|(
literal|4326
argument_list|)
decl_stmt|;
specifier|private
name|Geometries
parameter_list|()
block|{
block|}
specifier|static
name|UnsupportedOperationException
name|todo
parameter_list|()
block|{
return|return
operator|new
name|UnsupportedOperationException
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|Geom
name|bind
parameter_list|(
name|Geometry
name|geometry
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
if|if
condition|(
name|geometry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|srid
operator|==
name|NO_SRID
condition|)
block|{
return|return
operator|new
name|SimpleGeom
argument_list|(
name|geometry
argument_list|)
return|;
block|}
return|return
name|bind
argument_list|(
name|geometry
argument_list|,
name|SpatialReference
operator|.
name|create
argument_list|(
name|srid
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|MapGeom
name|bind
parameter_list|(
name|Geometry
name|geometry
parameter_list|,
name|SpatialReference
name|sr
parameter_list|)
block|{
return|return
operator|new
name|MapGeom
argument_list|(
operator|new
name|MapGeometry
argument_list|(
name|geometry
argument_list|,
name|sr
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|Geom
name|makeLine
parameter_list|(
name|Geom
modifier|...
name|geoms
parameter_list|)
block|{
return|return
name|makeLine
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|geoms
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Geom
name|makeLine
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Geom
argument_list|>
name|geoms
parameter_list|)
block|{
specifier|final
name|Polyline
name|g
init|=
operator|new
name|Polyline
argument_list|()
decl_stmt|;
name|Point
name|p
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Geom
name|geom
range|:
name|geoms
control|)
block|{
if|if
condition|(
name|geom
operator|.
name|g
argument_list|()
operator|instanceof
name|Point
condition|)
block|{
specifier|final
name|Point
name|prev
init|=
name|p
decl_stmt|;
name|p
operator|=
operator|(
name|Point
operator|)
name|geom
operator|.
name|g
argument_list|()
expr_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Line
name|line
init|=
operator|new
name|Line
argument_list|()
decl_stmt|;
name|line
operator|.
name|setStart
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|line
operator|.
name|setEnd
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|g
operator|.
name|addSegment
argument_list|(
name|line
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|SimpleGeom
argument_list|(
name|g
argument_list|)
return|;
block|}
specifier|static
name|Geom
name|point
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
operator|new
name|Point
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
return|return
operator|new
name|SimpleGeom
argument_list|(
name|g
argument_list|)
return|;
block|}
comment|/** Returns the OGC type of a geometry. */
specifier|public
specifier|static
name|Type
name|type
parameter_list|(
name|Geometry
name|g
parameter_list|)
block|{
switch|switch
condition|(
name|g
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Point
case|:
return|return
name|Type
operator|.
name|POINT
return|;
case|case
name|Polyline
case|:
return|return
name|Type
operator|.
name|LINESTRING
return|;
case|case
name|Polygon
case|:
return|return
name|Type
operator|.
name|POLYGON
return|;
case|case
name|MultiPoint
case|:
return|return
name|Type
operator|.
name|MULTIPOINT
return|;
case|case
name|Envelope
case|:
return|return
name|Type
operator|.
name|POLYGON
return|;
case|case
name|Line
case|:
return|return
name|Type
operator|.
name|LINESTRING
return|;
case|case
name|Unknown
case|:
return|return
name|Type
operator|.
name|Geometry
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|g
argument_list|)
throw|;
block|}
block|}
specifier|static
name|Envelope
name|envelope
parameter_list|(
name|Geometry
name|g
parameter_list|)
block|{
specifier|final
name|Envelope
name|env
init|=
operator|new
name|Envelope
argument_list|()
decl_stmt|;
name|g
operator|.
name|queryEnvelope
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
name|env
return|;
block|}
specifier|static
name|boolean
name|intersects
parameter_list|(
name|Geometry
name|g1
parameter_list|,
name|Geometry
name|g2
parameter_list|,
name|SpatialReference
name|sr
parameter_list|)
block|{
specifier|final
name|OperatorIntersects
name|op
init|=
operator|(
name|OperatorIntersects
operator|)
name|OperatorFactoryLocal
operator|.
name|getInstance
argument_list|()
operator|.
name|getOperator
argument_list|(
name|Operator
operator|.
name|Type
operator|.
name|Intersects
argument_list|)
decl_stmt|;
return|return
name|op
operator|.
name|execute
argument_list|(
name|g1
argument_list|,
name|g2
argument_list|,
name|sr
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|static
name|Geom
name|buffer
parameter_list|(
name|Geom
name|geom
parameter_list|,
name|double
name|bufferSize
parameter_list|,
name|int
name|quadSegCount
parameter_list|,
name|CapStyle
name|endCapStyle
parameter_list|,
name|JoinStyle
name|joinStyle
parameter_list|,
name|float
name|mitreLimit
parameter_list|)
block|{
name|Util
operator|.
name|discard
argument_list|(
name|endCapStyle
operator|+
literal|":"
operator|+
name|joinStyle
operator|+
literal|":"
operator|+
name|mitreLimit
operator|+
literal|":"
operator|+
name|quadSegCount
argument_list|)
expr_stmt|;
throw|throw
name|todo
argument_list|()
throw|;
block|}
comment|/** How the "buffer" command terminates the end of a line. */
enum|enum
name|CapStyle
block|{
name|ROUND
block|,
name|FLAT
block|,
name|SQUARE
block|;
specifier|static
name|CapStyle
name|of
parameter_list|(
name|String
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|"round"
case|:
return|return
name|ROUND
return|;
case|case
literal|"flat"
case|:
case|case
literal|"butt"
case|:
return|return
name|FLAT
return|;
case|case
literal|"square"
case|:
return|return
name|SQUARE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown endcap value: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** How the "buffer" command decorates junctions between line segments. */
enum|enum
name|JoinStyle
block|{
name|ROUND
block|,
name|MITRE
block|,
name|BEVEL
block|;
specifier|static
name|JoinStyle
name|of
parameter_list|(
name|String
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|"round"
case|:
return|return
name|ROUND
return|;
case|case
literal|"mitre"
case|:
case|case
literal|"miter"
case|:
return|return
name|MITRE
return|;
case|case
literal|"bevel"
case|:
return|return
name|BEVEL
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown join value: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Geometry types, with the names and codes assigned by OGC. */
specifier|public
enum|enum
name|Type
block|{
name|Geometry
argument_list|(
literal|0
argument_list|)
block|,
name|POINT
argument_list|(
literal|1
argument_list|)
block|,
name|LINESTRING
argument_list|(
literal|2
argument_list|)
block|,
name|POLYGON
argument_list|(
literal|3
argument_list|)
block|,
name|MULTIPOINT
argument_list|(
literal|4
argument_list|)
block|,
name|MULTILINESTRING
argument_list|(
literal|5
argument_list|)
block|,
name|MULTIPOLYGON
argument_list|(
literal|6
argument_list|)
block|,
name|GEOMCOLLECTION
argument_list|(
literal|7
argument_list|)
block|,
name|CURVE
argument_list|(
literal|13
argument_list|)
block|,
name|SURFACE
argument_list|(
literal|14
argument_list|)
block|,
name|POLYHEDRALSURFACE
argument_list|(
literal|15
argument_list|)
block|;
specifier|final
name|int
name|code
decl_stmt|;
name|Type
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
block|}
block|}
comment|/** Geometry. It may or may not have a spatial reference    * associated with it. */
specifier|public
interface|interface
name|Geom
extends|extends
name|Comparable
argument_list|<
name|Geom
argument_list|>
block|{
name|Geometry
name|g
parameter_list|()
function_decl|;
name|Type
name|type
parameter_list|()
function_decl|;
name|SpatialReference
name|sr
parameter_list|()
function_decl|;
name|Geom
name|transform
parameter_list|(
name|int
name|srid
parameter_list|)
function_decl|;
name|Geom
name|wrap
parameter_list|(
name|Geometry
name|g
parameter_list|)
function_decl|;
block|}
comment|/** Sub-class of geometry that has no spatial reference. */
specifier|static
class|class
name|SimpleGeom
implements|implements
name|Geom
block|{
specifier|final
name|Geometry
name|g
decl_stmt|;
name|SimpleGeom
parameter_list|(
name|Geometry
name|g
parameter_list|)
block|{
name|this
operator|.
name|g
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|g
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Geom
name|o
parameter_list|)
block|{
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Geometry
name|g
parameter_list|()
block|{
return|return
name|g
return|;
block|}
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|Geometries
operator|.
name|type
argument_list|(
name|g
argument_list|)
return|;
block|}
specifier|public
name|SpatialReference
name|sr
parameter_list|()
block|{
return|return
name|SPATIAL_REFERENCE
return|;
block|}
specifier|public
name|Geom
name|transform
parameter_list|(
name|int
name|srid
parameter_list|)
block|{
if|if
condition|(
name|srid
operator|==
name|SPATIAL_REFERENCE
operator|.
name|getID
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|bind
argument_list|(
name|g
argument_list|,
name|srid
argument_list|)
return|;
block|}
specifier|public
name|Geom
name|wrap
parameter_list|(
name|Geometry
name|g
parameter_list|)
block|{
return|return
operator|new
name|SimpleGeom
argument_list|(
name|g
argument_list|)
return|;
block|}
block|}
comment|/** Sub-class of geometry that has a spatial reference. */
specifier|static
class|class
name|MapGeom
implements|implements
name|Geom
block|{
specifier|final
name|MapGeometry
name|mg
decl_stmt|;
name|MapGeom
parameter_list|(
name|MapGeometry
name|mg
parameter_list|)
block|{
name|this
operator|.
name|mg
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|mg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|mg
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Geom
name|o
parameter_list|)
block|{
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Geometry
name|g
parameter_list|()
block|{
return|return
name|mg
operator|.
name|getGeometry
argument_list|()
return|;
block|}
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|Geometries
operator|.
name|type
argument_list|(
name|mg
operator|.
name|getGeometry
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|SpatialReference
name|sr
parameter_list|()
block|{
return|return
name|mg
operator|.
name|getSpatialReference
argument_list|()
return|;
block|}
specifier|public
name|Geom
name|transform
parameter_list|(
name|int
name|srid
parameter_list|)
block|{
if|if
condition|(
name|srid
operator|==
name|NO_SRID
condition|)
block|{
return|return
operator|new
name|SimpleGeom
argument_list|(
name|mg
operator|.
name|getGeometry
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|srid
operator|==
name|mg
operator|.
name|getSpatialReference
argument_list|()
operator|.
name|getID
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|bind
argument_list|(
name|mg
operator|.
name|getGeometry
argument_list|()
argument_list|,
name|srid
argument_list|)
return|;
block|}
specifier|public
name|Geom
name|wrap
parameter_list|(
name|Geometry
name|g
parameter_list|)
block|{
return|return
name|bind
argument_list|(
name|g
argument_list|,
name|this
operator|.
name|mg
operator|.
name|getSpatialReference
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

