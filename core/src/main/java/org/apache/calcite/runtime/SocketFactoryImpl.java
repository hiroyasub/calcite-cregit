begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_comment
comment|/**  * Extends the SocketFactory object with the main functionality being that the  * created sockets inherit a set of options whose values are set in the  * SocketFactoryImpl.  *  *<pre>  * 1.  SO_KEEPALIVE          - is keepalive enabled?  * 2.  OOBINLINE             - is out of band in-line enabled?  * 3.  SO_REUSEADDR          - should the address be reused?  * 4.  TCP_NODELAY           - should data buffering for tcp be used?  * 5.  SO_RCVBUF             - size of receive buffer  * 6.  SO_SNDBUF             - size of send buffer  * 7.  SO_TIMEOUT            - read timeout (millisecs)  * 8.  SO_CONNECT_TIMEOUT    - connect timeout (millisecs)  * 9.  SO_LINGER             - is lingering enabled?  * 10. LINGER                - amount of time to linger (seconds)  *  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|SocketFactoryImpl
extends|extends
name|SocketFactory
block|{
comment|/**    * should keep alives be sent    */
specifier|public
specifier|static
specifier|final
name|boolean
name|SO_KEEPALIVE
init|=
literal|false
decl_stmt|;
comment|/**    * is out of band in-line enabled    */
specifier|public
specifier|static
specifier|final
name|boolean
name|OOBINLINE
init|=
literal|false
decl_stmt|;
comment|/**    * should the address be reused    */
specifier|public
specifier|static
specifier|final
name|boolean
name|SO_REUSEADDR
init|=
literal|false
decl_stmt|;
comment|/**    * do not buffer send(s) iff true    */
specifier|public
specifier|static
specifier|final
name|boolean
name|TCP_NODELAY
init|=
literal|true
decl_stmt|;
comment|/**    * size of receiving buffer    */
specifier|public
specifier|static
specifier|final
name|int
name|SO_RCVBUF
init|=
literal|8192
decl_stmt|;
comment|/**    * size of sending buffer iff needed    */
specifier|public
specifier|static
specifier|final
name|int
name|SO_SNDBUF
init|=
literal|1024
decl_stmt|;
comment|/**    * read timeout in milliseconds    */
specifier|public
specifier|static
specifier|final
name|int
name|SO_TIMEOUT
init|=
literal|12000
decl_stmt|;
comment|/**    * connect timeout in milliseconds    */
specifier|public
specifier|static
specifier|final
name|int
name|SO_CONNECT_TIMEOUT
init|=
literal|5000
decl_stmt|;
comment|/**    * enabling lingering with 0-timeout will cause the socket to be    * closed forcefully upon execution of close()    */
specifier|public
specifier|static
specifier|final
name|boolean
name|SO_LINGER
init|=
literal|true
decl_stmt|;
comment|/**    * amount of time to linger    */
specifier|public
specifier|static
specifier|final
name|int
name|LINGER
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
return|return
name|applySettings
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * Applies the current settings to the given socket.    *    * @param s Socket to apply the settings to    * @return Socket the input socket    */
specifier|protected
name|Socket
name|applySettings
parameter_list|(
name|Socket
name|s
parameter_list|)
block|{
try|try
block|{
name|s
operator|.
name|setKeepAlive
argument_list|(
name|SO_KEEPALIVE
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOOBInline
argument_list|(
name|OOBINLINE
argument_list|)
expr_stmt|;
name|s
operator|.
name|setReuseAddress
argument_list|(
name|SO_REUSEADDR
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTcpNoDelay
argument_list|(
name|TCP_NODELAY
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOOBInline
argument_list|(
name|OOBINLINE
argument_list|)
expr_stmt|;
name|s
operator|.
name|setReceiveBufferSize
argument_list|(
name|SO_RCVBUF
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSendBufferSize
argument_list|(
name|SO_SNDBUF
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
name|SO_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoLinger
argument_list|(
name|SO_LINGER
argument_list|,
name|LINGER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|s
init|=
name|createSocket
argument_list|()
decl_stmt|;
name|s
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|,
name|SO_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|s
init|=
name|createSocket
argument_list|()
decl_stmt|;
name|s
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|,
name|SO_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|local
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|s
init|=
name|createSocket
argument_list|()
decl_stmt|;
name|s
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|local
argument_list|,
name|localPort
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|,
name|SO_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|local
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|s
init|=
name|createSocket
argument_list|()
decl_stmt|;
name|s
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|local
argument_list|,
name|localPort
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|,
name|SO_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**    * @see javax.net.SocketFactory#getDefault()    */
specifier|public
specifier|static
name|SocketFactory
name|getDefault
parameter_list|()
block|{
return|return
operator|new
name|SocketFactoryImpl
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End SocketFactoryImpl.java
end_comment

end_unit

