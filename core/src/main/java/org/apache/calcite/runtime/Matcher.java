begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/** Workspace that matches patterns against an automaton.  *  * @param<E> Type of rows matched by this automaton */
end_comment

begin_class
specifier|public
class|class
name|Matcher
parameter_list|<
name|E
parameter_list|>
block|{
specifier|private
specifier|final
name|Automaton
name|automaton
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|BiPredicate
argument_list|<
name|E
argument_list|,
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|predicates
decl_stmt|;
comment|// The following members are work space. They can be shared among partitions,
comment|// but only one thread can use them at a time. Putting them here saves the
comment|// expense of creating a fresh object each call to "match".
specifier|private
specifier|final
name|ImmutableBitSet
name|emptyStateSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ImmutableBitSet
name|startSet
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rowSymbols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|nextStateBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|/** Creates a Matcher; use {@link #builder}. */
specifier|private
name|Matcher
parameter_list|(
name|Automaton
name|automaton
parameter_list|,
name|ImmutableList
argument_list|<
name|BiPredicate
argument_list|<
name|E
argument_list|,
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|predicates
parameter_list|)
block|{
name|this
operator|.
name|automaton
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
name|this
operator|.
name|predicates
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|startSetBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|startSetBuilder
operator|.
name|set
argument_list|(
name|automaton
operator|.
name|startState
operator|.
name|id
argument_list|)
expr_stmt|;
name|automaton
operator|.
name|epsilonSuccessors
argument_list|(
name|automaton
operator|.
name|startState
operator|.
name|id
argument_list|,
name|startSetBuilder
argument_list|)
expr_stmt|;
name|startSet
operator|=
name|startSetBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Builder
argument_list|<
name|E
argument_list|>
name|builder
parameter_list|(
name|Automaton
name|automaton
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|(
name|automaton
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|match
parameter_list|(
name|E
modifier|...
name|rows
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rows
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|match
parameter_list|(
name|Iterable
argument_list|<
name|E
argument_list|>
name|rows
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|resultMatchBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Consumer
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|resultMatchConsumer
init|=
name|resultMatchBuilder
operator|::
name|add
decl_stmt|;
specifier|final
name|PartitionState
argument_list|<
name|E
argument_list|>
name|partitionState
init|=
name|createPartitionState
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|row
range|:
name|rows
control|)
block|{
name|matchOne
argument_list|(
name|row
argument_list|,
name|partitionState
argument_list|,
name|resultMatchConsumer
argument_list|)
expr_stmt|;
block|}
return|return
name|resultMatchBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|PartitionState
argument_list|<
name|E
argument_list|>
name|createPartitionState
parameter_list|()
block|{
return|return
operator|new
name|PartitionState
argument_list|<>
argument_list|()
return|;
block|}
comment|/** Feeds a single input row into the given partition state,    * and writes the resulting output rows (if any). */
specifier|protected
name|void
name|matchOne
parameter_list|(
name|E
name|row
parameter_list|,
name|PartitionState
argument_list|<
name|E
argument_list|>
name|partitionState
parameter_list|,
name|Consumer
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|resultMatches
parameter_list|)
block|{
comment|// Add this row to the states.
name|partitionState
operator|.
name|bufferedRows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|partitionState
operator|.
name|stateSets
operator|.
name|add
argument_list|(
name|startSet
argument_list|)
expr_stmt|;
comment|// Compute the set of symbols whose predicates that evaluate to true
comment|// for this row.
name|rowSymbols
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|BiPredicate
argument_list|<
name|E
argument_list|,
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|predicate
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|predicates
argument_list|)
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|e
operator|.
name|test
argument_list|(
name|row
argument_list|,
name|partitionState
operator|.
name|bufferedRows
argument_list|)
condition|)
block|{
name|rowSymbols
operator|.
name|add
argument_list|(
name|predicate
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: Should we short-cut if symbols is empty?
comment|// TODO: Merge states with epsilon-successors
comment|// Now process the states of matches, oldest first, and compute the
comment|// successors based on the predicates that are true for the current
comment|// row.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionState
operator|.
name|stateSets
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
specifier|final
name|ImmutableBitSet
name|stateSet
init|=
name|partitionState
operator|.
name|stateSets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|nextStateBuilder
operator|.
name|isEmpty
argument_list|()
assert|;
for|for
control|(
name|int
name|symbol
range|:
name|rowSymbols
control|)
block|{
for|for
control|(
name|int
name|state
range|:
name|stateSet
control|)
block|{
name|automaton
operator|.
name|successors
argument_list|(
name|state
argument_list|,
name|symbol
argument_list|,
name|nextStateBuilder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ImmutableBitSet
name|nextStateSet
init|=
name|nextStateBuilder
operator|.
name|buildAndReset
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextStateSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Don't add the stateSet if it is empty and would be the oldest.
comment|// The first item in stateSets must not be empty.
name|partitionState
operator|.
name|bufferedRows
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partitionState
operator|.
name|stateSets
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partitionState
operator|.
name|stateSets
operator|.
name|set
argument_list|(
name|i
operator|++
argument_list|,
name|emptyStateSet
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|nextStateSet
operator|.
name|get
argument_list|(
name|automaton
operator|.
name|endState
operator|.
name|id
argument_list|)
condition|)
block|{
name|resultMatches
operator|.
name|accept
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|partitionState
operator|.
name|bufferedRows
operator|.
name|subList
argument_list|(
name|i
argument_list|,
name|partitionState
operator|.
name|bufferedRows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Don't add the stateSet if it is empty and would be the oldest.
comment|// The first item in stateSets must not be empty.
name|partitionState
operator|.
name|bufferedRows
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partitionState
operator|.
name|stateSets
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Set state to empty so that it is not considered for any
comment|// further matches, and will be removed when it is the oldest.
name|partitionState
operator|.
name|stateSets
operator|.
name|set
argument_list|(
name|i
operator|++
argument_list|,
name|emptyStateSet
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|partitionState
operator|.
name|stateSets
operator|.
name|set
argument_list|(
name|i
operator|++
argument_list|,
name|nextStateSet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** State for each partition.    *    * @param<E> Row type */
specifier|static
class|class
name|PartitionState
parameter_list|<
name|E
parameter_list|>
block|{
comment|/** Rows that have arrived recently and might yield a match. */
specifier|final
name|CircularArrayList
argument_list|<
name|E
argument_list|>
name|bufferedRows
init|=
operator|new
name|CircularArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** The state of each recent row.      *      *<p>This collection always has the same number of entries as      * {@link #bufferedRows}.      *      *<p>Because this automaton is non-deterministic, a row may be in more      * than more than one state at a time, hence we use a bit set rather than      * an integer.      */
specifier|final
name|CircularArrayList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|stateSets
init|=
operator|new
name|CircularArrayList
argument_list|<>
argument_list|()
decl_stmt|;
block|}
comment|/** Builds a Matcher.    *    * @param<E> Type of rows matched by this automaton */
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|E
parameter_list|>
block|{
specifier|final
name|Automaton
name|automaton
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BiPredicate
argument_list|<
name|E
argument_list|,
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|symbolPredicates
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Builder
parameter_list|(
name|Automaton
name|automaton
parameter_list|)
block|{
name|this
operator|.
name|automaton
operator|=
name|automaton
expr_stmt|;
block|}
comment|/** Associates a predicate with a symbol. */
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|String
name|symbolName
parameter_list|,
name|BiPredicate
argument_list|<
name|E
argument_list|,
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
name|symbolPredicates
operator|.
name|put
argument_list|(
name|symbolName
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Matcher
argument_list|<
name|E
argument_list|>
name|build
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|predicateSymbolsNotInGraph
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|symbolPredicates
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|predicateSymbolsNotInGraph
operator|.
name|removeAll
argument_list|(
name|automaton
operator|.
name|symbolNames
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|predicateSymbolsNotInGraph
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"not all predicate symbols ["
operator|+
name|predicateSymbolsNotInGraph
operator|+
literal|"] are in graph ["
operator|+
name|automaton
operator|.
name|symbolNames
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|BiPredicate
argument_list|<
name|E
argument_list|,
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|symbolName
range|:
name|automaton
operator|.
name|symbolNames
control|)
block|{
comment|// If a symbol does not have a predicate, it defaults to true.
comment|// By convention, "STRT" is used for the start symbol, but it could be
comment|// anything.
name|builder
operator|.
name|add
argument_list|(
name|symbolPredicates
operator|.
name|getOrDefault
argument_list|(
name|symbolName
argument_list|,
parameter_list|(
name|e
parameter_list|,
name|list
parameter_list|)
lambda|->
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Matcher
argument_list|<>
argument_list|(
name|automaton
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Temporary. */
specifier|private
specifier|static
class|class
name|CircularArrayList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|E
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Matcher.java
end_comment

end_unit

