begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Resources
operator|.
name|BaseMessage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Resources
operator|.
name|ExInst
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Resources
operator|.
name|ExInstWithCause
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Resources
operator|.
name|Inst
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Resources
operator|.
name|Property
import|;
end_import

begin_comment
comment|/**  * Compiler-checked resources for the Calcite project.  */
end_comment

begin_interface
specifier|public
interface|interface
name|CalciteResource
block|{
annotation|@
name|BaseMessage
argument_list|(
literal|"line {0,number,#}, column {1,number,#}"
argument_list|)
name|Inst
name|parserContext
parameter_list|(
name|int
name|a0
parameter_list|,
name|int
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal {0} literal {1}: {2}"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalLiteral
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|,
name|String
name|a2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Length of identifier ''{0}'' must be less than or equal to {1,number,#} characters"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|identifierTooLong
parameter_list|(
name|String
name|a0
parameter_list|,
name|int
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"not in format ''{0}''"
argument_list|)
name|Inst
name|badFormat
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"BETWEEN operator has no terminating AND"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|betweenWithoutAnd
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal INTERVAL literal {0}; at {1}"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"SQLSTATE"
argument_list|,
name|value
operator|=
literal|"42000"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalIntervalLiteral
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal expression. Was expecting \"(DATETIME - DATETIME) INTERVALQUALIFIER\""
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalMinusDate
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal overlaps expression. Was expecting expression on the form \"(DATETIME, EXPRESSION) OVERLAPS (DATETIME, EXPRESSION)\""
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalOverlaps
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Non-query expression encountered in illegal context"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalNonQueryExpression
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Query expression encountered in illegal context"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalQueryExpression
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"CURSOR expression encountered in illegal context"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalCursorExpression
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"ORDER BY unexpected"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalOrderBy
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal binary string {0}"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalBinaryString
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"''FROM'' without operands preceding it is illegal"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalFromEmpty
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"ROW expression encountered in illegal context"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalRowExpression
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"TABLESAMPLE percentage must be between 0 and 100, inclusive"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"SQLSTATE"
argument_list|,
name|value
operator|=
literal|"2202H"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|invalidSampleSize
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Unknown character set ''{0}''"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|unknownCharacterSet
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Failed to encode ''{0}'' in character set ''{1}''"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|charsetEncoding
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"UESCAPE ''{0}'' must be exactly one character"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|unicodeEscapeCharLength
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"UESCAPE ''{0}'' may not be hex digit, whitespace, plus sign, or double quote"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|unicodeEscapeCharIllegal
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"UESCAPE cannot be specified without Unicode literal introducer"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|unicodeEscapeUnexpected
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Unicode escape sequence starting at character {0,number,#} is not exactly four hex digits"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|unicodeEscapeMalformed
parameter_list|(
name|int
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"No match found for function signature {0}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|validatorUnknownFunction
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Invalid number of arguments to function ''{0}''. Was expecting {1,number,#} arguments"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|invalidArgCount
parameter_list|(
name|String
name|a0
parameter_list|,
name|int
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"At line {0,number,#}, column {1,number,#}"
argument_list|)
name|ExInstWithCause
argument_list|<
name|CalciteContextException
argument_list|>
name|validatorContextPoint
parameter_list|(
name|int
name|a0
parameter_list|,
name|int
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"From line {0,number,#}, column {1,number,#} to line {2,number,#}, column {3,number,#}"
argument_list|)
name|ExInstWithCause
argument_list|<
name|CalciteContextException
argument_list|>
name|validatorContext
parameter_list|(
name|int
name|a0
parameter_list|,
name|int
name|a1
parameter_list|,
name|int
name|a2
parameter_list|,
name|int
name|a3
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cast function cannot convert value of type {0} to type {1}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|cannotCastValue
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Unknown datatype name ''{0}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|unknownDatatypeName
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Values passed to {0} operator must have compatible types"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|incompatibleValueType
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Values in expression list must have compatible types"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|incompatibleTypesInList
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot apply {0} to the two different charsets {1} and {2}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|incompatibleCharset
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|,
name|String
name|a2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"ORDER BY is only allowed on top-level SELECT"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|invalidOrderByPos
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Unknown identifier ''{0}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|unknownIdentifier
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Unknown field ''{0}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|unknownField
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Unknown target column ''{0}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|unknownTargetColumn
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Target column ''{0}'' is assigned more than once"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|duplicateTargetColumn
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Number of INSERT target columns ({0,number}) does not equal number of source items ({1,number})"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|unmatchInsertColumn
parameter_list|(
name|int
name|a0
parameter_list|,
name|int
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot assign to target field ''{0}'' of type {1} from source field ''{2}'' of type {3}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|typeNotAssignable
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|,
name|String
name|a2
parameter_list|,
name|String
name|a3
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Table ''{0}'' not found"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|tableNameNotFound
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Column ''{0}'' not found in any table"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|columnNotFound
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Column ''{0}'' not found in table ''{1}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|columnNotFoundInTable
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Column ''{0}'' is ambiguous"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|columnAmbiguous
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Operand {0} must be a query"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|needQueryOp
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Parameters must be of the same type"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|needSameTypeParameter
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot apply ''{0}'' to arguments of type {1}. Supported form(s): {2}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|canNotApplyOp2Type
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|,
name|String
name|a2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Expected a boolean type"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|expectedBoolean
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"ELSE clause or at least one THEN clause must be non-NULL"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|mustNotNullInElse
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Function ''{0}'' is not defined"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|functionUndefined
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Encountered {0} with {1,number} parameter(s); was expecting {2}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|wrongNumberOfParam
parameter_list|(
name|String
name|a0
parameter_list|,
name|int
name|a1
parameter_list|,
name|String
name|a2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal mixing of types in CASE or COALESCE statement"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|illegalMixingOfTypes
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Invalid compare. Comparing (collation, coercibility): ({0}, {1} with ({2}, {3}) is illegal"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|invalidCompare
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|,
name|String
name|a2
parameter_list|,
name|String
name|a3
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Invalid syntax. Two explicit different collations ({0}, {1}) are illegal"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|differentCollations
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"{0} is not comparable to {1}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|typeNotComparable
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot compare values of types ''{0}'', ''{1}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|typeNotComparableNear
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Wrong number of arguments to expression"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|wrongNumOfArguments
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Operands {0} not comparable to each other"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|operandNotComparable
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Types {0} not comparable to each other"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|typeNotComparableEachOther
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Numeric literal ''{0}'' out of range"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|numberLiteralOutOfRange
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Date literal ''{0}'' out of range"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|dateLiteralOutOfRange
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"String literal continued on same line"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|stringFragsOnSameLine
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Table or column alias must be a simple identifier"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|aliasMustBeSimpleIdentifier
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"List of column aliases must have same degree as table; table has {0,number,#} columns {1}, whereas alias list has {2,number,#} columns"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|aliasListDegree
parameter_list|(
name|int
name|a0
parameter_list|,
name|String
name|a1
parameter_list|,
name|int
name|a2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Duplicate name ''{0}'' in column alias list"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|aliasListDuplicate
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"INNER, LEFT, RIGHT or FULL join requires a condition (NATURAL keyword or ON or USING clause)"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|joinRequiresCondition
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot specify condition (NATURAL keyword, or ON or USING clause) following CROSS JOIN"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|crossJoinDisallowsCondition
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot specify NATURAL keyword with ON or USING clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|naturalDisallowsOnOrUsing
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Column name ''{0}'' in USING clause is not unique on one side of join"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|columnInUsingNotUnique
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Column ''{0}'' matched using NATURAL keyword or USING clause has incompatible types: cannot compare ''{1}'' to ''{2}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|naturalOrUsingColumnNotCompatible
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|,
name|String
name|a2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"OVER clause is necessary for window functions"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|absentOverClause
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Window ''{0}'' not found"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|windowNotFound
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Expression ''{0}'' is not being grouped"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|notGroupExpr
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Argument to {0} operator must be a grouped expression"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|groupingArgument
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"{0} operator may only occur in an aggregate query"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|groupingInAggregate
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"{0} operator may only occur in SELECT, HAVING or ORDER BY clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|groupingInWrongClause
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Expression ''{0}'' is not in the select clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|notSelectDistinctExpr
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Aggregate expression is illegal in {0} clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|aggregateIllegalInClause
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Windowed aggregate expression is illegal in {0} clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|windowedAggregateIllegalInClause
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Aggregate expression is illegal in GROUP BY clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|aggregateIllegalInGroupBy
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Aggregate expressions cannot be nested"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|nestedAggIllegal
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"FILTER must not contain aggregate expression"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|aggregateInFilterIllegal
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|aggregateIllegalInOrderBy
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"{0} clause must be a condition"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|condMustBeBoolean
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"HAVING clause must be a condition"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|havingMustBeBoolean
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"OVER must be applied to aggregate function"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|overNonAggregate
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"FILTER must be applied to aggregate function"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|filterNonAggregate
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot override window attribute"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|cannotOverrideWindowAttribute
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Column count mismatch in {0}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|columnCountMismatchInSetop
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Type mismatch in column {0,number} of {1}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|columnTypeMismatchInSetop
parameter_list|(
name|int
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Binary literal string must contain an even number of hexits"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|binaryLiteralOdd
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Binary literal string must contain only characters ''0'' - ''9'', ''A'' - ''F''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|binaryLiteralInvalid
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal interval literal format {0} for {1}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|unsupportedIntervalLiteral
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Interval field value {0,number} exceeds precision of {1} field"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|intervalFieldExceedsPrecision
parameter_list|(
name|Number
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"RANGE clause cannot be used with compound ORDER BY clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|compoundOrderByProhibitsRange
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Data type of ORDER BY prohibits use of RANGE clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|orderByDataTypeProhibitsRange
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Data Type mismatch between ORDER BY and RANGE clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|orderByRangeMismatch
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Window ORDER BY expression of type DATE requires range of type INTERVAL"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|dateRequiresInterval
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"ROWS value must be a non-negative integral constant"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|rowMustBeNonNegativeIntegral
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Window specification must contain an ORDER BY clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|overMissingOrderBy
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"PARTITION BY expression should not contain OVER clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|partitionbyShouldNotContainOver
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"ORDER BY expression should not contain OVER clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|orderbyShouldNotContainOver
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"UNBOUNDED FOLLOWING cannot be specified for the lower frame boundary"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|badLowerBoundary
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"UNBOUNDED PRECEDING cannot be specified for the upper frame boundary"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|badUpperBoundary
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Upper frame boundary cannot be PRECEDING when lower boundary is CURRENT ROW"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|currentRowPrecedingError
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Upper frame boundary cannot be CURRENT ROW when lower boundary is FOLLOWING"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|currentRowFollowingError
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Upper frame boundary cannot be PRECEDING when lower boundary is FOLLOWING"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|followingBeforePrecedingError
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Window name must be a simple identifier"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|windowNameMustBeSimple
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Duplicate window names not allowed"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|duplicateWindowName
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Empty window specification not allowed"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|emptyWindowSpec
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Duplicate window specification not allowed in the same window clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|dupWindowSpec
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"ROW/RANGE not allowed with RANK, DENSE_RANK or ROW_NUMBER functions"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|rankWithFrame
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"RANK or DENSE_RANK functions require ORDER BY clause in window specification"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|funcNeedsOrderBy
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"PARTITION BY not allowed with existing window reference"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|partitionNotAllowed
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"ORDER BY not allowed in both base and referenced windows"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|orderByOverlap
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Referenced window cannot have framing declarations"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|refWindowWithFrame
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Type ''{0}'' is not supported"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|typeNotSupported
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"DISTINCT/ALL not allowed with {0} function"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|functionQuantifierNotAllowed
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Not allowed to perform {0} on {1}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|accessNotAllowed
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"The {0} function does not support the {1} data type."
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|minMaxBadType
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Only scalar subqueries allowed in select list."
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|onlyScalarSubqueryAllowed
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Ordinal out of range"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|orderByOrdinalOutOfRange
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Window has negative size"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|windowHasNegativeSize
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"UNBOUNDED FOLLOWING window not supported"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|unboundedFollowingWindowNotSupported
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot use DISALLOW PARTIAL with window based on RANGE"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|cannotUseDisallowPartialWithRange
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Interval leading field precision ''{0,number,#}'' out of range for {1}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|intervalStartPrecisionOutOfRange
parameter_list|(
name|int
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Interval fractional second precision ''{0,number,#}'' out of range for {1}"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|intervalFractionalSecondPrecisionOutOfRange
parameter_list|(
name|int
name|a0
parameter_list|,
name|String
name|a1
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Duplicate relation name ''{0}'' in FROM clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|fromAliasDuplicate
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Duplicate column name ''{0}'' in output"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|duplicateColumnName
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Duplicate name ''{0}'' in column list"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|duplicateNameInColumnList
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Internal error: {0}"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|internal
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Argument to function ''{0}'' must be a literal"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|argumentMustBeLiteral
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Argument to function ''{0}'' must be a positive integer literal"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|argumentMustBePositiveInteger
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Validation Error: {0}"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|validationError
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Locale ''{0}'' in an illegal format"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalLocaleFormat
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Argument to function ''{0}'' must not be NULL"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|argumentMustNotBeNull
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal use of ''NULL''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|nullIllegal
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Illegal use of dynamic parameter"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|dynamicParamIllegal
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"''{0}'' is not a valid boolean value"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|invalidBoolean
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Argument to function ''{0}'' must be a valid precision between ''{1,number,#}'' and ''{2,number,#}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|argumentMustBeValidPrecision
parameter_list|(
name|String
name|a0
parameter_list|,
name|int
name|a1
parameter_list|,
name|int
name|a2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Wrong arguments for table function ''{0}'' call. Expected ''{1}'', actual ''{2}''"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|illegalArgumentForTableFunctionCall
parameter_list|(
name|String
name|a0
parameter_list|,
name|String
name|a1
parameter_list|,
name|String
name|a2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"''{0}'' is not a valid datetime format"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|invalidDatetimeFormat
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot explicitly insert value into IDENTITY column ''{0}'' which is ALWAYS GENERATED"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|insertIntoAlwaysGenerated
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Argument to function ''{0}'' must have a scale of 0"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|argumentMustHaveScaleZero
parameter_list|(
name|String
name|a0
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Statement preparation aborted"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|preparationAborted
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"SELECT DISTINCT not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"SQL:2003 Part 2 Annex F"
argument_list|)
name|Feature
name|sQLFeature_E051_01
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"EXCEPT not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"SQL:2003 Part 2 Annex F"
argument_list|)
name|Feature
name|sQLFeature_E071_03
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"UPDATE not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"SQL:2003 Part 2 Annex F"
argument_list|)
name|Feature
name|sQLFeature_E101_03
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Transactions not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"SQL:2003 Part 2 Annex F"
argument_list|)
name|Feature
name|sQLFeature_E151
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"INTERSECT not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"SQL:2003 Part 2 Annex F"
argument_list|)
name|Feature
name|sQLFeature_F302
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"MERGE not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"SQL:2003 Part 2 Annex F"
argument_list|)
name|Feature
name|sQLFeature_F312
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Basic multiset not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"SQL:2003 Part 2 Annex F"
argument_list|)
name|Feature
name|sQLFeature_S271
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"TABLESAMPLE not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"SQL:2003 Part 2 Annex F"
argument_list|)
name|Feature
name|sQLFeature_T613
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Execution of a new autocommit statement while a cursor is still open on same connection is not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"Eigenbase-defined"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|sQLConformance_MultipleActiveAutocommitStatements
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Descending sort (ORDER BY DESC) not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"Eigenbase-defined"
argument_list|)
name|Feature
name|sQLConformance_OrderByDesc
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Sharing of cached statement plans not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"Eigenbase-defined"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|sharedStatementPlans
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"TABLESAMPLE SUBSTITUTE not supported"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"Eigenbase-defined"
argument_list|)
name|Feature
name|sQLFeatureExt_T613_Substitution
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Personality does not maintain table''s row count in the catalog"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"Eigenbase-defined"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|personalityManagesRowCount
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Personality does not support snapshot reads"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"Eigenbase-defined"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|personalitySupportsSnapshots
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Personality does not support labels"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"FeatureDefinition"
argument_list|,
name|value
operator|=
literal|"Eigenbase-defined"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|personalitySupportsLabels
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Require at least 1 argument"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|requireAtLeastOneArg
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Map requires at least 2 arguments"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|mapRequiresTwoOrMoreArgs
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Map requires an even number of arguments"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|mapRequiresEvenArgCount
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Incompatible types"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|incompatibleTypes
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Number of columns must match number of query columns"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|columnCountMismatch
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Column has duplicate column name ''{0}'' and no column list specified"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|duplicateColumnAndNoColumnList
parameter_list|(
name|String
name|s
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Declaring class ''{0}'' of non-static user-defined function must have a public constructor with zero parameters"
argument_list|)
name|ExInst
argument_list|<
name|RuntimeException
argument_list|>
name|requireDefaultConstructor
parameter_list|(
name|String
name|className
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"In user-defined aggregate class ''{0}'', first parameter to ''add'' method must be the accumulator (the return type of the ''init'' method)"
argument_list|)
name|ExInst
argument_list|<
name|RuntimeException
argument_list|>
name|firstParameterOfAdd
parameter_list|(
name|String
name|className
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"FilterableTable.scan returned a filter that was not in the original list: {0}"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|filterableTableInventedFilter
parameter_list|(
name|String
name|s
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"FilterableTable.scan must not return null"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|filterableTableScanReturnedNull
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot convert table ''{0}'' to stream"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|cannotConvertToStream
parameter_list|(
name|String
name|tableName
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot convert stream ''{0}'' to relation"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|cannotConvertToRelation
parameter_list|(
name|String
name|tableName
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Streaming aggregation requires at least one monotonic expression in GROUP BY clause"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|streamMustGroupByMonotonic
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Streaming ORDER BY must start with monotonic expression"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|streamMustOrderByMonotonic
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Set operator cannot combine streaming and non-streaming inputs"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|streamSetOpInconsistentInputs
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Cannot stream VALUES"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|cannotStreamValues
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Modifiable view must be based on a single table"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|modifiableViewMustBeBasedOnSingleTable
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"View is not modifiable. More than one expression maps to column ''{0}'' of base table ''{1}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|moreThanOneMappedColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
name|tableName
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"View is not modifiable. No value is supplied for NOT NULL column ''{0}'' of base table ''{1}''"
argument_list|)
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|noValueSuppliedForViewColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
name|tableName
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Table ''{0}'' not found"
argument_list|)
name|ExInst
argument_list|<
name|CalciteException
argument_list|>
name|tableNotFound
parameter_list|(
name|String
name|tableName
parameter_list|)
function_decl|;
block|}
end_interface

begin_comment
comment|// End CalciteResource.java
end_comment

end_unit

