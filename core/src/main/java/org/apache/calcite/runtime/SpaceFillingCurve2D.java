begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utilities for space-filling curves.  *  *<p>Includes code from  *<a href="https://github.com/locationtech/sfcurve">LocationTech SFCurve</a>,  * Copyright (c) 2015 Azavea.  */
end_comment

begin_interface
specifier|public
interface|interface
name|SpaceFillingCurve2D
block|{
name|long
name|toIndex
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
function_decl|;
name|Point
name|toPoint
parameter_list|(
name|long
name|i
parameter_list|)
function_decl|;
name|List
argument_list|<
name|IndexRange
argument_list|>
name|toRanges
parameter_list|(
name|double
name|xMin
parameter_list|,
name|double
name|yMin
parameter_list|,
name|double
name|xMax
parameter_list|,
name|double
name|yMax
parameter_list|,
name|RangeComputeHints
name|hints
parameter_list|)
function_decl|;
comment|/** Hints for the {@link SpaceFillingCurve2D#toRanges} method. */
class|class
name|RangeComputeHints
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{   }
comment|/** Range. */
interface|interface
name|IndexRange
block|{
name|long
name|lower
parameter_list|()
function_decl|;
name|long
name|upper
parameter_list|()
function_decl|;
name|boolean
name|contained
parameter_list|()
function_decl|;
name|IndexRangeTuple
name|tuple
parameter_list|()
function_decl|;
block|}
comment|/** Data representing a range. */
class|class
name|IndexRangeTuple
block|{
specifier|final
name|long
name|lower
decl_stmt|;
specifier|final
name|long
name|upper
decl_stmt|;
specifier|final
name|boolean
name|contained
decl_stmt|;
name|IndexRangeTuple
parameter_list|(
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|,
name|boolean
name|contained
parameter_list|)
block|{
name|this
operator|.
name|lower
operator|=
name|lower
expr_stmt|;
name|this
operator|.
name|upper
operator|=
name|upper
expr_stmt|;
name|this
operator|.
name|contained
operator|=
name|contained
expr_stmt|;
block|}
block|}
comment|/** Base class for Range implementations. */
specifier|abstract
class|class
name|AbstractRange
implements|implements
name|IndexRange
block|{
specifier|final
name|long
name|lower
decl_stmt|;
specifier|final
name|long
name|upper
decl_stmt|;
specifier|protected
name|AbstractRange
parameter_list|(
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|)
block|{
name|this
operator|.
name|lower
operator|=
name|lower
expr_stmt|;
name|this
operator|.
name|upper
operator|=
name|upper
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|lower
parameter_list|()
block|{
return|return
name|lower
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|upper
parameter_list|()
block|{
return|return
name|upper
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexRangeTuple
name|tuple
parameter_list|()
block|{
return|return
operator|new
name|IndexRangeTuple
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|,
name|contained
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Range that is covered. */
class|class
name|CoveredRange
extends|extends
name|AbstractRange
block|{
name|CoveredRange
parameter_list|(
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|)
block|{
name|super
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contained
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"covered("
operator|+
name|lower
operator|+
literal|", "
operator|+
name|upper
operator|+
literal|")"
return|;
block|}
block|}
comment|/** Range that is not contained. */
class|class
name|OverlappingRange
extends|extends
name|AbstractRange
block|{
name|OverlappingRange
parameter_list|(
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|)
block|{
name|super
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contained
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"overlap("
operator|+
name|lower
operator|+
literal|", "
operator|+
name|upper
operator|+
literal|")"
return|;
block|}
block|}
comment|/** Lexicographic ordering for {@link IndexRange}. */
class|class
name|IndexRangeOrdering
extends|extends
name|Ordering
argument_list|<
name|IndexRange
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|IndexRange
name|x
parameter_list|,
name|IndexRange
name|y
parameter_list|)
block|{
specifier|final
name|int
name|c1
init|=
name|Long
operator|.
name|compare
argument_list|(
name|x
operator|.
name|lower
argument_list|()
argument_list|,
name|y
operator|.
name|lower
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
literal|0
condition|)
block|{
return|return
name|c1
return|;
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|x
operator|.
name|upper
argument_list|()
argument_list|,
name|y
operator|.
name|upper
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Utilities for {@link IndexRange}. */
class|class
name|IndexRanges
block|{
specifier|private
name|IndexRanges
parameter_list|()
block|{
block|}
specifier|static
name|IndexRange
name|create
parameter_list|(
name|long
name|l
parameter_list|,
name|long
name|u
parameter_list|,
name|boolean
name|contained
parameter_list|)
block|{
return|return
name|contained
condition|?
operator|new
name|CoveredRange
argument_list|(
name|l
argument_list|,
name|u
argument_list|)
else|:
operator|new
name|OverlappingRange
argument_list|(
name|l
argument_list|,
name|u
argument_list|)
return|;
block|}
block|}
comment|/** A 2-dimensional point. */
class|class
name|Point
block|{
specifier|final
name|double
name|x
decl_stmt|;
specifier|final
name|double
name|y
decl_stmt|;
name|Point
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

