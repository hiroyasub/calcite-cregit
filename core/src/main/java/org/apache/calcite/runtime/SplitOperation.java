begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|algorithm
operator|.
name|LineIntersector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|algorithm
operator|.
name|RobustLineIntersector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Coordinate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|LineString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiLineString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiPolygon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Polygon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|util
operator|.
name|LineStringExtracter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|operation
operator|.
name|polygonize
operator|.
name|Polygonizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Splits {@code geom} by {@code blade}.  */
end_comment

begin_class
specifier|public
class|class
name|SplitOperation
block|{
specifier|private
specifier|final
name|Geometry
name|geom
decl_stmt|;
specifier|private
specifier|final
name|Geometry
name|blade
decl_stmt|;
specifier|public
name|SplitOperation
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|Geometry
name|blade
parameter_list|)
block|{
name|this
operator|.
name|geom
operator|=
name|geom
expr_stmt|;
name|this
operator|.
name|blade
operator|=
name|blade
expr_stmt|;
block|}
specifier|public
name|Geometry
name|split
parameter_list|()
block|{
if|if
condition|(
name|geom
operator|instanceof
name|LineString
operator|&&
name|blade
operator|instanceof
name|Point
condition|)
block|{
return|return
name|split
argument_list|(
operator|(
name|LineString
operator|)
name|geom
argument_list|,
operator|(
name|Point
operator|)
name|blade
argument_list|)
return|;
block|}
if|else if
condition|(
name|geom
operator|instanceof
name|LineString
operator|&&
name|blade
operator|instanceof
name|LineString
condition|)
block|{
return|return
name|split
argument_list|(
operator|(
name|LineString
operator|)
name|geom
argument_list|,
operator|(
name|LineString
operator|)
name|blade
argument_list|)
return|;
block|}
if|else if
condition|(
name|geom
operator|instanceof
name|MultiLineString
operator|&&
name|blade
operator|instanceof
name|Point
condition|)
block|{
return|return
name|split
argument_list|(
operator|(
name|MultiLineString
operator|)
name|geom
argument_list|,
operator|(
name|Point
operator|)
name|blade
argument_list|)
return|;
block|}
if|else if
condition|(
name|geom
operator|instanceof
name|MultiLineString
operator|&&
name|blade
operator|instanceof
name|LineString
condition|)
block|{
return|return
name|split
argument_list|(
operator|(
name|MultiLineString
operator|)
name|geom
argument_list|,
operator|(
name|LineString
operator|)
name|blade
argument_list|)
return|;
block|}
if|else if
condition|(
name|geom
operator|instanceof
name|Polygon
operator|&&
name|blade
operator|instanceof
name|LineString
condition|)
block|{
return|return
name|split
argument_list|(
operator|(
name|Polygon
operator|)
name|geom
argument_list|,
operator|(
name|LineString
operator|)
name|blade
argument_list|)
return|;
block|}
if|else if
condition|(
name|geom
operator|instanceof
name|MultiPolygon
operator|&&
name|blade
operator|instanceof
name|LineString
condition|)
block|{
return|return
name|split
argument_list|(
operator|(
name|MultiPolygon
operator|)
name|geom
argument_list|,
operator|(
name|LineString
operator|)
name|blade
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Split operation not supported for "
operator|+
name|geom
operator|.
name|getGeometryType
argument_list|()
operator|+
literal|" and "
operator|+
name|blade
operator|.
name|getGeometryType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Geometry
name|split
parameter_list|(
name|LineString
name|geometry
parameter_list|,
name|Point
name|blade
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|geometry
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|Coordinate
index|[]
name|coordinates
init|=
name|geometry
operator|.
name|getCoordinates
argument_list|()
decl_stmt|;
name|LineIntersector
name|intersector
init|=
operator|new
name|RobustLineIntersector
argument_list|()
decl_stmt|;
name|Coordinate
name|p
init|=
name|blade
operator|.
name|getCoordinate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Coordinate
argument_list|>
name|accumulator
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LineString
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|coordinates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Coordinate
name|p1
init|=
name|coordinates
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|Coordinate
name|p2
init|=
name|coordinates
index|[
name|i
index|]
decl_stmt|;
name|accumulator
operator|.
name|add
argument_list|(
name|p1
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
name|intersector
operator|.
name|computeIntersection
argument_list|(
name|p
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
if|if
condition|(
name|intersector
operator|.
name|hasIntersection
argument_list|()
condition|)
block|{
name|accumulator
operator|.
name|add
argument_list|(
name|p
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
name|LineString
name|line
init|=
name|factory
operator|.
name|createLineString
argument_list|(
name|accumulator
operator|.
name|toArray
argument_list|(
operator|new
name|Coordinate
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|accumulator
operator|.
name|clear
argument_list|()
expr_stmt|;
name|accumulator
operator|.
name|add
argument_list|(
name|p
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|accumulator
operator|.
name|add
argument_list|(
name|coordinates
index|[
name|coordinates
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
name|LineString
name|line
init|=
name|factory
operator|.
name|createLineString
argument_list|(
name|accumulator
operator|.
name|toArray
argument_list|(
operator|new
name|Coordinate
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|lines
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|lines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|factory
operator|.
name|buildGeometry
argument_list|(
name|lines
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Geometry
name|split
parameter_list|(
name|MultiLineString
name|geometry
parameter_list|,
name|Point
name|blade
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|geometry
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Geometry
argument_list|>
name|geometries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geometry
operator|.
name|getNumGeometries
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Geometry
name|split
init|=
name|split
argument_list|(
operator|(
name|LineString
operator|)
name|geometry
operator|.
name|getGeometryN
argument_list|(
name|i
argument_list|)
argument_list|,
name|blade
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|GeometryCollection
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|split
operator|.
name|getNumGeometries
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|geometries
operator|.
name|add
argument_list|(
name|split
operator|.
name|getGeometryN
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|geometries
operator|.
name|add
argument_list|(
name|split
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|factory
operator|.
name|buildGeometry
argument_list|(
name|geometries
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Geometry
name|split
parameter_list|(
name|LineString
name|geometry
parameter_list|,
name|LineString
name|blade
parameter_list|)
block|{
return|return
name|geometry
operator|.
name|difference
argument_list|(
name|blade
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Geometry
name|split
parameter_list|(
name|MultiLineString
name|geometry
parameter_list|,
name|LineString
name|blade
parameter_list|)
block|{
return|return
name|geometry
operator|.
name|difference
argument_list|(
name|blade
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Geometry
name|split
parameter_list|(
name|Polygon
name|geometry
parameter_list|,
name|LineString
name|blade
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|geometry
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Polygon
argument_list|>
name|polygons
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Geometry
name|union
init|=
name|geometry
operator|.
name|getBoundary
argument_list|()
operator|.
name|union
argument_list|(
name|blade
argument_list|)
decl_stmt|;
name|Polygonizer
name|polygonizer
init|=
operator|new
name|Polygonizer
argument_list|()
decl_stmt|;
name|polygonizer
operator|.
name|add
argument_list|(
name|LineStringExtracter
operator|.
name|getLines
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Polygon
name|p
range|:
name|GeometryFactory
operator|.
name|toPolygonArray
argument_list|(
name|polygonizer
operator|.
name|getPolygons
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|geometry
operator|.
name|contains
argument_list|(
name|geometry
operator|.
name|getInteriorPoint
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|polygons
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|factory
operator|.
name|buildGeometry
argument_list|(
name|polygons
argument_list|)
return|;
block|}
specifier|private
name|Geometry
name|split
parameter_list|(
name|MultiPolygon
name|geometry
parameter_list|,
name|LineString
name|blade
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|geometry
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Geometry
argument_list|>
name|geometries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geometry
operator|.
name|getNumGeometries
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Geometry
name|split
init|=
name|split
argument_list|(
operator|(
name|Polygon
operator|)
name|geometry
operator|.
name|getGeometryN
argument_list|(
name|i
argument_list|)
argument_list|,
name|blade
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|GeometryCollection
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|split
operator|.
name|getNumGeometries
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|geometries
operator|.
name|add
argument_list|(
name|split
operator|.
name|getGeometryN
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|geometries
operator|.
name|add
argument_list|(
name|split
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|factory
operator|.
name|buildGeometry
argument_list|(
name|geometries
argument_list|)
return|;
block|}
block|}
end_class

end_unit

