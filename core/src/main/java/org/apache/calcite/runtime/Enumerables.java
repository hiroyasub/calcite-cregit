begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|EqualityComparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Bug
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utilities for processing {@link org.apache.calcite.linq4j.Enumerable}  * collections.  *  *<p>This class is a place to put things not yet added to linq4j.  * Methods are subject to removal without notice.</p>  */
end_comment

begin_class
specifier|public
class|class
name|Enumerables
block|{
specifier|private
specifier|static
specifier|final
name|Function1
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|SLICE
init|=
operator|new
name|Function1
argument_list|<
name|Object
index|[]
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|apply
parameter_list|(
name|Object
index|[]
name|a0
parameter_list|)
block|{
return|return
name|a0
index|[
literal|0
index|]
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function1
argument_list|<
name|Object
index|[]
argument_list|,
name|Row
argument_list|>
name|ARRAY_TO_ROW
init|=
operator|new
name|Function1
argument_list|<
name|Object
index|[]
argument_list|,
name|Row
argument_list|>
argument_list|()
block|{
specifier|public
name|Row
name|apply
parameter_list|(
name|Object
index|[]
name|a0
parameter_list|)
block|{
return|return
name|Row
operator|.
name|asCopy
argument_list|(
name|a0
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Enumerables
parameter_list|()
block|{
block|}
comment|/** Converts an enumerable over singleton arrays into the enumerable of their    * first elements. */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Enumerable
argument_list|<
name|E
argument_list|>
name|slice0
parameter_list|(
name|Enumerable
argument_list|<
name|E
index|[]
argument_list|>
name|enumerable
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|enumerable
operator|.
name|select
argument_list|(
operator|(
name|Function1
argument_list|<
name|E
index|[]
argument_list|,
name|E
argument_list|>
operator|)
name|SLICE
argument_list|)
return|;
block|}
comment|/**    * Returns elements of {@code outer} for which there is a member of    * {@code inner} with a matching key.    */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|,
name|TInner
parameter_list|,
name|TKey
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|semiJoin
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|outer
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|)
block|{
name|Bug
operator|.
name|upgrade
argument_list|(
literal|"move into linq4j"
argument_list|)
expr_stmt|;
return|return
name|semiJoin
argument_list|(
name|outer
argument_list|,
name|inner
argument_list|,
name|outerKeySelector
argument_list|,
name|innerKeySelector
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns elements of {@code outer} for which there is a member of    * {@code inner} with a matching key. A specified    * {@code EqualityComparer<TSource>} is used to compare keys.    */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|,
name|TInner
parameter_list|,
name|TKey
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|semiJoin
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|outer
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|,
specifier|final
name|EqualityComparer
argument_list|<
name|TKey
argument_list|>
name|comparer
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|TSource
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|TKey
argument_list|>
name|innerLookup
init|=
name|comparer
operator|==
literal|null
condition|?
name|inner
operator|.
name|select
argument_list|(
name|innerKeySelector
argument_list|)
operator|.
name|distinct
argument_list|()
else|:
name|inner
operator|.
name|select
argument_list|(
name|innerKeySelector
argument_list|)
operator|.
name|distinct
argument_list|(
name|comparer
argument_list|)
decl_stmt|;
return|return
name|Enumerables
operator|.
name|where
argument_list|(
name|outer
operator|.
name|enumerator
argument_list|()
argument_list|,
operator|new
name|Predicate1
argument_list|<
name|TSource
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|TSource
name|v0
parameter_list|)
block|{
specifier|final
name|TKey
name|key
init|=
name|outerKeySelector
operator|.
name|apply
argument_list|(
name|v0
argument_list|)
decl_stmt|;
return|return
name|innerLookup
operator|.
name|contains
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Correlates the elements of two sequences based on a predicate.    */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|,
name|TInner
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|thetaJoin
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|outer
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|Predicate2
argument_list|<
name|TSource
argument_list|,
name|TInner
argument_list|>
name|predicate
parameter_list|,
name|Function2
argument_list|<
name|TSource
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|,
specifier|final
name|boolean
name|generateNullsOnLeft
parameter_list|,
specifier|final
name|boolean
name|generateNullsOnRight
parameter_list|)
block|{
comment|// Building the result as a list is easy but hogs memory. We should iterate.
specifier|final
name|List
argument_list|<
name|TResult
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|lefts
init|=
name|outer
operator|.
name|enumerator
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TInner
argument_list|>
name|rightList
init|=
name|inner
operator|.
name|toList
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|TInner
argument_list|>
name|rightUnmatched
decl_stmt|;
if|if
condition|(
name|generateNullsOnLeft
condition|)
block|{
name|rightUnmatched
operator|=
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
expr_stmt|;
name|rightUnmatched
operator|.
name|addAll
argument_list|(
name|rightList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rightUnmatched
operator|=
literal|null
expr_stmt|;
block|}
while|while
condition|(
name|lefts
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|int
name|leftMatchCount
init|=
literal|0
decl_stmt|;
specifier|final
name|TSource
name|left
init|=
name|lefts
operator|.
name|current
argument_list|()
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|TInner
argument_list|>
name|rights
init|=
name|Linq4j
operator|.
name|iterableEnumerator
argument_list|(
name|rightList
argument_list|)
decl_stmt|;
while|while
condition|(
name|rights
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|TInner
name|right
init|=
name|rights
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
operator|++
name|leftMatchCount
expr_stmt|;
if|if
condition|(
name|rightUnmatched
operator|!=
literal|null
condition|)
block|{
name|rightUnmatched
operator|.
name|remove
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|resultSelector
operator|.
name|apply
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|generateNullsOnRight
operator|&&
name|leftMatchCount
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|resultSelector
operator|.
name|apply
argument_list|(
name|left
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rightUnmatched
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Enumerator
argument_list|<
name|TInner
argument_list|>
name|rights
init|=
name|Linq4j
operator|.
name|iterableEnumerator
argument_list|(
name|rightUnmatched
argument_list|)
decl_stmt|;
while|while
condition|(
name|rights
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|TInner
name|right
init|=
name|rights
operator|.
name|current
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|resultSelector
operator|.
name|apply
argument_list|(
literal|null
argument_list|,
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**    * Filters a sequence of values based on a    * predicate.    */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|>
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|where
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|source
parameter_list|,
specifier|final
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
block|{
assert|assert
name|predicate
operator|!=
literal|null
assert|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|TSource
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
parameter_list|()
block|{
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
init|=
name|source
operator|.
name|enumerator
argument_list|()
decl_stmt|;
return|return
name|Enumerables
operator|.
name|where
argument_list|(
name|enumerator
argument_list|,
name|predicate
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|TSource
parameter_list|>
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|where
parameter_list|(
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|enumerator
parameter_list|,
specifier|final
name|Predicate1
argument_list|<
name|TSource
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|TSource
argument_list|>
argument_list|()
block|{
specifier|public
name|TSource
name|current
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|current
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
while|while
condition|(
name|enumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|enumerator
operator|.
name|current
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/** Converts an {@link Enumerable} over object arrays into an    * {@link Enumerable} over {@link Row} objects. */
specifier|public
specifier|static
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|toRow
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerable
parameter_list|)
block|{
return|return
name|enumerable
operator|.
name|select
argument_list|(
name|ARRAY_TO_ROW
argument_list|)
return|;
block|}
comment|/** Converts a supplier of an {@link Enumerable} over object arrays into a    * supplier of an {@link Enumerable} over {@link Row} objects. */
specifier|public
specifier|static
name|Supplier
argument_list|<
name|Enumerable
argument_list|<
name|Row
argument_list|>
argument_list|>
name|toRow
parameter_list|(
specifier|final
name|Supplier
argument_list|<
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|Enumerable
argument_list|<
name|Row
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|get
parameter_list|()
block|{
return|return
name|toRow
argument_list|(
name|supplier
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Joins two inputs that are sorted on the key. */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|,
name|TInner
parameter_list|,
name|TKey
extends|extends
name|Comparable
argument_list|<
name|TKey
argument_list|>
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|mergeJoin
parameter_list|(
specifier|final
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|outer
parameter_list|,
specifier|final
name|Enumerable
argument_list|<
name|TInner
argument_list|>
name|inner
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TKey
argument_list|>
name|outerKeySelector
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|TInner
argument_list|,
name|TKey
argument_list|>
name|innerKeySelector
parameter_list|,
specifier|final
name|Function2
argument_list|<
name|TSource
argument_list|,
name|TInner
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|,
name|boolean
name|generateNullsOnLeft
parameter_list|,
name|boolean
name|generateNullsOnRight
parameter_list|)
block|{
assert|assert
operator|!
name|generateNullsOnLeft
operator|:
literal|"not implemented"
assert|;
assert|assert
operator|!
name|generateNullsOnRight
operator|:
literal|"not implemented"
assert|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|TResult
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|TResult
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|TResult
argument_list|>
argument_list|()
block|{
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|leftEnumerator
init|=
name|outer
operator|.
name|enumerator
argument_list|()
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|TInner
argument_list|>
name|rightEnumerator
init|=
name|inner
operator|.
name|enumerator
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TSource
argument_list|>
name|lefts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TInner
argument_list|>
name|rights
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|boolean
name|done
decl_stmt|;
name|Enumerator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|cartesians
decl_stmt|;
block|{
name|start
parameter_list|()
constructor_decl|;
block|}
specifier|private
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
operator|!
name|leftEnumerator
operator|.
name|moveNext
argument_list|()
operator|||
operator|!
name|rightEnumerator
operator|.
name|moveNext
argument_list|()
operator|||
operator|!
name|advance
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|cartesians
operator|=
name|Linq4j
operator|.
name|emptyEnumerator
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Moves to the next key that is present in both sides. Populates            * lefts and rights with the rows. Restarts the cross-join            * enumerator. */
specifier|private
name|boolean
name|advance
parameter_list|()
block|{
name|TSource
name|left
init|=
name|leftEnumerator
operator|.
name|current
argument_list|()
decl_stmt|;
name|TKey
name|leftKey
init|=
name|outerKeySelector
operator|.
name|apply
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|TInner
name|right
init|=
name|rightEnumerator
operator|.
name|current
argument_list|()
decl_stmt|;
name|TKey
name|rightKey
init|=
name|innerKeySelector
operator|.
name|apply
argument_list|(
name|right
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|c
init|=
name|leftKey
operator|.
name|compareTo
argument_list|(
name|rightKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|leftEnumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|left
operator|=
name|leftEnumerator
operator|.
name|current
argument_list|()
expr_stmt|;
name|leftKey
operator|=
name|outerKeySelector
operator|.
name|apply
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|rightEnumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|right
operator|=
name|rightEnumerator
operator|.
name|current
argument_list|()
expr_stmt|;
name|rightKey
operator|=
name|innerKeySelector
operator|.
name|apply
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
block|}
name|lefts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lefts
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|leftEnumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|left
operator|=
name|leftEnumerator
operator|.
name|current
argument_list|()
expr_stmt|;
name|TKey
name|leftKey2
init|=
name|outerKeySelector
operator|.
name|apply
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|leftKey
operator|.
name|compareTo
argument_list|(
name|leftKey2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
assert|assert
name|c
operator|<
literal|0
operator|:
literal|"not sorted"
assert|;
break|break;
block|}
name|lefts
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|rights
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rights
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|rightEnumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|right
operator|=
name|rightEnumerator
operator|.
name|current
argument_list|()
expr_stmt|;
name|TKey
name|rightKey2
init|=
name|innerKeySelector
operator|.
name|apply
argument_list|(
name|right
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|rightKey
operator|.
name|compareTo
argument_list|(
name|rightKey2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
assert|assert
name|c
operator|<
literal|0
operator|:
literal|"not sorted"
assert|;
break|break;
block|}
name|rights
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
name|cartesians
operator|=
name|Linq4j
operator|.
name|product
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Linq4j
operator|.
expr|<
name|Object
operator|>
name|enumerator
argument_list|(
name|lefts
argument_list|)
argument_list|,
name|Linq4j
operator|.
expr|<
name|Object
operator|>
name|enumerator
argument_list|(
name|rights
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|TResult
name|current
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|cartesians
operator|.
name|current
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|TSource
name|left
init|=
operator|(
name|TSource
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|TInner
name|right
init|=
operator|(
name|TInner
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|resultSelector
operator|.
name|apply
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|cartesians
operator|.
name|moveNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|done
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|advance
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|done
operator|=
literal|false
expr_stmt|;
name|leftEnumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rightEnumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End Enumerables.java
end_comment

end_unit

