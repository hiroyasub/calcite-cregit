begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * List that consists of a head element and an immutable non-empty list.  *  * @param<E> Element type  */
end_comment

begin_class
specifier|public
class|class
name|ConsList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractImmutableList
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|E
name|first
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|rest
decl_stmt|;
comment|/** Creates a ConsList.    * It consists of an element pre-pended to another list.    * If the other list is mutable, creates an immutable copy. */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|first
parameter_list|,
name|List
argument_list|<
name|E
argument_list|>
name|rest
parameter_list|)
block|{
if|if
condition|(
name|rest
operator|instanceof
name|ConsList
operator|||
name|rest
operator|instanceof
name|ImmutableList
operator|&&
operator|!
name|rest
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|ConsList
argument_list|<>
argument_list|(
name|first
argument_list|,
name|rest
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ImmutableList
operator|.
expr|<
name|E
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|first
argument_list|)
operator|.
name|addAll
argument_list|(
name|rest
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|private
name|ConsList
parameter_list|(
name|E
name|first
parameter_list|,
name|List
argument_list|<
name|E
argument_list|>
name|rest
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|rest
operator|=
name|rest
expr_stmt|;
block|}
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
for|for
control|(
name|ConsList
argument_list|<
name|E
argument_list|>
name|c
init|=
name|this
init|;
condition|;
name|c
operator|=
operator|(
name|ConsList
argument_list|<
name|E
argument_list|>
operator|)
name|c
operator|.
name|rest
control|)
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
return|return
name|c
operator|.
name|first
return|;
block|}
operator|--
name|index
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|c
operator|.
name|rest
operator|instanceof
name|ConsList
operator|)
condition|)
block|{
return|return
name|c
operator|.
name|rest
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|s
init|=
literal|1
decl_stmt|;
for|for
control|(
name|ConsList
name|c
init|=
name|this
init|;
condition|;
name|c
operator|=
operator|(
name|ConsList
operator|)
name|c
operator|.
name|rest
operator|,
operator|++
name|s
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|c
operator|.
name|rest
operator|instanceof
name|ConsList
operator|)
condition|)
block|{
return|return
name|s
operator|+
name|c
operator|.
name|rest
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toList
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|List
operator|&&
name|toList
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|toList
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConsList
argument_list|<
name|E
argument_list|>
name|c
init|=
name|this
init|;
condition|;
name|c
operator|=
operator|(
name|ConsList
argument_list|<
name|E
argument_list|>
operator|)
name|c
operator|.
name|rest
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|c
operator|.
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|c
operator|.
name|rest
operator|instanceof
name|ConsList
operator|)
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|rest
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|()
block|{
return|return
name|toList
argument_list|()
operator|.
name|listIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|toList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|toList
argument_list|()
operator|.
name|listIterator
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|toList
argument_list|()
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
annotation|@
name|Nonnull
name|T
index|[]
name|a
parameter_list|)
block|{
specifier|final
name|int
name|s
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|>
name|a
operator|.
name|length
condition|)
block|{
name|a
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|a
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|s
operator|<
name|a
operator|.
name|length
condition|)
block|{
name|a
index|[
name|s
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ConsList
name|c
init|=
name|this
init|;
condition|;
name|c
operator|=
operator|(
name|ConsList
operator|)
name|c
operator|.
name|rest
control|)
block|{
comment|//noinspection unchecked
name|a
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|T
operator|)
name|c
operator|.
name|first
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|c
operator|.
name|rest
operator|instanceof
name|ConsList
operator|)
condition|)
block|{
name|Object
index|[]
name|a2
init|=
name|c
operator|.
name|rest
operator|.
name|toArray
argument_list|()
decl_stmt|;
comment|//noinspection SuspiciousSystemArraycopy
name|System
operator|.
name|arraycopy
argument_list|(
name|a2
argument_list|,
literal|0
argument_list|,
name|a
argument_list|,
name|i
argument_list|,
name|a2
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
block|}
block|}
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|toList
argument_list|()
operator|.
name|indexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|toList
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End ConsList.java
end_comment

end_unit

