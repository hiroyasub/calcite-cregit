begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Deterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Hints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|SemiStrict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Strict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|SpatialType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|algorithm
operator|.
name|InteriorPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|algorithm
operator|.
name|MinimumBoundingCircle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|algorithm
operator|.
name|MinimumDiameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|densify
operator|.
name|Densifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Coordinate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|CoordinateSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryComponentFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|LineSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|LineString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|LinearRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiLineString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiPolygon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|OctagonalEnvelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Polygon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|PrecisionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|util
operator|.
name|AffineTransformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|util
operator|.
name|GeometryEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|util
operator|.
name|GeometryFixer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|linearref
operator|.
name|LengthIndexedLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|operation
operator|.
name|buffer
operator|.
name|BufferOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|operation
operator|.
name|buffer
operator|.
name|BufferParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|operation
operator|.
name|buffer
operator|.
name|OffsetCurve
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|operation
operator|.
name|distance
operator|.
name|DistanceOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|operation
operator|.
name|linemerge
operator|.
name|LineMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|operation
operator|.
name|overlay
operator|.
name|snap
operator|.
name|GeometrySnapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|operation
operator|.
name|polygonize
operator|.
name|Polygonizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|precision
operator|.
name|GeometryPrecisionReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|simplify
operator|.
name|DouglasPeuckerSimplifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|simplify
operator|.
name|TopologyPreservingSimplifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|triangulate
operator|.
name|DelaunayTriangulationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|triangulate
operator|.
name|polygon
operator|.
name|ConstrainedDelaunayTriangulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|triangulate
operator|.
name|quadedge
operator|.
name|QuadEdgeSubdivision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|triangulate
operator|.
name|tri
operator|.
name|Tri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|util
operator|.
name|GeometricShapeFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|GEOMETRY_FACTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|NO_SRID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|asEwkt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|asGeoJson
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|asGml
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|asWkb
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|asWkt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|fromEwkt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|fromGeoJson
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|fromGml
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|fromWkb
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|fromWkt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Helper methods to implement spatial type (ST) functions in generated code.  *  *<p>Remaining tasks:  *  *<ul>  *<li>Determine type code for  *   {@link org.apache.calcite.sql.type.ExtraSqlTypes#GEOMETRY}  *<li>Should we create aliases for functions in upper-case?  *   Without ST_ prefix?  *<li>Consider adding spatial literals, e.g. `GEOMETRY 'POINT (30 10)'`  *<li>Integer arguments, e.g. SELECT ST_MakePoint(1, 2, 1.5),  *     ST_MakePoint(1, 2)  *<li>Are GEOMETRY values comparable? If so add ORDER BY test  *<li>We have to add 'Z' to create 3D objects. This is inconsistent with  *   PostGIS. Who is right? At least document the difference.  *<li>Should add GeometryEngine.intersects; similar to disjoint etc.  *<li>Make {@link #ST_MakeLine(Geometry, Geometry)} varargs</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"WeakerAccess"
block|,
literal|"unused"
block|}
argument_list|)
annotation|@
name|Deterministic
annotation|@
name|Strict
annotation|@
name|Experimental
specifier|public
class|class
name|SpatialTypeFunctions
block|{
specifier|private
name|SpatialTypeFunctions
parameter_list|()
block|{
block|}
comment|// Geometry conversion functions (2D)
specifier|public
specifier|static
annotation|@
name|Nullable
name|ByteString
name|ST_AsBinary
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
name|ST_AsWKB
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|ST_AsEWKT
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
name|asEwkt
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|ST_AsGeoJSON
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
name|asGeoJson
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|ST_AsGML
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
name|asGml
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|ST_AsText
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
name|ST_AsWKT
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|ByteString
name|ST_AsEWKB
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
name|ST_AsWKB
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|ByteString
name|ST_AsWKB
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
name|asWkb
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|ST_AsWKT
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
name|asWkt
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_Force2D
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
name|Function
argument_list|<
name|Coordinate
argument_list|,
name|Coordinate
argument_list|>
name|transform
init|=
name|coordinate
lambda|->
operator|new
name|Coordinate
argument_list|(
name|coordinate
operator|.
name|getX
argument_list|()
argument_list|,
name|coordinate
operator|.
name|getY
argument_list|()
argument_list|)
decl_stmt|;
name|CoordinateTransformer
name|transformer
init|=
operator|new
name|CoordinateTransformer
argument_list|(
name|transform
argument_list|)
decl_stmt|;
return|return
name|transformer
operator|.
name|transform
argument_list|(
name|geometry
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromEWKB
parameter_list|(
name|ByteString
name|ewkb
parameter_list|)
block|{
return|return
name|ST_GeomFromWKB
argument_list|(
name|ewkb
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromEWKT
parameter_list|(
name|String
name|ewkt
parameter_list|)
block|{
return|return
name|fromEwkt
argument_list|(
name|ewkt
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromGeoJSON
parameter_list|(
name|String
name|geojson
parameter_list|)
block|{
return|return
name|fromGeoJson
argument_list|(
name|geojson
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromGML
parameter_list|(
name|String
name|gml
parameter_list|)
block|{
return|return
name|ST_GeomFromGML
argument_list|(
name|gml
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromGML
parameter_list|(
name|String
name|gml
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|fromGml
argument_list|(
name|gml
argument_list|)
decl_stmt|;
name|geometry
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|geometry
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromText
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
return|return
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
return|return
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|,
name|srid
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromWKB
parameter_list|(
name|ByteString
name|wkb
parameter_list|)
block|{
return|return
name|fromWkb
argument_list|(
name|wkb
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromWKB
parameter_list|(
name|ByteString
name|wkb
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|fromWkb
argument_list|(
name|wkb
argument_list|)
decl_stmt|;
name|geometry
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|geometry
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromWKT
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
return|return
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromWKT
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|fromWkt
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
name|geometry
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|geometry
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_LineFromText
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|LineString
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_LineFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|LineString
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_LineFromWKB
parameter_list|(
name|ByteString
name|wkb
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKB
argument_list|(
name|wkb
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|LineString
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_LineFromWKB
parameter_list|(
name|ByteString
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKB
argument_list|(
name|wkt
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|LineString
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MLineFromText
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|MultiLineString
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MLineFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|MultiLineString
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MPointFromText
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|MultiPoint
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MPointFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|MultiPoint
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MPolyFromText
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|MultiPolygon
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MPolyFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|MultiPolygon
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PointFromText
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|Point
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PointFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|Point
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PointFromWKB
parameter_list|(
name|ByteString
name|wkb
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKB
argument_list|(
name|wkb
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|Point
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PointFromWKB
parameter_list|(
name|ByteString
name|wkb
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKB
argument_list|(
name|wkb
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|Point
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PolyFromText
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|Polygon
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PolyFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKT
argument_list|(
name|wkt
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|Polygon
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PolyFromWKB
parameter_list|(
name|ByteString
name|wkb
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKB
argument_list|(
name|wkb
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|Polygon
condition|?
name|geometry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PolyFromWKB
parameter_list|(
name|ByteString
name|wkb
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geometry
init|=
name|ST_GeomFromWKB
argument_list|(
name|wkb
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|instanceof
name|Polygon
condition|?
name|geometry
else|:
literal|null
return|;
block|}
comment|/**    * Reduces the precision of a {@code geom} to the provided {@code gridSize}.    */
specifier|public
specifier|static
name|Geometry
name|ST_ReducePrecision
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|gridSize
parameter_list|)
block|{
name|PrecisionModel
name|precisionModel
init|=
operator|new
name|PrecisionModel
argument_list|(
literal|1
operator|/
name|gridSize
operator|.
name|doubleValue
argument_list|()
argument_list|)
decl_stmt|;
name|GeometryPrecisionReducer
name|reducer
init|=
operator|new
name|GeometryPrecisionReducer
argument_list|(
name|precisionModel
argument_list|)
decl_stmt|;
name|reducer
operator|.
name|setPointwise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|reducer
operator|.
name|reduce
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Converts the coordinates of a {@code geom} into a MULTIPOINT.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_ToMultiPoint
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|CoordinateSequence
name|coordinateSequence
init|=
name|GEOMETRY_FACTORY
operator|.
name|getCoordinateSequenceFactory
argument_list|()
operator|.
name|create
argument_list|(
name|geom
operator|.
name|getCoordinates
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createMultiPoint
argument_list|(
name|coordinateSequence
argument_list|)
return|;
block|}
comment|/**    * Converts the a {@code geom} into a MULTILINESTRING.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_ToMultiLine
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|geom
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|LineString
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|geom
operator|.
name|apply
argument_list|(
operator|(
name|GeometryComponentFilter
operator|)
name|inputGeom
lambda|->
block|{
if|if
condition|(
name|inputGeom
operator|instanceof
name|LineString
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createLineString
argument_list|(
name|inputGeom
operator|.
name|getCoordinates
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|lines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|factory
operator|.
name|createMultiLineString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|factory
operator|.
name|createMultiLineString
argument_list|(
name|lines
operator|.
name|toArray
argument_list|(
operator|new
name|LineString
index|[
name|lines
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Converts a {@code geom} into a set of distinct segments stored in a MULTILINESTRING.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_ToMultiSegments
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|geom
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|LineString
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|geom
operator|.
name|apply
argument_list|(
operator|(
name|GeometryComponentFilter
operator|)
name|inputGeom
lambda|->
block|{
if|if
condition|(
name|inputGeom
operator|instanceof
name|LineString
condition|)
block|{
name|Coordinate
index|[]
name|coordinates
init|=
name|inputGeom
operator|.
name|getCoordinates
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|coordinates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Coordinate
index|[]
name|pair
init|=
operator|new
name|Coordinate
index|[]
block|{
name|coordinates
index|[
name|i
operator|-
literal|1
index|]
operator|,
name|coordinates
index|[
name|i
index|]
block|}
empty_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createLineString
argument_list|(
name|pair
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|lines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|factory
operator|.
name|createMultiLineString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|factory
operator|.
name|createMultiLineString
argument_list|(
name|lines
operator|.
name|toArray
argument_list|(
operator|new
name|LineString
index|[
name|lines
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// Geometry conversion functions (3D)
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_Force3D
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
name|Function
argument_list|<
name|Coordinate
argument_list|,
name|Coordinate
argument_list|>
name|transform
init|=
name|coordinate
lambda|->
operator|new
name|Coordinate
argument_list|(
name|coordinate
operator|.
name|getX
argument_list|()
argument_list|,
name|coordinate
operator|.
name|getY
argument_list|()
argument_list|,
name|Double
operator|.
name|isNaN
argument_list|(
name|coordinate
operator|.
name|getZ
argument_list|()
argument_list|)
condition|?
literal|0d
else|:
name|coordinate
operator|.
name|getZ
argument_list|()
argument_list|)
decl_stmt|;
name|CoordinateTransformer
name|transformer
init|=
operator|new
name|CoordinateTransformer
argument_list|(
name|transform
argument_list|)
decl_stmt|;
return|return
name|transformer
operator|.
name|transform
argument_list|(
name|geometry
argument_list|)
return|;
block|}
comment|// Geometry creation functions ==============================================
comment|/**    * Calculates a regular grid of polygons based on {@code geom}.    */
specifier|private
specifier|static
name|void
name|ST_MakeGrid
parameter_list|(
specifier|final
name|Geometry
name|geom
parameter_list|,
specifier|final
name|BigDecimal
name|deltaX
parameter_list|,
specifier|final
name|BigDecimal
name|deltaY
parameter_list|)
block|{
comment|// This is a dummy function. We cannot include table functions in this
comment|// package, because they have too many dependencies. See the real definition
comment|// in SqlSpatialTypeFunctions.
block|}
comment|/**    * Calculates a regular grid of points based on {@code geom}.    */
specifier|private
specifier|static
name|void
name|ST_MakeGridPoints
parameter_list|(
specifier|final
name|Geometry
name|geom
parameter_list|,
specifier|final
name|BigDecimal
name|deltaX
parameter_list|,
specifier|final
name|BigDecimal
name|deltaY
parameter_list|)
block|{
comment|// This is a dummy function. We cannot include table functions in this
comment|// package, because they have too many dependencies. See the real definition
comment|// in SqlSpatialTypeFunctions.
block|}
comment|// Geometry creation functions (2D)
comment|/**    * Returns the minimum bounding circle of {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_BoundingCircle
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
operator|new
name|MinimumBoundingCircle
argument_list|(
name|geom
argument_list|)
operator|.
name|getCircle
argument_list|()
return|;
block|}
comment|/**    * Expands {@code geom}'s envelope.    */
specifier|public
specifier|static
name|Geometry
name|ST_Expand
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|distance
parameter_list|)
block|{
name|Envelope
name|envelope
init|=
name|geom
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
name|envelope
operator|.
name|expandBy
argument_list|(
name|distance
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|geom
operator|.
name|getFactory
argument_list|()
operator|.
name|toGeometry
argument_list|(
name|envelope
argument_list|)
return|;
block|}
comment|/**    * Makes an ellipse.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakeEllipse
parameter_list|(
name|Geometry
name|point
parameter_list|,
name|BigDecimal
name|width
parameter_list|,
name|BigDecimal
name|height
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|point
operator|instanceof
name|Point
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GeometricShapeFactory
name|factory
init|=
operator|new
name|GeometricShapeFactory
argument_list|(
name|point
operator|.
name|getFactory
argument_list|()
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setCentre
argument_list|(
name|point
operator|.
name|getCoordinate
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWidth
argument_list|(
name|width
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setHeight
argument_list|(
name|height
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|factory
operator|.
name|createEllipse
argument_list|()
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|,
name|Geometry
name|hole2
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|,
name|hole2
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|,
name|Geometry
name|hole2
parameter_list|,
name|Geometry
name|hole3
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|,
name|hole2
argument_list|,
name|hole3
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|,
name|Geometry
name|hole2
parameter_list|,
name|Geometry
name|hole3
parameter_list|,
name|Geometry
name|hole4
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|,
name|hole2
argument_list|,
name|hole3
argument_list|,
name|hole4
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|,
name|Geometry
name|hole2
parameter_list|,
name|Geometry
name|hole3
parameter_list|,
name|Geometry
name|hole4
parameter_list|,
name|Geometry
name|hole5
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|,
name|hole2
argument_list|,
name|hole3
argument_list|,
name|hole4
argument_list|,
name|hole5
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|,
name|Geometry
name|hole2
parameter_list|,
name|Geometry
name|hole3
parameter_list|,
name|Geometry
name|hole4
parameter_list|,
name|Geometry
name|hole5
parameter_list|,
name|Geometry
name|hole6
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|,
name|hole2
argument_list|,
name|hole3
argument_list|,
name|hole4
argument_list|,
name|hole5
argument_list|,
name|hole6
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|,
name|Geometry
name|hole2
parameter_list|,
name|Geometry
name|hole3
parameter_list|,
name|Geometry
name|hole4
parameter_list|,
name|Geometry
name|hole5
parameter_list|,
name|Geometry
name|hole6
parameter_list|,
name|Geometry
name|hole7
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|,
name|hole2
argument_list|,
name|hole3
argument_list|,
name|hole4
argument_list|,
name|hole5
argument_list|,
name|hole6
argument_list|,
name|hole7
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|,
name|Geometry
name|hole2
parameter_list|,
name|Geometry
name|hole3
parameter_list|,
name|Geometry
name|hole4
parameter_list|,
name|Geometry
name|hole5
parameter_list|,
name|Geometry
name|hole6
parameter_list|,
name|Geometry
name|hole7
parameter_list|,
name|Geometry
name|hole8
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|,
name|hole2
argument_list|,
name|hole3
argument_list|,
name|hole4
argument_list|,
name|hole5
argument_list|,
name|hole6
argument_list|,
name|hole7
argument_list|,
name|hole8
argument_list|)
return|;
block|}
comment|/**    * Makes a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MakePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
name|hole0
parameter_list|,
name|Geometry
name|hole1
parameter_list|,
name|Geometry
name|hole2
parameter_list|,
name|Geometry
name|hole3
parameter_list|,
name|Geometry
name|hole4
parameter_list|,
name|Geometry
name|hole5
parameter_list|,
name|Geometry
name|hole6
parameter_list|,
name|Geometry
name|hole7
parameter_list|,
name|Geometry
name|hole8
parameter_list|,
name|Geometry
name|hole9
parameter_list|)
block|{
return|return
name|makePolygon
argument_list|(
name|shell
argument_list|,
name|hole0
argument_list|,
name|hole1
argument_list|,
name|hole2
argument_list|,
name|hole3
argument_list|,
name|hole4
argument_list|,
name|hole5
argument_list|,
name|hole6
argument_list|,
name|hole7
argument_list|,
name|hole8
argument_list|,
name|hole9
argument_list|)
return|;
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
name|Geometry
name|makePolygon
parameter_list|(
name|Geometry
name|shell
parameter_list|,
name|Geometry
modifier|...
name|holes
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|shell
operator|instanceof
name|LineString
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only supports LINESTRINGs."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
operator|(
name|LineString
operator|)
name|shell
operator|)
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The LINESTRING must be closed."
argument_list|)
throw|;
block|}
for|for
control|(
name|Geometry
name|hole
range|:
name|holes
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|hole
operator|instanceof
name|LineString
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only supports LINESTRINGs."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
operator|(
name|LineString
operator|)
name|hole
operator|)
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The LINESTRING must be closed."
argument_list|)
throw|;
block|}
block|}
name|LinearRing
name|shellRing
init|=
name|shell
operator|.
name|getFactory
argument_list|()
operator|.
name|createLinearRing
argument_list|(
name|shell
operator|.
name|getCoordinates
argument_list|()
argument_list|)
decl_stmt|;
name|LinearRing
index|[]
name|holeRings
init|=
operator|new
name|LinearRing
index|[
name|holes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|holes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|holeRings
index|[
name|i
index|]
operator|=
name|holes
index|[
name|i
index|]
operator|.
name|getFactory
argument_list|()
operator|.
name|createLinearRing
argument_list|(
name|holes
index|[
name|i
index|]
operator|.
name|getCoordinates
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|shell
operator|.
name|getFactory
argument_list|()
operator|.
name|createPolygon
argument_list|(
name|shellRing
argument_list|,
name|holeRings
argument_list|)
return|;
block|}
comment|/**    * Returns the minimum diameter of {@code geom}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MinimumDiameter
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
operator|new
name|MinimumDiameter
argument_list|(
name|geom
argument_list|)
operator|.
name|getDiameter
argument_list|()
return|;
block|}
comment|/**    * Returns the minimum rectangle enclosing {@code geom}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MinimumRectangle
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
operator|new
name|MinimumDiameter
argument_list|(
name|geom
argument_list|)
operator|.
name|getMinimumRectangle
argument_list|()
return|;
block|}
comment|/**    * Returns the octagonal envelope of {@code geom}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_OctagonalEnvelope
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
operator|new
name|OctagonalEnvelope
argument_list|(
name|geom
argument_list|)
operator|.
name|toGeometry
argument_list|(
name|geom
operator|.
name|getFactory
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Expands {@code geom}'s envelope.    */
specifier|public
specifier|static
name|Geometry
name|ST_Expand
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|deltaX
parameter_list|,
name|BigDecimal
name|deltaY
parameter_list|)
block|{
name|Envelope
name|envelope
init|=
name|geom
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
name|envelope
operator|.
name|expandBy
argument_list|(
name|deltaX
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|deltaY
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|geom
operator|.
name|getFactory
argument_list|()
operator|.
name|toGeometry
argument_list|(
name|envelope
argument_list|)
return|;
block|}
comment|/**    * Creates a rectangular Polygon.    */
specifier|public
specifier|static
name|Geometry
name|ST_MakeEnvelope
parameter_list|(
name|BigDecimal
name|xMin
parameter_list|,
name|BigDecimal
name|yMin
parameter_list|,
name|BigDecimal
name|xMax
parameter_list|,
name|BigDecimal
name|yMax
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geom
init|=
name|ST_GeomFromText
argument_list|(
literal|"POLYGON(("
operator|+
name|xMin
operator|+
literal|" "
operator|+
name|yMin
operator|+
literal|", "
operator|+
name|xMin
operator|+
literal|" "
operator|+
name|yMax
operator|+
literal|", "
operator|+
name|xMax
operator|+
literal|" "
operator|+
name|yMax
operator|+
literal|", "
operator|+
name|xMax
operator|+
literal|" "
operator|+
name|yMin
operator|+
literal|", "
operator|+
name|xMin
operator|+
literal|" "
operator|+
name|yMin
operator|+
literal|"))"
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|geom
argument_list|,
literal|"geom"
argument_list|)
return|;
block|}
comment|/**    * Creates a rectangular Polygon.    */
specifier|public
specifier|static
name|Geometry
name|ST_MakeEnvelope
parameter_list|(
name|BigDecimal
name|xMin
parameter_list|,
name|BigDecimal
name|yMin
parameter_list|,
name|BigDecimal
name|xMax
parameter_list|,
name|BigDecimal
name|yMax
parameter_list|)
block|{
return|return
name|ST_MakeEnvelope
argument_list|(
name|xMin
argument_list|,
name|yMin
argument_list|,
name|xMax
argument_list|,
name|yMax
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
comment|/**    * Creates a line-string from the given POINTs (or MULTIPOINTs).    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|Geometry
name|geom3
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom3
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|Geometry
name|geom3
parameter_list|,
name|Geometry
name|geom4
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom3
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom4
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|Geometry
name|geom3
parameter_list|,
name|Geometry
name|geom4
parameter_list|,
name|Geometry
name|geom5
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom3
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom4
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom5
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|Geometry
name|geom3
parameter_list|,
name|Geometry
name|geom4
parameter_list|,
name|Geometry
name|geom5
parameter_list|,
name|Geometry
name|geom6
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom3
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom4
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom5
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom6
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
comment|/**    * Alias for {@link #ST_Point(BigDecimal, BigDecimal)}.    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_POINT"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakePoint
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|)
block|{
return|return
name|ST_Point
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
comment|/**    * Alias for {@link #ST_Point(BigDecimal, BigDecimal, BigDecimal)}.    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_POINT3"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakePoint
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|,
name|BigDecimal
name|z
parameter_list|)
block|{
return|return
name|ST_Point
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
block|}
comment|/**    * Constructs a 2D point from coordinates.    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_POINT"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_Point
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|)
block|{
comment|// NOTE: Combine the double and BigDecimal variants of this function
return|return
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
operator|new
name|Coordinate
argument_list|(
name|x
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|y
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Constructs a 3D point from coordinates.    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_POINT3"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_Point
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|,
name|BigDecimal
name|z
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
operator|new
name|Coordinate
argument_list|(
name|x
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|y
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|z
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|g
return|;
block|}
comment|// Geometry properties (2D)
comment|/**    * Returns the minimum bounding box that encloses geom as a Geometry.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_Extent
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
comment|// Note: check whether the extent and the envelope are the same.
return|return
name|geom
operator|.
name|getEnvelope
argument_list|()
return|;
block|}
comment|/**    * Returns the nth geometry of a geometry collection.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeometryN
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|geom
operator|instanceof
name|GeometryCollection
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|geom
operator|.
name|getGeometryN
argument_list|(
name|n
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns the exterior ring of {@code geom}, or null if {@code geom} is not a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_ExteriorRing
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|instanceof
name|Polygon
condition|)
block|{
return|return
operator|(
operator|(
name|Polygon
operator|)
name|geom
operator|)
operator|.
name|getExteriorRing
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the first point of {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_EndPoint
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|ST_PointN
argument_list|(
name|geom
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns the nth interior ring of {@code geom}, or null if {@code geom} is not a polygon.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_InteriorRing
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|instanceof
name|Polygon
condition|)
block|{
return|return
operator|(
operator|(
name|Polygon
operator|)
name|geom
operator|)
operator|.
name|getInteriorRingN
argument_list|(
name|n
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns whether {@code geom} is a closed LINESTRING or MULTILINESTRING.    */
specifier|public
specifier|static
name|boolean
name|ST_IsClosed
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|instanceof
name|LineString
condition|)
block|{
return|return
operator|(
operator|(
name|LineString
operator|)
name|geom
operator|)
operator|.
name|isClosed
argument_list|()
return|;
block|}
if|if
condition|(
name|geom
operator|instanceof
name|MultiLineString
condition|)
block|{
return|return
operator|(
operator|(
name|MultiLineString
operator|)
name|geom
operator|)
operator|.
name|isClosed
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether {@code geom} has at least one z-coordinate.    */
specifier|public
specifier|static
name|boolean
name|ST_Is3D
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|ST_CoordDim
argument_list|(
name|geom
argument_list|)
operator|==
literal|3
return|;
block|}
comment|/**    * Returns true if geom is empty.    */
specifier|public
specifier|static
name|boolean
name|ST_IsEmpty
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Returns true if geom is rectangle.    */
specifier|public
specifier|static
name|boolean
name|ST_IsRectangle
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|isRectangle
argument_list|()
return|;
block|}
comment|/**    * Returns whether {@code geom} is a closed and simple linestring or multi-linestring.    */
specifier|public
specifier|static
name|boolean
name|ST_IsRing
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|instanceof
name|LineString
condition|)
block|{
return|return
operator|(
operator|(
name|LineString
operator|)
name|geom
operator|)
operator|.
name|isClosed
argument_list|()
operator|&&
name|geom
operator|.
name|isSimple
argument_list|()
return|;
block|}
if|if
condition|(
name|geom
operator|instanceof
name|MultiLineString
condition|)
block|{
return|return
operator|(
operator|(
name|MultiLineString
operator|)
name|geom
operator|)
operator|.
name|isClosed
argument_list|()
operator|&&
name|geom
operator|.
name|isSimple
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns true if geom is simple.    */
specifier|public
specifier|static
name|boolean
name|ST_IsSimple
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|isSimple
argument_list|()
return|;
block|}
comment|/**    * Returns true if geom is valid.    */
specifier|public
specifier|static
name|boolean
name|ST_IsValid
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|isValid
argument_list|()
return|;
block|}
comment|/**    * Returns the number of points in {@code geom}.    */
specifier|public
specifier|static
name|int
name|ST_NPoints
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|ST_NumPoints
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Returns the number of geometries in {@code geom} (1 if it is not a GEOMETRYCOLLECTION).    */
specifier|public
specifier|static
name|int
name|ST_NumGeometries
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getNumGeometries
argument_list|()
return|;
block|}
comment|/**    * Returns the number of interior rings of {@code geom}.    */
specifier|public
specifier|static
name|int
name|ST_NumInteriorRing
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|ST_NumInteriorRings
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Returns the number of interior rings of {@code geom}.    */
specifier|public
specifier|static
name|int
name|ST_NumInteriorRings
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|int
index|[]
name|num
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|geom
operator|.
name|apply
argument_list|(
operator|new
name|GeometryFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|instanceof
name|Polygon
condition|)
block|{
name|num
index|[
literal|0
index|]
operator|+=
operator|(
operator|(
name|Polygon
operator|)
name|geom
operator|)
operator|.
name|getNumInteriorRing
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|num
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Returns the number of points in {@code geom}.    */
specifier|public
specifier|static
name|int
name|ST_NumPoints
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getCoordinates
argument_list|()
operator|.
name|length
return|;
block|}
comment|/**    * Returns the nth point of a {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_PointN
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|Coordinate
index|[]
name|coordinates
init|=
name|geom
operator|.
name|getCoordinates
argument_list|()
decl_stmt|;
name|int
name|i
init|=
operator|(
name|coordinates
operator|.
name|length
operator|+
operator|(
name|n
operator|%
name|coordinates
operator|.
name|length
operator|)
operator|)
operator|%
name|coordinates
operator|.
name|length
decl_stmt|;
return|return
name|geom
operator|.
name|getFactory
argument_list|()
operator|.
name|createPoint
argument_list|(
name|coordinates
index|[
name|i
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns an interior or boundary point of {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_PointOnSurface
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getFactory
argument_list|()
operator|.
name|createPoint
argument_list|(
name|InteriorPoint
operator|.
name|getInteriorPoint
argument_list|(
name|geom
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns SRID value or 0 if input Geometry does not have one.    */
specifier|public
specifier|static
name|int
name|ST_SRID
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getSRID
argument_list|()
return|;
block|}
comment|/**    * Returns the first point of {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_StartPoint
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|ST_PointN
argument_list|(
name|geom
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Return the X coordinate of the point, or NULL if not available. Input must be a point..    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_X
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|instanceof
name|Point
condition|?
operator|(
operator|(
name|Point
operator|)
name|geom
operator|)
operator|.
name|getX
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * Returns the X maxima of a 2D or 3D bounding box or a geometry.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_XMax
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxX
argument_list|()
return|;
block|}
comment|/**    * Returns the X minima of a 2D or 3D bounding box or a geometry.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_XMin
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinX
argument_list|()
return|;
block|}
comment|/**    * Returns the y-value of the first coordinate of {@code geom}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_Y
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|instanceof
name|Point
condition|?
operator|(
operator|(
name|Point
operator|)
name|geom
operator|)
operator|.
name|getY
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * Returns the Y maxima of a 2D or 3D bounding box or a geometry.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_YMax
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxY
argument_list|()
return|;
block|}
comment|/**    * Returns the Y minima of a 2D or 3D bounding box or a geometry.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_YMin
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinY
argument_list|()
return|;
block|}
comment|/**    * Returns the z-value of the first coordinate of {@code geom}.    */
specifier|public
specifier|static
name|Double
name|ST_Z
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|.
name|getCoordinate
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|geom
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getZ
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Double
operator|.
name|NaN
return|;
block|}
block|}
comment|/**    * Returns the maximum z-value of {@code geom}.    */
specifier|public
specifier|static
name|Double
name|ST_ZMax
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|geom
operator|.
name|getCoordinates
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|c
lambda|->
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|c
operator|.
name|getZ
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getZ
argument_list|()
argument_list|)
operator|.
name|max
argument_list|(
name|Double
operator|::
name|compareTo
argument_list|)
operator|.
name|orElse
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
return|;
block|}
comment|/**    * Returns the minimum z-value of {@code geom}.    */
specifier|public
specifier|static
name|Double
name|ST_ZMin
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|geom
operator|.
name|getCoordinates
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|c
lambda|->
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|c
operator|.
name|getZ
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getZ
argument_list|()
argument_list|)
operator|.
name|min
argument_list|(
name|Double
operator|::
name|compareTo
argument_list|)
operator|.
name|orElse
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
return|;
block|}
comment|// Geometry properties (2D)
comment|/**    * Returns the boundary of {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Boundary
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getBoundary
argument_list|()
return|;
block|}
comment|/**    * Returns the centroid of {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Centroid
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getCentroid
argument_list|()
return|;
block|}
comment|/**    * Returns the dimension of the coordinates of {@code geom}.    */
specifier|public
specifier|static
name|int
name|ST_CoordDim
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|Coordinate
name|coordinate
init|=
name|geom
operator|.
name|getCoordinate
argument_list|()
decl_stmt|;
if|if
condition|(
name|coordinate
operator|!=
literal|null
operator|&&
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|coordinate
operator|.
name|getZ
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|3
return|;
block|}
return|return
literal|2
return|;
block|}
comment|/**    * Returns the dimension of {@code geom}.    */
specifier|public
specifier|static
name|int
name|ST_Dimension
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getDimension
argument_list|()
return|;
block|}
comment|/**    * Returns the distance between {@code geom1} and {@code geom2}.    */
specifier|public
specifier|static
name|double
name|ST_Distance
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|distance
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns the type of {@code geom}.    */
specifier|public
specifier|static
name|String
name|ST_GeometryType
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|SpatialType
operator|.
name|fromGeometry
argument_list|(
name|geom
argument_list|)
operator|.
name|name
argument_list|()
return|;
block|}
comment|/**    * Returns the OGC SFS type code of {@code geom}.    */
specifier|public
specifier|static
name|int
name|ST_GeometryTypeCode
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|SpatialType
operator|.
name|fromGeometry
argument_list|(
name|geom
argument_list|)
operator|.
name|code
argument_list|()
return|;
block|}
comment|/**    * Returns the minimum bounding box of {@code geom} (which may be a GEOMETRYCOLLECTION).    */
specifier|public
specifier|static
name|Geometry
name|ST_Envelope
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getEnvelope
argument_list|()
return|;
block|}
comment|/**    * Explodes the {@code geom} into multiple geometries.    */
specifier|private
specifier|static
name|void
name|ST_Explode
parameter_list|(
specifier|final
name|Geometry
name|geom
parameter_list|)
block|{
comment|// This is a dummy function. We cannot include table functions in this
comment|// package, because they have too many dependencies. See the real definition
comment|// in SqlSpatialTypeFunctions.
block|}
comment|// Geometry predicates ======================================================
comment|/**    * Returns whether {@code geom1} contains {@code geom2}.    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_CONTAINS"
block|}
argument_list|)
specifier|public
specifier|static
name|boolean
name|ST_Contains
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|contains
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} contains {@code geom2} but does not intersect its boundary.    */
specifier|public
specifier|static
name|boolean
name|ST_ContainsProperly
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|contains
argument_list|(
name|geom2
argument_list|)
operator|&&
operator|!
name|geom1
operator|.
name|crosses
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether no point in {@code geom1} is outside {@code geom2}.    */
specifier|public
specifier|static
name|boolean
name|ST_CoveredBy
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|coveredBy
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether no point in {@code geom2} is outside {@code geom1}.    */
specifier|public
specifier|static
name|boolean
name|ST_Covers
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|covers
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} crosses {@code geom2}.    */
specifier|public
specifier|static
name|boolean
name|ST_Crosses
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|crosses
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} and {@code geom2} are disjoint.    */
specifier|public
specifier|static
name|boolean
name|ST_Disjoint
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|disjoint
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether the envelope of {@code geom1} intersects the envelope of {@code geom2}.    */
specifier|public
specifier|static
name|boolean
name|ST_EnvelopesIntersect
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
specifier|final
name|Geometry
name|e1
init|=
name|geom1
operator|.
name|getEnvelope
argument_list|()
decl_stmt|;
specifier|final
name|Geometry
name|e2
init|=
name|geom2
operator|.
name|getEnvelope
argument_list|()
decl_stmt|;
return|return
name|e1
operator|.
name|intersects
argument_list|(
name|e2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} equals {@code geom2}.    */
specifier|public
specifier|static
name|boolean
name|ST_Equals
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|equals
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} intersects {@code geom2}.    */
specifier|public
specifier|static
name|boolean
name|ST_Intersects
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|intersects
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} equals {@code geom2} and their coordinates and component    * Geometries are listed in the same order.    */
specifier|public
specifier|static
name|boolean
name|ST_OrderingEquals
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|geom1
operator|.
name|equals
argument_list|(
name|geom2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Coordinate
index|[]
name|coordinates1
init|=
name|geom1
operator|.
name|getCoordinates
argument_list|()
decl_stmt|;
name|Coordinate
index|[]
name|coordinates2
init|=
name|geom2
operator|.
name|getCoordinates
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coordinates1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|coordinates1
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|coordinates2
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns {@code geom1} overlaps {@code geom2}.    */
specifier|public
specifier|static
name|boolean
name|ST_Overlaps
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|overlaps
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} touches {@code geom2}.    */
specifier|public
specifier|static
name|boolean
name|ST_Touches
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|touches
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} is within {@code geom2}.    */
specifier|public
specifier|static
name|boolean
name|ST_Within
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|within
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Returns whether {@code geom1} and {@code geom2} are within {@code distance} of each other.    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_DWITHIN"
block|}
argument_list|)
specifier|public
specifier|static
name|boolean
name|ST_DWithin
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
specifier|final
name|double
name|distance1
init|=
name|geom1
operator|.
name|distance
argument_list|(
name|geom2
argument_list|)
decl_stmt|;
return|return
name|distance1
operator|<=
name|distance
return|;
block|}
comment|// Geometry operators (2D and 3D) ===========================================
comment|/**    * Computes a buffer around {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Buffer
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|double
name|distance
parameter_list|,
name|String
name|bufferStyle
parameter_list|)
block|{
name|BufferStyle
name|style
init|=
operator|new
name|BufferStyle
argument_list|(
name|bufferStyle
argument_list|)
decl_stmt|;
name|BufferParameters
name|params
init|=
name|style
operator|.
name|asBufferParameters
argument_list|()
decl_stmt|;
name|double
name|sidedDistance
init|=
name|style
operator|.
name|asSidedDistance
argument_list|(
name|distance
argument_list|)
decl_stmt|;
name|Geometry
name|result
init|=
operator|new
name|BufferOp
argument_list|(
name|geom
argument_list|,
name|params
argument_list|)
operator|.
name|getResultGeometry
argument_list|(
name|sidedDistance
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Computes a buffer around {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Buffer
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
return|return
name|geom
operator|.
name|buffer
argument_list|(
name|distance
argument_list|)
return|;
block|}
comment|/**    * Computes a buffer around {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Buffer
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|double
name|distance
parameter_list|,
name|int
name|quadSegs
parameter_list|)
block|{
return|return
name|geom
operator|.
name|buffer
argument_list|(
name|distance
argument_list|,
name|quadSegs
argument_list|)
return|;
block|}
comment|/**    * Computes a buffer around {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Buffer
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|double
name|distance
parameter_list|,
name|int
name|quadSegs
parameter_list|,
name|int
name|endCapStyle
parameter_list|)
block|{
return|return
name|geom
operator|.
name|buffer
argument_list|(
name|distance
argument_list|,
name|quadSegs
argument_list|,
name|endCapStyle
argument_list|)
return|;
block|}
comment|/**    * Computes the smallest convex POLYGON that contains all the points of geom.    */
specifier|public
specifier|static
name|Geometry
name|ST_ConvexHull
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|convexHull
argument_list|()
return|;
block|}
comment|/**    * Computes the difference between geom1 and geom2.    */
specifier|public
specifier|static
name|Geometry
name|ST_Difference
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|difference
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Computes the symmetric difference between geom1 and geom2.    */
specifier|public
specifier|static
name|Geometry
name|ST_SymDifference
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|symDifference
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Computes the intersection between geom1 and geom2.    */
specifier|public
specifier|static
name|Geometry
name|ST_Intersection
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|intersection
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Computes an offset line for {@code linestring}.    */
specifier|public
specifier|static
name|Geometry
name|ST_OffsetCurve
parameter_list|(
name|Geometry
name|linestring
parameter_list|,
name|double
name|distance
parameter_list|,
name|String
name|bufferStyle
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|linestring
operator|instanceof
name|LineString
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ST_OffsetCurve only accepts LineString"
argument_list|)
throw|;
block|}
name|BufferStyle
name|style
init|=
operator|new
name|BufferStyle
argument_list|(
name|bufferStyle
argument_list|)
decl_stmt|;
name|BufferParameters
name|params
init|=
name|style
operator|.
name|asBufferParameters
argument_list|()
decl_stmt|;
name|double
name|sidedDistance
init|=
name|style
operator|.
name|asSidedDistance
argument_list|(
name|distance
argument_list|)
decl_stmt|;
name|Coordinate
index|[]
name|coordinates
init|=
name|OffsetCurve
operator|.
name|rawOffset
argument_list|(
operator|(
name|LineString
operator|)
name|linestring
argument_list|,
name|sidedDistance
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
name|coordinates
argument_list|)
return|;
block|}
comment|/**    * Returns the DE-9IM intersection matrix for geom1 and geom2.    */
specifier|public
specifier|static
name|String
name|ST_Relate
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|relate
argument_list|(
name|geom2
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns true if geom1 and geom2 are related by the intersection matrix specified by iMatrix.    */
specifier|public
specifier|static
name|boolean
name|ST_Relate
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|String
name|iMatrix
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|relate
argument_list|(
name|geom2
argument_list|,
name|iMatrix
argument_list|)
return|;
block|}
comment|/**    * Computes the union of {@code geom1} and {@code geom2}.    */
specifier|public
specifier|static
name|Geometry
name|ST_UnaryUnion
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|union
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/**    * Computes the union of the geometries in {@code geomCollection}.    */
annotation|@
name|SemiStrict
specifier|public
specifier|static
name|Geometry
name|ST_UnaryUnion
parameter_list|(
name|Geometry
name|geomCollection
parameter_list|)
block|{
return|return
name|geomCollection
operator|.
name|union
argument_list|()
return|;
block|}
comment|// Geometry projection functions ============================================
comment|/**    * Transforms {@code geom} from one coordinate reference system (CRS) to the CRS specified by    * {@code srid}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Transform
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
try|try
block|{
name|ProjectionTransformer
name|projectionTransformer
init|=
operator|new
name|ProjectionTransformer
argument_list|(
name|geom
operator|.
name|getSRID
argument_list|()
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|projectionTransformer
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|proj4jEpsgIsMissing
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
comment|/**    * Returns a copy of {@code geom} with a new SRID.    */
specifier|public
specifier|static
name|Geometry
name|ST_SetSRID
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|geom
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|geom
return|;
block|}
comment|// Process Geometries
comment|/**    * Merges a collection of linear components to form a line-string of maximal length.    */
specifier|public
specifier|static
name|Geometry
name|ST_LineMerge
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|LineMerger
name|merger
init|=
operator|new
name|LineMerger
argument_list|()
decl_stmt|;
name|merger
operator|.
name|add
argument_list|(
name|geom
argument_list|)
expr_stmt|;
name|LineString
index|[]
name|geometries
init|=
operator|(
operator|(
name|Stream
argument_list|<
name|Object
argument_list|>
operator|)
name|merger
operator|.
name|getMergedLineStrings
argument_list|()
operator|.
name|stream
argument_list|()
operator|)
operator|.
name|map
argument_list|(
name|LineString
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|LineString
index|[
name|size
index|]
argument_list|)
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createMultiLineString
argument_list|(
name|geometries
argument_list|)
return|;
block|}
comment|/**    * Makes a valid geometry of a given invalid geometry.    */
specifier|public
specifier|static
name|Geometry
name|ST_MakeValid
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
return|return
operator|new
name|GeometryFixer
argument_list|(
name|geometry
argument_list|)
operator|.
name|getResult
argument_list|()
return|;
block|}
comment|/**    * Creates a multipolygon from the geometry.    */
specifier|public
specifier|static
name|Geometry
name|ST_Polygonize
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
name|Polygonizer
name|polygonizer
init|=
operator|new
name|Polygonizer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|polygonizer
operator|.
name|add
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
return|return
name|polygonizer
operator|.
name|getGeometry
argument_list|()
return|;
block|}
comment|/**    * Reduces the geometry's precision to n decimal places.    */
specifier|public
specifier|static
name|Geometry
name|ST_PrecisionReducer
parameter_list|(
name|Geometry
name|geometry
parameter_list|,
name|BigDecimal
name|decimal
parameter_list|)
block|{
name|double
name|scale
init|=
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
name|decimal
operator|.
name|doubleValue
argument_list|()
argument_list|)
decl_stmt|;
name|PrecisionModel
name|precisionModel
init|=
operator|new
name|PrecisionModel
argument_list|(
name|scale
argument_list|)
decl_stmt|;
name|GeometryPrecisionReducer
name|precisionReducer
init|=
operator|new
name|GeometryPrecisionReducer
argument_list|(
name|precisionModel
argument_list|)
decl_stmt|;
return|return
name|precisionReducer
operator|.
name|reduce
argument_list|(
name|geometry
argument_list|)
return|;
block|}
comment|/**    * Simplifies geom a geometry using the Douglas-Peuker algorithm.    */
specifier|public
specifier|static
name|Geometry
name|ST_Simplify
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|distance
parameter_list|)
block|{
name|DouglasPeuckerSimplifier
name|simplifier
init|=
operator|new
name|DouglasPeuckerSimplifier
argument_list|(
name|geom
argument_list|)
decl_stmt|;
name|simplifier
operator|.
name|setDistanceTolerance
argument_list|(
name|distance
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|simplifier
operator|.
name|getResultGeometry
argument_list|()
return|;
block|}
comment|/**    * Simplifies a geometry and preserves its topology.    */
specifier|public
specifier|static
name|Geometry
name|ST_SimplifyPreserveTopology
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|distance
parameter_list|)
block|{
name|TopologyPreservingSimplifier
name|simplifier
init|=
operator|new
name|TopologyPreservingSimplifier
argument_list|(
name|geom
argument_list|)
decl_stmt|;
name|simplifier
operator|.
name|setDistanceTolerance
argument_list|(
name|distance
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|simplifier
operator|.
name|getResultGeometry
argument_list|()
return|;
block|}
comment|/**    * Snaps geom1 and geom2 together with the given snapTolerance.    */
specifier|public
specifier|static
name|Geometry
name|ST_Snap
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|BigDecimal
name|snapTolerance
parameter_list|)
block|{
name|GeometrySnapper
name|snapper
init|=
operator|new
name|GeometrySnapper
argument_list|(
name|geom1
argument_list|)
decl_stmt|;
return|return
name|snapper
operator|.
name|snapTo
argument_list|(
name|geom2
argument_list|,
name|snapTolerance
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Splits {@code geom} by {@code blade}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Split
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|Geometry
name|blade
parameter_list|)
block|{
return|return
operator|new
name|SplitOperation
argument_list|(
name|geom
argument_list|,
name|blade
argument_list|)
operator|.
name|split
argument_list|()
return|;
block|}
comment|// Affine transformation functions (3D and 2D)
comment|/**    * Rotates geom counter-clockwise by angle (in radians) about the point origin.    */
specifier|public
specifier|static
name|Geometry
name|ST_Rotate
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|angle
parameter_list|)
block|{
name|AffineTransformation
name|transformation
init|=
operator|new
name|AffineTransformation
argument_list|()
decl_stmt|;
name|transformation
operator|.
name|rotate
argument_list|(
name|angle
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|transformation
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Rotates geom counter-clockwise by angle (in radians) about the point origin.    */
specifier|public
specifier|static
name|Geometry
name|ST_Rotate
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|angle
parameter_list|,
name|Geometry
name|origin
parameter_list|)
block|{
comment|// Note: check whether we can add support for the Point type.
if|if
condition|(
operator|!
operator|(
name|origin
operator|instanceof
name|Point
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The origin must be a point"
argument_list|)
throw|;
block|}
name|Point
name|point
init|=
operator|(
name|Point
operator|)
name|origin
decl_stmt|;
name|AffineTransformation
name|transformation
init|=
operator|new
name|AffineTransformation
argument_list|()
decl_stmt|;
name|transformation
operator|.
name|rotate
argument_list|(
name|angle
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|transformation
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Rotates geom counter-clockwise by angle (in radians) about the point origin.    */
specifier|public
specifier|static
name|Geometry
name|ST_Rotate
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|angle
parameter_list|,
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|)
block|{
name|AffineTransformation
name|transformation
init|=
operator|new
name|AffineTransformation
argument_list|()
decl_stmt|;
name|transformation
operator|.
name|rotate
argument_list|(
name|angle
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|x
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|y
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|transformation
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Scales geom Geometry by multiplying the ordinates by the indicated scale factors.    */
specifier|public
specifier|static
name|Geometry
name|ST_Scale
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|xFactor
parameter_list|,
name|BigDecimal
name|yFactor
parameter_list|)
block|{
name|AffineTransformation
name|transformation
init|=
operator|new
name|AffineTransformation
argument_list|()
decl_stmt|;
name|transformation
operator|.
name|scale
argument_list|(
name|xFactor
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|yFactor
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|transformation
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Translates geom by the vector (x, y).    */
specifier|public
specifier|static
name|Geometry
name|ST_Translate
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|)
block|{
name|AffineTransformation
name|transformation
init|=
operator|new
name|AffineTransformation
argument_list|()
decl_stmt|;
name|transformation
operator|.
name|translate
argument_list|(
name|x
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|y
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|Geometry
name|translated
init|=
name|transformation
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
decl_stmt|;
return|return
name|translated
return|;
block|}
comment|// Geometry editing functions (2D)
comment|/**    * Adds {@code point} to {@code linestring} at the end.    */
specifier|public
specifier|static
name|Geometry
name|ST_AddPoint
parameter_list|(
name|Geometry
name|linestring
parameter_list|,
name|Geometry
name|point
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|linestring
operator|instanceof
name|LineString
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only supports LINESTRING."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|point
operator|instanceof
name|Point
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only supports POINT."
argument_list|)
throw|;
block|}
name|LineString
name|lineString
init|=
operator|(
name|LineString
operator|)
name|linestring
decl_stmt|;
name|int
name|numPoints
init|=
name|lineString
operator|.
name|getNumPoints
argument_list|()
decl_stmt|;
return|return
operator|new
name|GeometryEditor
argument_list|()
operator|.
name|edit
argument_list|(
name|linestring
argument_list|,
operator|new
name|AddPointOperation
argument_list|(
name|point
argument_list|,
name|numPoints
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Adds {@code point} to {@code linestring} at a given {@code index}.    */
specifier|public
specifier|static
name|Geometry
name|ST_AddPoint
parameter_list|(
name|Geometry
name|linestring
parameter_list|,
name|Geometry
name|point
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|linestring
operator|instanceof
name|LineString
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only supports LINESTRING."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|point
operator|instanceof
name|Point
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only supports POINT."
argument_list|)
throw|;
block|}
return|return
operator|new
name|GeometryEditor
argument_list|()
operator|.
name|edit
argument_list|(
name|linestring
argument_list|,
operator|new
name|AddPointOperation
argument_list|(
name|point
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Densifies a {@code geom} by inserting extra vertices along the line segments.    */
specifier|public
specifier|static
name|Geometry
name|ST_Densify
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|tolerance
parameter_list|)
block|{
return|return
name|Densifier
operator|.
name|densify
argument_list|(
name|geom
argument_list|,
name|tolerance
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Flips the X and Y coordinates of the {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_FlipCoordinates
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|FlipCoordinatesTransformer
name|transformer
init|=
operator|new
name|FlipCoordinatesTransformer
argument_list|()
decl_stmt|;
return|return
name|transformer
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Returns the holes in the {@code geom} (which may be a GEOMETRYCOLLECTION).    */
specifier|public
specifier|static
name|Geometry
name|ST_Holes
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|List
argument_list|<
name|Geometry
argument_list|>
name|acc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|extractGeometryHoles
argument_list|(
name|geom
argument_list|,
name|acc
argument_list|)
expr_stmt|;
name|Geometry
index|[]
name|array
init|=
name|acc
operator|.
name|toArray
argument_list|(
operator|new
name|Geometry
index|[
name|acc
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createGeometryCollection
argument_list|(
name|array
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|extractGeometryHoles
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|List
argument_list|<
name|Geometry
argument_list|>
name|acc
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|instanceof
name|GeometryCollection
condition|)
block|{
name|GeometryCollection
name|geometryCollection
init|=
operator|(
name|GeometryCollection
operator|)
name|geom
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geometryCollection
operator|.
name|getNumGeometries
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Geometry
name|child
init|=
name|geometryCollection
operator|.
name|getGeometryN
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|extractGeometryHoles
argument_list|(
name|child
argument_list|,
name|acc
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|geom
operator|instanceof
name|Polygon
condition|)
block|{
name|Polygon
name|polygon
init|=
operator|(
name|Polygon
operator|)
name|geom
decl_stmt|;
name|extractPolygonHoles
argument_list|(
name|polygon
argument_list|,
name|acc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|extractPolygonHoles
parameter_list|(
name|Polygon
name|polygon
parameter_list|,
name|List
argument_list|<
name|Geometry
argument_list|>
name|acc
parameter_list|)
block|{
name|int
name|size
init|=
name|polygon
operator|.
name|getNumInteriorRing
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|acc
operator|.
name|add
argument_list|(
name|polygon
operator|.
name|getInteriorRingN
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Converts the {@code geom} to normal form.    */
specifier|public
specifier|static
name|Geometry
name|ST_Normalize
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|norm
argument_list|()
return|;
block|}
comment|/**    * Removes duplicated coordinates from the {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_RemoveRepeatedPoints
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
operator|new
name|RemoveRepeatedPointsTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Removes duplicated coordinates from the {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_RemoveRepeatedPoints
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|tolerance
parameter_list|)
block|{
return|return
operator|new
name|RemoveRepeatedPointsTransformer
argument_list|(
name|tolerance
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Removes the holes of the {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_RemoveHoles
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|RemoveHoleTransformer
name|transformer
init|=
operator|new
name|RemoveHoleTransformer
argument_list|()
decl_stmt|;
return|return
name|transformer
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/**    * Remove {@code point} at given {@code index} in {@code linestring}.    */
specifier|public
specifier|static
name|Geometry
name|ST_RemovePoint
parameter_list|(
name|Geometry
name|linestring
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|linestring
operator|instanceof
name|LineString
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only supports LINESTRING."
argument_list|)
throw|;
block|}
return|return
operator|new
name|GeometryEditor
argument_list|()
operator|.
name|edit
argument_list|(
name|linestring
argument_list|,
operator|new
name|RemovePointOperation
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Reverses the order of the coordinates of the {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Reverse
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|reverse
argument_list|()
return|;
block|}
comment|// Geometry editing functions (3D)
comment|/**    * Adds {@code zToAdd} to the z-coordinate of the {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_AddZ
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|zToAdd
parameter_list|)
block|{
return|return
operator|new
name|AddZTransformer
argument_list|(
name|zToAdd
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|// Geometry measurement functions
comment|/**    * Returns the area of the {@code geom}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_Area
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getArea
argument_list|()
return|;
block|}
comment|/**    * Returns the coordinate(s) of {@code geom} closest to {@code point}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_ClosestCoordinate
parameter_list|(
name|Geometry
name|point
parameter_list|,
name|Geometry
name|geom
parameter_list|)
block|{
name|List
argument_list|<
name|Coordinate
argument_list|>
name|closestCoordinates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|double
name|minDistance
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Coordinate
name|coordinate
range|:
name|geom
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
name|double
name|distance
init|=
name|point
operator|.
name|getCoordinate
argument_list|()
operator|.
name|distance
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|<
name|minDistance
condition|)
block|{
name|minDistance
operator|=
name|distance
expr_stmt|;
name|closestCoordinates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|closestCoordinates
operator|.
name|add
argument_list|(
name|coordinate
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distance
operator|==
name|minDistance
operator|&&
operator|!
name|closestCoordinates
operator|.
name|contains
argument_list|(
name|coordinate
argument_list|)
condition|)
block|{
name|closestCoordinates
operator|.
name|add
argument_list|(
name|coordinate
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|closestCoordinates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
name|closestCoordinates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|Coordinate
index|[]
name|coordinates
init|=
name|closestCoordinates
operator|.
name|toArray
argument_list|(
operator|new
name|Coordinate
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createMultiPointFromCoords
argument_list|(
name|coordinates
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the point of {@code geom1} closest to {@code geom2}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_ClosestPoint
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
name|DistanceOp
operator|.
name|nearestPoints
argument_list|(
name|geom1
argument_list|,
name|geom2
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns the coordinate(s) of {@code geom} furthest from {@code point}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_FurthestCoordinate
parameter_list|(
name|Geometry
name|point
parameter_list|,
name|Geometry
name|geom
parameter_list|)
block|{
name|List
argument_list|<
name|Coordinate
argument_list|>
name|closestCoordinates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|double
name|maxDistance
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Coordinate
name|coordinate
range|:
name|geom
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
name|double
name|distance
init|=
name|point
operator|.
name|getCoordinate
argument_list|()
operator|.
name|distance
argument_list|(
name|coordinate
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|>
name|maxDistance
condition|)
block|{
name|maxDistance
operator|=
name|distance
expr_stmt|;
name|closestCoordinates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|closestCoordinates
operator|.
name|add
argument_list|(
name|coordinate
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distance
operator|==
name|maxDistance
operator|&&
operator|!
name|closestCoordinates
operator|.
name|contains
argument_list|(
name|coordinate
argument_list|)
condition|)
block|{
name|closestCoordinates
operator|.
name|add
argument_list|(
name|coordinate
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|closestCoordinates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
name|closestCoordinates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|Coordinate
index|[]
name|coordinates
init|=
name|closestCoordinates
operator|.
name|toArray
argument_list|(
operator|new
name|Coordinate
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createMultiPointFromCoords
argument_list|(
name|coordinates
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the length of the {@code geom}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_Length
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getLength
argument_list|()
return|;
block|}
comment|/**    * Returns a MULTIPOINT containing points along the line segments of {@code geom}    * at {@code segmentLengthFraction} and {@code offsetDistance}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_LocateAlong
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|segmentLengthFraction
parameter_list|,
name|BigDecimal
name|offsetDistance
parameter_list|)
block|{
name|List
argument_list|<
name|Coordinate
argument_list|>
name|coordinates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geom
operator|.
name|getNumGeometries
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Geometry
name|geometry
init|=
name|geom
operator|.
name|getGeometryN
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Coordinate
index|[]
name|geometryCoordinates
init|=
name|geometry
operator|.
name|getCoordinates
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|geometryCoordinates
operator|.
name|length
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|Coordinate
name|c1
init|=
name|geometryCoordinates
index|[
name|j
index|]
decl_stmt|;
name|Coordinate
name|c2
init|=
name|geometryCoordinates
index|[
name|j
operator|+
literal|1
index|]
decl_stmt|;
name|LineSegment
name|lineSegment
init|=
operator|new
name|LineSegment
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
decl_stmt|;
name|coordinates
operator|.
name|add
argument_list|(
name|lineSegment
operator|.
name|pointAlongOffset
argument_list|(
name|segmentLengthFraction
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|offsetDistance
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Coordinate
index|[]
name|coordinateArray
init|=
name|coordinates
operator|.
name|toArray
argument_list|(
operator|new
name|Coordinate
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createMultiPointFromCoords
argument_list|(
name|coordinateArray
argument_list|)
return|;
block|}
comment|/**    * Returns the 2-dimensional longest line-string between the points    * of {@code geom1} and {@code geom2}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_LongestLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
name|double
name|maxDistance
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
name|Coordinate
name|c1
init|=
literal|null
decl_stmt|;
name|Coordinate
name|c2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Coordinate
name|coordinate1
range|:
name|geom1
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
for|for
control|(
name|Coordinate
name|coordinate2
range|:
name|geom2
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
name|double
name|distance
init|=
name|coordinate1
operator|.
name|distance
argument_list|(
name|coordinate2
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|>
name|maxDistance
condition|)
block|{
name|maxDistance
operator|=
name|distance
expr_stmt|;
name|c1
operator|=
name|coordinate1
expr_stmt|;
name|c2
operator|=
name|coordinate2
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
return|;
block|}
comment|/**    * Computes the maximum distance between {@code geom1} and {@code geom2}.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_MaxDistance
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
name|double
name|maxDistance
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Coordinate
name|coordinate1
range|:
name|geom1
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
for|for
control|(
name|Coordinate
name|coordinate2
range|:
name|geom2
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
name|double
name|distance
init|=
name|coordinate1
operator|.
name|distance
argument_list|(
name|coordinate2
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|>
name|maxDistance
condition|)
block|{
name|maxDistance
operator|=
name|distance
expr_stmt|;
block|}
block|}
block|}
return|return
name|maxDistance
return|;
block|}
comment|/**    * Returns the length of the perimeter of *polygon* (which may be a MULTIPOLYGON).    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_Perimeter
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
name|double
name|perimeter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geom
operator|.
name|getNumGeometries
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Geometry
name|geometry
init|=
name|geom
operator|.
name|getGeometryN
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|geometry
operator|instanceof
name|Polygon
condition|)
block|{
name|perimeter
operator|+=
name|geometry
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|perimeter
return|;
block|}
comment|/**    * Projects {@code point} onto a {@code lineString} (which may be a MULTILINESTRING).    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_ProjectPoint
parameter_list|(
name|Geometry
name|point
parameter_list|,
name|Geometry
name|lineString
parameter_list|)
block|{
if|if
condition|(
name|lineString
operator|.
name|getDimension
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LengthIndexedLine
name|lengthIndexedLine
init|=
operator|new
name|LengthIndexedLine
argument_list|(
name|lineString
argument_list|)
decl_stmt|;
name|double
name|index
init|=
name|lengthIndexedLine
operator|.
name|project
argument_list|(
name|point
operator|.
name|getCoordinate
argument_list|()
argument_list|)
decl_stmt|;
name|Coordinate
name|projectedCoordinate
init|=
name|lengthIndexedLine
operator|.
name|extractPoint
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
name|projectedCoordinate
argument_list|)
return|;
block|}
comment|// Triangulation functions
comment|/**    * Computes a constrained Delaunay triangulation based on points in {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_ConstrainedDelaunay
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|ST_ConstrainedDelaunay
argument_list|(
name|geom
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Computes a constrained Delaunay triangulation based on points in {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_ConstrainedDelaunay
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|geom
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|ConstrainedDelaunayTriangulator
name|cdt
init|=
operator|new
name|ConstrainedDelaunayTriangulator
argument_list|(
name|geom
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tri
argument_list|>
name|tris
init|=
name|cdt
operator|.
name|getTriangles
argument_list|()
decl_stmt|;
name|Polygon
index|[]
name|polygons
init|=
operator|new
name|Polygon
index|[
name|tris
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Tri
name|tri
range|:
name|tris
control|)
block|{
name|polygons
index|[
name|i
operator|++
index|]
operator|=
name|tri
operator|.
name|toPolygon
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
name|MultiPolygon
name|multiPolygon
init|=
name|factory
operator|.
name|createMultiPolygon
argument_list|(
name|polygons
argument_list|)
decl_stmt|;
if|if
condition|(
name|flag
operator|==
literal|0
condition|)
block|{
return|return
name|multiPolygon
return|;
block|}
else|else
block|{
return|return
name|asTriangleEdges
argument_list|(
name|multiPolygon
argument_list|)
return|;
block|}
block|}
comment|/**    * Computes a Delaunay triangulation based on points in {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Delaunay
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|ST_Delaunay
argument_list|(
name|geom
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Computes a Delaunay triangulation based on points in {@code geom}.    */
specifier|public
specifier|static
name|Geometry
name|ST_Delaunay
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|geom
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|DelaunayTriangulationBuilder
name|builder
init|=
operator|new
name|DelaunayTriangulationBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSites
argument_list|(
name|geom
argument_list|)
expr_stmt|;
name|QuadEdgeSubdivision
name|subdivision
init|=
name|builder
operator|.
name|getSubdivision
argument_list|()
decl_stmt|;
name|List
name|triPtsList
init|=
name|subdivision
operator|.
name|getTriangleCoordinates
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Polygon
index|[]
name|tris
init|=
operator|new
name|Polygon
index|[
name|triPtsList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|triPtsList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Coordinate
index|[]
name|triPt
init|=
operator|(
name|Coordinate
index|[]
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|tris
index|[
name|i
operator|++
index|]
operator|=
name|factory
operator|.
name|createPolygon
argument_list|(
name|factory
operator|.
name|createLinearRing
argument_list|(
name|triPt
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MultiPolygon
name|multiPolygon
init|=
name|factory
operator|.
name|createMultiPolygon
argument_list|(
name|tris
argument_list|)
decl_stmt|;
if|if
condition|(
name|flag
operator|==
literal|0
condition|)
block|{
return|return
name|multiPolygon
return|;
block|}
else|else
block|{
return|return
name|asTriangleEdges
argument_list|(
name|multiPolygon
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Geometry
name|asTriangleEdges
parameter_list|(
name|MultiPolygon
name|multiPolygon
parameter_list|)
block|{
name|GeometryFactory
name|factory
init|=
name|multiPolygon
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LineString
argument_list|>
name|edges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multiPolygon
operator|.
name|getNumGeometries
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Polygon
name|polygon
init|=
operator|(
name|Polygon
operator|)
name|multiPolygon
operator|.
name|getGeometryN
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Coordinate
index|[]
name|coordinates
init|=
name|polygon
operator|.
name|getCoordinates
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|coordinates
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Coordinate
name|c1
init|=
name|coordinates
index|[
name|j
operator|-
literal|1
index|]
operator|.
name|copy
argument_list|()
decl_stmt|;
name|Coordinate
name|c2
init|=
name|coordinates
index|[
name|j
index|]
operator|.
name|copy
argument_list|()
decl_stmt|;
name|LineString
name|line
init|=
name|factory
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
decl_stmt|;
name|edges
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|Geometry
name|geometry
init|=
name|factory
operator|.
name|createMultiLineString
argument_list|(
name|edges
operator|.
name|toArray
argument_list|(
operator|new
name|LineString
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|geometry
operator|.
name|union
argument_list|()
operator|.
name|norm
argument_list|()
return|;
block|}
comment|// Space-filling curves
comment|/**    * Returns the position of a point on the Hilbert curve, or null if it is not a 2-dimensional    * point.    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:HILBERT"
block|}
argument_list|)
specifier|public
specifier|static
annotation|@
name|Nullable
name|Long
name|hilbert
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|instanceof
name|Point
condition|)
block|{
specifier|final
name|double
name|x
init|=
operator|(
operator|(
name|Point
operator|)
name|geom
operator|)
operator|.
name|getX
argument_list|()
decl_stmt|;
specifier|final
name|double
name|y
init|=
operator|(
operator|(
name|Point
operator|)
name|geom
operator|)
operator|.
name|getY
argument_list|()
decl_stmt|;
return|return
operator|new
name|HilbertCurve2D
argument_list|(
literal|8
argument_list|)
operator|.
name|toIndex
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the position of a point on the Hilbert curve.    */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:HILBERT"
block|}
argument_list|)
specifier|public
specifier|static
name|long
name|hilbert
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|)
block|{
return|return
operator|new
name|HilbertCurve2D
argument_list|(
literal|8
argument_list|)
operator|.
name|toIndex
argument_list|(
name|x
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|y
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// Inner classes ============================================================
comment|/**    * Used at run time by the {@link #ST_MakeGrid} and {@link #ST_MakeGridPoints} functions.    */
specifier|public
specifier|static
class|class
name|GridEnumerable
extends|extends
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
block|{
specifier|private
specifier|final
name|Envelope
name|envelope
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|point
decl_stmt|;
specifier|private
specifier|final
name|double
name|deltaX
decl_stmt|;
specifier|private
specifier|final
name|double
name|deltaY
decl_stmt|;
specifier|private
specifier|final
name|double
name|minX
decl_stmt|;
specifier|private
specifier|final
name|double
name|minY
decl_stmt|;
specifier|private
specifier|final
name|int
name|baseX
decl_stmt|;
specifier|private
specifier|final
name|int
name|baseY
decl_stmt|;
specifier|private
specifier|final
name|int
name|spanX
decl_stmt|;
specifier|private
specifier|final
name|int
name|spanY
decl_stmt|;
specifier|private
specifier|final
name|int
name|area
decl_stmt|;
specifier|public
name|GridEnumerable
parameter_list|(
name|Envelope
name|envelope
parameter_list|,
name|BigDecimal
name|deltaX
parameter_list|,
name|BigDecimal
name|deltaY
parameter_list|,
name|boolean
name|point
parameter_list|)
block|{
name|this
operator|.
name|envelope
operator|=
name|envelope
expr_stmt|;
name|this
operator|.
name|deltaX
operator|=
name|deltaX
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|deltaY
operator|=
name|deltaY
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|point
operator|=
name|point
expr_stmt|;
name|this
operator|.
name|spanX
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|envelope
operator|.
name|getMaxX
argument_list|()
operator|-
name|envelope
operator|.
name|getMinX
argument_list|()
operator|)
operator|/
name|this
operator|.
name|deltaX
argument_list|)
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|baseX
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|envelope
operator|.
name|getMinX
argument_list|()
operator|/
name|this
operator|.
name|deltaX
argument_list|)
expr_stmt|;
name|this
operator|.
name|minX
operator|=
name|this
operator|.
name|deltaX
operator|*
name|baseX
expr_stmt|;
name|this
operator|.
name|spanY
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|envelope
operator|.
name|getMaxY
argument_list|()
operator|-
name|envelope
operator|.
name|getMinY
argument_list|()
operator|)
operator|/
name|this
operator|.
name|deltaY
argument_list|)
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|baseY
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|envelope
operator|.
name|getMinY
argument_list|()
operator|/
name|this
operator|.
name|deltaY
argument_list|)
expr_stmt|;
name|this
operator|.
name|minY
operator|=
name|this
operator|.
name|deltaY
operator|*
name|baseY
expr_stmt|;
name|this
operator|.
name|area
operator|=
name|this
operator|.
name|spanX
operator|*
name|this
operator|.
name|spanY
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
specifier|final
name|Geometry
name|geom
decl_stmt|;
specifier|final
name|int
name|x
init|=
name|id
operator|%
name|spanX
decl_stmt|;
specifier|final
name|int
name|y
init|=
name|id
operator|/
name|spanX
decl_stmt|;
if|if
condition|(
name|point
condition|)
block|{
specifier|final
name|double
name|xCurrent
init|=
name|minX
operator|+
operator|(
name|x
operator|+
literal|0.5D
operator|)
operator|*
name|deltaX
decl_stmt|;
specifier|final
name|double
name|yCurrent
init|=
name|minY
operator|+
operator|(
name|y
operator|+
literal|0.5D
operator|)
operator|*
name|deltaY
decl_stmt|;
name|geom
operator|=
name|ST_MakePoint
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|xCurrent
argument_list|)
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|yCurrent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|double
name|left
init|=
name|minX
operator|+
name|x
operator|*
name|deltaX
decl_stmt|;
specifier|final
name|double
name|right
init|=
name|left
operator|+
name|deltaX
decl_stmt|;
specifier|final
name|double
name|bottom
init|=
name|minY
operator|+
name|y
operator|*
name|deltaY
decl_stmt|;
specifier|final
name|double
name|top
init|=
name|bottom
operator|+
name|deltaY
decl_stmt|;
name|Coordinate
index|[]
name|coordinates
init|=
operator|new
name|Coordinate
index|[]
block|{
operator|new
name|Coordinate
argument_list|(
name|left
argument_list|,
name|bottom
argument_list|)
block|,
operator|new
name|Coordinate
argument_list|(
name|left
argument_list|,
name|top
argument_list|)
block|,
operator|new
name|Coordinate
argument_list|(
name|right
argument_list|,
name|top
argument_list|)
block|,
operator|new
name|Coordinate
argument_list|(
name|right
argument_list|,
name|bottom
argument_list|)
block|,
operator|new
name|Coordinate
argument_list|(
name|left
argument_list|,
name|bottom
argument_list|)
block|}
decl_stmt|;
name|LinearRing
name|linearRing
init|=
name|GEOMETRY_FACTORY
operator|.
name|createLinearRing
argument_list|(
name|coordinates
argument_list|)
decl_stmt|;
name|Polygon
name|polygon
init|=
name|GEOMETRY_FACTORY
operator|.
name|createPolygon
argument_list|(
name|linearRing
argument_list|)
decl_stmt|;
name|geom
operator|=
name|polygon
expr_stmt|;
block|}
return|return
operator|new
name|Object
index|[]
block|{
name|geom
block|,
name|id
block|,
name|x
operator|+
literal|1
block|,
name|y
operator|+
literal|1
block|,
name|baseX
operator|+
name|x
block|,
name|baseY
operator|+
name|y
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
operator|++
name|id
operator|<
name|area
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|id
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

