begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Deterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Hints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|SemiStrict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Strict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|SpatialType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Coordinate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|LinearRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Polygon
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|GEOMETRY_FACTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|NO_SRID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|asEwkt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|asWkt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeUtils
operator|.
name|fromWkt
import|;
end_import

begin_comment
comment|/**  * Helper methods to implement spatial type (ST) functions in generated code.  *  *<p>Remaining tasks:  *  *<ul>  *<li>Determine type code for  *   {@link org.apache.calcite.sql.type.ExtraSqlTypes#GEOMETRY}  *<li>Should we create aliases for functions in upper-case?  *   Without ST_ prefix?  *<li>Consider adding spatial literals, e.g. `GEOMETRY 'POINT (30 10)'`  *<li>Integer arguments, e.g. SELECT ST_MakePoint(1, 2, 1.5),  *     ST_MakePoint(1, 2)  *<li>Are GEOMETRY values comparable? If so add ORDER BY test  *<li>We have to add 'Z' to create 3D objects. This is inconsistent with  *   PostGIS. Who is right? At least document the difference.  *<li>Should add GeometryEngine.intersects; similar to disjoint etc.  *<li>Make {@link #ST_MakeLine(Geometry, Geometry)} varargs</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"WeakerAccess"
block|,
literal|"unused"
block|}
argument_list|)
annotation|@
name|Deterministic
annotation|@
name|Strict
annotation|@
name|Experimental
specifier|public
class|class
name|SpatialTypeFunctions
block|{
specifier|private
name|SpatialTypeFunctions
parameter_list|()
block|{
block|}
comment|// Geometry conversion functions (2D and 3D) ================================
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|ST_AsEWKT
parameter_list|(
name|Geometry
name|g
parameter_list|)
block|{
return|return
name|asEwkt
argument_list|(
name|g
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|ST_AsText
parameter_list|(
name|Geometry
name|g
parameter_list|)
block|{
return|return
name|asWkt
argument_list|(
name|g
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|ST_AsWKT
parameter_list|(
name|Geometry
name|g
parameter_list|)
block|{
return|return
name|asWkt
argument_list|(
name|g
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromText
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|fromWkt
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_GeomFromText
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|fromWkt
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|g
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_LineFromText
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|ST_GeomFromText
argument_list|(
name|s
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_LineFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|fromWkt
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
name|g
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|g
operator|==
literal|null
condition|?
literal|null
else|:
name|g
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MPointFromText
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|ST_GeomFromText
argument_list|(
name|s
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MPointFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|fromWkt
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
name|g
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|g
operator|==
literal|null
condition|?
literal|null
else|:
name|g
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PointFromText
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|ST_GeomFromText
argument_list|(
name|s
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PointFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|fromWkt
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
name|g
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|g
operator|==
literal|null
condition|?
literal|null
else|:
name|g
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PolyFromText
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|ST_GeomFromText
argument_list|(
name|s
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_PolyFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|fromWkt
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
name|g
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|g
operator|==
literal|null
condition|?
literal|null
else|:
name|g
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MLineFromText
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|ST_GeomFromText
argument_list|(
name|s
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MLineFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|fromWkt
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
name|g
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|g
operator|==
literal|null
condition|?
literal|null
else|:
name|g
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MPolyFromText
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|ST_GeomFromText
argument_list|(
name|s
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Geometry
name|ST_MPolyFromText
parameter_list|(
name|String
name|wkt
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|fromWkt
argument_list|(
name|wkt
argument_list|)
decl_stmt|;
name|g
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|g
operator|==
literal|null
condition|?
literal|null
else|:
name|g
return|;
block|}
comment|// Geometry creation functions ==============================================
comment|/** Calculates a regular grid of polygons based on {@code geom}. */
specifier|private
specifier|static
name|void
name|ST_MakeGrid
parameter_list|(
specifier|final
name|Geometry
name|geom
parameter_list|,
specifier|final
name|BigDecimal
name|deltaX
parameter_list|,
specifier|final
name|BigDecimal
name|deltaY
parameter_list|)
block|{
comment|// This is a dummy function. We cannot include table functions in this
comment|// package, because they have too many dependencies. See the real definition
comment|// in SqlSpatialTypeFunctions.
block|}
comment|/** Calculates a regular grid of points based on {@code geom}. */
specifier|private
specifier|static
name|void
name|ST_MakeGridPoints
parameter_list|(
specifier|final
name|Geometry
name|geom
parameter_list|,
specifier|final
name|BigDecimal
name|deltaX
parameter_list|,
specifier|final
name|BigDecimal
name|deltaY
parameter_list|)
block|{
comment|// This is a dummy function. We cannot include table functions in this
comment|// package, because they have too many dependencies. See the real definition
comment|// in SqlSpatialTypeFunctions.
block|}
comment|/** Creates a rectangular Polygon. */
specifier|public
specifier|static
name|Geometry
name|ST_MakeEnvelope
parameter_list|(
name|BigDecimal
name|xMin
parameter_list|,
name|BigDecimal
name|yMin
parameter_list|,
name|BigDecimal
name|xMax
parameter_list|,
name|BigDecimal
name|yMax
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|Geometry
name|geom
init|=
name|ST_GeomFromText
argument_list|(
literal|"POLYGON(("
operator|+
name|xMin
operator|+
literal|" "
operator|+
name|yMin
operator|+
literal|", "
operator|+
name|xMin
operator|+
literal|" "
operator|+
name|yMax
operator|+
literal|", "
operator|+
name|xMax
operator|+
literal|" "
operator|+
name|yMax
operator|+
literal|", "
operator|+
name|xMax
operator|+
literal|" "
operator|+
name|yMin
operator|+
literal|", "
operator|+
name|xMin
operator|+
literal|" "
operator|+
name|yMin
operator|+
literal|"))"
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|geom
argument_list|,
literal|"geom"
argument_list|)
return|;
block|}
comment|/** Creates a rectangular Polygon. */
specifier|public
specifier|static
name|Geometry
name|ST_MakeEnvelope
parameter_list|(
name|BigDecimal
name|xMin
parameter_list|,
name|BigDecimal
name|yMin
parameter_list|,
name|BigDecimal
name|xMax
parameter_list|,
name|BigDecimal
name|yMax
parameter_list|)
block|{
return|return
name|ST_MakeEnvelope
argument_list|(
name|xMin
argument_list|,
name|yMin
argument_list|,
name|xMax
argument_list|,
name|yMax
argument_list|,
name|NO_SRID
argument_list|)
return|;
block|}
comment|/** Creates a line-string from the given POINTs (or MULTIPOINTs). */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|Geometry
name|geom3
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom3
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|Geometry
name|geom3
parameter_list|,
name|Geometry
name|geom4
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom3
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom4
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|Geometry
name|geom3
parameter_list|,
name|Geometry
name|geom4
parameter_list|,
name|Geometry
name|geom5
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom3
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom4
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom5
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_MAKE_LINE"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakeLine
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|Geometry
name|geom3
parameter_list|,
name|Geometry
name|geom4
parameter_list|,
name|Geometry
name|geom5
parameter_list|,
name|Geometry
name|geom6
parameter_list|)
block|{
return|return
name|GEOMETRY_FACTORY
operator|.
name|createLineString
argument_list|(
operator|new
name|Coordinate
index|[]
block|{
name|geom1
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom2
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom3
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom4
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom5
operator|.
name|getCoordinate
argument_list|()
block|,
name|geom6
operator|.
name|getCoordinate
argument_list|()
block|,     }
argument_list|)
return|;
block|}
comment|/** Alias for {@link #ST_Point(BigDecimal, BigDecimal)}. */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_POINT"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakePoint
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|)
block|{
return|return
name|ST_Point
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
comment|/** Alias for {@link #ST_Point(BigDecimal, BigDecimal, BigDecimal)}. */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_POINT3"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_MakePoint
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|,
name|BigDecimal
name|z
parameter_list|)
block|{
return|return
name|ST_Point
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
block|}
comment|/** Constructs a 2D point from coordinates. */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_POINT"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_Point
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|)
block|{
comment|// NOTE: Combine the double and BigDecimal variants of this function
return|return
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
operator|new
name|Coordinate
argument_list|(
name|x
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|y
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Constructs a 3D point from coordinates. */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_POINT3"
block|}
argument_list|)
specifier|public
specifier|static
name|Geometry
name|ST_Point
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|,
name|BigDecimal
name|z
parameter_list|)
block|{
specifier|final
name|Geometry
name|g
init|=
name|GEOMETRY_FACTORY
operator|.
name|createPoint
argument_list|(
operator|new
name|Coordinate
argument_list|(
name|x
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|y
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|z
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|g
return|;
block|}
comment|// Geometry properties (2D and 3D) ==========================================
comment|/** Returns whether {@code geom} has at least one z-coordinate. */
specifier|public
specifier|static
name|boolean
name|ST_Is3D
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
for|for
control|(
name|Coordinate
name|coordinate
range|:
name|geom
operator|.
name|getCoordinates
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|coordinate
operator|.
name|getZ
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns the x-value of the first coordinate of {@code geom}. */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_X
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|instanceof
name|Point
condition|?
operator|(
operator|(
name|Point
operator|)
name|geom
operator|)
operator|.
name|getX
argument_list|()
else|:
literal|null
return|;
block|}
comment|/** Returns the y-value of the first coordinate of {@code geom}. */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_Y
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|instanceof
name|Point
condition|?
operator|(
operator|(
name|Point
operator|)
name|geom
operator|)
operator|.
name|getY
argument_list|()
else|:
literal|null
return|;
block|}
comment|/** Returns the z-value of the first coordinate of {@code geom}. */
specifier|public
specifier|static
annotation|@
name|Nullable
name|Double
name|ST_Z
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|instanceof
name|Point
operator|&&
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|geom
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getZ
argument_list|()
argument_list|)
condition|?
name|geom
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getZ
argument_list|()
else|:
literal|null
return|;
block|}
comment|/** Returns the boundary of {@code geom}. */
specifier|public
specifier|static
name|Geometry
name|ST_Boundary
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getBoundary
argument_list|()
return|;
block|}
comment|/** Returns the distance between {@code geom1} and {@code geom2}. */
specifier|public
specifier|static
name|double
name|ST_Distance
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|distance
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns the type of {@code geom}. */
specifier|public
specifier|static
name|String
name|ST_GeometryType
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|SpatialType
operator|.
name|fromGeometry
argument_list|(
name|geom
argument_list|)
operator|.
name|name
argument_list|()
return|;
block|}
comment|/** Returns the OGC SFS type code of {@code geom}. */
specifier|public
specifier|static
name|int
name|ST_GeometryTypeCode
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|SpatialType
operator|.
name|fromGeometry
argument_list|(
name|geom
argument_list|)
operator|.
name|code
argument_list|()
return|;
block|}
comment|/** Returns the minimum bounding box of {@code geom} (which may be a    *  GEOMETRYCOLLECTION). */
specifier|public
specifier|static
name|Geometry
name|ST_Envelope
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
name|geom
operator|.
name|getEnvelope
argument_list|()
return|;
block|}
comment|// Geometry predicates ======================================================
comment|/** Returns whether {@code geom1} contains {@code geom2}. */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_CONTAINS"
block|}
argument_list|)
specifier|public
specifier|static
name|boolean
name|ST_Contains
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|contains
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} contains {@code geom2} but does not    * intersect its boundary. */
specifier|public
specifier|static
name|boolean
name|ST_ContainsProperly
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|contains
argument_list|(
name|geom2
argument_list|)
operator|&&
operator|!
name|geom1
operator|.
name|crosses
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether no point in {@code geom2} is outside {@code geom1}. */
specifier|private
specifier|static
name|boolean
name|ST_Covers
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|covers
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} crosses {@code geom2}. */
specifier|public
specifier|static
name|boolean
name|ST_Crosses
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|crosses
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} and {@code geom2} are disjoint. */
specifier|public
specifier|static
name|boolean
name|ST_Disjoint
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|disjoint
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether the envelope of {@code geom1} intersects the envelope of    *  {@code geom2}. */
specifier|public
specifier|static
name|boolean
name|ST_EnvelopesIntersect
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
specifier|final
name|Geometry
name|e1
init|=
name|geom1
operator|.
name|getEnvelope
argument_list|()
decl_stmt|;
specifier|final
name|Geometry
name|e2
init|=
name|geom2
operator|.
name|getEnvelope
argument_list|()
decl_stmt|;
return|return
name|e1
operator|.
name|intersects
argument_list|(
name|e2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} equals {@code geom2}. */
specifier|public
specifier|static
name|boolean
name|ST_Equals
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|equals
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} intersects {@code geom2}. */
specifier|public
specifier|static
name|boolean
name|ST_Intersects
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|intersects
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} equals {@code geom2} and their coordinates    * and component Geometries are listed in the same order. */
specifier|public
specifier|static
name|boolean
name|ST_OrderingEquals
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|equals
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns {@code geom1} overlaps {@code geom2}. */
specifier|public
specifier|static
name|boolean
name|ST_Overlaps
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|overlaps
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} touches {@code geom2}. */
specifier|public
specifier|static
name|boolean
name|ST_Touches
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|touches
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} is within {@code geom2}. */
specifier|public
specifier|static
name|boolean
name|ST_Within
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|within
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Returns whether {@code geom1} and {@code geom2} are within    * {@code distance} of each other. */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:ST_DWITHIN"
block|}
argument_list|)
specifier|public
specifier|static
name|boolean
name|ST_DWithin
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
specifier|final
name|double
name|distance1
init|=
name|geom1
operator|.
name|distance
argument_list|(
name|geom2
argument_list|)
decl_stmt|;
return|return
name|distance1
operator|<=
name|distance
return|;
block|}
comment|// Geometry operators (2D and 3D) ===========================================
comment|/** Computes a buffer around {@code geom}. */
specifier|public
specifier|static
name|Geometry
name|ST_Buffer
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
return|return
name|geom
operator|.
name|buffer
argument_list|(
name|distance
argument_list|)
return|;
block|}
comment|/** Computes a buffer around {@code geom}. */
specifier|public
specifier|static
name|Geometry
name|ST_Buffer
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|double
name|distance
parameter_list|,
name|int
name|quadSegs
parameter_list|)
block|{
return|return
name|geom
operator|.
name|buffer
argument_list|(
name|distance
argument_list|,
name|quadSegs
argument_list|)
return|;
block|}
comment|/** Computes a buffer around {@code geom}. */
specifier|public
specifier|static
name|Geometry
name|ST_Buffer
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|double
name|distance
parameter_list|,
name|int
name|quadSegs
parameter_list|,
name|int
name|endCapStyle
parameter_list|)
block|{
return|return
name|geom
operator|.
name|buffer
argument_list|(
name|distance
argument_list|,
name|quadSegs
argument_list|,
name|endCapStyle
argument_list|)
return|;
block|}
comment|/** Computes the union of {@code geom1} and {@code geom2}. */
specifier|public
specifier|static
name|Geometry
name|ST_Union
parameter_list|(
name|Geometry
name|geom1
parameter_list|,
name|Geometry
name|geom2
parameter_list|)
block|{
return|return
name|geom1
operator|.
name|union
argument_list|(
name|geom2
argument_list|)
return|;
block|}
comment|/** Computes the union of the geometries in {@code geomCollection}. */
annotation|@
name|SemiStrict
specifier|public
specifier|static
name|Geometry
name|ST_Union
parameter_list|(
name|Geometry
name|geomCollection
parameter_list|)
block|{
return|return
name|geomCollection
operator|.
name|union
argument_list|()
return|;
block|}
comment|// Geometry projection functions ============================================
comment|/** Transforms {@code geom} from one coordinate reference    * system (CRS) to the CRS specified by {@code srid}. */
specifier|public
specifier|static
name|Geometry
name|ST_Transform
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|ProjectionTransformer
name|projectionTransformer
init|=
operator|new
name|ProjectionTransformer
argument_list|(
name|geom
operator|.
name|getSRID
argument_list|()
argument_list|,
name|srid
argument_list|)
decl_stmt|;
return|return
name|projectionTransformer
operator|.
name|transform
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/** Returns a copy of {@code geom} with a new SRID. */
specifier|public
specifier|static
name|Geometry
name|ST_SetSRID
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|int
name|srid
parameter_list|)
block|{
name|geom
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|geom
return|;
block|}
comment|// Space-filling curves
comment|/** Returns the position of a point on the Hilbert curve,    * or null if it is not a 2-dimensional point. */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:HILBERT"
block|}
argument_list|)
specifier|public
specifier|static
annotation|@
name|Nullable
name|Long
name|hilbert
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|instanceof
name|Point
condition|)
block|{
specifier|final
name|double
name|x
init|=
operator|(
operator|(
name|Point
operator|)
name|geom
operator|)
operator|.
name|getX
argument_list|()
decl_stmt|;
specifier|final
name|double
name|y
init|=
operator|(
operator|(
name|Point
operator|)
name|geom
operator|)
operator|.
name|getY
argument_list|()
decl_stmt|;
return|return
operator|new
name|HilbertCurve2D
argument_list|(
literal|8
argument_list|)
operator|.
name|toIndex
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Returns the position of a point on the Hilbert curve. */
annotation|@
name|Hints
argument_list|(
block|{
literal|"SqlKind:HILBERT"
block|}
argument_list|)
specifier|public
specifier|static
name|long
name|hilbert
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|BigDecimal
name|y
parameter_list|)
block|{
return|return
operator|new
name|HilbertCurve2D
argument_list|(
literal|8
argument_list|)
operator|.
name|toIndex
argument_list|(
name|x
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|y
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// Inner classes ============================================================
comment|/** Used at run time by the {@link #ST_MakeGrid} and    * {@link #ST_MakeGridPoints} functions. */
specifier|public
specifier|static
class|class
name|GridEnumerable
extends|extends
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
block|{
specifier|private
specifier|final
name|Envelope
name|envelope
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|point
decl_stmt|;
specifier|private
specifier|final
name|double
name|deltaX
decl_stmt|;
specifier|private
specifier|final
name|double
name|deltaY
decl_stmt|;
specifier|private
specifier|final
name|double
name|minX
decl_stmt|;
specifier|private
specifier|final
name|double
name|minY
decl_stmt|;
specifier|private
specifier|final
name|int
name|baseX
decl_stmt|;
specifier|private
specifier|final
name|int
name|baseY
decl_stmt|;
specifier|private
specifier|final
name|int
name|spanX
decl_stmt|;
specifier|private
specifier|final
name|int
name|spanY
decl_stmt|;
specifier|private
specifier|final
name|int
name|area
decl_stmt|;
specifier|public
name|GridEnumerable
parameter_list|(
name|Envelope
name|envelope
parameter_list|,
name|BigDecimal
name|deltaX
parameter_list|,
name|BigDecimal
name|deltaY
parameter_list|,
name|boolean
name|point
parameter_list|)
block|{
name|this
operator|.
name|envelope
operator|=
name|envelope
expr_stmt|;
name|this
operator|.
name|deltaX
operator|=
name|deltaX
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|deltaY
operator|=
name|deltaY
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|point
operator|=
name|point
expr_stmt|;
name|this
operator|.
name|spanX
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|envelope
operator|.
name|getMaxX
argument_list|()
operator|-
name|envelope
operator|.
name|getMinX
argument_list|()
operator|)
operator|/
name|this
operator|.
name|deltaX
argument_list|)
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|baseX
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|envelope
operator|.
name|getMinX
argument_list|()
operator|/
name|this
operator|.
name|deltaX
argument_list|)
expr_stmt|;
name|this
operator|.
name|minX
operator|=
name|this
operator|.
name|deltaX
operator|*
name|baseX
expr_stmt|;
name|this
operator|.
name|spanY
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|envelope
operator|.
name|getMaxY
argument_list|()
operator|-
name|envelope
operator|.
name|getMinY
argument_list|()
operator|)
operator|/
name|this
operator|.
name|deltaY
argument_list|)
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|baseY
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|envelope
operator|.
name|getMinY
argument_list|()
operator|/
name|this
operator|.
name|deltaY
argument_list|)
expr_stmt|;
name|this
operator|.
name|minY
operator|=
name|this
operator|.
name|deltaY
operator|*
name|baseY
expr_stmt|;
name|this
operator|.
name|area
operator|=
name|this
operator|.
name|spanX
operator|*
name|this
operator|.
name|spanY
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
specifier|final
name|Geometry
name|geom
decl_stmt|;
specifier|final
name|int
name|x
init|=
name|id
operator|%
name|spanX
decl_stmt|;
specifier|final
name|int
name|y
init|=
name|id
operator|/
name|spanX
decl_stmt|;
if|if
condition|(
name|point
condition|)
block|{
specifier|final
name|double
name|xCurrent
init|=
name|minX
operator|+
operator|(
name|x
operator|+
literal|0.5D
operator|)
operator|*
name|deltaX
decl_stmt|;
specifier|final
name|double
name|yCurrent
init|=
name|minY
operator|+
operator|(
name|y
operator|+
literal|0.5D
operator|)
operator|*
name|deltaY
decl_stmt|;
name|geom
operator|=
name|ST_MakePoint
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|xCurrent
argument_list|)
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|yCurrent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|double
name|left
init|=
name|minX
operator|+
name|x
operator|*
name|deltaX
decl_stmt|;
specifier|final
name|double
name|right
init|=
name|left
operator|+
name|deltaX
decl_stmt|;
specifier|final
name|double
name|bottom
init|=
name|minY
operator|+
name|y
operator|*
name|deltaY
decl_stmt|;
specifier|final
name|double
name|top
init|=
name|bottom
operator|+
name|deltaY
decl_stmt|;
name|Coordinate
index|[]
name|coordinates
init|=
operator|new
name|Coordinate
index|[]
block|{
operator|new
name|Coordinate
argument_list|(
name|left
argument_list|,
name|bottom
argument_list|)
block|,
operator|new
name|Coordinate
argument_list|(
name|left
argument_list|,
name|top
argument_list|)
block|,
operator|new
name|Coordinate
argument_list|(
name|right
argument_list|,
name|top
argument_list|)
block|,
operator|new
name|Coordinate
argument_list|(
name|right
argument_list|,
name|bottom
argument_list|)
block|,
operator|new
name|Coordinate
argument_list|(
name|left
argument_list|,
name|bottom
argument_list|)
block|}
decl_stmt|;
name|LinearRing
name|linearRing
init|=
name|GEOMETRY_FACTORY
operator|.
name|createLinearRing
argument_list|(
name|coordinates
argument_list|)
decl_stmt|;
name|Polygon
name|polygon
init|=
name|GEOMETRY_FACTORY
operator|.
name|createPolygon
argument_list|(
name|linearRing
argument_list|)
decl_stmt|;
name|geom
operator|=
name|polygon
expr_stmt|;
block|}
return|return
operator|new
name|Object
index|[]
block|{
name|geom
block|,
name|id
block|,
name|x
operator|+
literal|1
block|,
name|y
operator|+
literal|1
block|,
name|baseX
operator|+
name|x
block|,
name|baseY
operator|+
name|y
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
operator|++
name|id
operator|<
name|area
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|id
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

