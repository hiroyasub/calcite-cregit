begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|SimpleNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|ErrorListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * A collection of functions used in Xml processing.  */
end_comment

begin_class
specifier|public
class|class
name|XmlFunctions
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
annotation|@
name|Nullable
name|XPathFactory
argument_list|>
name|XPATH_FACTORY
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|XPathFactory
operator|::
name|newInstance
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
annotation|@
name|Nullable
name|TransformerFactory
argument_list|>
name|TRANSFORMER_FACTORY
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
block|{
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|transformerFactory
operator|.
name|setErrorListener
argument_list|(
operator|new
name|InternalErrorListener
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|transformerFactory
return|;
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|VALID_NAMESPACE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(([0-9a-zA-Z:_-]+=\"[^\"]*\")( [0-9a-zA-Z:_-]+=\"[^\"]*\")*)$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|EXTRACT_NAMESPACE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9a-zA-Z:_-]+)=(['\"])((?!\\2).+?)\\2"
argument_list|)
decl_stmt|;
specifier|private
name|XmlFunctions
parameter_list|()
block|{
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|extractValue
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|,
annotation|@
name|Nullable
name|String
name|xpath
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|xpath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|XPathExpression
name|xpathExpression
init|=
name|castNonNull
argument_list|(
name|XPATH_FACTORY
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|newXPath
argument_list|()
operator|.
name|compile
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|xpathExpression
operator|.
name|evaluate
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|List
argument_list|<
annotation|@
name|Nullable
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|item
init|=
name|castNonNull
argument_list|(
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|firstChild
init|=
name|requireNonNull
argument_list|(
name|item
operator|.
name|getFirstChild
argument_list|()
argument_list|,
parameter_list|()
lambda|->
literal|"firstChild of node "
operator|+
name|item
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|firstChild
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|result
argument_list|,
literal|" "
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
return|return
name|xpathExpression
operator|.
name|evaluate
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForExtractValue
argument_list|(
name|input
argument_list|,
name|xpath
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|xmlTransform
parameter_list|(
annotation|@
name|Nullable
name|String
name|xml
parameter_list|,
annotation|@
name|Nullable
name|String
name|xslt
parameter_list|)
block|{
if|if
condition|(
name|xml
operator|==
literal|null
operator|||
name|xslt
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|Source
name|xsltSource
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xslt
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|xmlSource
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Transformer
name|transformer
init|=
name|castNonNull
argument_list|(
name|TRANSFORMER_FACTORY
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|newTransformer
argument_list|(
name|xsltSource
argument_list|)
decl_stmt|;
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|setErrorListener
argument_list|(
operator|new
name|InternalErrorListener
argument_list|()
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|xmlSource
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|illegalXslt
argument_list|(
name|xslt
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForXmlTransform
argument_list|(
name|xml
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|extractXml
parameter_list|(
annotation|@
name|Nullable
name|String
name|xml
parameter_list|,
annotation|@
name|Nullable
name|String
name|xpath
parameter_list|)
block|{
return|return
name|extractXml
argument_list|(
name|xml
argument_list|,
name|xpath
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|extractXml
parameter_list|(
annotation|@
name|Nullable
name|String
name|xml
parameter_list|,
annotation|@
name|Nullable
name|String
name|xpath
parameter_list|,
annotation|@
name|Nullable
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|xml
operator|==
literal|null
operator|||
name|xpath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|XPath
name|xPath
init|=
name|castNonNull
argument_list|(
name|XPATH_FACTORY
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|newXPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|xPath
operator|.
name|setNamespaceContext
argument_list|(
name|extractNamespaceContext
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XPathExpression
name|xpathExpression
init|=
name|xPath
operator|.
name|compile
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|xpathExpression
operator|.
name|evaluate
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|convertNodeToString
argument_list|(
name|castNonNull
argument_list|(
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|result
argument_list|,
literal|""
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|xpathExpression
operator|.
name|evaluate
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
return|return
name|convertNodeToString
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|XPathExpressionException
decl||
name|TransformerException
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForExtractXml
argument_list|(
name|xpath
argument_list|,
name|namespace
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Integer
name|existsNode
parameter_list|(
annotation|@
name|Nullable
name|String
name|xml
parameter_list|,
annotation|@
name|Nullable
name|String
name|xpath
parameter_list|)
block|{
return|return
name|existsNode
argument_list|(
name|xml
argument_list|,
name|xpath
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Integer
name|existsNode
parameter_list|(
annotation|@
name|Nullable
name|String
name|xml
parameter_list|,
annotation|@
name|Nullable
name|String
name|xpath
parameter_list|,
annotation|@
name|Nullable
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|xml
operator|==
literal|null
operator|||
name|xpath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|XPath
name|xPath
init|=
name|castNonNull
argument_list|(
name|XPATH_FACTORY
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|newXPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|xPath
operator|.
name|setNamespaceContext
argument_list|(
name|extractNamespaceContext
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XPathExpression
name|xpathExpression
init|=
name|xPath
operator|.
name|compile
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|xpathExpression
operator|.
name|evaluate
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
operator|&&
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|xpathExpression
operator|.
name|evaluate
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|XPathExpressionException
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForExistsNode
argument_list|(
name|xpath
argument_list|,
name|namespace
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|SimpleNamespaceContext
name|extractNamespaceContext
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
operator|!
name|VALID_NAMESPACE_PATTERN
operator|.
name|matcher
argument_list|(
name|namespace
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid namespace "
operator|+
name|namespace
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|EXTRACT_NAMESPACE_PATTERN
operator|.
name|matcher
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|namespaceMap
operator|.
name|put
argument_list|(
name|castNonNull
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|castNonNull
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SimpleNamespaceContext
argument_list|(
name|namespaceMap
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertNodeToString
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|TransformerException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|castNonNull
argument_list|(
name|TRANSFORMER_FACTORY
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setErrorListener
argument_list|(
operator|new
name|InternalErrorListener
argument_list|()
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** The internal default ErrorListener for Transformer. Just rethrows errors to    * discontinue the XML transformation. */
specifier|private
specifier|static
class|class
name|InternalErrorListener
implements|implements
name|ErrorListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|warning
parameter_list|(
name|TransformerException
name|exception
parameter_list|)
throws|throws
name|TransformerException
block|{
throw|throw
name|exception
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|TransformerException
name|exception
parameter_list|)
throws|throws
name|TransformerException
block|{
throw|throw
name|exception
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fatalError
parameter_list|(
name|TransformerException
name|exception
parameter_list|)
throws|throws
name|TransformerException
block|{
throw|throw
name|exception
throw|;
block|}
block|}
block|}
end_class

end_unit

