begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * A collection of functions used in Xml processing.  */
end_comment

begin_class
specifier|public
class|class
name|XmlFunctions
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|XPathFactory
argument_list|>
name|XPATH_FACTORY
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|XPathFactory
operator|::
name|newInstance
argument_list|)
decl_stmt|;
specifier|private
name|XmlFunctions
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|String
name|extractValue
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|xpath
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|xpath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|XPathExpression
name|xpathExpression
init|=
name|XPATH_FACTORY
operator|.
name|get
argument_list|()
operator|.
name|newXPath
argument_list|()
operator|.
name|compile
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|xpathExpression
operator|.
name|evaluate
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|result
argument_list|,
literal|" "
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
return|return
name|xpathExpression
operator|.
name|evaluate
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForExtractValue
argument_list|(
name|input
argument_list|,
name|xpath
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

