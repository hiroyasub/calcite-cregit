begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A deterministic finite automaton (DFA).  *  *<p>It is constructed from a  * {@link Automaton nondeterministic finite state automaton (NFA)}.  */
end_comment

begin_class
specifier|public
class|class
name|DeterministicAutomaton
block|{
specifier|final
name|MultiState
name|startState
decl_stmt|;
specifier|private
specifier|final
name|Automaton
name|automaton
decl_stmt|;
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|MultiState
argument_list|>
name|endStates
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Transition
argument_list|>
name|transitions
decl_stmt|;
comment|/** Constructs the DFA from an epsilon-NFA. */
name|DeterministicAutomaton
parameter_list|(
name|Automaton
name|automaton
parameter_list|)
block|{
name|this
operator|.
name|automaton
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
comment|// Calculate eps closure of start state
specifier|final
name|Set
argument_list|<
name|MultiState
argument_list|>
name|traversedStates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add transitions
name|this
operator|.
name|startState
operator|=
name|epsilonClosure
argument_list|(
name|automaton
operator|.
name|startState
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Transition
argument_list|>
name|transitionsBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|traverse
argument_list|(
name|startState
argument_list|,
name|transitionsBuilder
argument_list|,
name|traversedStates
argument_list|)
expr_stmt|;
comment|// Store transitions
name|transitions
operator|=
name|transitionsBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Calculate final States
specifier|final
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|MultiState
argument_list|>
name|endStateBuilder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|traversedStates
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ms
lambda|->
name|ms
operator|.
name|contains
argument_list|(
name|automaton
operator|.
name|endState
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|endStateBuilder
operator|::
name|add
argument_list|)
expr_stmt|;
name|this
operator|.
name|endStates
operator|=
name|endStateBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|MultiState
name|getStartState
parameter_list|()
block|{
return|return
name|startState
return|;
block|}
specifier|public
name|ImmutableSet
argument_list|<
name|MultiState
argument_list|>
name|getEndStates
parameter_list|()
block|{
return|return
name|endStates
return|;
block|}
specifier|public
name|ImmutableList
argument_list|<
name|Transition
argument_list|>
name|getTransitions
parameter_list|()
block|{
return|return
name|transitions
return|;
block|}
specifier|private
name|void
name|traverse
parameter_list|(
name|MultiState
name|start
parameter_list|,
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Transition
argument_list|>
name|transitionsBuilder
parameter_list|,
name|Set
argument_list|<
name|MultiState
argument_list|>
name|traversedStates
parameter_list|)
block|{
name|traversedStates
operator|.
name|add
argument_list|(
name|start
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|MultiState
argument_list|>
name|newStates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|symbol
init|=
literal|0
init|;
name|symbol
operator|<
name|automaton
operator|.
name|symbolNames
operator|.
name|size
argument_list|()
condition|;
name|symbol
operator|++
control|)
block|{
specifier|final
name|Optional
argument_list|<
name|MultiState
argument_list|>
name|next
init|=
name|addTransitions
argument_list|(
name|start
argument_list|,
name|symbol
argument_list|,
name|transitionsBuilder
argument_list|)
decl_stmt|;
name|next
operator|.
name|ifPresent
argument_list|(
name|newStates
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
comment|// Remove all already known states
name|newStates
operator|.
name|removeAll
argument_list|(
name|traversedStates
argument_list|)
expr_stmt|;
comment|// If we have really new States, then traverse them
name|newStates
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|traverse
argument_list|(
name|s
argument_list|,
name|transitionsBuilder
argument_list|,
name|traversedStates
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Optional
argument_list|<
name|MultiState
argument_list|>
name|addTransitions
parameter_list|(
name|MultiState
name|start
parameter_list|,
name|int
name|symbol
parameter_list|,
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Transition
argument_list|>
name|transitionsBuilder
parameter_list|)
block|{
specifier|final
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Automaton
operator|.
name|State
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Automaton
operator|.
name|SymbolTransition
name|transition
range|:
name|this
operator|.
name|automaton
operator|.
name|getTransitions
argument_list|()
control|)
block|{
comment|// Consider only transitions for the given symbol
if|if
condition|(
name|transition
operator|.
name|symbol
operator|!=
name|symbol
condition|)
block|{
continue|continue;
block|}
comment|// Consider only those emitting from current state
if|if
condition|(
operator|!
name|start
operator|.
name|contains
argument_list|(
name|transition
operator|.
name|fromState
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// ...
name|builder
operator|.
name|addAll
argument_list|(
name|epsilonClosure
argument_list|(
name|transition
operator|.
name|toState
argument_list|)
operator|.
name|states
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableSet
argument_list|<
name|Automaton
operator|.
name|State
argument_list|>
name|stateSet
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|final
name|MultiState
name|next
init|=
operator|new
name|MultiState
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Transition
name|transition
init|=
operator|new
name|Transition
argument_list|(
name|start
argument_list|,
name|next
argument_list|,
name|symbol
argument_list|,
name|automaton
operator|.
name|symbolNames
operator|.
name|get
argument_list|(
name|symbol
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add the state to the list and add the transition in the table
name|transitionsBuilder
operator|.
name|add
argument_list|(
name|transition
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|next
argument_list|)
return|;
block|}
specifier|private
name|MultiState
name|epsilonClosure
parameter_list|(
name|Automaton
operator|.
name|State
name|state
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|Automaton
operator|.
name|State
argument_list|>
name|closure
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|finder
argument_list|(
name|state
argument_list|,
name|closure
argument_list|)
expr_stmt|;
return|return
operator|new
name|MultiState
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|closure
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|finder
parameter_list|(
name|Automaton
operator|.
name|State
name|state
parameter_list|,
name|Set
argument_list|<
name|Automaton
operator|.
name|State
argument_list|>
name|closure
parameter_list|)
block|{
name|closure
operator|.
name|add
argument_list|(
name|state
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Automaton
operator|.
name|State
argument_list|>
name|newStates
init|=
name|automaton
operator|.
name|getEpsilonTransitions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|t
lambda|->
name|t
operator|.
name|fromState
operator|.
name|equals
argument_list|(
name|state
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|t
lambda|->
name|t
operator|.
name|toState
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|newStates
operator|.
name|removeAll
argument_list|(
name|closure
argument_list|)
expr_stmt|;
comment|// Recursively call all "new" states
for|for
control|(
name|Automaton
operator|.
name|State
name|s
range|:
name|newStates
control|)
block|{
name|finder
argument_list|(
name|s
argument_list|,
name|closure
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Transition between states. */
specifier|static
class|class
name|Transition
block|{
specifier|final
name|MultiState
name|fromState
decl_stmt|;
specifier|final
name|MultiState
name|toState
decl_stmt|;
specifier|final
name|int
name|symbolId
decl_stmt|;
specifier|final
name|String
name|symbol
decl_stmt|;
name|Transition
parameter_list|(
name|MultiState
name|fromState
parameter_list|,
name|MultiState
name|toState
parameter_list|,
name|int
name|symbolId
parameter_list|,
name|String
name|symbol
parameter_list|)
block|{
name|this
operator|.
name|fromState
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|fromState
argument_list|)
expr_stmt|;
name|this
operator|.
name|toState
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|toState
argument_list|)
expr_stmt|;
name|this
operator|.
name|symbolId
operator|=
name|symbolId
expr_stmt|;
name|this
operator|.
name|symbol
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A state of the deterministic finite automaton. Consists of a set of states    * from the underlying eps-NFA.    */
specifier|static
class|class
name|MultiState
block|{
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|Automaton
operator|.
name|State
argument_list|>
name|states
decl_stmt|;
name|MultiState
parameter_list|(
name|Automaton
operator|.
name|State
modifier|...
name|states
parameter_list|)
block|{
name|this
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|states
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MultiState
parameter_list|(
name|ImmutableSet
argument_list|<
name|Automaton
operator|.
name|State
argument_list|>
name|states
parameter_list|)
block|{
name|this
operator|.
name|states
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|states
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Automaton
operator|.
name|State
name|state
parameter_list|)
block|{
return|return
name|states
operator|.
name|contains
argument_list|(
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|==
name|o
operator|||
name|o
operator|instanceof
name|MultiState
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|states
argument_list|,
operator|(
operator|(
name|MultiState
operator|)
name|o
operator|)
operator|.
name|states
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|states
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|states
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End DeterministicAutomaton.java
end_comment

end_unit

