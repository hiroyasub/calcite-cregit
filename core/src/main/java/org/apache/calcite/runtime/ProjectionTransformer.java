begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Coordinate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|CoordinateSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|LineString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|LinearRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiLineString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|MultiPolygon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Polygon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|impl
operator|.
name|CoordinateArraySequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|util
operator|.
name|GeometryTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|proj4j
operator|.
name|CRSFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|proj4j
operator|.
name|CoordinateReferenceSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|proj4j
operator|.
name|CoordinateTransform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|proj4j
operator|.
name|CoordinateTransformFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|proj4j
operator|.
name|ProjCoordinate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Transforms the projection of a geometry.  *  * This class uses Proj4J to transform the projection of a geometry  * and should not be used beyond the scope of the Spatial Type Extensions.  * Proj4J is released under the Apache License 2.0, however, it also uses the EPSG dataset,  * which has restricting<a href="https://epsg.org/terms-of-use.html">terms of use</a>.  * As a result, Proj4J is not suitable for inclusion in Apache Calcite  * and this class will throw {@code ClassNotFoundException}s  * if Proj4J is not added to the classpath by the user.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectionTransformer
extends|extends
name|GeometryTransformer
block|{
specifier|private
specifier|final
name|CoordinateTransform
name|coordinateTransform
decl_stmt|;
comment|/**    * Creates a transformer that reprojects geometries with the provided SRIDs.    *    * @param sourceSrid the source SRID    * @param targetSrid the target SRID    */
specifier|public
name|ProjectionTransformer
parameter_list|(
name|int
name|sourceSrid
parameter_list|,
name|int
name|targetSrid
parameter_list|)
block|{
name|CRSFactory
name|crsFactory
init|=
operator|new
name|CRSFactory
argument_list|()
decl_stmt|;
name|CoordinateReferenceSystem
name|source
init|=
name|crsFactory
operator|.
name|createFromName
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"epsg:%s"
argument_list|,
name|sourceSrid
argument_list|)
argument_list|)
decl_stmt|;
name|CoordinateReferenceSystem
name|target
init|=
name|crsFactory
operator|.
name|createFromName
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"epsg:%s"
argument_list|,
name|targetSrid
argument_list|)
argument_list|)
decl_stmt|;
name|CoordinateTransformFactory
name|ctFactory
init|=
operator|new
name|CoordinateTransformFactory
argument_list|()
decl_stmt|;
name|coordinateTransform
operator|=
name|ctFactory
operator|.
name|createTransform
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoordinateSequence
name|transformCoordinates
parameter_list|(
name|CoordinateSequence
name|coordinateSequence
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
name|Coordinate
index|[]
name|coordinateArray
init|=
name|Stream
operator|.
name|of
argument_list|(
name|coordinateSequence
operator|.
name|toCoordinateArray
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|transformCoordinate
argument_list|)
operator|.
name|toArray
argument_list|(
name|Coordinate
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
return|return
operator|new
name|CoordinateArraySequence
argument_list|(
name|coordinateArray
argument_list|)
return|;
block|}
specifier|private
name|Coordinate
name|transformCoordinate
parameter_list|(
name|Coordinate
name|coordinate
parameter_list|)
block|{
name|ProjCoordinate
name|c1
init|=
operator|new
name|ProjCoordinate
argument_list|(
name|coordinate
operator|.
name|x
argument_list|,
name|coordinate
operator|.
name|y
argument_list|)
decl_stmt|;
name|ProjCoordinate
name|c2
init|=
name|coordinateTransform
operator|.
name|transform
argument_list|(
name|c1
argument_list|,
operator|new
name|ProjCoordinate
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Coordinate
argument_list|(
name|c2
operator|.
name|x
argument_list|,
name|c2
operator|.
name|y
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|transformPoint
parameter_list|(
name|Point
name|geom
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|super
operator|.
name|transformPoint
argument_list|(
name|geom
argument_list|,
name|parent
argument_list|)
decl_stmt|;
return|return
name|withTargetSRID
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getFactory
argument_list|()
operator|.
name|createEmpty
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|transformMultiPoint
parameter_list|(
name|MultiPoint
name|geom
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|super
operator|.
name|transformMultiPoint
argument_list|(
name|geom
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|geometry
operator|instanceof
name|Point
condition|)
block|{
name|geometry
operator|=
name|factory
operator|.
name|createMultiPoint
argument_list|(
operator|new
name|Point
index|[]
block|{
operator|(
name|Point
operator|)
name|geometry
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|withTargetSRID
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getFactory
argument_list|()
operator|.
name|createEmpty
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|transformLinearRing
parameter_list|(
name|LinearRing
name|geom
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|super
operator|.
name|transformLinearRing
argument_list|(
name|geom
argument_list|,
name|parent
argument_list|)
decl_stmt|;
return|return
name|withTargetSRID
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getFactory
argument_list|()
operator|.
name|createEmpty
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|transformLineString
parameter_list|(
name|LineString
name|geom
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|super
operator|.
name|transformLineString
argument_list|(
name|geom
argument_list|,
name|parent
argument_list|)
decl_stmt|;
return|return
name|withTargetSRID
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getFactory
argument_list|()
operator|.
name|createEmpty
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|transformMultiLineString
parameter_list|(
name|MultiLineString
name|geom
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|super
operator|.
name|transformMultiLineString
argument_list|(
name|geom
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|geometry
operator|instanceof
name|LineString
condition|)
block|{
name|geometry
operator|=
name|factory
operator|.
name|createMultiLineString
argument_list|(
operator|new
name|LineString
index|[]
block|{
operator|(
name|LineString
operator|)
name|geometry
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|withTargetSRID
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getFactory
argument_list|()
operator|.
name|createEmpty
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|transformPolygon
parameter_list|(
name|Polygon
name|geom
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|super
operator|.
name|transformPolygon
argument_list|(
name|geom
argument_list|,
name|parent
argument_list|)
decl_stmt|;
return|return
name|withTargetSRID
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getFactory
argument_list|()
operator|.
name|createEmpty
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|transformMultiPolygon
parameter_list|(
name|MultiPolygon
name|geom
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|super
operator|.
name|transformMultiPolygon
argument_list|(
name|geom
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|geometry
operator|instanceof
name|Polygon
condition|)
block|{
name|geometry
operator|=
name|factory
operator|.
name|createMultiPolygon
argument_list|(
operator|new
name|Polygon
index|[]
block|{
operator|(
name|Polygon
operator|)
name|geometry
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|withTargetSRID
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getFactory
argument_list|()
operator|.
name|createEmpty
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|transformGeometryCollection
parameter_list|(
name|GeometryCollection
name|geom
parameter_list|,
name|Geometry
name|parent
parameter_list|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|super
operator|.
name|transformGeometryCollection
argument_list|(
name|geom
argument_list|,
name|parent
argument_list|)
decl_stmt|;
return|return
name|withTargetSRID
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getFactory
argument_list|()
operator|.
name|createEmpty
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
specifier|private
name|Geometry
name|withTargetSRID
parameter_list|(
name|Geometry
name|outputGeom
parameter_list|)
block|{
name|int
name|srid
init|=
name|coordinateTransform
operator|.
name|getTargetCRS
argument_list|()
operator|.
name|getProjection
argument_list|()
operator|.
name|getEPSGCode
argument_list|()
decl_stmt|;
name|outputGeom
operator|.
name|setSRID
argument_list|(
name|srid
argument_list|)
expr_stmt|;
return|return
name|outputGeom
return|;
block|}
block|}
end_class

end_unit

