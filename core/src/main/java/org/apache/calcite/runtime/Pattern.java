begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/** Regular expression, to be compiled into an {@link Automaton}. */
end_comment

begin_interface
specifier|public
interface|interface
name|Pattern
block|{
specifier|default
name|Automaton
name|toAutomaton
parameter_list|()
block|{
return|return
operator|new
name|AutomatonBuilder
argument_list|()
operator|.
name|add
argument_list|(
name|this
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Creates a builder. */
specifier|static
name|PatternBuilder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|PatternBuilder
argument_list|()
return|;
block|}
comment|/** Operator that constructs composite {@link Pattern} instances. */
enum|enum
name|Op
block|{
comment|/** A leaf pattern, consisting of a single symbol. */
name|SYMBOL
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
block|,
comment|/** Anchor for start "^". */
name|ANCHOR_START
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
block|,
comment|/** Anchor for end "$". */
name|ANCHOR_END
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
block|,
comment|/** Pattern that matches one pattern followed by another. */
name|SEQ
argument_list|(
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
block|,
comment|/** Pattern that matches one pattern or another. */
name|OR
argument_list|(
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
block|,
comment|/** Pattern that matches a pattern repeated zero or more times. */
name|STAR
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
comment|/** Pattern that matches a pattern repeated one or more times. */
name|PLUS
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
comment|/** Pattern that matches a pattern repeated between {@code minRepeat}      * and {@code maxRepeat} times. */
name|REPEAT
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
comment|/** Pattern that matches a pattern one time or zero times. */
name|OPTIONAL
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|minArity
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxArity
decl_stmt|;
name|Op
parameter_list|(
name|int
name|minArity
parameter_list|,
name|int
name|maxArity
parameter_list|)
block|{
name|this
operator|.
name|minArity
operator|=
name|minArity
expr_stmt|;
name|this
operator|.
name|maxArity
operator|=
name|maxArity
expr_stmt|;
block|}
block|}
comment|/** Builds a pattern expression. */
class|class
name|PatternBuilder
block|{
specifier|final
name|Stack
argument_list|<
name|Pattern
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|PatternBuilder
parameter_list|()
block|{
block|}
specifier|private
name|PatternBuilder
name|push
parameter_list|(
name|Pattern
name|item
parameter_list|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Returns the resulting pattern. */
specifier|public
name|Pattern
name|build
parameter_list|()
block|{
if|if
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"expected stack to have one item, but was "
operator|+
name|stack
argument_list|)
throw|;
block|}
return|return
name|stack
operator|.
name|pop
argument_list|()
return|;
block|}
comment|/** Returns the resulting automaton. */
specifier|public
name|Automaton
name|automaton
parameter_list|()
block|{
return|return
operator|new
name|AutomatonBuilder
argument_list|()
operator|.
name|add
argument_list|(
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Creates a pattern that matches symbol,      * and pushes it onto the stack.      *      * @see SymbolPattern */
specifier|public
name|PatternBuilder
name|symbol
parameter_list|(
name|String
name|symbolName
parameter_list|)
block|{
return|return
name|push
argument_list|(
operator|new
name|SymbolPattern
argument_list|(
name|symbolName
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a pattern that matches the two patterns at the top of the      * stack in sequence,      * and pushes it onto the stack. */
specifier|public
name|PatternBuilder
name|seq
parameter_list|()
block|{
specifier|final
name|Pattern
name|pattern1
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|pattern0
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
return|return
name|push
argument_list|(
operator|new
name|OpPattern
argument_list|(
name|Op
operator|.
name|SEQ
argument_list|,
name|pattern0
argument_list|,
name|pattern1
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a pattern that matches the patterns at the top      * of the stack zero or more times,      * and pushes it onto the stack. */
specifier|public
name|PatternBuilder
name|star
parameter_list|()
block|{
return|return
name|push
argument_list|(
operator|new
name|OpPattern
argument_list|(
name|Op
operator|.
name|STAR
argument_list|,
name|stack
operator|.
name|pop
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a pattern that matches the patterns at the top      * of the stack one or more times,      * and pushes it onto the stack. */
specifier|public
name|PatternBuilder
name|plus
parameter_list|()
block|{
return|return
name|push
argument_list|(
operator|new
name|OpPattern
argument_list|(
name|Op
operator|.
name|PLUS
argument_list|,
name|stack
operator|.
name|pop
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a pattern that matches either of the two patterns at the top      * of the stack,      * and pushes it onto the stack. */
specifier|public
name|PatternBuilder
name|or
parameter_list|()
block|{
if|if
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expecting stack to have at least 2 items, but has "
operator|+
name|stack
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|Pattern
name|pattern1
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|pattern0
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
return|return
name|push
argument_list|(
operator|new
name|OpPattern
argument_list|(
name|Op
operator|.
name|OR
argument_list|,
name|pattern0
argument_list|,
name|pattern1
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|PatternBuilder
name|repeat
parameter_list|(
name|int
name|minRepeat
parameter_list|,
name|int
name|maxRepeat
parameter_list|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
return|return
name|push
argument_list|(
operator|new
name|RepeatPattern
argument_list|(
name|minRepeat
argument_list|,
name|maxRepeat
argument_list|,
name|pattern
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|PatternBuilder
name|optional
parameter_list|()
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
return|return
name|push
argument_list|(
operator|new
name|OpPattern
argument_list|(
name|Op
operator|.
name|OPTIONAL
argument_list|,
name|pattern
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Base class for implementations of {@link Pattern}. */
specifier|abstract
class|class
name|AbstractPattern
implements|implements
name|Pattern
block|{
specifier|final
name|Op
name|op
decl_stmt|;
name|AbstractPattern
parameter_list|(
name|Op
name|op
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Automaton
name|toAutomaton
parameter_list|()
block|{
return|return
operator|new
name|AutomatonBuilder
argument_list|()
operator|.
name|add
argument_list|(
name|this
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/** Pattern that matches a symbol. */
class|class
name|SymbolPattern
extends|extends
name|AbstractPattern
block|{
specifier|final
name|String
name|name
decl_stmt|;
name|SymbolPattern
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|Op
operator|.
name|SYMBOL
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/** Pattern with one or more arguments. */
class|class
name|OpPattern
extends|extends
name|AbstractPattern
block|{
specifier|final
name|ImmutableList
argument_list|<
name|Pattern
argument_list|>
name|patterns
decl_stmt|;
name|OpPattern
parameter_list|(
name|Op
name|op
parameter_list|,
name|Pattern
modifier|...
name|patterns
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|patterns
operator|.
name|length
operator|>=
name|op
operator|.
name|minArity
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|op
operator|.
name|maxArity
operator|==
operator|-
literal|1
operator|||
name|patterns
operator|.
name|length
operator|<=
name|op
operator|.
name|maxArity
argument_list|)
expr_stmt|;
name|this
operator|.
name|patterns
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|patterns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|SEQ
case|:
return|return
name|patterns
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|" "
argument_list|)
argument_list|)
return|;
case|case
name|STAR
case|:
return|return
literal|"("
operator|+
name|patterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|")*"
return|;
case|case
name|PLUS
case|:
return|return
literal|"("
operator|+
name|patterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|")+"
return|;
case|case
name|OR
case|:
return|return
name|patterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"|"
operator|+
name|patterns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
case|case
name|OPTIONAL
case|:
return|return
name|patterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"?"
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown op "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Pattern that matches a pattern repeated between {@code minRepeat}    * and {@code maxRepeat} times. */
class|class
name|RepeatPattern
extends|extends
name|OpPattern
block|{
specifier|final
name|int
name|minRepeat
decl_stmt|;
specifier|final
name|int
name|maxRepeat
decl_stmt|;
name|RepeatPattern
parameter_list|(
name|int
name|minRepeat
parameter_list|,
name|int
name|maxRepeat
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|super
argument_list|(
name|Op
operator|.
name|REPEAT
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|minRepeat
operator|=
name|minRepeat
expr_stmt|;
name|this
operator|.
name|maxRepeat
operator|=
name|maxRepeat
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|patterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"){"
operator|+
name|minRepeat
operator|+
operator|(
name|maxRepeat
operator|==
name|minRepeat
condition|?
literal|""
else|:
operator|(
literal|", "
operator|+
name|maxRepeat
operator|)
operator|)
operator|+
literal|"}"
return|;
block|}
block|}
block|}
end_interface

end_unit

