begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJsonConstructorNullClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJsonExistsErrorBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJsonQueryEmptyOrErrorBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJsonQueryWrapperBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJsonValueEmptyOrErrorBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|PrettyPrinter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|util
operator|.
name|DefaultIndenter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|util
operator|.
name|DefaultPrettyPrinter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jayway
operator|.
name|jsonpath
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jayway
operator|.
name|jsonpath
operator|.
name|DocumentContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jayway
operator|.
name|jsonpath
operator|.
name|JsonPath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jayway
operator|.
name|jsonpath
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jayway
operator|.
name|jsonpath
operator|.
name|spi
operator|.
name|json
operator|.
name|JacksonJsonProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jayway
operator|.
name|jsonpath
operator|.
name|spi
operator|.
name|mapper
operator|.
name|JacksonMappingProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jayway
operator|.
name|jsonpath
operator|.
name|spi
operator|.
name|mapper
operator|.
name|MappingProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * A collection of functions used in JSON processing.  */
end_comment

begin_class
specifier|public
class|class
name|JsonFunctions
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|JSON_PATH_BASE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(?<mode>strict|lax)\\s+(?<spec>.+)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|DOTALL
operator||
name|Pattern
operator|.
name|MULTILINE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|JacksonJsonProvider
name|JSON_PATH_JSON_PROVIDER
init|=
operator|new
name|JacksonJsonProvider
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MappingProvider
name|JSON_PATH_MAPPING_PROVIDER
init|=
operator|new
name|JacksonMappingProvider
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PrettyPrinter
name|JSON_PRETTY_PRINTER
init|=
operator|new
name|DefaultPrettyPrinter
argument_list|()
operator|.
name|withObjectIndenter
argument_list|(
name|DefaultIndenter
operator|.
name|SYSTEM_LINEFEED_INSTANCE
operator|.
name|withLinefeed
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|JsonFunctions
parameter_list|()
block|{
block|}
specifier|private
specifier|static
name|boolean
name|isScalarObject
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonize
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
name|JSON_PATH_JSON_PROVIDER
operator|.
name|toJson
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|dejsonize
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|JSON_PATH_JSON_PROVIDER
operator|.
name|parse
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonValueContext
name|jsonValueExpression
parameter_list|(
name|String
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|JsonValueContext
operator|.
name|withJavaObj
argument_list|(
name|dejsonize
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|JsonValueContext
operator|.
name|withException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|JsonPathContext
name|jsonApiCommonSyntax
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|jsonApiCommonSyntax
argument_list|(
name|jsonValueExpression
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonPathContext
name|jsonApiCommonSyntax
parameter_list|(
name|JsonValueContext
name|input
parameter_list|)
block|{
return|return
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
literal|"strict $"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonPathContext
name|jsonApiCommonSyntax
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
return|return
name|jsonApiCommonSyntax
argument_list|(
name|jsonValueExpression
argument_list|(
name|input
argument_list|)
argument_list|,
name|pathSpec
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonPathContext
name|jsonApiCommonSyntax
parameter_list|(
name|JsonValueContext
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
try|try
block|{
name|Matcher
name|matcher
init|=
name|JSON_PATH_BASE
operator|.
name|matcher
argument_list|(
name|pathSpec
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|illegalJsonPathSpec
argument_list|(
name|pathSpec
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
name|PathMode
name|mode
init|=
name|PathMode
operator|.
name|valueOf
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|pathWff
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DocumentContext
name|ctx
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|STRICT
case|:
if|if
condition|(
name|input
operator|.
name|hasException
argument_list|()
condition|)
block|{
return|return
name|JsonPathContext
operator|.
name|withStrictException
argument_list|(
name|input
operator|.
name|exc
argument_list|)
return|;
block|}
name|ctx
operator|=
name|JsonPath
operator|.
name|parse
argument_list|(
name|input
operator|.
name|obj
argument_list|,
name|Configuration
operator|.
name|builder
argument_list|()
operator|.
name|jsonProvider
argument_list|(
name|JSON_PATH_JSON_PROVIDER
argument_list|)
operator|.
name|mappingProvider
argument_list|(
name|JSON_PATH_MAPPING_PROVIDER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAX
case|:
if|if
condition|(
name|input
operator|.
name|hasException
argument_list|()
condition|)
block|{
return|return
name|JsonPathContext
operator|.
name|withJavaObj
argument_list|(
name|PathMode
operator|.
name|LAX
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|ctx
operator|=
name|JsonPath
operator|.
name|parse
argument_list|(
name|input
operator|.
name|obj
argument_list|,
name|Configuration
operator|.
name|builder
argument_list|()
operator|.
name|options
argument_list|(
name|Option
operator|.
name|SUPPRESS_EXCEPTIONS
argument_list|)
operator|.
name|jsonProvider
argument_list|(
name|JSON_PATH_JSON_PROVIDER
argument_list|)
operator|.
name|mappingProvider
argument_list|(
name|JSON_PATH_MAPPING_PROVIDER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|RESOURCE
operator|.
name|illegalJsonPathModeInPathSpec
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
argument_list|,
name|pathSpec
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
try|try
block|{
return|return
name|JsonPathContext
operator|.
name|withJavaObj
argument_list|(
name|mode
argument_list|,
name|ctx
operator|.
name|read
argument_list|(
name|pathWff
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|JsonPathContext
operator|.
name|withStrictException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|JsonPathContext
operator|.
name|withUnknownException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Boolean
name|jsonExists
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
return|return
name|jsonExists
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Boolean
name|jsonExists
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|SqlJsonExistsErrorBehavior
name|errorBehavior
parameter_list|)
block|{
return|return
name|jsonExists
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|,
name|errorBehavior
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Boolean
name|jsonExists
parameter_list|(
name|JsonValueContext
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
return|return
name|jsonExists
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Boolean
name|jsonExists
parameter_list|(
name|JsonValueContext
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|SqlJsonExistsErrorBehavior
name|errorBehavior
parameter_list|)
block|{
return|return
name|jsonExists
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|,
name|errorBehavior
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Boolean
name|jsonExists
parameter_list|(
name|JsonPathContext
name|context
parameter_list|)
block|{
return|return
name|jsonExists
argument_list|(
name|context
argument_list|,
name|SqlJsonExistsErrorBehavior
operator|.
name|FALSE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Boolean
name|jsonExists
parameter_list|(
name|JsonPathContext
name|context
parameter_list|,
name|SqlJsonExistsErrorBehavior
name|errorBehavior
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|hasException
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|errorBehavior
condition|)
block|{
case|case
name|TRUE
case|:
return|return
name|Boolean
operator|.
name|TRUE
return|;
case|case
name|FALSE
case|:
return|return
name|Boolean
operator|.
name|FALSE
return|;
case|case
name|ERROR
case|:
throw|throw
name|toUnchecked
argument_list|(
name|context
operator|.
name|exc
argument_list|)
throw|;
case|case
name|UNKNOWN
case|:
return|return
literal|null
return|;
default|default:
throw|throw
name|RESOURCE
operator|.
name|illegalErrorBehaviorInJsonExistsFunc
argument_list|(
name|errorBehavior
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
else|else
block|{
return|return
name|context
operator|.
name|obj
operator|!=
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|jsonValueAny
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|SqlJsonValueEmptyOrErrorBehavior
name|emptyBehavior
parameter_list|,
name|Object
name|defaultValueOnEmpty
parameter_list|,
name|SqlJsonValueEmptyOrErrorBehavior
name|errorBehavior
parameter_list|,
name|Object
name|defaultValueOnError
parameter_list|)
block|{
return|return
name|jsonValueAny
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|,
name|emptyBehavior
argument_list|,
name|defaultValueOnEmpty
argument_list|,
name|errorBehavior
argument_list|,
name|defaultValueOnError
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|jsonValueAny
parameter_list|(
name|JsonValueContext
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|SqlJsonValueEmptyOrErrorBehavior
name|emptyBehavior
parameter_list|,
name|Object
name|defaultValueOnEmpty
parameter_list|,
name|SqlJsonValueEmptyOrErrorBehavior
name|errorBehavior
parameter_list|,
name|Object
name|defaultValueOnError
parameter_list|)
block|{
return|return
name|jsonValueAny
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|,
name|emptyBehavior
argument_list|,
name|defaultValueOnEmpty
argument_list|,
name|errorBehavior
argument_list|,
name|defaultValueOnError
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|jsonValueAny
parameter_list|(
name|JsonPathContext
name|context
parameter_list|,
name|SqlJsonValueEmptyOrErrorBehavior
name|emptyBehavior
parameter_list|,
name|Object
name|defaultValueOnEmpty
parameter_list|,
name|SqlJsonValueEmptyOrErrorBehavior
name|errorBehavior
parameter_list|,
name|Object
name|defaultValueOnError
parameter_list|)
block|{
specifier|final
name|Exception
name|exc
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|exc
operator|=
name|context
operator|.
name|exc
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
init|=
name|context
operator|.
name|obj
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|context
operator|.
name|mode
operator|==
name|PathMode
operator|.
name|LAX
operator|&&
operator|!
name|isScalarObject
argument_list|(
name|value
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|emptyBehavior
condition|)
block|{
case|case
name|ERROR
case|:
throw|throw
name|RESOURCE
operator|.
name|emptyResultOfJsonValueFuncNotAllowed
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
case|case
name|NULL
case|:
return|return
literal|null
return|;
case|case
name|DEFAULT
case|:
return|return
name|defaultValueOnEmpty
return|;
default|default:
throw|throw
name|RESOURCE
operator|.
name|illegalEmptyBehaviorInJsonValueFunc
argument_list|(
name|emptyBehavior
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
if|else if
condition|(
name|context
operator|.
name|mode
operator|==
name|PathMode
operator|.
name|STRICT
operator|&&
operator|!
name|isScalarObject
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|exc
operator|=
name|RESOURCE
operator|.
name|scalarValueRequiredInStrictModeOfJsonValueFunc
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
switch|switch
condition|(
name|errorBehavior
condition|)
block|{
case|case
name|ERROR
case|:
throw|throw
name|toUnchecked
argument_list|(
name|exc
argument_list|)
throw|;
case|case
name|NULL
case|:
return|return
literal|null
return|;
case|case
name|DEFAULT
case|:
return|return
name|defaultValueOnError
return|;
default|default:
throw|throw
name|RESOURCE
operator|.
name|illegalErrorBehaviorInJsonValueFunc
argument_list|(
name|errorBehavior
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|jsonQuery
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|SqlJsonQueryWrapperBehavior
name|wrapperBehavior
parameter_list|,
name|SqlJsonQueryEmptyOrErrorBehavior
name|emptyBehavior
parameter_list|,
name|SqlJsonQueryEmptyOrErrorBehavior
name|errorBehavior
parameter_list|)
block|{
return|return
name|jsonQuery
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|,
name|wrapperBehavior
argument_list|,
name|emptyBehavior
argument_list|,
name|errorBehavior
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonQuery
parameter_list|(
name|JsonValueContext
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|SqlJsonQueryWrapperBehavior
name|wrapperBehavior
parameter_list|,
name|SqlJsonQueryEmptyOrErrorBehavior
name|emptyBehavior
parameter_list|,
name|SqlJsonQueryEmptyOrErrorBehavior
name|errorBehavior
parameter_list|)
block|{
return|return
name|jsonQuery
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|,
name|wrapperBehavior
argument_list|,
name|emptyBehavior
argument_list|,
name|errorBehavior
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonQuery
parameter_list|(
name|JsonPathContext
name|context
parameter_list|,
name|SqlJsonQueryWrapperBehavior
name|wrapperBehavior
parameter_list|,
name|SqlJsonQueryEmptyOrErrorBehavior
name|emptyBehavior
parameter_list|,
name|SqlJsonQueryEmptyOrErrorBehavior
name|errorBehavior
parameter_list|)
block|{
specifier|final
name|Exception
name|exc
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|exc
operator|=
name|context
operator|.
name|exc
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|obj
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|wrapperBehavior
condition|)
block|{
case|case
name|WITHOUT_ARRAY
case|:
name|value
operator|=
name|context
operator|.
name|obj
expr_stmt|;
break|break;
case|case
name|WITH_UNCONDITIONAL_ARRAY
case|:
name|value
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|context
operator|.
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|WITH_CONDITIONAL_ARRAY
case|:
if|if
condition|(
name|context
operator|.
name|obj
operator|instanceof
name|Collection
condition|)
block|{
name|value
operator|=
name|context
operator|.
name|obj
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|context
operator|.
name|obj
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
name|RESOURCE
operator|.
name|illegalWrapperBehaviorInJsonQueryFunc
argument_list|(
name|wrapperBehavior
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|context
operator|.
name|mode
operator|==
name|PathMode
operator|.
name|LAX
operator|&&
name|isScalarObject
argument_list|(
name|value
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|emptyBehavior
condition|)
block|{
case|case
name|ERROR
case|:
throw|throw
name|RESOURCE
operator|.
name|emptyResultOfJsonQueryFuncNotAllowed
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
case|case
name|NULL
case|:
return|return
literal|null
return|;
case|case
name|EMPTY_ARRAY
case|:
return|return
literal|"[]"
return|;
case|case
name|EMPTY_OBJECT
case|:
return|return
literal|"{}"
return|;
default|default:
throw|throw
name|RESOURCE
operator|.
name|illegalEmptyBehaviorInJsonQueryFunc
argument_list|(
name|emptyBehavior
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
if|else if
condition|(
name|context
operator|.
name|mode
operator|==
name|PathMode
operator|.
name|STRICT
operator|&&
name|isScalarObject
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|exc
operator|=
name|RESOURCE
operator|.
name|arrayOrObjectValueRequiredInStrictModeOfJsonQueryFunc
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
return|return
name|jsonize
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exc
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
switch|switch
condition|(
name|errorBehavior
condition|)
block|{
case|case
name|ERROR
case|:
throw|throw
name|toUnchecked
argument_list|(
name|exc
argument_list|)
throw|;
case|case
name|NULL
case|:
return|return
literal|null
return|;
case|case
name|EMPTY_ARRAY
case|:
return|return
literal|"[]"
return|;
case|case
name|EMPTY_OBJECT
case|:
return|return
literal|"{}"
return|;
default|default:
throw|throw
name|RESOURCE
operator|.
name|illegalErrorBehaviorInJsonQueryFunc
argument_list|(
name|errorBehavior
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|jsonObject
parameter_list|(
name|SqlJsonConstructorNullClause
name|nullClause
parameter_list|,
name|Object
modifier|...
name|kvs
parameter_list|)
block|{
assert|assert
name|kvs
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
assert|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kvs
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|k
init|=
operator|(
name|String
operator|)
name|kvs
index|[
name|i
index|]
decl_stmt|;
name|Object
name|v
init|=
name|kvs
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|nullKeyOfJsonObjectNotAllowed
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
block|}
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nullClause
operator|==
name|SqlJsonConstructorNullClause
operator|.
name|NULL_ON_NULL
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jsonize
argument_list|(
name|map
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|jsonObjectAggAdd
parameter_list|(
name|Map
name|map
parameter_list|,
name|String
name|k
parameter_list|,
name|Object
name|v
parameter_list|,
name|SqlJsonConstructorNullClause
name|nullClause
parameter_list|)
block|{
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|nullKeyOfJsonObjectNotAllowed
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
block|}
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nullClause
operator|==
name|SqlJsonConstructorNullClause
operator|.
name|NULL_ON_NULL
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|jsonArray
parameter_list|(
name|SqlJsonConstructorNullClause
name|nullClause
parameter_list|,
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nullClause
operator|==
name|SqlJsonConstructorNullClause
operator|.
name|NULL_ON_NULL
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jsonize
argument_list|(
name|list
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|jsonArrayAggAdd
parameter_list|(
name|List
name|list
parameter_list|,
name|Object
name|element
parameter_list|,
name|SqlJsonConstructorNullClause
name|nullClause
parameter_list|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nullClause
operator|==
name|SqlJsonConstructorNullClause
operator|.
name|NULL_ON_NULL
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|jsonPretty
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|jsonPretty
argument_list|(
name|jsonValueExpression
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonPretty
parameter_list|(
name|JsonValueContext
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|JSON_PATH_JSON_PROVIDER
operator|.
name|getObjectMapper
argument_list|()
operator|.
name|writer
argument_list|(
name|JSON_PRETTY_PRINTER
argument_list|)
operator|.
name|writeValueAsString
argument_list|(
name|input
operator|.
name|obj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|exceptionWhileSerializingToJson
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|input
operator|.
name|obj
argument_list|)
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|jsonType
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|jsonType
argument_list|(
name|jsonValueExpression
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonType
parameter_list|(
name|JsonValueContext
name|input
parameter_list|)
block|{
specifier|final
name|String
name|result
decl_stmt|;
specifier|final
name|Object
name|val
init|=
name|input
operator|.
name|obj
decl_stmt|;
try|try
block|{
if|if
condition|(
name|val
operator|instanceof
name|Integer
condition|)
block|{
name|result
operator|=
literal|"INTEGER"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|result
operator|=
literal|"STRING"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|instanceof
name|Float
condition|)
block|{
name|result
operator|=
literal|"FLOAT"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|instanceof
name|Double
condition|)
block|{
name|result
operator|=
literal|"DOUBLE"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|instanceof
name|Long
condition|)
block|{
name|result
operator|=
literal|"LONG"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|instanceof
name|Boolean
condition|)
block|{
name|result
operator|=
literal|"BOOLEAN"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|instanceof
name|Date
condition|)
block|{
name|result
operator|=
literal|"DATE"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|instanceof
name|Map
condition|)
block|{
name|result
operator|=
literal|"OBJECT"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|instanceof
name|Collection
condition|)
block|{
name|result
operator|=
literal|"ARRAY"
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|"NULL"
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForJsonType
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForJsonType
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|Integer
name|jsonDepth
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|jsonDepth
argument_list|(
name|jsonValueExpression
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|jsonDepth
parameter_list|(
name|JsonValueContext
name|input
parameter_list|)
block|{
specifier|final
name|Integer
name|result
decl_stmt|;
specifier|final
name|Object
name|o
init|=
name|input
operator|.
name|obj
decl_stmt|;
try|try
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|calculateDepth
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForJsonDepth
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|Integer
name|calculateDepth
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|isScalarObject
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
name|Queue
argument_list|<
name|Object
argument_list|>
name|q
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|q
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|obj
init|=
name|q
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
for|for
control|(
name|Object
name|value
range|:
operator|(
operator|(
name|LinkedHashMap
operator|)
name|obj
operator|)
operator|.
name|values
argument_list|()
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Object
name|value
range|:
operator|(
name|Collection
operator|)
name|obj
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|++
name|depth
expr_stmt|;
block|}
return|return
name|depth
return|;
block|}
specifier|public
specifier|static
name|Integer
name|jsonLength
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|jsonLength
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|jsonLength
parameter_list|(
name|JsonValueContext
name|input
parameter_list|)
block|{
return|return
name|jsonLength
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|jsonLength
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
return|return
name|jsonLength
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|jsonLength
parameter_list|(
name|JsonValueContext
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
return|return
name|jsonLength
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|jsonLength
parameter_list|(
name|JsonPathContext
name|context
parameter_list|)
block|{
specifier|final
name|Integer
name|result
decl_stmt|;
specifier|final
name|Object
name|value
decl_stmt|;
try|try
block|{
if|if
condition|(
name|context
operator|.
name|hasException
argument_list|()
condition|)
block|{
throw|throw
name|toUnchecked
argument_list|(
name|context
operator|.
name|exc
argument_list|)
throw|;
block|}
name|value
operator|=
name|context
operator|.
name|obj
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|Collection
operator|)
name|value
operator|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|LinkedHashMap
operator|)
name|value
operator|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|isScalarObject
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForJsonLength
argument_list|(
name|context
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonKeys
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|jsonKeys
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonKeys
parameter_list|(
name|JsonValueContext
name|input
parameter_list|)
block|{
return|return
name|jsonKeys
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonKeys
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
return|return
name|jsonKeys
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonKeys
parameter_list|(
name|JsonValueContext
name|input
parameter_list|,
name|String
name|pathSpec
parameter_list|)
block|{
return|return
name|jsonKeys
argument_list|(
name|jsonApiCommonSyntax
argument_list|(
name|input
argument_list|,
name|pathSpec
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonKeys
parameter_list|(
name|JsonPathContext
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|value
decl_stmt|;
try|try
block|{
if|if
condition|(
name|context
operator|.
name|hasException
argument_list|()
condition|)
block|{
throw|throw
name|toUnchecked
argument_list|(
name|context
operator|.
name|exc
argument_list|)
throw|;
block|}
name|value
operator|=
name|context
operator|.
name|obj
expr_stmt|;
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
operator|(
name|value
operator|instanceof
name|Collection
operator|)
operator|||
name|isScalarObject
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|list
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
for|for
control|(
name|Object
name|key
range|:
operator|(
operator|(
name|LinkedHashMap
operator|)
name|value
operator|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForJsonKeys
argument_list|(
name|context
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
return|return
name|jsonize
argument_list|(
name|list
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonRemove
parameter_list|(
name|String
name|input
parameter_list|,
name|String
modifier|...
name|pathSpecs
parameter_list|)
block|{
return|return
name|jsonRemove
argument_list|(
name|jsonValueExpression
argument_list|(
name|input
argument_list|)
argument_list|,
name|pathSpecs
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|jsonRemove
parameter_list|(
name|JsonValueContext
name|input
parameter_list|,
name|String
modifier|...
name|pathSpecs
parameter_list|)
block|{
try|try
block|{
name|DocumentContext
name|ctx
init|=
name|JsonPath
operator|.
name|parse
argument_list|(
name|input
operator|.
name|obj
argument_list|,
name|Configuration
operator|.
name|builder
argument_list|()
operator|.
name|options
argument_list|(
name|Option
operator|.
name|SUPPRESS_EXCEPTIONS
argument_list|)
operator|.
name|jsonProvider
argument_list|(
name|JSON_PATH_JSON_PROVIDER
argument_list|)
operator|.
name|mappingProvider
argument_list|(
name|JSON_PATH_MAPPING_PROVIDER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pathSpec
range|:
name|pathSpecs
control|)
block|{
if|if
condition|(
operator|(
name|pathSpec
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ctx
operator|.
name|read
argument_list|(
name|pathSpec
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|ctx
operator|.
name|delete
argument_list|(
name|pathSpec
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ctx
operator|.
name|jsonString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForJsonRemove
argument_list|(
name|input
operator|.
name|toString
argument_list|()
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|pathSpecs
argument_list|)
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isJsonValue
parameter_list|(
name|String
name|input
parameter_list|)
block|{
try|try
block|{
name|dejsonize
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isJsonObject
parameter_list|(
name|String
name|input
parameter_list|)
block|{
try|try
block|{
name|Object
name|o
init|=
name|dejsonize
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|o
operator|instanceof
name|Map
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isJsonArray
parameter_list|(
name|String
name|input
parameter_list|)
block|{
try|try
block|{
name|Object
name|o
init|=
name|dejsonize
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|o
operator|instanceof
name|Collection
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isJsonScalar
parameter_list|(
name|String
name|input
parameter_list|)
block|{
try|try
block|{
name|Object
name|o
init|=
name|dejsonize
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|)
operator|&&
operator|!
operator|(
name|o
operator|instanceof
name|Collection
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|RuntimeException
name|toUnchecked
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|Util
operator|.
name|toUnchecked
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**    * Returned path context of JsonApiCommonSyntax, public for testing.    */
specifier|public
specifier|static
class|class
name|JsonPathContext
block|{
specifier|public
specifier|final
name|PathMode
name|mode
decl_stmt|;
specifier|public
specifier|final
name|Object
name|obj
decl_stmt|;
specifier|public
specifier|final
name|Exception
name|exc
decl_stmt|;
specifier|private
name|JsonPathContext
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Exception
name|exc
parameter_list|)
block|{
name|this
argument_list|(
name|PathMode
operator|.
name|NONE
argument_list|,
name|obj
argument_list|,
name|exc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JsonPathContext
parameter_list|(
name|PathMode
name|mode
parameter_list|,
name|Object
name|obj
parameter_list|,
name|Exception
name|exc
parameter_list|)
block|{
assert|assert
name|obj
operator|==
literal|null
operator|||
name|exc
operator|==
literal|null
assert|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|obj
expr_stmt|;
name|this
operator|.
name|exc
operator|=
name|exc
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasException
parameter_list|()
block|{
return|return
name|exc
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|static
name|JsonPathContext
name|withUnknownException
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
return|return
operator|new
name|JsonPathContext
argument_list|(
name|PathMode
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|exc
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonPathContext
name|withStrictException
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
return|return
operator|new
name|JsonPathContext
argument_list|(
name|PathMode
operator|.
name|STRICT
argument_list|,
literal|null
argument_list|,
name|exc
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonPathContext
name|withJavaObj
parameter_list|(
name|PathMode
name|mode
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|PathMode
operator|.
name|UNKNOWN
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|illegalJsonPathMode
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
if|if
condition|(
name|mode
operator|==
name|PathMode
operator|.
name|STRICT
operator|&&
name|obj
operator|==
literal|null
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|strictPathModeRequiresNonEmptyValue
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
block|}
return|return
operator|new
name|JsonPathContext
argument_list|(
name|mode
argument_list|,
name|obj
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JsonPathContext{"
operator|+
literal|"mode="
operator|+
name|mode
operator|+
literal|", obj="
operator|+
name|obj
operator|+
literal|", exc="
operator|+
name|exc
operator|+
literal|'}'
return|;
block|}
block|}
comment|/**    * The Java output of {@link org.apache.calcite.sql.fun.SqlJsonValueExpressionOperator}.    */
specifier|public
specifier|static
class|class
name|JsonValueContext
block|{
annotation|@
name|JsonValue
specifier|public
specifier|final
name|Object
name|obj
decl_stmt|;
specifier|public
specifier|final
name|Exception
name|exc
decl_stmt|;
specifier|private
name|JsonValueContext
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Exception
name|exc
parameter_list|)
block|{
assert|assert
name|obj
operator|==
literal|null
operator|||
name|exc
operator|==
literal|null
assert|;
name|this
operator|.
name|obj
operator|=
name|obj
expr_stmt|;
name|this
operator|.
name|exc
operator|=
name|exc
expr_stmt|;
block|}
specifier|public
specifier|static
name|JsonValueContext
name|withJavaObj
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|new
name|JsonValueContext
argument_list|(
name|obj
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonValueContext
name|withException
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
return|return
operator|new
name|JsonValueContext
argument_list|(
literal|null
argument_list|,
name|exc
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasException
parameter_list|()
block|{
return|return
name|exc
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|JsonValueContext
name|jsonValueContext
init|=
operator|(
name|JsonValueContext
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|obj
argument_list|,
name|jsonValueContext
operator|.
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toString
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
comment|/**    * Path spec has two different modes: lax mode and strict mode.    * Lax mode suppresses any thrown exception and returns null,    * whereas strict mode throws exceptions.    */
specifier|public
enum|enum
name|PathMode
block|{
name|LAX
block|,
name|STRICT
block|,
name|UNKNOWN
block|,
name|NONE
block|}
block|}
end_class

begin_comment
comment|// End JsonFunctions.java
end_comment

end_unit

