begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Deterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Function object for {@code RAND} and {@code RAND_INTEGER}, with and without  * seed.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
class|class
name|RandomFunction
block|{
specifier|private
name|Random
name|random
decl_stmt|;
comment|/** Creates a RandomFunction.    *    *<p>Marked deterministic so that the code generator instantiates one once    * per query, not once per row. */
annotation|@
name|Deterministic
specifier|public
name|RandomFunction
parameter_list|()
block|{
block|}
comment|/** Implements the {@code RAND()} SQL function. */
specifier|public
name|double
name|rand
parameter_list|()
block|{
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
return|return
name|random
operator|.
name|nextDouble
argument_list|()
return|;
block|}
comment|/** Implements the {@code RAND(seed)} SQL function. */
specifier|public
name|double
name|randSeed
parameter_list|(
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"seed"
argument_list|)
name|int
name|seed
parameter_list|)
block|{
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
operator|^
operator|(
name|seed
operator|<<
literal|16
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|random
operator|.
name|nextDouble
argument_list|()
return|;
block|}
comment|/** Implements the {@code RAND_INTEGER(bound)} SQL function. */
specifier|public
name|int
name|randInteger
parameter_list|(
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"bound"
argument_list|)
name|int
name|bound
parameter_list|)
block|{
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
return|return
name|random
operator|.
name|nextInt
argument_list|(
name|bound
argument_list|)
return|;
block|}
comment|/** Implements the {@code RAND_INTEGER(seed, bound)} SQL function. */
specifier|public
name|int
name|randIntegerSeed
parameter_list|(
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"seed"
argument_list|)
name|int
name|seed
parameter_list|,
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"bound"
argument_list|)
name|int
name|bound
parameter_list|)
block|{
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
return|return
name|random
operator|.
name|nextInt
argument_list|(
name|bound
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RandomFunction.java
end_comment

end_unit

