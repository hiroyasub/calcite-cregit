begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Julian Hyde under one or more contributor license  * agreements.  See the NOTICE file distributed with this work for  * additional information regarding copyright ownership. Julian Hyde  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the  * License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Defining wrapper classes around resources that allow the compiler to check  * whether the resources exist and have the argument types that your code  * expects.  *  *<p>If this class belongs to a package other than  * {@code net.hydromatic.resource}, it was probably generated by the Maven  * plugin (groupId: "net.hydromatic", artifactId:  * "hydromatic-resource-maven-plugin"). Code generation allows projects to use  * this resource library without adding a runtime dependency on another JAR.  */
end_comment

begin_class
specifier|public
class|class
name|Resources
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Locale
argument_list|>
name|MAP_THREAD_TO_LOCALE
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Locale
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Resources
parameter_list|()
block|{
block|}
comment|/** Returns the preferred locale of the current thread, or    * the default locale if the current thread has not called    * {@link #setThreadLocale}.    *    * @return Locale */
specifier|protected
specifier|static
name|Locale
name|getThreadOrDefaultLocale
parameter_list|()
block|{
name|Locale
name|locale
init|=
name|getThreadLocale
argument_list|()
decl_stmt|;
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
block|{
return|return
name|Locale
operator|.
name|getDefault
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|locale
return|;
block|}
block|}
comment|/** Sets the locale for the current thread.    *    * @param locale Locale */
specifier|public
specifier|static
name|void
name|setThreadLocale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|MAP_THREAD_TO_LOCALE
operator|.
name|set
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the preferred locale of the current thread, or null if the    * thread has not called {@link #setThreadLocale}.    *    * @return Locale */
specifier|public
specifier|static
name|Locale
name|getThreadLocale
parameter_list|()
block|{
return|return
name|MAP_THREAD_TO_LOCALE
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Creates an instance of the resource object, using the class's name as    * the name of the resource file.    *    * @see #create(String, Class)    *    * @param<T> Resource type    * @param clazz Interface that contains a method for each resource    * @return Instance of the interface that can be used to instantiate    * resources    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|create
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|clazz
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|clazz
argument_list|)
return|;
block|}
comment|/** Creates an instance of the resource object.    *    *<p>The resource interface has methods that return {@link Inst} and    * {@link ExInst} values. Each of those methods is basically a factory method.    *    *<p>This method creates an instance of that interface backed by a resource    * bundle, using a dynamic proxy ({@link Proxy}).    *    *<p>Suppose that base = "com.example.MyResource" and the current locale is    * "en_US". A method    *    *<blockquote>    *&#64;BaseMessage("Illegal binary string {0}")    *     ExInst&lt;IllegalArgumentException&gt; illegalBinaryString(String a0);    *</blockquote>    *    * will look up a resource "IllegalBinaryString" from the resource file    * "com/example/MyResource_en_US.properties", and substitute in the parameter    * value {@code a0}.    *    *<p>The resource in the properties file may or may not be equal to the    * base message "Illegal binary string {0}". But in the base locale, it    * probably should be.    *    * @param<T> Resource type    * @param base Base name of the resource.properties file    * @param clazz Interface that contains a method for each resource    * @return Instance of the interface that can be used to instantiate    * resources    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|create
parameter_list|(
name|String
name|base
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|base
argument_list|,
name|EmptyPropertyAccessor
operator|.
name|INSTANCE
argument_list|,
name|clazz
argument_list|)
return|;
block|}
comment|/** Creates an instance of the resource object that can access properties    * but not resources. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|create
parameter_list|(
name|PropertyAccessor
name|accessor
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|create
argument_list|(
literal|null
argument_list|,
name|accessor
argument_list|,
name|clazz
argument_list|)
return|;
block|}
comment|/** Creates an instance of the resource object that can access properties    * but not resources. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|create
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|create
argument_list|(
literal|null
argument_list|,
operator|new
name|PropertiesAccessor
argument_list|(
name|properties
argument_list|)
argument_list|,
name|clazz
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|create
parameter_list|(
specifier|final
name|String
name|base
parameter_list|,
specifier|final
name|PropertyAccessor
name|accessor
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|clazz
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|clazz
block|}
argument_list|,
operator|new
name|InvocationHandler
argument_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|Object
name|o
init|=
name|cache
operator|.
name|get
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|create
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
return|return
name|create
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|private
name|Object
name|create
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|BuiltinMethod
operator|.
name|OBJECT_TO_STRING
operator|.
name|method
argument_list|)
condition|)
block|{
return|return
name|toString
argument_list|()
return|;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Inst
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
specifier|final
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|returnType
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Locale
operator|.
name|class
argument_list|,
name|Method
operator|.
name|class
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
specifier|final
name|Locale
name|locale
init|=
name|Resources
operator|.
name|getThreadOrDefaultLocale
argument_list|()
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|base
argument_list|,
name|locale
argument_list|,
name|method
argument_list|,
name|args
operator|!=
literal|null
condition|?
name|args
else|:
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|returnType
operator|.
name|getConstructor
argument_list|(
name|PropertyAccessor
operator|.
name|class
argument_list|,
name|Method
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|accessor
argument_list|,
name|method
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
specifier|final
name|Throwable
name|e2
init|=
name|e
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e2
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e2
throw|;
block|}
if|if
condition|(
name|e2
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|e2
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Applies all validations to all resource methods in the given    * resource object.    *    * @param o Resource object to validate    */
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|validate
argument_list|(
name|o
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Validation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Applies the given validations to all resource methods in the given    * resource object.    *    * @param o Resource object to validate    * @param validations Validations to perform    */
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|Object
name|o
parameter_list|,
name|EnumSet
argument_list|<
name|Validation
argument_list|>
name|validations
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|Inst
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
name|parameterTypes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|args
index|[
name|i
index|]
operator|=
name|zero
argument_list|(
name|parameterTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Inst
name|inst
init|=
operator|(
name|Inst
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|inst
operator|.
name|validate
argument_list|(
name|validations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"in "
operator|+
name|method
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"in "
operator|+
name|method
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|count
operator|==
literal|0
operator|&&
name|validations
operator|.
name|contains
argument_list|(
name|Validation
operator|.
name|AT_LEAST_ONE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"resource object "
operator|+
name|o
operator|+
literal|" contains no resources"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Object
name|zero
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|clazz
operator|==
name|String
operator|.
name|class
condition|?
literal|""
else|:
name|clazz
operator|==
name|byte
operator|.
name|class
condition|?
operator|(
name|byte
operator|)
literal|0
else|:
name|clazz
operator|==
name|char
operator|.
name|class
condition|?
operator|(
name|char
operator|)
literal|0
else|:
name|clazz
operator|==
name|short
operator|.
name|class
condition|?
operator|(
name|short
operator|)
literal|0
else|:
name|clazz
operator|==
name|int
operator|.
name|class
condition|?
literal|0
else|:
name|clazz
operator|==
name|long
operator|.
name|class
condition|?
literal|0L
else|:
name|clazz
operator|==
name|float
operator|.
name|class
condition|?
literal|0F
else|:
name|clazz
operator|==
name|double
operator|.
name|class
condition|?
literal|0D
else|:
name|clazz
operator|==
name|boolean
operator|.
name|class
condition|?
literal|false
else|:
literal|null
return|;
block|}
comment|/** Returns whether two objects are equal or are both null. */
specifier|private
specifier|static
name|boolean
name|equal
parameter_list|(
name|Object
name|o0
parameter_list|,
name|Object
name|o1
parameter_list|)
block|{
return|return
name|o0
operator|==
name|o1
operator|||
name|o0
operator|!=
literal|null
operator|&&
name|o0
operator|.
name|equals
argument_list|(
name|o1
argument_list|)
return|;
block|}
comment|/** Element in a resource (either a resource or a property). */
specifier|public
specifier|static
class|class
name|Element
block|{
specifier|protected
specifier|final
name|Method
name|method
decl_stmt|;
specifier|protected
specifier|final
name|String
name|key
decl_stmt|;
specifier|public
name|Element
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|deriveKey
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|deriveKey
parameter_list|()
block|{
specifier|final
name|Resource
name|resource
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
return|return
name|resource
operator|.
name|value
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|name
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|Character
operator|.
name|toUpperCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Resource instance. It contains the resource method (which    * serves to identify the resource), the locale with which we    * expect to render the resource, and any arguments. */
specifier|public
specifier|static
class|class
name|Inst
extends|extends
name|Element
block|{
specifier|private
specifier|final
name|Locale
name|locale
decl_stmt|;
specifier|protected
specifier|final
name|String
name|base
decl_stmt|;
specifier|protected
specifier|final
name|Object
index|[]
name|args
decl_stmt|;
specifier|public
name|Inst
parameter_list|(
name|String
name|base
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|.
name|getClass
argument_list|()
operator|==
name|this
operator|.
name|getClass
argument_list|()
operator|&&
name|locale
operator|==
operator|(
operator|(
name|Inst
operator|)
name|obj
operator|)
operator|.
name|locale
operator|&&
name|method
operator|==
operator|(
operator|(
name|Inst
operator|)
name|obj
operator|)
operator|.
name|method
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|args
argument_list|,
operator|(
operator|(
name|Inst
operator|)
name|obj
operator|)
operator|.
name|args
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|locale
argument_list|,
name|method
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|ResourceBundle
name|bundle
parameter_list|()
block|{
return|return
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|base
argument_list|,
name|locale
argument_list|)
return|;
block|}
specifier|public
name|Inst
name|localize
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
return|return
operator|new
name|Inst
argument_list|(
name|base
argument_list|,
name|locale
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|EnumSet
argument_list|<
name|Validation
argument_list|>
name|validations
parameter_list|)
block|{
specifier|final
name|ResourceBundle
name|bundle
init|=
name|bundle
argument_list|()
decl_stmt|;
for|for
control|(
name|Validation
name|validation
range|:
name|validations
control|)
block|{
switch|switch
condition|(
name|validation
condition|)
block|{
case|case
name|BUNDLE_HAS_RESOURCE
case|:
if|if
condition|(
operator|!
name|bundle
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"key '"
operator|+
name|key
operator|+
literal|"' not found for resource '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"' in bundle '"
operator|+
name|bundle
operator|+
literal|"'"
argument_list|)
throw|;
block|}
break|break;
case|case
name|MESSAGE_SPECIFIED
case|:
specifier|final
name|BaseMessage
name|annotation1
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|BaseMessage
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"resource '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"' must specify BaseMessage"
argument_list|)
throw|;
block|}
break|break;
case|case
name|EVEN_QUOTES
case|:
name|String
name|message
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|BaseMessage
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|countQuotesIn
argument_list|(
name|message
argument_list|)
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"resource '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"' should have even number of quotes"
argument_list|)
throw|;
block|}
break|break;
case|case
name|MESSAGE_MATCH
case|:
specifier|final
name|BaseMessage
name|annotation2
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|BaseMessage
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation2
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|value
init|=
name|annotation2
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|final
name|String
name|value2
init|=
name|bundle
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|?
name|bundle
operator|.
name|getString
argument_list|(
name|key
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|equal
argument_list|(
name|value
argument_list|,
name|value2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"message for resource '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"' is different between class and resource file"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|ARGUMENT_MATCH
case|:
name|String
name|raw
init|=
name|raw
argument_list|()
decl_stmt|;
name|MessageFormat
name|format
init|=
operator|new
name|MessageFormat
argument_list|(
name|raw
argument_list|)
decl_stmt|;
specifier|final
name|Format
index|[]
name|formats
init|=
name|format
operator|.
name|getFormatsByArgumentIndex
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Class
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Format
name|format1
init|=
name|formats
index|[
name|i
index|]
decl_stmt|;
name|Class
name|parameterType
init|=
name|parameterTypes
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|e
decl_stmt|;
if|if
condition|(
name|format1
operator|instanceof
name|NumberFormat
condition|)
block|{
name|e
operator|=
name|parameterType
operator|==
name|short
operator|.
name|class
operator|||
name|parameterType
operator|==
name|int
operator|.
name|class
operator|||
name|parameterType
operator|==
name|long
operator|.
name|class
operator|||
name|parameterType
operator|==
name|float
operator|.
name|class
operator|||
name|parameterType
operator|==
name|double
operator|.
name|class
operator|||
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|parameterType
argument_list|)
condition|?
name|parameterType
else|:
name|Number
operator|.
name|class
expr_stmt|;
block|}
if|else if
condition|(
name|format1
operator|instanceof
name|DateFormat
condition|)
block|{
name|e
operator|=
name|Date
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|String
operator|.
name|class
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameterTypeList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|parameterTypes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|.
name|equals
argument_list|(
name|parameterTypeList
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"type mismatch in method '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"' between message format elements "
operator|+
name|types
operator|+
literal|" and method parameters "
operator|+
name|parameterTypeList
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
block|}
specifier|private
name|int
name|countQuotesIn
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|message
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|message
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'\''
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|public
name|String
name|str
parameter_list|()
block|{
name|String
name|message
init|=
name|raw
argument_list|()
decl_stmt|;
name|MessageFormat
name|format
init|=
operator|new
name|MessageFormat
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|format
operator|.
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
return|return
name|format
operator|.
name|format
argument_list|(
name|args
argument_list|)
return|;
block|}
specifier|public
name|String
name|raw
parameter_list|()
block|{
try|try
block|{
return|return
name|bundle
argument_list|()
operator|.
name|getString
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|e
parameter_list|)
block|{
comment|// Resource is not in the bundle. (It is probably missing from the
comment|// .properties file.) Fall back to the base message.
return|return
name|method
operator|.
name|getAnnotation
argument_list|(
name|BaseMessage
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
comment|// At present, annotations allow at most one property per resource. We
comment|// could design new annotations if any resource needed more.
specifier|final
name|Property
name|property
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Property
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|property
operator|.
name|name
argument_list|()
argument_list|,
name|property
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Sub-class of {@link Inst} that can throw an exception. Requires caused    * by exception.*/
specifier|public
specifier|static
class|class
name|ExInstWithCause
parameter_list|<
name|T
extends|extends
name|Exception
parameter_list|>
extends|extends
name|Inst
block|{
specifier|public
name|ExInstWithCause
parameter_list|(
name|String
name|base
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|,
name|locale
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Inst
name|localize
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
return|return
operator|new
name|ExInstWithCause
argument_list|<
name|T
argument_list|>
argument_list|(
name|base
argument_list|,
name|locale
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|T
name|ex
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
try|try
block|{
comment|//noinspection unchecked
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|exceptionClass
init|=
name|getExceptionClass
argument_list|(
name|method
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|T
argument_list|>
name|constructor
decl_stmt|;
specifier|final
name|String
name|str
init|=
name|str
argument_list|()
decl_stmt|;
name|boolean
name|causeInConstructor
init|=
literal|false
decl_stmt|;
try|try
block|{
name|constructor
operator|=
name|exceptionClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
expr_stmt|;
name|causeInConstructor
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsmStringThrowable
parameter_list|)
block|{
try|try
block|{
name|constructor
operator|=
name|exceptionClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsmString
parameter_list|)
block|{
comment|// Ignore nsmString to encourage users to have (String,
comment|// Throwable) constructors.
throw|throw
name|nsmStringThrowable
throw|;
block|}
block|}
if|if
condition|(
name|causeInConstructor
condition|)
block|{
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|str
argument_list|,
name|cause
argument_list|)
return|;
block|}
name|T
name|ex
init|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ex
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|iae
parameter_list|)
block|{
comment|// Sorry, unable to add cause via constructor and via initCause
block|}
block|}
return|return
name|ex
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
if|else if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Class
name|getExceptionClass
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|// Get exception type from ExInstWithCause<MyException> type parameter.
comment|// ExInstWithCause might be one of super classes.
comment|// And, this class may be a parameter-less sub-class of a generic base.
comment|//
comment|// NOTE: We used to use
comment|// com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters.
comment|// More powerful, but we can't afford an extra dependency.
specifier|final
name|Type
name|type0
init|=
name|type
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
specifier|final
name|Type
index|[]
name|types
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|length
operator|>=
literal|1
operator|&&
name|types
index|[
literal|0
index|]
operator|instanceof
name|Class
operator|&&
name|Throwable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
operator|)
name|types
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
operator|(
name|Class
operator|)
name|types
index|[
literal|0
index|]
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find superclass ExInstWithCause for "
operator|+
name|type
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|type
operator|=
operator|(
operator|(
name|Class
operator|)
name|type
operator|)
operator|.
name|getGenericSuperclass
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find superclass ExInstWithCause for "
operator|+
name|type0
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|validateException
parameter_list|(
name|Callable
argument_list|<
name|Exception
argument_list|>
name|exSupplier
parameter_list|)
block|{
name|Throwable
name|cause
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//noinspection ThrowableResultOfMethodCallIgnored
specifier|final
name|Exception
name|ex
init|=
name|exSupplier
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|cause
operator|=
operator|new
name|NullPointerException
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|cause
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// This can never happen since exSupplier should be just a ex() call.
comment|// catch(Exception) is required since Callable#call throws Exception.
comment|// Just in case we get exception somehow, we will rethrow it as a part
comment|// of AssertionError below.
name|cause
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|AssertionError
name|assertionError
init|=
operator|new
name|AssertionError
argument_list|(
literal|"error instantiating exception for resource '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|assertionError
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
throw|throw
name|assertionError
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|EnumSet
argument_list|<
name|Validation
argument_list|>
name|validations
parameter_list|)
block|{
name|super
operator|.
name|validate
argument_list|(
name|validations
argument_list|)
expr_stmt|;
if|if
condition|(
name|validations
operator|.
name|contains
argument_list|(
name|Validation
operator|.
name|CREATE_EXCEPTION
argument_list|)
condition|)
block|{
name|validateException
argument_list|(
operator|new
name|Callable
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|Exception
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ex
argument_list|(
operator|new
name|NullPointerException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Sub-class of {@link Inst} that can throw an exception without caused    * by. */
specifier|public
specifier|static
class|class
name|ExInst
parameter_list|<
name|T
extends|extends
name|Exception
parameter_list|>
extends|extends
name|ExInstWithCause
argument_list|<
name|T
argument_list|>
block|{
specifier|public
name|ExInst
parameter_list|(
name|String
name|base
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|,
name|locale
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|T
name|ex
parameter_list|()
block|{
return|return
name|ex
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|EnumSet
argument_list|<
name|Validation
argument_list|>
name|validations
parameter_list|)
block|{
name|super
operator|.
name|validate
argument_list|(
name|validations
argument_list|)
expr_stmt|;
if|if
condition|(
name|validations
operator|.
name|contains
argument_list|(
name|Validation
operator|.
name|CREATE_EXCEPTION
argument_list|)
condition|)
block|{
name|validateException
argument_list|(
operator|new
name|Callable
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|Exception
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ex
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Property instance. */
specifier|public
specifier|abstract
specifier|static
class|class
name|Prop
extends|extends
name|Element
block|{
specifier|protected
specifier|final
name|PropertyAccessor
name|accessor
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|hasDefault
decl_stmt|;
specifier|public
name|Prop
parameter_list|(
name|PropertyAccessor
name|accessor
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|super
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|this
operator|.
name|accessor
operator|=
name|accessor
expr_stmt|;
specifier|final
name|Default
name|resource
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Default
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|hasDefault
operator|=
name|resource
operator|!=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSet
parameter_list|()
block|{
return|return
name|accessor
operator|.
name|isSet
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasDefault
parameter_list|()
block|{
return|return
name|hasDefault
return|;
block|}
name|void
name|checkDefault
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasDefault
condition|)
block|{
throw|throw
operator|new
name|NoDefaultValueException
argument_list|(
literal|"Property "
operator|+
name|key
operator|+
literal|" has no default value"
argument_list|)
throw|;
block|}
block|}
name|void
name|checkDefault2
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasDefault
condition|)
block|{
throw|throw
operator|new
name|NoDefaultValueException
argument_list|(
literal|"Property "
operator|+
name|key
operator|+
literal|" is not set and has no default value"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Integer property instance. */
specifier|public
specifier|static
class|class
name|IntProp
extends|extends
name|Prop
block|{
specifier|private
specifier|final
name|int
name|defaultValue
decl_stmt|;
specifier|public
name|IntProp
parameter_list|(
name|PropertyAccessor
name|accessor
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|super
argument_list|(
name|accessor
argument_list|,
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDefault
condition|)
block|{
specifier|final
name|Default
name|resource
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Default
operator|.
name|class
argument_list|)
decl_stmt|;
name|defaultValue
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|resource
operator|.
name|value
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultValue
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/** Returns the value of this integer property. */
specifier|public
name|int
name|get
parameter_list|()
block|{
return|return
name|accessor
operator|.
name|intValue
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Returns the value of this integer property, returning the given default      * value if the property is not set. */
specifier|public
name|int
name|get
parameter_list|(
name|int
name|defaultValue
parameter_list|)
block|{
return|return
name|accessor
operator|.
name|intValue
argument_list|(
name|this
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|int
name|defaultValue
parameter_list|()
block|{
name|checkDefault
argument_list|()
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
block|}
comment|/** Boolean property instance. */
specifier|public
specifier|static
class|class
name|BooleanProp
extends|extends
name|Prop
block|{
specifier|private
specifier|final
name|boolean
name|defaultValue
decl_stmt|;
specifier|public
name|BooleanProp
parameter_list|(
name|PropertyAccessor
name|accessor
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|super
argument_list|(
name|accessor
argument_list|,
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDefault
condition|)
block|{
specifier|final
name|Default
name|resource
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Default
operator|.
name|class
argument_list|)
decl_stmt|;
name|defaultValue
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|resource
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultValue
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/** Returns the value of this boolean property. */
specifier|public
name|boolean
name|get
parameter_list|()
block|{
return|return
name|accessor
operator|.
name|booleanValue
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Returns the value of this boolean property, returning the given default      * value if the property is not set. */
specifier|public
name|boolean
name|get
parameter_list|(
name|boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|accessor
operator|.
name|booleanValue
argument_list|(
name|this
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|defaultValue
parameter_list|()
block|{
name|checkDefault
argument_list|()
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
block|}
comment|/** Double property instance. */
specifier|public
specifier|static
class|class
name|DoubleProp
extends|extends
name|Prop
block|{
specifier|private
specifier|final
name|double
name|defaultValue
decl_stmt|;
specifier|public
name|DoubleProp
parameter_list|(
name|PropertyAccessor
name|accessor
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|super
argument_list|(
name|accessor
argument_list|,
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDefault
condition|)
block|{
specifier|final
name|Default
name|resource
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Default
operator|.
name|class
argument_list|)
decl_stmt|;
name|defaultValue
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|resource
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultValue
operator|=
literal|0d
expr_stmt|;
block|}
block|}
comment|/** Returns the value of this double property. */
specifier|public
name|double
name|get
parameter_list|()
block|{
return|return
name|accessor
operator|.
name|doubleValue
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Returns the value of this double property, returning the given default      * value if the property is not set. */
specifier|public
name|double
name|get
parameter_list|(
name|double
name|defaultValue
parameter_list|)
block|{
return|return
name|accessor
operator|.
name|doubleValue
argument_list|(
name|this
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|double
name|defaultValue
parameter_list|()
block|{
name|checkDefault
argument_list|()
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
block|}
comment|/** String property instance. */
specifier|public
specifier|static
class|class
name|StringProp
extends|extends
name|Prop
block|{
specifier|private
specifier|final
name|String
name|defaultValue
decl_stmt|;
specifier|public
name|StringProp
parameter_list|(
name|PropertyAccessor
name|accessor
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|super
argument_list|(
name|accessor
argument_list|,
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDefault
condition|)
block|{
specifier|final
name|Default
name|resource
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Default
operator|.
name|class
argument_list|)
decl_stmt|;
name|defaultValue
operator|=
name|resource
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|defaultValue
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** Returns the value of this String property. */
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|accessor
operator|.
name|stringValue
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Returns the value of this String property, returning the given default      * value if the property is not set. */
specifier|public
name|String
name|get
parameter_list|(
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|accessor
operator|.
name|stringValue
argument_list|(
name|this
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|String
name|defaultValue
parameter_list|()
block|{
name|checkDefault
argument_list|()
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
block|}
comment|/** Thrown when a default value is needed but a property does not have    * one. */
specifier|public
specifier|static
class|class
name|NoDefaultValueException
extends|extends
name|RuntimeException
block|{
name|NoDefaultValueException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Means by which a resource can get values of properties, given their    * name. */
specifier|public
interface|interface
name|PropertyAccessor
block|{
name|boolean
name|isSet
parameter_list|(
name|Prop
name|p
parameter_list|)
function_decl|;
name|int
name|intValue
parameter_list|(
name|IntProp
name|p
parameter_list|)
function_decl|;
name|int
name|intValue
parameter_list|(
name|IntProp
name|p
parameter_list|,
name|int
name|defaultValue
parameter_list|)
function_decl|;
name|String
name|stringValue
parameter_list|(
name|StringProp
name|p
parameter_list|)
function_decl|;
name|String
name|stringValue
parameter_list|(
name|StringProp
name|p
parameter_list|,
name|String
name|defaultValue
parameter_list|)
function_decl|;
name|boolean
name|booleanValue
parameter_list|(
name|BooleanProp
name|p
parameter_list|)
function_decl|;
name|boolean
name|booleanValue
parameter_list|(
name|BooleanProp
name|p
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
function_decl|;
name|double
name|doubleValue
parameter_list|(
name|DoubleProp
name|p
parameter_list|)
function_decl|;
name|double
name|doubleValue
parameter_list|(
name|DoubleProp
name|p
parameter_list|,
name|double
name|defaultValue
parameter_list|)
function_decl|;
block|}
enum|enum
name|EmptyPropertyAccessor
implements|implements
name|PropertyAccessor
block|{
name|INSTANCE
block|;
specifier|public
name|boolean
name|isSet
parameter_list|(
name|Prop
name|p
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|intValue
parameter_list|(
name|IntProp
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|defaultValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|intValue
parameter_list|(
name|IntProp
name|p
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|String
name|stringValue
parameter_list|(
name|StringProp
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|defaultValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|stringValue
parameter_list|(
name|StringProp
name|p
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|boolean
name|booleanValue
parameter_list|(
name|BooleanProp
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|defaultValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|booleanValue
parameter_list|(
name|BooleanProp
name|p
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|double
name|doubleValue
parameter_list|(
name|DoubleProp
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|defaultValue
argument_list|()
return|;
block|}
specifier|public
name|double
name|doubleValue
parameter_list|(
name|DoubleProp
name|p
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
comment|/** Types of validation that can be performed on a resource. */
specifier|public
enum|enum
name|Validation
block|{
comment|/** Checks that each method's resource key corresponds to a resource in the      * bundle. */
name|BUNDLE_HAS_RESOURCE
block|,
comment|/** Checks that there is at least one resource in the bundle. */
name|AT_LEAST_ONE
block|,
comment|/** Checks that the base message annotation is on every resource. */
name|MESSAGE_SPECIFIED
block|,
comment|/** Checks that every message contains even number of quotes. */
name|EVEN_QUOTES
block|,
comment|/** Checks that the base message matches the message in the bundle. */
name|MESSAGE_MATCH
block|,
comment|/** Checks that it is possible to create an exception. */
name|CREATE_EXCEPTION
block|,
comment|/** Checks that the parameters of the method are consistent with the      * format elements in the base message. */
name|ARGUMENT_MATCH
block|,   }
comment|/** The message in the default locale. */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|METHOD
argument_list|)
specifier|public
annotation_defn|@interface
name|BaseMessage
block|{
name|String
name|value
parameter_list|()
function_decl|;
block|}
comment|/** The name of the property in the resource file. */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|METHOD
argument_list|)
specifier|public
annotation_defn|@interface
name|Resource
block|{
name|String
name|value
parameter_list|()
function_decl|;
block|}
comment|/** Property of a resource. */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|METHOD
argument_list|)
specifier|public
annotation_defn|@interface
name|Property
block|{
name|String
name|name
parameter_list|()
function_decl|;
name|String
name|value
parameter_list|()
function_decl|;
block|}
comment|/** Default value of a property. */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|METHOD
argument_list|)
specifier|public
annotation_defn|@interface
name|Default
block|{
name|String
name|value
parameter_list|()
function_decl|;
block|}
comment|/**    *<code>ShadowResourceBundle</code> is an abstract base class for    * {@link ResourceBundle} classes which are backed by a properties file. When    * the class is created, it loads a properties file with the same name as the    * class.    *    *<p> In the standard scheme (see {@link ResourceBundle}), if    * you call<code>{@link ResourceBundle#getBundle}("foo.MyResource")</code>,    * it first looks for a class called<code>foo.MyResource</code>, then    * looks for a file called<code>foo/MyResource.properties</code>. If it finds    * the file, it creates a {@link PropertyResourceBundle} and loads the class.    * The problem is if you want to load the<code>.properties</code> file    * into a dedicated class;<code>ShadowResourceBundle</code> helps with this    * case.    *    *<p> You should create a class as follows:<blockquote>    *    *<pre>package foo;    *class MyResource extends ShadowResourceBundle {    *    public MyResource() throws java.io.IOException {    *    }    *}</pre>    *    *</blockquote>    *    * Then when you call    * {@link ResourceBundle#getBundle ResourceBundle.getBundle("foo.MyResource")},    * it will find the class before the properties file, but still automatically    * load the properties file based upon the name of the class.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|ShadowResourceBundle
extends|extends
name|ResourceBundle
block|{
specifier|private
name|PropertyResourceBundle
name|bundle
decl_stmt|;
comment|/**      * Creates a<code>ShadowResourceBundle</code>, and reads resources from      * a<code>.properties</code> file with the same name as the current class.      * For example, if the class is called<code>foo.MyResource_en_US</code>,      * reads from<code>foo/MyResource_en_US.properties</code>, then      *<code>foo/MyResource_en.properties</code>, then      *<code>foo/MyResource.properties</code>.      *      * @throws IOException on error      */
specifier|protected
name|ShadowResourceBundle
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|Class
name|clazz
init|=
name|getClass
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|openPropertiesFile
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"could not open properties file for "
operator|+
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|MyPropertyResourceBundle
name|previousBundle
init|=
operator|new
name|MyPropertyResourceBundle
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|bundle
operator|=
name|previousBundle
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now load properties files for parent locales, which we deduce from
comment|// the names of our super-class, and its super-class.
while|while
condition|(
literal|true
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|==
name|ShadowResourceBundle
operator|.
name|class
operator|||
operator|!
name|ResourceBundle
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
break|break;
block|}
name|stream
operator|=
name|openPropertiesFile
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|MyPropertyResourceBundle
name|newBundle
init|=
operator|new
name|MyPropertyResourceBundle
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|previousBundle
operator|.
name|setParentTrojan
argument_list|(
name|newBundle
argument_list|)
expr_stmt|;
name|previousBundle
operator|=
name|newBundle
expr_stmt|;
block|}
block|}
comment|/**      * Opens the properties file corresponding to a given class. The code is      * copied from {@link ResourceBundle}.      */
specifier|private
specifier|static
name|InputStream
name|openPropertiesFile
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
specifier|final
name|ClassLoader
name|loader
init|=
name|clazz
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
specifier|final
name|String
name|resName
init|=
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".properties"
decl_stmt|;
return|return
operator|(
name|InputStream
operator|)
name|java
operator|.
name|security
operator|.
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
return|return
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|resName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|resName
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|bundle
operator|.
name|getKeys
argument_list|()
return|;
block|}
specifier|protected
name|Object
name|handleGetObject
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|bundle
operator|.
name|getObject
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Returns the instance of the<code>baseName</code> resource bundle      * for the given locale.      *      *<p> This method should be called from a derived class, with the proper      * casting:<blockquote>      *      *<pre>class MyResource extends ShadowResourceBundle {      *    ...      *      *    /&#42;&#42;      *&#42; Retrieves the instance of {&#64;link MyResource} appropriate      *&#42; to the given locale.      *&#42;&#42;/      *    public static MyResource instance(Locale locale) {      *       return (MyResource) instance(      *           MyResource.class.getName(), locale,      *           ResourceBundle.getBundle(MyResource.class.getName(), locale));      *    }      *    ...      * }</pre></blockquote>      *      * @param baseName Base name      * @param locale Locale      * @param bundle Resource bundle      * @return Resource bundle      */
specifier|protected
specifier|static
name|ShadowResourceBundle
name|instance
parameter_list|(
name|String
name|baseName
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|ResourceBundle
name|bundle
parameter_list|)
block|{
if|if
condition|(
name|bundle
operator|instanceof
name|PropertyResourceBundle
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"ShadowResourceBundle.instance('"
operator|+
name|baseName
operator|+
literal|"','"
operator|+
name|locale
operator|+
literal|"') found "
operator|+
name|baseName
operator|+
literal|"_"
operator|+
name|locale
operator|+
literal|".properties but not "
operator|+
name|baseName
operator|+
literal|"_"
operator|+
name|locale
operator|+
literal|".class"
argument_list|)
throw|;
block|}
return|return
operator|(
name|ShadowResourceBundle
operator|)
name|bundle
return|;
block|}
block|}
comment|/** Resource bundle based on properties. */
specifier|static
class|class
name|MyPropertyResourceBundle
extends|extends
name|PropertyResourceBundle
block|{
specifier|public
name|MyPropertyResourceBundle
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|void
name|setParentTrojan
parameter_list|(
name|ResourceBundle
name|parent
parameter_list|)
block|{
name|super
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
enum|enum
name|BuiltinMethod
block|{
name|OBJECT_TO_STRING
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"toString"
argument_list|)
block|;
specifier|public
specifier|final
name|Method
name|method
decl_stmt|;
name|BuiltinMethod
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
modifier|...
name|argumentTypes
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|lookupMethod
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|argumentTypes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Finds a method of a given name that accepts a given set of arguments.      * Includes in its search inherited methods and methods with wider argument      * types.      *      * @param clazz Class against which method is invoked      * @param methodName Name of method      * @param argumentTypes Types of arguments      *      * @return A method with the given name that matches the arguments given      * @throws RuntimeException if method not found      */
specifier|public
specifier|static
name|Method
name|lookupMethod
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
modifier|...
name|argumentTypes
parameter_list|)
block|{
try|try
block|{
comment|//noinspection unchecked
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|argumentTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while resolving method '"
operator|+
name|methodName
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|argumentTypes
argument_list|)
operator|+
literal|"' in class "
operator|+
name|clazz
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Implementation of {@link PropertyAccessor} that reads from a    * {@link Properties}. */
specifier|private
specifier|static
class|class
name|PropertiesAccessor
implements|implements
name|PropertyAccessor
block|{
specifier|private
specifier|final
name|Properties
name|properties
decl_stmt|;
name|PropertiesAccessor
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSet
parameter_list|(
name|Prop
name|p
parameter_list|)
block|{
return|return
name|properties
operator|.
name|containsKey
argument_list|(
name|p
operator|.
name|key
argument_list|)
return|;
block|}
specifier|public
name|int
name|intValue
parameter_list|(
name|IntProp
name|p
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|,
literal|10
argument_list|)
return|;
block|}
name|p
operator|.
name|checkDefault2
argument_list|()
expr_stmt|;
return|return
name|p
operator|.
name|defaultValue
return|;
block|}
specifier|public
name|int
name|intValue
parameter_list|(
name|IntProp
name|p
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|key
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|,
literal|10
argument_list|)
return|;
block|}
specifier|public
name|String
name|stringValue
parameter_list|(
name|StringProp
name|p
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
name|p
operator|.
name|checkDefault2
argument_list|()
expr_stmt|;
return|return
name|p
operator|.
name|defaultValue
return|;
block|}
specifier|public
name|String
name|stringValue
parameter_list|(
name|StringProp
name|p
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|key
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|s
return|;
block|}
specifier|public
name|boolean
name|booleanValue
parameter_list|(
name|BooleanProp
name|p
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|s
argument_list|)
return|;
block|}
name|p
operator|.
name|checkDefault2
argument_list|()
expr_stmt|;
return|return
name|p
operator|.
name|defaultValue
return|;
block|}
specifier|public
name|boolean
name|booleanValue
parameter_list|(
name|BooleanProp
name|p
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|key
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
name|double
name|doubleValue
parameter_list|(
name|DoubleProp
name|p
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
argument_list|)
return|;
block|}
name|p
operator|.
name|checkDefault2
argument_list|()
expr_stmt|;
return|return
name|p
operator|.
name|defaultValue
return|;
block|}
specifier|public
name|double
name|doubleValue
parameter_list|(
name|DoubleProp
name|p
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|key
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Resources.java
end_comment

end_unit

