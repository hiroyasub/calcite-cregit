begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Deterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|NonDeterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Primitive
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|MathContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Helper methods to implement SQL functions in generated code.  *  *<p>Not present: and, or, not (builtin operators are better, because they  * use lazy evaluation. Implementations do not check for null values; the  * calling code must do that.</p>  *  *<p>Many of the functions do not check for null values. This is intentional.  * If null arguments are possible, the code-generation framework checks for  * nulls before calling the functions.</p>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnnecessaryUnboxing"
argument_list|)
annotation|@
name|Deterministic
specifier|public
class|class
name|SqlFunctions
block|{
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|DOUBLE_FORMAT
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0E0"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeZone
name|LOCAL_TZ
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function1
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Enumerable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|LIST_AS_ENUMERABLE
init|=
operator|new
name|Function1
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Enumerable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Holds, for each thread, a map from sequence name to sequence current    * value.    *    *<p>This is a straw man of an implementation whose main goal is to prove    * that sequences can be parsed, validated and planned. A real application    * will want persistent values for sequences, shared among threads. */
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
argument_list|>
name|THREAD_SEQUENCES
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|SqlFunctions
parameter_list|()
block|{
block|}
comment|/** SQL SUBSTRING(string FROM ... FOR ...) function. */
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|for_
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
name|from
operator|-
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|from
operator|-
literal|1
operator|+
name|for_
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL SUBSTRING(string FROM ...) function. */
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|from
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
name|from
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** SQL UPPER(string) function. */
specifier|public
specifier|static
name|String
name|upper
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
comment|/** SQL LOWER(string) function. */
specifier|public
specifier|static
name|String
name|lower
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
comment|/** SQL INITCAP(string) function. */
specifier|public
specifier|static
name|String
name|initcap
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// Assumes Alpha as [A-Za-z0-9]
comment|// white space is treated as everything else.
specifier|final
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|boolean
name|start
init|=
literal|true
decl_stmt|;
specifier|final
name|StringBuilder
name|newS
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|curCh
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|c
init|=
operator|(
name|int
operator|)
name|curCh
decl_stmt|;
if|if
condition|(
name|start
condition|)
block|{
comment|// curCh is whitespace or first character of word.
if|if
condition|(
name|c
operator|>
literal|47
operator|&&
name|c
operator|<
literal|58
condition|)
block|{
comment|// 0-9
name|start
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|>
literal|64
operator|&&
name|c
operator|<
literal|91
condition|)
block|{
comment|// A-Z
name|start
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|>
literal|96
operator|&&
name|c
operator|<
literal|123
condition|)
block|{
comment|// a-z
name|start
operator|=
literal|false
expr_stmt|;
name|curCh
operator|=
operator|(
name|char
operator|)
operator|(
name|c
operator|-
literal|32
operator|)
expr_stmt|;
comment|// Uppercase this character
block|}
comment|// else {} whitespace
block|}
else|else
block|{
comment|// Inside of a word or white space after end of word.
if|if
condition|(
name|c
operator|>
literal|47
operator|&&
name|c
operator|<
literal|58
condition|)
block|{
comment|// 0-9
comment|// noop
block|}
if|else if
condition|(
name|c
operator|>
literal|64
operator|&&
name|c
operator|<
literal|91
condition|)
block|{
comment|// A-Z
name|curCh
operator|=
operator|(
name|char
operator|)
operator|(
name|c
operator|+
literal|32
operator|)
expr_stmt|;
comment|// Lowercase this character
block|}
if|else if
condition|(
name|c
operator|>
literal|96
operator|&&
name|c
operator|<
literal|123
condition|)
block|{
comment|// a-z
comment|// noop
block|}
else|else
block|{
comment|// whitespace
name|start
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|newS
operator|.
name|append
argument_list|(
name|curCh
argument_list|)
expr_stmt|;
block|}
comment|// for each character in s
return|return
name|newS
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** SQL CHARACTER_LENGTH(string) function. */
specifier|public
specifier|static
name|int
name|charLength
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|length
argument_list|()
return|;
block|}
comment|/** SQL {@code string || string} operator. */
specifier|public
specifier|static
name|String
name|concat
parameter_list|(
name|String
name|s0
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
name|s0
operator|+
name|s1
return|;
block|}
comment|/** SQL {@code binary || binary} operator. */
specifier|public
specifier|static
name|ByteString
name|concat
parameter_list|(
name|ByteString
name|s0
parameter_list|,
name|ByteString
name|s1
parameter_list|)
block|{
return|return
name|s0
operator|.
name|concat
argument_list|(
name|s1
argument_list|)
return|;
block|}
comment|/** SQL {@code RTRIM} function applied to string. */
specifier|public
specifier|static
name|String
name|rtrim
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|' '
argument_list|)
return|;
block|}
comment|/** SQL {@code LTRIM} function. */
specifier|public
specifier|static
name|String
name|ltrim
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM(... seek FROM s)} function. */
specifier|public
specifier|static
name|String
name|trim
parameter_list|(
name|boolean
name|leading
parameter_list|,
name|boolean
name|trailing
parameter_list|,
name|String
name|seek
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
name|leading
argument_list|,
name|trailing
argument_list|,
name|seek
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM} function. */
specifier|private
specifier|static
name|String
name|trim_
parameter_list|(
name|String
name|s
parameter_list|,
name|boolean
name|left
parameter_list|,
name|boolean
name|right
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|int
name|j
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|!=
name|c
condition|)
block|{
break|break;
block|}
operator|--
name|j
expr_stmt|;
block|}
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|left
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|c
condition|)
block|{
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM} function applied to binary string. */
specifier|public
specifier|static
name|ByteString
name|trim
parameter_list|(
name|ByteString
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Helper for CAST. */
specifier|public
specifier|static
name|ByteString
name|rtrim
parameter_list|(
name|ByteString
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM} function applied to binary string. */
specifier|private
specifier|static
name|ByteString
name|trim_
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|boolean
name|left
parameter_list|,
name|boolean
name|right
parameter_list|)
block|{
name|int
name|j
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
return|return
name|ByteString
operator|.
name|EMPTY
return|;
block|}
if|if
condition|(
name|s
operator|.
name|byteAt
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
operator|--
name|j
expr_stmt|;
block|}
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|left
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
condition|)
block|{
return|return
name|ByteString
operator|.
name|EMPTY
return|;
block|}
if|if
condition|(
name|s
operator|.
name|byteAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function. */
specifier|public
specifier|static
name|String
name|overlay
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|r
parameter_list|,
name|int
name|start
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|r
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|+
name|r
operator|+
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|r
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function. */
specifier|public
specifier|static
name|String
name|overlay
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|r
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|r
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|+
name|r
operator|+
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|length
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function applied to binary strings. */
specifier|public
specifier|static
name|ByteString
name|overlay
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|ByteString
name|r
parameter_list|,
name|int
name|start
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|r
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|.
name|concat
argument_list|(
name|r
argument_list|)
operator|.
name|concat
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|r
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function applied to binary strings. */
specifier|public
specifier|static
name|ByteString
name|overlay
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|ByteString
name|r
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|r
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|.
name|concat
argument_list|(
name|r
argument_list|)
operator|.
name|concat
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|length
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL {@code LIKE} function. */
specifier|public
specifier|static
name|boolean
name|like
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
specifier|final
name|String
name|regex
init|=
name|Like
operator|.
name|sqlToRegexLike
argument_list|(
name|pattern
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|regex
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** SQL {@code LIKE} function with escape. */
specifier|public
specifier|static
name|boolean
name|like
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|escape
parameter_list|)
block|{
specifier|final
name|String
name|regex
init|=
name|Like
operator|.
name|sqlToRegexLike
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|regex
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** SQL {@code SIMILAR} function. */
specifier|public
specifier|static
name|boolean
name|similar
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
specifier|final
name|String
name|regex
init|=
name|Like
operator|.
name|sqlToRegexSimilar
argument_list|(
name|pattern
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|regex
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** SQL {@code SIMILAR} function with escape. */
specifier|public
specifier|static
name|boolean
name|similar
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|escape
parameter_list|)
block|{
specifier|final
name|String
name|regex
init|=
name|Like
operator|.
name|sqlToRegexSimilar
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|regex
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|// =
comment|/** SQL = operator applied to Object values (including String; neither    * side may be null). */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|equals
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL = operator applied to BigDecimal values (neither may be null). */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|stripTrailingZeros
argument_list|()
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|stripTrailingZeros
argument_list|()
argument_list|)
return|;
block|}
comment|//<>
comment|/** SQL&lt;&gt; operator applied to Object values (including String;    * neither side may be null). */
specifier|public
specifier|static
name|boolean
name|ne
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
operator|!
name|b0
operator|.
name|equals
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL&lt;&gt; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|ne
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|!=
literal|0
return|;
block|}
comment|//<
comment|/** SQL&lt; operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL&lt; operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL&lt; operator applied to ByteString values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL&lt; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|//<=
comment|/** SQL&le; operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL&le; operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL&le; operator applied to ByteString values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL&le; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|//>
comment|/** SQL&gt; operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL&gt; operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL&gt; operator applied to ByteString values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL&gt; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|//>=
comment|/** SQL&ge; operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL&ge; operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL&ge; operator applied to ByteString values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL&ge; operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|// +
comment|/** SQL<code>+</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|plus
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|+
name|b1
return|;
block|}
comment|/** SQL<code>+</code> operator applied to int values; left side may be    * null. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to int values; right side may be    * null. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|plus
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|+
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|+
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|plus
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|add
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// -
comment|/** SQL<code>-</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|minus
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|-
name|b1
return|;
block|}
comment|/** SQL<code>-</code> operator applied to int values; left side may be    * null. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to int values; right side may be    * null. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|minus
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|-
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|-
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|minus
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|subtract
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// /
comment|/** SQL<code>/</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|/
name|b1
return|;
block|}
comment|/** SQL<code>/</code> operator applied to int values; left side may be    * null. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to int values; right side may be    * null. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|divide
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|/
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|/
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|divide
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|divide
argument_list|(
name|b1
argument_list|,
name|MathContext
operator|.
name|DECIMAL64
argument_list|)
return|;
block|}
comment|// *
comment|/** SQL<code>*</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|multiply
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|*
name|b1
return|;
block|}
comment|/** SQL<code>*</code> operator applied to int values; left side may be    * null. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to int values; right side may be    * null. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|multiply
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|*
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|*
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|multiply
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|multiply
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|// EXP
comment|/** SQL<code>EXP</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|exp
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|exp
parameter_list|(
name|long
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// POWER
comment|/** SQL<code>POWER</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|double
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|long
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// LN
comment|/** SQL {@code LN(number)} function applied to double values. */
specifier|public
specifier|static
name|double
name|ln
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/** SQL {@code LN(number)} function applied to long values. */
specifier|public
specifier|static
name|double
name|ln
parameter_list|(
name|long
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL {@code LN(number)} function applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|ln
parameter_list|(
name|BigDecimal
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|d
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// LOG10
comment|/** SQL<code>LOG10(numeric)</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|log10
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL {@code LOG10(number)} function applied to long values. */
specifier|public
specifier|static
name|double
name|log10
parameter_list|(
name|long
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL {@code LOG10(number)} function applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|log10
parameter_list|(
name|BigDecimal
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|d
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// MOD
comment|/** SQL<code>MOD</code> operator applied to byte values. */
specifier|public
specifier|static
name|byte
name|mod
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
operator|(
name|b0
operator|%
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>MOD</code> operator applied to short values. */
specifier|public
specifier|static
name|short
name|mod
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
operator|(
name|b0
operator|%
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>MOD</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|mod
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|%
name|b1
return|;
block|}
comment|/** SQL<code>MOD</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|mod
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|%
name|b1
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|BigDecimal
name|mod
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|mod
argument_list|(
name|b0
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b1
argument_list|)
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|int
name|mod
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|mod
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|mod
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
specifier|final
name|BigDecimal
index|[]
name|bigDecimals
init|=
name|b0
operator|.
name|divideAndRemainder
argument_list|(
name|b1
argument_list|)
decl_stmt|;
return|return
name|bigDecimals
index|[
literal|1
index|]
return|;
block|}
comment|// FLOOR
specifier|public
specifier|static
name|double
name|floor
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|floor
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|floor
parameter_list|(
name|float
name|b0
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|floor
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|b0
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|BigDecimal
operator|.
name|ROUND_FLOOR
argument_list|)
return|;
block|}
comment|/** SQL<code>FLOOR</code> operator applied to byte values. */
specifier|public
specifier|static
name|byte
name|floor
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|floor
argument_list|(
operator|(
name|int
operator|)
name|b0
argument_list|,
operator|(
name|int
operator|)
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>FLOOR</code> operator applied to short values. */
specifier|public
specifier|static
name|short
name|floor
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|floor
argument_list|(
operator|(
name|int
operator|)
name|b0
argument_list|,
operator|(
name|int
operator|)
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>FLOOR</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|floor
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
name|int
name|r
init|=
name|b0
operator|%
name|b1
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|r
operator|+=
name|b1
expr_stmt|;
block|}
return|return
name|b0
operator|-
name|r
return|;
block|}
comment|/** SQL<code>FLOOR</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|floor
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
name|long
name|r
init|=
name|b0
operator|%
name|b1
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|r
operator|+=
name|b1
expr_stmt|;
block|}
return|return
name|b0
operator|-
name|r
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|BigDecimal
name|floor
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
name|b0
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b1
argument_list|)
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|int
name|floor
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|floor
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
specifier|final
name|BigDecimal
index|[]
name|bigDecimals
init|=
name|b0
operator|.
name|divideAndRemainder
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|BigDecimal
name|r
init|=
name|bigDecimals
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|signum
argument_list|()
operator|<
literal|0
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|add
argument_list|(
name|b1
argument_list|)
expr_stmt|;
block|}
return|return
name|b0
operator|.
name|subtract
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|// CEIL
specifier|public
specifier|static
name|double
name|ceil
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|ceil
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|ceil
parameter_list|(
name|float
name|b0
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|ceil
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|b0
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|BigDecimal
operator|.
name|ROUND_CEILING
argument_list|)
return|;
block|}
comment|/** SQL<code>CEIL</code> operator applied to byte values. */
specifier|public
specifier|static
name|byte
name|ceil
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|b0
operator|+
name|b1
operator|-
literal|1
operator|)
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>CEIL</code> operator applied to short values. */
specifier|public
specifier|static
name|short
name|ceil
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
operator|(
name|short
operator|)
operator|(
name|b0
operator|+
name|b1
operator|-
literal|1
operator|)
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>CEIL</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|ceil
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
name|int
name|r
init|=
name|b0
operator|%
name|b1
decl_stmt|;
if|if
condition|(
name|r
operator|>
literal|0
condition|)
block|{
name|r
operator|-=
name|b1
expr_stmt|;
block|}
return|return
name|b0
operator|-
name|r
return|;
block|}
comment|/** SQL<code>CEIL</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|ceil
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
name|b0
operator|+
name|b1
operator|-
literal|1
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|BigDecimal
name|ceil
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|ceil
argument_list|(
name|b0
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b1
argument_list|)
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|int
name|ceil
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|ceil
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|ceil
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
specifier|final
name|BigDecimal
index|[]
name|bigDecimals
init|=
name|b0
operator|.
name|divideAndRemainder
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|BigDecimal
name|r
init|=
name|bigDecimals
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|signum
argument_list|()
operator|>
literal|0
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|subtract
argument_list|(
name|b1
argument_list|)
expr_stmt|;
block|}
return|return
name|b0
operator|.
name|subtract
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|// ABS
comment|/** SQL<code>ABS</code> operator applied to byte values. */
specifier|public
specifier|static
name|byte
name|abs
parameter_list|(
name|byte
name|b0
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to short values. */
specifier|public
specifier|static
name|short
name|abs
parameter_list|(
name|short
name|b0
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|abs
parameter_list|(
name|int
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|abs
parameter_list|(
name|long
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to float values. */
specifier|public
specifier|static
name|float
name|abs
parameter_list|(
name|float
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|abs
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|abs
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|b0
operator|.
name|abs
argument_list|()
return|;
block|}
comment|// Helpers
comment|/** Helper for implementing MIN. Somewhat similar to LEAST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|lesser
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** LEAST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|least
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b1
operator|!=
literal|null
operator|&&
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|boolean
name|greater
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|||
name|b1
return|;
block|}
specifier|public
specifier|static
name|boolean
name|lesser
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|&&
name|b1
return|;
block|}
specifier|public
specifier|static
name|byte
name|greater
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|byte
name|lesser
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|char
name|greater
parameter_list|(
name|char
name|b0
parameter_list|,
name|char
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|char
name|lesser
parameter_list|(
name|char
name|b0
parameter_list|,
name|char
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|short
name|greater
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|short
name|lesser
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|int
name|greater
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|int
name|lesser
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|long
name|greater
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|long
name|lesser
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|float
name|greater
parameter_list|(
name|float
name|b0
parameter_list|,
name|float
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|float
name|lesser
parameter_list|(
name|float
name|b0
parameter_list|,
name|float
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|double
name|greater
parameter_list|(
name|double
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|double
name|lesser
parameter_list|(
name|double
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** Helper for implementing MAX. Somewhat similar to GREATEST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|greater
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** GREATEST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|greatest
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b1
operator|!=
literal|null
operator|&&
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** Boolean comparison. */
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|boolean
name|x
parameter_list|,
name|boolean
name|y
parameter_list|)
block|{
return|return
name|x
operator|==
name|y
condition|?
literal|0
else|:
name|x
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
comment|/** CAST(FLOAT AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|float
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
return|return
literal|"0E0"
return|;
block|}
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|x
argument_list|,
name|MathContext
operator|.
name|DECIMAL32
argument_list|)
operator|.
name|stripTrailingZeros
argument_list|()
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|bigDecimal
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|s
operator|.
name|replaceAll
argument_list|(
literal|"0*E"
argument_list|,
literal|"E"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"E+"
argument_list|,
literal|"E"
argument_list|)
return|;
block|}
comment|/** CAST(DOUBLE AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|double
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
return|return
literal|"0E0"
return|;
block|}
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|x
argument_list|,
name|MathContext
operator|.
name|DECIMAL64
argument_list|)
operator|.
name|stripTrailingZeros
argument_list|()
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|bigDecimal
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|s
operator|.
name|replaceAll
argument_list|(
literal|"0*E"
argument_list|,
literal|"E"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"E+"
argument_list|,
literal|"E"
argument_list|)
return|;
block|}
comment|/** CAST(DECIMAL AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|BigDecimal
name|x
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|x
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
comment|// we want ".1" not "0.1"
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"-0"
argument_list|)
condition|)
block|{
comment|// we want "-.1" not "-0.1"
return|return
literal|"-"
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
comment|/** CAST(BOOLEAN AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|boolean
name|x
parameter_list|)
block|{
comment|// Boolean.toString returns lower case -- no good.
return|return
name|x
condition|?
literal|"TRUE"
else|:
literal|"FALSE"
return|;
block|}
annotation|@
name|NonDeterministic
specifier|private
specifier|static
name|Object
name|cannotConvert
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
name|toType
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot convert "
operator|+
name|o
operator|+
literal|" to "
operator|+
name|toType
argument_list|)
throw|;
block|}
comment|/** CAST(VARCHAR AS BOOLEAN). */
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|trim_
argument_list|(
name|s
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid character for cast"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
operator|!
name|number
operator|.
name|equals
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Boolean
condition|?
operator|(
name|Boolean
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toBoolean
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toBoolean
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Boolean
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Don't need parseByte etc. - Byte.parseByte is sufficient.
specifier|public
specifier|static
name|byte
name|toByte
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Byte
condition|?
operator|(
name|Byte
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toByte
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|Byte
operator|.
name|parseByte
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
name|toByte
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|byteValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|char
name|toChar
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Character
name|toCharBoxed
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Short
operator|.
name|parseShort
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|shortValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Short
condition|?
operator|(
name|Short
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toShort
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toShort
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Short
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|short
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|)
block|{
return|return
name|toInt
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|toLong
argument_list|(
name|v
argument_list|,
name|timeZone
argument_list|)
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toIntOptional
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|toInt
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toIntOptional
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|toInt
argument_list|(
name|v
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Date
name|v
parameter_list|)
block|{
return|return
name|toLong
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|java
operator|.
name|sql
operator|.
name|Time
name|v
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|toLong
argument_list|(
name|v
argument_list|)
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toIntOptional
parameter_list|(
name|java
operator|.
name|sql
operator|.
name|Time
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|toInt
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Integer
condition|?
operator|(
name|Integer
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toInt
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toInt
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Integer
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|int
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Timestamp
name|v
parameter_list|)
block|{
return|return
name|toLong
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
comment|// mainly intended for java.sql.Timestamp but works for other dates also
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
specifier|final
name|long
name|time
init|=
name|v
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
name|time
operator|+
name|timeZone
operator|.
name|getOffset
argument_list|(
name|time
argument_list|)
return|;
block|}
comment|// mainly intended for java.sql.Timestamp but works for other dates also
specifier|public
specifier|static
name|Long
name|toLongOptional
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|toLong
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Long
name|toLongOptional
parameter_list|(
name|Timestamp
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|toLong
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"199"
argument_list|)
operator|&&
name|s
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Long
condition|?
operator|(
name|Long
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toLong
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toLong
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Long
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|long
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|floatValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Float
condition|?
operator|(
name|Float
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toFloat
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toFloat
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Float
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|float
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Double
condition|?
operator|(
name|Double
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toDouble
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toDouble
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Double
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|double
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
comment|// There are some values of "long" that cannot be represented as "double".
comment|// Not so "int". If it isn't a long, go straight to double.
return|return
name|number
operator|instanceof
name|BigDecimal
condition|?
operator|(
name|BigDecimal
operator|)
name|number
else|:
name|number
operator|instanceof
name|BigInteger
condition|?
operator|new
name|BigDecimal
argument_list|(
operator|(
name|BigInteger
operator|)
name|number
argument_list|)
else|:
name|number
operator|instanceof
name|Long
condition|?
operator|new
name|BigDecimal
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
else|:
operator|new
name|BigDecimal
argument_list|(
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Number
condition|?
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|toBigDecimal
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|// Don't need shortValueOf etc. - Short.valueOf is sufficient.
comment|/** Helper for CAST(... AS VARCHAR(maxLength)). */
specifier|public
specifier|static
name|String
name|truncate
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|length
argument_list|()
operator|>
name|maxLength
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
else|:
name|s
return|;
block|}
comment|/** Helper for CAST(... AS VARBINARY(maxLength)). */
specifier|public
specifier|static
name|ByteString
name|truncate
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|length
argument_list|()
operator|>
name|maxLength
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
else|:
name|s
return|;
block|}
comment|/** SQL {@code POSITION(seek IN string)} function. */
specifier|public
specifier|static
name|int
name|position
parameter_list|(
name|String
name|seek
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|indexOf
argument_list|(
name|seek
argument_list|)
operator|+
literal|1
return|;
block|}
comment|/** SQL {@code POSITION(seek IN string)} function. */
specifier|public
specifier|static
name|int
name|position
parameter_list|(
name|ByteString
name|seek
parameter_list|,
name|ByteString
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|indexOf
argument_list|(
name|seek
argument_list|)
operator|+
literal|1
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|long
name|round
parameter_list|(
name|long
name|v
parameter_list|,
name|long
name|x
parameter_list|)
block|{
return|return
name|truncate
argument_list|(
name|v
operator|+
name|x
operator|/
literal|2
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|long
name|truncate
parameter_list|(
name|long
name|v
parameter_list|,
name|long
name|x
parameter_list|)
block|{
name|long
name|remainder
init|=
name|v
operator|%
name|x
decl_stmt|;
if|if
condition|(
name|remainder
operator|<
literal|0
condition|)
block|{
name|remainder
operator|+=
name|x
expr_stmt|;
block|}
return|return
name|v
operator|-
name|remainder
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|int
name|round
parameter_list|(
name|int
name|v
parameter_list|,
name|int
name|x
parameter_list|)
block|{
return|return
name|truncate
argument_list|(
name|v
operator|+
name|x
operator|/
literal|2
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|int
name|truncate
parameter_list|(
name|int
name|v
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|int
name|remainder
init|=
name|v
operator|%
name|x
decl_stmt|;
if|if
condition|(
name|remainder
operator|<
literal|0
condition|)
block|{
name|remainder
operator|+=
name|x
expr_stmt|;
block|}
return|return
name|v
operator|-
name|remainder
return|;
block|}
comment|/** SQL {@code CURRENT_TIMESTAMP} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|long
name|currentTimestamp
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
comment|// Cast required for JDK 1.6.
return|return
operator|(
name|Long
operator|)
name|DataContext
operator|.
name|Variable
operator|.
name|CURRENT_TIMESTAMP
operator|.
name|get
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/** SQL {@code CURRENT_TIME} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|int
name|currentTime
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
name|int
name|time
init|=
operator|(
name|int
operator|)
operator|(
name|currentTimestamp
argument_list|(
name|root
argument_list|)
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
decl_stmt|;
if|if
condition|(
name|time
operator|<
literal|0
condition|)
block|{
name|time
operator|+=
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
expr_stmt|;
block|}
return|return
name|time
return|;
block|}
comment|/** SQL {@code CURRENT_DATE} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|int
name|currentDate
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
specifier|final
name|long
name|timestamp
init|=
name|currentTimestamp
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|int
name|date
init|=
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
decl_stmt|;
specifier|final
name|int
name|time
init|=
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
decl_stmt|;
if|if
condition|(
name|time
operator|<
literal|0
condition|)
block|{
operator|--
name|date
expr_stmt|;
block|}
return|return
name|date
return|;
block|}
comment|/** SQL {@code LOCAL_TIMESTAMP} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|long
name|localTimestamp
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
comment|// Cast required for JDK 1.6.
return|return
operator|(
name|Long
operator|)
name|DataContext
operator|.
name|Variable
operator|.
name|LOCAL_TIMESTAMP
operator|.
name|get
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/** SQL {@code LOCAL_TIME} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|int
name|localTime
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|localTimestamp
argument_list|(
name|root
argument_list|)
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
comment|/** Helper for "array element reference". Caller has already ensured that    * array and index are not null. Index is 1-based, per SQL. */
specifier|public
specifier|static
name|Object
name|arrayItem
parameter_list|(
name|List
name|list
parameter_list|,
name|int
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|<
literal|1
operator|||
name|item
operator|>
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|item
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** Helper for "map element reference". Caller has already ensured that    * array and index are not null. Index is 1-based, per SQL. */
specifier|public
specifier|static
name|Object
name|mapItem
parameter_list|(
name|Map
name|map
parameter_list|,
name|Object
name|item
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|item
argument_list|)
return|;
block|}
comment|/** Implements the {@code [ ... ]} operator on an object whose type is not    * known until runtime.    */
specifier|public
specifier|static
name|Object
name|item
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|index
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
operator|(
name|Map
operator|)
name|object
operator|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|List
operator|&&
name|index
operator|instanceof
name|Number
condition|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|object
decl_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|index
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** NULL&rarr; FALSE, FALSE&rarr; FALSE, TRUE&rarr; TRUE. */
specifier|public
specifier|static
name|boolean
name|isTrue
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|!=
literal|null
operator|&&
name|b
return|;
block|}
comment|/** NULL&rarr; TRUE, FALSE&rarr; FALSE, TRUE&rarr; TRUE. */
specifier|public
specifier|static
name|boolean
name|isNotFalse
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
operator|||
name|b
return|;
block|}
comment|/** NULL&rarr; NULL, FALSE&rarr; TRUE, TRUE&rarr; FALSE. */
specifier|public
specifier|static
name|Boolean
name|not
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
operator|(
name|b
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|!
name|b
return|;
block|}
comment|/** Converts a JDBC array to a list. */
specifier|public
specifier|static
name|List
name|arrayToList
parameter_list|(
specifier|final
name|java
operator|.
name|sql
operator|.
name|Array
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|Primitive
operator|.
name|asList
argument_list|(
name|a
operator|.
name|getArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Support the {@code CURRENT VALUE OF sequence} operator. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|long
name|sequenceCurrentValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getAtomicLong
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Support the {@code NEXT VALUE OF sequence} operator. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|long
name|sequenceNextValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getAtomicLong
argument_list|(
name|key
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|AtomicLong
name|getAtomicLong
parameter_list|(
name|String
name|key
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
name|map
init|=
name|THREAD_SEQUENCES
operator|.
name|get
argument_list|()
decl_stmt|;
name|AtomicLong
name|atomic
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|atomic
operator|==
literal|null
condition|)
block|{
name|atomic
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|atomic
argument_list|)
expr_stmt|;
block|}
return|return
name|atomic
return|;
block|}
comment|/** Support the SLICE function. */
specifier|public
specifier|static
name|List
name|slice
parameter_list|(
name|List
name|list
parameter_list|)
block|{
return|return
name|list
return|;
block|}
comment|/** Support the ELEMENT function. */
specifier|public
specifier|static
name|Object
name|element
parameter_list|(
name|List
name|list
parameter_list|)
block|{
switch|switch
condition|(
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|null
return|;
case|case
literal|1
case|:
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"more than one value"
argument_list|)
throw|;
block|}
block|}
comment|/** Returns a lambda that converts a list to an enumerable. */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Function1
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|,
name|Enumerable
argument_list|<
name|E
argument_list|>
argument_list|>
name|listToEnumerable
parameter_list|()
block|{
comment|//noinspection unchecked
return|return
operator|(
name|Function1
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|,
name|Enumerable
argument_list|<
name|E
argument_list|>
argument_list|>
operator|)
operator|(
name|Function1
operator|)
name|LIST_AS_ENUMERABLE
return|;
block|}
specifier|public
specifier|static
name|Object
index|[]
name|array
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|args
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlFunctions.java
end_comment

end_unit

